// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Forecast Service
///
/// Client for invoking operations on Amazon Forecast Service. Each operation on Amazon Forecast Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_forecast::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_forecast::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_forecast::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateAutoPredictor`](crate::client::fluent_builders::CreateAutoPredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_name(impl Into<String>)`](crate::client::fluent_builders::CreateAutoPredictor::predictor_name) / [`set_predictor_name(Option<String>)`](crate::client::fluent_builders::CreateAutoPredictor::set_predictor_name): <p>A unique name for the predictor</p>
    ///   - [`forecast_horizon(i32)`](crate::client::fluent_builders::CreateAutoPredictor::forecast_horizon) / [`set_forecast_horizon(Option<i32>)`](crate::client::fluent_builders::CreateAutoPredictor::set_forecast_horizon): <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>  <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/4 of the TARGET_TIME_SERIES dataset length. If you are retraining an existing AutoPredictor, then the maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>  <p>If you are upgrading to an AutoPredictor or retraining an existing AutoPredictor, you cannot update the forecast horizon parameter. You can meet this requirement by providing longer time-series in the dataset.</p>
    ///   - [`forecast_types(Vec<String>)`](crate::client::fluent_builders::CreateAutoPredictor::forecast_types) / [`set_forecast_types(Option<Vec<String>>)`](crate::client::fluent_builders::CreateAutoPredictor::set_forecast_types): <p>The forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>.</p>
    ///   - [`forecast_dimensions(Vec<String>)`](crate::client::fluent_builders::CreateAutoPredictor::forecast_dimensions) / [`set_forecast_dimensions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateAutoPredictor::set_forecast_dimensions): <p>An array of dimension (field) names that specify how to group the generated forecast.</p>  <p>For example, if you are generating forecasts for item sales across all your stores, and your dataset contains a <code>store_id</code> field, you would specify <code>store_id</code> as a dimension to group sales forecasts for each store.</p>
    ///   - [`forecast_frequency(impl Into<String>)`](crate::client::fluent_builders::CreateAutoPredictor::forecast_frequency) / [`set_forecast_frequency(Option<String>)`](crate::client::fluent_builders::CreateAutoPredictor::set_forecast_frequency): <p>The frequency of predictions in a forecast.</p>  <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>  <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>  <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
    ///   - [`data_config(DataConfig)`](crate::client::fluent_builders::CreateAutoPredictor::data_config) / [`set_data_config(Option<DataConfig>)`](crate::client::fluent_builders::CreateAutoPredictor::set_data_config): <p>The data configuration for your dataset group and any additional datasets.</p>
    ///   - [`encryption_config(EncryptionConfig)`](crate::client::fluent_builders::CreateAutoPredictor::encryption_config) / [`set_encryption_config(Option<EncryptionConfig>)`](crate::client::fluent_builders::CreateAutoPredictor::set_encryption_config): <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    ///   - [`reference_predictor_arn(impl Into<String>)`](crate::client::fluent_builders::CreateAutoPredictor::reference_predictor_arn) / [`set_reference_predictor_arn(Option<String>)`](crate::client::fluent_builders::CreateAutoPredictor::set_reference_predictor_arn): <p>The ARN of the predictor to retrain or upgrade. This parameter is only used when retraining or upgrading a predictor. When creating a new predictor, do not specify a value for this parameter.</p>  <p>When upgrading or retraining a predictor, only specify values for the <code>ReferencePredictorArn</code> and <code>PredictorName</code>. The value for <code>PredictorName</code> must be a unique predictor name.</p>
    ///   - [`optimization_metric(OptimizationMetric)`](crate::client::fluent_builders::CreateAutoPredictor::optimization_metric) / [`set_optimization_metric(Option<OptimizationMetric>)`](crate::client::fluent_builders::CreateAutoPredictor::set_optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    ///   - [`explain_predictor(bool)`](crate::client::fluent_builders::CreateAutoPredictor::explain_predictor) / [`set_explain_predictor(Option<bool>)`](crate::client::fluent_builders::CreateAutoPredictor::set_explain_predictor): <p>Create an Explainability resource for the predictor.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateAutoPredictor::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateAutoPredictor::set_tags): <p>Optional metadata to help you categorize and organize your predictors. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>  <p>The following restrictions apply to tags:</p>  <ul>   <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>   <li> <p>Maximum number of tags per resource: 50.</p> </li>   <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>   <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>   <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>  </ul>
    ///   - [`monitor_config(MonitorConfig)`](crate::client::fluent_builders::CreateAutoPredictor::monitor_config) / [`set_monitor_config(Option<MonitorConfig>)`](crate::client::fluent_builders::CreateAutoPredictor::set_monitor_config): <p>The configuration details for predictor monitoring. Provide a name for the monitor resource to enable predictor monitoring.</p>  <p>Predictor monitoring allows you to see how your predictor's performance changes over time. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring.html">Predictor Monitoring</a>.</p>
    ///   - [`time_alignment_boundary(TimeAlignmentBoundary)`](crate::client::fluent_builders::CreateAutoPredictor::time_alignment_boundary) / [`set_time_alignment_boundary(Option<TimeAlignmentBoundary>)`](crate::client::fluent_builders::CreateAutoPredictor::set_time_alignment_boundary): <p>The time boundary Forecast uses to align and aggregate any data that doesn't align with your forecast frequency. Provide the unit of time and the time boundary as a key value pair. For more information on specifying a time boundary, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#specifying-time-boundary">Specifying a Time Boundary</a>. If you don't provide a time boundary, Forecast uses a set of <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#default-time-boundaries">Default Time Boundaries</a>.</p>
    /// - On success, responds with [`CreateAutoPredictorOutput`](crate::output::CreateAutoPredictorOutput) with field(s):
    ///   - [`predictor_arn(Option<String>)`](crate::output::CreateAutoPredictorOutput::predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor.</p>
    /// - On failure, responds with [`SdkError<CreateAutoPredictorError>`](crate::error::CreateAutoPredictorError)
    pub fn create_auto_predictor(&self) -> fluent_builders::CreateAutoPredictor {
        fluent_builders::CreateAutoPredictor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDataset`](crate::client::fluent_builders::CreateDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_dataset_name): <p>A name for the dataset.</p>
    ///   - [`domain(Domain)`](crate::client::fluent_builders::CreateDataset::domain) / [`set_domain(Option<Domain>)`](crate::client::fluent_builders::CreateDataset::set_domain): <p>The domain associated with the dataset. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation must match.</p>  <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in the training data that you import to the dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields to be present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Importing datasets</a>.</p>
    ///   - [`dataset_type(DatasetType)`](crate::client::fluent_builders::CreateDataset::dataset_type) / [`set_dataset_type(Option<DatasetType>)`](crate::client::fluent_builders::CreateDataset::set_dataset_type): <p>The dataset type. Valid values depend on the chosen <code>Domain</code>.</p>
    ///   - [`data_frequency(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::data_frequency) / [`set_data_frequency(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_data_frequency): <p>The frequency of data collection. This parameter is required for RELATED_TIME_SERIES datasets.</p>  <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "D" indicates every day and "15min" indicates every 15 minutes.</p>
    ///   - [`schema(Schema)`](crate::client::fluent_builders::CreateDataset::schema) / [`set_schema(Option<Schema>)`](crate::client::fluent_builders::CreateDataset::set_schema): <p>The schema for the dataset. The schema attributes and their order must match the fields in your data. The dataset <code>Domain</code> and <code>DatasetType</code> that you choose determine the minimum required fields in your training data. For information about the required fields for a specific dataset domain and type, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-domains-ds-types.html">Dataset Domains and Dataset Types</a>.</p>
    ///   - [`encryption_config(EncryptionConfig)`](crate::client::fluent_builders::CreateDataset::encryption_config) / [`set_encryption_config(Option<EncryptionConfig>)`](crate::client::fluent_builders::CreateDataset::set_encryption_config): <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDataset::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDataset::set_tags): <p>The optional metadata that you apply to the dataset to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    /// - On success, responds with [`CreateDatasetOutput`](crate::output::CreateDatasetOutput) with field(s):
    ///   - [`dataset_arn(Option<String>)`](crate::output::CreateDatasetOutput::dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetError>`](crate::error::CreateDatasetError)
    pub fn create_dataset(&self) -> fluent_builders::CreateDataset {
        fluent_builders::CreateDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDatasetGroup`](crate::client::fluent_builders::CreateDatasetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetGroup::dataset_group_name) / [`set_dataset_group_name(Option<String>)`](crate::client::fluent_builders::CreateDatasetGroup::set_dataset_group_name): <p>A name for the dataset group.</p>
    ///   - [`domain(Domain)`](crate::client::fluent_builders::CreateDatasetGroup::domain) / [`set_domain(Option<Domain>)`](crate::client::fluent_builders::CreateDatasetGroup::set_domain): <p>The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation must match.</p>  <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in training data that you import to a dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires that <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields are present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Dataset groups</a>.</p>
    ///   - [`dataset_arns(Vec<String>)`](crate::client::fluent_builders::CreateDatasetGroup::dataset_arns) / [`set_dataset_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateDatasetGroup::set_dataset_arns): <p>An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDatasetGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDatasetGroup::set_tags): <p>The optional metadata that you apply to the dataset group to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    /// - On success, responds with [`CreateDatasetGroupOutput`](crate::output::CreateDatasetGroupOutput) with field(s):
    ///   - [`dataset_group_arn(Option<String>)`](crate::output::CreateDatasetGroupOutput::dataset_group_arn): <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetGroupError>`](crate::error::CreateDatasetGroupError)
    pub fn create_dataset_group(&self) -> fluent_builders::CreateDatasetGroup {
        fluent_builders::CreateDatasetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDatasetImportJob`](crate::client::fluent_builders::CreateDatasetImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_import_job_name(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::dataset_import_job_name) / [`set_dataset_import_job_name(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_dataset_import_job_name): <p>The name for the dataset import job. We recommend including the current timestamp in the name, for example, <code>20190721DatasetImport</code>. This can help you avoid getting a <code>ResourceAlreadyExistsException</code> exception.</p>
    ///   - [`dataset_arn(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::dataset_arn) / [`set_dataset_arn(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_dataset_arn): <p>The Amazon Resource Name (ARN) of the Amazon Forecast dataset that you want to import data to.</p>
    ///   - [`data_source(DataSource)`](crate::client::fluent_builders::CreateDatasetImportJob::data_source) / [`set_data_source(Option<DataSource>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_data_source): <p>The location of the training data to import and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data. The training data must be stored in an Amazon S3 bucket.</p>  <p>If encryption is used, <code>DataSource</code> must include an AWS Key Management Service (KMS) key and the IAM role must allow Amazon Forecast permission to access the key. The KMS key and IAM role must match those specified in the <code>EncryptionConfig</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation.</p>
    ///   - [`timestamp_format(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::timestamp_format) / [`set_timestamp_format(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_timestamp_format): <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>  <ul>   <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>   <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>  </ul>  <p>If the format isn't specified, Amazon Forecast expects the format to be "yyyy-MM-dd HH:mm:ss".</p>
    ///   - [`time_zone(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::time_zone) / [`set_time_zone(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_time_zone): <p>A single time zone for every item in your dataset. This option is ideal for datasets with all timestamps within a single time zone, or if all timestamps are normalized to a single time zone. </p>  <p>Refer to the <a href="http://joda-time.sourceforge.net/timezones.html">Joda-Time API</a> for a complete list of valid time zone names.</p>
    ///   - [`use_geolocation_for_time_zone(bool)`](crate::client::fluent_builders::CreateDatasetImportJob::use_geolocation_for_time_zone) / [`set_use_geolocation_for_time_zone(bool)`](crate::client::fluent_builders::CreateDatasetImportJob::set_use_geolocation_for_time_zone): <p>Automatically derive time zone information from the geolocation attribute. This option is ideal for datasets that contain timestamps in multiple time zones and those timestamps are expressed in local time.</p>
    ///   - [`geolocation_format(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::geolocation_format) / [`set_geolocation_format(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_geolocation_format): <p>The format of the geolocation attribute. The geolocation attribute can be formatted in one of two ways:</p>  <ul>   <li> <p> <code>LAT_LONG</code> - the latitude and longitude in decimal format (Example: 47.61_-122.33).</p> </li>   <li> <p> <code>CC_POSTALCODE</code> (US Only) - the country code (US), followed by the 5-digit ZIP code (Example: US_98121).</p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDatasetImportJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_tags): <p>The optional metadata that you apply to the dataset import job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    ///   - [`format(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::format) / [`set_format(Option<String>)`](crate::client::fluent_builders::CreateDatasetImportJob::set_format): <p>The format of the imported data, CSV or PARQUET. The default value is CSV.</p>
    /// - On success, responds with [`CreateDatasetImportJobOutput`](crate::output::CreateDatasetImportJobOutput) with field(s):
    ///   - [`dataset_import_job_arn(Option<String>)`](crate::output::CreateDatasetImportJobOutput::dataset_import_job_arn): <p>The Amazon Resource Name (ARN) of the dataset import job.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetImportJobError>`](crate::error::CreateDatasetImportJobError)
    pub fn create_dataset_import_job(&self) -> fluent_builders::CreateDatasetImportJob {
        fluent_builders::CreateDatasetImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateExplainability`](crate::client::fluent_builders::CreateExplainability) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_name(impl Into<String>)`](crate::client::fluent_builders::CreateExplainability::explainability_name) / [`set_explainability_name(Option<String>)`](crate::client::fluent_builders::CreateExplainability::set_explainability_name): <p>A unique name for the Explainability.</p>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::CreateExplainability::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::CreateExplainability::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
    ///   - [`explainability_config(ExplainabilityConfig)`](crate::client::fluent_builders::CreateExplainability::explainability_config) / [`set_explainability_config(Option<ExplainabilityConfig>)`](crate::client::fluent_builders::CreateExplainability::set_explainability_config): <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    ///   - [`data_source(DataSource)`](crate::client::fluent_builders::CreateExplainability::data_source) / [`set_data_source(Option<DataSource>)`](crate::client::fluent_builders::CreateExplainability::set_data_source): <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    ///   - [`schema(Schema)`](crate::client::fluent_builders::CreateExplainability::schema) / [`set_schema(Option<Schema>)`](crate::client::fluent_builders::CreateExplainability::set_schema): <p>Defines the fields of a dataset.</p>
    ///   - [`enable_visualization(bool)`](crate::client::fluent_builders::CreateExplainability::enable_visualization) / [`set_enable_visualization(Option<bool>)`](crate::client::fluent_builders::CreateExplainability::set_enable_visualization): <p>Create an Explainability visualization that is viewable within the AWS console.</p>
    ///   - [`start_date_time(impl Into<String>)`](crate::client::fluent_builders::CreateExplainability::start_date_time) / [`set_start_date_time(Option<String>)`](crate::client::fluent_builders::CreateExplainability::set_start_date_time): <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>  <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    ///   - [`end_date_time(impl Into<String>)`](crate::client::fluent_builders::CreateExplainability::end_date_time) / [`set_end_date_time(Option<String>)`](crate::client::fluent_builders::CreateExplainability::set_end_date_time): <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>  <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateExplainability::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateExplainability::set_tags): <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>  <p>The following restrictions apply to tags:</p>  <ul>   <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>   <li> <p>Maximum number of tags per resource: 50.</p> </li>   <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>   <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>   <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>  </ul>
    /// - On success, responds with [`CreateExplainabilityOutput`](crate::output::CreateExplainabilityOutput) with field(s):
    ///   - [`explainability_arn(Option<String>)`](crate::output::CreateExplainabilityOutput::explainability_arn): <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    /// - On failure, responds with [`SdkError<CreateExplainabilityError>`](crate::error::CreateExplainabilityError)
    pub fn create_explainability(&self) -> fluent_builders::CreateExplainability {
        fluent_builders::CreateExplainability::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateExplainabilityExport`](crate::client::fluent_builders::CreateExplainabilityExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_export_name(impl Into<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::explainability_export_name) / [`set_explainability_export_name(Option<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::set_explainability_export_name): <p>A unique name for the Explainability export.</p>
    ///   - [`explainability_arn(impl Into<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::explainability_arn) / [`set_explainability_arn(Option<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::set_explainability_arn): <p>The Amazon Resource Name (ARN) of the Explainability to export.</p>
    ///   - [`destination(DataDestination)`](crate::client::fluent_builders::CreateExplainabilityExport::destination) / [`set_destination(Option<DataDestination>)`](crate::client::fluent_builders::CreateExplainabilityExport::set_destination): <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateExplainabilityExport::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateExplainabilityExport::set_tags): <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>  <p>The following restrictions apply to tags:</p>  <ul>   <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>   <li> <p>Maximum number of tags per resource: 50.</p> </li>   <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>   <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>   <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>  </ul>
    ///   - [`format(impl Into<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::format) / [`set_format(Option<String>)`](crate::client::fluent_builders::CreateExplainabilityExport::set_format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On success, responds with [`CreateExplainabilityExportOutput`](crate::output::CreateExplainabilityExportOutput) with field(s):
    ///   - [`explainability_export_arn(Option<String>)`](crate::output::CreateExplainabilityExportOutput::explainability_export_arn): <p>The Amazon Resource Name (ARN) of the export.</p>
    /// - On failure, responds with [`SdkError<CreateExplainabilityExportError>`](crate::error::CreateExplainabilityExportError)
    pub fn create_explainability_export(&self) -> fluent_builders::CreateExplainabilityExport {
        fluent_builders::CreateExplainabilityExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateForecast`](crate::client::fluent_builders::CreateForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_name(impl Into<String>)`](crate::client::fluent_builders::CreateForecast::forecast_name) / [`set_forecast_name(Option<String>)`](crate::client::fluent_builders::CreateForecast::set_forecast_name): <p>A name for the forecast.</p>
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::CreateForecast::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::CreateForecast::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor to use to generate the forecast.</p>
    ///   - [`forecast_types(Vec<String>)`](crate::client::fluent_builders::CreateForecast::forecast_types) / [`set_forecast_types(Option<Vec<String>>)`](crate::client::fluent_builders::CreateForecast::set_forecast_types): <p>The quantiles at which probabilistic forecasts are generated. <b>You can currently specify up to 5 quantiles per forecast</b>. Accepted values include <code>0.01 to 0.99</code> (increments of .01 only) and <code>mean</code>. The mean forecast is different from the median (0.50) when the distribution is not symmetric (for example, Beta and Negative Binomial). </p>  <p>The default quantiles are the quantiles you specified during predictor creation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateForecast::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateForecast::set_tags): <p>The optional metadata that you apply to the forecast to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    ///   - [`time_series_selector(TimeSeriesSelector)`](crate::client::fluent_builders::CreateForecast::time_series_selector) / [`set_time_series_selector(Option<TimeSeriesSelector>)`](crate::client::fluent_builders::CreateForecast::set_time_series_selector): <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>  <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>  <ul>   <li> <p> <code>DataSource</code> </p> </li>   <li> <p> <code>Format</code> </p> </li>   <li> <p> <code>Schema</code> </p> </li>  </ul>
    /// - On success, responds with [`CreateForecastOutput`](crate::output::CreateForecastOutput) with field(s):
    ///   - [`forecast_arn(Option<String>)`](crate::output::CreateForecastOutput::forecast_arn): <p>The Amazon Resource Name (ARN) of the forecast.</p>
    /// - On failure, responds with [`SdkError<CreateForecastError>`](crate::error::CreateForecastError)
    pub fn create_forecast(&self) -> fluent_builders::CreateForecast {
        fluent_builders::CreateForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateForecastExportJob`](crate::client::fluent_builders::CreateForecastExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_export_job_name(impl Into<String>)`](crate::client::fluent_builders::CreateForecastExportJob::forecast_export_job_name) / [`set_forecast_export_job_name(Option<String>)`](crate::client::fluent_builders::CreateForecastExportJob::set_forecast_export_job_name): <p>The name for the forecast export job.</p>
    ///   - [`forecast_arn(impl Into<String>)`](crate::client::fluent_builders::CreateForecastExportJob::forecast_arn) / [`set_forecast_arn(Option<String>)`](crate::client::fluent_builders::CreateForecastExportJob::set_forecast_arn): <p>The Amazon Resource Name (ARN) of the forecast that you want to export.</p>
    ///   - [`destination(DataDestination)`](crate::client::fluent_builders::CreateForecastExportJob::destination) / [`set_destination(Option<DataDestination>)`](crate::client::fluent_builders::CreateForecastExportJob::set_destination): <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>  <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateForecastExportJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateForecastExportJob::set_tags): <p>The optional metadata that you apply to the forecast export job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    ///   - [`format(impl Into<String>)`](crate::client::fluent_builders::CreateForecastExportJob::format) / [`set_format(Option<String>)`](crate::client::fluent_builders::CreateForecastExportJob::set_format): <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
    /// - On success, responds with [`CreateForecastExportJobOutput`](crate::output::CreateForecastExportJobOutput) with field(s):
    ///   - [`forecast_export_job_arn(Option<String>)`](crate::output::CreateForecastExportJobOutput::forecast_export_job_arn): <p>The Amazon Resource Name (ARN) of the export job.</p>
    /// - On failure, responds with [`SdkError<CreateForecastExportJobError>`](crate::error::CreateForecastExportJobError)
    pub fn create_forecast_export_job(&self) -> fluent_builders::CreateForecastExportJob {
        fluent_builders::CreateForecastExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMonitor`](crate::client::fluent_builders::CreateMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::client::fluent_builders::CreateMonitor::monitor_name) / [`set_monitor_name(Option<String>)`](crate::client::fluent_builders::CreateMonitor::set_monitor_name): <p>The name of the monitor resource.</p>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::CreateMonitor::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::CreateMonitor::set_resource_arn): <p>The Amazon Resource Name (ARN) of the predictor to monitor.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateMonitor::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateMonitor::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the monitor resource.</p>
    /// - On success, responds with [`CreateMonitorOutput`](crate::output::CreateMonitorOutput) with field(s):
    ///   - [`monitor_arn(Option<String>)`](crate::output::CreateMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor resource.</p>
    /// - On failure, responds with [`SdkError<CreateMonitorError>`](crate::error::CreateMonitorError)
    pub fn create_monitor(&self) -> fluent_builders::CreateMonitor {
        fluent_builders::CreateMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePredictor`](crate::client::fluent_builders::CreatePredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_name(impl Into<String>)`](crate::client::fluent_builders::CreatePredictor::predictor_name) / [`set_predictor_name(Option<String>)`](crate::client::fluent_builders::CreatePredictor::set_predictor_name): <p>A name for the predictor.</p>
    ///   - [`algorithm_arn(impl Into<String>)`](crate::client::fluent_builders::CreatePredictor::algorithm_arn) / [`set_algorithm_arn(Option<String>)`](crate::client::fluent_builders::CreatePredictor::set_algorithm_arn): <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>  <p class="title"> <b>Supported algorithms:</b> </p>  <ul>   <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>   <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>   <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>   <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>   <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>   <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>  </ul>
    ///   - [`forecast_horizon(i32)`](crate::client::fluent_builders::CreatePredictor::forecast_horizon) / [`set_forecast_horizon(Option<i32>)`](crate::client::fluent_builders::CreatePredictor::set_forecast_horizon): <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>  <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>  <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
    ///   - [`forecast_types(Vec<String>)`](crate::client::fluent_builders::CreatePredictor::forecast_types) / [`set_forecast_types(Option<Vec<String>>)`](crate::client::fluent_builders::CreatePredictor::set_forecast_types): <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>  <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
    ///   - [`perform_auto_ml(bool)`](crate::client::fluent_builders::CreatePredictor::perform_auto_ml) / [`set_perform_auto_ml(Option<bool>)`](crate::client::fluent_builders::CreatePredictor::set_perform_auto_ml): <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>  <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>  <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
    ///   - [`auto_ml_override_strategy(AutoMlOverrideStrategy)`](crate::client::fluent_builders::CreatePredictor::auto_ml_override_strategy) / [`set_auto_ml_override_strategy(Option<AutoMlOverrideStrategy>)`](crate::client::fluent_builders::CreatePredictor::set_auto_ml_override_strategy): <note>   <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>  </note>  <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>  <p>This parameter is only valid for predictors trained using AutoML.</p>
    ///   - [`perform_hpo(bool)`](crate::client::fluent_builders::CreatePredictor::perform_hpo) / [`set_perform_hpo(Option<bool>)`](crate::client::fluent_builders::CreatePredictor::set_perform_hpo): <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>  <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>  <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>  <p>The following algorithms support HPO:</p>  <ul>   <li> <p>DeepAR+</p> </li>   <li> <p>CNN-QR</p> </li>  </ul>
    ///   - [`training_parameters(HashMap<String, String>)`](crate::client::fluent_builders::CreatePredictor::training_parameters) / [`set_training_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreatePredictor::set_training_parameters): <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
    ///   - [`evaluation_parameters(EvaluationParameters)`](crate::client::fluent_builders::CreatePredictor::evaluation_parameters) / [`set_evaluation_parameters(Option<EvaluationParameters>)`](crate::client::fluent_builders::CreatePredictor::set_evaluation_parameters): <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    ///   - [`hpo_config(HyperParameterTuningJobConfig)`](crate::client::fluent_builders::CreatePredictor::hpo_config) / [`set_hpo_config(Option<HyperParameterTuningJobConfig>)`](crate::client::fluent_builders::CreatePredictor::set_hpo_config): <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>  <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::CreatePredictor::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::CreatePredictor::set_input_data_config): <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    ///   - [`featurization_config(FeaturizationConfig)`](crate::client::fluent_builders::CreatePredictor::featurization_config) / [`set_featurization_config(Option<FeaturizationConfig>)`](crate::client::fluent_builders::CreatePredictor::set_featurization_config): <p>The featurization configuration.</p>
    ///   - [`encryption_config(EncryptionConfig)`](crate::client::fluent_builders::CreatePredictor::encryption_config) / [`set_encryption_config(Option<EncryptionConfig>)`](crate::client::fluent_builders::CreatePredictor::set_encryption_config): <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePredictor::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePredictor::set_tags): <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    ///   - [`optimization_metric(OptimizationMetric)`](crate::client::fluent_builders::CreatePredictor::optimization_metric) / [`set_optimization_metric(Option<OptimizationMetric>)`](crate::client::fluent_builders::CreatePredictor::set_optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    /// - On success, responds with [`CreatePredictorOutput`](crate::output::CreatePredictorOutput) with field(s):
    ///   - [`predictor_arn(Option<String>)`](crate::output::CreatePredictorOutput::predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor.</p>
    /// - On failure, responds with [`SdkError<CreatePredictorError>`](crate::error::CreatePredictorError)
    pub fn create_predictor(&self) -> fluent_builders::CreatePredictor {
        fluent_builders::CreatePredictor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePredictorBacktestExportJob`](crate::client::fluent_builders::CreatePredictorBacktestExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_backtest_export_job_name(impl Into<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::predictor_backtest_export_job_name) / [`set_predictor_backtest_export_job_name(Option<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::set_predictor_backtest_export_job_name): <p>The name for the backtest export job.</p>
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor that you want to export.</p>
    ///   - [`destination(DataDestination)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::destination) / [`set_destination(Option<DataDestination>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::set_destination): <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::set_tags): <p>Optional metadata to help you categorize and organize your backtests. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>  <p>The following restrictions apply to tags:</p>  <ul>   <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>   <li> <p>Maximum number of tags per resource: 50.</p> </li>   <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>   <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>   <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>  </ul>
    ///   - [`format(impl Into<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::format) / [`set_format(Option<String>)`](crate::client::fluent_builders::CreatePredictorBacktestExportJob::set_format): <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
    /// - On success, responds with [`CreatePredictorBacktestExportJobOutput`](crate::output::CreatePredictorBacktestExportJobOutput) with field(s):
    ///   - [`predictor_backtest_export_job_arn(Option<String>)`](crate::output::CreatePredictorBacktestExportJobOutput::predictor_backtest_export_job_arn): <p>The Amazon Resource Name (ARN) of the predictor backtest export job that you want to export.</p>
    /// - On failure, responds with [`SdkError<CreatePredictorBacktestExportJobError>`](crate::error::CreatePredictorBacktestExportJobError)
    pub fn create_predictor_backtest_export_job(
        &self,
    ) -> fluent_builders::CreatePredictorBacktestExportJob {
        fluent_builders::CreatePredictorBacktestExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWhatIfAnalysis`](crate::client::fluent_builders::CreateWhatIfAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_analysis_name(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::what_if_analysis_name) / [`set_what_if_analysis_name(Option<String>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::set_what_if_analysis_name): <p>The name of the what-if analysis. Each name must be unique.</p>
    ///   - [`forecast_arn(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::forecast_arn) / [`set_forecast_arn(Option<String>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::set_forecast_arn): <p>The Amazon Resource Name (ARN) of the baseline forecast.</p>
    ///   - [`time_series_selector(TimeSeriesSelector)`](crate::client::fluent_builders::CreateWhatIfAnalysis::time_series_selector) / [`set_time_series_selector(Option<TimeSeriesSelector>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::set_time_series_selector): <p>Defines the set of time series that are used in the what-if analysis with a <code>TimeSeriesIdentifiers</code> object. What-if analyses are performed only for the time series in this object.</p>  <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>  <ul>   <li> <p> <code>DataSource</code> </p> </li>   <li> <p> <code>Format</code> </p> </li>   <li> <p> <code>Schema</code> </p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWhatIfAnalysis::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    /// - On success, responds with [`CreateWhatIfAnalysisOutput`](crate::output::CreateWhatIfAnalysisOutput) with field(s):
    ///   - [`what_if_analysis_arn(Option<String>)`](crate::output::CreateWhatIfAnalysisOutput::what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    /// - On failure, responds with [`SdkError<CreateWhatIfAnalysisError>`](crate::error::CreateWhatIfAnalysisError)
    pub fn create_what_if_analysis(&self) -> fluent_builders::CreateWhatIfAnalysis {
        fluent_builders::CreateWhatIfAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWhatIfForecast`](crate::client::fluent_builders::CreateWhatIfForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_name(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfForecast::what_if_forecast_name) / [`set_what_if_forecast_name(Option<String>)`](crate::client::fluent_builders::CreateWhatIfForecast::set_what_if_forecast_name): <p>The name of the what-if forecast. Names must be unique within each what-if analysis.</p>
    ///   - [`what_if_analysis_arn(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfForecast::what_if_analysis_arn) / [`set_what_if_analysis_arn(Option<String>)`](crate::client::fluent_builders::CreateWhatIfForecast::set_what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    ///   - [`time_series_transformations(Vec<TimeSeriesTransformation>)`](crate::client::fluent_builders::CreateWhatIfForecast::time_series_transformations) / [`set_time_series_transformations(Option<Vec<TimeSeriesTransformation>>)`](crate::client::fluent_builders::CreateWhatIfForecast::set_time_series_transformations): <p>The transformations that are applied to the baseline time series. Each transformation contains an action and a set of conditions. An action is applied only when all conditions are met. If no conditions are provided, the action is applied to all items.</p>
    ///   - [`time_series_replacements_data_source(TimeSeriesReplacementsDataSource)`](crate::client::fluent_builders::CreateWhatIfForecast::time_series_replacements_data_source) / [`set_time_series_replacements_data_source(Option<TimeSeriesReplacementsDataSource>)`](crate::client::fluent_builders::CreateWhatIfForecast::set_time_series_replacements_data_source): <p>The replacement time series dataset, which contains the rows that you want to change in the related time series dataset. A replacement time series does not need to contain all rows that are in the baseline related time series. Include only the rows (measure-dimension combinations) that you want to include in the what-if forecast. This dataset is merged with the original time series to create a transformed dataset that is used for the what-if analysis.</p>  <p>This dataset should contain the items to modify (such as item_id or workforce_type), any relevant dimensions, the timestamp column, and at least one of the related time series columns. This file should not contain duplicate timestamps for the same time series.</p>  <p>Timestamps and item_ids not included in this dataset are not included in the what-if analysis. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWhatIfForecast::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWhatIfForecast::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    /// - On success, responds with [`CreateWhatIfForecastOutput`](crate::output::CreateWhatIfForecastOutput) with field(s):
    ///   - [`what_if_forecast_arn(Option<String>)`](crate::output::CreateWhatIfForecastOutput::what_if_forecast_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    /// - On failure, responds with [`SdkError<CreateWhatIfForecastError>`](crate::error::CreateWhatIfForecastError)
    pub fn create_what_if_forecast(&self) -> fluent_builders::CreateWhatIfForecast {
        fluent_builders::CreateWhatIfForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWhatIfForecastExport`](crate::client::fluent_builders::CreateWhatIfForecastExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_export_name(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::what_if_forecast_export_name) / [`set_what_if_forecast_export_name(Option<String>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::set_what_if_forecast_export_name): <p>The name of the what-if forecast to export.</p>
    ///   - [`what_if_forecast_arns(Vec<String>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::what_if_forecast_arns) / [`set_what_if_forecast_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::set_what_if_forecast_arns): <p>The list of what-if forecast Amazon Resource Names (ARNs) to export.</p>
    ///   - [`destination(DataDestination)`](crate::client::fluent_builders::CreateWhatIfForecastExport::destination) / [`set_destination(Option<DataDestination>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::set_destination): <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>  <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    ///   - [`format(impl Into<String>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::format) / [`set_format(Option<String>)`](crate::client::fluent_builders::CreateWhatIfForecastExport::set_format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On success, responds with [`CreateWhatIfForecastExportOutput`](crate::output::CreateWhatIfForecastExportOutput) with field(s):
    ///   - [`what_if_forecast_export_arn(Option<String>)`](crate::output::CreateWhatIfForecastExportOutput::what_if_forecast_export_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    /// - On failure, responds with [`SdkError<CreateWhatIfForecastExportError>`](crate::error::CreateWhatIfForecastExportError)
    pub fn create_what_if_forecast_export(&self) -> fluent_builders::CreateWhatIfForecastExport {
        fluent_builders::CreateWhatIfForecastExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataset`](crate::client::fluent_builders::DeleteDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteDataset::dataset_arn) / [`set_dataset_arn(Option<String>)`](crate::client::fluent_builders::DeleteDataset::set_dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset to delete.</p>
    /// - On success, responds with [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetError>`](crate::error::DeleteDatasetError)
    pub fn delete_dataset(&self) -> fluent_builders::DeleteDataset {
        fluent_builders::DeleteDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDatasetGroup`](crate::client::fluent_builders::DeleteDatasetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_group_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteDatasetGroup::dataset_group_arn) / [`set_dataset_group_arn(Option<String>)`](crate::client::fluent_builders::DeleteDatasetGroup::set_dataset_group_arn): <p>The Amazon Resource Name (ARN) of the dataset group to delete.</p>
    /// - On success, responds with [`DeleteDatasetGroupOutput`](crate::output::DeleteDatasetGroupOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetGroupError>`](crate::error::DeleteDatasetGroupError)
    pub fn delete_dataset_group(&self) -> fluent_builders::DeleteDatasetGroup {
        fluent_builders::DeleteDatasetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDatasetImportJob`](crate::client::fluent_builders::DeleteDatasetImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_import_job_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteDatasetImportJob::dataset_import_job_arn) / [`set_dataset_import_job_arn(Option<String>)`](crate::client::fluent_builders::DeleteDatasetImportJob::set_dataset_import_job_arn): <p>The Amazon Resource Name (ARN) of the dataset import job to delete.</p>
    /// - On success, responds with [`DeleteDatasetImportJobOutput`](crate::output::DeleteDatasetImportJobOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetImportJobError>`](crate::error::DeleteDatasetImportJobError)
    pub fn delete_dataset_import_job(&self) -> fluent_builders::DeleteDatasetImportJob {
        fluent_builders::DeleteDatasetImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExplainability`](crate::client::fluent_builders::DeleteExplainability) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteExplainability::explainability_arn) / [`set_explainability_arn(Option<String>)`](crate::client::fluent_builders::DeleteExplainability::set_explainability_arn): <p>The Amazon Resource Name (ARN) of the Explainability resource to delete.</p>
    /// - On success, responds with [`DeleteExplainabilityOutput`](crate::output::DeleteExplainabilityOutput)

    /// - On failure, responds with [`SdkError<DeleteExplainabilityError>`](crate::error::DeleteExplainabilityError)
    pub fn delete_explainability(&self) -> fluent_builders::DeleteExplainability {
        fluent_builders::DeleteExplainability::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExplainabilityExport`](crate::client::fluent_builders::DeleteExplainabilityExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_export_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteExplainabilityExport::explainability_export_arn) / [`set_explainability_export_arn(Option<String>)`](crate::client::fluent_builders::DeleteExplainabilityExport::set_explainability_export_arn): <p>The Amazon Resource Name (ARN) of the Explainability export to delete. </p>
    /// - On success, responds with [`DeleteExplainabilityExportOutput`](crate::output::DeleteExplainabilityExportOutput)

    /// - On failure, responds with [`SdkError<DeleteExplainabilityExportError>`](crate::error::DeleteExplainabilityExportError)
    pub fn delete_explainability_export(&self) -> fluent_builders::DeleteExplainabilityExport {
        fluent_builders::DeleteExplainabilityExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteForecast`](crate::client::fluent_builders::DeleteForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteForecast::forecast_arn) / [`set_forecast_arn(Option<String>)`](crate::client::fluent_builders::DeleteForecast::set_forecast_arn): <p>The Amazon Resource Name (ARN) of the forecast to delete.</p>
    /// - On success, responds with [`DeleteForecastOutput`](crate::output::DeleteForecastOutput)

    /// - On failure, responds with [`SdkError<DeleteForecastError>`](crate::error::DeleteForecastError)
    pub fn delete_forecast(&self) -> fluent_builders::DeleteForecast {
        fluent_builders::DeleteForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteForecastExportJob`](crate::client::fluent_builders::DeleteForecastExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_export_job_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteForecastExportJob::forecast_export_job_arn) / [`set_forecast_export_job_arn(Option<String>)`](crate::client::fluent_builders::DeleteForecastExportJob::set_forecast_export_job_arn): <p>The Amazon Resource Name (ARN) of the forecast export job to delete.</p>
    /// - On success, responds with [`DeleteForecastExportJobOutput`](crate::output::DeleteForecastExportJobOutput)

    /// - On failure, responds with [`SdkError<DeleteForecastExportJobError>`](crate::error::DeleteForecastExportJobError)
    pub fn delete_forecast_export_job(&self) -> fluent_builders::DeleteForecastExportJob {
        fluent_builders::DeleteForecastExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMonitor`](crate::client::fluent_builders::DeleteMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteMonitor::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::DeleteMonitor::set_monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor resource to delete.</p>
    /// - On success, responds with [`DeleteMonitorOutput`](crate::output::DeleteMonitorOutput)

    /// - On failure, responds with [`SdkError<DeleteMonitorError>`](crate::error::DeleteMonitorError)
    pub fn delete_monitor(&self) -> fluent_builders::DeleteMonitor {
        fluent_builders::DeleteMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePredictor`](crate::client::fluent_builders::DeletePredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::DeletePredictor::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::DeletePredictor::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor to delete.</p>
    /// - On success, responds with [`DeletePredictorOutput`](crate::output::DeletePredictorOutput)

    /// - On failure, responds with [`SdkError<DeletePredictorError>`](crate::error::DeletePredictorError)
    pub fn delete_predictor(&self) -> fluent_builders::DeletePredictor {
        fluent_builders::DeletePredictor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePredictorBacktestExportJob`](crate::client::fluent_builders::DeletePredictorBacktestExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_backtest_export_job_arn(impl Into<String>)`](crate::client::fluent_builders::DeletePredictorBacktestExportJob::predictor_backtest_export_job_arn) / [`set_predictor_backtest_export_job_arn(Option<String>)`](crate::client::fluent_builders::DeletePredictorBacktestExportJob::set_predictor_backtest_export_job_arn): <p>The Amazon Resource Name (ARN) of the predictor backtest export job to delete.</p>
    /// - On success, responds with [`DeletePredictorBacktestExportJobOutput`](crate::output::DeletePredictorBacktestExportJobOutput)

    /// - On failure, responds with [`SdkError<DeletePredictorBacktestExportJobError>`](crate::error::DeletePredictorBacktestExportJobError)
    pub fn delete_predictor_backtest_export_job(
        &self,
    ) -> fluent_builders::DeletePredictorBacktestExportJob {
        fluent_builders::DeletePredictorBacktestExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteResourceTree`](crate::client::fluent_builders::DeleteResourceTree) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteResourceTree::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DeleteResourceTree::set_resource_arn): <p>The Amazon Resource Name (ARN) of the parent resource to delete. All child resources of the parent resource will also be deleted.</p>
    /// - On success, responds with [`DeleteResourceTreeOutput`](crate::output::DeleteResourceTreeOutput)

    /// - On failure, responds with [`SdkError<DeleteResourceTreeError>`](crate::error::DeleteResourceTreeError)
    pub fn delete_resource_tree(&self) -> fluent_builders::DeleteResourceTree {
        fluent_builders::DeleteResourceTree::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWhatIfAnalysis`](crate::client::fluent_builders::DeleteWhatIfAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_analysis_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteWhatIfAnalysis::what_if_analysis_arn) / [`set_what_if_analysis_arn(Option<String>)`](crate::client::fluent_builders::DeleteWhatIfAnalysis::set_what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis that you want to delete.</p>
    /// - On success, responds with [`DeleteWhatIfAnalysisOutput`](crate::output::DeleteWhatIfAnalysisOutput)

    /// - On failure, responds with [`SdkError<DeleteWhatIfAnalysisError>`](crate::error::DeleteWhatIfAnalysisError)
    pub fn delete_what_if_analysis(&self) -> fluent_builders::DeleteWhatIfAnalysis {
        fluent_builders::DeleteWhatIfAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWhatIfForecast`](crate::client::fluent_builders::DeleteWhatIfForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteWhatIfForecast::what_if_forecast_arn) / [`set_what_if_forecast_arn(Option<String>)`](crate::client::fluent_builders::DeleteWhatIfForecast::set_what_if_forecast_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast that you want to delete.</p>
    /// - On success, responds with [`DeleteWhatIfForecastOutput`](crate::output::DeleteWhatIfForecastOutput)

    /// - On failure, responds with [`SdkError<DeleteWhatIfForecastError>`](crate::error::DeleteWhatIfForecastError)
    pub fn delete_what_if_forecast(&self) -> fluent_builders::DeleteWhatIfForecast {
        fluent_builders::DeleteWhatIfForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWhatIfForecastExport`](crate::client::fluent_builders::DeleteWhatIfForecastExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_export_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteWhatIfForecastExport::what_if_forecast_export_arn) / [`set_what_if_forecast_export_arn(Option<String>)`](crate::client::fluent_builders::DeleteWhatIfForecastExport::set_what_if_forecast_export_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast export that you want to delete.</p>
    /// - On success, responds with [`DeleteWhatIfForecastExportOutput`](crate::output::DeleteWhatIfForecastExportOutput)

    /// - On failure, responds with [`SdkError<DeleteWhatIfForecastExportError>`](crate::error::DeleteWhatIfForecastExportError)
    pub fn delete_what_if_forecast_export(&self) -> fluent_builders::DeleteWhatIfForecastExport {
        fluent_builders::DeleteWhatIfForecastExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAutoPredictor`](crate::client::fluent_builders::DescribeAutoPredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeAutoPredictor::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::DescribeAutoPredictor::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor.</p>
    /// - On success, responds with [`DescribeAutoPredictorOutput`](crate::output::DescribeAutoPredictorOutput) with field(s):
    ///   - [`predictor_arn(Option<String>)`](crate::output::DescribeAutoPredictorOutput::predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor</p>
    ///   - [`predictor_name(Option<String>)`](crate::output::DescribeAutoPredictorOutput::predictor_name): <p>The name of the predictor.</p>
    ///   - [`forecast_horizon(Option<i32>)`](crate::output::DescribeAutoPredictorOutput::forecast_horizon): <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
    ///   - [`forecast_types(Option<Vec<String>>)`](crate::output::DescribeAutoPredictorOutput::forecast_types): <p>The forecast types used during predictor training. Default value is ["0.1","0.5","0.9"].</p>
    ///   - [`forecast_frequency(Option<String>)`](crate::output::DescribeAutoPredictorOutput::forecast_frequency): <p>The frequency of predictions in a forecast.</p>  <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    ///   - [`forecast_dimensions(Option<Vec<String>>)`](crate::output::DescribeAutoPredictorOutput::forecast_dimensions): <p>An array of dimension (field) names that specify the attributes used to group your time series.</p>
    ///   - [`dataset_import_job_arns(Option<Vec<String>>)`](crate::output::DescribeAutoPredictorOutput::dataset_import_job_arns): <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    ///   - [`data_config(Option<DataConfig>)`](crate::output::DescribeAutoPredictorOutput::data_config): <p>The data configuration for your dataset group and any additional datasets.</p>
    ///   - [`encryption_config(Option<EncryptionConfig>)`](crate::output::DescribeAutoPredictorOutput::encryption_config): <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    ///   - [`reference_predictor_summary(Option<ReferencePredictorSummary>)`](crate::output::DescribeAutoPredictorOutput::reference_predictor_summary): <p>The ARN and state of the reference predictor. This parameter is only valid for retrained or upgraded predictors.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeAutoPredictorOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeAutoPredictorOutput::status): <p>The status of the predictor. States include: </p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul>
    ///   - [`message(Option<String>)`](crate::output::DescribeAutoPredictorOutput::message): <p>In the event of an error, a message detailing the cause of the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeAutoPredictorOutput::creation_time): <p>The timestamp of the CreateAutoPredictor request.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeAutoPredictorOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`optimization_metric(Option<OptimizationMetric>)`](crate::output::DescribeAutoPredictorOutput::optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    ///   - [`explainability_info(Option<ExplainabilityInfo>)`](crate::output::DescribeAutoPredictorOutput::explainability_info): <p>Provides the status and ARN of the Predictor Explainability.</p>
    ///   - [`monitor_info(Option<MonitorInfo>)`](crate::output::DescribeAutoPredictorOutput::monitor_info): <p>A object with the Amazon Resource Name (ARN) and status of the monitor resource.</p>
    ///   - [`time_alignment_boundary(Option<TimeAlignmentBoundary>)`](crate::output::DescribeAutoPredictorOutput::time_alignment_boundary): <p>The time boundary Forecast uses when aggregating data.</p>
    /// - On failure, responds with [`SdkError<DescribeAutoPredictorError>`](crate::error::DescribeAutoPredictorError)
    pub fn describe_auto_predictor(&self) -> fluent_builders::DescribeAutoPredictor {
        fluent_builders::DescribeAutoPredictor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDataset`](crate::client::fluent_builders::DescribeDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeDataset::dataset_arn) / [`set_dataset_arn(Option<String>)`](crate::client::fluent_builders::DescribeDataset::set_dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset.</p>
    /// - On success, responds with [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput) with field(s):
    ///   - [`dataset_arn(Option<String>)`](crate::output::DescribeDatasetOutput::dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset.</p>
    ///   - [`dataset_name(Option<String>)`](crate::output::DescribeDatasetOutput::dataset_name): <p>The name of the dataset.</p>
    ///   - [`domain(Option<Domain>)`](crate::output::DescribeDatasetOutput::domain): <p>The domain associated with the dataset.</p>
    ///   - [`dataset_type(Option<DatasetType>)`](crate::output::DescribeDatasetOutput::dataset_type): <p>The dataset type.</p>
    ///   - [`data_frequency(Option<String>)`](crate::output::DescribeDatasetOutput::data_frequency): <p>The frequency of data collection.</p>  <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "M" indicates every month and "30min" indicates every 30 minutes.</p>
    ///   - [`schema(Option<Schema>)`](crate::output::DescribeDatasetOutput::schema): <p>An array of <code>SchemaAttribute</code> objects that specify the dataset fields. Each <code>SchemaAttribute</code> specifies the name and data type of a field.</p>
    ///   - [`encryption_config(Option<EncryptionConfig>)`](crate::output::DescribeDatasetOutput::encryption_config): <p>The AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeDatasetOutput::status): <p>The status of the dataset. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>UPDATE_PENDING</code>, <code>UPDATE_IN_PROGRESS</code>, <code>UPDATE_FAILED</code> </p> </li>  </ul>  <p>The <code>UPDATE</code> states apply while data is imported to the dataset from a call to the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html">CreateDatasetImportJob</a> operation and reflect the status of the dataset import job. For example, when the import job status is <code>CREATE_IN_PROGRESS</code>, the status of the dataset is <code>UPDATE_IN_PROGRESS</code>.</p> <note>   <p>The <code>Status</code> of the dataset must be <code>ACTIVE</code> before you can import training data.</p>  </note>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeDatasetOutput::creation_time): <p>When the dataset was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeDatasetOutput::last_modification_time): <p>When you create a dataset, <code>LastModificationTime</code> is the same as <code>CreationTime</code>. While data is being imported to the dataset, <code>LastModificationTime</code> is the current time of the <code>DescribeDataset</code> call. After a <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html">CreateDatasetImportJob</a> operation has finished, <code>LastModificationTime</code> is when the import job completed or failed.</p>
    /// - On failure, responds with [`SdkError<DescribeDatasetError>`](crate::error::DescribeDatasetError)
    pub fn describe_dataset(&self) -> fluent_builders::DescribeDataset {
        fluent_builders::DescribeDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDatasetGroup`](crate::client::fluent_builders::DescribeDatasetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_group_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeDatasetGroup::dataset_group_arn) / [`set_dataset_group_arn(Option<String>)`](crate::client::fluent_builders::DescribeDatasetGroup::set_dataset_group_arn): <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    /// - On success, responds with [`DescribeDatasetGroupOutput`](crate::output::DescribeDatasetGroupOutput) with field(s):
    ///   - [`dataset_group_name(Option<String>)`](crate::output::DescribeDatasetGroupOutput::dataset_group_name): <p>The name of the dataset group.</p>
    ///   - [`dataset_group_arn(Option<String>)`](crate::output::DescribeDatasetGroupOutput::dataset_group_arn): <p>The ARN of the dataset group.</p>
    ///   - [`dataset_arns(Option<Vec<String>>)`](crate::output::DescribeDatasetGroupOutput::dataset_arns): <p>An array of Amazon Resource Names (ARNs) of the datasets contained in the dataset group.</p>
    ///   - [`domain(Option<Domain>)`](crate::output::DescribeDatasetGroupOutput::domain): <p>The domain associated with the dataset group.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeDatasetGroupOutput::status): <p>The status of the dataset group. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>UPDATE_PENDING</code>, <code>UPDATE_IN_PROGRESS</code>, <code>UPDATE_FAILED</code> </p> </li>  </ul>  <p>The <code>UPDATE</code> states apply when you call the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html">UpdateDatasetGroup</a> operation.</p> <note>   <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor.</p>  </note>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeDatasetGroupOutput::creation_time): <p>When the dataset group was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeDatasetGroupOutput::last_modification_time): <p>When the dataset group was created or last updated from a call to the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html">UpdateDatasetGroup</a> operation. While the dataset group is being updated, <code>LastModificationTime</code> is the current time of the <code>DescribeDatasetGroup</code> call.</p>
    /// - On failure, responds with [`SdkError<DescribeDatasetGroupError>`](crate::error::DescribeDatasetGroupError)
    pub fn describe_dataset_group(&self) -> fluent_builders::DescribeDatasetGroup {
        fluent_builders::DescribeDatasetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDatasetImportJob`](crate::client::fluent_builders::DescribeDatasetImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_import_job_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeDatasetImportJob::dataset_import_job_arn) / [`set_dataset_import_job_arn(Option<String>)`](crate::client::fluent_builders::DescribeDatasetImportJob::set_dataset_import_job_arn): <p>The Amazon Resource Name (ARN) of the dataset import job.</p>
    /// - On success, responds with [`DescribeDatasetImportJobOutput`](crate::output::DescribeDatasetImportJobOutput) with field(s):
    ///   - [`dataset_import_job_name(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::dataset_import_job_name): <p>The name of the dataset import job.</p>
    ///   - [`dataset_import_job_arn(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::dataset_import_job_arn): <p>The ARN of the dataset import job.</p>
    ///   - [`dataset_arn(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    ///   - [`timestamp_format(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::timestamp_format): <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>  <ul>   <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>   <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>  </ul>
    ///   - [`time_zone(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::time_zone): <p>The single time zone applied to every item in the dataset</p>
    ///   - [`use_geolocation_for_time_zone(bool)`](crate::output::DescribeDatasetImportJobOutput::use_geolocation_for_time_zone): <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    ///   - [`geolocation_format(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::geolocation_format): <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    ///   - [`data_source(Option<DataSource>)`](crate::output::DescribeDatasetImportJobOutput::data_source): <p>The location of the training data to import and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>  <p>If encryption is used, <code>DataSource</code> includes an AWS Key Management Service (KMS) key.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeDatasetImportJobOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    ///   - [`field_statistics(Option<HashMap<String, Statistics>>)`](crate::output::DescribeDatasetImportJobOutput::field_statistics): <p>Statistical information about each field in the input data.</p>
    ///   - [`data_size(Option<f64>)`](crate::output::DescribeDatasetImportJobOutput::data_size): <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::status): <p>The status of the dataset import job. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>  </ul>
    ///   - [`message(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeDatasetImportJobOutput::creation_time): <p>When the dataset import job was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeDatasetImportJobOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::output::DescribeDatasetImportJobOutput::format): <p>The format of the imported data, CSV or PARQUET.</p>
    /// - On failure, responds with [`SdkError<DescribeDatasetImportJobError>`](crate::error::DescribeDatasetImportJobError)
    pub fn describe_dataset_import_job(&self) -> fluent_builders::DescribeDatasetImportJob {
        fluent_builders::DescribeDatasetImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeExplainability`](crate::client::fluent_builders::DescribeExplainability) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeExplainability::explainability_arn) / [`set_explainability_arn(Option<String>)`](crate::client::fluent_builders::DescribeExplainability::set_explainability_arn): <p>The Amazon Resource Name (ARN) of the Explaianability to describe.</p>
    /// - On success, responds with [`DescribeExplainabilityOutput`](crate::output::DescribeExplainabilityOutput) with field(s):
    ///   - [`explainability_arn(Option<String>)`](crate::output::DescribeExplainabilityOutput::explainability_arn): <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    ///   - [`explainability_name(Option<String>)`](crate::output::DescribeExplainabilityOutput::explainability_name): <p>The name of the Explainability.</p>
    ///   - [`resource_arn(Option<String>)`](crate::output::DescribeExplainabilityOutput::resource_arn): <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability resource.</p>
    ///   - [`explainability_config(Option<ExplainabilityConfig>)`](crate::output::DescribeExplainabilityOutput::explainability_config): <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    ///   - [`enable_visualization(Option<bool>)`](crate::output::DescribeExplainabilityOutput::enable_visualization): <p>Whether the visualization was enabled for the Explainability resource.</p>
    ///   - [`data_source(Option<DataSource>)`](crate::output::DescribeExplainabilityOutput::data_source): <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    ///   - [`schema(Option<Schema>)`](crate::output::DescribeExplainabilityOutput::schema): <p>Defines the fields of a dataset.</p>
    ///   - [`start_date_time(Option<String>)`](crate::output::DescribeExplainabilityOutput::start_date_time): <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the first time point in the Explainability.</p>
    ///   - [`end_date_time(Option<String>)`](crate::output::DescribeExplainabilityOutput::end_date_time): <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the last time point in the Explainability.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeExplainabilityOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the <code>CreateExplainability</code> job to complete.</p>
    ///   - [`message(Option<String>)`](crate::output::DescribeExplainabilityOutput::message): <p>If an error occurred, a message about the error.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeExplainabilityOutput::status): <p>The status of the Explainability resource. States include: </p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeExplainabilityOutput::creation_time): <p>When the Explainability resource was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeExplainabilityOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DescribeExplainabilityError>`](crate::error::DescribeExplainabilityError)
    pub fn describe_explainability(&self) -> fluent_builders::DescribeExplainability {
        fluent_builders::DescribeExplainability::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeExplainabilityExport`](crate::client::fluent_builders::DescribeExplainabilityExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`explainability_export_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeExplainabilityExport::explainability_export_arn) / [`set_explainability_export_arn(Option<String>)`](crate::client::fluent_builders::DescribeExplainabilityExport::set_explainability_export_arn): <p>The Amazon Resource Name (ARN) of the Explainability export.</p>
    /// - On success, responds with [`DescribeExplainabilityExportOutput`](crate::output::DescribeExplainabilityExportOutput) with field(s):
    ///   - [`explainability_export_arn(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::explainability_export_arn): <p>The Amazon Resource Name (ARN) of the Explainability export.</p>
    ///   - [`explainability_export_name(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::explainability_export_name): <p>The name of the Explainability export.</p>
    ///   - [`explainability_arn(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::explainability_arn): <p>The Amazon Resource Name (ARN) of the Explainability export.</p>
    ///   - [`destination(Option<DataDestination>)`](crate::output::DescribeExplainabilityExportOutput::destination): <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    ///   - [`message(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::message): <p>Information about any errors that occurred during the export.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::status): <p>The status of the Explainability export. States include: </p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeExplainabilityExportOutput::creation_time): <p>When the Explainability export was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeExplainabilityExportOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::output::DescribeExplainabilityExportOutput::format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On failure, responds with [`SdkError<DescribeExplainabilityExportError>`](crate::error::DescribeExplainabilityExportError)
    pub fn describe_explainability_export(&self) -> fluent_builders::DescribeExplainabilityExport {
        fluent_builders::DescribeExplainabilityExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeForecast`](crate::client::fluent_builders::DescribeForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeForecast::forecast_arn) / [`set_forecast_arn(Option<String>)`](crate::client::fluent_builders::DescribeForecast::set_forecast_arn): <p>The Amazon Resource Name (ARN) of the forecast.</p>
    /// - On success, responds with [`DescribeForecastOutput`](crate::output::DescribeForecastOutput) with field(s):
    ///   - [`forecast_arn(Option<String>)`](crate::output::DescribeForecastOutput::forecast_arn): <p>The forecast ARN as specified in the request.</p>
    ///   - [`forecast_name(Option<String>)`](crate::output::DescribeForecastOutput::forecast_name): <p>The name of the forecast.</p>
    ///   - [`forecast_types(Option<Vec<String>>)`](crate::output::DescribeForecastOutput::forecast_types): <p>The quantiles at which probabilistic forecasts were generated.</p>
    ///   - [`predictor_arn(Option<String>)`](crate::output::DescribeForecastOutput::predictor_arn): <p>The ARN of the predictor used to generate the forecast.</p>
    ///   - [`dataset_group_arn(Option<String>)`](crate::output::DescribeForecastOutput::dataset_group_arn): <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeForecastOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeForecastOutput::status): <p>The status of the forecast. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>  </note>
    ///   - [`message(Option<String>)`](crate::output::DescribeForecastOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeForecastOutput::creation_time): <p>When the forecast creation task was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeForecastOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`time_series_selector(Option<TimeSeriesSelector>)`](crate::output::DescribeForecastOutput::time_series_selector): <p>The time series to include in the forecast.</p>
    /// - On failure, responds with [`SdkError<DescribeForecastError>`](crate::error::DescribeForecastError)
    pub fn describe_forecast(&self) -> fluent_builders::DescribeForecast {
        fluent_builders::DescribeForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeForecastExportJob`](crate::client::fluent_builders::DescribeForecastExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`forecast_export_job_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeForecastExportJob::forecast_export_job_arn) / [`set_forecast_export_job_arn(Option<String>)`](crate::client::fluent_builders::DescribeForecastExportJob::set_forecast_export_job_arn): <p>The Amazon Resource Name (ARN) of the forecast export job.</p>
    /// - On success, responds with [`DescribeForecastExportJobOutput`](crate::output::DescribeForecastExportJobOutput) with field(s):
    ///   - [`forecast_export_job_arn(Option<String>)`](crate::output::DescribeForecastExportJobOutput::forecast_export_job_arn): <p>The ARN of the forecast export job.</p>
    ///   - [`forecast_export_job_name(Option<String>)`](crate::output::DescribeForecastExportJobOutput::forecast_export_job_name): <p>The name of the forecast export job.</p>
    ///   - [`forecast_arn(Option<String>)`](crate::output::DescribeForecastExportJobOutput::forecast_arn): <p>The Amazon Resource Name (ARN) of the exported forecast.</p>
    ///   - [`destination(Option<DataDestination>)`](crate::output::DescribeForecastExportJobOutput::destination): <p>The path to the Amazon Simple Storage Service (Amazon S3) bucket where the forecast is exported.</p>
    ///   - [`message(Option<String>)`](crate::output::DescribeForecastExportJobOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeForecastExportJobOutput::status): <p>The status of the forecast export job. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your S3 bucket.</p>  </note>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeForecastExportJobOutput::creation_time): <p>When the forecast export job was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeForecastExportJobOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::output::DescribeForecastExportJobOutput::format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On failure, responds with [`SdkError<DescribeForecastExportJobError>`](crate::error::DescribeForecastExportJobError)
    pub fn describe_forecast_export_job(&self) -> fluent_builders::DescribeForecastExportJob {
        fluent_builders::DescribeForecastExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeMonitor`](crate::client::fluent_builders::DescribeMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeMonitor::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::DescribeMonitor::set_monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor resource to describe.</p>
    /// - On success, responds with [`DescribeMonitorOutput`](crate::output::DescribeMonitorOutput) with field(s):
    ///   - [`monitor_name(Option<String>)`](crate::output::DescribeMonitorOutput::monitor_name): <p>The name of the monitor.</p>
    ///   - [`monitor_arn(Option<String>)`](crate::output::DescribeMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor resource described.</p>
    ///   - [`resource_arn(Option<String>)`](crate::output::DescribeMonitorOutput::resource_arn): <p>The Amazon Resource Name (ARN) of the auto predictor being monitored.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeMonitorOutput::status): <p>The status of the monitor resource.</p>
    ///   - [`last_evaluation_time(Option<DateTime>)`](crate::output::DescribeMonitorOutput::last_evaluation_time): <p>The timestamp of the latest evaluation completed by the monitor.</p>
    ///   - [`last_evaluation_state(Option<String>)`](crate::output::DescribeMonitorOutput::last_evaluation_state): <p>The state of the monitor's latest evaluation.</p>
    ///   - [`baseline(Option<Baseline>)`](crate::output::DescribeMonitorOutput::baseline): <p>Metrics you can use as a baseline for comparison purposes. Use these values you interpret monitoring results for an auto predictor.</p>
    ///   - [`message(Option<String>)`](crate::output::DescribeMonitorOutput::message): <p>An error message, if any, for the monitor.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeMonitorOutput::creation_time): <p>The timestamp for when the monitor resource was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeMonitorOutput::last_modification_time): <p>The timestamp of the latest modification to the monitor.</p>
    ///   - [`estimated_evaluation_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeMonitorOutput::estimated_evaluation_time_remaining_in_minutes): <p>The estimated number of minutes remaining before the monitor resource finishes its current evaluation.</p>
    /// - On failure, responds with [`SdkError<DescribeMonitorError>`](crate::error::DescribeMonitorError)
    pub fn describe_monitor(&self) -> fluent_builders::DescribeMonitor {
        fluent_builders::DescribeMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePredictor`](crate::client::fluent_builders::DescribePredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::DescribePredictor::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::DescribePredictor::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
    /// - On success, responds with [`DescribePredictorOutput`](crate::output::DescribePredictorOutput) with field(s):
    ///   - [`predictor_arn(Option<String>)`](crate::output::DescribePredictorOutput::predictor_arn): <p>The ARN of the predictor.</p>
    ///   - [`predictor_name(Option<String>)`](crate::output::DescribePredictorOutput::predictor_name): <p>The name of the predictor.</p>
    ///   - [`algorithm_arn(Option<String>)`](crate::output::DescribePredictorOutput::algorithm_arn): <p>The Amazon Resource Name (ARN) of the algorithm used for model training.</p>
    ///   - [`auto_ml_algorithm_arns(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::auto_ml_algorithm_arns): <p>When <code>PerformAutoML</code> is specified, the ARN of the chosen algorithm.</p>
    ///   - [`forecast_horizon(Option<i32>)`](crate::output::DescribePredictorOutput::forecast_horizon): <p>The number of time-steps of the forecast. The forecast horizon is also called the prediction length.</p>
    ///   - [`forecast_types(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::forecast_types): <p>The forecast types used during predictor training. Default value is <code>["0.1","0.5","0.9"]</code> </p>
    ///   - [`perform_auto_ml(Option<bool>)`](crate::output::DescribePredictorOutput::perform_auto_ml): <p>Whether the predictor is set to perform AutoML.</p>
    ///   - [`auto_ml_override_strategy(Option<AutoMlOverrideStrategy>)`](crate::output::DescribePredictorOutput::auto_ml_override_strategy): <note>   <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>  </note>  <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>  <p>This parameter is only valid for predictors trained using AutoML.</p>
    ///   - [`perform_hpo(Option<bool>)`](crate::output::DescribePredictorOutput::perform_hpo): <p>Whether the predictor is set to perform hyperparameter optimization (HPO).</p>
    ///   - [`training_parameters(Option<HashMap<String, String>>)`](crate::output::DescribePredictorOutput::training_parameters): <p>The default training parameters or overrides selected during model training. When running AutoML or choosing HPO with CNN-QR or DeepAR+, the optimized values for the chosen hyperparameters are returned. For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    ///   - [`evaluation_parameters(Option<EvaluationParameters>)`](crate::output::DescribePredictorOutput::evaluation_parameters): <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    ///   - [`hpo_config(Option<HyperParameterTuningJobConfig>)`](crate::output::DescribePredictorOutput::hpo_config): <p>The hyperparameter override values for the algorithm.</p>
    ///   - [`input_data_config(Option<InputDataConfig>)`](crate::output::DescribePredictorOutput::input_data_config): <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    ///   - [`featurization_config(Option<FeaturizationConfig>)`](crate::output::DescribePredictorOutput::featurization_config): <p>The featurization configuration.</p>
    ///   - [`encryption_config(Option<EncryptionConfig>)`](crate::output::DescribePredictorOutput::encryption_config): <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    ///   - [`predictor_execution_details(Option<PredictorExecutionDetails>)`](crate::output::DescribePredictorOutput::predictor_execution_details): <p>Details on the the status and results of the backtests performed to evaluate the accuracy of the predictor. You specify the number of backtests to perform when you call the operation.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribePredictorOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    ///   - [`is_auto_predictor(Option<bool>)`](crate::output::DescribePredictorOutput::is_auto_predictor): <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    ///   - [`dataset_import_job_arns(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::dataset_import_job_arns): <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribePredictorOutput::status): <p>The status of the predictor. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>  </note>
    ///   - [`message(Option<String>)`](crate::output::DescribePredictorOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribePredictorOutput::creation_time): <p>When the model training task was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribePredictorOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`optimization_metric(Option<OptimizationMetric>)`](crate::output::DescribePredictorOutput::optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    /// - On failure, responds with [`SdkError<DescribePredictorError>`](crate::error::DescribePredictorError)
    pub fn describe_predictor(&self) -> fluent_builders::DescribePredictor {
        fluent_builders::DescribePredictor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePredictorBacktestExportJob`](crate::client::fluent_builders::DescribePredictorBacktestExportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_backtest_export_job_arn(impl Into<String>)`](crate::client::fluent_builders::DescribePredictorBacktestExportJob::predictor_backtest_export_job_arn) / [`set_predictor_backtest_export_job_arn(Option<String>)`](crate::client::fluent_builders::DescribePredictorBacktestExportJob::set_predictor_backtest_export_job_arn): <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    /// - On success, responds with [`DescribePredictorBacktestExportJobOutput`](crate::output::DescribePredictorBacktestExportJobOutput) with field(s):
    ///   - [`predictor_backtest_export_job_arn(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::predictor_backtest_export_job_arn): <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    ///   - [`predictor_backtest_export_job_name(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::predictor_backtest_export_job_name): <p>The name of the predictor backtest export job.</p>
    ///   - [`predictor_arn(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor.</p>
    ///   - [`destination(Option<DataDestination>)`](crate::output::DescribePredictorBacktestExportJobOutput::destination): <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    ///   - [`message(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::message): <p>Information about any errors that may have occurred during the backtest export.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::status): <p>The status of the predictor backtest export job. States include: </p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribePredictorBacktestExportJobOutput::creation_time): <p>When the predictor backtest export job was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribePredictorBacktestExportJobOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::output::DescribePredictorBacktestExportJobOutput::format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On failure, responds with [`SdkError<DescribePredictorBacktestExportJobError>`](crate::error::DescribePredictorBacktestExportJobError)
    pub fn describe_predictor_backtest_export_job(
        &self,
    ) -> fluent_builders::DescribePredictorBacktestExportJob {
        fluent_builders::DescribePredictorBacktestExportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWhatIfAnalysis`](crate::client::fluent_builders::DescribeWhatIfAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_analysis_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeWhatIfAnalysis::what_if_analysis_arn) / [`set_what_if_analysis_arn(Option<String>)`](crate::client::fluent_builders::DescribeWhatIfAnalysis::set_what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis that you are interested in.</p>
    /// - On success, responds with [`DescribeWhatIfAnalysisOutput`](crate::output::DescribeWhatIfAnalysisOutput) with field(s):
    ///   - [`what_if_analysis_name(Option<String>)`](crate::output::DescribeWhatIfAnalysisOutput::what_if_analysis_name): <p>The name of the what-if analysis.</p>
    ///   - [`what_if_analysis_arn(Option<String>)`](crate::output::DescribeWhatIfAnalysisOutput::what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    ///   - [`forecast_arn(Option<String>)`](crate::output::DescribeWhatIfAnalysisOutput::forecast_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeWhatIfAnalysisOutput::estimated_time_remaining_in_minutes): <p>The approximate time remaining to complete the what-if analysis, in minutes.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeWhatIfAnalysisOutput::status): <p>The status of the what-if analysis. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the what-if analysis must be <code>ACTIVE</code> before you can access the analysis.</p>  </note>
    ///   - [`message(Option<String>)`](crate::output::DescribeWhatIfAnalysisOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeWhatIfAnalysisOutput::creation_time): <p>When the what-if analysis was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeWhatIfAnalysisOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`time_series_selector(Option<TimeSeriesSelector>)`](crate::output::DescribeWhatIfAnalysisOutput::time_series_selector): <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>  <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>  <ul>   <li> <p> <code>DataSource</code> </p> </li>   <li> <p> <code>Format</code> </p> </li>   <li> <p> <code>Schema</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DescribeWhatIfAnalysisError>`](crate::error::DescribeWhatIfAnalysisError)
    pub fn describe_what_if_analysis(&self) -> fluent_builders::DescribeWhatIfAnalysis {
        fluent_builders::DescribeWhatIfAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWhatIfForecast`](crate::client::fluent_builders::DescribeWhatIfForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeWhatIfForecast::what_if_forecast_arn) / [`set_what_if_forecast_arn(Option<String>)`](crate::client::fluent_builders::DescribeWhatIfForecast::set_what_if_forecast_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast that you are interested in.</p>
    /// - On success, responds with [`DescribeWhatIfForecastOutput`](crate::output::DescribeWhatIfForecastOutput) with field(s):
    ///   - [`what_if_forecast_name(Option<String>)`](crate::output::DescribeWhatIfForecastOutput::what_if_forecast_name): <p>The name of the what-if forecast.</p>
    ///   - [`what_if_forecast_arn(Option<String>)`](crate::output::DescribeWhatIfForecastOutput::what_if_forecast_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    ///   - [`what_if_analysis_arn(Option<String>)`](crate::output::DescribeWhatIfForecastOutput::what_if_analysis_arn): <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeWhatIfForecastOutput::estimated_time_remaining_in_minutes): <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeWhatIfForecastOutput::status): <p>The status of the what-if forecast. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>  </note>
    ///   - [`message(Option<String>)`](crate::output::DescribeWhatIfForecastOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeWhatIfForecastOutput::creation_time): <p>When the what-if forecast was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeWhatIfForecastOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`time_series_transformations(Option<Vec<TimeSeriesTransformation>>)`](crate::output::DescribeWhatIfForecastOutput::time_series_transformations): <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    ///   - [`time_series_replacements_data_source(Option<TimeSeriesReplacementsDataSource>)`](crate::output::DescribeWhatIfForecastOutput::time_series_replacements_data_source): <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    ///   - [`forecast_types(Option<Vec<String>>)`](crate::output::DescribeWhatIfForecastOutput::forecast_types): <p>The quantiles at which probabilistic forecasts are generated. You can specify up to 5 quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    /// - On failure, responds with [`SdkError<DescribeWhatIfForecastError>`](crate::error::DescribeWhatIfForecastError)
    pub fn describe_what_if_forecast(&self) -> fluent_builders::DescribeWhatIfForecast {
        fluent_builders::DescribeWhatIfForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWhatIfForecastExport`](crate::client::fluent_builders::DescribeWhatIfForecastExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`what_if_forecast_export_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeWhatIfForecastExport::what_if_forecast_export_arn) / [`set_what_if_forecast_export_arn(Option<String>)`](crate::client::fluent_builders::DescribeWhatIfForecastExport::set_what_if_forecast_export_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast export that you are interested in.</p>
    /// - On success, responds with [`DescribeWhatIfForecastExportOutput`](crate::output::DescribeWhatIfForecastExportOutput) with field(s):
    ///   - [`what_if_forecast_export_arn(Option<String>)`](crate::output::DescribeWhatIfForecastExportOutput::what_if_forecast_export_arn): <p>The Amazon Resource Name (ARN) of the what-if forecast export.</p>
    ///   - [`what_if_forecast_export_name(Option<String>)`](crate::output::DescribeWhatIfForecastExportOutput::what_if_forecast_export_name): <p>The name of the what-if forecast export.</p>
    ///   - [`what_if_forecast_arns(Option<Vec<String>>)`](crate::output::DescribeWhatIfForecastExportOutput::what_if_forecast_arns): <p>An array of Amazon Resource Names (ARNs) that represent all of the what-if forecasts exported in this resource.</p>
    ///   - [`destination(Option<DataDestination>)`](crate::output::DescribeWhatIfForecastExportOutput::destination): <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    ///   - [`message(Option<String>)`](crate::output::DescribeWhatIfForecastExportOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribeWhatIfForecastExportOutput::status): <p>The status of the what-if forecast. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the what-if forecast export must be <code>ACTIVE</code> before you can access the forecast export.</p>  </note>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeWhatIfForecastExportOutput::creation_time): <p>When the what-if forecast export was created.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribeWhatIfForecastExportOutput::estimated_time_remaining_in_minutes): <p>The approximate time remaining to complete the what-if forecast export, in minutes.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribeWhatIfForecastExportOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::output::DescribeWhatIfForecastExportOutput::format): <p>The format of the exported data, CSV or PARQUET.</p>
    /// - On failure, responds with [`SdkError<DescribeWhatIfForecastExportError>`](crate::error::DescribeWhatIfForecastExportError)
    pub fn describe_what_if_forecast_export(
        &self,
    ) -> fluent_builders::DescribeWhatIfForecastExport {
        fluent_builders::DescribeWhatIfForecastExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAccuracyMetrics`](crate::client::fluent_builders::GetAccuracyMetrics) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::GetAccuracyMetrics::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::GetAccuracyMetrics::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor to get metrics for.</p>
    /// - On success, responds with [`GetAccuracyMetricsOutput`](crate::output::GetAccuracyMetricsOutput) with field(s):
    ///   - [`predictor_evaluation_results(Option<Vec<EvaluationResult>>)`](crate::output::GetAccuracyMetricsOutput::predictor_evaluation_results): <p>An array of results from evaluating the predictor.</p>
    ///   - [`is_auto_predictor(Option<bool>)`](crate::output::GetAccuracyMetricsOutput::is_auto_predictor): <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    ///   - [`auto_ml_override_strategy(Option<AutoMlOverrideStrategy>)`](crate::output::GetAccuracyMetricsOutput::auto_ml_override_strategy): <note>   <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>  </note>  <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>  <p>This parameter is only valid for predictors trained using AutoML.</p>
    ///   - [`optimization_metric(Option<OptimizationMetric>)`](crate::output::GetAccuracyMetricsOutput::optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    /// - On failure, responds with [`SdkError<GetAccuracyMetricsError>`](crate::error::GetAccuracyMetricsError)
    pub fn get_accuracy_metrics(&self) -> fluent_builders::GetAccuracyMetrics {
        fluent_builders::GetAccuracyMetrics::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasetGroups`](crate::client::fluent_builders::ListDatasetGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasetGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasetGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasetGroups::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasetGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasetGroups::set_max_results): <p>The number of items to return in the response.</p>
    /// - On success, responds with [`ListDatasetGroupsOutput`](crate::output::ListDatasetGroupsOutput) with field(s):
    ///   - [`dataset_groups(Option<Vec<DatasetGroupSummary>>)`](crate::output::ListDatasetGroupsOutput::dataset_groups): <p>An array of objects that summarize each dataset group's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetGroupsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListDatasetGroupsError>`](crate::error::ListDatasetGroupsError)
    pub fn list_dataset_groups(&self) -> fluent_builders::ListDatasetGroups {
        fluent_builders::ListDatasetGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasetImportJobs`](crate::client::fluent_builders::ListDatasetImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasetImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasetImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasetImportJobs::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasetImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasetImportJobs::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListDatasetImportJobs::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListDatasetImportJobs::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the datasets that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the datasets that match the statement, specify <code>IS</code>. To exclude matching datasets, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all dataset import jobs whose status is ACTIVE, you specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListDatasetImportJobsOutput`](crate::output::ListDatasetImportJobsOutput) with field(s):
    ///   - [`dataset_import_jobs(Option<Vec<DatasetImportJobSummary>>)`](crate::output::ListDatasetImportJobsOutput::dataset_import_jobs): <p>An array of objects that summarize each dataset import job's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetImportJobsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListDatasetImportJobsError>`](crate::error::ListDatasetImportJobsError)
    pub fn list_dataset_import_jobs(&self) -> fluent_builders::ListDatasetImportJobs {
        fluent_builders::ListDatasetImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasets`](crate::client::fluent_builders::ListDatasets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasets::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasets::set_max_results): <p>The number of items to return in the response.</p>
    /// - On success, responds with [`ListDatasetsOutput`](crate::output::ListDatasetsOutput) with field(s):
    ///   - [`datasets(Option<Vec<DatasetSummary>>)`](crate::output::ListDatasetsOutput::datasets): <p>An array of objects that summarize each dataset's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListDatasetsError>`](crate::error::ListDatasetsError)
    pub fn list_datasets(&self) -> fluent_builders::ListDatasets {
        fluent_builders::ListDatasets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExplainabilities`](crate::client::fluent_builders::ListExplainabilities) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExplainabilities::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExplainabilities::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExplainabilities::set_next_token): <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExplainabilities::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExplainabilities::set_max_results): <p>The number of items returned in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListExplainabilities::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListExplainabilities::set_filters): <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>
    /// - On success, responds with [`ListExplainabilitiesOutput`](crate::output::ListExplainabilitiesOutput) with field(s):
    ///   - [`explainabilities(Option<Vec<ExplainabilitySummary>>)`](crate::output::ListExplainabilitiesOutput::explainabilities): <p>An array of objects that summarize the properties of each Explainability resource.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExplainabilitiesOutput::next_token): <p>Returns this token if the response is truncated. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListExplainabilitiesError>`](crate::error::ListExplainabilitiesError)
    pub fn list_explainabilities(&self) -> fluent_builders::ListExplainabilities {
        fluent_builders::ListExplainabilities::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExplainabilityExports`](crate::client::fluent_builders::ListExplainabilityExports) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExplainabilityExports::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExplainabilityExports::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExplainabilityExports::set_next_token): <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExplainabilityExports::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExplainabilityExports::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListExplainabilityExports::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListExplainabilityExports::set_filters): <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude resources that match the statement from the list. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>
    /// - On success, responds with [`ListExplainabilityExportsOutput`](crate::output::ListExplainabilityExportsOutput) with field(s):
    ///   - [`explainability_exports(Option<Vec<ExplainabilityExportSummary>>)`](crate::output::ListExplainabilityExportsOutput::explainability_exports): <p>An array of objects that summarize the properties of each Explainability export.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExplainabilityExportsOutput::next_token): <p>Returns this token if the response is truncated. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListExplainabilityExportsError>`](crate::error::ListExplainabilityExportsError)
    pub fn list_explainability_exports(&self) -> fluent_builders::ListExplainabilityExports {
        fluent_builders::ListExplainabilityExports::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListForecastExportJobs`](crate::client::fluent_builders::ListForecastExportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListForecastExportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListForecastExportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListForecastExportJobs::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListForecastExportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListForecastExportJobs::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListForecastExportJobs::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListForecastExportJobs::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ForecastArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all jobs that export a forecast named <i>electricityforecast</i>, specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "ForecastArn", "Value": "arn:aws:forecast:us-west-2:   <acct-id>    :forecast/electricityforecast" } ]   </acct-id></code> </p>
    /// - On success, responds with [`ListForecastExportJobsOutput`](crate::output::ListForecastExportJobsOutput) with field(s):
    ///   - [`forecast_export_jobs(Option<Vec<ForecastExportJobSummary>>)`](crate::output::ListForecastExportJobsOutput::forecast_export_jobs): <p>An array of objects that summarize each export job's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListForecastExportJobsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListForecastExportJobsError>`](crate::error::ListForecastExportJobsError)
    pub fn list_forecast_export_jobs(&self) -> fluent_builders::ListForecastExportJobs {
        fluent_builders::ListForecastExportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListForecasts`](crate::client::fluent_builders::ListForecasts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListForecasts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListForecasts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListForecasts::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListForecasts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListForecasts::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListForecasts::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListForecasts::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecasts that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecasts that match the statement, specify <code>IS</code>. To exclude matching forecasts, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code>, <code>PredictorArn</code>, and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all forecasts whose status is not ACTIVE, you would specify:</p>  <p> <code>"Filters": [ { "Condition": "IS_NOT", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListForecastsOutput`](crate::output::ListForecastsOutput) with field(s):
    ///   - [`forecasts(Option<Vec<ForecastSummary>>)`](crate::output::ListForecastsOutput::forecasts): <p>An array of objects that summarize each forecast's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListForecastsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListForecastsError>`](crate::error::ListForecastsError)
    pub fn list_forecasts(&self) -> fluent_builders::ListForecasts {
        fluent_builders::ListForecasts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMonitorEvaluations`](crate::client::fluent_builders::ListMonitorEvaluations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMonitorEvaluations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMonitorEvaluations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMonitorEvaluations::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMonitorEvaluations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMonitorEvaluations::set_max_results): <p>The maximum number of monitoring results to return.</p>
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::ListMonitorEvaluations::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::ListMonitorEvaluations::set_monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor resource to get results from.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListMonitorEvaluations::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListMonitorEvaluations::set_filters): <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>EvaluationState</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match. Valid values are only <code>SUCCESS</code> or <code>FAILURE</code>.</p> </li>  </ul>  <p>For example, to list only successful monitor evaluations, you would specify:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "EvaluationState", "Value": "SUCCESS" } ]</code> </p>
    /// - On success, responds with [`ListMonitorEvaluationsOutput`](crate::output::ListMonitorEvaluationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListMonitorEvaluationsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`predictor_monitor_evaluations(Option<Vec<PredictorMonitorEvaluation>>)`](crate::output::ListMonitorEvaluationsOutput::predictor_monitor_evaluations): <p>The monitoring results and predictor events collected by the monitor resource during different windows of time.</p>  <p>For information about monitoring see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring-results.html">Viewing Monitoring Results</a>. For more information about retrieving monitoring results see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring-results.html">Viewing Monitoring Results</a>.</p>
    /// - On failure, responds with [`SdkError<ListMonitorEvaluationsError>`](crate::error::ListMonitorEvaluationsError)
    pub fn list_monitor_evaluations(&self) -> fluent_builders::ListMonitorEvaluations {
        fluent_builders::ListMonitorEvaluations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMonitors`](crate::client::fluent_builders::ListMonitors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMonitors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMonitors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMonitors::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMonitors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMonitors::set_max_results): <p>The maximum number of monitors to include in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListMonitors::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListMonitors::set_filters): <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all monitors who's status is ACTIVE, you would specify:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListMonitorsOutput`](crate::output::ListMonitorsOutput) with field(s):
    ///   - [`monitors(Option<Vec<MonitorSummary>>)`](crate::output::ListMonitorsOutput::monitors): <p>An array of objects that summarize each monitor's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListMonitorsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListMonitorsError>`](crate::error::ListMonitorsError)
    pub fn list_monitors(&self) -> fluent_builders::ListMonitors {
        fluent_builders::ListMonitors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPredictorBacktestExportJobs`](crate::client::fluent_builders::ListPredictorBacktestExportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::set_next_token): <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListPredictorBacktestExportJobs::set_filters): <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictor backtest export jobs that match the statement from the list. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictor backtest export jobs that match the statement, specify <code>IS</code>. To exclude matching predictor backtest export jobs, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>PredictorArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>
    /// - On success, responds with [`ListPredictorBacktestExportJobsOutput`](crate::output::ListPredictorBacktestExportJobsOutput) with field(s):
    ///   - [`predictor_backtest_export_jobs(Option<Vec<PredictorBacktestExportJobSummary>>)`](crate::output::ListPredictorBacktestExportJobsOutput::predictor_backtest_export_jobs): <p>An array of objects that summarize the properties of each predictor backtest export job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPredictorBacktestExportJobsOutput::next_token): <p>Returns this token if the response is truncated. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListPredictorBacktestExportJobsError>`](crate::error::ListPredictorBacktestExportJobsError)
    pub fn list_predictor_backtest_export_jobs(
        &self,
    ) -> fluent_builders::ListPredictorBacktestExportJobs {
        fluent_builders::ListPredictorBacktestExportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPredictors`](crate::client::fluent_builders::ListPredictors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPredictors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPredictors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPredictors::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPredictors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPredictors::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListPredictors::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListPredictors::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictors that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictors that match the statement, specify <code>IS</code>. To exclude matching predictors, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all predictors whose status is ACTIVE, you would specify:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListPredictorsOutput`](crate::output::ListPredictorsOutput) with field(s):
    ///   - [`predictors(Option<Vec<PredictorSummary>>)`](crate::output::ListPredictorsOutput::predictors): <p>An array of objects that summarize each predictor's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPredictorsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListPredictorsError>`](crate::error::ListPredictorsError)
    pub fn list_predictors(&self) -> fluent_builders::ListPredictors {
        fluent_builders::ListPredictors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags for the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWhatIfAnalyses`](crate::client::fluent_builders::ListWhatIfAnalyses) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWhatIfAnalyses::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWhatIfAnalyses::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWhatIfAnalyses::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWhatIfAnalyses::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWhatIfAnalyses::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListWhatIfAnalyses::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListWhatIfAnalyses::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if analysis jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the what-if analysis jobs that match the statement, specify <code>IS</code>. To exclude matching what-if analysis jobs, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfAnalysisArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all jobs that export a forecast named <i>electricityWhatIf</i>, specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfAnalysisArn", "Value": "arn:aws:forecast:us-west-2:   <acct-id>    :forecast/electricityWhatIf" } ]   </acct-id></code> </p>
    /// - On success, responds with [`ListWhatIfAnalysesOutput`](crate::output::ListWhatIfAnalysesOutput) with field(s):
    ///   - [`what_if_analyses(Option<Vec<WhatIfAnalysisSummary>>)`](crate::output::ListWhatIfAnalysesOutput::what_if_analyses): <p>An array of <code>WhatIfAnalysisSummary</code> objects that describe the matched analyses.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWhatIfAnalysesOutput::next_token): <p>If the response is truncated, Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListWhatIfAnalysesError>`](crate::error::ListWhatIfAnalysesError)
    pub fn list_what_if_analyses(&self) -> fluent_builders::ListWhatIfAnalyses {
        fluent_builders::ListWhatIfAnalyses::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWhatIfForecastExports`](crate::client::fluent_builders::ListWhatIfForecastExports) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWhatIfForecastExports::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWhatIfForecastExports::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWhatIfForecastExports::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWhatIfForecastExports::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWhatIfForecastExports::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListWhatIfForecastExports::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListWhatIfForecastExports::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastExportArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all jobs that export a forecast named <i>electricityWIFExport</i>, specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastExportArn", "Value": "arn:aws:forecast:us-west-2:   <acct-id>    :forecast/electricityWIFExport" } ]   </acct-id></code> </p>
    /// - On success, responds with [`ListWhatIfForecastExportsOutput`](crate::output::ListWhatIfForecastExportsOutput) with field(s):
    ///   - [`what_if_forecast_exports(Option<Vec<WhatIfForecastExportSummary>>)`](crate::output::ListWhatIfForecastExportsOutput::what_if_forecast_exports): <p>An array of <code>WhatIfForecastExports</code> objects that describe the matched forecast exports.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWhatIfForecastExportsOutput::next_token): <p>If the response is truncated, Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListWhatIfForecastExportsError>`](crate::error::ListWhatIfForecastExportsError)
    pub fn list_what_if_forecast_exports(&self) -> fluent_builders::ListWhatIfForecastExports {
        fluent_builders::ListWhatIfForecastExports::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWhatIfForecasts`](crate::client::fluent_builders::ListWhatIfForecasts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWhatIfForecasts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWhatIfForecasts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWhatIfForecasts::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWhatIfForecasts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWhatIfForecasts::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListWhatIfForecasts::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListWhatIfForecasts::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all jobs that export a forecast named <i>electricityWhatIfForecast</i>, specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastArn", "Value": "arn:aws:forecast:us-west-2:   <acct-id>    :forecast/electricityWhatIfForecast" } ]   </acct-id></code> </p>
    /// - On success, responds with [`ListWhatIfForecastsOutput`](crate::output::ListWhatIfForecastsOutput) with field(s):
    ///   - [`what_if_forecasts(Option<Vec<WhatIfForecastSummary>>)`](crate::output::ListWhatIfForecastsOutput::what_if_forecasts): <p>An array of <code>WhatIfForecasts</code> objects that describe the matched forecasts.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWhatIfForecastsOutput::next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
    /// - On failure, responds with [`SdkError<ListWhatIfForecastsError>`](crate::error::ListWhatIfForecastsError)
    pub fn list_what_if_forecasts(&self) -> fluent_builders::ListWhatIfForecasts {
        fluent_builders::ListWhatIfForecasts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ResumeResource`](crate::client::fluent_builders::ResumeResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ResumeResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ResumeResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the monitor resource to resume.</p>
    /// - On success, responds with [`ResumeResourceOutput`](crate::output::ResumeResourceOutput)

    /// - On failure, responds with [`SdkError<ResumeResourceError>`](crate::error::ResumeResourceError)
    pub fn resume_resource(&self) -> fluent_builders::ResumeResource {
        fluent_builders::ResumeResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopResource`](crate::client::fluent_builders::StopResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::StopResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::StopResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource to stop. The supported ARNs are <code>DatasetImportJobArn</code>, <code>PredictorArn</code>, <code>PredictorBacktestExportJobArn</code>, <code>ForecastArn</code>, <code>ForecastExportJobArn</code>, <code>ExplainabilityArn</code>, and <code>ExplainabilityExportArn</code>. </p>
    /// - On success, responds with [`StopResourceOutput`](crate::output::StopResourceOutput)

    /// - On failure, responds with [`SdkError<StopResourceError>`](crate::error::StopResourceError)
    pub fn stop_resource(&self) -> fluent_builders::StopResource {
        fluent_builders::StopResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>  <p>The following basic restrictions apply to tags:</p>  <ul>   <li> <p>Maximum number of tags per resource - 50.</p> </li>   <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>   <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>   <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>   <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>   <li> <p>Tag keys and values are case sensitive.</p> </li>   <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>  </ul>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The keys of the tags to be removed.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDatasetGroup`](crate::client::fluent_builders::UpdateDatasetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_group_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateDatasetGroup::dataset_group_arn) / [`set_dataset_group_arn(Option<String>)`](crate::client::fluent_builders::UpdateDatasetGroup::set_dataset_group_arn): <p>The ARN of the dataset group.</p>
    ///   - [`dataset_arns(Vec<String>)`](crate::client::fluent_builders::UpdateDatasetGroup::dataset_arns) / [`set_dataset_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateDatasetGroup::set_dataset_arns): <p>An array of the Amazon Resource Names (ARNs) of the datasets to add to the dataset group.</p>
    /// - On success, responds with [`UpdateDatasetGroupOutput`](crate::output::UpdateDatasetGroupOutput)

    /// - On failure, responds with [`SdkError<UpdateDatasetGroupError>`](crate::error::UpdateDatasetGroupError)
    pub fn update_dataset_group(&self) -> fluent_builders::UpdateDatasetGroup {
        fluent_builders::UpdateDatasetGroup::new(self.handle.clone())
    }
}
pub mod fluent_builders {

    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `CreateAutoPredictor`.
    ///
    /// <p>Creates an Amazon Forecast predictor.</p>
    /// <p>Amazon Forecast creates predictors with AutoPredictor, which involves applying the optimal combination of algorithms to each time series in your datasets. You can use <code>CreateAutoPredictor</code> to create new predictors or upgrade/retrain existing predictors.</p>
    /// <p> <b>Creating new predictors</b> </p>
    /// <p>The following parameters are required when creating a new predictor:</p>
    /// <ul>
    /// <li> <p> <code>PredictorName</code> - A unique name for the predictor.</p> </li>
    /// <li> <p> <code>DatasetGroupArn</code> - The ARN of the dataset group used to train the predictor.</p> </li>
    /// <li> <p> <code>ForecastFrequency</code> - The granularity of your forecasts (hourly, daily, weekly, etc).</p> </li>
    /// <li> <p> <code>ForecastHorizon</code> - The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p> </li>
    /// </ul>
    /// <p>When creating a new predictor, do not specify a value for <code>ReferencePredictorArn</code>.</p>
    /// <p> <b>Upgrading and retraining predictors</b> </p>
    /// <p>The following parameters are required when retraining or upgrading a predictor:</p>
    /// <ul>
    /// <li> <p> <code>PredictorName</code> - A unique name for the predictor.</p> </li>
    /// <li> <p> <code>ReferencePredictorArn</code> - The ARN of the predictor to retrain or upgrade.</p> </li>
    /// </ul>
    /// <p>When upgrading or retraining a predictor, only specify values for the <code>ReferencePredictorArn</code> and <code>PredictorName</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateAutoPredictor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_auto_predictor_input::Builder,
    }
    impl CreateAutoPredictor {
        /// Creates a new `CreateAutoPredictor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateAutoPredictor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateAutoPredictorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateAutoPredictorOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateAutoPredictorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A unique name for the predictor</p>
        pub fn predictor_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_name(input.into());
            self
        }
        /// <p>A unique name for the predictor</p>
        pub fn set_predictor_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_name(input);
            self
        }
        /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
        /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/4 of the TARGET_TIME_SERIES dataset length. If you are retraining an existing AutoPredictor, then the maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
        /// <p>If you are upgrading to an AutoPredictor or retraining an existing AutoPredictor, you cannot update the forecast horizon parameter. You can meet this requirement by providing longer time-series in the dataset.</p>
        pub fn forecast_horizon(mut self, input: i32) -> Self {
            self.inner = self.inner.forecast_horizon(input);
            self
        }
        /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
        /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/4 of the TARGET_TIME_SERIES dataset length. If you are retraining an existing AutoPredictor, then the maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
        /// <p>If you are upgrading to an AutoPredictor or retraining an existing AutoPredictor, you cannot update the forecast horizon parameter. You can meet this requirement by providing longer time-series in the dataset.</p>
        pub fn set_forecast_horizon(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_forecast_horizon(input);
            self
        }
        /// Appends an item to `ForecastTypes`.
        ///
        /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
        ///
        /// <p>The forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>.</p>
        pub fn forecast_types(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_types(input.into());
            self
        }
        /// <p>The forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>.</p>
        pub fn set_forecast_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_forecast_types(input);
            self
        }
        /// Appends an item to `ForecastDimensions`.
        ///
        /// To override the contents of this collection use [`set_forecast_dimensions`](Self::set_forecast_dimensions).
        ///
        /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
        /// <p>For example, if you are generating forecasts for item sales across all your stores, and your dataset contains a <code>store_id</code> field, you would specify <code>store_id</code> as a dimension to group sales forecasts for each store.</p>
        pub fn forecast_dimensions(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_dimensions(input.into());
            self
        }
        /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
        /// <p>For example, if you are generating forecasts for item sales across all your stores, and your dataset contains a <code>store_id</code> field, you would specify <code>store_id</code> as a dimension to group sales forecasts for each store.</p>
        pub fn set_forecast_dimensions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_forecast_dimensions(input);
            self
        }
        /// <p>The frequency of predictions in a forecast.</p>
        /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
        /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
        /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
        pub fn forecast_frequency(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_frequency(input.into());
            self
        }
        /// <p>The frequency of predictions in a forecast.</p>
        /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
        /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
        /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
        pub fn set_forecast_frequency(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_forecast_frequency(input);
            self
        }
        /// <p>The data configuration for your dataset group and any additional datasets.</p>
        pub fn data_config(mut self, input: crate::model::DataConfig) -> Self {
            self.inner = self.inner.data_config(input);
            self
        }
        /// <p>The data configuration for your dataset group and any additional datasets.</p>
        pub fn set_data_config(
            mut self,
            input: std::option::Option<crate::model::DataConfig>,
        ) -> Self {
            self.inner = self.inner.set_data_config(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
        pub fn encryption_config(mut self, input: crate::model::EncryptionConfig) -> Self {
            self.inner = self.inner.encryption_config(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
        pub fn set_encryption_config(
            mut self,
            input: std::option::Option<crate::model::EncryptionConfig>,
        ) -> Self {
            self.inner = self.inner.set_encryption_config(input);
            self
        }
        /// <p>The ARN of the predictor to retrain or upgrade. This parameter is only used when retraining or upgrading a predictor. When creating a new predictor, do not specify a value for this parameter.</p>
        /// <p>When upgrading or retraining a predictor, only specify values for the <code>ReferencePredictorArn</code> and <code>PredictorName</code>. The value for <code>PredictorName</code> must be a unique predictor name.</p>
        pub fn reference_predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reference_predictor_arn(input.into());
            self
        }
        /// <p>The ARN of the predictor to retrain or upgrade. This parameter is only used when retraining or upgrading a predictor. When creating a new predictor, do not specify a value for this parameter.</p>
        /// <p>When upgrading or retraining a predictor, only specify values for the <code>ReferencePredictorArn</code> and <code>PredictorName</code>. The value for <code>PredictorName</code> must be a unique predictor name.</p>
        pub fn set_reference_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_reference_predictor_arn(input);
            self
        }
        /// <p>The accuracy metric used to optimize the predictor.</p>
        pub fn optimization_metric(mut self, input: crate::model::OptimizationMetric) -> Self {
            self.inner = self.inner.optimization_metric(input);
            self
        }
        /// <p>The accuracy metric used to optimize the predictor.</p>
        pub fn set_optimization_metric(
            mut self,
            input: std::option::Option<crate::model::OptimizationMetric>,
        ) -> Self {
            self.inner = self.inner.set_optimization_metric(input);
            self
        }
        /// <p>Create an Explainability resource for the predictor.</p>
        pub fn explain_predictor(mut self, input: bool) -> Self {
            self.inner = self.inner.explain_predictor(input);
            self
        }
        /// <p>Create an Explainability resource for the predictor.</p>
        pub fn set_explain_predictor(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_explain_predictor(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Optional metadata to help you categorize and organize your predictors. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>Optional metadata to help you categorize and organize your predictors. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The configuration details for predictor monitoring. Provide a name for the monitor resource to enable predictor monitoring.</p>
        /// <p>Predictor monitoring allows you to see how your predictor's performance changes over time. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring.html">Predictor Monitoring</a>.</p>
        pub fn monitor_config(mut self, input: crate::model::MonitorConfig) -> Self {
            self.inner = self.inner.monitor_config(input);
            self
        }
        /// <p>The configuration details for predictor monitoring. Provide a name for the monitor resource to enable predictor monitoring.</p>
        /// <p>Predictor monitoring allows you to see how your predictor's performance changes over time. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring.html">Predictor Monitoring</a>.</p>
        pub fn set_monitor_config(
            mut self,
            input: std::option::Option<crate::model::MonitorConfig>,
        ) -> Self {
            self.inner = self.inner.set_monitor_config(input);
            self
        }
        /// <p>The time boundary Forecast uses to align and aggregate any data that doesn't align with your forecast frequency. Provide the unit of time and the time boundary as a key value pair. For more information on specifying a time boundary, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#specifying-time-boundary">Specifying a Time Boundary</a>. If you don't provide a time boundary, Forecast uses a set of <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#default-time-boundaries">Default Time Boundaries</a>.</p>
        pub fn time_alignment_boundary(
            mut self,
            input: crate::model::TimeAlignmentBoundary,
        ) -> Self {
            self.inner = self.inner.time_alignment_boundary(input);
            self
        }
        /// <p>The time boundary Forecast uses to align and aggregate any data that doesn't align with your forecast frequency. Provide the unit of time and the time boundary as a key value pair. For more information on specifying a time boundary, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#specifying-time-boundary">Specifying a Time Boundary</a>. If you don't provide a time boundary, Forecast uses a set of <a href="https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#default-time-boundaries">Default Time Boundaries</a>.</p>
        pub fn set_time_alignment_boundary(
            mut self,
            input: std::option::Option<crate::model::TimeAlignmentBoundary>,
        ) -> Self {
            self.inner = self.inner.set_time_alignment_boundary(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateDataset`.
    ///
    /// <p>Creates an Amazon Forecast dataset. The information about the dataset that you provide helps Forecast understand how to consume the data for model training. This includes the following:</p>
    /// <ul>
    /// <li> <p> <i> <code>DataFrequency</code> </i> - How frequently your historical time-series data is collected.</p> </li>
    /// <li> <p> <i> <code>Domain</code> </i> and <i> <code>DatasetType</code> </i> - Each dataset has an associated dataset domain and a type within the domain. Amazon Forecast provides a list of predefined domains and types within each domain. For each unique dataset domain and type within the domain, Amazon Forecast requires your data to include a minimum set of predefined fields.</p> </li>
    /// <li> <p> <i> <code>Schema</code> </i> - A schema specifies the fields in the dataset, including the field name and data type.</p> </li>
    /// </ul>
    /// <p>After creating a dataset, you import your training data into it and add the dataset to a dataset group. You use the dataset group to create a predictor. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Importing datasets</a>.</p>
    /// <p>To get a list of all your datasets, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasets.html">ListDatasets</a> operation.</p>
    /// <p>For example Forecast datasets, see the <a href="https://github.com/aws-samples/amazon-forecast-samples">Amazon Forecast Sample GitHub repository</a>.</p> <note>
    /// <p>The <code>Status</code> of a dataset must be <code>ACTIVE</code> before you can import training data. Use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html">DescribeDataset</a> operation to get the status.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateDataset {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_dataset_input::Builder,
    }
    impl CreateDataset {
        /// Creates a new `CreateDataset`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateDataset,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDatasetOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A name for the dataset.</p>
        pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_name(input.into());
            self
        }
        /// <p>A name for the dataset.</p>
        pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_dataset_name(input);
            self
        }
        /// <p>The domain associated with the dataset. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation must match.</p>
        /// <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in the training data that you import to the dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields to be present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Importing datasets</a>.</p>
        pub fn domain(mut self, input: crate::model::Domain) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        /// <p>The domain associated with the dataset. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation must match.</p>
        /// <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in the training data that you import to the dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields to be present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Importing datasets</a>.</p>
        pub fn set_domain(mut self, input: std::option::Option<crate::model::Domain>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// <p>The dataset type. Valid values depend on the chosen <code>Domain</code>.</p>
        pub fn dataset_type(mut self, input: crate::model::DatasetType) -> Self {
            self.inner = self.inner.dataset_type(input);
            self
        }
        /// <p>The dataset type. Valid values depend on the chosen <code>Domain</code>.</p>
        pub fn set_dataset_type(
            mut self,
            input: std::option::Option<crate::model::DatasetType>,
        ) -> Self {
            self.inner = self.inner.set_dataset_type(input);
            self
        }
        /// <p>The frequency of data collection. This parameter is required for RELATED_TIME_SERIES datasets.</p>
        /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "D" indicates every day and "15min" indicates every 15 minutes.</p>
        pub fn data_frequency(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.data_frequency(input.into());
            self
        }
        /// <p>The frequency of data collection. This parameter is required for RELATED_TIME_SERIES datasets.</p>
        /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "D" indicates every day and "15min" indicates every 15 minutes.</p>
        pub fn set_data_frequency(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_data_frequency(input);
            self
        }
        /// <p>The schema for the dataset. The schema attributes and their order must match the fields in your data. The dataset <code>Domain</code> and <code>DatasetType</code> that you choose determine the minimum required fields in your training data. For information about the required fields for a specific dataset domain and type, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-domains-ds-types.html">Dataset Domains and Dataset Types</a>.</p>
        pub fn schema(mut self, input: crate::model::Schema) -> Self {
            self.inner = self.inner.schema(input);
            self
        }
        /// <p>The schema for the dataset. The schema attributes and their order must match the fields in your data. The dataset <code>Domain</code> and <code>DatasetType</code> that you choose determine the minimum required fields in your training data. For information about the required fields for a specific dataset domain and type, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-domains-ds-types.html">Dataset Domains and Dataset Types</a>.</p>
        pub fn set_schema(mut self, input: std::option::Option<crate::model::Schema>) -> Self {
            self.inner = self.inner.set_schema(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
        pub fn encryption_config(mut self, input: crate::model::EncryptionConfig) -> Self {
            self.inner = self.inner.encryption_config(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
        pub fn set_encryption_config(
            mut self,
            input: std::option::Option<crate::model::EncryptionConfig>,
        ) -> Self {
            self.inner = self.inner.set_encryption_config(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the dataset to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the dataset to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateDatasetGroup`.
    ///
    /// <p>Creates a dataset group, which holds a collection of related datasets. You can add datasets to the dataset group when you create the dataset group, or later by using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html">UpdateDatasetGroup</a> operation.</p>
    /// <p>After creating a dataset group and adding datasets, you use the dataset group when you create a predictor. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Dataset groups</a>.</p>
    /// <p>To get a list of all your datasets groups, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasetGroups.html">ListDatasetGroups</a> operation.</p> <note>
    /// <p>The <code>Status</code> of a dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor. To get the status, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html">DescribeDatasetGroup</a> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateDatasetGroup {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_dataset_group_input::Builder,
    }
    impl CreateDatasetGroup {
        /// Creates a new `CreateDatasetGroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateDatasetGroup,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetGroupError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDatasetGroupOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetGroupError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A name for the dataset group.</p>
        pub fn dataset_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_group_name(input.into());
            self
        }
        /// <p>A name for the dataset group.</p>
        pub fn set_dataset_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_group_name(input);
            self
        }
        /// <p>The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation must match.</p>
        /// <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in training data that you import to a dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires that <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields are present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Dataset groups</a>.</p>
        pub fn domain(mut self, input: crate::model::Domain) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        /// <p>The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the <code>Domain</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation must match.</p>
        /// <p>The <code>Domain</code> and <code>DatasetType</code> that you choose determine the fields that must be present in training data that you import to a dataset. For example, if you choose the <code>RETAIL</code> domain and <code>TARGET_TIME_SERIES</code> as the <code>DatasetType</code>, Amazon Forecast requires that <code>item_id</code>, <code>timestamp</code>, and <code>demand</code> fields are present in your data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html">Dataset groups</a>.</p>
        pub fn set_domain(mut self, input: std::option::Option<crate::model::Domain>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// Appends an item to `DatasetArns`.
        ///
        /// To override the contents of this collection use [`set_dataset_arns`](Self::set_dataset_arns).
        ///
        /// <p>An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.</p>
        pub fn dataset_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_arns(input.into());
            self
        }
        /// <p>An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.</p>
        pub fn set_dataset_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_dataset_arns(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the dataset group to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the dataset group to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateDatasetImportJob`.
    ///
    /// <p>Imports your training data to an Amazon Forecast dataset. You provide the location of your training data in an Amazon Simple Storage Service (Amazon S3) bucket and the Amazon Resource Name (ARN) of the dataset that you want to import the data to.</p>
    /// <p>You must specify a <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DataSource.html">DataSource</a> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data, as Amazon Forecast makes a copy of your data and processes it in an internal AWS system. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/aws-forecast-iam-roles.html">Set up permissions</a>.</p>
    /// <p>The training data must be in CSV or Parquet format. The delimiter must be a comma (,).</p>
    /// <p>You can specify the path to a specific file, the S3 bucket, or to a folder in the S3 bucket. For the latter two cases, Amazon Forecast imports all files up to the limit of 10,000 files.</p>
    /// <p>Because dataset imports are not aggregated, your most recent dataset import is the one that is used when training a predictor or generating a forecast. Make sure that your most recent dataset import contains all of the data you want to model off of, and not just the new data collected since the previous import.</p>
    /// <p>To get a list of all your dataset import jobs, filtered by specified criteria, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasetImportJobs.html">ListDatasetImportJobs</a> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateDatasetImportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_dataset_import_job_input::Builder,
    }
    impl CreateDatasetImportJob {
        /// Creates a new `CreateDatasetImportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateDatasetImportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetImportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDatasetImportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateDatasetImportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name for the dataset import job. We recommend including the current timestamp in the name, for example, <code>20190721DatasetImport</code>. This can help you avoid getting a <code>ResourceAlreadyExistsException</code> exception.</p>
        pub fn dataset_import_job_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_import_job_name(input.into());
            self
        }
        /// <p>The name for the dataset import job. We recommend including the current timestamp in the name, for example, <code>20190721DatasetImport</code>. This can help you avoid getting a <code>ResourceAlreadyExistsException</code> exception.</p>
        pub fn set_dataset_import_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_import_job_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Forecast dataset that you want to import data to.</p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Forecast dataset that you want to import data to.</p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_dataset_arn(input);
            self
        }
        /// <p>The location of the training data to import and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data. The training data must be stored in an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>DataSource</code> must include an AWS Key Management Service (KMS) key and the IAM role must allow Amazon Forecast permission to access the key. The KMS key and IAM role must match those specified in the <code>EncryptionConfig</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation.</p>
        pub fn data_source(mut self, input: crate::model::DataSource) -> Self {
            self.inner = self.inner.data_source(input);
            self
        }
        /// <p>The location of the training data to import and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data. The training data must be stored in an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>DataSource</code> must include an AWS Key Management Service (KMS) key and the IAM role must allow Amazon Forecast permission to access the key. The KMS key and IAM role must match those specified in the <code>EncryptionConfig</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation.</p>
        pub fn set_data_source(
            mut self,
            input: std::option::Option<crate::model::DataSource>,
        ) -> Self {
            self.inner = self.inner.set_data_source(input);
            self
        }
        /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
        /// <ul>
        /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
        /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
        /// </ul>
        /// <p>If the format isn't specified, Amazon Forecast expects the format to be "yyyy-MM-dd HH:mm:ss".</p>
        pub fn timestamp_format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.timestamp_format(input.into());
            self
        }
        /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
        /// <ul>
        /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
        /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
        /// </ul>
        /// <p>If the format isn't specified, Amazon Forecast expects the format to be "yyyy-MM-dd HH:mm:ss".</p>
        pub fn set_timestamp_format(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_timestamp_format(input);
            self
        }
        /// <p>A single time zone for every item in your dataset. This option is ideal for datasets with all timestamps within a single time zone, or if all timestamps are normalized to a single time zone. </p>
        /// <p>Refer to the <a href="http://joda-time.sourceforge.net/timezones.html">Joda-Time API</a> for a complete list of valid time zone names.</p>
        pub fn time_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.time_zone(input.into());
            self
        }
        /// <p>A single time zone for every item in your dataset. This option is ideal for datasets with all timestamps within a single time zone, or if all timestamps are normalized to a single time zone. </p>
        /// <p>Refer to the <a href="http://joda-time.sourceforge.net/timezones.html">Joda-Time API</a> for a complete list of valid time zone names.</p>
        pub fn set_time_zone(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_time_zone(input);
            self
        }
        /// <p>Automatically derive time zone information from the geolocation attribute. This option is ideal for datasets that contain timestamps in multiple time zones and those timestamps are expressed in local time.</p>
        pub fn use_geolocation_for_time_zone(mut self, input: bool) -> Self {
            self.inner = self.inner.use_geolocation_for_time_zone(input);
            self
        }
        /// <p>Automatically derive time zone information from the geolocation attribute. This option is ideal for datasets that contain timestamps in multiple time zones and those timestamps are expressed in local time.</p>
        pub fn set_use_geolocation_for_time_zone(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_use_geolocation_for_time_zone(input);
            self
        }
        /// <p>The format of the geolocation attribute. The geolocation attribute can be formatted in one of two ways:</p>
        /// <ul>
        /// <li> <p> <code>LAT_LONG</code> - the latitude and longitude in decimal format (Example: 47.61_-122.33).</p> </li>
        /// <li> <p> <code>CC_POSTALCODE</code> (US Only) - the country code (US), followed by the 5-digit ZIP code (Example: US_98121).</p> </li>
        /// </ul>
        pub fn geolocation_format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.geolocation_format(input.into());
            self
        }
        /// <p>The format of the geolocation attribute. The geolocation attribute can be formatted in one of two ways:</p>
        /// <ul>
        /// <li> <p> <code>LAT_LONG</code> - the latitude and longitude in decimal format (Example: 47.61_-122.33).</p> </li>
        /// <li> <p> <code>CC_POSTALCODE</code> (US Only) - the country code (US), followed by the 5-digit ZIP code (Example: US_98121).</p> </li>
        /// </ul>
        pub fn set_geolocation_format(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_geolocation_format(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the dataset import job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the dataset import job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The format of the imported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.format(input.into());
            self
        }
        /// <p>The format of the imported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_format(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateExplainability`.
    ///
    /// <note>
    /// <p>Explainability is only available for Forecasts and Predictors generated from an AutoPredictor (<code>CreateAutoPredictor</code>)</p>
    /// </note>
    /// <p>Creates an Amazon Forecast Explainability.</p>
    /// <p>Explainability helps you better understand how the attributes in your datasets impact forecast. Amazon Forecast uses a metric called Impact scores to quantify the relative impact of each attribute and determine whether they increase or decrease forecast values.</p>
    /// <p>To enable Forecast Explainability, your predictor must include at least one of the following: related time series, item metadata, or additional datasets like Holidays and the Weather Index.</p>
    /// <p>CreateExplainability accepts either a Predictor ARN or Forecast ARN. To receive aggregated Impact scores for all time series and time points in your datasets, provide a Predictor ARN. To receive Impact scores for specific time series and time points, provide a Forecast ARN.</p>
    /// <p> <b>CreateExplainability with a Predictor ARN</b> </p> <note>
    /// <p>You can only have one Explainability resource per predictor. If you already enabled <code>ExplainPredictor</code> in <code>CreateAutoPredictor</code>, that predictor already has an Explainability resource.</p>
    /// </note>
    /// <p>The following parameters are required when providing a Predictor ARN:</p>
    /// <ul>
    /// <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li>
    /// <li> <p> <code>ResourceArn</code> - The Arn of the predictor.</p> </li>
    /// <li> <p> <code>TimePointGranularity</code> - Must be set to “ALL”.</p> </li>
    /// <li> <p> <code>TimeSeriesGranularity</code> - Must be set to “ALL”.</p> </li>
    /// </ul>
    /// <p>Do not specify a value for the following parameters:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li>
    /// <li> <p> <code>Schema</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li>
    /// <li> <p> <code>StartDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li>
    /// <li> <p> <code>EndDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li>
    /// </ul>
    /// <p> <b>CreateExplainability with a Forecast ARN</b> </p> <note>
    /// <p>You can specify a maximum of 50 time series and 500 time points.</p>
    /// </note>
    /// <p>The following parameters are required when providing a Predictor ARN:</p>
    /// <ul>
    /// <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li>
    /// <li> <p> <code>ResourceArn</code> - The Arn of the forecast.</p> </li>
    /// <li> <p> <code>TimePointGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li>
    /// <li> <p> <code>TimeSeriesGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li>
    /// </ul>
    /// <p>If you set TimeSeriesGranularity to “SPECIFIC”, you must also provide the following:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> - The S3 location of the CSV file specifying your time series.</p> </li>
    /// <li> <p> <code>Schema</code> - The Schema defines the attributes and attribute types listed in the Data Source.</p> </li>
    /// </ul>
    /// <p>If you set TimePointGranularity to “SPECIFIC”, you must also provide the following:</p>
    /// <ul>
    /// <li> <p> <code>StartDateTime</code> - The first timestamp in the range of time points.</p> </li>
    /// <li> <p> <code>EndDateTime</code> - The last timestamp in the range of time points.</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateExplainability {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_explainability_input::Builder,
    }
    impl CreateExplainability {
        /// Creates a new `CreateExplainability`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateExplainability,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateExplainabilityOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A unique name for the Explainability.</p>
        pub fn explainability_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_name(input.into());
            self
        }
        /// <p>A unique name for the Explainability.</p>
        pub fn set_explainability_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
        pub fn explainability_config(mut self, input: crate::model::ExplainabilityConfig) -> Self {
            self.inner = self.inner.explainability_config(input);
            self
        }
        /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
        pub fn set_explainability_config(
            mut self,
            input: std::option::Option<crate::model::ExplainabilityConfig>,
        ) -> Self {
            self.inner = self.inner.set_explainability_config(input);
            self
        }
        /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
        pub fn data_source(mut self, input: crate::model::DataSource) -> Self {
            self.inner = self.inner.data_source(input);
            self
        }
        /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
        pub fn set_data_source(
            mut self,
            input: std::option::Option<crate::model::DataSource>,
        ) -> Self {
            self.inner = self.inner.set_data_source(input);
            self
        }
        /// <p>Defines the fields of a dataset.</p>
        pub fn schema(mut self, input: crate::model::Schema) -> Self {
            self.inner = self.inner.schema(input);
            self
        }
        /// <p>Defines the fields of a dataset.</p>
        pub fn set_schema(mut self, input: std::option::Option<crate::model::Schema>) -> Self {
            self.inner = self.inner.set_schema(input);
            self
        }
        /// <p>Create an Explainability visualization that is viewable within the AWS console.</p>
        pub fn enable_visualization(mut self, input: bool) -> Self {
            self.inner = self.inner.enable_visualization(input);
            self
        }
        /// <p>Create an Explainability visualization that is viewable within the AWS console.</p>
        pub fn set_enable_visualization(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_visualization(input);
            self
        }
        /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>
        /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
        pub fn start_date_time(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.start_date_time(input.into());
            self
        }
        /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>
        /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
        pub fn set_start_date_time(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_start_date_time(input);
            self
        }
        /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>
        /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
        pub fn end_date_time(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.end_date_time(input.into());
            self
        }
        /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>
        /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
        pub fn set_end_date_time(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_end_date_time(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateExplainabilityExport`.
    ///
    /// <p>Exports an Explainability resource created by the <code>CreateExplainability</code> operation. Exported files are exported to an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    /// <p>You must specify a <code>DataDestination</code> object that includes an Amazon S3 bucket and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p> <note>
    /// <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before you can access the export in your Amazon S3 bucket. To get the status, use the <code>DescribeExplainabilityExport</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateExplainabilityExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_explainability_export_input::Builder,
    }
    impl CreateExplainabilityExport {
        /// Creates a new `CreateExplainabilityExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateExplainabilityExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateExplainabilityExportOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A unique name for the Explainability export.</p>
        pub fn explainability_export_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_export_name(input.into());
            self
        }
        /// <p>A unique name for the Explainability export.</p>
        pub fn set_explainability_export_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_export_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability to export.</p>
        pub fn explainability_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability to export.</p>
        pub fn set_explainability_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_arn(input);
            self
        }
        /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
        pub fn destination(mut self, input: crate::model::DataDestination) -> Self {
            self.inner = self.inner.destination(input);
            self
        }
        /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
        pub fn set_destination(
            mut self,
            input: std::option::Option<crate::model::DataDestination>,
        ) -> Self {
            self.inner = self.inner.set_destination(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET.</p>
        pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.format(input.into());
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET.</p>
        pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_format(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateForecast`.
    ///
    /// <p>Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that was used to train the predictor. This is known as inference. To retrieve the forecast for a single item at low latency, use the operation. To export the complete forecast into your Amazon Simple Storage Service (Amazon S3) bucket, use the <code>CreateForecastExportJob</code> operation.</p>
    /// <p>The range of the forecast is determined by the <code>ForecastHorizon</code> value, which you specify in the <code>CreatePredictor</code> request. When you query a forecast, you can request a specific date range within the forecast.</p>
    /// <p>To get a list of all your forecasts, use the <code>ListForecasts</code> operation.</p> <note>
    /// <p>The forecasts generated by Amazon Forecast are in the same time zone as the dataset that was used to create the predictor.</p>
    /// </note>
    /// <p>For more information, see <code>howitworks-forecast</code>.</p> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast. Use the <code>DescribeForecast</code> operation to get the status.</p>
    /// </note>
    /// <p>By default, a forecast includes predictions for every item (<code>item_id</code>) in the dataset group that was used to train the predictor. However, you can use the <code>TimeSeriesSelector</code> object to generate a forecast on a subset of time series. Forecast creation is skipped for any time series that you specify that are not in the input dataset. The forecast export file will not contain these time series or their forecasted values.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_forecast_input::Builder,
    }
    impl CreateForecast {
        /// Creates a new `CreateForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A name for the forecast.</p>
        pub fn forecast_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_name(input.into());
            self
        }
        /// <p>A name for the forecast.</p>
        pub fn set_forecast_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_forecast_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to use to generate the forecast.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to use to generate the forecast.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
        /// Appends an item to `ForecastTypes`.
        ///
        /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
        ///
        /// <p>The quantiles at which probabilistic forecasts are generated. <b>You can currently specify up to 5 quantiles per forecast</b>. Accepted values include <code>0.01 to 0.99</code> (increments of .01 only) and <code>mean</code>. The mean forecast is different from the median (0.50) when the distribution is not symmetric (for example, Beta and Negative Binomial). </p>
        /// <p>The default quantiles are the quantiles you specified during predictor creation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
        pub fn forecast_types(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_types(input.into());
            self
        }
        /// <p>The quantiles at which probabilistic forecasts are generated. <b>You can currently specify up to 5 quantiles per forecast</b>. Accepted values include <code>0.01 to 0.99</code> (increments of .01 only) and <code>mean</code>. The mean forecast is different from the median (0.50) when the distribution is not symmetric (for example, Beta and Negative Binomial). </p>
        /// <p>The default quantiles are the quantiles you specified during predictor creation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
        pub fn set_forecast_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_forecast_types(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the forecast to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the forecast to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
        /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
        /// <ul>
        /// <li> <p> <code>DataSource</code> </p> </li>
        /// <li> <p> <code>Format</code> </p> </li>
        /// <li> <p> <code>Schema</code> </p> </li>
        /// </ul>
        pub fn time_series_selector(mut self, input: crate::model::TimeSeriesSelector) -> Self {
            self.inner = self.inner.time_series_selector(input);
            self
        }
        /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
        /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
        /// <ul>
        /// <li> <p> <code>DataSource</code> </p> </li>
        /// <li> <p> <code>Format</code> </p> </li>
        /// <li> <p> <code>Schema</code> </p> </li>
        /// </ul>
        pub fn set_time_series_selector(
            mut self,
            input: std::option::Option<crate::model::TimeSeriesSelector>,
        ) -> Self {
            self.inner = self.inner.set_time_series_selector(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateForecastExportJob`.
    ///
    /// <p>Exports a forecast created by the <code>CreateForecast</code> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p>
    /// <p>
    /// <forecastexportjobname>
    /// _
    /// <exporttimestamp>
    /// _
    /// <partnumber></partnumber>
    /// </exporttimestamp>
    /// </forecastexportjobname></p>
    /// <p>where the <exporttimestamp>
    /// component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).
    /// </exporttimestamp></p>
    /// <p>You must specify a <code>DataDestination</code> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p>
    /// <p>For more information, see <code>howitworks-forecast</code>.</p>
    /// <p>To get a list of all your forecast export jobs, use the <code>ListForecastExportJobs</code> operation.</p> <note>
    /// <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <code>DescribeForecastExportJob</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateForecastExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_forecast_export_job_input::Builder,
    }
    impl CreateForecastExportJob {
        /// Creates a new `CreateForecastExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateForecastExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateForecastExportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateForecastExportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateForecastExportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name for the forecast export job.</p>
        pub fn forecast_export_job_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_export_job_name(input.into());
            self
        }
        /// <p>The name for the forecast export job.</p>
        pub fn set_forecast_export_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_forecast_export_job_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast that you want to export.</p>
        pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast that you want to export.</p>
        pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_forecast_arn(input);
            self
        }
        /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
        pub fn destination(mut self, input: crate::model::DataDestination) -> Self {
            self.inner = self.inner.destination(input);
            self
        }
        /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
        pub fn set_destination(
            mut self,
            input: std::option::Option<crate::model::DataDestination>,
        ) -> Self {
            self.inner = self.inner.set_destination(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the forecast export job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the forecast export job to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.format(input.into());
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_format(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateMonitor`.
    ///
    /// <p>Creates a predictor monitor resource for an existing auto predictor. Predictor monitoring allows you to see how your predictor's performance changes over time. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring.html">Predictor Monitoring</a>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateMonitor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_monitor_input::Builder,
    }
    impl CreateMonitor {
        /// Creates a new `CreateMonitor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateMonitor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateMonitorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateMonitorOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateMonitorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the monitor resource.</p>
        pub fn monitor_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.monitor_name(input.into());
            self
        }
        /// <p>The name of the monitor resource.</p>
        pub fn set_monitor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_monitor_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to monitor.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to monitor.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the monitor resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the monitor resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreatePredictor`.
    ///
    /// <note>
    /// <p> This operation creates a legacy predictor that does not include all the predictor functionalities provided by Amazon Forecast. To create a predictor that is compatible with all aspects of Forecast, use <code>CreateAutoPredictor</code>.</p>
    /// </note>
    /// <p>Creates an Amazon Forecast predictor.</p>
    /// <p>In the request, provide a dataset group and either specify an algorithm or let Amazon Forecast choose an algorithm for you using AutoML. If you specify an algorithm, you also can override algorithm-specific hyperparameters.</p>
    /// <p>Amazon Forecast uses the algorithm to train a predictor using the latest version of the datasets in the specified dataset group. You can then generate a forecast using the <code>CreateForecast</code> operation.</p>
    /// <p> To see the evaluation metrics, use the <code>GetAccuracyMetrics</code> operation. </p>
    /// <p>You can specify a featurization configuration to fill and aggregate the data fields in the <code>TARGET_TIME_SERIES</code> dataset to improve model training. For more information, see <code>FeaturizationConfig</code>.</p>
    /// <p>For RELATED_TIME_SERIES datasets, <code>CreatePredictor</code> verifies that the <code>DataFrequency</code> specified when the dataset was created matches the <code>ForecastFrequency</code>. TARGET_TIME_SERIES datasets don't have this restriction. Amazon Forecast also verifies the delimiter and timestamp format. For more information, see <code>howitworks-datasets-groups</code>.</p>
    /// <p>By default, predictors are trained and evaluated at the 0.1 (P10), 0.5 (P50), and 0.9 (P90) quantiles. You can choose custom forecast types to train and evaluate your predictor by setting the <code>ForecastTypes</code>. </p>
    /// <p> <b>AutoML</b> </p>
    /// <p>If you want Amazon Forecast to evaluate each algorithm and choose the one that minimizes the <code>objective function</code>, set <code>PerformAutoML</code> to <code>true</code>. The <code>objective function</code> is defined as the mean of the weighted losses over the forecast types. By default, these are the p10, p50, and p90 quantile losses. For more information, see <code>EvaluationResult</code>.</p>
    /// <p>When AutoML is enabled, the following properties are disallowed:</p>
    /// <ul>
    /// <li> <p> <code>AlgorithmArn</code> </p> </li>
    /// <li> <p> <code>HPOConfig</code> </p> </li>
    /// <li> <p> <code>PerformHPO</code> </p> </li>
    /// <li> <p> <code>TrainingParameters</code> </p> </li>
    /// </ul>
    /// <p>To get a list of all of your predictors, use the <code>ListPredictors</code> operation.</p> <note>
    /// <p>Before you can use the predictor to create a forecast, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <code>DescribePredictor</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreatePredictor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_predictor_input::Builder,
    }
    impl CreatePredictor {
        /// Creates a new `CreatePredictor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreatePredictor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreatePredictorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePredictorOutput,
            aws_smithy_http::result::SdkError<crate::error::CreatePredictorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>A name for the predictor.</p>
        pub fn predictor_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_name(input.into());
            self
        }
        /// <p>A name for the predictor.</p>
        pub fn set_predictor_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
        /// <p class="title"> <b>Supported algorithms:</b> </p>
        /// <ul>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
        /// </ul>
        pub fn algorithm_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.algorithm_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
        /// <p class="title"> <b>Supported algorithms:</b> </p>
        /// <ul>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
        /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
        /// </ul>
        pub fn set_algorithm_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_algorithm_arn(input);
            self
        }
        /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
        /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
        /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
        pub fn forecast_horizon(mut self, input: i32) -> Self {
            self.inner = self.inner.forecast_horizon(input);
            self
        }
        /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
        /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
        /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
        pub fn set_forecast_horizon(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_forecast_horizon(input);
            self
        }
        /// Appends an item to `ForecastTypes`.
        ///
        /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
        ///
        /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
        /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
        pub fn forecast_types(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_types(input.into());
            self
        }
        /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
        /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
        pub fn set_forecast_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_forecast_types(input);
            self
        }
        /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
        /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
        /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
        pub fn perform_auto_ml(mut self, input: bool) -> Self {
            self.inner = self.inner.perform_auto_ml(input);
            self
        }
        /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
        /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
        /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
        pub fn set_perform_auto_ml(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_perform_auto_ml(input);
            self
        }
        /// <note>
        /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
        /// </note>
        /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
        /// <p>This parameter is only valid for predictors trained using AutoML.</p>
        pub fn auto_ml_override_strategy(
            mut self,
            input: crate::model::AutoMlOverrideStrategy,
        ) -> Self {
            self.inner = self.inner.auto_ml_override_strategy(input);
            self
        }
        /// <note>
        /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
        /// </note>
        /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
        /// <p>This parameter is only valid for predictors trained using AutoML.</p>
        pub fn set_auto_ml_override_strategy(
            mut self,
            input: std::option::Option<crate::model::AutoMlOverrideStrategy>,
        ) -> Self {
            self.inner = self.inner.set_auto_ml_override_strategy(input);
            self
        }
        /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
        /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
        /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
        /// <p>The following algorithms support HPO:</p>
        /// <ul>
        /// <li> <p>DeepAR+</p> </li>
        /// <li> <p>CNN-QR</p> </li>
        /// </ul>
        pub fn perform_hpo(mut self, input: bool) -> Self {
            self.inner = self.inner.perform_hpo(input);
            self
        }
        /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
        /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
        /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
        /// <p>The following algorithms support HPO:</p>
        /// <ul>
        /// <li> <p>DeepAR+</p> </li>
        /// <li> <p>CNN-QR</p> </li>
        /// </ul>
        pub fn set_perform_hpo(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_perform_hpo(input);
            self
        }
        /// Adds a key-value pair to `TrainingParameters`.
        ///
        /// To override the contents of this collection use [`set_training_parameters`](Self::set_training_parameters).
        ///
        /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
        pub fn training_parameters(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.training_parameters(k.into(), v.into());
            self
        }
        /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
        pub fn set_training_parameters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_training_parameters(input);
            self
        }
        /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
        pub fn evaluation_parameters(mut self, input: crate::model::EvaluationParameters) -> Self {
            self.inner = self.inner.evaluation_parameters(input);
            self
        }
        /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
        pub fn set_evaluation_parameters(
            mut self,
            input: std::option::Option<crate::model::EvaluationParameters>,
        ) -> Self {
            self.inner = self.inner.set_evaluation_parameters(input);
            self
        }
        /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
        /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
        pub fn hpo_config(mut self, input: crate::model::HyperParameterTuningJobConfig) -> Self {
            self.inner = self.inner.hpo_config(input);
            self
        }
        /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
        /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
        pub fn set_hpo_config(
            mut self,
            input: std::option::Option<crate::model::HyperParameterTuningJobConfig>,
        ) -> Self {
            self.inner = self.inner.set_hpo_config(input);
            self
        }
        /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
        pub fn input_data_config(mut self, input: crate::model::InputDataConfig) -> Self {
            self.inner = self.inner.input_data_config(input);
            self
        }
        /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
        pub fn set_input_data_config(
            mut self,
            input: std::option::Option<crate::model::InputDataConfig>,
        ) -> Self {
            self.inner = self.inner.set_input_data_config(input);
            self
        }
        /// <p>The featurization configuration.</p>
        pub fn featurization_config(mut self, input: crate::model::FeaturizationConfig) -> Self {
            self.inner = self.inner.featurization_config(input);
            self
        }
        /// <p>The featurization configuration.</p>
        pub fn set_featurization_config(
            mut self,
            input: std::option::Option<crate::model::FeaturizationConfig>,
        ) -> Self {
            self.inner = self.inner.set_featurization_config(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
        pub fn encryption_config(mut self, input: crate::model::EncryptionConfig) -> Self {
            self.inner = self.inner.encryption_config(input);
            self
        }
        /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
        pub fn set_encryption_config(
            mut self,
            input: std::option::Option<crate::model::EncryptionConfig>,
        ) -> Self {
            self.inner = self.inner.set_encryption_config(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The accuracy metric used to optimize the predictor.</p>
        pub fn optimization_metric(mut self, input: crate::model::OptimizationMetric) -> Self {
            self.inner = self.inner.optimization_metric(input);
            self
        }
        /// <p>The accuracy metric used to optimize the predictor.</p>
        pub fn set_optimization_metric(
            mut self,
            input: std::option::Option<crate::model::OptimizationMetric>,
        ) -> Self {
            self.inner = self.inner.set_optimization_metric(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreatePredictorBacktestExportJob`.
    ///
    /// <p>Exports backtest forecasts and accuracy metrics generated by the <code>CreateAutoPredictor</code> or <code>CreatePredictor</code> operations. Two folders containing CSV or Parquet files are exported to your specified S3 bucket.</p>
    /// <p> The export file names will match the following conventions:</p>
    /// <p> <code>
    /// <exportjobname>
    /// _
    /// <exporttimestamp>
    /// _
    /// <partnumber>
    /// .csv
    /// </partnumber>
    /// </exporttimestamp>
    /// </exportjobname></code> </p>
    /// <p>The <exporttimestamp>
    /// component is in Java SimpleDate format (yyyy-MM-ddTHH-mm-ssZ).
    /// </exporttimestamp></p>
    /// <p>You must specify a <code>DataDestination</code> object that includes an Amazon S3 bucket and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p> <note>
    /// <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before you can access the export in your Amazon S3 bucket. To get the status, use the <code>DescribePredictorBacktestExportJob</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreatePredictorBacktestExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_predictor_backtest_export_job_input::Builder,
    }
    impl CreatePredictorBacktestExportJob {
        /// Creates a new `CreatePredictorBacktestExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreatePredictorBacktestExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreatePredictorBacktestExportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePredictorBacktestExportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::CreatePredictorBacktestExportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name for the backtest export job.</p>
        pub fn predictor_backtest_export_job_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.predictor_backtest_export_job_name(input.into());
            self
        }
        /// <p>The name for the backtest export job.</p>
        pub fn set_predictor_backtest_export_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_backtest_export_job_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor that you want to export.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor that you want to export.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
        /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
        pub fn destination(mut self, input: crate::model::DataDestination) -> Self {
            self.inner = self.inner.destination(input);
            self
        }
        /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
        pub fn set_destination(
            mut self,
            input: std::option::Option<crate::model::DataDestination>,
        ) -> Self {
            self.inner = self.inner.set_destination(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Optional metadata to help you categorize and organize your backtests. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>Optional metadata to help you categorize and organize your backtests. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
        /// <p>The following restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
        /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
        /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
        /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.format(input.into());
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
        pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_format(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateWhatIfAnalysis`.
    ///
    /// <p>What-if analysis is a scenario modeling technique where you make a hypothetical change to a time series and compare the forecasts generated by these changes against the baseline, unchanged time series. It is important to remember that the purpose of a what-if analysis is to understand how a forecast can change given different modifications to the baseline time series.</p>
    /// <p>For example, imagine you are a clothing retailer who is considering an end of season sale to clear space for new styles. After creating a baseline forecast, you can use a what-if analysis to investigate how different sales tactics might affect your goals. You could create a scenario where everything is given a 25% markdown and another where everything is given a fixed dollar markdown. You can create a scenario where the sale lasts for 1 week and another where the sale lasts for 1 month. Your what-if analysis enables you to compare many different scenarios against each other.</p>
    /// <p>Note that a what-if analysis is meant to display what the forecasting model has learned and how it will behave in the scenarios that you are evaluating. Do not blindly use the results of the what-if analysis to make business decisions. For instance, forecasts might not be accurate for novel scenarios where there is no reference available to determine whether a forecast is good.</p>
    /// <p>The <code>TimeSeriesSelector</code> object defines the items that you want in the what-if analysis.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateWhatIfAnalysis {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_what_if_analysis_input::Builder,
    }
    impl CreateWhatIfAnalysis {
        /// Creates a new `CreateWhatIfAnalysis`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateWhatIfAnalysis,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfAnalysisError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWhatIfAnalysisOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfAnalysisError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the what-if analysis. Each name must be unique.</p>
        pub fn what_if_analysis_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_analysis_name(input.into());
            self
        }
        /// <p>The name of the what-if analysis. Each name must be unique.</p>
        pub fn set_what_if_analysis_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_analysis_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the baseline forecast.</p>
        pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the baseline forecast.</p>
        pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_forecast_arn(input);
            self
        }
        /// <p>Defines the set of time series that are used in the what-if analysis with a <code>TimeSeriesIdentifiers</code> object. What-if analyses are performed only for the time series in this object.</p>
        /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
        /// <ul>
        /// <li> <p> <code>DataSource</code> </p> </li>
        /// <li> <p> <code>Format</code> </p> </li>
        /// <li> <p> <code>Schema</code> </p> </li>
        /// </ul>
        pub fn time_series_selector(mut self, input: crate::model::TimeSeriesSelector) -> Self {
            self.inner = self.inner.time_series_selector(input);
            self
        }
        /// <p>Defines the set of time series that are used in the what-if analysis with a <code>TimeSeriesIdentifiers</code> object. What-if analyses are performed only for the time series in this object.</p>
        /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
        /// <ul>
        /// <li> <p> <code>DataSource</code> </p> </li>
        /// <li> <p> <code>Format</code> </p> </li>
        /// <li> <p> <code>Schema</code> </p> </li>
        /// </ul>
        pub fn set_time_series_selector(
            mut self,
            input: std::option::Option<crate::model::TimeSeriesSelector>,
        ) -> Self {
            self.inner = self.inner.set_time_series_selector(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateWhatIfForecast`.
    ///
    /// <p>A what-if forecast is a forecast that is created from a modified version of the baseline forecast. Each what-if forecast incorporates either a replacement dataset or a set of transformations to the original dataset. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateWhatIfForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_what_if_forecast_input::Builder,
    }
    impl CreateWhatIfForecast {
        /// Creates a new `CreateWhatIfForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateWhatIfForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWhatIfForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the what-if forecast. Names must be unique within each what-if analysis.</p>
        pub fn what_if_forecast_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_forecast_name(input.into());
            self
        }
        /// <p>The name of the what-if forecast. Names must be unique within each what-if analysis.</p>
        pub fn set_what_if_forecast_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
        pub fn what_if_analysis_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_analysis_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
        pub fn set_what_if_analysis_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_analysis_arn(input);
            self
        }
        /// Appends an item to `TimeSeriesTransformations`.
        ///
        /// To override the contents of this collection use [`set_time_series_transformations`](Self::set_time_series_transformations).
        ///
        /// <p>The transformations that are applied to the baseline time series. Each transformation contains an action and a set of conditions. An action is applied only when all conditions are met. If no conditions are provided, the action is applied to all items.</p>
        pub fn time_series_transformations(
            mut self,
            input: crate::model::TimeSeriesTransformation,
        ) -> Self {
            self.inner = self.inner.time_series_transformations(input);
            self
        }
        /// <p>The transformations that are applied to the baseline time series. Each transformation contains an action and a set of conditions. An action is applied only when all conditions are met. If no conditions are provided, the action is applied to all items.</p>
        pub fn set_time_series_transformations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TimeSeriesTransformation>>,
        ) -> Self {
            self.inner = self.inner.set_time_series_transformations(input);
            self
        }
        /// <p>The replacement time series dataset, which contains the rows that you want to change in the related time series dataset. A replacement time series does not need to contain all rows that are in the baseline related time series. Include only the rows (measure-dimension combinations) that you want to include in the what-if forecast. This dataset is merged with the original time series to create a transformed dataset that is used for the what-if analysis.</p>
        /// <p>This dataset should contain the items to modify (such as item_id or workforce_type), any relevant dimensions, the timestamp column, and at least one of the related time series columns. This file should not contain duplicate timestamps for the same time series.</p>
        /// <p>Timestamps and item_ids not included in this dataset are not included in the what-if analysis. </p>
        pub fn time_series_replacements_data_source(
            mut self,
            input: crate::model::TimeSeriesReplacementsDataSource,
        ) -> Self {
            self.inner = self.inner.time_series_replacements_data_source(input);
            self
        }
        /// <p>The replacement time series dataset, which contains the rows that you want to change in the related time series dataset. A replacement time series does not need to contain all rows that are in the baseline related time series. Include only the rows (measure-dimension combinations) that you want to include in the what-if forecast. This dataset is merged with the original time series to create a transformed dataset that is used for the what-if analysis.</p>
        /// <p>This dataset should contain the items to modify (such as item_id or workforce_type), any relevant dimensions, the timestamp column, and at least one of the related time series columns. This file should not contain duplicate timestamps for the same time series.</p>
        /// <p>Timestamps and item_ids not included in this dataset are not included in the what-if analysis. </p>
        pub fn set_time_series_replacements_data_source(
            mut self,
            input: std::option::Option<crate::model::TimeSeriesReplacementsDataSource>,
        ) -> Self {
            self.inner = self.inner.set_time_series_replacements_data_source(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateWhatIfForecastExport`.
    ///
    /// <p>Exports a forecast created by the <code>CreateWhatIfForecast</code> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p>
    /// <p> <code>≈
    /// <forecastexportjobname>
    /// _
    /// <exporttimestamp>
    /// _
    /// <partnumber></partnumber>
    /// </exporttimestamp>
    /// </forecastexportjobname></code> </p>
    /// <p>The <exporttimestamp>
    /// component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).
    /// </exporttimestamp></p>
    /// <p>You must specify a <code>DataDestination</code> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p>
    /// <p>For more information, see <code>howitworks-forecast</code>.</p>
    /// <p>To get a list of all your what-if forecast export jobs, use the <code>ListWhatIfForecastExports</code> operation.</p> <note>
    /// <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <code>DescribeWhatIfForecastExport</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateWhatIfForecastExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_what_if_forecast_export_input::Builder,
    }
    impl CreateWhatIfForecastExport {
        /// Creates a new `CreateWhatIfForecastExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateWhatIfForecastExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWhatIfForecastExportOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the what-if forecast to export.</p>
        pub fn what_if_forecast_export_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.what_if_forecast_export_name(input.into());
            self
        }
        /// <p>The name of the what-if forecast to export.</p>
        pub fn set_what_if_forecast_export_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_export_name(input);
            self
        }
        /// Appends an item to `WhatIfForecastArns`.
        ///
        /// To override the contents of this collection use [`set_what_if_forecast_arns`](Self::set_what_if_forecast_arns).
        ///
        /// <p>The list of what-if forecast Amazon Resource Names (ARNs) to export.</p>
        pub fn what_if_forecast_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_forecast_arns(input.into());
            self
        }
        /// <p>The list of what-if forecast Amazon Resource Names (ARNs) to export.</p>
        pub fn set_what_if_forecast_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_arns(input);
            self
        }
        /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
        pub fn destination(mut self, input: crate::model::DataDestination) -> Self {
            self.inner = self.inner.destination(input);
            self
        }
        /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
        /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
        pub fn set_destination(
            mut self,
            input: std::option::Option<crate::model::DataDestination>,
        ) -> Self {
            self.inner = self.inner.set_destination(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET.</p>
        pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.format(input.into());
            self
        }
        /// <p>The format of the exported data, CSV or PARQUET.</p>
        pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_format(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteDataset`.
    ///
    /// <p>Deletes an Amazon Forecast dataset that was created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation. You can only delete datasets that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html">DescribeDataset</a> operation.</p> <note>
    /// <p>Forecast does not automatically update any dataset groups that contain the deleted dataset. In order to update the dataset group, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html">UpdateDatasetGroup</a> operation, omitting the deleted dataset's ARN.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteDataset {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_dataset_input::Builder,
    }
    impl DeleteDataset {
        /// Creates a new `DeleteDataset`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteDataset,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDatasetOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset to delete.</p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset to delete.</p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_dataset_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteDatasetGroup`.
    ///
    /// <p>Deletes a dataset group created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation. You can only delete dataset groups that have a status of <code>ACTIVE</code>, <code>CREATE_FAILED</code>, or <code>UPDATE_FAILED</code>. To get the status, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html">DescribeDatasetGroup</a> operation.</p>
    /// <p>This operation deletes only the dataset group, not the datasets in the group.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteDatasetGroup {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_dataset_group_input::Builder,
    }
    impl DeleteDatasetGroup {
        /// Creates a new `DeleteDatasetGroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteDatasetGroup,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetGroupError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDatasetGroupOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetGroupError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset group to delete.</p>
        pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_group_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset group to delete.</p>
        pub fn set_dataset_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_group_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteDatasetImportJob`.
    ///
    /// <p>Deletes a dataset import job created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html">CreateDatasetImportJob</a> operation. You can delete only dataset import jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetImportJob.html">DescribeDatasetImportJob</a> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteDatasetImportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_dataset_import_job_input::Builder,
    }
    impl DeleteDatasetImportJob {
        /// Creates a new `DeleteDatasetImportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteDatasetImportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetImportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDatasetImportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteDatasetImportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset import job to delete.</p>
        pub fn dataset_import_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_import_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset import job to delete.</p>
        pub fn set_dataset_import_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_import_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteExplainability`.
    ///
    /// <p>Deletes an Explainability resource.</p>
    /// <p>You can delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeExplainability</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteExplainability {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_explainability_input::Builder,
    }
    impl DeleteExplainability {
        /// Creates a new `DeleteExplainability`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteExplainability,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteExplainabilityOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability resource to delete.</p>
        pub fn explainability_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability resource to delete.</p>
        pub fn set_explainability_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteExplainabilityExport`.
    ///
    /// <p>Deletes an Explainability export.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteExplainabilityExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_explainability_export_input::Builder,
    }
    impl DeleteExplainabilityExport {
        /// Creates a new `DeleteExplainabilityExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteExplainabilityExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteExplainabilityExportOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability export to delete. </p>
        pub fn explainability_export_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_export_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability export to delete. </p>
        pub fn set_explainability_export_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_export_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteForecast`.
    ///
    /// <p>Deletes a forecast created using the <code>CreateForecast</code> operation. You can delete only forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeForecast</code> operation.</p>
    /// <p>You can't delete a forecast while it is being exported. After a forecast is deleted, you can no longer query the forecast.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_forecast_input::Builder,
    }
    impl DeleteForecast {
        /// Creates a new `DeleteForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast to delete.</p>
        pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast to delete.</p>
        pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_forecast_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteForecastExportJob`.
    ///
    /// <p>Deletes a forecast export job created using the <code>CreateForecastExportJob</code> operation. You can delete only export jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeForecastExportJob</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteForecastExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_forecast_export_job_input::Builder,
    }
    impl DeleteForecastExportJob {
        /// Creates a new `DeleteForecastExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteForecastExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteForecastExportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteForecastExportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteForecastExportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast export job to delete.</p>
        pub fn forecast_export_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_export_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast export job to delete.</p>
        pub fn set_forecast_export_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_forecast_export_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteMonitor`.
    ///
    /// <p>Deletes a monitor resource. You can only delete a monitor resource with a status of <code>ACTIVE</code>, <code>ACTIVE_STOPPED</code>, <code>CREATE_FAILED</code>, or <code>CREATE_STOPPED</code>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteMonitor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_monitor_input::Builder,
    }
    impl DeleteMonitor {
        /// Creates a new `DeleteMonitor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteMonitor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteMonitorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteMonitorOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteMonitorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to delete.</p>
        pub fn monitor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.monitor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to delete.</p>
        pub fn set_monitor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_monitor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeletePredictor`.
    ///
    /// <p>Deletes a predictor created using the <code>DescribePredictor</code> or <code>CreatePredictor</code> operations. You can delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribePredictor</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeletePredictor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_predictor_input::Builder,
    }
    impl DeletePredictor {
        /// Creates a new `DeletePredictor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeletePredictor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeletePredictorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePredictorOutput,
            aws_smithy_http::result::SdkError<crate::error::DeletePredictorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to delete.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to delete.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeletePredictorBacktestExportJob`.
    ///
    /// <p>Deletes a predictor backtest export job.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeletePredictorBacktestExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_predictor_backtest_export_job_input::Builder,
    }
    impl DeletePredictorBacktestExportJob {
        /// Creates a new `DeletePredictorBacktestExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeletePredictorBacktestExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeletePredictorBacktestExportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePredictorBacktestExportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeletePredictorBacktestExportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job to delete.</p>
        pub fn predictor_backtest_export_job_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.predictor_backtest_export_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job to delete.</p>
        pub fn set_predictor_backtest_export_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_backtest_export_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteResourceTree`.
    ///
    /// <p>Deletes an entire resource tree. This operation will delete the parent resource and its child resources.</p>
    /// <p>Child resources are resources that were created from another resource. For example, when a forecast is generated from a predictor, the forecast is the child resource and the predictor is the parent resource.</p>
    /// <p>Amazon Forecast resources possess the following parent-child resource hierarchies:</p>
    /// <ul>
    /// <li> <p> <b>Dataset</b>: dataset import jobs</p> </li>
    /// <li> <p> <b>Dataset Group</b>: predictors, predictor backtest export jobs, forecasts, forecast export jobs</p> </li>
    /// <li> <p> <b>Predictor</b>: predictor backtest export jobs, forecasts, forecast export jobs</p> </li>
    /// <li> <p> <b>Forecast</b>: forecast export jobs</p> </li>
    /// </ul> <note>
    /// <p> <code>DeleteResourceTree</code> will only delete Amazon Forecast resources, and will not delete datasets or exported files stored in Amazon S3. </p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteResourceTree {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_resource_tree_input::Builder,
    }
    impl DeleteResourceTree {
        /// Creates a new `DeleteResourceTree`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteResourceTree,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteResourceTreeError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteResourceTreeOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteResourceTreeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the parent resource to delete. All child resources of the parent resource will also be deleted.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the parent resource to delete. All child resources of the parent resource will also be deleted.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteWhatIfAnalysis`.
    ///
    /// <p>Deletes a what-if analysis created using the <code>CreateWhatIfAnalysis</code> operation. You can delete only what-if analyses that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeWhatIfAnalysis</code> operation. </p>
    /// <p>You can't delete a what-if analysis while any of its forecasts are being exported.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteWhatIfAnalysis {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_what_if_analysis_input::Builder,
    }
    impl DeleteWhatIfAnalysis {
        /// Creates a new `DeleteWhatIfAnalysis`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteWhatIfAnalysis,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfAnalysisError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWhatIfAnalysisOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfAnalysisError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis that you want to delete.</p>
        pub fn what_if_analysis_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_analysis_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis that you want to delete.</p>
        pub fn set_what_if_analysis_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_analysis_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteWhatIfForecast`.
    ///
    /// <p>Deletes a what-if forecast created using the <code>CreateWhatIfForecast</code> operation. You can delete only what-if forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeWhatIfForecast</code> operation. </p>
    /// <p>You can't delete a what-if forecast while it is being exported. After a what-if forecast is deleted, you can no longer query the what-if analysis.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteWhatIfForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_what_if_forecast_input::Builder,
    }
    impl DeleteWhatIfForecast {
        /// Creates a new `DeleteWhatIfForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteWhatIfForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWhatIfForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast that you want to delete.</p>
        pub fn what_if_forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast that you want to delete.</p>
        pub fn set_what_if_forecast_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteWhatIfForecastExport`.
    ///
    /// <p>Deletes a what-if forecast export created using the <code>CreateWhatIfForecastExport</code> operation. You can delete only what-if forecast exports that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <code>DescribeWhatIfForecastExport</code> operation. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteWhatIfForecastExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_what_if_forecast_export_input::Builder,
    }
    impl DeleteWhatIfForecastExport {
        /// Creates a new `DeleteWhatIfForecastExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteWhatIfForecastExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWhatIfForecastExportOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast export that you want to delete.</p>
        pub fn what_if_forecast_export_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.what_if_forecast_export_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast export that you want to delete.</p>
        pub fn set_what_if_forecast_export_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_export_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeAutoPredictor`.
    ///
    /// <p>Describes a predictor created using the CreateAutoPredictor operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeAutoPredictor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_auto_predictor_input::Builder,
    }
    impl DescribeAutoPredictor {
        /// Creates a new `DescribeAutoPredictor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeAutoPredictor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeAutoPredictorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAutoPredictorOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeAutoPredictorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeDataset`.
    ///
    /// <p>Describes an Amazon Forecast dataset created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation.</p>
    /// <p>In addition to listing the parameters specified in the <code>CreateDataset</code> request, this operation includes the following dataset properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeDataset {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_dataset_input::Builder,
    }
    impl DescribeDataset {
        /// Creates a new `DescribeDataset`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeDataset,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDatasetOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_dataset_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeDatasetGroup`.
    ///
    /// <p>Describes a dataset group created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation.</p>
    /// <p>In addition to listing the parameters provided in the <code>CreateDatasetGroup</code> request, this operation includes the following properties:</p>
    /// <ul>
    /// <li> <p> <code>DatasetArns</code> - The datasets belonging to the group.</p> </li>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeDatasetGroup {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_dataset_group_input::Builder,
    }
    impl DescribeDatasetGroup {
        /// Creates a new `DescribeDatasetGroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeDatasetGroup,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetGroupError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDatasetGroupOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetGroupError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
        pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_group_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
        pub fn set_dataset_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_group_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeDatasetImportJob`.
    ///
    /// <p>Describes a dataset import job created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html">CreateDatasetImportJob</a> operation.</p>
    /// <p>In addition to listing the parameters provided in the <code>CreateDatasetImportJob</code> request, this operation includes the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>DataSize</code> </p> </li>
    /// <li> <p> <code>FieldStatistics</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeDatasetImportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_dataset_import_job_input::Builder,
    }
    impl DescribeDatasetImportJob {
        /// Creates a new `DescribeDatasetImportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeDatasetImportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetImportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDatasetImportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeDatasetImportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset import job.</p>
        pub fn dataset_import_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_import_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset import job.</p>
        pub fn set_dataset_import_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_import_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeExplainability`.
    ///
    /// <p>Describes an Explainability resource created using the <code>CreateExplainability</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeExplainability {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_explainability_input::Builder,
    }
    impl DescribeExplainability {
        /// Creates a new `DescribeExplainability`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeExplainability,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeExplainabilityOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Explaianability to describe.</p>
        pub fn explainability_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explaianability to describe.</p>
        pub fn set_explainability_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeExplainabilityExport`.
    ///
    /// <p>Describes an Explainability export created using the <code>CreateExplainabilityExport</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeExplainabilityExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_explainability_export_input::Builder,
    }
    impl DescribeExplainabilityExport {
        /// Creates a new `DescribeExplainabilityExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeExplainabilityExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeExplainabilityExportOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability export.</p>
        pub fn explainability_export_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.explainability_export_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Explainability export.</p>
        pub fn set_explainability_export_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_explainability_export_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeForecast`.
    ///
    /// <p>Describes a forecast created using the <code>CreateForecast</code> operation.</p>
    /// <p>In addition to listing the properties provided in the <code>CreateForecast</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>DatasetGroupArn</code> - The dataset group that provided the training data.</p> </li>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_forecast_input::Builder,
    }
    impl DescribeForecast {
        /// Creates a new `DescribeForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast.</p>
        pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast.</p>
        pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_forecast_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeForecastExportJob`.
    ///
    /// <p>Describes a forecast export job created using the <code>CreateForecastExportJob</code> operation.</p>
    /// <p>In addition to listing the properties provided by the user in the <code>CreateForecastExportJob</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeForecastExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_forecast_export_job_input::Builder,
    }
    impl DescribeForecastExportJob {
        /// Creates a new `DescribeForecastExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeForecastExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeForecastExportJobError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeForecastExportJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeForecastExportJobError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast export job.</p>
        pub fn forecast_export_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.forecast_export_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the forecast export job.</p>
        pub fn set_forecast_export_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_forecast_export_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeMonitor`.
    ///
    /// <p>Describes a monitor resource. In addition to listing the properties provided in the <code>CreateMonitor</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>Baseline</code> </p> </li>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastEvaluationTime</code> </p> </li>
    /// <li> <p> <code>LastEvaluationState</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Message</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeMonitor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_monitor_input::Builder,
    }
    impl DescribeMonitor {
        /// Creates a new `DescribeMonitor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeMonitor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeMonitorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeMonitorOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeMonitorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to describe.</p>
        pub fn monitor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.monitor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to describe.</p>
        pub fn set_monitor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_monitor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribePredictor`.
    ///
    /// <note>
    /// <p> This operation is only valid for legacy predictors created with CreatePredictor. If you are not using a legacy predictor, use <code>DescribeAutoPredictor</code>.</p>
    /// </note>
    /// <p>Describes a predictor created using the <code>CreatePredictor</code> operation.</p>
    /// <p>In addition to listing the properties provided in the <code>CreatePredictor</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>DatasetImportJobArns</code> - The dataset import jobs used to import training data.</p> </li>
    /// <li> <p> <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were evaluated.</p> </li>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribePredictor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_predictor_input::Builder,
    }
    impl DescribePredictor {
        /// Creates a new `DescribePredictor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribePredictor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribePredictorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePredictorOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribePredictorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribePredictorBacktestExportJob`.
    ///
    /// <p>Describes a predictor backtest export job created using the <code>CreatePredictorBacktestExportJob</code> operation.</p>
    /// <p>In addition to listing the properties provided by the user in the <code>CreatePredictorBacktestExportJob</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Message</code> (if an error occurred)</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribePredictorBacktestExportJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_predictor_backtest_export_job_input::Builder,
    }
    impl DescribePredictorBacktestExportJob {
        /// Creates a new `DescribePredictorBacktestExportJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribePredictorBacktestExportJob,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<
                crate::error::DescribePredictorBacktestExportJobError,
            >,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePredictorBacktestExportJobOutput,
            aws_smithy_http::result::SdkError<
                crate::error::DescribePredictorBacktestExportJobError,
            >,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
        pub fn predictor_backtest_export_job_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.predictor_backtest_export_job_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
        pub fn set_predictor_backtest_export_job_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_backtest_export_job_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeWhatIfAnalysis`.
    ///
    /// <p>Describes the what-if analysis created using the <code>CreateWhatIfAnalysis</code> operation.</p>
    /// <p>In addition to listing the properties provided in the <code>CreateWhatIfAnalysis</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeWhatIfAnalysis {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_what_if_analysis_input::Builder,
    }
    impl DescribeWhatIfAnalysis {
        /// Creates a new `DescribeWhatIfAnalysis`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeWhatIfAnalysis,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfAnalysisError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWhatIfAnalysisOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfAnalysisError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis that you are interested in.</p>
        pub fn what_if_analysis_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_analysis_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if analysis that you are interested in.</p>
        pub fn set_what_if_analysis_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_analysis_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeWhatIfForecast`.
    ///
    /// <p>Describes the what-if forecast created using the <code>CreateWhatIfForecast</code> operation.</p>
    /// <p>In addition to listing the properties provided in the <code>CreateWhatIfForecast</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeWhatIfForecast {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_what_if_forecast_input::Builder,
    }
    impl DescribeWhatIfForecast {
        /// Creates a new `DescribeWhatIfForecast`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeWhatIfForecast,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWhatIfForecastOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast that you are interested in.</p>
        pub fn what_if_forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.what_if_forecast_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast that you are interested in.</p>
        pub fn set_what_if_forecast_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeWhatIfForecastExport`.
    ///
    /// <p>Describes the what-if forecast export created using the <code>CreateWhatIfForecastExport</code> operation.</p>
    /// <p>In addition to listing the properties provided in the <code>CreateWhatIfForecastExport</code> request, this operation lists the following properties:</p>
    /// <ul>
    /// <li> <p> <code>CreationTime</code> </p> </li>
    /// <li> <p> <code>LastModificationTime</code> </p> </li>
    /// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeWhatIfForecastExport {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_what_if_forecast_export_input::Builder,
    }
    impl DescribeWhatIfForecastExport {
        /// Creates a new `DescribeWhatIfForecastExport`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DescribeWhatIfForecastExport,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastExportError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWhatIfForecastExportOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastExportError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast export that you are interested in.</p>
        pub fn what_if_forecast_export_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.what_if_forecast_export_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the what-if forecast export that you are interested in.</p>
        pub fn set_what_if_forecast_export_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_what_if_forecast_export_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetAccuracyMetrics`.
    ///
    /// <p>Provides metrics on the accuracy of the models that were trained by the <code>CreatePredictor</code> operation. Use metrics to see how well the model performed and to decide whether to use the predictor to generate a forecast. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/metrics.html">Predictor Metrics</a>.</p>
    /// <p>This operation generates metrics for each backtest window that was evaluated. The number of backtest windows (<code>NumberOfBacktestWindows</code>) is specified using the <code>EvaluationParameters</code> object, which is optionally included in the <code>CreatePredictor</code> request. If <code>NumberOfBacktestWindows</code> isn't specified, the number defaults to one.</p>
    /// <p>The parameters of the <code>filling</code> method determine which items contribute to the metrics. If you want all items to contribute, specify <code>zero</code>. If you want only those items that have complete data in the range being evaluated to contribute, specify <code>nan</code>. For more information, see <code>FeaturizationMethod</code>.</p> <note>
    /// <p>Before you can get accuracy metrics, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <code>DescribePredictor</code> operation.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetAccuracyMetrics {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_accuracy_metrics_input::Builder,
    }
    impl GetAccuracyMetrics {
        /// Creates a new `GetAccuracyMetrics`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetAccuracyMetrics,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetAccuracyMetricsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAccuracyMetricsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetAccuracyMetricsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to get metrics for.</p>
        pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.predictor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the predictor to get metrics for.</p>
        pub fn set_predictor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_predictor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListDatasetGroups`.
    ///
    /// <p>Returns a list of dataset groups created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html">CreateDatasetGroup</a> operation. For each dataset group, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the dataset group ARN with the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html">DescribeDatasetGroup</a> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListDatasetGroups {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_dataset_groups_input::Builder,
    }
    impl ListDatasetGroups {
        /// Creates a new `ListDatasetGroups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListDatasetGroups,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetGroupsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDatasetGroupsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetGroupsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListDatasetGroupsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListDatasetGroupsPaginator {
            crate::paginator::ListDatasetGroupsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListDatasetImportJobs`.
    ///
    /// <p>Returns a list of dataset import jobs created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html">CreateDatasetImportJob</a> operation. For each import job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the ARN with the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetImportJob.html">DescribeDatasetImportJob</a> operation. You can filter the list by providing an array of <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_Filter.html">Filter</a> objects.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListDatasetImportJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_dataset_import_jobs_input::Builder,
    }
    impl ListDatasetImportJobs {
        /// Creates a new `ListDatasetImportJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListDatasetImportJobs,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetImportJobsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDatasetImportJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetImportJobsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListDatasetImportJobsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListDatasetImportJobsPaginator {
            crate::paginator::ListDatasetImportJobsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the datasets that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the datasets that match the statement, specify <code>IS</code>. To exclude matching datasets, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all dataset import jobs whose status is ACTIVE, you specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the datasets that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the datasets that match the statement, specify <code>IS</code>. To exclude matching datasets, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all dataset import jobs whose status is ACTIVE, you specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListDatasets`.
    ///
    /// <p>Returns a list of datasets created using the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html">CreateDataset</a> operation. For each dataset, a summary of its properties, including its Amazon Resource Name (ARN), is returned. To retrieve the complete set of properties, use the ARN with the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html">DescribeDataset</a> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListDatasets {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_datasets_input::Builder,
    }
    impl ListDatasets {
        /// Creates a new `ListDatasets`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListDatasets,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDatasetsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListDatasetsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListDatasetsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListDatasetsPaginator {
            crate::paginator::ListDatasetsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListExplainabilities`.
    ///
    /// <p>Returns a list of Explainability resources created using the <code>CreateExplainability</code> operation. This operation returns a summary for each Explainability. You can filter the list using an array of <code>Filter</code> objects.</p>
    /// <p>To retrieve the complete set of properties for a particular Explainability resource, use the ARN with the <code>DescribeExplainability</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListExplainabilities {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_explainabilities_input::Builder,
    }
    impl ListExplainabilities {
        /// Creates a new `ListExplainabilities`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListExplainabilities,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListExplainabilitiesError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListExplainabilitiesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListExplainabilitiesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListExplainabilitiesPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListExplainabilitiesPaginator {
            crate::paginator::ListExplainabilitiesPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items returned in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items returned in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListExplainabilityExports`.
    ///
    /// <p>Returns a list of Explainability exports created using the <code>CreateExplainabilityExport</code> operation. This operation returns a summary for each Explainability export. You can filter the list using an array of <code>Filter</code> objects.</p>
    /// <p>To retrieve the complete set of properties for a particular Explainability export, use the ARN with the <code>DescribeExplainability</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListExplainabilityExports {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_explainability_exports_input::Builder,
    }
    impl ListExplainabilityExports {
        /// Creates a new `ListExplainabilityExports`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListExplainabilityExports,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListExplainabilityExportsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListExplainabilityExportsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListExplainabilityExportsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListExplainabilityExportsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListExplainabilityExportsPaginator {
            crate::paginator::ListExplainabilityExportsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ResourceArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListForecastExportJobs`.
    ///
    /// <p>Returns a list of forecast export jobs created using the <code>CreateForecastExportJob</code> operation. For each forecast export job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, use the ARN with the <code>DescribeForecastExportJob</code> operation. You can filter the list using an array of <code>Filter</code> objects.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListForecastExportJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_forecast_export_jobs_input::Builder,
    }
    impl ListForecastExportJobs {
        /// Creates a new `ListForecastExportJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListForecastExportJobs,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListForecastExportJobsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListForecastExportJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListForecastExportJobsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListForecastExportJobsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListForecastExportJobsPaginator {
            crate::paginator::ListForecastExportJobsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ForecastArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityforecast</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "ForecastArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityforecast" } ]
        /// </acct-id></code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>ForecastArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityforecast</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "ForecastArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityforecast" } ]
        /// </acct-id></code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListForecasts`.
    ///
    /// <p>Returns a list of forecasts created using the <code>CreateForecast</code> operation. For each forecast, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, specify the ARN with the <code>DescribeForecast</code> operation. You can filter the list using an array of <code>Filter</code> objects.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListForecasts {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_forecasts_input::Builder,
    }
    impl ListForecasts {
        /// Creates a new `ListForecasts`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListForecasts,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListForecastsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListForecastsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListForecastsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListForecastsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListForecastsPaginator {
            crate::paginator::ListForecastsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecasts that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecasts that match the statement, specify <code>IS</code>. To exclude matching forecasts, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code>, <code>PredictorArn</code>, and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all forecasts whose status is not ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS_NOT", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecasts that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecasts that match the statement, specify <code>IS</code>. To exclude matching forecasts, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code>, <code>PredictorArn</code>, and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all forecasts whose status is not ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS_NOT", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListMonitorEvaluations`.
    ///
    /// <p>Returns a list of the monitoring evaluation results and predictor events collected by the monitor resource during different windows of time.</p>
    /// <p>For information about monitoring see <code>predictor-monitoring</code>. For more information about retrieving monitoring results see <a href="https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring-results.html">Viewing Monitoring Results</a>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListMonitorEvaluations {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_monitor_evaluations_input::Builder,
    }
    impl ListMonitorEvaluations {
        /// Creates a new `ListMonitorEvaluations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListMonitorEvaluations,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListMonitorEvaluationsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMonitorEvaluationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListMonitorEvaluationsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitorEvaluationsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListMonitorEvaluationsPaginator {
            crate::paginator::ListMonitorEvaluationsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of monitoring results to return.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of monitoring results to return.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to get results from.</p>
        pub fn monitor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.monitor_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to get results from.</p>
        pub fn set_monitor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_monitor_arn(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>EvaluationState</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match. Valid values are only <code>SUCCESS</code> or <code>FAILURE</code>.</p> </li>
        /// </ul>
        /// <p>For example, to list only successful monitor evaluations, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "EvaluationState", "Value": "SUCCESS" } ]</code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>EvaluationState</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match. Valid values are only <code>SUCCESS</code> or <code>FAILURE</code>.</p> </li>
        /// </ul>
        /// <p>For example, to list only successful monitor evaluations, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "EvaluationState", "Value": "SUCCESS" } ]</code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListMonitors`.
    ///
    /// <p>Returns a list of monitors created with the <code>CreateMonitor</code> operation and <code>CreateAutoPredictor</code> operation. For each monitor resource, this operation returns of a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve a complete set of properties of a monitor resource by specify the monitor's ARN in the <code>DescribeMonitor</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListMonitors {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_monitors_input::Builder,
    }
    impl ListMonitors {
        /// Creates a new `ListMonitors`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListMonitors,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListMonitorsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMonitorsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListMonitorsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListMonitorsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListMonitorsPaginator {
            crate::paginator::ListMonitorsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of monitors to include in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of monitors to include in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all monitors who's status is ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the resources that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. The only valid value is <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all monitors who's status is ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListPredictorBacktestExportJobs`.
    ///
    /// <p>Returns a list of predictor backtest export jobs created using the <code>CreatePredictorBacktestExportJob</code> operation. This operation returns a summary for each backtest export job. You can filter the list using an array of <code>Filter</code> objects.</p>
    /// <p>To retrieve the complete set of properties for a particular backtest export job, use the ARN with the <code>DescribePredictorBacktestExportJob</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListPredictorBacktestExportJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_predictor_backtest_export_jobs_input::Builder,
    }
    impl ListPredictorBacktestExportJobs {
        /// Creates a new `ListPredictorBacktestExportJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListPredictorBacktestExportJobs,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListPredictorBacktestExportJobsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPredictorBacktestExportJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListPredictorBacktestExportJobsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListPredictorBacktestExportJobsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListPredictorBacktestExportJobsPaginator {
            crate::paginator::ListPredictorBacktestExportJobsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictor backtest export jobs that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictor backtest export jobs that match the statement, specify <code>IS</code>. To exclude matching predictor backtest export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>PredictorArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictor backtest export jobs that match the statement from the list. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictor backtest export jobs that match the statement, specify <code>IS</code>. To exclude matching predictor backtest export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>PredictorArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListPredictors`.
    ///
    /// <p>Returns a list of predictors created using the <code>CreateAutoPredictor</code> or <code>CreatePredictor</code> operations. For each predictor, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). </p>
    /// <p>You can retrieve the complete set of properties by using the ARN with the <code>DescribeAutoPredictor</code> and <code>DescribePredictor</code> operations. You can filter the list using an array of <code>Filter</code> objects.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListPredictors {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_predictors_input::Builder,
    }
    impl ListPredictors {
        /// Creates a new `ListPredictors`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListPredictors,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListPredictorsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPredictorsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListPredictorsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListPredictorsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListPredictorsPaginator {
            crate::paginator::ListPredictorsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictors that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictors that match the statement, specify <code>IS</code>. To exclude matching predictors, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all predictors whose status is ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the predictors that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the predictors that match the statement, specify <code>IS</code>. To exclude matching predictors, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all predictors whose status is ACTIVE, you would specify:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Lists the tags for an Amazon Forecast resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListTagsForResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListWhatIfAnalyses`.
    ///
    /// <p>Returns a list of what-if analyses created using the <code>CreateWhatIfAnalysis</code> operation. For each what-if analysis, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if analysis ARN with the <code>DescribeWhatIfAnalysis</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListWhatIfAnalyses {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_what_if_analyses_input::Builder,
    }
    impl ListWhatIfAnalyses {
        /// Creates a new `ListWhatIfAnalyses`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListWhatIfAnalyses,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfAnalysesError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListWhatIfAnalysesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfAnalysesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListWhatIfAnalysesPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListWhatIfAnalysesPaginator {
            crate::paginator::ListWhatIfAnalysesPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if analysis jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the what-if analysis jobs that match the statement, specify <code>IS</code>. To exclude matching what-if analysis jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfAnalysisArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWhatIf</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfAnalysisArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWhatIf" } ]
        /// </acct-id></code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if analysis jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the what-if analysis jobs that match the statement, specify <code>IS</code>. To exclude matching what-if analysis jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfAnalysisArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWhatIf</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfAnalysisArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWhatIf" } ]
        /// </acct-id></code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListWhatIfForecastExports`.
    ///
    /// <p>Returns a list of what-if forecast exports created using the <code>CreateWhatIfForecastExport</code> operation. For each what-if forecast export, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if forecast export ARN with the <code>DescribeWhatIfForecastExport</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListWhatIfForecastExports {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_what_if_forecast_exports_input::Builder,
    }
    impl ListWhatIfForecastExports {
        /// Creates a new `ListWhatIfForecastExports`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListWhatIfForecastExports,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastExportsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListWhatIfForecastExportsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastExportsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListWhatIfForecastExportsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListWhatIfForecastExportsPaginator {
            crate::paginator::ListWhatIfForecastExportsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastExportArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWIFExport</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastExportArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWIFExport" } ]
        /// </acct-id></code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastExportArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWIFExport</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastExportArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWIFExport" } ]
        /// </acct-id></code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListWhatIfForecasts`.
    ///
    /// <p>Returns a list of what-if forecasts created using the <code>CreateWhatIfForecast</code> operation. For each what-if forecast, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if forecast ARN with the <code>DescribeWhatIfForecast</code> operation.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListWhatIfForecasts {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_what_if_forecasts_input::Builder,
    }
    impl ListWhatIfForecasts {
        /// Creates a new `ListWhatIfForecasts`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListWhatIfForecasts,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListWhatIfForecastsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListWhatIfForecastsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListWhatIfForecastsPaginator {
            crate::paginator::ListWhatIfForecastsPaginator::new(self.handle, self.inner)
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next  request. Tokens expire after 24 hours.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The number of items to return in the response.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWhatIfForecast</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWhatIfForecast" } ]
        /// </acct-id></code> </p>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the what-if forecast export jobs that match the statement from the list, respectively. The match statement consists of a key and a value.</p>
        /// <p> <b>Filter properties</b> </p>
        /// <ul>
        /// <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecast export jobs that match the statement, specify <code>IS</code>. To exclude matching forecast export jobs, specify <code>IS_NOT</code>.</p> </li>
        /// <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>WhatIfForecastArn</code> and <code>Status</code>.</p> </li>
        /// <li> <p> <code>Value</code> - The value to match.</p> </li>
        /// </ul>
        /// <p>For example, to list all jobs that export a forecast named <i>electricityWhatIfForecast</i>, specify the following filter:</p>
        /// <p> <code>"Filters": [ { "Condition": "IS", "Key": "WhatIfForecastArn", "Value": "arn:aws:forecast:us-west-2:
        /// <acct-id>
        /// :forecast/electricityWhatIfForecast" } ]
        /// </acct-id></code> </p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ResumeResource`.
    ///
    /// <p>Resumes a stopped monitor resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ResumeResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::resume_resource_input::Builder,
    }
    impl ResumeResource {
        /// Creates a new `ResumeResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ResumeResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ResumeResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ResumeResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ResumeResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to resume.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the monitor resource to resume.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StopResource`.
    ///
    /// <p>Stops a resource.</p>
    /// <p>The resource undergoes the following states: <code>CREATE_STOPPING</code> and <code>CREATE_STOPPED</code>. You cannot resume a resource once it has been stopped.</p>
    /// <p>This operation can be applied to the following resources (and their corresponding child resources):</p>
    /// <ul>
    /// <li> <p>Dataset Import Job</p> </li>
    /// <li> <p>Predictor Job</p> </li>
    /// <li> <p>Forecast Job</p> </li>
    /// <li> <p>Forecast Export Job</p> </li>
    /// <li> <p>Predictor Backtest Export Job</p> </li>
    /// <li> <p>Explainability Job</p> </li>
    /// <li> <p>Explainability Export Job</p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct StopResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::stop_resource_input::Builder,
    }
    impl StopResource {
        /// Creates a new `StopResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::StopResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::StopResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::StopResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource to stop. The supported ARNs are <code>DatasetImportJobArn</code>, <code>PredictorArn</code>, <code>PredictorBacktestExportJobArn</code>, <code>ForecastArn</code>, <code>ForecastExportJobArn</code>, <code>ExplainabilityArn</code>, and <code>ExplainabilityExportArn</code>. </p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource to stop. The supported ARNs are <code>DatasetImportJobArn</code>, <code>PredictorArn</code>, <code>PredictorBacktestExportJobArn</code>, <code>ForecastArn</code>, <code>ForecastExportJobArn</code>, <code>ExplainabilityArn</code>, and <code>ExplainabilityExportArn</code>. </p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::TagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
        /// <p>The following basic restrictions apply to tags:</p>
        /// <ul>
        /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
        /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
        /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
        /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
        /// <li> <p>Tag keys and values are case sensitive.</p> </li>
        /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Deletes the specified tags from a resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UntagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. </p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>The keys of the tags to be removed.</p>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>The keys of the tags to be removed.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateDatasetGroup`.
    ///
    /// <p>Replaces the datasets in a dataset group with the specified datasets.</p> <note>
    /// <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor. Use the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html">DescribeDatasetGroup</a> operation to get the status.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateDatasetGroup {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_dataset_group_input::Builder,
    }
    impl UpdateDatasetGroup {
        /// Creates a new `UpdateDatasetGroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateDatasetGroup,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateDatasetGroupError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateDatasetGroupOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateDatasetGroupError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the dataset group.</p>
        pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_group_arn(input.into());
            self
        }
        /// <p>The ARN of the dataset group.</p>
        pub fn set_dataset_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_dataset_group_arn(input);
            self
        }
        /// Appends an item to `DatasetArns`.
        ///
        /// To override the contents of this collection use [`set_dataset_arns`](Self::set_dataset_arns).
        ///
        /// <p>An array of the Amazon Resource Names (ARNs) of the datasets to add to the dataset group.</p>
        pub fn dataset_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.dataset_arns(input.into());
            self
        }
        /// <p>An array of the Amazon Resource Names (ARNs) of the datasets to add to the dataset group.</p>
        pub fn set_dataset_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_dataset_arns(input);
            self
        }
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
