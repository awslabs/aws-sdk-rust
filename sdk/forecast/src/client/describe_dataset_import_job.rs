// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeDatasetImportJob`](crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_import_job_arn(impl Into<String>)`](crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobFluentBuilder::dataset_import_job_arn) / [`set_dataset_import_job_arn(Option<String>)`](crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobFluentBuilder::set_dataset_import_job_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the dataset import job.</p><br>
    /// - On success, responds with [`DescribeDatasetImportJobOutput`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput) with field(s):
    ///   - [`dataset_import_job_name(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::dataset_import_job_name): <p>The name of the dataset import job.</p>
    ///   - [`dataset_import_job_arn(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::dataset_import_job_arn): <p>The ARN of the dataset import job.</p>
    ///   - [`dataset_arn(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::dataset_arn): <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    ///   - [`timestamp_format(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::timestamp_format): <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>  <ul>   <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>   <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>  </ul>
    ///   - [`time_zone(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::time_zone): <p>The single time zone applied to every item in the dataset</p>
    ///   - [`use_geolocation_for_time_zone(bool)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::use_geolocation_for_time_zone): <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    ///   - [`geolocation_format(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::geolocation_format): <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    ///   - [`data_source(Option<DataSource>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::data_source): <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>  <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    ///   - [`field_statistics(Option<HashMap::<String, Statistics>>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::field_statistics): <p>Statistical information about each field in the input data.</p>
    ///   - [`data_size(Option<f64>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::data_size): <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    ///   - [`status(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::status): <p>The status of the dataset import job. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>  </ul>
    ///   - [`message(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::creation_time): <p>When the dataset import job was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`format(Option<String>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::format): <p>The format of the imported data, CSV or PARQUET.</p>
    ///   - [`import_mode(Option<ImportMode>)`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput::import_mode): <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    /// - On failure, responds with [`SdkError<DescribeDatasetImportJobError>`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError)
    pub fn describe_dataset_import_job(&self) -> crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobFluentBuilder {
        crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobFluentBuilder::new(self.handle.clone())
    }
}
