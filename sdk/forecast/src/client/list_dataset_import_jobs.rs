// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDatasetImportJobs`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the datasets that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the datasets that match the statement, specify <code>IS</code>. To exclude matching datasets, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetArn</code> and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all dataset import jobs whose status is ACTIVE, you specify the following filter:</p>  <p> <code>"Filters": [ { "Condition": "IS", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListDatasetImportJobsOutput`](crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput) with field(s):
    ///   - [`dataset_import_jobs(Option<Vec<DatasetImportJobSummary>>)`](crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput::dataset_import_jobs): <p>An array of objects that summarize each dataset import job's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListDatasetImportJobsError>`](crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError)
    pub fn list_dataset_import_jobs(
        &self,
    ) -> crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder
    {
        crate::operation::list_dataset_import_jobs::builders::ListDatasetImportJobsFluentBuilder::new(self.handle.clone())
    }
}
