// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListForecasts`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::set_next_token): <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    ///   - [`max_results(i32)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::set_max_results): <p>The number of items to return in the response.</p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::set_filters): <p>An array of filters. For each filter, you provide a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the forecasts that match the statement from the list, respectively. The match statement consists of a key and a value.</p>  <p> <b>Filter properties</b> </p>  <ul>   <li> <p> <code>Condition</code> - The condition to apply. Valid values are <code>IS</code> and <code>IS_NOT</code>. To include the forecasts that match the statement, specify <code>IS</code>. To exclude matching forecasts, specify <code>IS_NOT</code>.</p> </li>   <li> <p> <code>Key</code> - The name of the parameter to filter on. Valid values are <code>DatasetGroupArn</code>, <code>PredictorArn</code>, and <code>Status</code>.</p> </li>   <li> <p> <code>Value</code> - The value to match.</p> </li>  </ul>  <p>For example, to list all forecasts whose status is not ACTIVE, you would specify:</p>  <p> <code>"Filters": [ { "Condition": "IS_NOT", "Key": "Status", "Value": "ACTIVE" } ]</code> </p>
    /// - On success, responds with [`ListForecastsOutput`](crate::operation::list_forecasts::ListForecastsOutput) with field(s):
    ///   - [`forecasts(Option<Vec<ForecastSummary>>)`](crate::operation::list_forecasts::ListForecastsOutput::forecasts): <p>An array of objects that summarize each forecast's properties.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_forecasts::ListForecastsOutput::next_token): <p>If the response is truncated, Amazon Forecast returns this token. To retrieve the next set of results, use the token in the next request.</p>
    /// - On failure, responds with [`SdkError<ListForecastsError>`](crate::operation::list_forecasts::ListForecastsError)
    pub fn list_forecasts(
        &self,
    ) -> crate::operation::list_forecasts::builders::ListForecastsFluentBuilder {
        crate::operation::list_forecasts::builders::ListForecastsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
