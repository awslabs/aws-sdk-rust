// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribePredictor`](crate::client::fluent_builders::DescribePredictor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`predictor_arn(impl Into<String>)`](crate::client::fluent_builders::DescribePredictor::predictor_arn) / [`set_predictor_arn(Option<String>)`](crate::client::fluent_builders::DescribePredictor::set_predictor_arn): <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
    /// - On success, responds with [`DescribePredictorOutput`](crate::output::DescribePredictorOutput) with field(s):
    ///   - [`predictor_arn(Option<String>)`](crate::output::DescribePredictorOutput::predictor_arn): <p>The ARN of the predictor.</p>
    ///   - [`predictor_name(Option<String>)`](crate::output::DescribePredictorOutput::predictor_name): <p>The name of the predictor.</p>
    ///   - [`algorithm_arn(Option<String>)`](crate::output::DescribePredictorOutput::algorithm_arn): <p>The Amazon Resource Name (ARN) of the algorithm used for model training.</p>
    ///   - [`auto_ml_algorithm_arns(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::auto_ml_algorithm_arns): <p>When <code>PerformAutoML</code> is specified, the ARN of the chosen algorithm.</p>
    ///   - [`forecast_horizon(Option<i32>)`](crate::output::DescribePredictorOutput::forecast_horizon): <p>The number of time-steps of the forecast. The forecast horizon is also called the prediction length.</p>
    ///   - [`forecast_types(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::forecast_types): <p>The forecast types used during predictor training. Default value is <code>["0.1","0.5","0.9"]</code> </p>
    ///   - [`perform_auto_ml(Option<bool>)`](crate::output::DescribePredictorOutput::perform_auto_ml): <p>Whether the predictor is set to perform AutoML.</p>
    ///   - [`auto_ml_override_strategy(Option<AutoMlOverrideStrategy>)`](crate::output::DescribePredictorOutput::auto_ml_override_strategy): <note>   <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>  </note>  <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>  <p>This parameter is only valid for predictors trained using AutoML.</p>
    ///   - [`perform_hpo(Option<bool>)`](crate::output::DescribePredictorOutput::perform_hpo): <p>Whether the predictor is set to perform hyperparameter optimization (HPO).</p>
    ///   - [`training_parameters(Option<HashMap<String, String>>)`](crate::output::DescribePredictorOutput::training_parameters): <p>The default training parameters or overrides selected during model training. When running AutoML or choosing HPO with CNN-QR or DeepAR+, the optimized values for the chosen hyperparameters are returned. For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    ///   - [`evaluation_parameters(Option<EvaluationParameters>)`](crate::output::DescribePredictorOutput::evaluation_parameters): <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    ///   - [`hpo_config(Option<HyperParameterTuningJobConfig>)`](crate::output::DescribePredictorOutput::hpo_config): <p>The hyperparameter override values for the algorithm.</p>
    ///   - [`input_data_config(Option<InputDataConfig>)`](crate::output::DescribePredictorOutput::input_data_config): <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    ///   - [`featurization_config(Option<FeaturizationConfig>)`](crate::output::DescribePredictorOutput::featurization_config): <p>The featurization configuration.</p>
    ///   - [`encryption_config(Option<EncryptionConfig>)`](crate::output::DescribePredictorOutput::encryption_config): <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    ///   - [`predictor_execution_details(Option<PredictorExecutionDetails>)`](crate::output::DescribePredictorOutput::predictor_execution_details): <p>Details on the the status and results of the backtests performed to evaluate the accuracy of the predictor. You specify the number of backtests to perform when you call the operation.</p>
    ///   - [`estimated_time_remaining_in_minutes(Option<i64>)`](crate::output::DescribePredictorOutput::estimated_time_remaining_in_minutes): <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    ///   - [`is_auto_predictor(Option<bool>)`](crate::output::DescribePredictorOutput::is_auto_predictor): <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    ///   - [`dataset_import_job_arns(Option<Vec<String>>)`](crate::output::DescribePredictorOutput::dataset_import_job_arns): <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    ///   - [`status(Option<String>)`](crate::output::DescribePredictorOutput::status): <p>The status of the predictor. States include:</p>  <ul>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>   <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>   <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>  </ul> <note>   <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>  </note>
    ///   - [`message(Option<String>)`](crate::output::DescribePredictorOutput::message): <p>If an error occurred, an informational message about the error.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribePredictorOutput::creation_time): <p>When the model training task was created.</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::DescribePredictorOutput::last_modification_time): <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>  <ul>   <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>   <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>   <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>   <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>  </ul>
    ///   - [`optimization_metric(Option<OptimizationMetric>)`](crate::output::DescribePredictorOutput::optimization_metric): <p>The accuracy metric used to optimize the predictor.</p>
    /// - On failure, responds with [`SdkError<DescribePredictorError>`](crate::error::DescribePredictorError)
    pub fn describe_predictor(&self) -> crate::client::fluent_builders::DescribePredictor {
        crate::client::fluent_builders::DescribePredictor::new(self.handle.clone())
    }
}
