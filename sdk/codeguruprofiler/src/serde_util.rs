// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_frame_metric_data_output_correct_errors(
    mut builder: crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataOutputBuilder,
) -> crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.resolution.is_none() {
        builder.resolution = "no value was set".parse::<crate::types::AggregationPeriod>().ok()
    }
    if builder.end_times.is_none() {
        builder.end_times = Some(Default::default())
    }
    if builder.unprocessed_end_times.is_none() {
        builder.unprocessed_end_times = Some(Default::default())
    }
    if builder.frame_metric_data.is_none() {
        builder.frame_metric_data = Some(Default::default())
    }
    builder
}

pub(crate) fn configure_agent_output_correct_errors(
    mut builder: crate::operation::configure_agent::builders::ConfigureAgentOutputBuilder,
) -> crate::operation::configure_agent::builders::ConfigureAgentOutputBuilder {
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::AgentConfigurationBuilder::default();
            crate::serde_util::agent_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_profiling_group_output_correct_errors(
    mut builder: crate::operation::create_profiling_group::builders::CreateProfilingGroupOutputBuilder,
) -> crate::operation::create_profiling_group::builders::CreateProfilingGroupOutputBuilder {
    if builder.profiling_group.is_none() {
        builder.profiling_group = {
            let builder = crate::types::builders::ProfilingGroupDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_profiling_group_output_correct_errors(
    mut builder: crate::operation::describe_profiling_group::builders::DescribeProfilingGroupOutputBuilder,
) -> crate::operation::describe_profiling_group::builders::DescribeProfilingGroupOutputBuilder {
    if builder.profiling_group.is_none() {
        builder.profiling_group = {
            let builder = crate::types::builders::ProfilingGroupDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_findings_report_account_summary_output_correct_errors(
    mut builder: crate::operation::get_findings_report_account_summary::builders::GetFindingsReportAccountSummaryOutputBuilder,
) -> crate::operation::get_findings_report_account_summary::builders::GetFindingsReportAccountSummaryOutputBuilder {
    if builder.report_summaries.is_none() {
        builder.report_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn get_notification_configuration_output_correct_errors(
    mut builder: crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder,
) -> crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder {
    if builder.notification_configuration.is_none() {
        builder.notification_configuration = {
            let builder = crate::types::builders::NotificationConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_policy_output_correct_errors(
    mut builder: crate::operation::get_policy::builders::GetPolicyOutputBuilder,
) -> crate::operation::get_policy::builders::GetPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_profile_output_correct_errors(
    mut builder: crate::operation::get_profile::builders::GetProfileOutputBuilder,
) -> crate::operation::get_profile::builders::GetProfileOutputBuilder {
    if builder.profile.is_none() {
        builder.profile = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    builder
}

pub(crate) fn get_recommendations_output_correct_errors(
    mut builder: crate::operation::get_recommendations::builders::GetRecommendationsOutputBuilder,
) -> crate::operation::get_recommendations::builders::GetRecommendationsOutputBuilder {
    if builder.profiling_group_name.is_none() {
        builder.profiling_group_name = Some(Default::default())
    }
    if builder.profile_start_time.is_none() {
        builder.profile_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.profile_end_time.is_none() {
        builder.profile_end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.recommendations.is_none() {
        builder.recommendations = Some(Default::default())
    }
    if builder.anomalies.is_none() {
        builder.anomalies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_findings_reports_output_correct_errors(
    mut builder: crate::operation::list_findings_reports::builders::ListFindingsReportsOutputBuilder,
) -> crate::operation::list_findings_reports::builders::ListFindingsReportsOutputBuilder {
    if builder.findings_report_summaries.is_none() {
        builder.findings_report_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_profile_times_output_correct_errors(
    mut builder: crate::operation::list_profile_times::builders::ListProfileTimesOutputBuilder,
) -> crate::operation::list_profile_times::builders::ListProfileTimesOutputBuilder {
    if builder.profile_times.is_none() {
        builder.profile_times = Some(Default::default())
    }
    builder
}

pub(crate) fn list_profiling_groups_output_correct_errors(
    mut builder: crate::operation::list_profiling_groups::builders::ListProfilingGroupsOutputBuilder,
) -> crate::operation::list_profiling_groups::builders::ListProfilingGroupsOutputBuilder {
    if builder.profiling_group_names.is_none() {
        builder.profiling_group_names = Some(Default::default())
    }
    builder
}

pub(crate) fn put_permission_output_correct_errors(
    mut builder: crate::operation::put_permission::builders::PutPermissionOutputBuilder,
) -> crate::operation::put_permission::builders::PutPermissionOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn remove_permission_output_correct_errors(
    mut builder: crate::operation::remove_permission::builders::RemovePermissionOutputBuilder,
) -> crate::operation::remove_permission::builders::RemovePermissionOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_profiling_group_output_correct_errors(
    mut builder: crate::operation::update_profiling_group::builders::UpdateProfilingGroupOutputBuilder,
) -> crate::operation::update_profiling_group::builders::UpdateProfilingGroupOutputBuilder {
    if builder.profiling_group.is_none() {
        builder.profiling_group = {
            let builder = crate::types::builders::ProfilingGroupDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn agent_configuration_correct_errors(
    mut builder: crate::types::builders::AgentConfigurationBuilder,
) -> crate::types::builders::AgentConfigurationBuilder {
    if builder.should_profile.is_none() {
        builder.should_profile = Some(Default::default())
    }
    if builder.period_in_seconds.is_none() {
        builder.period_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn anomaly_correct_errors(mut builder: crate::types::builders::AnomalyBuilder) -> crate::types::builders::AnomalyBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::MetricBuilder::default();
            crate::serde_util::metric_correct_errors(builder).build().ok()
        }
    }
    if builder.reason.is_none() {
        builder.reason = Some(Default::default())
    }
    if builder.instances.is_none() {
        builder.instances = Some(Default::default())
    }
    builder
}

pub(crate) fn frame_metric_datum_correct_errors(
    mut builder: crate::types::builders::FrameMetricDatumBuilder,
) -> crate::types::builders::FrameMetricDatumBuilder {
    if builder.frame_metric.is_none() {
        builder.frame_metric = {
            let builder = crate::types::builders::FrameMetricBuilder::default();
            crate::serde_util::frame_metric_correct_errors(builder).build().ok()
        }
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_correct_errors(
    mut builder: crate::types::builders::RecommendationBuilder,
) -> crate::types::builders::RecommendationBuilder {
    if builder.all_matches_count.is_none() {
        builder.all_matches_count = Some(Default::default())
    }
    if builder.all_matches_sum.is_none() {
        builder.all_matches_sum = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = {
            let builder = crate::types::builders::PatternBuilder::default();
            Some(builder.build())
        }
    }
    if builder.top_matches.is_none() {
        builder.top_matches = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn timestamp_structure_correct_errors(
    mut builder: crate::types::builders::TimestampStructureBuilder,
) -> crate::types::builders::TimestampStructureBuilder {
    if builder.value.is_none() {
        builder.value = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_orchestration_config_correct_errors(
    mut builder: crate::types::builders::AgentOrchestrationConfigBuilder,
) -> crate::types::builders::AgentOrchestrationConfigBuilder {
    if builder.profiling_enabled.is_none() {
        builder.profiling_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn channel_correct_errors(mut builder: crate::types::builders::ChannelBuilder) -> crate::types::builders::ChannelBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.event_publishers.is_none() {
        builder.event_publishers = Some(Default::default())
    }
    builder
}

pub(crate) fn frame_metric_correct_errors(mut builder: crate::types::builders::FrameMetricBuilder) -> crate::types::builders::FrameMetricBuilder {
    if builder.frame_name.is_none() {
        builder.frame_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MetricType>().ok()
    }
    if builder.thread_states.is_none() {
        builder.thread_states = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_correct_errors(mut builder: crate::types::builders::MetricBuilder) -> crate::types::builders::MetricBuilder {
    if builder.frame_name.is_none() {
        builder.frame_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MetricType>().ok()
    }
    if builder.thread_states.is_none() {
        builder.thread_states = Some(Default::default())
    }
    builder
}

pub(crate) fn anomaly_instance_correct_errors(
    mut builder: crate::types::builders::AnomalyInstanceBuilder,
) -> crate::types::builders::AnomalyInstanceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn user_feedback_correct_errors(mut builder: crate::types::builders::UserFeedbackBuilder) -> crate::types::builders::UserFeedbackBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FeedbackType>().ok()
    }
    builder
}
