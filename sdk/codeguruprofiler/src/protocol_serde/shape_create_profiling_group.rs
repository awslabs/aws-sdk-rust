// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_profiling_group_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_profiling_group::CreateProfilingGroupOutput,
    crate::operation::create_profiling_group::CreateProfilingGroupError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictException" => crate::operation::create_profiling_group::CreateProfilingGroupError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::conflict_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::create_profiling_group::CreateProfilingGroupError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?
            };
            tmp
        }),
        "ServiceQuotaExceededException" => crate::operation::create_profiling_group::CreateProfilingGroupError::ServiceQuotaExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_quota_exceeded_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?
            };
            tmp
        }),
        "ThrottlingException" => crate::operation::create_profiling_group::CreateProfilingGroupError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::create_profiling_group::CreateProfilingGroupError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::create_profiling_group::CreateProfilingGroupError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::create_profiling_group::CreateProfilingGroupError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_profiling_group_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_profiling_group::CreateProfilingGroupOutput,
    crate::operation::create_profiling_group::CreateProfilingGroupError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_profiling_group::builders::CreateProfilingGroupOutputBuilder::default();
        output = output.set_profiling_group(crate::protocol_serde::shape_create_profiling_group_output::de_profiling_group_payload(
            _response_body,
        )?);
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::create_profiling_group_output_correct_errors(output).build()
    })
}

pub fn ser_create_profiling_group_input(
    input: &crate::operation::create_profiling_group::CreateProfilingGroupInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_profiling_group_input::ser_create_profiling_group_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
