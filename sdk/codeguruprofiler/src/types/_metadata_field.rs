// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MetadataField`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metadatafield = unimplemented!();
/// match metadatafield {
///     MetadataField::AgentId => { /* ... */ },
///     MetadataField::AwsRequestId => { /* ... */ },
///     MetadataField::ComputePlatform => { /* ... */ },
///     MetadataField::ExecutionEnvironment => { /* ... */ },
///     MetadataField::LambdaFunctionArn => { /* ... */ },
///     MetadataField::LambdaMemoryLimitInMb => { /* ... */ },
///     MetadataField::LambdaPreviousExecutionTimeInMilliseconds => { /* ... */ },
///     MetadataField::LambdaRemainingTimeInMilliseconds => { /* ... */ },
///     MetadataField::LambdaTimeGapBetweenInvokesInMilliseconds => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metadatafield` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MetadataField::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MetadataField::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MetadataField::NewFeature` is defined.
/// Specifically, when `metadatafield` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MetadataField::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum MetadataField {
    /// Unique identifier for the agent instance.
    AgentId,
    /// AWS requestId of the Lambda invocation.
    AwsRequestId,
    /// Compute platform on which agent is running.
    ComputePlatform,
    /// Execution environment on which Lambda function is running.
    ExecutionEnvironment,
    /// Function ARN that's used to invoke the Lambda function.
    LambdaFunctionArn,
    /// Memory allocated for the Lambda function.
    LambdaMemoryLimitInMb,
    /// Time in milliseconds for the previous Lambda invocation.
    LambdaPreviousExecutionTimeInMilliseconds,
    /// Time in milliseconds left before the execution times out.
    LambdaRemainingTimeInMilliseconds,
    /// Time in milliseconds between two invocations of the Lambda function.
    LambdaTimeGapBetweenInvokesInMilliseconds,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for MetadataField {
    fn from(s: &str) -> Self {
        match s {
            "AgentId" => MetadataField::AgentId,
            "AwsRequestId" => MetadataField::AwsRequestId,
            "ComputePlatform" => MetadataField::ComputePlatform,
            "ExecutionEnvironment" => MetadataField::ExecutionEnvironment,
            "LambdaFunctionArn" => MetadataField::LambdaFunctionArn,
            "LambdaMemoryLimitInMB" => MetadataField::LambdaMemoryLimitInMb,
            "LambdaPreviousExecutionTimeInMilliseconds" => {
                MetadataField::LambdaPreviousExecutionTimeInMilliseconds
            }
            "LambdaRemainingTimeInMilliseconds" => MetadataField::LambdaRemainingTimeInMilliseconds,
            "LambdaTimeGapBetweenInvokesInMilliseconds" => {
                MetadataField::LambdaTimeGapBetweenInvokesInMilliseconds
            }
            other => {
                MetadataField::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for MetadataField {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(MetadataField::from(s))
    }
}
impl MetadataField {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MetadataField::AgentId => "AgentId",
            MetadataField::AwsRequestId => "AwsRequestId",
            MetadataField::ComputePlatform => "ComputePlatform",
            MetadataField::ExecutionEnvironment => "ExecutionEnvironment",
            MetadataField::LambdaFunctionArn => "LambdaFunctionArn",
            MetadataField::LambdaMemoryLimitInMb => "LambdaMemoryLimitInMB",
            MetadataField::LambdaPreviousExecutionTimeInMilliseconds => {
                "LambdaPreviousExecutionTimeInMilliseconds"
            }
            MetadataField::LambdaRemainingTimeInMilliseconds => "LambdaRemainingTimeInMilliseconds",
            MetadataField::LambdaTimeGapBetweenInvokesInMilliseconds => {
                "LambdaTimeGapBetweenInvokesInMilliseconds"
            }
            MetadataField::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AgentId",
            "AwsRequestId",
            "ComputePlatform",
            "ExecutionEnvironment",
            "LambdaFunctionArn",
            "LambdaMemoryLimitInMB",
            "LambdaPreviousExecutionTimeInMilliseconds",
            "LambdaRemainingTimeInMilliseconds",
            "LambdaTimeGapBetweenInvokesInMilliseconds",
        ]
    }
}
impl AsRef<str> for MetadataField {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
