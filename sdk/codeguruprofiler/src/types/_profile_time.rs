// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains the start time of a profile. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProfileTime {
    /// <p>The start time of a profile. It is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
    #[doc(hidden)]
    pub start: std::option::Option<aws_smithy_types::DateTime>,
}
impl ProfileTime {
    /// <p>The start time of a profile. It is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
    pub fn start(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start.as_ref()
    }
}
impl ProfileTime {
    /// Creates a new builder-style object to manufacture [`ProfileTime`](crate::types::ProfileTime).
    pub fn builder() -> crate::types::builders::ProfileTimeBuilder {
        crate::types::builders::ProfileTimeBuilder::default()
    }
}

/// A builder for [`ProfileTime`](crate::types::ProfileTime).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProfileTimeBuilder {
    pub(crate) start: std::option::Option<aws_smithy_types::DateTime>,
}
impl ProfileTimeBuilder {
    /// <p>The start time of a profile. It is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
    pub fn start(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start = Some(input);
        self
    }
    /// <p>The start time of a profile. It is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
    pub fn set_start(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.start = input;
        self
    }
    /// Consumes the builder and constructs a [`ProfileTime`](crate::types::ProfileTime).
    pub fn build(self) -> crate::types::ProfileTime {
        crate::types::ProfileTime { start: self.start }
    }
}
