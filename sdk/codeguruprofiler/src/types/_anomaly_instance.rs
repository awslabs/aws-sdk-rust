// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specific duration in which the metric is flagged as anomalous.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnomalyInstance {
    /// <p> The universally unique identifier (UUID) of an instance of an anomaly in a metric. </p>
    pub id: ::std::string::String,
    /// <p> The start time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p> The end time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
    pub user_feedback: ::std::option::Option<crate::types::UserFeedback>,
}
impl AnomalyInstance {
    /// <p> The universally unique identifier (UUID) of an instance of an anomaly in a metric. </p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p> The start time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p> The end time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
    pub fn user_feedback(&self) -> ::std::option::Option<&crate::types::UserFeedback> {
        self.user_feedback.as_ref()
    }
}
impl AnomalyInstance {
    /// Creates a new builder-style object to manufacture [`AnomalyInstance`](crate::types::AnomalyInstance).
    pub fn builder() -> crate::types::builders::AnomalyInstanceBuilder {
        crate::types::builders::AnomalyInstanceBuilder::default()
    }
}

/// A builder for [`AnomalyInstance`](crate::types::AnomalyInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnomalyInstanceBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) user_feedback: ::std::option::Option<crate::types::UserFeedback>,
}
impl AnomalyInstanceBuilder {
    /// <p> The universally unique identifier (UUID) of an instance of an anomaly in a metric. </p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The universally unique identifier (UUID) of an instance of an anomaly in a metric. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The universally unique identifier (UUID) of an instance of an anomaly in a metric. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The start time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The start time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p> The start time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p> The end time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The end time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p> The end time of the period during which the metric is flagged as anomalous. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
    pub fn user_feedback(mut self, input: crate::types::UserFeedback) -> Self {
        self.user_feedback = ::std::option::Option::Some(input);
        self
    }
    /// <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
    pub fn set_user_feedback(mut self, input: ::std::option::Option<crate::types::UserFeedback>) -> Self {
        self.user_feedback = input;
        self
    }
    /// <p>Feedback type on a specific instance of anomaly submitted by the user.</p>
    pub fn get_user_feedback(&self) -> &::std::option::Option<crate::types::UserFeedback> {
        &self.user_feedback
    }
    /// Consumes the builder and constructs a [`AnomalyInstance`](crate::types::AnomalyInstance).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AnomalyInstanceBuilder::id)
    /// - [`start_time`](crate::types::builders::AnomalyInstanceBuilder::start_time)
    pub fn build(self) -> ::std::result::Result<crate::types::AnomalyInstance, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnomalyInstance {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AnomalyInstance",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building AnomalyInstance",
                )
            })?,
            end_time: self.end_time,
            user_feedback: self.user_feedback,
        })
    }
}
