// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a frame metric and its values. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FrameMetricDatum {
    /// <p> The frame name, metric type, and thread states. These are used to derive the value of the metric for the frame.</p>
    pub frame_metric: ::std::option::Option<crate::types::FrameMetric>,
    /// <p> A list of values that are associated with a frame metric. </p>
    pub values: ::std::vec::Vec<f64>,
}
impl FrameMetricDatum {
    /// <p> The frame name, metric type, and thread states. These are used to derive the value of the metric for the frame.</p>
    pub fn frame_metric(&self) -> ::std::option::Option<&crate::types::FrameMetric> {
        self.frame_metric.as_ref()
    }
    /// <p> A list of values that are associated with a frame metric. </p>
    pub fn values(&self) -> &[f64] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl FrameMetricDatum {
    /// Creates a new builder-style object to manufacture [`FrameMetricDatum`](crate::types::FrameMetricDatum).
    pub fn builder() -> crate::types::builders::FrameMetricDatumBuilder {
        crate::types::builders::FrameMetricDatumBuilder::default()
    }
}

/// A builder for [`FrameMetricDatum`](crate::types::FrameMetricDatum).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FrameMetricDatumBuilder {
    pub(crate) frame_metric: ::std::option::Option<crate::types::FrameMetric>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl FrameMetricDatumBuilder {
    /// <p> The frame name, metric type, and thread states. These are used to derive the value of the metric for the frame.</p>
    /// This field is required.
    pub fn frame_metric(mut self, input: crate::types::FrameMetric) -> Self {
        self.frame_metric = ::std::option::Option::Some(input);
        self
    }
    /// <p> The frame name, metric type, and thread states. These are used to derive the value of the metric for the frame.</p>
    pub fn set_frame_metric(mut self, input: ::std::option::Option<crate::types::FrameMetric>) -> Self {
        self.frame_metric = input;
        self
    }
    /// <p> The frame name, metric type, and thread states. These are used to derive the value of the metric for the frame.</p>
    pub fn get_frame_metric(&self) -> &::std::option::Option<crate::types::FrameMetric> {
        &self.frame_metric
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p> A list of values that are associated with a frame metric. </p>
    pub fn values(mut self, input: f64) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of values that are associated with a frame metric. </p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.values = input;
        self
    }
    /// <p> A list of values that are associated with a frame metric. </p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`FrameMetricDatum`](crate::types::FrameMetricDatum).
    /// This method will fail if any of the following fields are not set:
    /// - [`values`](crate::types::builders::FrameMetricDatumBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::FrameMetricDatum, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FrameMetricDatum {
            frame_metric: self.frame_metric,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building FrameMetricDatum",
                )
            })?,
        })
    }
}
