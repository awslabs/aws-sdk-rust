// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The part of a profile that contains a recommendation found during analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Match {
    /// <p>The target frame that triggered a match.</p>
    #[doc(hidden)]
    pub target_frames_index: std::option::Option<i32>,
    /// <p>The location in the profiling graph that contains a recommendation found during analysis.</p>
    #[doc(hidden)]
    pub frame_address: std::option::Option<std::string::String>,
    /// <p>The value in the profile data that exceeded the recommendation threshold.</p>
    #[doc(hidden)]
    pub threshold_breach_value: std::option::Option<f64>,
}
impl Match {
    /// <p>The target frame that triggered a match.</p>
    pub fn target_frames_index(&self) -> std::option::Option<i32> {
        self.target_frames_index
    }
    /// <p>The location in the profiling graph that contains a recommendation found during analysis.</p>
    pub fn frame_address(&self) -> std::option::Option<&str> {
        self.frame_address.as_deref()
    }
    /// <p>The value in the profile data that exceeded the recommendation threshold.</p>
    pub fn threshold_breach_value(&self) -> std::option::Option<f64> {
        self.threshold_breach_value
    }
}
impl Match {
    /// Creates a new builder-style object to manufacture [`Match`](crate::types::Match).
    pub fn builder() -> crate::types::builders::MatchBuilder {
        crate::types::builders::MatchBuilder::default()
    }
}

/// A builder for [`Match`](crate::types::Match).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MatchBuilder {
    pub(crate) target_frames_index: std::option::Option<i32>,
    pub(crate) frame_address: std::option::Option<std::string::String>,
    pub(crate) threshold_breach_value: std::option::Option<f64>,
}
impl MatchBuilder {
    /// <p>The target frame that triggered a match.</p>
    pub fn target_frames_index(mut self, input: i32) -> Self {
        self.target_frames_index = Some(input);
        self
    }
    /// <p>The target frame that triggered a match.</p>
    pub fn set_target_frames_index(mut self, input: std::option::Option<i32>) -> Self {
        self.target_frames_index = input;
        self
    }
    /// <p>The location in the profiling graph that contains a recommendation found during analysis.</p>
    pub fn frame_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.frame_address = Some(input.into());
        self
    }
    /// <p>The location in the profiling graph that contains a recommendation found during analysis.</p>
    pub fn set_frame_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.frame_address = input;
        self
    }
    /// <p>The value in the profile data that exceeded the recommendation threshold.</p>
    pub fn threshold_breach_value(mut self, input: f64) -> Self {
        self.threshold_breach_value = Some(input);
        self
    }
    /// <p>The value in the profile data that exceeded the recommendation threshold.</p>
    pub fn set_threshold_breach_value(mut self, input: std::option::Option<f64>) -> Self {
        self.threshold_breach_value = input;
        self
    }
    /// Consumes the builder and constructs a [`Match`](crate::types::Match).
    pub fn build(self) -> crate::types::Match {
        crate::types::Match {
            target_frames_index: self.target_frames_index,
            frame_address: self.frame_address,
            threshold_breach_value: self.threshold_breach_value,
        }
    }
}
