// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchGetFrameMetricData`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profiling_group_name(impl Into<String>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::profiling_group_name) / [`set_profiling_group_name(Option<String>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_profiling_group_name):<br>required: **true**<br><p> The name of the profiling group associated with the the frame metrics used to return the time series values. </p><br>
    ///   - [`start_time(DateTime)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_start_time):<br>required: **false**<br><p> The start time of the time period for the frame metrics used to return the time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p><br>
    ///   - [`end_time(DateTime)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_end_time):<br>required: **false**<br><p> The end time of the time period for the returned time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p><br>
    ///   - [`period(impl Into<String>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::period) / [`set_period(Option<String>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_period):<br>required: **false**<br><p> The duration of the frame metrics used to return the time series values. Specify using the ISO 8601 format. The maximum period duration is one day (<code>PT24H</code> or <code>P1D</code>). </p><br>
    ///   - [`target_resolution(AggregationPeriod)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::target_resolution) / [`set_target_resolution(Option<AggregationPeriod>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_target_resolution):<br>required: **false**<br><p>The requested resolution of time steps for the returned time series of values. If the requested target resolution is not available due to data not being retained we provide a best effort result by falling back to the most granular available resolution after the target resolution. There are 3 valid values. </p>  <ul>   <li> <p> <code>P1D</code> — 1 day </p> </li>   <li> <p> <code>PT1H</code> — 1 hour </p> </li>   <li> <p> <code>PT5M</code> — 5 minutes </p> </li>  </ul><br>
    ///   - [`frame_metrics(FrameMetric)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::frame_metrics) / [`set_frame_metrics(Option<Vec::<FrameMetric>>)`](crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::set_frame_metrics):<br>required: **false**<br><p> The details of the metrics that are used to request a time series of values. The metric includes the name of the frame, the aggregation type to calculate the metric value for the frame, and the thread states to use to get the count for the metric value of the frame.</p><br>
    /// - On success, responds with [`BatchGetFrameMetricDataOutput`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput) with field(s):
    ///   - [`start_time(DateTime)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::start_time): <p> The start time of the time period for the returned time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    ///   - [`end_time(DateTime)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::end_time): <p> The end time of the time period for the returned time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>
    ///   - [`resolution(AggregationPeriod)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::resolution): <p>Resolution or granularity of the profile data used to generate the time series. This is the value used to jump through time steps in a time series. There are 3 valid values. </p>  <ul>   <li> <p> <code>P1D</code> — 1 day </p> </li>   <li> <p> <code>PT1H</code> — 1 hour </p> </li>   <li> <p> <code>PT5M</code> — 5 minutes </p> </li>  </ul>
    ///   - [`end_times(Vec::<TimestampStructure>)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::end_times): <p> List of instances, or time steps, in the time series. For example, if the <code>period</code> is one day (<code>PT24H)</code>), and the <code>resolution</code> is five minutes (<code>PT5M</code>), then there are 288 <code>endTimes</code> in the list that are each five minutes appart. </p>
    ///   - [`unprocessed_end_times(HashMap::<String, Vec::<TimestampStructure>>)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::unprocessed_end_times): <p>List of instances which remained unprocessed. This will create a missing time step in the list of end times.</p>
    ///   - [`frame_metric_data(Vec::<FrameMetricDatum>)`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataOutput::frame_metric_data): <p>Details of the metrics to request a time series of values. The metric includes the name of the frame, the aggregation type to calculate the metric value for the frame, and the thread states to use to get the count for the metric value of the frame.</p>
    /// - On failure, responds with [`SdkError<BatchGetFrameMetricDataError>`](crate::operation::batch_get_frame_metric_data::BatchGetFrameMetricDataError)
    pub fn batch_get_frame_metric_data(&self) -> crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder {
        crate::operation::batch_get_frame_metric_data::builders::BatchGetFrameMetricDataFluentBuilder::new(self.handle.clone())
    }
}
