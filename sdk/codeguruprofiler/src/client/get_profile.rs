// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetProfile`](crate::operation::get_profile::builders::GetProfileFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profiling_group_name(impl Into<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::profiling_group_name) / [`set_profiling_group_name(Option<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_profiling_group_name):<br>required: **true**<br><p>The name of the profiling group to get.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_start_time):<br>required: **false**<br><p>The start time of the profile to get. Specify using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>  <p> If you specify <code>startTime</code>, then you must also specify <code>period</code> or <code>endTime</code>, but not both. </p><br>
    ///   - [`period(impl Into<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::period) / [`set_period(Option<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_period):<br>required: **false**<br><p> Used with <code>startTime</code> or <code>endTime</code> to specify the time range for the returned aggregated profile. Specify using the ISO 8601 format. For example, <code>P1DT1H1M1S</code>. </p>  <p> To get the latest aggregated profile, specify only <code>period</code>. </p><br>
    ///   - [`end_time(DateTime)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_end_time):<br>required: **false**<br><p> The end time of the requested profile. Specify using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p>  <p> If you specify <code>endTime</code>, then you must also specify <code>period</code> or <code>startTime</code>, but not both. </p><br>
    ///   - [`max_depth(i32)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::max_depth) / [`set_max_depth(Option<i32>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_max_depth):<br>required: **false**<br><p> The maximum depth of the stacks in the code that is represented in the aggregated profile. For example, if CodeGuru Profiler finds a method <code>A</code>, which calls method <code>B</code>, which calls method <code>C</code>, which calls method <code>D</code>, then the depth is 4. If the <code>maxDepth</code> is set to 2, then the aggregated profile contains representations of methods <code>A</code> and <code>B</code>. </p><br>
    ///   - [`accept(impl Into<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::accept) / [`set_accept(Option<String>)`](crate::operation::get_profile::builders::GetProfileFluentBuilder::set_accept):<br>required: **false**<br><p> The format of the returned profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default . </p>  <ul>   <li> <p> <code>application/json</code> — standard JSON format </p> </li>   <li> <p> <code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information, see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>. </p> </li>  </ul><br>
    /// - On success, responds with [`GetProfileOutput`](crate::operation::get_profile::GetProfileOutput) with field(s):
    ///   - [`profile(Blob)`](crate::operation::get_profile::GetProfileOutput::profile): <p>Information about the profile.</p>
    ///   - [`content_type(String)`](crate::operation::get_profile::GetProfileOutput::content_type): <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    ///   - [`content_encoding(Option<String>)`](crate::operation::get_profile::GetProfileOutput::content_encoding): <p>The content encoding of the profile.</p>
    /// - On failure, responds with [`SdkError<GetProfileError>`](crate::operation::get_profile::GetProfileError)
    pub fn get_profile(&self) -> crate::operation::get_profile::builders::GetProfileFluentBuilder {
        crate::operation::get_profile::builders::GetProfileFluentBuilder::new(self.handle.clone())
    }
}
