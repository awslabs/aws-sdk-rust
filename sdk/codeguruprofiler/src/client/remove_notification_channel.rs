// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RemoveNotificationChannel`](crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profiling_group_name(impl Into<String>)`](crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder::profiling_group_name) / [`set_profiling_group_name(Option<String>)`](crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder::set_profiling_group_name):<br>required: **true**<br><p>The name of the profiling group we want to change notification configuration for.</p><br>
    ///   - [`channel_id(impl Into<String>)`](crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder::channel_id) / [`set_channel_id(Option<String>)`](crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder::set_channel_id):<br>required: **true**<br><p>The id of the channel that we want to stop receiving notifications.</p><br>
    /// - On success, responds with [`RemoveNotificationChannelOutput`](crate::operation::remove_notification_channel::RemoveNotificationChannelOutput) with field(s):
    ///   - [`notification_configuration(Option<NotificationConfiguration>)`](crate::operation::remove_notification_channel::RemoveNotificationChannelOutput::notification_configuration): <p>The new notification configuration for this profiling group.</p>
    /// - On failure, responds with [`SdkError<RemoveNotificationChannelError>`](crate::operation::remove_notification_channel::RemoveNotificationChannelError)
    pub fn remove_notification_channel(&self) -> crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder {
        crate::operation::remove_notification_channel::builders::RemoveNotificationChannelFluentBuilder::new(self.handle.clone())
    }
}
