// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Add up to 2 anomaly notifications channels for a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddNotificationChannels {
    _private: (),
}
impl AddNotificationChannels {
    /// Creates a new builder-style object to manufacture [`AddNotificationChannelsInput`](crate::input::AddNotificationChannelsInput)
    pub fn builder() -> crate::input::add_notification_channels_input::Builder {
        crate::input::add_notification_channels_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddNotificationChannels {
    type Output = std::result::Result<
        crate::output::AddNotificationChannelsOutput,
        crate::error::AddNotificationChannelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_notification_channels_error(response)
        } else {
            crate::operation_deser::parse_add_notification_channels_response(response)
        }
    }
}

/// <p>
/// Returns the time series of values for a requested list
/// of frame metrics from a time period.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetFrameMetricData {
    _private: (),
}
impl BatchGetFrameMetricData {
    /// Creates a new builder-style object to manufacture [`BatchGetFrameMetricDataInput`](crate::input::BatchGetFrameMetricDataInput)
    pub fn builder() -> crate::input::batch_get_frame_metric_data_input::Builder {
        crate::input::batch_get_frame_metric_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchGetFrameMetricData {
    type Output = std::result::Result<
        crate::output::BatchGetFrameMetricDataOutput,
        crate::error::BatchGetFrameMetricDataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_get_frame_metric_data_error(response)
        } else {
            crate::operation_deser::parse_batch_get_frame_metric_data_response(response)
        }
    }
}

/// <p>
/// Used by profiler agents to report their current state and to receive remote
/// configuration updates. For example, <code>ConfigureAgent</code> can be used
/// to tell an agent whether to profile or not and for how long to return profiling data.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfigureAgent {
    _private: (),
}
impl ConfigureAgent {
    /// Creates a new builder-style object to manufacture [`ConfigureAgentInput`](crate::input::ConfigureAgentInput)
    pub fn builder() -> crate::input::configure_agent_input::Builder {
        crate::input::configure_agent_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfigureAgent {
    type Output =
        std::result::Result<crate::output::ConfigureAgentOutput, crate::error::ConfigureAgentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_configure_agent_error(response)
        } else {
            crate::operation_deser::parse_configure_agent_response(response)
        }
    }
}

/// <p>Creates a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProfilingGroup {
    _private: (),
}
impl CreateProfilingGroup {
    /// Creates a new builder-style object to manufacture [`CreateProfilingGroupInput`](crate::input::CreateProfilingGroupInput)
    pub fn builder() -> crate::input::create_profiling_group_input::Builder {
        crate::input::create_profiling_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProfilingGroup {
    type Output = std::result::Result<
        crate::output::CreateProfilingGroupOutput,
        crate::error::CreateProfilingGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_profiling_group_error(response)
        } else {
            crate::operation_deser::parse_create_profiling_group_response(response)
        }
    }
}

/// <p>Deletes a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProfilingGroup {
    _private: (),
}
impl DeleteProfilingGroup {
    /// Creates a new builder-style object to manufacture [`DeleteProfilingGroupInput`](crate::input::DeleteProfilingGroupInput)
    pub fn builder() -> crate::input::delete_profiling_group_input::Builder {
        crate::input::delete_profiling_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProfilingGroup {
    type Output = std::result::Result<
        crate::output::DeleteProfilingGroupOutput,
        crate::error::DeleteProfilingGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_profiling_group_error(response)
        } else {
            crate::operation_deser::parse_delete_profiling_group_response(response)
        }
    }
}

/// <p>
/// Returns a <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
/// <code>ProfilingGroupDescription</code>
/// </a>
/// object that contains information about the requested profiling group.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProfilingGroup {
    _private: (),
}
impl DescribeProfilingGroup {
    /// Creates a new builder-style object to manufacture [`DescribeProfilingGroupInput`](crate::input::DescribeProfilingGroupInput)
    pub fn builder() -> crate::input::describe_profiling_group_input::Builder {
        crate::input::describe_profiling_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProfilingGroup {
    type Output = std::result::Result<
        crate::output::DescribeProfilingGroupOutput,
        crate::error::DescribeProfilingGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_profiling_group_error(response)
        } else {
            crate::operation_deser::parse_describe_profiling_group_response(response)
        }
    }
}

/// <p>
/// Returns a list of
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html">
/// <code>FindingsReportSummary</code>
/// </a>
/// objects that contain analysis results for all profiling groups in your AWS account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFindingsReportAccountSummary {
    _private: (),
}
impl GetFindingsReportAccountSummary {
    /// Creates a new builder-style object to manufacture [`GetFindingsReportAccountSummaryInput`](crate::input::GetFindingsReportAccountSummaryInput)
    pub fn builder() -> crate::input::get_findings_report_account_summary_input::Builder {
        crate::input::get_findings_report_account_summary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFindingsReportAccountSummary {
    type Output = std::result::Result<
        crate::output::GetFindingsReportAccountSummaryOutput,
        crate::error::GetFindingsReportAccountSummaryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_findings_report_account_summary_error(response)
        } else {
            crate::operation_deser::parse_get_findings_report_account_summary_response(response)
        }
    }
}

/// <p>Get the current configuration for anomaly notifications for a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetNotificationConfiguration {
    _private: (),
}
impl GetNotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetNotificationConfigurationInput`](crate::input::GetNotificationConfigurationInput)
    pub fn builder() -> crate::input::get_notification_configuration_input::Builder {
        crate::input::get_notification_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetNotificationConfiguration {
    type Output = std::result::Result<
        crate::output::GetNotificationConfigurationOutput,
        crate::error::GetNotificationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_notification_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_notification_configuration_response(response)
        }
    }
}

/// <p>
/// Returns the JSON-formatted resource-based policy on a profiling group.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPolicy {
    _private: (),
}
impl GetPolicy {
    /// Creates a new builder-style object to manufacture [`GetPolicyInput`](crate::input::GetPolicyInput)
    pub fn builder() -> crate::input::get_policy_input::Builder {
        crate::input::get_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPolicy {
    type Output = std::result::Result<crate::output::GetPolicyOutput, crate::error::GetPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_policy_error(response)
        } else {
            crate::operation_deser::parse_get_policy_response(response)
        }
    }
}

/// <p>
/// Gets the aggregated profile of a profiling group for a specified time range.
/// Amazon CodeGuru Profiler collects posted agent profiles for a profiling group
/// into aggregated profiles.  
/// </p>
/// <note>
/// <p>
/// Because aggregated profiles expire over time <code>GetProfile</code> is not idempotent.
/// </p>
/// </note>
/// <p>
/// Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: <code>startTime</code>,
/// <code>endTime</code>, <code>period</code>. The maximum time range allowed is 7 days. If you specify all 3 parameters,
/// an exception is thrown. If you specify only <code>period</code>, the latest aggregated profile is returned.
/// </p>
/// <p>
/// Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to
/// UTC. The aggregation period of an aggregated profile determines how long it is retained. For more
/// information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html">
/// <code>AggregatedProfileTime</code>
/// </a>. The aggregated profile's aggregation period determines how long  
/// it is retained by CodeGuru Profiler.
/// </p>
/// <ul>
/// <li>
/// <p>
/// If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days.
/// </p>
/// </li>
/// <li>
/// <p>
/// If the aggregation period is 1 hour, the aggregated profile is retained for 60 days.
/// </p>
/// </li>
/// <li>
/// <p>
/// If the aggregation period is 1 day, the aggregated profile is retained for 3 years.
/// </p>
/// </li>
/// </ul>
/// <p>There are two use cases for calling <code>GetProfile</code>.</p>
/// <ol>
/// <li>
/// <p>
/// If you want to return an aggregated profile that already exists, use
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html">
/// <code>ListProfileTimes</code>
/// </a> to
/// view the time ranges of existing aggregated profiles. Use them in a <code>GetProfile</code> request to return a specific,
/// existing aggregated profile.
/// </p>
/// </li>
/// <li>
/// <p>
/// If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile,
/// then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time
/// range and return them as one aggregated profile.
/// </p>
/// <p> If aggregated profiles do not exist for the full time range requested, then
/// aggregated profiles for a smaller time range are returned. For example, if the
/// requested time range is from 00:00 to 00:20, and the existing aggregated profiles are
/// from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. </p>
/// </li>
/// </ol>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetProfile {
    _private: (),
}
impl GetProfile {
    /// Creates a new builder-style object to manufacture [`GetProfileInput`](crate::input::GetProfileInput)
    pub fn builder() -> crate::input::get_profile_input::Builder {
        crate::input::get_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetProfile {
    type Output =
        std::result::Result<crate::output::GetProfileOutput, crate::error::GetProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_profile_error(response)
        } else {
            crate::operation_deser::parse_get_profile_response(response)
        }
    }
}

/// <p>
/// Returns a list of
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html">
/// <code>Recommendation</code>
/// </a>
/// objects that contain recommendations for a profiling group for a given time period. A list of
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html">
/// <code>Anomaly</code>
/// </a>
/// objects that contains details about anomalies detected in the profiling group for the same time period is also
/// returned.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRecommendations {
    _private: (),
}
impl GetRecommendations {
    /// Creates a new builder-style object to manufacture [`GetRecommendationsInput`](crate::input::GetRecommendationsInput)
    pub fn builder() -> crate::input::get_recommendations_input::Builder {
        crate::input::get_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRecommendations {
    type Output = std::result::Result<
        crate::output::GetRecommendationsOutput,
        crate::error::GetRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_recommendations_response(response)
        }
    }
}

/// <p>List the available reports for a given profiling group and time range.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFindingsReports {
    _private: (),
}
impl ListFindingsReports {
    /// Creates a new builder-style object to manufacture [`ListFindingsReportsInput`](crate::input::ListFindingsReportsInput)
    pub fn builder() -> crate::input::list_findings_reports_input::Builder {
        crate::input::list_findings_reports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFindingsReports {
    type Output = std::result::Result<
        crate::output::ListFindingsReportsOutput,
        crate::error::ListFindingsReportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_findings_reports_error(response)
        } else {
            crate::operation_deser::parse_list_findings_reports_response(response)
        }
    }
}

/// <p>Lists the start times of the available aggregated profiles of a profiling group
/// for an aggregation period within the specified time range.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProfileTimes {
    _private: (),
}
impl ListProfileTimes {
    /// Creates a new builder-style object to manufacture [`ListProfileTimesInput`](crate::input::ListProfileTimesInput)
    pub fn builder() -> crate::input::list_profile_times_input::Builder {
        crate::input::list_profile_times_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProfileTimes {
    type Output = std::result::Result<
        crate::output::ListProfileTimesOutput,
        crate::error::ListProfileTimesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_profile_times_error(response)
        } else {
            crate::operation_deser::parse_list_profile_times_response(response)
        }
    }
}

/// <p>
/// Returns a list of profiling groups. The profiling groups are returned as
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
/// <code>ProfilingGroupDescription</code>
/// </a>
/// objects.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProfilingGroups {
    _private: (),
}
impl ListProfilingGroups {
    /// Creates a new builder-style object to manufacture [`ListProfilingGroupsInput`](crate::input::ListProfilingGroupsInput)
    pub fn builder() -> crate::input::list_profiling_groups_input::Builder {
        crate::input::list_profiling_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProfilingGroups {
    type Output = std::result::Result<
        crate::output::ListProfilingGroupsOutput,
        crate::error::ListProfilingGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_profiling_groups_error(response)
        } else {
            crate::operation_deser::parse_list_profiling_groups_response(response)
        }
    }
}

/// <p>
/// Returns a list of the tags that are assigned to a specified resource.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>
/// Submits profiling data to an aggregated profile of a profiling group. To get an  
/// aggregated profile that is created with this profiling data, use
/// <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html">
/// <code>GetProfile</code>
/// </a>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PostAgentProfile {
    _private: (),
}
impl PostAgentProfile {
    /// Creates a new builder-style object to manufacture [`PostAgentProfileInput`](crate::input::PostAgentProfileInput)
    pub fn builder() -> crate::input::post_agent_profile_input::Builder {
        crate::input::post_agent_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PostAgentProfile {
    type Output = std::result::Result<
        crate::output::PostAgentProfileOutput,
        crate::error::PostAgentProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_post_agent_profile_error(response)
        } else {
            crate::operation_deser::parse_post_agent_profile_response(response)
        }
    }
}

/// <p>
/// Adds permissions to a profiling group's resource-based policy
/// that are provided using an action group. If a profiling group doesn't have
/// a resource-based policy, one is created for it using the permissions in the action group and
/// the roles and users in the <code>principals</code> parameter.
/// </p>
/// <p> The one supported action group that can be added is <code>agentPermission</code>
/// which grants <code>ConfigureAgent</code> and <code>PostAgent</code> permissions. For
/// more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based
/// policies in CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User
/// Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
/// <code>ConfigureAgent</code>
/// </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
/// <code>PostAgentProfile</code>
/// </a>. </p>
/// <p>
/// The first time you call <code>PutPermission</code> on a profiling group, do not specify a <code>revisionId</code> because
/// it doesn't have a resource-based policy. Subsequent calls must provide a <code>revisionId</code> to specify
/// which revision of the resource-based policy to add the permissions to.
/// </p>
/// <p>
/// The response contains the profiling group's JSON-formatted resource policy.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutPermission {
    _private: (),
}
impl PutPermission {
    /// Creates a new builder-style object to manufacture [`PutPermissionInput`](crate::input::PutPermissionInput)
    pub fn builder() -> crate::input::put_permission_input::Builder {
        crate::input::put_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutPermission {
    type Output =
        std::result::Result<crate::output::PutPermissionOutput, crate::error::PutPermissionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_permission_error(response)
        } else {
            crate::operation_deser::parse_put_permission_response(response)
        }
    }
}

/// <p>Remove one anomaly notifications channel for a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveNotificationChannel {
    _private: (),
}
impl RemoveNotificationChannel {
    /// Creates a new builder-style object to manufacture [`RemoveNotificationChannelInput`](crate::input::RemoveNotificationChannelInput)
    pub fn builder() -> crate::input::remove_notification_channel_input::Builder {
        crate::input::remove_notification_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveNotificationChannel {
    type Output = std::result::Result<
        crate::output::RemoveNotificationChannelOutput,
        crate::error::RemoveNotificationChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_notification_channel_error(response)
        } else {
            crate::operation_deser::parse_remove_notification_channel_response(response)
        }
    }
}

/// <p> Removes permissions from a profiling group's resource-based policy that are provided
/// using an action group. The one supported action group that can be removed is
/// <code>agentPermission</code> which grants <code>ConfigureAgent</code> and
/// <code>PostAgent</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based policies in CodeGuru Profiler</a> in the <i>Amazon
/// CodeGuru Profiler User Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
/// <code>ConfigureAgent</code>
/// </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
/// <code>PostAgentProfile</code>
/// </a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemovePermission {
    _private: (),
}
impl RemovePermission {
    /// Creates a new builder-style object to manufacture [`RemovePermissionInput`](crate::input::RemovePermissionInput)
    pub fn builder() -> crate::input::remove_permission_input::Builder {
        crate::input::remove_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemovePermission {
    type Output = std::result::Result<
        crate::output::RemovePermissionOutput,
        crate::error::RemovePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_permission_error(response)
        } else {
            crate::operation_deser::parse_remove_permission_response(response)
        }
    }
}

/// <p>Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is
/// useful or not.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SubmitFeedback {
    _private: (),
}
impl SubmitFeedback {
    /// Creates a new builder-style object to manufacture [`SubmitFeedbackInput`](crate::input::SubmitFeedbackInput)
    pub fn builder() -> crate::input::submit_feedback_input::Builder {
        crate::input::submit_feedback_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SubmitFeedback {
    type Output =
        std::result::Result<crate::output::SubmitFeedbackOutput, crate::error::SubmitFeedbackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_submit_feedback_error(response)
        } else {
            crate::operation_deser::parse_submit_feedback_response(response)
        }
    }
}

/// <p>
/// Use to assign one or more tags to a resource.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>
/// Use to remove one or more tags from a resource.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates a profiling group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProfilingGroup {
    _private: (),
}
impl UpdateProfilingGroup {
    /// Creates a new builder-style object to manufacture [`UpdateProfilingGroupInput`](crate::input::UpdateProfilingGroupInput)
    pub fn builder() -> crate::input::update_profiling_group_input::Builder {
        crate::input::update_profiling_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProfilingGroup {
    type Output = std::result::Result<
        crate::output::UpdateProfilingGroupOutput,
        crate::error::UpdateProfilingGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_profiling_group_error(response)
        } else {
            crate::operation_deser::parse_update_profiling_group_response(response)
        }
    }
}
