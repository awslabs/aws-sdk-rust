// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The structure representing the <code>getPolicyRequest</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPolicyInput {
    /// <p>The name of the profiling group.</p>
    #[doc(hidden)]
    pub profiling_group_name: std::option::Option<std::string::String>,
}
impl GetPolicyInput {
    /// <p>The name of the profiling group.</p>
    pub fn profiling_group_name(&self) -> std::option::Option<&str> {
        self.profiling_group_name.as_deref()
    }
}
impl GetPolicyInput {
    /// Creates a new builder-style object to manufacture [`GetPolicyInput`](crate::operation::get_policy::GetPolicyInput).
    pub fn builder() -> crate::operation::get_policy::builders::GetPolicyInputBuilder {
        crate::operation::get_policy::builders::GetPolicyInputBuilder::default()
    }
}

/// A builder for [`GetPolicyInput`](crate::operation::get_policy::GetPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPolicyInputBuilder {
    pub(crate) profiling_group_name: std::option::Option<std::string::String>,
}
impl GetPolicyInputBuilder {
    /// <p>The name of the profiling group.</p>
    pub fn profiling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.profiling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the profiling group.</p>
    pub fn set_profiling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.profiling_group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetPolicyInput`](crate::operation::get_policy::GetPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_policy::GetPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_policy::GetPolicyInput {
            profiling_group_name: self.profiling_group_name,
        })
    }
}
