// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure representing the getProfileResponse.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetProfileOutput {
    /// <p>Information about the profile.</p>
    pub profile: ::aws_smithy_types::Blob,
    /// <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    pub content_type: ::std::string::String,
    /// <p>The content encoding of the profile.</p>
    pub content_encoding: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetProfileOutput {
    /// <p>Information about the profile.</p>
    pub fn profile(&self) -> &::aws_smithy_types::Blob {
        &self.profile
    }
    /// <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
    /// <p>The content encoding of the profile.</p>
    pub fn content_encoding(&self) -> ::std::option::Option<&str> {
        self.content_encoding.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetProfileOutput`](crate::operation::get_profile::GetProfileOutput).
    pub fn builder() -> crate::operation::get_profile::builders::GetProfileOutputBuilder {
        crate::operation::get_profile::builders::GetProfileOutputBuilder::default()
    }
}

/// A builder for [`GetProfileOutput`](crate::operation::get_profile::GetProfileOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetProfileOutputBuilder {
    pub(crate) profile: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) content_encoding: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetProfileOutputBuilder {
    /// <p>Information about the profile.</p>
    /// This field is required.
    pub fn profile(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.profile = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the profile.</p>
    pub fn set_profile(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.profile = input;
        self
    }
    /// <p>Information about the profile.</p>
    pub fn get_profile(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.profile
    }
    /// <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The content type of the profile in the payload. It is either <code>application/json</code> or the default <code>application/x-amzn-ion</code>.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The content encoding of the profile.</p>
    pub fn content_encoding(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_encoding = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content encoding of the profile.</p>
    pub fn set_content_encoding(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_encoding = input;
        self
    }
    /// <p>The content encoding of the profile.</p>
    pub fn get_content_encoding(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_encoding
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProfileOutput`](crate::operation::get_profile::GetProfileOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`profile`](crate::operation::get_profile::builders::GetProfileOutputBuilder::profile)
    /// - [`content_type`](crate::operation::get_profile::builders::GetProfileOutputBuilder::content_type)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_profile::GetProfileOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_profile::GetProfileOutput {
            profile: self.profile.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "profile",
                    "profile was not specified but it is required when building GetProfileOutput",
                )
            })?,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building GetProfileOutput",
                )
            })?,
            content_encoding: self.content_encoding,
            _request_id: self._request_id,
        })
    }
}
