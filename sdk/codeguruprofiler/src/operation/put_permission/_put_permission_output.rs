// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure representing the <code>putPermissionResponse</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutPermissionOutput {
    /// <p> The JSON-formatted resource-based policy on the profiling group that includes the added permissions. </p>
    #[doc(hidden)]
    pub policy: std::option::Option<std::string::String>,
    /// <p> A universally unique identifier (UUID) for the revision of the resource-based policy that includes the added permissions. The JSON-formatted policy is in the <code>policy</code> element of the response. </p>
    #[doc(hidden)]
    pub revision_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl PutPermissionOutput {
    /// <p> The JSON-formatted resource-based policy on the profiling group that includes the added permissions. </p>
    pub fn policy(&self) -> std::option::Option<&str> {
        self.policy.as_deref()
    }
    /// <p> A universally unique identifier (UUID) for the revision of the resource-based policy that includes the added permissions. The JSON-formatted policy is in the <code>policy</code> element of the response. </p>
    pub fn revision_id(&self) -> std::option::Option<&str> {
        self.revision_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for PutPermissionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutPermissionOutput {
    /// Creates a new builder-style object to manufacture [`PutPermissionOutput`](crate::operation::put_permission::PutPermissionOutput).
    pub fn builder() -> crate::operation::put_permission::builders::PutPermissionOutputBuilder {
        crate::operation::put_permission::builders::PutPermissionOutputBuilder::default()
    }
}

/// A builder for [`PutPermissionOutput`](crate::operation::put_permission::PutPermissionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutPermissionOutputBuilder {
    pub(crate) policy: std::option::Option<std::string::String>,
    pub(crate) revision_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl PutPermissionOutputBuilder {
    /// <p> The JSON-formatted resource-based policy on the profiling group that includes the added permissions. </p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy = Some(input.into());
        self
    }
    /// <p> The JSON-formatted resource-based policy on the profiling group that includes the added permissions. </p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p> A universally unique identifier (UUID) for the revision of the resource-based policy that includes the added permissions. The JSON-formatted policy is in the <code>policy</code> element of the response. </p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.revision_id = Some(input.into());
        self
    }
    /// <p> A universally unique identifier (UUID) for the revision of the resource-based policy that includes the added permissions. The JSON-formatted policy is in the <code>policy</code> element of the response. </p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutPermissionOutput`](crate::operation::put_permission::PutPermissionOutput).
    pub fn build(self) -> crate::operation::put_permission::PutPermissionOutput {
        crate::operation::put_permission::PutPermissionOutput {
            policy: self.policy,
            revision_id: self.revision_id,
            _request_id: self._request_id,
        }
    }
}
