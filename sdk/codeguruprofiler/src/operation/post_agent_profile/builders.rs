// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::post_agent_profile::_post_agent_profile_output::PostAgentProfileOutputBuilder;

pub use crate::operation::post_agent_profile::_post_agent_profile_input::PostAgentProfileInputBuilder;

impl crate::operation::post_agent_profile::builders::PostAgentProfileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::post_agent_profile::PostAgentProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::post_agent_profile::PostAgentProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.post_agent_profile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PostAgentProfile`.
///
/// <p>Submits profiling data to an aggregated profile of a profiling group. To get an aggregated profile that is created with this profiling data, use <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html"> <code>GetProfile</code> </a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PostAgentProfileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::post_agent_profile::builders::PostAgentProfileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::post_agent_profile::PostAgentProfileOutput,
        crate::operation::post_agent_profile::PostAgentProfileError,
    > for PostAgentProfileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::post_agent_profile::PostAgentProfileOutput,
            crate::operation::post_agent_profile::PostAgentProfileError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PostAgentProfileFluentBuilder {
    /// Creates a new `PostAgentProfile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PostAgentProfile as a reference.
    pub fn as_input(&self) -> &crate::operation::post_agent_profile::builders::PostAgentProfileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::post_agent_profile::PostAgentProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::post_agent_profile::PostAgentProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::post_agent_profile::PostAgentProfile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::post_agent_profile::PostAgentProfile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::post_agent_profile::PostAgentProfileOutput,
        crate::operation::post_agent_profile::PostAgentProfileError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the profiling group with the aggregated profile that receives the submitted profiling data.</p>
    pub fn profiling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profiling_group_name(input.into());
        self
    }
    /// <p>The name of the profiling group with the aggregated profile that receives the submitted profiling data.</p>
    pub fn set_profiling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profiling_group_name(input);
        self
    }
    /// <p>The name of the profiling group with the aggregated profile that receives the submitted profiling data.</p>
    pub fn get_profiling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profiling_group_name()
    }
    /// <p>The submitted profiling data.</p>
    pub fn agent_profile(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.agent_profile(input);
        self
    }
    /// <p>The submitted profiling data.</p>
    pub fn set_agent_profile(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_agent_profile(input);
        self
    }
    /// <p>The submitted profiling data.</p>
    pub fn get_agent_profile(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        self.inner.get_agent_profile()
    }
    /// <p>Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the accidental submission of duplicate profiling data if there are failures and retries.</p>
    pub fn profile_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_token(input.into());
        self
    }
    /// <p>Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the accidental submission of duplicate profiling data if there are failures and retries.</p>
    pub fn set_profile_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profile_token(input);
        self
    }
    /// <p>Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the accidental submission of duplicate profiling data if there are failures and retries.</p>
    pub fn get_profile_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profile_token()
    }
    /// <p>The format of the submitted profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default .</p>
    /// <ul>
    /// <li>
    /// <p><code>application/json</code> — standard JSON format</p></li>
    /// <li>
    /// <p><code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information, see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.</p></li>
    /// </ul>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.content_type(input.into());
        self
    }
    /// <p>The format of the submitted profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default .</p>
    /// <ul>
    /// <li>
    /// <p><code>application/json</code> — standard JSON format</p></li>
    /// <li>
    /// <p><code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information, see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.</p></li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_content_type(input);
        self
    }
    /// <p>The format of the submitted profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default .</p>
    /// <ul>
    /// <li>
    /// <p><code>application/json</code> — standard JSON format</p></li>
    /// <li>
    /// <p><code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information, see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.</p></li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_content_type()
    }
}
