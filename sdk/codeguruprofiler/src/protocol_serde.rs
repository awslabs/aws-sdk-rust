// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_add_notification_channels;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_batch_get_frame_metric_data;

pub(crate) mod shape_configure_agent;

pub(crate) mod shape_create_profiling_group;

pub(crate) mod shape_delete_profiling_group;

pub(crate) mod shape_describe_profiling_group;

pub(crate) mod shape_get_findings_report_account_summary;

pub(crate) mod shape_get_notification_configuration;

pub(crate) mod shape_get_policy;

pub(crate) mod shape_get_profile;

pub(crate) mod shape_get_recommendations;

pub(crate) mod shape_list_findings_reports;

pub(crate) mod shape_list_profile_times;

pub(crate) mod shape_list_profiling_groups;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_post_agent_profile;

pub(crate) mod shape_post_agent_profile_input;

pub(crate) mod shape_put_permission;

pub(crate) mod shape_remove_notification_channel;

pub(crate) mod shape_remove_permission;

pub(crate) mod shape_submit_feedback;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_profiling_group;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_add_notification_channels_input;

pub(crate) mod shape_batch_get_frame_metric_data_input;

pub(crate) mod shape_configure_agent_input;

pub(crate) mod shape_configure_agent_output;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_profiling_group_input;

pub(crate) mod shape_create_profiling_group_output;

pub(crate) mod shape_describe_profiling_group_output;

pub(crate) mod shape_get_profile_output;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_put_permission_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_submit_feedback_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_profiling_group_input;

pub(crate) mod shape_update_profiling_group_output;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_agent_configuration;

pub(crate) mod shape_agent_orchestration_config;

pub(crate) mod shape_anomalies;

pub(crate) mod shape_channel;

pub(crate) mod shape_findings_report_summaries;

pub(crate) mod shape_frame_metric;

pub(crate) mod shape_frame_metric_data;

pub(crate) mod shape_list_of_timestamps;

pub(crate) mod shape_notification_configuration;

pub(crate) mod shape_profile_times;

pub(crate) mod shape_profiling_group_description;

pub(crate) mod shape_profiling_group_descriptions;

pub(crate) mod shape_profiling_group_names;

pub(crate) mod shape_recommendations;

pub(crate) mod shape_tags_map;

pub(crate) mod shape_unprocessed_end_time_map;

pub(crate) mod shape_anomaly;

pub(crate) mod shape_channels;

pub(crate) mod shape_findings_report_summary;

pub(crate) mod shape_frame_metric_datum;

pub(crate) mod shape_profile_time;

pub(crate) mod shape_recommendation;

pub(crate) mod shape_timestamp_structure;

pub(crate) mod shape_agent_parameters;

pub(crate) mod shape_anomaly_instances;

pub(crate) mod shape_frame_metric_values;

pub(crate) mod shape_matches;

pub(crate) mod shape_metric;

pub(crate) mod shape_pattern;

pub(crate) mod shape_profiling_status;

pub(crate) mod shape_aggregated_profile_time;

pub(crate) mod shape_anomaly_instance;

pub(crate) mod shape_event_publishers;

pub(crate) mod shape_match;

pub(crate) mod shape_strings;

pub(crate) mod shape_target_frames;

pub(crate) mod shape_thread_states;

pub(crate) mod shape_target_frame;

pub(crate) mod shape_user_feedback;
