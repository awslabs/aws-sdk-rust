// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteClusterPolicyInput {
    /// <p>The ID of the cluster.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The expected version of the policy to delete. This parameter ensures that you're deleting the correct version of the policy and helps prevent accidental deletions.</p>
    pub expected_policy_version: ::std::option::Option<::std::string::String>,
    /// <p>Idempotency token so a request is only processed once.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteClusterPolicyInput {
    /// <p>The ID of the cluster.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The expected version of the policy to delete. This parameter ensures that you're deleting the correct version of the policy and helps prevent accidental deletions.</p>
    pub fn expected_policy_version(&self) -> ::std::option::Option<&str> {
        self.expected_policy_version.as_deref()
    }
    /// <p>Idempotency token so a request is only processed once.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl DeleteClusterPolicyInput {
    /// Creates a new builder-style object to manufacture [`DeleteClusterPolicyInput`](crate::operation::delete_cluster_policy::DeleteClusterPolicyInput).
    pub fn builder() -> crate::operation::delete_cluster_policy::builders::DeleteClusterPolicyInputBuilder {
        crate::operation::delete_cluster_policy::builders::DeleteClusterPolicyInputBuilder::default()
    }
}

/// A builder for [`DeleteClusterPolicyInput`](crate::operation::delete_cluster_policy::DeleteClusterPolicyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteClusterPolicyInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) expected_policy_version: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteClusterPolicyInputBuilder {
    /// <p>The ID of the cluster.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the cluster.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the cluster.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The expected version of the policy to delete. This parameter ensures that you're deleting the correct version of the policy and helps prevent accidental deletions.</p>
    pub fn expected_policy_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_policy_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected version of the policy to delete. This parameter ensures that you're deleting the correct version of the policy and helps prevent accidental deletions.</p>
    pub fn set_expected_policy_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_policy_version = input;
        self
    }
    /// <p>The expected version of the policy to delete. This parameter ensures that you're deleting the correct version of the policy and helps prevent accidental deletions.</p>
    pub fn get_expected_policy_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_policy_version
    }
    /// <p>Idempotency token so a request is only processed once.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Idempotency token so a request is only processed once.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Idempotency token so a request is only processed once.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`DeleteClusterPolicyInput`](crate::operation::delete_cluster_policy::DeleteClusterPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_cluster_policy::DeleteClusterPolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_cluster_policy::DeleteClusterPolicyInput {
            identifier: self.identifier,
            expected_policy_version: self.expected_policy_version,
            client_token: self.client_token,
        })
    }
}
