// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_cluster::_update_cluster_output::UpdateClusterOutputBuilder;

pub use crate::operation::update_cluster::_update_cluster_input::UpdateClusterInputBuilder;

impl crate::operation::update_cluster::builders::UpdateClusterInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_cluster::UpdateClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cluster::UpdateClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_cluster();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateCluster`.
///
/// <p>The <i>UpdateCluster</i> API allows you to modify both single-Region and multi-Region cluster configurations. With the <i>multiRegionProperties</i> parameter, you can add or modify witness Region support and manage peer relationships with clusters in other Regions.</p><note>
/// <p>Note that updating multi-Region clusters requires additional IAM permissions beyond those needed for standard cluster updates, as detailed in the Permissions section.</p>
/// </note>
/// <p><b>Required permissions</b></p>
/// <dl>
/// <dt>
/// dsql:UpdateCluster
/// </dt>
/// <dd>
/// <p>Permission to update a DSQL cluster.</p>
/// <p>Resources: <code>arn:aws:dsql:<i>region</i>:<i>account-id</i>:cluster/<i>cluster-id</i> </code></p>
/// </dd>
/// </dl>
/// <dl>
/// <dt>
/// dsql:PutMultiRegionProperties
/// </dt>
/// <dd>
/// <p>Permission to configure multi-Region properties for a cluster.</p>
/// <p>Resources: <code>arn:aws:dsql:<i>region</i>:<i>account-id</i>:cluster/<i>cluster-id</i> </code></p>
/// </dd>
/// </dl>
/// <dl>
/// <dt>
/// dsql:GetCluster
/// </dt>
/// <dd>
/// <p>Permission to retrieve cluster information.</p>
/// <p>Resources: <code>arn:aws:dsql:<i>region</i>:<i>account-id</i>:cluster/<i>cluster-id</i> </code></p>
/// </dd>
/// <dt>
/// dsql:AddPeerCluster
/// </dt>
/// <dd>
/// <p>Permission to add peer clusters.</p>
/// <p>Resources:</p>
/// <ul>
/// <li>
/// <p>Local cluster: <code>arn:aws:dsql:<i>region</i>:<i>account-id</i>:cluster/<i>cluster-id</i> </code></p></li>
/// <li>
/// <p>Each peer cluster: exact ARN of each specified peer cluster</p></li>
/// </ul>
/// </dd>
/// <dt>
/// dsql:RemovePeerCluster
/// </dt>
/// <dd>
/// <p>Permission to remove peer clusters. The <i>dsql:RemovePeerCluster</i> permission uses a wildcard ARN pattern to simplify permission management during updates.</p>
/// <p>Resources: <code>arn:aws:dsql:*:<i>account-id</i>:cluster/*</code></p>
/// </dd>
/// </dl>
/// <dl>
/// <dt>
/// dsql:PutWitnessRegion
/// </dt>
/// <dd>
/// <p>Permission to set a witness Region.</p>
/// <p>Resources: <code>arn:aws:dsql:<i>region</i>:<i>account-id</i>:cluster/<i>cluster-id</i> </code></p>
/// <p>Condition Keys: dsql:WitnessRegion (matching the specified witness Region)</p>
/// <p><b>This permission is checked both in the cluster Region and in the witness Region.</b></p>
/// </dd>
/// </dl><important>
/// <ul>
/// <li>
/// <p>The witness region specified in <code>multiRegionProperties.witnessRegion</code> cannot be the same as the cluster's Region.</p></li>
/// <li>
/// <p>When updating clusters with peer relationships, permissions are checked for both adding and removing peers.</p></li>
/// <li>
/// <p>The <code>dsql:RemovePeerCluster</code> permission uses a wildcard ARN pattern to simplify permission management during updates.</p></li>
/// </ul>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateClusterFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_cluster::builders::UpdateClusterInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_cluster::UpdateClusterOutput,
        crate::operation::update_cluster::UpdateClusterError,
    > for UpdateClusterFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_cluster::UpdateClusterOutput,
            crate::operation::update_cluster::UpdateClusterError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateClusterFluentBuilder {
    /// Creates a new `UpdateClusterFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateCluster as a reference.
    pub fn as_input(&self) -> &crate::operation::update_cluster::builders::UpdateClusterInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_cluster::UpdateClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cluster::UpdateClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_cluster::UpdateCluster::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_cluster::UpdateCluster::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_cluster::UpdateClusterOutput,
        crate::operation::update_cluster::UpdateClusterError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the cluster you want to update.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>The ID of the cluster you want to update.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>The ID of the cluster you want to update.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_identifier()
    }
    /// <p>Specifies whether to enable deletion protection in your cluster.</p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.deletion_protection_enabled(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection in your cluster.</p>
    pub fn set_deletion_protection_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deletion_protection_enabled(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection in your cluster.</p>
    pub fn get_deletion_protection_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_deletion_protection_enabled()
    }
    /// <p>The KMS key that encrypts and protects the data on your cluster. You can specify the ARN, ID, or alias of an existing key or have Amazon Web Services create a default key for you.</p>
    pub fn kms_encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_encryption_key(input.into());
        self
    }
    /// <p>The KMS key that encrypts and protects the data on your cluster. You can specify the ARN, ID, or alias of an existing key or have Amazon Web Services create a default key for you.</p>
    pub fn set_kms_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_encryption_key(input);
        self
    }
    /// <p>The KMS key that encrypts and protects the data on your cluster. You can specify the ARN, ID, or alias of an existing key or have Amazon Web Services create a default key for you.</p>
    pub fn get_kms_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_encryption_key()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The new multi-Region cluster configuration settings to be applied during an update operation.</p>
    pub fn multi_region_properties(mut self, input: crate::types::MultiRegionProperties) -> Self {
        self.inner = self.inner.multi_region_properties(input);
        self
    }
    /// <p>The new multi-Region cluster configuration settings to be applied during an update operation.</p>
    pub fn set_multi_region_properties(mut self, input: ::std::option::Option<crate::types::MultiRegionProperties>) -> Self {
        self.inner = self.inner.set_multi_region_properties(input);
        self
    }
    /// <p>The new multi-Region cluster configuration settings to be applied during an update operation.</p>
    pub fn get_multi_region_properties(&self) -> &::std::option::Option<crate::types::MultiRegionProperties> {
        self.inner.get_multi_region_properties()
    }
}
