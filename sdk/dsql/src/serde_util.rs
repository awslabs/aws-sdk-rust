// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cluster_output_output_correct_errors(
    mut builder: crate::operation::create_cluster::builders::CreateClusterOutputBuilder,
) -> crate::operation::create_cluster::builders::CreateClusterOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_cluster_output_output_correct_errors(
    mut builder: crate::operation::delete_cluster::builders::DeleteClusterOutputBuilder,
) -> crate::operation::delete_cluster::builders::DeleteClusterOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_cluster_policy_output_output_correct_errors(
    mut builder: crate::operation::delete_cluster_policy::builders::DeleteClusterPolicyOutputBuilder,
) -> crate::operation::delete_cluster_policy::builders::DeleteClusterPolicyOutputBuilder {
    if builder.policy_version.is_none() {
        builder.policy_version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_cluster_output_output_correct_errors(
    mut builder: crate::operation::get_cluster::builders::GetClusterOutputBuilder,
) -> crate::operation::get_cluster::builders::GetClusterOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn get_cluster_policy_output_output_correct_errors(
    mut builder: crate::operation::get_cluster_policy::builders::GetClusterPolicyOutputBuilder,
) -> crate::operation::get_cluster_policy::builders::GetClusterPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    if builder.policy_version.is_none() {
        builder.policy_version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_vpc_endpoint_service_name_output_output_correct_errors(
    mut builder: crate::operation::get_vpc_endpoint_service_name::builders::GetVpcEndpointServiceNameOutputBuilder,
) -> crate::operation::get_vpc_endpoint_service_name::builders::GetVpcEndpointServiceNameOutputBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_clusters_output_output_correct_errors(
    mut builder: crate::operation::list_clusters::builders::ListClustersOutputBuilder,
) -> crate::operation::list_clusters::builders::ListClustersOutputBuilder {
    if builder.clusters.is_none() {
        builder.clusters = Some(Default::default())
    }
    builder
}

pub(crate) fn put_cluster_policy_output_output_correct_errors(
    mut builder: crate::operation::put_cluster_policy::builders::PutClusterPolicyOutputBuilder,
) -> crate::operation::put_cluster_policy::builders::PutClusterPolicyOutputBuilder {
    if builder.policy_version.is_none() {
        builder.policy_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_cluster_output_output_correct_errors(
    mut builder: crate::operation::update_cluster::builders::UpdateClusterOutputBuilder,
) -> crate::operation::update_cluster::builders::UpdateClusterOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn encryption_details_correct_errors(
    mut builder: crate::types::builders::EncryptionDetailsBuilder,
) -> crate::types::builders::EncryptionDetailsBuilder {
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    if builder.encryption_status.is_none() {
        builder.encryption_status = "no value was set".parse::<crate::types::EncryptionStatus>().ok()
    }
    builder
}

pub(crate) fn cluster_summary_correct_errors(
    mut builder: crate::types::builders::ClusterSummaryBuilder,
) -> crate::types::builders::ClusterSummaryBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
