// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeApplicationOutput {
    /// <p>The unique Id of the web application.</p>
    pub application_id: ::std::string::String,
    /// <p>The ARN of the web application.</p>
    pub application_arn: ::std::string::String,
    /// <p>The name of the web application.</p>
    pub application_name: ::std::string::String,
    /// <p>An optional description of the web application.</p>
    pub application_description: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the web application.</p>
    pub application_url: ::std::string::String,
    /// <p>The current state of the web application.</p>
    pub application_state: crate::types::ApplicationState,
    /// <p>The date (in Unix epoch time) when the application was created.</p>
    pub application_creation_date: i64,
    /// <p>The date (in Unix epoch time) when the application was last updated.</p>
    pub application_last_update_date: i64,
    /// <p>The ARN of the role that the web application assumes when it interacts with AWS IoT Core.</p>
    pub role_arn: ::std::string::String,
    /// <p>The Id of the single sign-on client that you use to authenticate and authorize users on the web application.</p>
    pub sso_client_id: ::std::option::Option<::std::string::String>,
    /// <p>A message indicating why the <code>DescribeApplication</code> API failed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>A set of key/value pairs that you can use to manage the web application resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeApplicationOutput {
    /// <p>The unique Id of the web application.</p>
    pub fn application_id(&self) -> &str {
        use std::ops::Deref;
        self.application_id.deref()
    }
    /// <p>The ARN of the web application.</p>
    pub fn application_arn(&self) -> &str {
        use std::ops::Deref;
        self.application_arn.deref()
    }
    /// <p>The name of the web application.</p>
    pub fn application_name(&self) -> &str {
        use std::ops::Deref;
        self.application_name.deref()
    }
    /// <p>An optional description of the web application.</p>
    pub fn application_description(&self) -> ::std::option::Option<&str> {
        self.application_description.as_deref()
    }
    /// <p>The URL of the web application.</p>
    pub fn application_url(&self) -> &str {
        use std::ops::Deref;
        self.application_url.deref()
    }
    /// <p>The current state of the web application.</p>
    pub fn application_state(&self) -> &crate::types::ApplicationState {
        &self.application_state
    }
    /// <p>The date (in Unix epoch time) when the application was created.</p>
    pub fn application_creation_date(&self) -> i64 {
        self.application_creation_date
    }
    /// <p>The date (in Unix epoch time) when the application was last updated.</p>
    pub fn application_last_update_date(&self) -> i64 {
        self.application_last_update_date
    }
    /// <p>The ARN of the role that the web application assumes when it interacts with AWS IoT Core.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The Id of the single sign-on client that you use to authenticate and authorize users on the web application.</p>
    pub fn sso_client_id(&self) -> ::std::option::Option<&str> {
        self.sso_client_id.as_deref()
    }
    /// <p>A message indicating why the <code>DescribeApplication</code> API failed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>A set of key/value pairs that you can use to manage the web application resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationOutput`](crate::operation::describe_application::DescribeApplicationOutput).
    pub fn builder() -> crate::operation::describe_application::builders::DescribeApplicationOutputBuilder {
        crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::default()
    }
}

/// A builder for [`DescribeApplicationOutput`](crate::operation::describe_application::DescribeApplicationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeApplicationOutputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) application_description: ::std::option::Option<::std::string::String>,
    pub(crate) application_url: ::std::option::Option<::std::string::String>,
    pub(crate) application_state: ::std::option::Option<crate::types::ApplicationState>,
    pub(crate) application_creation_date: ::std::option::Option<i64>,
    pub(crate) application_last_update_date: ::std::option::Option<i64>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sso_client_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeApplicationOutputBuilder {
    /// <p>The unique Id of the web application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Id of the web application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique Id of the web application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The ARN of the web application.</p>
    /// This field is required.
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the web application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the web application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The name of the web application.</p>
    /// This field is required.
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the web application.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the web application.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>An optional description of the web application.</p>
    pub fn application_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description of the web application.</p>
    pub fn set_application_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_description = input;
        self
    }
    /// <p>An optional description of the web application.</p>
    pub fn get_application_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_description
    }
    /// <p>The URL of the web application.</p>
    /// This field is required.
    pub fn application_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the web application.</p>
    pub fn set_application_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_url = input;
        self
    }
    /// <p>The URL of the web application.</p>
    pub fn get_application_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_url
    }
    /// <p>The current state of the web application.</p>
    /// This field is required.
    pub fn application_state(mut self, input: crate::types::ApplicationState) -> Self {
        self.application_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the web application.</p>
    pub fn set_application_state(mut self, input: ::std::option::Option<crate::types::ApplicationState>) -> Self {
        self.application_state = input;
        self
    }
    /// <p>The current state of the web application.</p>
    pub fn get_application_state(&self) -> &::std::option::Option<crate::types::ApplicationState> {
        &self.application_state
    }
    /// <p>The date (in Unix epoch time) when the application was created.</p>
    /// This field is required.
    pub fn application_creation_date(mut self, input: i64) -> Self {
        self.application_creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date (in Unix epoch time) when the application was created.</p>
    pub fn set_application_creation_date(mut self, input: ::std::option::Option<i64>) -> Self {
        self.application_creation_date = input;
        self
    }
    /// <p>The date (in Unix epoch time) when the application was created.</p>
    pub fn get_application_creation_date(&self) -> &::std::option::Option<i64> {
        &self.application_creation_date
    }
    /// <p>The date (in Unix epoch time) when the application was last updated.</p>
    /// This field is required.
    pub fn application_last_update_date(mut self, input: i64) -> Self {
        self.application_last_update_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date (in Unix epoch time) when the application was last updated.</p>
    pub fn set_application_last_update_date(mut self, input: ::std::option::Option<i64>) -> Self {
        self.application_last_update_date = input;
        self
    }
    /// <p>The date (in Unix epoch time) when the application was last updated.</p>
    pub fn get_application_last_update_date(&self) -> &::std::option::Option<i64> {
        &self.application_last_update_date
    }
    /// <p>The ARN of the role that the web application assumes when it interacts with AWS IoT Core.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that the web application assumes when it interacts with AWS IoT Core.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role that the web application assumes when it interacts with AWS IoT Core.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The Id of the single sign-on client that you use to authenticate and authorize users on the web application.</p>
    pub fn sso_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sso_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Id of the single sign-on client that you use to authenticate and authorize users on the web application.</p>
    pub fn set_sso_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sso_client_id = input;
        self
    }
    /// <p>The Id of the single sign-on client that you use to authenticate and authorize users on the web application.</p>
    pub fn get_sso_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sso_client_id
    }
    /// <p>A message indicating why the <code>DescribeApplication</code> API failed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message indicating why the <code>DescribeApplication</code> API failed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>A message indicating why the <code>DescribeApplication</code> API failed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of key/value pairs that you can use to manage the web application resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key/value pairs that you can use to manage the web application resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of key/value pairs that you can use to manage the web application resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeApplicationOutput`](crate::operation::describe_application::DescribeApplicationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_id`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::application_id)
    /// - [`application_arn`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::application_arn)
    /// - [`application_name`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::application_name)
    /// - [`application_url`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::application_url)
    /// - [`application_state`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::application_state)
    /// - [`role_arn`](crate::operation::describe_application::builders::DescribeApplicationOutputBuilder::role_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_application::DescribeApplicationOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_application::DescribeApplicationOutput {
            application_id: self.application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_id",
                    "application_id was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            application_arn: self.application_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_arn",
                    "application_arn was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            application_name: self.application_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_name",
                    "application_name was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            application_description: self.application_description,
            application_url: self.application_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_url",
                    "application_url was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            application_state: self.application_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_state",
                    "application_state was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            application_creation_date: self.application_creation_date.unwrap_or_default(),
            application_last_update_date: self.application_last_update_date.unwrap_or_default(),
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building DescribeApplicationOutput",
                )
            })?,
            sso_client_id: self.sso_client_id,
            error_message: self.error_message,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
