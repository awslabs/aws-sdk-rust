// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>Multiple instances of the same request have been made simultaneously.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>The request exceeds the resource limit.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>One or more of the resources in the request does not exist in the system.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The resource that you want to tag couldn't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::types::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The number of customer requests exceeds the request rate limit.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Too many tags were added to the specified resource.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>The user isn't authorized to request a resource.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The request was well-formed but was unable to be followed due to semantic errors.</p>
    UnprocessableEntityException(crate::types::error::UnprocessableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_create_attendee::BatchCreateAttendeeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_create_attendee::BatchCreateAttendeeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_create_attendee::BatchCreateAttendeeError> for Error {
    fn from(err: crate::operation::batch_create_attendee::BatchCreateAttendeeError) -> Self {
        match err {
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::batch_create_attendee::BatchCreateAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError> for Error {
    fn from(err: crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError) -> Self {
        match err {
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::batch_update_attendee_capabilities_except::BatchUpdateAttendeeCapabilitiesExceptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_attendee::CreateAttendeeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_attendee::CreateAttendeeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_attendee::CreateAttendeeError> for Error {
    fn from(err: crate::operation::create_attendee::CreateAttendeeError) -> Self {
        match err {
            crate::operation::create_attendee::CreateAttendeeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_attendee::CreateAttendeeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_attendee::CreateAttendeeError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_attendee::CreateAttendeeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_attendee::CreateAttendeeError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_attendee::CreateAttendeeError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_attendee::CreateAttendeeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_attendee::CreateAttendeeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_attendee::CreateAttendeeError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::create_attendee::CreateAttendeeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_meeting::CreateMeetingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_meeting::CreateMeetingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_meeting::CreateMeetingError> for Error {
    fn from(err: crate::operation::create_meeting::CreateMeetingError) -> Self {
        match err {
            crate::operation::create_meeting::CreateMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_meeting::CreateMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_meeting::CreateMeetingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_meeting::CreateMeetingError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::create_meeting::CreateMeetingError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::create_meeting::CreateMeetingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_meeting::CreateMeetingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_meeting::CreateMeetingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError>
    for Error
{
    fn from(
        err: crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError,
    ) -> Self {
        match err {
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_meeting_with_attendees::CreateMeetingWithAttendeesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_attendee::DeleteAttendeeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_attendee::DeleteAttendeeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_attendee::DeleteAttendeeError> for Error {
    fn from(err: crate::operation::delete_attendee::DeleteAttendeeError) -> Self {
        match err {
            crate::operation::delete_attendee::DeleteAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_attendee::DeleteAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_attendee::DeleteAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_attendee::DeleteAttendeeError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::delete_attendee::DeleteAttendeeError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_attendee::DeleteAttendeeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_attendee::DeleteAttendeeError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::delete_attendee::DeleteAttendeeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_meeting::DeleteMeetingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_meeting::DeleteMeetingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_meeting::DeleteMeetingError> for Error {
    fn from(err: crate::operation::delete_meeting::DeleteMeetingError) -> Self {
        match err {
            crate::operation::delete_meeting::DeleteMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_meeting::DeleteMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_meeting::DeleteMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_meeting::DeleteMeetingError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::delete_meeting::DeleteMeetingError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_meeting::DeleteMeetingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_meeting::DeleteMeetingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_meeting::DeleteMeetingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_attendee::GetAttendeeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_attendee::GetAttendeeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_attendee::GetAttendeeError> for Error {
    fn from(err: crate::operation::get_attendee::GetAttendeeError) -> Self {
        match err {
            crate::operation::get_attendee::GetAttendeeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::get_attendee::GetAttendeeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_attendee::GetAttendeeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_meeting::GetMeetingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_meeting::GetMeetingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_meeting::GetMeetingError> for Error {
    fn from(err: crate::operation::get_meeting::GetMeetingError) -> Self {
        match err {
            crate::operation::get_meeting::GetMeetingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_meeting::GetMeetingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_attendees::ListAttendeesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_attendees::ListAttendeesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_attendees::ListAttendeesError> for Error {
    fn from(err: crate::operation::list_attendees::ListAttendeesError) -> Self {
        match err {
            crate::operation::list_attendees::ListAttendeesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_attendees::ListAttendeesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_attendees::ListAttendeesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_attendees::ListAttendeesError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::list_attendees::ListAttendeesError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::list_attendees::ListAttendeesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_attendees::ListAttendeesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_attendees::ListAttendeesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_meeting_transcription::StartMeetingTranscriptionError> for Error {
    fn from(
        err: crate::operation::start_meeting_transcription::StartMeetingTranscriptionError,
    ) -> Self {
        match err {
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::start_meeting_transcription::StartMeetingTranscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError> for Error {
    fn from(
        err: crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError,
    ) -> Self {
        match err {
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::stop_meeting_transcription::StopMeetingTranscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError>
    for Error
{
    fn from(
        err: crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError,
    ) -> Self {
        match err {
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_attendee_capabilities::UpdateAttendeeCapabilitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
