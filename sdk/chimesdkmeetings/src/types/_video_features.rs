// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The video features set for the meeting. Applies to all attendees.</p><note>
/// <p>If you specify <code>MeetingFeatures:Video:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Video</code> will be rejected with <code>ValidationError 400</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoFeatures {
    /// <p>The maximum video resolution for the meeting. Applies to all attendees.</p><note>
    /// <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size limit of 250 attendees.</p>
    /// </note>
    pub max_resolution: ::std::option::Option<crate::types::VideoResolution>,
}
impl VideoFeatures {
    /// <p>The maximum video resolution for the meeting. Applies to all attendees.</p><note>
    /// <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size limit of 250 attendees.</p>
    /// </note>
    pub fn max_resolution(&self) -> ::std::option::Option<&crate::types::VideoResolution> {
        self.max_resolution.as_ref()
    }
}
impl VideoFeatures {
    /// Creates a new builder-style object to manufacture [`VideoFeatures`](crate::types::VideoFeatures).
    pub fn builder() -> crate::types::builders::VideoFeaturesBuilder {
        crate::types::builders::VideoFeaturesBuilder::default()
    }
}

/// A builder for [`VideoFeatures`](crate::types::VideoFeatures).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VideoFeaturesBuilder {
    pub(crate) max_resolution: ::std::option::Option<crate::types::VideoResolution>,
}
impl VideoFeaturesBuilder {
    /// <p>The maximum video resolution for the meeting. Applies to all attendees.</p><note>
    /// <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size limit of 250 attendees.</p>
    /// </note>
    pub fn max_resolution(mut self, input: crate::types::VideoResolution) -> Self {
        self.max_resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum video resolution for the meeting. Applies to all attendees.</p><note>
    /// <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size limit of 250 attendees.</p>
    /// </note>
    pub fn set_max_resolution(mut self, input: ::std::option::Option<crate::types::VideoResolution>) -> Self {
        self.max_resolution = input;
        self
    }
    /// <p>The maximum video resolution for the meeting. Applies to all attendees.</p><note>
    /// <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size limit of 250 attendees.</p>
    /// </note>
    pub fn get_max_resolution(&self) -> &::std::option::Option<crate::types::VideoResolution> {
        &self.max_resolution
    }
    /// Consumes the builder and constructs a [`VideoFeatures`](crate::types::VideoFeatures).
    pub fn build(self) -> crate::types::VideoFeatures {
        crate::types::VideoFeatures {
            max_resolution: self.max_resolution,
        }
    }
}
