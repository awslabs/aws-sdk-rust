// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for resource targets to receive notifications when meeting and attendee events occur.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotificationsConfiguration {
    /// <p>The ARN of the AWS Lambda function in the notifications configuration.</p>
    #[doc(hidden)]
    pub lambda_function_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the SNS topic.</p>
    #[doc(hidden)]
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the SQS queue.</p>
    #[doc(hidden)]
    pub sqs_queue_arn: std::option::Option<std::string::String>,
}
impl NotificationsConfiguration {
    /// <p>The ARN of the AWS Lambda function in the notifications configuration.</p>
    pub fn lambda_function_arn(&self) -> std::option::Option<&str> {
        self.lambda_function_arn.as_deref()
    }
    /// <p>The ARN of the SNS topic.</p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The ARN of the SQS queue.</p>
    pub fn sqs_queue_arn(&self) -> std::option::Option<&str> {
        self.sqs_queue_arn.as_deref()
    }
}
impl std::fmt::Debug for NotificationsConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationsConfiguration");
        formatter.field("lambda_function_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sqs_queue_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl NotificationsConfiguration {
    /// Creates a new builder-style object to manufacture [`NotificationsConfiguration`](crate::types::NotificationsConfiguration).
    pub fn builder() -> crate::types::builders::NotificationsConfigurationBuilder {
        crate::types::builders::NotificationsConfigurationBuilder::default()
    }
}

/// A builder for [`NotificationsConfiguration`](crate::types::NotificationsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct NotificationsConfigurationBuilder {
    pub(crate) lambda_function_arn: std::option::Option<std::string::String>,
    pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
    pub(crate) sqs_queue_arn: std::option::Option<std::string::String>,
}
impl NotificationsConfigurationBuilder {
    /// <p>The ARN of the AWS Lambda function in the notifications configuration.</p>
    pub fn lambda_function_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_function_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the AWS Lambda function in the notifications configuration.</p>
    pub fn set_lambda_function_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// <p>The ARN of the SNS topic.</p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the SNS topic.</p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// <p>The ARN of the SQS queue.</p>
    pub fn sqs_queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sqs_queue_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the SQS queue.</p>
    pub fn set_sqs_queue_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sqs_queue_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationsConfiguration`](crate::types::NotificationsConfiguration).
    pub fn build(self) -> crate::types::NotificationsConfiguration {
        crate::types::NotificationsConfiguration {
            lambda_function_arn: self.lambda_function_arn,
            sns_topic_arn: self.sns_topic_arn,
            sqs_queue_arn: self.sqs_queue_arn,
        }
    }
}
impl std::fmt::Debug for NotificationsConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationsConfigurationBuilder");
        formatter.field("lambda_function_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("sqs_queue_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
