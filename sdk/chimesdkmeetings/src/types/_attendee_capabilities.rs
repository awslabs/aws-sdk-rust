// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The media capabilities of an attendee: audio, video, or content. </p> <note>
/// <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p>
/// </note>
/// <p>When using capabilities, be aware of these corner cases:</p>
/// <ul>
/// <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li>
/// <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li>
/// <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendess can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttendeeCapabilities {
    /// <p>The audio capability assigned to an attendee.</p>
    #[doc(hidden)]
    pub audio: std::option::Option<crate::types::MediaCapabilities>,
    /// <p>The video capability assigned to an attendee.</p>
    #[doc(hidden)]
    pub video: std::option::Option<crate::types::MediaCapabilities>,
    /// <p>The content capability assigned to an attendee.</p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::MediaCapabilities>,
}
impl AttendeeCapabilities {
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn audio(&self) -> std::option::Option<&crate::types::MediaCapabilities> {
        self.audio.as_ref()
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn video(&self) -> std::option::Option<&crate::types::MediaCapabilities> {
        self.video.as_ref()
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn content(&self) -> std::option::Option<&crate::types::MediaCapabilities> {
        self.content.as_ref()
    }
}
impl AttendeeCapabilities {
    /// Creates a new builder-style object to manufacture [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
    pub fn builder() -> crate::types::builders::AttendeeCapabilitiesBuilder {
        crate::types::builders::AttendeeCapabilitiesBuilder::default()
    }
}

/// A builder for [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttendeeCapabilitiesBuilder {
    pub(crate) audio: std::option::Option<crate::types::MediaCapabilities>,
    pub(crate) video: std::option::Option<crate::types::MediaCapabilities>,
    pub(crate) content: std::option::Option<crate::types::MediaCapabilities>,
}
impl AttendeeCapabilitiesBuilder {
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn audio(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.audio = Some(input);
        self
    }
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn set_audio(
        mut self,
        input: std::option::Option<crate::types::MediaCapabilities>,
    ) -> Self {
        self.audio = input;
        self
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn video(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.video = Some(input);
        self
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn set_video(
        mut self,
        input: std::option::Option<crate::types::MediaCapabilities>,
    ) -> Self {
        self.video = input;
        self
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn content(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<crate::types::MediaCapabilities>,
    ) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
    pub fn build(self) -> crate::types::AttendeeCapabilities {
        crate::types::AttendeeCapabilities {
            audio: self.audio,
            video: self.video,
            content: self.content,
        }
    }
}
