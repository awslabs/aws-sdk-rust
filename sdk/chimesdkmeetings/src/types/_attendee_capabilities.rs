// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The media capabilities of an attendee: audio, video, or content.</p><note>
/// <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information, refer to and .</p>
/// </note>
/// <p>When using capabilities, be aware of these corner cases:</p>
/// <ul>
/// <li>
/// <p>If you specify <code>MeetingFeatures:Video:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Video</code> will be rejected with <code>ValidationError 400</code>.</p></li>
/// <li>
/// <p>If you specify <code>MeetingFeatures:Content:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Content</code> will be rejected with <code>ValidationError 400</code>.</p></li>
/// <li>
/// <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p></li>
/// <li>
/// <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and an attendee unmutes their microphone, audio flows from the attendee to the other meeting participants.</p></li>
/// <li>
/// <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and the attendee turns on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttendeeCapabilities {
    /// <p>The audio capability assigned to an attendee.</p>
    pub audio: crate::types::MediaCapabilities,
    /// <p>The video capability assigned to an attendee.</p>
    pub video: crate::types::MediaCapabilities,
    /// <p>The content capability assigned to an attendee.</p>
    pub content: crate::types::MediaCapabilities,
}
impl AttendeeCapabilities {
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn audio(&self) -> &crate::types::MediaCapabilities {
        &self.audio
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn video(&self) -> &crate::types::MediaCapabilities {
        &self.video
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn content(&self) -> &crate::types::MediaCapabilities {
        &self.content
    }
}
impl AttendeeCapabilities {
    /// Creates a new builder-style object to manufacture [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
    pub fn builder() -> crate::types::builders::AttendeeCapabilitiesBuilder {
        crate::types::builders::AttendeeCapabilitiesBuilder::default()
    }
}

/// A builder for [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttendeeCapabilitiesBuilder {
    pub(crate) audio: ::std::option::Option<crate::types::MediaCapabilities>,
    pub(crate) video: ::std::option::Option<crate::types::MediaCapabilities>,
    pub(crate) content: ::std::option::Option<crate::types::MediaCapabilities>,
}
impl AttendeeCapabilitiesBuilder {
    /// <p>The audio capability assigned to an attendee.</p>
    /// This field is required.
    pub fn audio(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.audio = ::std::option::Option::Some(input);
        self
    }
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn set_audio(mut self, input: ::std::option::Option<crate::types::MediaCapabilities>) -> Self {
        self.audio = input;
        self
    }
    /// <p>The audio capability assigned to an attendee.</p>
    pub fn get_audio(&self) -> &::std::option::Option<crate::types::MediaCapabilities> {
        &self.audio
    }
    /// <p>The video capability assigned to an attendee.</p>
    /// This field is required.
    pub fn video(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.video = ::std::option::Option::Some(input);
        self
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn set_video(mut self, input: ::std::option::Option<crate::types::MediaCapabilities>) -> Self {
        self.video = input;
        self
    }
    /// <p>The video capability assigned to an attendee.</p>
    pub fn get_video(&self) -> &::std::option::Option<crate::types::MediaCapabilities> {
        &self.video
    }
    /// <p>The content capability assigned to an attendee.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::MediaCapabilities) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::MediaCapabilities>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content capability assigned to an attendee.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::MediaCapabilities> {
        &self.content
    }
    /// Consumes the builder and constructs a [`AttendeeCapabilities`](crate::types::AttendeeCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`audio`](crate::types::builders::AttendeeCapabilitiesBuilder::audio)
    /// - [`video`](crate::types::builders::AttendeeCapabilitiesBuilder::video)
    /// - [`content`](crate::types::builders::AttendeeCapabilitiesBuilder::content)
    pub fn build(self) -> ::std::result::Result<crate::types::AttendeeCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AttendeeCapabilities {
            audio: self.audio.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audio",
                    "audio was not specified but it is required when building AttendeeCapabilities",
                )
            })?,
            video: self.video.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "video",
                    "video was not specified but it is required when building AttendeeCapabilities",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building AttendeeCapabilities",
                )
            })?,
        })
    }
}
