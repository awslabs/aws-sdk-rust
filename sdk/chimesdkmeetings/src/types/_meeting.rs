// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A meeting created using the Amazon Chime SDK.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Meeting {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub meeting_id: ::std::option::Option<::std::string::String>,
    /// <p>Reserved.</p>
    pub meeting_host_id: ::std::option::Option<::std::string::String>,
    /// <p>The external meeting ID.</p>
    /// <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p>
    /// <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
    pub external_meeting_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.</p>
    /// <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
    pub media_region: ::std::option::Option<::std::string::String>,
    /// <p>The media placement for the meeting.</p>
    pub media_placement: ::std::option::Option<crate::types::MediaPlacement>,
    /// <p>The features available to a meeting, such as echo reduction.</p>
    pub meeting_features: ::std::option::Option<crate::types::MeetingFeaturesConfiguration>,
    /// <p>When specified, replicates the media from the primary meeting to this meeting.</p>
    pub primary_meeting_id: ::std::option::Option<::std::string::String>,
    /// <p>Array of strings.</p>
    pub tenant_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ARN of the meeting.</p>
    pub meeting_arn: ::std::option::Option<::std::string::String>,
}
impl Meeting {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn meeting_id(&self) -> ::std::option::Option<&str> {
        self.meeting_id.as_deref()
    }
    /// <p>Reserved.</p>
    pub fn meeting_host_id(&self) -> ::std::option::Option<&str> {
        self.meeting_host_id.as_deref()
    }
    /// <p>The external meeting ID.</p>
    /// <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p>
    /// <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
    pub fn external_meeting_id(&self) -> ::std::option::Option<&str> {
        self.external_meeting_id.as_deref()
    }
    /// <p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.</p>
    /// <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
    pub fn media_region(&self) -> ::std::option::Option<&str> {
        self.media_region.as_deref()
    }
    /// <p>The media placement for the meeting.</p>
    pub fn media_placement(&self) -> ::std::option::Option<&crate::types::MediaPlacement> {
        self.media_placement.as_ref()
    }
    /// <p>The features available to a meeting, such as echo reduction.</p>
    pub fn meeting_features(&self) -> ::std::option::Option<&crate::types::MeetingFeaturesConfiguration> {
        self.meeting_features.as_ref()
    }
    /// <p>When specified, replicates the media from the primary meeting to this meeting.</p>
    pub fn primary_meeting_id(&self) -> ::std::option::Option<&str> {
        self.primary_meeting_id.as_deref()
    }
    /// <p>Array of strings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tenant_ids.is_none()`.
    pub fn tenant_ids(&self) -> &[::std::string::String] {
        self.tenant_ids.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the meeting.</p>
    pub fn meeting_arn(&self) -> ::std::option::Option<&str> {
        self.meeting_arn.as_deref()
    }
}
impl ::std::fmt::Debug for Meeting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Meeting");
        formatter.field("meeting_id", &self.meeting_id);
        formatter.field("meeting_host_id", &"*** Sensitive Data Redacted ***");
        formatter.field("external_meeting_id", &"*** Sensitive Data Redacted ***");
        formatter.field("media_region", &self.media_region);
        formatter.field("media_placement", &self.media_placement);
        formatter.field("meeting_features", &self.meeting_features);
        formatter.field("primary_meeting_id", &self.primary_meeting_id);
        formatter.field("tenant_ids", &self.tenant_ids);
        formatter.field("meeting_arn", &self.meeting_arn);
        formatter.finish()
    }
}
impl Meeting {
    /// Creates a new builder-style object to manufacture [`Meeting`](crate::types::Meeting).
    pub fn builder() -> crate::types::builders::MeetingBuilder {
        crate::types::builders::MeetingBuilder::default()
    }
}

/// A builder for [`Meeting`](crate::types::Meeting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct MeetingBuilder {
    pub(crate) meeting_id: ::std::option::Option<::std::string::String>,
    pub(crate) meeting_host_id: ::std::option::Option<::std::string::String>,
    pub(crate) external_meeting_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_region: ::std::option::Option<::std::string::String>,
    pub(crate) media_placement: ::std::option::Option<crate::types::MediaPlacement>,
    pub(crate) meeting_features: ::std::option::Option<crate::types::MeetingFeaturesConfiguration>,
    pub(crate) primary_meeting_id: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) meeting_arn: ::std::option::Option<::std::string::String>,
}
impl MeetingBuilder {
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn meeting_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meeting_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn set_meeting_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meeting_id = input;
        self
    }
    /// <p>The Amazon Chime SDK meeting ID.</p>
    pub fn get_meeting_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.meeting_id
    }
    /// <p>Reserved.</p>
    pub fn meeting_host_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meeting_host_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved.</p>
    pub fn set_meeting_host_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meeting_host_id = input;
        self
    }
    /// <p>Reserved.</p>
    pub fn get_meeting_host_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.meeting_host_id
    }
    /// <p>The external meeting ID.</p>
    /// <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p>
    /// <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
    pub fn external_meeting_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_meeting_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external meeting ID.</p>
    /// <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p>
    /// <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
    pub fn set_external_meeting_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_meeting_id = input;
        self
    }
    /// <p>The external meeting ID.</p>
    /// <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p>
    /// <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
    pub fn get_external_meeting_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_meeting_id
    }
    /// <p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.</p>
    /// <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
    pub fn media_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.</p>
    /// <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
    pub fn set_media_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_region = input;
        self
    }
    /// <p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.</p>
    /// <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
    pub fn get_media_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_region
    }
    /// <p>The media placement for the meeting.</p>
    pub fn media_placement(mut self, input: crate::types::MediaPlacement) -> Self {
        self.media_placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The media placement for the meeting.</p>
    pub fn set_media_placement(mut self, input: ::std::option::Option<crate::types::MediaPlacement>) -> Self {
        self.media_placement = input;
        self
    }
    /// <p>The media placement for the meeting.</p>
    pub fn get_media_placement(&self) -> &::std::option::Option<crate::types::MediaPlacement> {
        &self.media_placement
    }
    /// <p>The features available to a meeting, such as echo reduction.</p>
    pub fn meeting_features(mut self, input: crate::types::MeetingFeaturesConfiguration) -> Self {
        self.meeting_features = ::std::option::Option::Some(input);
        self
    }
    /// <p>The features available to a meeting, such as echo reduction.</p>
    pub fn set_meeting_features(mut self, input: ::std::option::Option<crate::types::MeetingFeaturesConfiguration>) -> Self {
        self.meeting_features = input;
        self
    }
    /// <p>The features available to a meeting, such as echo reduction.</p>
    pub fn get_meeting_features(&self) -> &::std::option::Option<crate::types::MeetingFeaturesConfiguration> {
        &self.meeting_features
    }
    /// <p>When specified, replicates the media from the primary meeting to this meeting.</p>
    pub fn primary_meeting_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_meeting_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When specified, replicates the media from the primary meeting to this meeting.</p>
    pub fn set_primary_meeting_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_meeting_id = input;
        self
    }
    /// <p>When specified, replicates the media from the primary meeting to this meeting.</p>
    pub fn get_primary_meeting_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_meeting_id
    }
    /// Appends an item to `tenant_ids`.
    ///
    /// To override the contents of this collection use [`set_tenant_ids`](Self::set_tenant_ids).
    ///
    /// <p>Array of strings.</p>
    pub fn tenant_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tenant_ids.unwrap_or_default();
        v.push(input.into());
        self.tenant_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Array of strings.</p>
    pub fn set_tenant_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tenant_ids = input;
        self
    }
    /// <p>Array of strings.</p>
    pub fn get_tenant_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tenant_ids
    }
    /// <p>The ARN of the meeting.</p>
    pub fn meeting_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meeting_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the meeting.</p>
    pub fn set_meeting_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meeting_arn = input;
        self
    }
    /// <p>The ARN of the meeting.</p>
    pub fn get_meeting_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.meeting_arn
    }
    /// Consumes the builder and constructs a [`Meeting`](crate::types::Meeting).
    pub fn build(self) -> crate::types::Meeting {
        crate::types::Meeting {
            meeting_id: self.meeting_id,
            meeting_host_id: self.meeting_host_id,
            external_meeting_id: self.external_meeting_id,
            media_region: self.media_region,
            media_placement: self.media_placement,
            meeting_features: self.meeting_features,
            primary_meeting_id: self.primary_meeting_id,
            tenant_ids: self.tenant_ids,
            meeting_arn: self.meeting_arn,
        }
    }
}
impl ::std::fmt::Debug for MeetingBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MeetingBuilder");
        formatter.field("meeting_id", &self.meeting_id);
        formatter.field("meeting_host_id", &"*** Sensitive Data Redacted ***");
        formatter.field("external_meeting_id", &"*** Sensitive Data Redacted ***");
        formatter.field("media_region", &self.media_region);
        formatter.field("media_placement", &self.media_placement);
        formatter.field("meeting_features", &self.meeting_features);
        formatter.field("primary_meeting_id", &self.primary_meeting_id);
        formatter.field("tenant_ids", &self.tenant_ids);
        formatter.field("meeting_arn", &self.meeting_arn);
        formatter.finish()
    }
}
