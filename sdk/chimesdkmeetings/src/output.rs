// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAttendeeCapabilitiesOutput {
    /// <p>The updated attendee data.</p>
    #[doc(hidden)]
    pub attendee: std::option::Option<crate::model::Attendee>,
    _request_id: Option<String>,
}
impl UpdateAttendeeCapabilitiesOutput {
    /// <p>The updated attendee data.</p>
    pub fn attendee(&self) -> std::option::Option<&crate::model::Attendee> {
        self.attendee.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAttendeeCapabilitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAttendeeCapabilitiesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAttendeeCapabilitiesOutput`](crate::output::UpdateAttendeeCapabilitiesOutput).
    pub fn builder() -> crate::output::update_attendee_capabilities_output::Builder {
        crate::output::update_attendee_capabilities_output::Builder::default()
    }
}

/// See [`UpdateAttendeeCapabilitiesOutput`](crate::output::UpdateAttendeeCapabilitiesOutput).
pub mod update_attendee_capabilities_output {

    /// A builder for [`UpdateAttendeeCapabilitiesOutput`](crate::output::UpdateAttendeeCapabilitiesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendee: std::option::Option<crate::model::Attendee>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated attendee data.</p>
        pub fn attendee(mut self, input: crate::model::Attendee) -> Self {
            self.attendee = Some(input);
            self
        }
        /// <p>The updated attendee data.</p>
        pub fn set_attendee(mut self, input: std::option::Option<crate::model::Attendee>) -> Self {
            self.attendee = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAttendeeCapabilitiesOutput`](crate::output::UpdateAttendeeCapabilitiesOutput).
        pub fn build(self) -> crate::output::UpdateAttendeeCapabilitiesOutput {
            crate::output::UpdateAttendeeCapabilitiesOutput {
                attendee: self.attendee,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopMeetingTranscriptionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopMeetingTranscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopMeetingTranscriptionOutput {
    /// Creates a new builder-style object to manufacture [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
    pub fn builder() -> crate::output::stop_meeting_transcription_output::Builder {
        crate::output::stop_meeting_transcription_output::Builder::default()
    }
}

/// See [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
pub mod stop_meeting_transcription_output {

    /// A builder for [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopMeetingTranscriptionOutput`](crate::output::StopMeetingTranscriptionOutput).
        pub fn build(self) -> crate::output::StopMeetingTranscriptionOutput {
            crate::output::StopMeetingTranscriptionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMeetingTranscriptionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartMeetingTranscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartMeetingTranscriptionOutput {
    /// Creates a new builder-style object to manufacture [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
    pub fn builder() -> crate::output::start_meeting_transcription_output::Builder {
        crate::output::start_meeting_transcription_output::Builder::default()
    }
}

/// See [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
pub mod start_meeting_transcription_output {

    /// A builder for [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartMeetingTranscriptionOutput`](crate::output::StartMeetingTranscriptionOutput).
        pub fn build(self) -> crate::output::StartMeetingTranscriptionOutput {
            crate::output::StartMeetingTranscriptionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags requested for the specified resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags requested for the specified resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags requested for the specified resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags requested for the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttendeesOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAttendeesOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAttendeesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAttendeesOutput {
    /// Creates a new builder-style object to manufacture [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
    pub fn builder() -> crate::output::list_attendees_output::Builder {
        crate::output::list_attendees_output::Builder::default()
    }
}

/// See [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
pub mod list_attendees_output {

    /// A builder for [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAttendeesOutput`](crate::output::ListAttendeesOutput).
        pub fn build(self) -> crate::output::ListAttendeesOutput {
            crate::output::ListAttendeesOutput {
                attendees: self.attendees,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMeetingOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
    _request_id: Option<String>,
}
impl GetMeetingOutput {
    /// <p>The Amazon Chime SDK meeting information.</p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMeetingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMeetingOutput {
    /// Creates a new builder-style object to manufacture [`GetMeetingOutput`](crate::output::GetMeetingOutput).
    pub fn builder() -> crate::output::get_meeting_output::Builder {
        crate::output::get_meeting_output::Builder::default()
    }
}

/// See [`GetMeetingOutput`](crate::output::GetMeetingOutput).
pub mod get_meeting_output {

    /// A builder for [`GetMeetingOutput`](crate::output::GetMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p>The Amazon Chime SDK meeting information.</p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMeetingOutput`](crate::output::GetMeetingOutput).
        pub fn build(self) -> crate::output::GetMeetingOutput {
            crate::output::GetMeetingOutput {
                meeting: self.meeting,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAttendeeOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    #[doc(hidden)]
    pub attendee: std::option::Option<crate::model::Attendee>,
    _request_id: Option<String>,
}
impl GetAttendeeOutput {
    /// <p>The Amazon Chime SDK attendee information.</p>
    pub fn attendee(&self) -> std::option::Option<&crate::model::Attendee> {
        self.attendee.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAttendeeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
    pub fn builder() -> crate::output::get_attendee_output::Builder {
        crate::output::get_attendee_output::Builder::default()
    }
}

/// See [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
pub mod get_attendee_output {

    /// A builder for [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendee: std::option::Option<crate::model::Attendee>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn attendee(mut self, input: crate::model::Attendee) -> Self {
            self.attendee = Some(input);
            self
        }
        /// <p>The Amazon Chime SDK attendee information.</p>
        pub fn set_attendee(mut self, input: std::option::Option<crate::model::Attendee>) -> Self {
            self.attendee = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAttendeeOutput`](crate::output::GetAttendeeOutput).
        pub fn build(self) -> crate::output::GetAttendeeOutput {
            crate::output::GetAttendeeOutput {
                attendee: self.attendee,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMeetingOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMeetingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMeetingOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
    pub fn builder() -> crate::output::delete_meeting_output::Builder {
        crate::output::delete_meeting_output::Builder::default()
    }
}

/// See [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
pub mod delete_meeting_output {

    /// A builder for [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMeetingOutput`](crate::output::DeleteMeetingOutput).
        pub fn build(self) -> crate::output::DeleteMeetingOutput {
            crate::output::DeleteMeetingOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAttendeeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAttendeeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
    pub fn builder() -> crate::output::delete_attendee_output::Builder {
        crate::output::delete_attendee_output::Builder::default()
    }
}

/// See [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
pub mod delete_attendee_output {

    /// A builder for [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAttendeeOutput`](crate::output::DeleteAttendeeOutput).
        pub fn build(self) -> crate::output::DeleteAttendeeOutput {
            crate::output::DeleteAttendeeOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMeetingWithAttendeesOutput {
    /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
    /// <p>The attendee information, including attendees' IDs and join tokens.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
    _request_id: Option<String>,
}
impl CreateMeetingWithAttendeesOutput {
    /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
    /// <p>The attendee information, including attendees' IDs and join tokens.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::CreateAttendeeError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateMeetingWithAttendeesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMeetingWithAttendeesOutput {
    /// Creates a new builder-style object to manufacture [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
    pub fn builder() -> crate::output::create_meeting_with_attendees_output::Builder {
        crate::output::create_meeting_with_attendees_output::Builder::default()
    }
}

/// See [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
pub mod create_meeting_with_attendees_output {

    /// A builder for [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The attendee information, including attendees' IDs and join tokens.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The attendee information, including attendees' IDs and join tokens.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::CreateAttendeeError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMeetingWithAttendeesOutput`](crate::output::CreateMeetingWithAttendeesOutput).
        pub fn build(self) -> crate::output::CreateMeetingWithAttendeesOutput {
            crate::output::CreateMeetingWithAttendeesOutput {
                meeting: self.meeting,
                attendees: self.attendees,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMeetingOutput {
    /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
    #[doc(hidden)]
    pub meeting: std::option::Option<crate::model::Meeting>,
    _request_id: Option<String>,
}
impl CreateMeetingOutput {
    /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
    pub fn meeting(&self) -> std::option::Option<&crate::model::Meeting> {
        self.meeting.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateMeetingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMeetingOutput {
    /// Creates a new builder-style object to manufacture [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
    pub fn builder() -> crate::output::create_meeting_output::Builder {
        crate::output::create_meeting_output::Builder::default()
    }
}

/// See [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
pub mod create_meeting_output {

    /// A builder for [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) meeting: std::option::Option<crate::model::Meeting>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
        pub fn meeting(mut self, input: crate::model::Meeting) -> Self {
            self.meeting = Some(input);
            self
        }
        /// <p>The meeting information, including the meeting ID and <code>MediaPlacement</code>.</p>
        pub fn set_meeting(mut self, input: std::option::Option<crate::model::Meeting>) -> Self {
            self.meeting = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMeetingOutput`](crate::output::CreateMeetingOutput).
        pub fn build(self) -> crate::output::CreateMeetingOutput {
            crate::output::CreateMeetingOutput {
                meeting: self.meeting,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAttendeeOutput {
    /// <p>The attendee information, including attendee ID and join token.</p>
    #[doc(hidden)]
    pub attendee: std::option::Option<crate::model::Attendee>,
    _request_id: Option<String>,
}
impl CreateAttendeeOutput {
    /// <p>The attendee information, including attendee ID and join token.</p>
    pub fn attendee(&self) -> std::option::Option<&crate::model::Attendee> {
        self.attendee.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAttendeeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
    pub fn builder() -> crate::output::create_attendee_output::Builder {
        crate::output::create_attendee_output::Builder::default()
    }
}

/// See [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
pub mod create_attendee_output {

    /// A builder for [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendee: std::option::Option<crate::model::Attendee>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The attendee information, including attendee ID and join token.</p>
        pub fn attendee(mut self, input: crate::model::Attendee) -> Self {
            self.attendee = Some(input);
            self
        }
        /// <p>The attendee information, including attendee ID and join token.</p>
        pub fn set_attendee(mut self, input: std::option::Option<crate::model::Attendee>) -> Self {
            self.attendee = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAttendeeOutput`](crate::output::CreateAttendeeOutput).
        pub fn build(self) -> crate::output::CreateAttendeeOutput {
            crate::output::CreateAttendeeOutput {
                attendee: self.attendee,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdateAttendeeCapabilitiesExceptOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for BatchUpdateAttendeeCapabilitiesExceptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpdateAttendeeCapabilitiesExceptOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateAttendeeCapabilitiesExceptOutput`](crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput).
    pub fn builder() -> crate::output::batch_update_attendee_capabilities_except_output::Builder {
        crate::output::batch_update_attendee_capabilities_except_output::Builder::default()
    }
}

/// See [`BatchUpdateAttendeeCapabilitiesExceptOutput`](crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput).
pub mod batch_update_attendee_capabilities_except_output {

    /// A builder for [`BatchUpdateAttendeeCapabilitiesExceptOutput`](crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchUpdateAttendeeCapabilitiesExceptOutput`](crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput).
        pub fn build(self) -> crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput {
            crate::output::BatchUpdateAttendeeCapabilitiesExceptOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateAttendeeOutput {
    /// <p>The attendee information, including attendees' IDs and join tokens.</p>
    #[doc(hidden)]
    pub attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
    _request_id: Option<String>,
}
impl BatchCreateAttendeeOutput {
    /// <p>The attendee information, including attendees' IDs and join tokens.</p>
    pub fn attendees(&self) -> std::option::Option<&[crate::model::Attendee]> {
        self.attendees.as_deref()
    }
    /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::CreateAttendeeError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateAttendeeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateAttendeeOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
    pub fn builder() -> crate::output::batch_create_attendee_output::Builder {
        crate::output::batch_create_attendee_output::Builder::default()
    }
}

/// See [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
pub mod batch_create_attendee_output {

    /// A builder for [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attendees: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `attendees`.
        ///
        /// To override the contents of this collection use [`set_attendees`](Self::set_attendees).
        ///
        /// <p>The attendee information, including attendees' IDs and join tokens.</p>
        pub fn attendees(mut self, input: crate::model::Attendee) -> Self {
            let mut v = self.attendees.unwrap_or_default();
            v.push(input);
            self.attendees = Some(v);
            self
        }
        /// <p>The attendee information, including attendees' IDs and join tokens.</p>
        pub fn set_attendees(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attendee>>,
        ) -> Self {
            self.attendees = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn errors(mut self, input: crate::model::CreateAttendeeError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateAttendeeError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateAttendeeOutput`](crate::output::BatchCreateAttendeeOutput).
        pub fn build(self) -> crate::output::BatchCreateAttendeeOutput {
            crate::output::BatchCreateAttendeeOutput {
                attendees: self.attendees,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}
