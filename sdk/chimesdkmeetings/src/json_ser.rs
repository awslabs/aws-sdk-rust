// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.attendees {
        let mut array_2 = object.key("Attendees").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.external_user_id {
        object.key("ExternalUserId").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.media_region {
        object.key("MediaRegion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.meeting_features {
        let mut object_10 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.notifications_configuration {
        let mut object_13 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_with_attendees_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingWithAttendeesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.attendees {
        let mut array_16 = object.key("Attendees").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_19.as_str());
    }
    if let Some(var_20) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.media_region {
        object.key("MediaRegion").string(var_21.as_str());
    }
    if let Some(var_22) = &input.meeting_features {
        let mut object_23 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.notifications_configuration {
        let mut object_26 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_meeting_transcription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMeetingTranscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.transcription_configuration {
        let mut object_29 = object.key("TranscriptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_transcription_configuration(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_attendee_request_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAttendeeRequestItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.external_user_id {
        object.key("ExternalUserId").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_meeting_features_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeetingFeaturesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.audio {
        let mut object_32 = object.key("Audio").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_features(&mut object_32, var_31)?;
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notifications_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_33.as_str());
    }
    if let Some(var_34) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_34.as_str());
    }
    if let Some(var_35) = &input.sqs_queue_arn {
        object.key("SqsQueueArn").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcription_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.engine_transcribe_settings {
        let mut object_37 = object.key("EngineTranscribeSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_settings(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.engine_transcribe_medical_settings {
        let mut object_39 = object.key("EngineTranscribeMedicalSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_medical_settings(
            &mut object_39,
            var_38,
        )?;
        object_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_features(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioFeatures,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.echo_reduction {
        object.key("EchoReduction").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.language_code {
        object.key("LanguageCode").string(var_41.as_str());
    }
    if let Some(var_42) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_42.as_str());
    }
    if let Some(var_43) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_44.as_str());
    }
    if let Some(var_45) = &input.region {
        object.key("Region").string(var_45.as_str());
    }
    if input.enable_partial_results_stabilization {
        object
            .key("EnablePartialResultsStabilization")
            .boolean(input.enable_partial_results_stabilization);
    }
    if let Some(var_46) = &input.partial_results_stability {
        object
            .key("PartialResultsStability")
            .string(var_46.as_str());
    }
    if let Some(var_47) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_47.as_str());
    }
    if let Some(var_48) = &input.content_redaction_type {
        object.key("ContentRedactionType").string(var_48.as_str());
    }
    if let Some(var_49) = &input.pii_entity_types {
        object.key("PiiEntityTypes").string(var_49.as_str());
    }
    if let Some(var_50) = &input.language_model_name {
        object.key("LanguageModelName").string(var_50.as_str());
    }
    if input.identify_language {
        object
            .key("IdentifyLanguage")
            .boolean(input.identify_language);
    }
    if let Some(var_51) = &input.language_options {
        object.key("LanguageOptions").string(var_51.as_str());
    }
    if let Some(var_52) = &input.preferred_language {
        object.key("PreferredLanguage").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_medical_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeMedicalSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.language_code {
        object.key("LanguageCode").string(var_53.as_str());
    }
    if let Some(var_54) = &input.specialty {
        object.key("Specialty").string(var_54.as_str());
    }
    if let Some(var_55) = &input.r#type {
        object.key("Type").string(var_55.as_str());
    }
    if let Some(var_56) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_56.as_str());
    }
    if let Some(var_57) = &input.region {
        object.key("Region").string(var_57.as_str());
    }
    if let Some(var_58) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_58.as_str());
    }
    Ok(())
}
