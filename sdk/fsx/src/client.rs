// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSSimbaAPIService_v20180301`.
///
/// This client allows ergonomic access to a `AWSSimbaAPIService_v20180301`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn associate_file_system_aliases(
        &self,
    ) -> fluent_builders::AssociateFileSystemAliases<C, M, R> {
        fluent_builders::AssociateFileSystemAliases::new(self.handle.clone())
    }
    pub fn cancel_data_repository_task(
        &self,
    ) -> fluent_builders::CancelDataRepositoryTask<C, M, R> {
        fluent_builders::CancelDataRepositoryTask::new(self.handle.clone())
    }
    pub fn copy_backup(&self) -> fluent_builders::CopyBackup<C, M, R> {
        fluent_builders::CopyBackup::new(self.handle.clone())
    }
    pub fn create_backup(&self) -> fluent_builders::CreateBackup<C, M, R> {
        fluent_builders::CreateBackup::new(self.handle.clone())
    }
    pub fn create_data_repository_task(
        &self,
    ) -> fluent_builders::CreateDataRepositoryTask<C, M, R> {
        fluent_builders::CreateDataRepositoryTask::new(self.handle.clone())
    }
    pub fn create_file_system(&self) -> fluent_builders::CreateFileSystem<C, M, R> {
        fluent_builders::CreateFileSystem::new(self.handle.clone())
    }
    pub fn create_file_system_from_backup(
        &self,
    ) -> fluent_builders::CreateFileSystemFromBackup<C, M, R> {
        fluent_builders::CreateFileSystemFromBackup::new(self.handle.clone())
    }
    pub fn create_storage_virtual_machine(
        &self,
    ) -> fluent_builders::CreateStorageVirtualMachine<C, M, R> {
        fluent_builders::CreateStorageVirtualMachine::new(self.handle.clone())
    }
    pub fn create_volume(&self) -> fluent_builders::CreateVolume<C, M, R> {
        fluent_builders::CreateVolume::new(self.handle.clone())
    }
    pub fn create_volume_from_backup(&self) -> fluent_builders::CreateVolumeFromBackup<C, M, R> {
        fluent_builders::CreateVolumeFromBackup::new(self.handle.clone())
    }
    pub fn delete_backup(&self) -> fluent_builders::DeleteBackup<C, M, R> {
        fluent_builders::DeleteBackup::new(self.handle.clone())
    }
    pub fn delete_file_system(&self) -> fluent_builders::DeleteFileSystem<C, M, R> {
        fluent_builders::DeleteFileSystem::new(self.handle.clone())
    }
    pub fn delete_storage_virtual_machine(
        &self,
    ) -> fluent_builders::DeleteStorageVirtualMachine<C, M, R> {
        fluent_builders::DeleteStorageVirtualMachine::new(self.handle.clone())
    }
    pub fn delete_volume(&self) -> fluent_builders::DeleteVolume<C, M, R> {
        fluent_builders::DeleteVolume::new(self.handle.clone())
    }
    pub fn describe_backups(&self) -> fluent_builders::DescribeBackups<C, M, R> {
        fluent_builders::DescribeBackups::new(self.handle.clone())
    }
    pub fn describe_data_repository_tasks(
        &self,
    ) -> fluent_builders::DescribeDataRepositoryTasks<C, M, R> {
        fluent_builders::DescribeDataRepositoryTasks::new(self.handle.clone())
    }
    pub fn describe_file_system_aliases(
        &self,
    ) -> fluent_builders::DescribeFileSystemAliases<C, M, R> {
        fluent_builders::DescribeFileSystemAliases::new(self.handle.clone())
    }
    pub fn describe_file_systems(&self) -> fluent_builders::DescribeFileSystems<C, M, R> {
        fluent_builders::DescribeFileSystems::new(self.handle.clone())
    }
    pub fn describe_storage_virtual_machines(
        &self,
    ) -> fluent_builders::DescribeStorageVirtualMachines<C, M, R> {
        fluent_builders::DescribeStorageVirtualMachines::new(self.handle.clone())
    }
    pub fn describe_volumes(&self) -> fluent_builders::DescribeVolumes<C, M, R> {
        fluent_builders::DescribeVolumes::new(self.handle.clone())
    }
    pub fn disassociate_file_system_aliases(
        &self,
    ) -> fluent_builders::DisassociateFileSystemAliases<C, M, R> {
        fluent_builders::DisassociateFileSystemAliases::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_file_system(&self) -> fluent_builders::UpdateFileSystem<C, M, R> {
        fluent_builders::UpdateFileSystem::new(self.handle.clone())
    }
    pub fn update_storage_virtual_machine(
        &self,
    ) -> fluent_builders::UpdateStorageVirtualMachine<C, M, R> {
        fluent_builders::UpdateStorageVirtualMachine::new(self.handle.clone())
    }
    pub fn update_volume(&self) -> fluent_builders::UpdateVolume<C, M, R> {
        fluent_builders::UpdateVolume::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AssociateFileSystemAliases<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_file_system_aliases_input::Builder,
    }
    impl<C, M, R> AssociateFileSystemAliases<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateFileSystemAliasesOutput,
            smithy_http::result::SdkError<crate::error::AssociateFileSystemAliasesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateFileSystemAliasesInputOperationOutputAlias,
                crate::output::AssociateFileSystemAliasesOutput,
                crate::error::AssociateFileSystemAliasesError,
                crate::input::AssociateFileSystemAliasesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>Specifies the file system with which you want to associate one or more DNS aliases.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// Appends an item to `Aliases`.
        ///
        /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
        /// <p>An array of one or more DNS alias names to associate with the file system.
        /// The alias name has to comply with the following formatting requirements:</p>
        /// <ul>
        /// <li>
        /// <p>Formatted as a fully-qualified domain name (FQDN), <i>
        /// <code>hostname.domain</code>
        /// </i>,
        /// for example, <code>accounting.corp.example.com</code>.</p>
        /// </li>
        /// <li>
        /// <p>Can contain alphanumeric characters and the hyphen (-).</p>
        /// </li>
        /// <li>
        /// <p>Cannot start or end with a hyphen.</p>
        /// </li>
        /// <li>
        /// <p>Can start with a numeric.</p>
        /// </li>
        /// </ul>
        /// <p>For DNS alias names, Amazon FSx stores alphabetic characters as lowercase letters (a-z), regardless of how you specify them:
        /// as uppercase letters, lowercase letters, or the corresponding letters in escape codes.</p>
        pub fn aliases(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.aliases(inp);
            self
        }
        pub fn set_aliases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_aliases(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CancelDataRepositoryTask<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::cancel_data_repository_task_input::Builder,
    }
    impl<C, M, R> CancelDataRepositoryTask<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CancelDataRepositoryTaskOutput,
            smithy_http::result::SdkError<crate::error::CancelDataRepositoryTaskError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CancelDataRepositoryTaskInputOperationOutputAlias,
                crate::output::CancelDataRepositoryTaskOutput,
                crate::error::CancelDataRepositoryTaskError,
                crate::input::CancelDataRepositoryTaskInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the data repository task to cancel.</p>
        pub fn task_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.task_id(inp);
            self
        }
        pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_task_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CopyBackup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::copy_backup_input::Builder,
    }
    impl<C, M, R> CopyBackup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CopyBackupOutput,
            smithy_http::result::SdkError<crate::error::CopyBackupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CopyBackupInputOperationOutputAlias,
                crate::output::CopyBackupOutput,
                crate::error::CopyBackupError,
                crate::input::CopyBackupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The ID of the source backup. Specifies the ID of the backup that is
        /// being copied.</p>
        pub fn source_backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_backup_id(inp);
            self
        }
        pub fn set_source_backup_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_backup_id(input);
            self
        }
        /// <p>The source Amazon Web Services Region of the backup. Specifies the Amazon Web Services Region from which
        /// the backup is being copied. The source and destination Regions must be in
        /// the same Amazon Web Services partition. If you don't specify a Region, it defaults to
        /// the Region where the request is sent from (in-Region copy).</p>
        pub fn source_region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_region(inp);
            self
        }
        pub fn set_source_region(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_region(input);
            self
        }
        /// <p>The ID of the Key Management Service (KMS) key used to encrypt the file system's data
        /// for Amazon FSx for Windows File Server file systems, Amazon FSx for NetApp ONTAP file systems, and
        /// Amazon FSx for Lustre <code>PERSISTENT_1</code> file systems at rest. If not specified, the Amazon FSx
        /// managed key is used. The Amazon FSx for Lustre <code>SCRATCH_1</code> and <code>SCRATCH_2</code> file systems
        /// are always encrypted at rest using Amazon FSx managed keys. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a>
        /// in the <i>Key Management Service API Reference</i>.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kms_key_id(inp);
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kms_key_id(input);
            self
        }
        /// <p>A boolean flag indicating whether tags from the source backup
        /// should be copied to the backup copy. This value defaults to false.</p>
        /// <p>If you set <code>CopyTags</code> to true and the source backup has
        /// existing tags, you can use the <code>Tags</code> parameter to create new
        /// tags, provided that the sum of the source backup tags and the new tags
        /// doesn't exceed 50. Both sets of tags are merged. If there are tag
        /// conflicts (for example, two tags with the same key but different values),
        /// the tags created with the <code>Tags</code> parameter take precedence.</p>
        pub fn copy_tags(mut self, inp: bool) -> Self {
            self.inner = self.inner.copy_tags(inp);
            self
        }
        pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_copy_tags(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateBackup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_backup_input::Builder,
    }
    impl<C, M, R> CreateBackup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBackupOutput,
            smithy_http::result::SdkError<crate::error::CreateBackupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateBackupInputOperationOutputAlias,
                crate::output::CreateBackupOutput,
                crate::error::CreateBackupError,
                crate::input::CreateBackupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the file system to back up.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>(Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent creation. This string is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>(Optional) The tags to apply to the backup at backup creation. The key value of the
        /// <code>Name</code> tag appears in the console as the backup name. If you have set <code>CopyTagsToBackups</code> to true, and
        /// you specify one or more tags using the <code>CreateBackup</code> action, no existing file system tags are copied from the file system to the backup.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The ID of he FSx for NetApp ONTAP volume to back up.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDataRepositoryTask<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_data_repository_task_input::Builder,
    }
    impl<C, M, R> CreateDataRepositoryTask<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDataRepositoryTaskOutput,
            smithy_http::result::SdkError<crate::error::CreateDataRepositoryTaskError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDataRepositoryTaskInputOperationOutputAlias,
                crate::output::CreateDataRepositoryTaskOutput,
                crate::error::CreateDataRepositoryTaskError,
                crate::input::CreateDataRepositoryTaskInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the type of data repository task to create.</p>
        pub fn r#type(mut self, inp: crate::model::DataRepositoryTaskType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::DataRepositoryTaskType>,
        ) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// Appends an item to `Paths`.
        ///
        /// To override the contents of this collection use [`set_paths`](Self::set_paths).
        /// <p>(Optional) The path or paths on the Amazon FSx file system to use when the data repository task is processed.
        /// The default path is the file system root directory. The paths you provide need to be relative to the mount point of the file system.
        /// If the mount point is <code>/mnt/fsx</code> and <code>/mnt/fsx/path1</code> is a directory or
        /// file on the file system you want to export, then the path to provide is <code>path1</code>.
        /// If a path that you provide isn't valid, the task fails.</p>
        pub fn paths(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.paths(inp);
            self
        }
        pub fn set_paths(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_paths(input);
            self
        }
        /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>Defines whether or not Amazon FSx provides a CompletionReport once the task has completed.
        /// A CompletionReport provides a detailed  report on the files that Amazon FSx processed that meet the criteria specified by the
        /// <code>Scope</code> parameter. For more information, see
        /// <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/task-completion-report.html">Working with Task Completion Reports</a>.</p>
        pub fn report(mut self, inp: crate::model::CompletionReport) -> Self {
            self.inner = self.inner.report(inp);
            self
        }
        pub fn set_report(
            mut self,
            input: std::option::Option<crate::model::CompletionReport>,
        ) -> Self {
            self.inner = self.inner.set_report(input);
            self
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateFileSystem<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_file_system_input::Builder,
    }
    impl<C, M, R> CreateFileSystem<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateFileSystemOutput,
            smithy_http::result::SdkError<crate::error::CreateFileSystemError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateFileSystemInputOperationOutputAlias,
                crate::output::CreateFileSystemOutput,
                crate::error::CreateFileSystemError,
                crate::input::CreateFileSystemInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent creation. This string is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The type of Amazon FSx file system to create. Valid values are <code>WINDOWS</code>,
        /// <code>LUSTRE</code>, and <code>ONTAP</code>.</p>
        pub fn file_system_type(mut self, inp: crate::model::FileSystemType) -> Self {
            self.inner = self.inner.file_system_type(inp);
            self
        }
        pub fn set_file_system_type(
            mut self,
            input: std::option::Option<crate::model::FileSystemType>,
        ) -> Self {
            self.inner = self.inner.set_file_system_type(input);
            self
        }
        /// <p>Sets the storage capacity of the file system that you're creating.</p>      
        /// <p>For Lustre file systems:</p>
        /// <ul>
        /// <li>
        /// <p>For <code>SCRATCH_2</code> and <code>PERSISTENT_1 SSD</code> deployment types, valid values are
        /// 1200 GiB, 2400 GiB, and increments of 2400 GiB.</p>
        /// </li>
        /// <li>
        /// <p>For <code>PERSISTENT HDD</code> file systems, valid values are increments of 6000 GiB for
        /// 12 MB/s/TiB file systems and increments of 1800 GiB for 40 MB/s/TiB file systems.</p>
        /// </li>
        /// <li>
        /// <p>For <code>SCRATCH_1</code> deployment type, valid values are
        /// 1200 GiB, 2400 GiB, and increments of 3600 GiB.</p>
        /// </li>
        /// </ul>
        /// <p>For Windows file systems:</p>
        /// <ul>
        /// <li>
        /// <p>If <code>StorageType=SSD</code>, valid values are 32 GiB - 65,536 GiB (64 TiB).</p>
        /// </li>
        /// <li>
        /// <p>If <code>StorageType=HDD</code>, valid values are 2000 GiB - 65,536 GiB (64 TiB).</p>
        /// </li>
        /// </ul>
        /// <p>For ONTAP file systems:</p>
        /// <ul>
        /// <li>
        /// <p>Valid values are 1024 GiB - 196,608 GiB (192 TiB).</p>
        /// </li>
        /// </ul>
        pub fn storage_capacity(mut self, inp: i32) -> Self {
            self.inner = self.inner.storage_capacity(inp);
            self
        }
        pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_storage_capacity(input);
            self
        }
        /// <p>Sets the storage type for the file system you're creating.
        /// Valid values are <code>SSD</code> and <code>HDD</code>.</p>
        /// <ul>
        /// <li>
        /// <p>Set to <code>SSD</code> to use solid state drive storage.
        /// SSD is supported on all Windows, Lustre, and ONTAP deployment types.</p>
        /// </li>
        /// <li>
        /// <p>Set to <code>HDD</code> to use hard disk drive storage.
        /// HDD is supported on <code>SINGLE_AZ_2</code> and <code>MULTI_AZ_1</code> Windows file system deployment types,
        /// and on <code>PERSISTENT</code> Lustre file system deployment types.
        /// </p>
        /// </li>
        /// </ul>
        /// <p>
        /// Default value is <code>SSD</code>. For more information, see
        /// <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/optimize-fsx-costs.html#storage-type-options">
        /// Storage Type Options</a> in the <i>Amazon FSx for Windows User Guide</i> and
        /// <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/what-is.html#storage-options">Multiple Storage Options</a>
        /// in the <i>Amazon FSx for Lustre User Guide</i>.
        /// </p>
        pub fn storage_type(mut self, inp: crate::model::StorageType) -> Self {
            self.inner = self.inner.storage_type(inp);
            self
        }
        pub fn set_storage_type(
            mut self,
            input: std::option::Option<crate::model::StorageType>,
        ) -> Self {
            self.inner = self.inner.set_storage_type(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        /// <p>Specifies the IDs of the subnets that the file system will be accessible from. For Windows
        /// and ONTAP <code>MULTI_AZ_1</code> file system deployment types, provide exactly two subnet IDs,
        /// one for the preferred file server and one for the standby file server. You specify one of these
        /// subnets as the preferred subnet using the <code>WindowsConfiguration > PreferredSubnetID</code>
        /// or <code>OntapConfiguration > PreferredSubnetID</code> properties. For more information,
        /// see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html">
        /// Availability and durability: Single-AZ and Multi-AZ file systems</a> in the
        /// <i>Amazon FSx for Windows User Guide</i> and
        /// <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html">
        /// Availability and durability</a> in the
        /// <i>Amazon FSx for ONTAP User Guide</i>.</p>
        /// <p>For Windows <code>SINGLE_AZ_1</code> and <code>SINGLE_AZ_2</code> file system deployment types and Lustre file systems, provide exactly one subnet ID.
        /// The file server is launched in that subnet's Availability Zone.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// Appends an item to `SecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        /// <p>A list of IDs specifying the security groups to apply to all network interfaces
        /// created for file system access. This list isn't returned in later requests to
        /// describe the file system.</p>
        pub fn security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_group_ids(inp);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_security_group_ids(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to apply to the file system being created. The key value of
        /// the <code>Name</code> tag appears in the console as the file system name.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The ID of the Key Management Service (KMS) key used to encrypt the file system's data
        /// for Amazon FSx for Windows File Server file systems, Amazon FSx for NetApp ONTAP file systems, and
        /// Amazon FSx for Lustre <code>PERSISTENT_1</code> file systems at rest. If not specified, the Amazon FSx
        /// managed key is used. The Amazon FSx for Lustre <code>SCRATCH_1</code> and <code>SCRATCH_2</code> file systems
        /// are always encrypted at rest using Amazon FSx managed keys. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a>
        /// in the <i>Key Management Service API Reference</i>.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kms_key_id(inp);
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kms_key_id(input);
            self
        }
        /// <p>The Microsoft Windows configuration for the file system being created.
        /// </p>
        pub fn windows_configuration(
            mut self,
            inp: crate::model::CreateFileSystemWindowsConfiguration,
        ) -> Self {
            self.inner = self.inner.windows_configuration(inp);
            self
        }
        pub fn set_windows_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateFileSystemWindowsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_windows_configuration(input);
            self
        }
        /// <p>The Lustre configuration for the file system being created.
        /// </p>
        pub fn lustre_configuration(
            mut self,
            inp: crate::model::CreateFileSystemLustreConfiguration,
        ) -> Self {
            self.inner = self.inner.lustre_configuration(inp);
            self
        }
        pub fn set_lustre_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateFileSystemLustreConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lustre_configuration(input);
            self
        }
        /// <p>The ONTAP configuration properties of the FSx for NetApp ONTAP file system that you are creating.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::CreateFileSystemOntapConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateFileSystemOntapConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
        /// <p>Sets the version of the Amazon FSx for Lustre file system you're creating.
        /// Valid values are <code>2.10</code> and <code>2.12</code>.</p>
        /// <ul>
        /// <li>
        /// <p>Set the value to <code>2.10</code> to create a Lustre 2.10
        /// file system.</p>
        /// </li>
        /// <li>
        /// <p>Set the value to <code>2.12</code> to create a Lustre 2.12
        /// file system.</p>
        /// </li>
        /// </ul>
        /// <p>Default value is <code>2.10</code>.</p>
        pub fn file_system_type_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_type_version(inp);
            self
        }
        pub fn set_file_system_type_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_type_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateFileSystemFromBackup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_file_system_from_backup_input::Builder,
    }
    impl<C, M, R> CreateFileSystemFromBackup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateFileSystemFromBackupOutput,
            smithy_http::result::SdkError<crate::error::CreateFileSystemFromBackupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateFileSystemFromBackupInputOperationOutputAlias,
                crate::output::CreateFileSystemFromBackupOutput,
                crate::error::CreateFileSystemFromBackupError,
                crate::input::CreateFileSystemFromBackupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the source backup. Specifies the backup you are copying.</p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent creation. This string is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        /// <p>Specifies the IDs of the subnets that the file system will be accessible from. For Windows <code>MULTI_AZ_1</code>
        /// file system deployment types, provide exactly two subnet IDs, one for the preferred file server
        /// and one for the standby file server. You specify one of these subnets as the preferred subnet
        /// using the <code>WindowsConfiguration > PreferredSubnetID</code> property.</p>
        /// <p>For Windows <code>SINGLE_AZ_1</code> and <code>SINGLE_AZ_2</code> deployment
        /// types and Lustre file systems, provide exactly one subnet ID.
        /// The file server is launched in that subnet's Availability Zone.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// Appends an item to `SecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        /// <p>A list of IDs for the security groups that apply to the specified network
        /// interfaces created for file system access. These security groups apply to all network
        /// interfaces. This value isn't returned in later DescribeFileSystem requests.</p>
        pub fn security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_group_ids(inp);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_security_group_ids(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to be applied to the file system at file system creation. The key value of
        /// the <code>Name</code> tag appears in the console as the file system
        /// name.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The configuration for this Microsoft Windows file system.</p>
        pub fn windows_configuration(
            mut self,
            inp: crate::model::CreateFileSystemWindowsConfiguration,
        ) -> Self {
            self.inner = self.inner.windows_configuration(inp);
            self
        }
        pub fn set_windows_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateFileSystemWindowsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_windows_configuration(input);
            self
        }
        /// <p>The Lustre configuration for the file system being created.
        /// </p>
        pub fn lustre_configuration(
            mut self,
            inp: crate::model::CreateFileSystemLustreConfiguration,
        ) -> Self {
            self.inner = self.inner.lustre_configuration(inp);
            self
        }
        pub fn set_lustre_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateFileSystemLustreConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lustre_configuration(input);
            self
        }
        /// <p>Sets the storage type for the Windows file system you're creating from a backup.
        /// Valid values are <code>SSD</code> and <code>HDD</code>.</p>
        /// <ul>
        /// <li>
        /// <p>Set to <code>SSD</code> to use solid state drive storage.
        /// Supported on all Windows deployment types.</p>
        /// </li>
        /// <li>
        /// <p>Set to <code>HDD</code> to use hard disk drive storage.
        /// Supported on <code>SINGLE_AZ_2</code> and <code>MULTI_AZ_1</code> Windows file system deployment types.
        /// </p>
        /// </li>
        /// </ul>
        /// <p>
        /// Default value is <code>SSD</code>.
        /// </p>
        /// <note>
        /// <p>HDD and SSD storage types have different minimum storage capacity requirements.
        /// A restored file system's storage capacity is tied to the file system that was backed up.
        /// You can create a file system that uses HDD storage from a backup of a file system that
        /// used SSD storage only if the original SSD file system had a storage capacity of at least 2000 GiB.
        /// </p>
        /// </note>
        pub fn storage_type(mut self, inp: crate::model::StorageType) -> Self {
            self.inner = self.inner.storage_type(inp);
            self
        }
        pub fn set_storage_type(
            mut self,
            input: std::option::Option<crate::model::StorageType>,
        ) -> Self {
            self.inner = self.inner.set_storage_type(input);
            self
        }
        /// <p>The ID of the Key Management Service (KMS) key used to encrypt the file system's data
        /// for Amazon FSx for Windows File Server file systems, Amazon FSx for NetApp ONTAP file systems, and
        /// Amazon FSx for Lustre <code>PERSISTENT_1</code> file systems at rest. If not specified, the Amazon FSx
        /// managed key is used. The Amazon FSx for Lustre <code>SCRATCH_1</code> and <code>SCRATCH_2</code> file systems
        /// are always encrypted at rest using Amazon FSx managed keys. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a>
        /// in the <i>Key Management Service API Reference</i>.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kms_key_id(inp);
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kms_key_id(input);
            self
        }
        /// <p>Sets the version for the Amazon FSx for Lustre file system you're creating from a backup.
        /// Valid values are <code>2.10</code> and <code>2.12</code>.</p>
        /// <p>You don't need to specify <code>FileSystemTypeVersion</code> because it will
        /// be applied using the backup's <code>FileSystemTypeVersion</code> setting.
        /// If you choose to specify <code>FileSystemTypeVersion</code> when creating from backup, the
        /// value must match the backup's <code>FileSystemTypeVersion</code> setting.</p>
        pub fn file_system_type_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_type_version(inp);
            self
        }
        pub fn set_file_system_type_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_type_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStorageVirtualMachine<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_storage_virtual_machine_input::Builder,
    }
    impl<C, M, R> CreateStorageVirtualMachine<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStorageVirtualMachineOutput,
            smithy_http::result::SdkError<crate::error::CreateStorageVirtualMachineError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateStorageVirtualMachineInputOperationOutputAlias,
                crate::output::CreateStorageVirtualMachineOutput,
                crate::error::CreateStorageVirtualMachineError,
                crate::input::CreateStorageVirtualMachineInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Describes the self-managed Microsoft Active Directory to which you want to join the SVM.
        /// Joining an Active Directory provides user authentication and access control for SMB clients,
        /// including Microsoft Windows and macOS client accessing the file system.</p>
        pub fn active_directory_configuration(
            mut self,
            inp: crate::model::CreateSvmActiveDirectoryConfiguration,
        ) -> Self {
            self.inner = self.inner.active_directory_configuration(inp);
            self
        }
        pub fn set_active_directory_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateSvmActiveDirectoryConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_active_directory_configuration(input);
            self
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>The name of the SVM.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The password to use when managing the SVM using the NetApp ONTAP CLI or REST API.
        /// If you do not specify a password, you can still use the file system's
        /// <code>fsxadmin</code> user to manage the SVM.</p>
        pub fn svm_admin_password(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.svm_admin_password(inp);
            self
        }
        pub fn set_svm_admin_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_svm_admin_password(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The security style of the root volume of the SVM. Specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>UNIX</code> if the file system is managed by a UNIX
        /// administrator, the majority of users are NFS clients, and an application
        /// accessing the data uses a UNIX user as the service account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NTFS</code> if the file system is managed by a Windows
        /// administrator, the majority of users are SMB clients, and an application
        /// accessing the data uses a Windows user as the service account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>MIXED</code> if the file system is managed by both UNIX
        /// and Windows administrators and users consist of both NFS and SMB clients.</p>
        /// </li>
        /// </ul>
        pub fn root_volume_security_style(
            mut self,
            inp: crate::model::StorageVirtualMachineRootVolumeSecurityStyle,
        ) -> Self {
            self.inner = self.inner.root_volume_security_style(inp);
            self
        }
        pub fn set_root_volume_security_style(
            mut self,
            input: std::option::Option<crate::model::StorageVirtualMachineRootVolumeSecurityStyle>,
        ) -> Self {
            self.inner = self.inner.set_root_volume_security_style(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_volume_input::Builder,
    }
    impl<C, M, R> CreateVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVolumeOutput,
            smithy_http::result::SdkError<crate::error::CreateVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateVolumeInputOperationOutputAlias,
                crate::output::CreateVolumeOutput,
                crate::error::CreateVolumeError,
                crate::input::CreateVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>Specifies the type of volume to create; <code>ONTAP</code> is the only valid volume type.</p>
        pub fn volume_type(mut self, inp: crate::model::VolumeType) -> Self {
            self.inner = self.inner.volume_type(inp);
            self
        }
        pub fn set_volume_type(
            mut self,
            input: std::option::Option<crate::model::VolumeType>,
        ) -> Self {
            self.inner = self.inner.set_volume_type(input);
            self
        }
        /// <p>Specifies the name of the volume you're creating.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Specifies the <code>ONTAP</code> configuration to use in creating the volume.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::CreateOntapVolumeConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateOntapVolumeConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVolumeFromBackup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_volume_from_backup_input::Builder,
    }
    impl<C, M, R> CreateVolumeFromBackup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVolumeFromBackupOutput,
            smithy_http::result::SdkError<crate::error::CreateVolumeFromBackupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateVolumeFromBackupInputOperationOutputAlias,
                crate::output::CreateVolumeFromBackupOutput,
                crate::error::CreateVolumeFromBackupError,
                crate::input::CreateVolumeFromBackupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the source backup. Specifies the backup you are copying.</p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The name of the new volume you're creating.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Specifies the configuration of the ONTAP volume that you are creating.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::CreateOntapVolumeConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::CreateOntapVolumeConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteBackup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_backup_input::Builder,
    }
    impl<C, M, R> DeleteBackup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBackupOutput,
            smithy_http::result::SdkError<crate::error::DeleteBackupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteBackupInputOperationOutputAlias,
                crate::output::DeleteBackupOutput,
                crate::error::DeleteBackupError,
                crate::input::DeleteBackupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the backup you want to delete.</p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent deletion. This is automatically filled on your behalf when using
        /// the CLI or SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteFileSystem<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_file_system_input::Builder,
    }
    impl<C, M, R> DeleteFileSystem<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteFileSystemOutput,
            smithy_http::result::SdkError<crate::error::DeleteFileSystemError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteFileSystemInputOperationOutputAlias,
                crate::output::DeleteFileSystemOutput,
                crate::error::DeleteFileSystemError,
                crate::input::DeleteFileSystemInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the file system you want to delete.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent deletion. This is automatically filled on your behalf when using the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The configuration object for the Microsoft Windows file system used in the
        /// <code>DeleteFileSystem</code> operation.</p>
        pub fn windows_configuration(
            mut self,
            inp: crate::model::DeleteFileSystemWindowsConfiguration,
        ) -> Self {
            self.inner = self.inner.windows_configuration(inp);
            self
        }
        pub fn set_windows_configuration(
            mut self,
            input: std::option::Option<crate::model::DeleteFileSystemWindowsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_windows_configuration(input);
            self
        }
        /// <p>The configuration object for the Amazon FSx for Lustre file system being deleted in the
        /// <code>DeleteFileSystem</code> operation.</p>
        pub fn lustre_configuration(
            mut self,
            inp: crate::model::DeleteFileSystemLustreConfiguration,
        ) -> Self {
            self.inner = self.inner.lustre_configuration(inp);
            self
        }
        pub fn set_lustre_configuration(
            mut self,
            input: std::option::Option<crate::model::DeleteFileSystemLustreConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lustre_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStorageVirtualMachine<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_storage_virtual_machine_input::Builder,
    }
    impl<C, M, R> DeleteStorageVirtualMachine<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStorageVirtualMachineOutput,
            smithy_http::result::SdkError<crate::error::DeleteStorageVirtualMachineError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteStorageVirtualMachineInputOperationOutputAlias,
                crate::output::DeleteStorageVirtualMachineOutput,
                crate::error::DeleteStorageVirtualMachineError,
                crate::input::DeleteStorageVirtualMachineInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The ID of the SVM that you want to delete.</p>
        pub fn storage_virtual_machine_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_virtual_machine_id(inp);
            self
        }
        pub fn set_storage_virtual_machine_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_virtual_machine_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_volume_input::Builder,
    }
    impl<C, M, R> DeleteVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVolumeOutput,
            smithy_http::result::SdkError<crate::error::DeleteVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVolumeInputOperationOutputAlias,
                crate::output::DeleteVolumeOutput,
                crate::error::DeleteVolumeError,
                crate::input::DeleteVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The ID of the volume you are deleting.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
        /// <p>For Amazon FSx for ONTAP volumes, specify whether to take
        /// a final backup of the volume, and apply tags to the backup.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::DeleteVolumeOntapConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::DeleteVolumeOntapConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBackups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_backups_input::Builder,
    }
    impl<C, M, R> DescribeBackups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBackupsOutput,
            smithy_http::result::SdkError<crate::error::DescribeBackupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBackupsInputOperationOutputAlias,
                crate::output::DescribeBackupsOutput,
                crate::error::DescribeBackupsError,
                crate::input::DescribeBackupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `BackupIds`.
        ///
        /// To override the contents of this collection use [`set_backup_ids`](Self::set_backup_ids).
        /// <p>IDs of the backups you want to retrieve (String). This overrides any
        /// filters. If any IDs are not found, BackupNotFound will be thrown.</p>
        pub fn backup_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_ids(inp);
            self
        }
        pub fn set_backup_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_backup_ids(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        /// <p>Filters structure. Supported names are <code>file-system-id</code>,
        /// <code>backup-type</code>, <code>file-system-type</code>, and
        /// <code>volume-id</code>.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>Maximum number of backups to return in the response (integer). This
        /// parameter value must be greater than 0. The number of items that Amazon FSx returns is
        /// the minimum of the <code>MaxResults</code> parameter specified in the request and the
        /// service's internal maximum number of items per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Opaque pagination token returned from a previous
        /// <code>DescribeBackups</code> operation (String). If a token present, the action
        /// continues the list from where the returning call left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDataRepositoryTasks<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_data_repository_tasks_input::Builder,
    }
    impl<C, M, R> DescribeDataRepositoryTasks<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDataRepositoryTasksOutput,
            smithy_http::result::SdkError<crate::error::DescribeDataRepositoryTasksError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeDataRepositoryTasksInputOperationOutputAlias,
                crate::output::DescribeDataRepositoryTasksOutput,
                crate::error::DescribeDataRepositoryTasksError,
                crate::input::DescribeDataRepositoryTasksInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `TaskIds`.
        ///
        /// To override the contents of this collection use [`set_task_ids`](Self::set_task_ids).
        /// <p>(Optional) IDs of the tasks whose descriptions you want to retrieve
        /// (String).</p>
        pub fn task_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.task_ids(inp);
            self
        }
        pub fn set_task_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_task_ids(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        /// <p>(Optional) You can use filters to narrow the <code>DescribeDataRepositoryTasks</code> response to
        /// include just tasks for specific file systems, or tasks in a specific lifecycle state.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::DataRepositoryTaskFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataRepositoryTaskFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The maximum number of resources to return in the response. This value must be an
        /// integer greater than zero.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If
        /// present, this token indicates from what point you can continue processing the request, where
        /// the previous <code>NextToken</code> value left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeFileSystemAliases<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_file_system_aliases_input::Builder,
    }
    impl<C, M, R> DescribeFileSystemAliases<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeFileSystemAliasesOutput,
            smithy_http::result::SdkError<crate::error::DescribeFileSystemAliasesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeFileSystemAliasesInputOperationOutputAlias,
                crate::output::DescribeFileSystemAliasesOutput,
                crate::error::DescribeFileSystemAliasesError,
                crate::input::DescribeFileSystemAliasesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The ID of the file system to return the associated DNS aliases for
        /// (String).</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>Maximum number of DNS aliases to return in the response (integer). This
        /// parameter value must be greater than 0. The number of items that Amazon FSx returns is
        /// the minimum of the <code>MaxResults</code> parameter specified in the request and the
        /// service's internal maximum number of items per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Opaque pagination token returned from a previous
        /// <code>DescribeFileSystemAliases</code> operation (String). If a token is included in the request, the action
        /// continues the list from where the previous returning call left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeFileSystems<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_file_systems_input::Builder,
    }
    impl<C, M, R> DescribeFileSystems<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeFileSystemsOutput,
            smithy_http::result::SdkError<crate::error::DescribeFileSystemsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeFileSystemsInputOperationOutputAlias,
                crate::output::DescribeFileSystemsOutput,
                crate::error::DescribeFileSystemsError,
                crate::input::DescribeFileSystemsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `FileSystemIds`.
        ///
        /// To override the contents of this collection use [`set_file_system_ids`](Self::set_file_system_ids).
        /// <p>IDs of the file systems whose descriptions you want to retrieve
        /// (String).</p>
        pub fn file_system_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_ids(inp);
            self
        }
        pub fn set_file_system_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_file_system_ids(input);
            self
        }
        /// <p>Maximum number of file systems to return in the response (integer). This
        /// parameter value must be greater than 0. The number of items that Amazon FSx returns is
        /// the minimum of the <code>MaxResults</code> parameter specified in the request and the
        /// service's internal maximum number of items per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Opaque pagination token returned from a previous
        /// <code>DescribeFileSystems</code> operation (String). If a token present, the action
        /// continues the list from where the returning call left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStorageVirtualMachines<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_storage_virtual_machines_input::Builder,
    }
    impl<C, M, R> DescribeStorageVirtualMachines<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStorageVirtualMachinesOutput,
            smithy_http::result::SdkError<crate::error::DescribeStorageVirtualMachinesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStorageVirtualMachinesInputOperationOutputAlias,
                crate::output::DescribeStorageVirtualMachinesOutput,
                crate::error::DescribeStorageVirtualMachinesError,
                crate::input::DescribeStorageVirtualMachinesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `StorageVirtualMachineIds`.
        ///
        /// To override the contents of this collection use [`set_storage_virtual_machine_ids`](Self::set_storage_virtual_machine_ids).
        /// <p>Enter the ID of one or more SVMs that you want to view.</p>
        pub fn storage_virtual_machine_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_virtual_machine_ids(inp);
            self
        }
        pub fn set_storage_virtual_machine_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_storage_virtual_machine_ids(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        /// <p>Enter a filter name:value pair to view a select set of SVMs.</p>
        pub fn filters(
            mut self,
            inp: impl Into<crate::model::StorageVirtualMachineFilter>,
        ) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StorageVirtualMachineFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The maximum number of resources to return in the response. This value must be an
        /// integer greater than zero.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If
        /// present, this token indicates from what point you can continue processing the request, where
        /// the previous <code>NextToken</code> value left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVolumes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_volumes_input::Builder,
    }
    impl<C, M, R> DescribeVolumes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVolumesOutput,
            smithy_http::result::SdkError<crate::error::DescribeVolumesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeVolumesInputOperationOutputAlias,
                crate::output::DescribeVolumesOutput,
                crate::error::DescribeVolumesError,
                crate::input::DescribeVolumesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `VolumeIds`.
        ///
        /// To override the contents of this collection use [`set_volume_ids`](Self::set_volume_ids).
        /// <p>IDs of the volumes whose descriptions you want to retrieve.</p>
        pub fn volume_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_ids(inp);
            self
        }
        pub fn set_volume_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_volume_ids(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        /// <p>Enter a filter name:value pair to view a select set of volumes.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::VolumeFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The maximum number of resources to return in the response. This value must be an
        /// integer greater than zero.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If
        /// present, this token indicates from what point you can continue processing the request, where
        /// the previous <code>NextToken</code> value left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateFileSystemAliases<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_file_system_aliases_input::Builder,
    }
    impl<C, M, R> DisassociateFileSystemAliases<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateFileSystemAliasesOutput,
            smithy_http::result::SdkError<crate::error::DisassociateFileSystemAliasesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateFileSystemAliasesInputOperationOutputAlias,
                crate::output::DisassociateFileSystemAliasesOutput,
                crate::error::DisassociateFileSystemAliasesError,
                crate::input::DisassociateFileSystemAliasesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>Specifies the file system from which to disassociate the DNS aliases.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// Appends an item to `Aliases`.
        ///
        /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
        /// <p>An array of one or more DNS alias names to disassociate, or remove, from the file system.</p>
        pub fn aliases(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.aliases(inp);
            self
        }
        pub fn set_aliases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_aliases(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the Amazon FSx resource that will have its tags listed.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>Maximum number of tags to return in the response (integer). This
        /// parameter value must be greater than 0. The number of items that Amazon FSx returns is
        /// the minimum of the <code>MaxResults</code> parameter specified in the request and the
        /// service's internal maximum number of items per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Opaque pagination token returned from a previous
        /// <code>ListTagsForResource</code> operation (String). If a token present, the action
        /// continues the list from where the returning call left off.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon FSx resource that you want to
        /// tag.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of tags for the resource. If a tag with a given key already exists, the
        /// value is replaced by the one specified in this parameter.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the Amazon FSx resource to untag.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>A list of keys of tags on the resource to untag. In case the tag key doesn't exist,
        /// the call will still succeed to be idempotent.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateFileSystem<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_file_system_input::Builder,
    }
    impl<C, M, R> UpdateFileSystem<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateFileSystemOutput,
            smithy_http::result::SdkError<crate::error::UpdateFileSystemError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateFileSystemInputOperationOutputAlias,
                crate::output::UpdateFileSystemOutput,
                crate::error::UpdateFileSystemError,
                crate::input::UpdateFileSystemInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Identifies the file system that you are updating.</p>
        pub fn file_system_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.file_system_id(inp);
            self
        }
        pub fn set_file_system_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_file_system_id(input);
            self
        }
        /// <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure
        /// idempotent updates. This string is automatically filled on your behalf when you use
        /// the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>Use this parameter to increase the storage capacity of an Amazon FSx for Windows File Server
        /// or Amazon FSx for Lustre file system.
        /// Specifies the storage capacity target value, GiB, to increase the storage capacity for the
        /// file system that you're updating. You cannot make a storage capacity increase request if
        /// there is an existing storage capacity increase request in progress.</p>
        /// <p>For Windows file systems, the storage capacity target value must be at least 10 percent
        /// (%) greater than the current storage capacity value. In order to increase storage capacity,
        /// the file system must have at least 16 MB/s of throughput capacity.</p>
        /// <p>For Lustre file systems, the storage capacity target value can be the following:</p>
        /// <ul>
        /// <li>
        /// <p>For <code>SCRATCH_2</code> and <code>PERSISTENT_1 SSD</code> deployment types, valid values
        /// are in multiples of 2400 GiB. The value must be greater than the current storage capacity.</p>
        /// </li>
        /// <li>
        /// <p>For <code>PERSISTENT HDD</code> file systems, valid values are multiples of 6000 GiB for
        /// 12 MB/s/TiB file systems and multiples of 1800 GiB for 40 MB/s/TiB file systems. The values must be greater
        /// than the current storage capacity.</p>
        /// </li>
        /// <li>
        /// <p>For <code>SCRATCH_1</code> file systems, you cannot increase the storage capacity.</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-storage-capacity.html">Managing storage
        /// capacity</a> in the <i>Amazon FSx for Windows File Server User Guide</i>
        /// and <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-storage-capacity.html">Managing storage and throughput capacity</a> in the <i>Amazon FSx for Lustre
        /// User Guide</i>.</p>
        pub fn storage_capacity(mut self, inp: i32) -> Self {
            self.inner = self.inner.storage_capacity(inp);
            self
        }
        pub fn set_storage_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_storage_capacity(input);
            self
        }
        /// <p>The configuration updates for an Amazon FSx for Windows File Server file system.</p>
        pub fn windows_configuration(
            mut self,
            inp: crate::model::UpdateFileSystemWindowsConfiguration,
        ) -> Self {
            self.inner = self.inner.windows_configuration(inp);
            self
        }
        pub fn set_windows_configuration(
            mut self,
            input: std::option::Option<crate::model::UpdateFileSystemWindowsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_windows_configuration(input);
            self
        }
        /// <p>The configuration object for Amazon FSx for Lustre file systems used in the
        /// <code>UpdateFileSystem</code> operation.</p>
        pub fn lustre_configuration(
            mut self,
            inp: crate::model::UpdateFileSystemLustreConfiguration,
        ) -> Self {
            self.inner = self.inner.lustre_configuration(inp);
            self
        }
        pub fn set_lustre_configuration(
            mut self,
            input: std::option::Option<crate::model::UpdateFileSystemLustreConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lustre_configuration(input);
            self
        }
        /// <p>The configuration updates for an Amazon FSx for NetApp ONTAP file system.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::UpdateFileSystemOntapConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::UpdateFileSystemOntapConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStorageVirtualMachine<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_storage_virtual_machine_input::Builder,
    }
    impl<C, M, R> UpdateStorageVirtualMachine<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStorageVirtualMachineOutput,
            smithy_http::result::SdkError<crate::error::UpdateStorageVirtualMachineError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateStorageVirtualMachineInputOperationOutputAlias,
                crate::output::UpdateStorageVirtualMachineOutput,
                crate::error::UpdateStorageVirtualMachineError,
                crate::input::UpdateStorageVirtualMachineInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Updates the Microsoft Active Directory (AD) configuration for an SVM that is joined to an AD.</p>
        pub fn active_directory_configuration(
            mut self,
            inp: crate::model::UpdateSvmActiveDirectoryConfiguration,
        ) -> Self {
            self.inner = self.inner.active_directory_configuration(inp);
            self
        }
        pub fn set_active_directory_configuration(
            mut self,
            input: std::option::Option<crate::model::UpdateSvmActiveDirectoryConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_active_directory_configuration(input);
            self
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>The ID of the SVM that you want to update, in the format <code>svm-0123456789abcdef0</code>.</p>
        pub fn storage_virtual_machine_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_virtual_machine_id(inp);
            self
        }
        pub fn set_storage_virtual_machine_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_virtual_machine_id(input);
            self
        }
        /// <p>Enter a new SvmAdminPassword if you are updating it.</p>
        pub fn svm_admin_password(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.svm_admin_password(inp);
            self
        }
        pub fn set_svm_admin_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_svm_admin_password(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_volume_input::Builder,
    }
    impl<C, M, R> UpdateVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVolumeOutput,
            smithy_http::result::SdkError<crate::error::UpdateVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateVolumeInputOperationOutputAlias,
                crate::output::UpdateVolumeOutput,
                crate::error::UpdateVolumeError,
                crate::input::UpdateVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64
        /// ASCII characters. This token is automatically filled on your behalf when you use the
        /// Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>Specifies the volume that you want to update, formatted <code>fsvol-0123456789abcdef0</code>.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
        /// <p>The <code>ONTAP</code> configuration of the volume you are updating.</p>
        pub fn ontap_configuration(
            mut self,
            inp: crate::model::UpdateOntapVolumeConfiguration,
        ) -> Self {
            self.inner = self.inner.ontap_configuration(inp);
            self
        }
        pub fn set_ontap_configuration(
            mut self,
            input: std::option::Option<crate::model::UpdateOntapVolumeConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ontap_configuration(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
