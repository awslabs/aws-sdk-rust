// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1);
    }
    if let Some(var_2) = &input.file_system_id {
        object.key("FileSystemId").string(var_2);
    }
    if let Some(var_3) = &input.aliases {
        let mut array_4 = object.key("Aliases").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.task_id {
        object.key("TaskId").string(var_6);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_7);
    }
    if let Some(var_8) = &input.source_backup_id {
        object.key("SourceBackupId").string(var_8);
    }
    if let Some(var_9) = &input.source_region {
        object.key("SourceRegion").string(var_9);
    }
    if let Some(var_10) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_10);
    }
    if let Some(var_11) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.file_system_id {
        object.key("FileSystemId").string(var_16);
    }
    if let Some(var_17) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.volume_id {
        object.key("VolumeId").string(var_22);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.file_system_id {
        object.key("FileSystemId").string(var_23);
    }
    if let Some(var_24) = &input.file_system_path {
        object.key("FileSystemPath").string(var_24);
    }
    if let Some(var_25) = &input.data_repository_path {
        object.key("DataRepositoryPath").string(var_25);
    }
    if let Some(var_26) = &input.batch_import_meta_data_on_create {
        object.key("BatchImportMetaDataOnCreate").boolean(*var_26);
    }
    if let Some(var_27) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.s3 {
        let mut object_29 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_repository_configuration(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_30);
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.paths {
        let mut array_37 = object.key("Paths").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.file_system_id {
        object.key("FileSystemId").string(var_39);
    }
    if let Some(var_40) = &input.report {
        let mut object_41 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_completion_report(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_47);
    }
    if let Some(var_48) = &input.file_system_type {
        object.key("FileSystemType").string(var_48.as_str());
    }
    if let Some(var_49) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.storage_type {
        object.key("StorageType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.subnet_ids {
        let mut array_52 = object.key("SubnetIds").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53);
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.security_group_ids {
        let mut array_55 = object.key("SecurityGroupIds").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56);
            }
        }
        array_55.finish();
    }
    if let Some(var_57) = &input.tags {
        let mut array_58 = object.key("Tags").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_60, item_59)?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_61);
    }
    if let Some(var_62) = &input.windows_configuration {
        let mut object_63 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.lustre_configuration {
        let mut object_65 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    if let Some(var_66) = &input.ontap_configuration {
        let mut object_67 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_ontap_configuration(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    if let Some(var_68) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_68);
    }
    if let Some(var_69) = &input.open_zfs_configuration {
        let mut object_70 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_open_zfs_configuration(
            &mut object_70,
            var_69,
        )?;
        object_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.backup_id {
        object.key("BackupId").string(var_71);
    }
    if let Some(var_72) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_72);
    }
    if let Some(var_73) = &input.subnet_ids {
        let mut array_74 = object.key("SubnetIds").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.security_group_ids {
        let mut array_77 = object.key("SecurityGroupIds").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.tags {
        let mut array_80 = object.key("Tags").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_82, item_81)?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.windows_configuration {
        let mut object_84 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.lustre_configuration {
        let mut object_86 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.storage_type {
        object.key("StorageType").string(var_87.as_str());
    }
    if let Some(var_88) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_88);
    }
    if let Some(var_89) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_89);
    }
    if let Some(var_90) = &input.open_zfs_configuration {
        let mut object_91 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_open_zfs_configuration(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_92);
    }
    if let Some(var_93) = &input.name {
        object.key("Name").string(var_93);
    }
    if let Some(var_94) = &input.volume_id {
        object.key("VolumeId").string(var_94);
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.active_directory_configuration {
        let mut object_100 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_svm_active_directory_configuration(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    if let Some(var_101) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_101);
    }
    if let Some(var_102) = &input.file_system_id {
        object.key("FileSystemId").string(var_102);
    }
    if let Some(var_103) = &input.name {
        object.key("Name").string(var_103);
    }
    if let Some(var_104) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_104);
    }
    if let Some(var_105) = &input.tags {
        let mut array_106 = object.key("Tags").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.root_volume_security_style {
        object
            .key("RootVolumeSecurityStyle")
            .string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_110);
    }
    if let Some(var_111) = &input.volume_type {
        object.key("VolumeType").string(var_111.as_str());
    }
    if let Some(var_112) = &input.name {
        object.key("Name").string(var_112);
    }
    if let Some(var_113) = &input.ontap_configuration {
        let mut object_114 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.tags {
        let mut array_116 = object.key("Tags").start_array();
        for item_117 in var_115 {
            {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_118, item_117)?;
                object_118.finish();
            }
        }
        array_116.finish();
    }
    if let Some(var_119) = &input.open_zfs_configuration {
        let mut object_120 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_open_zfs_volume_configuration(
            &mut object_120,
            var_119,
        )?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.backup_id {
        object.key("BackupId").string(var_121);
    }
    if let Some(var_122) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_122);
    }
    if let Some(var_123) = &input.name {
        object.key("Name").string(var_123);
    }
    if let Some(var_124) = &input.ontap_configuration {
        let mut object_125 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_129, item_128)?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.backup_id {
        object.key("BackupId").string(var_130);
    }
    if let Some(var_131) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_131);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.association_id {
        object.key("AssociationId").string(var_132);
    }
    if let Some(var_133) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_133);
    }
    if let Some(var_134) = &input.delete_data_in_file_system {
        object.key("DeleteDataInFileSystem").boolean(*var_134);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.file_system_id {
        object.key("FileSystemId").string(var_135);
    }
    if let Some(var_136) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_136);
    }
    if let Some(var_137) = &input.windows_configuration {
        let mut object_138 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_windows_configuration(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.lustre_configuration {
        let mut object_140 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_lustre_configuration(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    if let Some(var_141) = &input.open_zfs_configuration {
        let mut object_142 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_open_zfs_configuration(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_143);
    }
    if let Some(var_144) = &input.snapshot_id {
        object.key("SnapshotId").string(var_144);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_145);
    }
    if let Some(var_146) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_146);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_147);
    }
    if let Some(var_148) = &input.volume_id {
        object.key("VolumeId").string(var_148);
    }
    if let Some(var_149) = &input.ontap_configuration {
        let mut object_150 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_ontap_configuration(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.open_zfs_configuration {
        let mut object_152 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_open_zfs_configuration(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.backup_ids {
        let mut array_154 = object.key("BackupIds").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155);
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.filters {
        let mut array_157 = object.key("Filters").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_159, item_158)?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_repository_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.association_ids {
        let mut array_163 = object.key("AssociationIds").start_array();
        for item_164 in var_162 {
            {
                array_163.value().string(item_164);
            }
        }
        array_163.finish();
    }
    if let Some(var_165) = &input.filters {
        let mut array_166 = object.key("Filters").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_repository_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.task_ids {
        let mut array_172 = object.key("TaskIds").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173);
            }
        }
        array_172.finish();
    }
    if let Some(var_174) = &input.filters {
        let mut array_175 = object.key("Filters").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_repository_task_filter(
                    &mut object_177,
                    item_176,
                )?;
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_180);
    }
    if let Some(var_181) = &input.file_system_id {
        object.key("FileSystemId").string(var_181);
    }
    if let Some(var_182) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.next_token {
        object.key("NextToken").string(var_183);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_systems_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.file_system_ids {
        let mut array_185 = object.key("FileSystemIds").start_array();
        for item_186 in var_184 {
            {
                array_185.value().string(item_186);
            }
        }
        array_185.finish();
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.next_token {
        object.key("NextToken").string(var_188);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.snapshot_ids {
        let mut array_190 = object.key("SnapshotIds").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191);
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.filters {
        let mut array_193 = object.key("Filters").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_snapshot_filter(
                    &mut object_195,
                    item_194,
                )?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_196).into()),
        );
    }
    if let Some(var_197) = &input.next_token {
        object.key("NextToken").string(var_197);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_storage_virtual_machines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorageVirtualMachinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.storage_virtual_machine_ids {
        let mut array_199 = object.key("StorageVirtualMachineIds").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200);
            }
        }
        array_199.finish();
    }
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("Filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_virtual_machine_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_volumes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVolumesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.volume_ids {
        let mut array_208 = object.key("VolumeIds").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
    if let Some(var_210) = &input.filters {
        let mut array_211 = object.key("Filters").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_filter(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.next_token {
        object.key("NextToken").string(var_215);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_216);
    }
    if let Some(var_217) = &input.file_system_id {
        object.key("FileSystemId").string(var_217);
    }
    if let Some(var_218) = &input.aliases {
        let mut array_219 = object.key("Aliases").start_array();
        for item_220 in var_218 {
            {
                array_219.value().string(item_220);
            }
        }
        array_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.resource_arn {
        object.key("ResourceARN").string(var_221);
    }
    if let Some(var_222) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_222).into()),
        );
    }
    if let Some(var_223) = &input.next_token {
        object.key("NextToken").string(var_223);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_release_file_system_nfs_v3_locks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReleaseFileSystemNfsV3LocksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.file_system_id {
        object.key("FileSystemId").string(var_224);
    }
    if let Some(var_225) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_225);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_volume_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreVolumeFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_226);
    }
    if let Some(var_227) = &input.volume_id {
        object.key("VolumeId").string(var_227);
    }
    if let Some(var_228) = &input.snapshot_id {
        object.key("SnapshotId").string(var_228);
    }
    if let Some(var_229) = &input.options {
        let mut array_230 = object.key("Options").start_array();
        for item_231 in var_229 {
            {
                array_230.value().string(item_231.as_str());
            }
        }
        array_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.resource_arn {
        object.key("ResourceARN").string(var_232);
    }
    if let Some(var_233) = &input.tags {
        let mut array_234 = object.key("Tags").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.resource_arn {
        object.key("ResourceARN").string(var_237);
    }
    if let Some(var_238) = &input.tag_keys {
        let mut array_239 = object.key("TagKeys").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240);
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.association_id {
        object.key("AssociationId").string(var_241);
    }
    if let Some(var_242) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_242);
    }
    if let Some(var_243) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.s3 {
        let mut object_245 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_repository_configuration(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.file_system_id {
        object.key("FileSystemId").string(var_246);
    }
    if let Some(var_247) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_247);
    }
    if let Some(var_248) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.windows_configuration {
        let mut object_250 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_windows_configuration(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.lustre_configuration {
        let mut object_252 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_lustre_configuration(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.ontap_configuration {
        let mut object_254 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_ontap_configuration(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.open_zfs_configuration {
        let mut object_256 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_open_zfs_configuration(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_257);
    }
    if let Some(var_258) = &input.name {
        object.key("Name").string(var_258);
    }
    if let Some(var_259) = &input.snapshot_id {
        object.key("SnapshotId").string(var_259);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.active_directory_configuration {
        let mut object_261 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_svm_active_directory_configuration(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    if let Some(var_262) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_262);
    }
    if let Some(var_263) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_263);
    }
    if let Some(var_264) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_264);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_265);
    }
    if let Some(var_266) = &input.volume_id {
        object.key("VolumeId").string(var_266);
    }
    if let Some(var_267) = &input.ontap_configuration {
        let mut object_268 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ontap_volume_configuration(
            &mut object_268,
            var_267,
        )?;
        object_268.finish();
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269);
    }
    if let Some(var_270) = &input.open_zfs_configuration {
        let mut object_271 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_open_zfs_volume_configuration(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.key {
        object.key("Key").string(var_272);
    }
    if let Some(var_273) = &input.value {
        object.key("Value").string(var_273);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_repository_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataRepositoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.auto_import_policy {
        let mut object_275 = object.key("AutoImportPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_import_policy(
            &mut object_275,
            var_274,
        )?;
        object_275.finish();
    }
    if let Some(var_276) = &input.auto_export_policy {
        let mut object_277 = object.key("AutoExportPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_export_policy(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_completion_report(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompletionReport,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.enabled {
        object.key("Enabled").boolean(*var_278);
    }
    if let Some(var_279) = &input.path {
        object.key("Path").string(var_279);
    }
    if let Some(var_280) = &input.format {
        object.key("Format").string(var_280.as_str());
    }
    if let Some(var_281) = &input.scope {
        object.key("Scope").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_282);
    }
    if let Some(var_283) = &input.self_managed_active_directory_configuration {
        let mut object_284 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_284, var_283)?;
        object_284.finish();
    }
    if let Some(var_285) = &input.deployment_type {
        object.key("DeploymentType").string(var_285.as_str());
    }
    if let Some(var_286) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_286);
    }
    if let Some(var_287) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_288);
    }
    if let Some(var_289) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_289);
    }
    if let Some(var_290) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_290).into()),
        );
    }
    if let Some(var_291) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_291);
    }
    if let Some(var_292) = &input.aliases {
        let mut array_293 = object.key("Aliases").start_array();
        for item_294 in var_292 {
            {
                array_293.value().string(item_294);
            }
        }
        array_293.finish();
    }
    if let Some(var_295) = &input.audit_log_configuration {
        let mut object_296 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_297);
    }
    if let Some(var_298) = &input.import_path {
        object.key("ImportPath").string(var_298);
    }
    if let Some(var_299) = &input.export_path {
        object.key("ExportPath").string(var_299);
    }
    if let Some(var_300) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    if let Some(var_301) = &input.deployment_type {
        object.key("DeploymentType").string(var_301.as_str());
    }
    if let Some(var_302) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_302.as_str());
    }
    if let Some(var_303) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    if let Some(var_304) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_304);
    }
    if let Some(var_305) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_305).into()),
        );
    }
    if let Some(var_306) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_306);
    }
    if let Some(var_307) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_307.as_str());
    }
    if let Some(var_308) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_308.as_str());
    }
    if let Some(var_309) = &input.log_configuration {
        let mut object_310 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_log_create_configuration(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_312);
    }
    if let Some(var_313) = &input.deployment_type {
        object.key("DeploymentType").string(var_313.as_str());
    }
    if let Some(var_314) = &input.endpoint_ip_address_range {
        object.key("EndpointIpAddressRange").string(var_314);
    }
    if let Some(var_315) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_315);
    }
    if let Some(var_316) = &input.disk_iops_configuration {
        let mut object_317 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_317,
            var_316,
        )?;
        object_317.finish();
    }
    if let Some(var_318) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_318);
    }
    if let Some(var_319) = &input.route_table_ids {
        let mut array_320 = object.key("RouteTableIds").start_array();
        for item_321 in var_319 {
            {
                array_320.value().string(item_321);
            }
        }
        array_320.finish();
    }
    if let Some(var_322) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    if let Some(var_323) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_323);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    if let Some(var_325) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_325);
    }
    if let Some(var_326) = &input.copy_tags_to_volumes {
        object.key("CopyTagsToVolumes").boolean(*var_326);
    }
    if let Some(var_327) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_327);
    }
    if let Some(var_328) = &input.deployment_type {
        object.key("DeploymentType").string(var_328.as_str());
    }
    if let Some(var_329) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_329).into()),
        );
    }
    if let Some(var_330) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_330);
    }
    if let Some(var_331) = &input.disk_iops_configuration {
        let mut object_332 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_332,
            var_331,
        )?;
        object_332.finish();
    }
    if let Some(var_333) = &input.root_volume_configuration {
        let mut object_334 = object.key("RootVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_open_zfs_create_root_volume_configuration(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.net_bios_name {
        object.key("NetBiosName").string(var_335);
    }
    if let Some(var_336) = &input.self_managed_active_directory_configuration {
        let mut object_337 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_337, var_336)?;
        object_337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.junction_path {
        object.key("JunctionPath").string(var_338);
    }
    if let Some(var_339) = &input.security_style {
        object.key("SecurityStyle").string(var_339.as_str());
    }
    if let Some(var_340) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    if let Some(var_341) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_341);
    }
    if let Some(var_342) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_342);
    }
    if let Some(var_343) = &input.tiering_policy {
        let mut object_344 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_344, var_343)?;
        object_344.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_open_zfs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOpenZfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.parent_volume_id {
        object.key("ParentVolumeId").string(var_345);
    }
    if let Some(var_346) = &input.storage_capacity_reservation_gi_b {
        object.key("StorageCapacityReservationGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    if let Some(var_347) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_347).into()),
        );
    }
    if let Some(var_348) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_348.as_str());
    }
    if let Some(var_349) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_349);
    }
    if let Some(var_350) = &input.origin_snapshot {
        let mut object_351 = object.key("OriginSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_create_open_zfs_origin_snapshot_configuration(&mut object_351, var_350)?;
        object_351.finish();
    }
    if let Some(var_352) = &input.read_only {
        object.key("ReadOnly").boolean(*var_352);
    }
    if let Some(var_353) = &input.nfs_exports {
        let mut array_354 = object.key("NfsExports").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_356,
                    item_355,
                )?;
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.user_and_group_quotas {
        let mut array_358 = object.key("UserAndGroupQuotas").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_361);
    }
    if let Some(var_362) = &input.final_backup_tags {
        let mut array_363 = object.key("FinalBackupTags").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_365, item_364)?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_366);
    }
    if let Some(var_367) = &input.final_backup_tags {
        let mut array_368 = object.key("FinalBackupTags").start_array();
        for item_369 in var_367 {
            {
                let mut object_370 = array_368.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_370, item_369)?;
                object_370.finish();
            }
        }
        array_368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_371);
    }
    if let Some(var_372) = &input.final_backup_tags {
        let mut array_373 = object.key("FinalBackupTags").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_375, item_374)?;
                object_375.finish();
            }
        }
        array_373.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_volume_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_376);
    }
    if let Some(var_377) = &input.final_backup_tags {
        let mut array_378 = object.key("FinalBackupTags").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_380, item_379)?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_volume_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.options {
        let mut array_382 = object.key("Options").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383.as_str());
            }
        }
        array_382.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.name {
        object.key("Name").string(var_384.as_str());
    }
    if let Some(var_385) = &input.values {
        let mut array_386 = object.key("Values").start_array();
        for item_387 in var_385 {
            {
                array_386.value().string(item_387);
            }
        }
        array_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_repository_task_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataRepositoryTaskFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.name {
        object.key("Name").string(var_388.as_str());
    }
    if let Some(var_389) = &input.values {
        let mut array_390 = object.key("Values").start_array();
        for item_391 in var_389 {
            {
                array_390.value().string(item_391);
            }
        }
        array_390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snapshot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnapshotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.name {
        object.key("Name").string(var_392.as_str());
    }
    if let Some(var_393) = &input.values {
        let mut array_394 = object.key("Values").start_array();
        for item_395 in var_393 {
            {
                array_394.value().string(item_395);
            }
        }
        array_394.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_virtual_machine_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageVirtualMachineFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.name {
        object.key("Name").string(var_396.as_str());
    }
    if let Some(var_397) = &input.values {
        let mut array_398 = object.key("Values").start_array();
        for item_399 in var_397 {
            {
                array_398.value().string(item_399);
            }
        }
        array_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.name {
        object.key("Name").string(var_400.as_str());
    }
    if let Some(var_401) = &input.values {
        let mut array_402 = object.key("Values").start_array();
        for item_403 in var_401 {
            {
                array_402.value().string(item_403);
            }
        }
        array_402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_404);
    }
    if let Some(var_405) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_405);
    }
    if let Some(var_406) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.self_managed_active_directory_configuration {
        let mut object_409 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_409, var_408)?;
        object_409.finish();
    }
    if let Some(var_410) = &input.audit_log_configuration {
        let mut object_411 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_412);
    }
    if let Some(var_413) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_413);
    }
    if let Some(var_414) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_414).into()),
        );
    }
    if let Some(var_415) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_415.as_str());
    }
    if let Some(var_416) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_416.as_str());
    }
    if let Some(var_417) = &input.log_configuration {
        let mut object_418 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_log_create_configuration(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_419).into()),
        );
    }
    if let Some(var_420) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_420);
    }
    if let Some(var_421) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_421);
    }
    if let Some(var_422) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_422);
    }
    if let Some(var_423) = &input.disk_iops_configuration {
        let mut object_424 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_424,
            var_423,
        )?;
        object_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_425).into()),
        );
    }
    if let Some(var_426) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_426);
    }
    if let Some(var_427) = &input.copy_tags_to_volumes {
        object.key("CopyTagsToVolumes").boolean(*var_427);
    }
    if let Some(var_428) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_428);
    }
    if let Some(var_429) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    if let Some(var_430) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_430);
    }
    if let Some(var_431) = &input.disk_iops_configuration {
        let mut object_432 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_432,
            var_431,
        )?;
        object_432.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.self_managed_active_directory_configuration {
        let mut object_434 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_434, var_433)?;
        object_434.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.junction_path {
        object.key("JunctionPath").string(var_435);
    }
    if let Some(var_436) = &input.security_style {
        object.key("SecurityStyle").string(var_436.as_str());
    }
    if let Some(var_437) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_437).into()),
        );
    }
    if let Some(var_438) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_438);
    }
    if let Some(var_439) = &input.tiering_policy {
        let mut object_440 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_440, var_439)?;
        object_440.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_open_zfs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOpenZfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.storage_capacity_reservation_gi_b {
        object.key("StorageCapacityReservationGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_441).into()),
        );
    }
    if let Some(var_442) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_443.as_str());
    }
    if let Some(var_444) = &input.nfs_exports {
        let mut array_445 = object.key("NfsExports").start_array();
        for item_446 in var_444 {
            {
                let mut object_447 = array_445.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_447,
                    item_446,
                )?;
                object_447.finish();
            }
        }
        array_445.finish();
    }
    if let Some(var_448) = &input.user_and_group_quotas {
        let mut array_449 = object.key("UserAndGroupQuotas").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_451,
                    item_450,
                )?;
                object_451.finish();
            }
        }
        array_449.finish();
    }
    if let Some(var_452) = &input.read_only {
        object.key("ReadOnly").boolean(*var_452);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_import_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoImportPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.events {
        let mut array_454 = object.key("Events").start_array();
        for item_455 in var_453 {
            {
                array_454.value().string(item_455.as_str());
            }
        }
        array_454.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_export_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoExportPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.events {
        let mut array_457 = object.key("Events").start_array();
        for item_458 in var_456 {
            {
                array_457.value().string(item_458.as_str());
            }
        }
        array_457.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.domain_name {
        object.key("DomainName").string(var_459);
    }
    if let Some(var_460) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_460);
    }
    if let Some(var_461) = &input.file_system_administrators_group {
        object.key("FileSystemAdministratorsGroup").string(var_461);
    }
    if let Some(var_462) = &input.user_name {
        object.key("UserName").string(var_462);
    }
    if let Some(var_463) = &input.password {
        object.key("Password").string(var_463);
    }
    if let Some(var_464) = &input.dns_ips {
        let mut array_465 = object.key("DnsIps").start_array();
        for item_466 in var_464 {
            {
                array_465.value().string(item_466);
            }
        }
        array_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_windows_audit_log_create_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WindowsAuditLogCreateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.file_access_audit_log_level {
        object
            .key("FileAccessAuditLogLevel")
            .string(var_467.as_str());
    }
    if let Some(var_468) = &input.file_share_access_audit_log_level {
        object
            .key("FileShareAccessAuditLogLevel")
            .string(var_468.as_str());
    }
    if let Some(var_469) = &input.audit_log_destination {
        object.key("AuditLogDestination").string(var_469);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lustre_log_create_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LustreLogCreateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.level {
        object.key("Level").string(var_470.as_str());
    }
    if let Some(var_471) = &input.destination {
        object.key("Destination").string(var_471);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_disk_iops_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskIopsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.mode {
        object.key("Mode").string(var_472.as_str());
    }
    if let Some(var_473) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_create_root_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsCreateRootVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_474.as_str());
    }
    if let Some(var_475) = &input.nfs_exports {
        let mut array_476 = object.key("NfsExports").start_array();
        for item_477 in var_475 {
            {
                let mut object_478 = array_476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_478,
                    item_477,
                )?;
                object_478.finish();
            }
        }
        array_476.finish();
    }
    if let Some(var_479) = &input.user_and_group_quotas {
        let mut array_480 = object.key("UserAndGroupQuotas").start_array();
        for item_481 in var_479 {
            {
                let mut object_482 = array_480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_482,
                    item_481,
                )?;
                object_482.finish();
            }
        }
        array_480.finish();
    }
    if let Some(var_483) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_483);
    }
    if let Some(var_484) = &input.read_only {
        object.key("ReadOnly").boolean(*var_484);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tiering_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TieringPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_485) = &input.cooling_period {
        object.key("CoolingPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    if let Some(var_486) = &input.name {
        object.key("Name").string(var_486.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_open_zfs_origin_snapshot_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOpenZfsOriginSnapshotConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.snapshot_arn {
        object.key("SnapshotARN").string(var_487);
    }
    if let Some(var_488) = &input.copy_strategy {
        object.key("CopyStrategy").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_nfs_export(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsNfsExport,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.client_configurations {
        let mut array_490 = object.key("ClientConfigurations").start_array();
        for item_491 in var_489 {
            {
                let mut object_492 = array_490.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_client_configuration(
                    &mut object_492,
                    item_491,
                )?;
                object_492.finish();
            }
        }
        array_490.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_user_or_group_quota(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsUserOrGroupQuota,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.r#type {
        object.key("Type").string(var_493.as_str());
    }
    if let Some(var_494) = &input.id {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    if let Some(var_495) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_495).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration_updates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfigurationUpdates,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.user_name {
        object.key("UserName").string(var_496);
    }
    if let Some(var_497) = &input.password {
        object.key("Password").string(var_497);
    }
    if let Some(var_498) = &input.dns_ips {
        let mut array_499 = object.key("DnsIps").start_array();
        for item_500 in var_498 {
            {
                array_499.value().string(item_500);
            }
        }
        array_499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_client_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsClientConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.clients {
        object.key("Clients").string(var_501);
    }
    if let Some(var_502) = &input.options {
        let mut array_503 = object.key("Options").start_array();
        for item_504 in var_502 {
            {
                array_503.value().string(item_504);
            }
        }
        array_503.finish();
    }
    Ok(())
}
