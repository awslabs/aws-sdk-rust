// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemAliasesInput,
) {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1);
    }
    if let Some(var_2) = &input.file_system_id {
        object.key("FileSystemId").string(var_2);
    }
    if let Some(var_3) = &input.aliases {
        let mut array_4 = object.key("Aliases").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_cancel_data_repository_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDataRepositoryTaskInput,
) {
    if let Some(var_6) = &input.task_id {
        object.key("TaskId").string(var_6);
    }
}

pub fn serialize_structure_copy_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyBackupInput,
) {
    if let Some(var_7) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_7);
    }
    if let Some(var_8) = &input.source_backup_id {
        object.key("SourceBackupId").string(var_8);
    }
    if let Some(var_9) = &input.source_region {
        object.key("SourceRegion").string(var_9);
    }
    if let Some(var_10) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_10);
    }
    if let Some(var_11) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_15, item_14);
                object_15.finish();
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_create_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) {
    if let Some(var_16) = &input.file_system_id {
        object.key("FileSystemId").string(var_16);
    }
    if let Some(var_17) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_21, item_20);
                object_21.finish();
            }
        }
        array_19.finish();
    }
}

pub fn serialize_structure_create_data_repository_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryTaskInput,
) {
    if let Some(var_22) = &input.r#type {
        object.key("Type").string(var_22.as_str());
    }
    if let Some(var_23) = &input.paths {
        let mut array_24 = object.key("Paths").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25);
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.file_system_id {
        object.key("FileSystemId").string(var_26);
    }
    if let Some(var_27) = &input.report {
        let mut object_28 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_completion_report(&mut object_28, var_27);
        object_28.finish();
    }
    if let Some(var_29) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_29);
    }
    if let Some(var_30) = &input.tags {
        let mut array_31 = object.key("Tags").start_array();
        for item_32 in var_30 {
            {
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_33, item_32);
                object_33.finish();
            }
        }
        array_31.finish();
    }
}

pub fn serialize_structure_create_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemInput,
) {
    if let Some(var_34) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_34);
    }
    if let Some(var_35) = &input.file_system_type {
        object.key("FileSystemType").string(var_35.as_str());
    }
    if let Some(var_36) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    if let Some(var_37) = &input.storage_type {
        object.key("StorageType").string(var_37.as_str());
    }
    if let Some(var_38) = &input.subnet_ids {
        let mut array_39 = object.key("SubnetIds").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40);
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.security_group_ids {
        let mut array_42 = object.key("SecurityGroupIds").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43);
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.tags {
        let mut array_45 = object.key("Tags").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_47, item_46);
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_48);
    }
    if let Some(var_49) = &input.windows_configuration {
        let mut object_50 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_create_file_system_windows_configuration(
            &mut object_50,
            var_49,
        );
        object_50.finish();
    }
    if let Some(var_51) = &input.lustre_configuration {
        let mut object_52 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_create_file_system_lustre_configuration(
            &mut object_52,
            var_51,
        );
        object_52.finish();
    }
}

pub fn serialize_structure_create_file_system_from_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemFromBackupInput,
) {
    if let Some(var_53) = &input.backup_id {
        object.key("BackupId").string(var_53);
    }
    if let Some(var_54) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_54);
    }
    if let Some(var_55) = &input.subnet_ids {
        let mut array_56 = object.key("SubnetIds").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.security_group_ids {
        let mut array_59 = object.key("SecurityGroupIds").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.tags {
        let mut array_62 = object.key("Tags").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_64, item_63);
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.windows_configuration {
        let mut object_66 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_create_file_system_windows_configuration(
            &mut object_66,
            var_65,
        );
        object_66.finish();
    }
    if let Some(var_67) = &input.lustre_configuration {
        let mut object_68 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_create_file_system_lustre_configuration(
            &mut object_68,
            var_67,
        );
        object_68.finish();
    }
    if let Some(var_69) = &input.storage_type {
        object.key("StorageType").string(var_69.as_str());
    }
    if let Some(var_70) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_70);
    }
}

pub fn serialize_structure_delete_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) {
    if let Some(var_71) = &input.backup_id {
        object.key("BackupId").string(var_71);
    }
    if let Some(var_72) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_72);
    }
}

pub fn serialize_structure_delete_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileSystemInput,
) {
    if let Some(var_73) = &input.file_system_id {
        object.key("FileSystemId").string(var_73);
    }
    if let Some(var_74) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_74);
    }
    if let Some(var_75) = &input.windows_configuration {
        let mut object_76 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_delete_file_system_windows_configuration(
            &mut object_76,
            var_75,
        );
        object_76.finish();
    }
    if let Some(var_77) = &input.lustre_configuration {
        let mut object_78 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_delete_file_system_lustre_configuration(
            &mut object_78,
            var_77,
        );
        object_78.finish();
    }
}

pub fn serialize_structure_describe_backups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupsInput,
) {
    if let Some(var_79) = &input.backup_ids {
        let mut array_80 = object.key("BackupIds").start_array();
        for item_81 in var_79 {
            {
                array_80.value().string(item_81);
            }
        }
        array_80.finish();
    }
    if let Some(var_82) = &input.filters {
        let mut array_83 = object.key("Filters").start_array();
        for item_84 in var_82 {
            {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_85, item_84);
                object_85.finish();
            }
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.next_token {
        object.key("NextToken").string(var_87);
    }
}

pub fn serialize_structure_describe_data_repository_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryTasksInput,
) {
    if let Some(var_88) = &input.task_ids {
        let mut array_89 = object.key("TaskIds").start_array();
        for item_90 in var_88 {
            {
                array_89.value().string(item_90);
            }
        }
        array_89.finish();
    }
    if let Some(var_91) = &input.filters {
        let mut array_92 = object.key("Filters").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_data_repository_task_filter(
                    &mut object_94,
                    item_93,
                );
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96);
    }
}

pub fn serialize_structure_describe_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAliasesInput,
) {
    if let Some(var_97) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_97);
    }
    if let Some(var_98) = &input.file_system_id {
        object.key("FileSystemId").string(var_98);
    }
    if let Some(var_99) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_99).into()),
        );
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100);
    }
}

pub fn serialize_structure_describe_file_systems_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemsInput,
) {
    if let Some(var_101) = &input.file_system_ids {
        let mut array_102 = object.key("FileSystemIds").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
    if let Some(var_104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    if let Some(var_105) = &input.next_token {
        object.key("NextToken").string(var_105);
    }
}

pub fn serialize_structure_disassociate_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemAliasesInput,
) {
    if let Some(var_106) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_106);
    }
    if let Some(var_107) = &input.file_system_id {
        object.key("FileSystemId").string(var_107);
    }
    if let Some(var_108) = &input.aliases {
        let mut array_109 = object.key("Aliases").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110);
            }
        }
        array_109.finish();
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_111) = &input.resource_arn {
        object.key("ResourceARN").string(var_111);
    }
    if let Some(var_112) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_112).into()),
        );
    }
    if let Some(var_113) = &input.next_token {
        object.key("NextToken").string(var_113);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_114) = &input.resource_arn {
        object.key("ResourceARN").string(var_114);
    }
    if let Some(var_115) = &input.tags {
        let mut array_116 = object.key("Tags").start_array();
        for item_117 in var_115 {
            {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_118, item_117);
                object_118.finish();
            }
        }
        array_116.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_119) = &input.resource_arn {
        object.key("ResourceARN").string(var_119);
    }
    if let Some(var_120) = &input.tag_keys {
        let mut array_121 = object.key("TagKeys").start_array();
        for item_122 in var_120 {
            {
                array_121.value().string(item_122);
            }
        }
        array_121.finish();
    }
}

pub fn serialize_structure_update_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemInput,
) {
    if let Some(var_123) = &input.file_system_id {
        object.key("FileSystemId").string(var_123);
    }
    if let Some(var_124) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_124);
    }
    if let Some(var_125) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    if let Some(var_126) = &input.windows_configuration {
        let mut object_127 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_update_file_system_windows_configuration(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.lustre_configuration {
        let mut object_129 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_update_file_system_lustre_configuration(
            &mut object_129,
            var_128,
        );
        object_129.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_130) = &input.key {
        object.key("Key").string(var_130);
    }
    if let Some(var_131) = &input.value {
        object.key("Value").string(var_131);
    }
}

pub fn serialize_structure_completion_report(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompletionReport,
) {
    if let Some(var_132) = &input.enabled {
        object.key("Enabled").boolean(*var_132);
    }
    if let Some(var_133) = &input.path {
        object.key("Path").string(var_133);
    }
    if let Some(var_134) = &input.format {
        object.key("Format").string(var_134.as_str());
    }
    if let Some(var_135) = &input.scope {
        object.key("Scope").string(var_135.as_str());
    }
}

pub fn serialize_structure_create_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemWindowsConfiguration,
) {
    if let Some(var_136) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_136);
    }
    if let Some(var_137) = &input.self_managed_active_directory_configuration {
        let mut object_138 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_self_managed_active_directory_configuration(
            &mut object_138,
            var_137,
        );
        object_138.finish();
    }
    if let Some(var_139) = &input.deployment_type {
        object.key("DeploymentType").string(var_139.as_str());
    }
    if let Some(var_140) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_140);
    }
    if let Some(var_141) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_142);
    }
    if let Some(var_143) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_143);
    }
    if let Some(var_144) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    if let Some(var_145) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_145);
    }
    if let Some(var_146) = &input.aliases {
        let mut array_147 = object.key("Aliases").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148);
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.audit_log_configuration {
        let mut object_150 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_windows_audit_log_create_configuration(
            &mut object_150,
            var_149,
        );
        object_150.finish();
    }
}

pub fn serialize_structure_create_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemLustreConfiguration,
) {
    if let Some(var_151) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_151);
    }
    if let Some(var_152) = &input.import_path {
        object.key("ImportPath").string(var_152);
    }
    if let Some(var_153) = &input.export_path {
        object.key("ExportPath").string(var_153);
    }
    if let Some(var_154) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    if let Some(var_155) = &input.deployment_type {
        object.key("DeploymentType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_156.as_str());
    }
    if let Some(var_157) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    if let Some(var_158) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_158);
    }
    if let Some(var_159) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_160);
    }
    if let Some(var_161) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_161.as_str());
    }
    if let Some(var_162) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_162.as_str());
    }
}

pub fn serialize_structure_delete_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemWindowsConfiguration,
) {
    if let Some(var_163) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_163);
    }
    if let Some(var_164) = &input.final_backup_tags {
        let mut array_165 = object.key("FinalBackupTags").start_array();
        for item_166 in var_164 {
            {
                let mut object_167 = array_165.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_167, item_166);
                object_167.finish();
            }
        }
        array_165.finish();
    }
}

pub fn serialize_structure_delete_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemLustreConfiguration,
) {
    if let Some(var_168) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_168);
    }
    if let Some(var_169) = &input.final_backup_tags {
        let mut array_170 = object.key("FinalBackupTags").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_172, item_171);
                object_172.finish();
            }
        }
        array_170.finish();
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_173) = &input.name {
        object.key("Name").string(var_173.as_str());
    }
    if let Some(var_174) = &input.values {
        let mut array_175 = object.key("Values").start_array();
        for item_176 in var_174 {
            {
                array_175.value().string(item_176);
            }
        }
        array_175.finish();
    }
}

pub fn serialize_structure_data_repository_task_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataRepositoryTaskFilter,
) {
    if let Some(var_177) = &input.name {
        object.key("Name").string(var_177.as_str());
    }
    if let Some(var_178) = &input.values {
        let mut array_179 = object.key("Values").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_update_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemWindowsConfiguration,
) {
    if let Some(var_181) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_181);
    }
    if let Some(var_182) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_182);
    }
    if let Some(var_183) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.self_managed_active_directory_configuration {
        let mut object_186 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_self_managed_active_directory_configuration_updates(
            &mut object_186,
            var_185,
        );
        object_186.finish();
    }
    if let Some(var_187) = &input.audit_log_configuration {
        let mut object_188 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_windows_audit_log_create_configuration(
            &mut object_188,
            var_187,
        );
        object_188.finish();
    }
}

pub fn serialize_structure_update_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemLustreConfiguration,
) {
    if let Some(var_189) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_189);
    }
    if let Some(var_190) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_190);
    }
    if let Some(var_191) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_192.as_str());
    }
    if let Some(var_193) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_193.as_str());
    }
}

pub fn serialize_structure_self_managed_active_directory_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfiguration,
) {
    if let Some(var_194) = &input.domain_name {
        object.key("DomainName").string(var_194);
    }
    if let Some(var_195) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_195);
    }
    if let Some(var_196) = &input.file_system_administrators_group {
        object.key("FileSystemAdministratorsGroup").string(var_196);
    }
    if let Some(var_197) = &input.user_name {
        object.key("UserName").string(var_197);
    }
    if let Some(var_198) = &input.password {
        object.key("Password").string(var_198);
    }
    if let Some(var_199) = &input.dns_ips {
        let mut array_200 = object.key("DnsIps").start_array();
        for item_201 in var_199 {
            {
                array_200.value().string(item_201);
            }
        }
        array_200.finish();
    }
}

pub fn serialize_structure_windows_audit_log_create_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WindowsAuditLogCreateConfiguration,
) {
    if let Some(var_202) = &input.file_access_audit_log_level {
        object
            .key("FileAccessAuditLogLevel")
            .string(var_202.as_str());
    }
    if let Some(var_203) = &input.file_share_access_audit_log_level {
        object
            .key("FileShareAccessAuditLogLevel")
            .string(var_203.as_str());
    }
    if let Some(var_204) = &input.audit_log_destination {
        object.key("AuditLogDestination").string(var_204);
    }
}

pub fn serialize_structure_self_managed_active_directory_configuration_updates(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfigurationUpdates,
) {
    if let Some(var_205) = &input.user_name {
        object.key("UserName").string(var_205);
    }
    if let Some(var_206) = &input.password {
        object.key("Password").string(var_206);
    }
    if let Some(var_207) = &input.dns_ips {
        let mut array_208 = object.key("DnsIps").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
}
