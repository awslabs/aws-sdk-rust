// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemAliasesInput,
) {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1);
    }
    if let Some(var_2) = &input.file_system_id {
        object.key("FileSystemId").string(var_2);
    }
    if let Some(var_3) = &input.aliases {
        let mut array_4 = object.key("Aliases").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_crate_input_cancel_data_repository_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDataRepositoryTaskInput,
) {
    if let Some(var_6) = &input.task_id {
        object.key("TaskId").string(var_6);
    }
}

pub fn serialize_structure_crate_input_copy_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyBackupInput,
) {
    if let Some(var_7) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_7);
    }
    if let Some(var_8) = &input.source_backup_id {
        object.key("SourceBackupId").string(var_8);
    }
    if let Some(var_9) = &input.source_region {
        object.key("SourceRegion").string(var_9);
    }
    if let Some(var_10) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_10);
    }
    if let Some(var_11) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14);
                object_15.finish();
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_crate_input_create_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) {
    if let Some(var_16) = &input.file_system_id {
        object.key("FileSystemId").string(var_16);
    }
    if let Some(var_17) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_21, item_20);
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.volume_id {
        object.key("VolumeId").string(var_22);
    }
}

pub fn serialize_structure_crate_input_create_data_repository_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryTaskInput,
) {
    if let Some(var_23) = &input.r#type {
        object.key("Type").string(var_23.as_str());
    }
    if let Some(var_24) = &input.paths {
        let mut array_25 = object.key("Paths").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.file_system_id {
        object.key("FileSystemId").string(var_27);
    }
    if let Some(var_28) = &input.report {
        let mut object_29 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_completion_report(&mut object_29, var_28);
        object_29.finish();
    }
    if let Some(var_30) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_30);
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33);
                object_34.finish();
            }
        }
        array_32.finish();
    }
}

pub fn serialize_structure_crate_input_create_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemInput,
) {
    if let Some(var_35) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_35);
    }
    if let Some(var_36) = &input.file_system_type {
        object.key("FileSystemType").string(var_36.as_str());
    }
    if let Some(var_37) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.storage_type {
        object.key("StorageType").string(var_38.as_str());
    }
    if let Some(var_39) = &input.subnet_ids {
        let mut array_40 = object.key("SubnetIds").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41);
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.security_group_ids {
        let mut array_43 = object.key("SecurityGroupIds").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44);
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.tags {
        let mut array_46 = object.key("Tags").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_49);
    }
    if let Some(var_50) = &input.windows_configuration {
        let mut object_51 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_51,
            var_50,
        );
        object_51.finish();
    }
    if let Some(var_52) = &input.lustre_configuration {
        let mut object_53 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_53,
            var_52,
        );
        object_53.finish();
    }
    if let Some(var_54) = &input.ontap_configuration {
        let mut object_55 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_ontap_configuration(
            &mut object_55,
            var_54,
        );
        object_55.finish();
    }
}

pub fn serialize_structure_crate_input_create_file_system_from_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemFromBackupInput,
) {
    if let Some(var_56) = &input.backup_id {
        object.key("BackupId").string(var_56);
    }
    if let Some(var_57) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_57);
    }
    if let Some(var_58) = &input.subnet_ids {
        let mut array_59 = object.key("SubnetIds").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.security_group_ids {
        let mut array_62 = object.key("SecurityGroupIds").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63);
            }
        }
        array_62.finish();
    }
    if let Some(var_64) = &input.tags {
        let mut array_65 = object.key("Tags").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_67, item_66);
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if let Some(var_68) = &input.windows_configuration {
        let mut object_69 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_69,
            var_68,
        );
        object_69.finish();
    }
    if let Some(var_70) = &input.lustre_configuration {
        let mut object_71 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_71,
            var_70,
        );
        object_71.finish();
    }
    if let Some(var_72) = &input.storage_type {
        object.key("StorageType").string(var_72.as_str());
    }
    if let Some(var_73) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_73);
    }
}

pub fn serialize_structure_crate_input_create_storage_virtual_machine_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorageVirtualMachineInput,
) {
    if let Some(var_74) = &input.active_directory_configuration {
        let mut object_75 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_svm_active_directory_configuration(
            &mut object_75,
            var_74,
        );
        object_75.finish();
    }
    if let Some(var_76) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_76);
    }
    if let Some(var_77) = &input.file_system_id {
        object.key("FileSystemId").string(var_77);
    }
    if let Some(var_78) = &input.name {
        object.key("Name").string(var_78);
    }
    if let Some(var_79) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_79);
    }
    if let Some(var_80) = &input.tags {
        let mut array_81 = object.key("Tags").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_83, item_82);
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.root_volume_security_style {
        object
            .key("RootVolumeSecurityStyle")
            .string(var_84.as_str());
    }
}

pub fn serialize_structure_crate_input_create_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeInput,
) {
    if let Some(var_85) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_85);
    }
    if let Some(var_86) = &input.volume_type {
        object.key("VolumeType").string(var_86.as_str());
    }
    if let Some(var_87) = &input.name {
        object.key("Name").string(var_87);
    }
    if let Some(var_88) = &input.ontap_configuration {
        let mut object_89 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_89,
            var_88,
        );
        object_89.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92);
                object_93.finish();
            }
        }
        array_91.finish();
    }
}

pub fn serialize_structure_crate_input_create_volume_from_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeFromBackupInput,
) {
    if let Some(var_94) = &input.backup_id {
        object.key("BackupId").string(var_94);
    }
    if let Some(var_95) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_95);
    }
    if let Some(var_96) = &input.name {
        object.key("Name").string(var_96);
    }
    if let Some(var_97) = &input.ontap_configuration {
        let mut object_98 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_98,
            var_97,
        );
        object_98.finish();
    }
    if let Some(var_99) = &input.tags {
        let mut array_100 = object.key("Tags").start_array();
        for item_101 in var_99 {
            {
                let mut object_102 = array_100.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_102, item_101);
                object_102.finish();
            }
        }
        array_100.finish();
    }
}

pub fn serialize_structure_crate_input_delete_backup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) {
    if let Some(var_103) = &input.backup_id {
        object.key("BackupId").string(var_103);
    }
    if let Some(var_104) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_104);
    }
}

pub fn serialize_structure_crate_input_delete_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileSystemInput,
) {
    if let Some(var_105) = &input.file_system_id {
        object.key("FileSystemId").string(var_105);
    }
    if let Some(var_106) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_106);
    }
    if let Some(var_107) = &input.windows_configuration {
        let mut object_108 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_windows_configuration(
            &mut object_108,
            var_107,
        );
        object_108.finish();
    }
    if let Some(var_109) = &input.lustre_configuration {
        let mut object_110 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_lustre_configuration(
            &mut object_110,
            var_109,
        );
        object_110.finish();
    }
}

pub fn serialize_structure_crate_input_delete_storage_virtual_machine_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStorageVirtualMachineInput,
) {
    if let Some(var_111) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_111);
    }
    if let Some(var_112) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_112);
    }
}

pub fn serialize_structure_crate_input_delete_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) {
    if let Some(var_113) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_113);
    }
    if let Some(var_114) = &input.volume_id {
        object.key("VolumeId").string(var_114);
    }
    if let Some(var_115) = &input.ontap_configuration {
        let mut object_116 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_ontap_configuration(
            &mut object_116,
            var_115,
        );
        object_116.finish();
    }
}

pub fn serialize_structure_crate_input_describe_backups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupsInput,
) {
    if let Some(var_117) = &input.backup_ids {
        let mut array_118 = object.key("BackupIds").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119);
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.filters {
        let mut array_121 = object.key("Filters").start_array();
        for item_122 in var_120 {
            {
                let mut object_123 = array_121.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_123, item_122);
                object_123.finish();
            }
        }
        array_121.finish();
    }
    if let Some(var_124) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.next_token {
        object.key("NextToken").string(var_125);
    }
}

pub fn serialize_structure_crate_input_describe_data_repository_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryTasksInput,
) {
    if let Some(var_126) = &input.task_ids {
        let mut array_127 = object.key("TaskIds").start_array();
        for item_128 in var_126 {
            {
                array_127.value().string(item_128);
            }
        }
        array_127.finish();
    }
    if let Some(var_129) = &input.filters {
        let mut array_130 = object.key("Filters").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_repository_task_filter(
                    &mut object_132,
                    item_131,
                );
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.next_token {
        object.key("NextToken").string(var_134);
    }
}

pub fn serialize_structure_crate_input_describe_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAliasesInput,
) {
    if let Some(var_135) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_135);
    }
    if let Some(var_136) = &input.file_system_id {
        object.key("FileSystemId").string(var_136);
    }
    if let Some(var_137) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("NextToken").string(var_138);
    }
}

pub fn serialize_structure_crate_input_describe_file_systems_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemsInput,
) {
    if let Some(var_139) = &input.file_system_ids {
        let mut array_140 = object.key("FileSystemIds").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141);
            }
        }
        array_140.finish();
    }
    if let Some(var_142) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.next_token {
        object.key("NextToken").string(var_143);
    }
}

pub fn serialize_structure_crate_input_describe_storage_virtual_machines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorageVirtualMachinesInput,
) {
    if let Some(var_144) = &input.storage_virtual_machine_ids {
        let mut array_145 = object.key("StorageVirtualMachineIds").start_array();
        for item_146 in var_144 {
            {
                array_145.value().string(item_146);
            }
        }
        array_145.finish();
    }
    if let Some(var_147) = &input.filters {
        let mut array_148 = object.key("Filters").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_virtual_machine_filter(
                    &mut object_150,
                    item_149,
                );
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    if let Some(var_152) = &input.next_token {
        object.key("NextToken").string(var_152);
    }
}

pub fn serialize_structure_crate_input_describe_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVolumesInput,
) {
    if let Some(var_153) = &input.volume_ids {
        let mut array_154 = object.key("VolumeIds").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155);
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.filters {
        let mut array_157 = object.key("Filters").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_filter(
                    &mut object_159,
                    item_158,
                );
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161);
    }
}

pub fn serialize_structure_crate_input_disassociate_file_system_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemAliasesInput,
) {
    if let Some(var_162) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_162);
    }
    if let Some(var_163) = &input.file_system_id {
        object.key("FileSystemId").string(var_163);
    }
    if let Some(var_164) = &input.aliases {
        let mut array_165 = object.key("Aliases").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166);
            }
        }
        array_165.finish();
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_167) = &input.resource_arn {
        object.key("ResourceARN").string(var_167);
    }
    if let Some(var_168) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.next_token {
        object.key("NextToken").string(var_169);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_170) = &input.resource_arn {
        object.key("ResourceARN").string(var_170);
    }
    if let Some(var_171) = &input.tags {
        let mut array_172 = object.key("Tags").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_174, item_173);
                object_174.finish();
            }
        }
        array_172.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_175) = &input.resource_arn {
        object.key("ResourceARN").string(var_175);
    }
    if let Some(var_176) = &input.tag_keys {
        let mut array_177 = object.key("TagKeys").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178);
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_crate_input_update_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemInput,
) {
    if let Some(var_179) = &input.file_system_id {
        object.key("FileSystemId").string(var_179);
    }
    if let Some(var_180) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_180);
    }
    if let Some(var_181) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.windows_configuration {
        let mut object_183 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_windows_configuration(
            &mut object_183,
            var_182,
        );
        object_183.finish();
    }
    if let Some(var_184) = &input.lustre_configuration {
        let mut object_185 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_lustre_configuration(
            &mut object_185,
            var_184,
        );
        object_185.finish();
    }
    if let Some(var_186) = &input.ontap_configuration {
        let mut object_187 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_ontap_configuration(
            &mut object_187,
            var_186,
        );
        object_187.finish();
    }
}

pub fn serialize_structure_crate_input_update_storage_virtual_machine_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStorageVirtualMachineInput,
) {
    if let Some(var_188) = &input.active_directory_configuration {
        let mut object_189 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_svm_active_directory_configuration(
            &mut object_189,
            var_188,
        );
        object_189.finish();
    }
    if let Some(var_190) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_190);
    }
    if let Some(var_191) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_191);
    }
    if let Some(var_192) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_192);
    }
}

pub fn serialize_structure_crate_input_update_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVolumeInput,
) {
    if let Some(var_193) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_193);
    }
    if let Some(var_194) = &input.volume_id {
        object.key("VolumeId").string(var_194);
    }
    if let Some(var_195) = &input.ontap_configuration {
        let mut object_196 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ontap_volume_configuration(
            &mut object_196,
            var_195,
        );
        object_196.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_197) = &input.key {
        object.key("Key").string(var_197);
    }
    if let Some(var_198) = &input.value {
        object.key("Value").string(var_198);
    }
}

pub fn serialize_structure_crate_model_completion_report(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompletionReport,
) {
    if let Some(var_199) = &input.enabled {
        object.key("Enabled").boolean(*var_199);
    }
    if let Some(var_200) = &input.path {
        object.key("Path").string(var_200);
    }
    if let Some(var_201) = &input.format {
        object.key("Format").string(var_201.as_str());
    }
    if let Some(var_202) = &input.scope {
        object.key("Scope").string(var_202.as_str());
    }
}

pub fn serialize_structure_crate_model_create_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemWindowsConfiguration,
) {
    if let Some(var_203) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_203);
    }
    if let Some(var_204) = &input.self_managed_active_directory_configuration {
        let mut object_205 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_205, var_204);
        object_205.finish();
    }
    if let Some(var_206) = &input.deployment_type {
        object.key("DeploymentType").string(var_206.as_str());
    }
    if let Some(var_207) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_207);
    }
    if let Some(var_208) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_209);
    }
    if let Some(var_210) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_210);
    }
    if let Some(var_211) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_212);
    }
    if let Some(var_213) = &input.aliases {
        let mut array_214 = object.key("Aliases").start_array();
        for item_215 in var_213 {
            {
                array_214.value().string(item_215);
            }
        }
        array_214.finish();
    }
    if let Some(var_216) = &input.audit_log_configuration {
        let mut object_217 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_217,
            var_216,
        );
        object_217.finish();
    }
}

pub fn serialize_structure_crate_model_create_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemLustreConfiguration,
) {
    if let Some(var_218) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_218);
    }
    if let Some(var_219) = &input.import_path {
        object.key("ImportPath").string(var_219);
    }
    if let Some(var_220) = &input.export_path {
        object.key("ExportPath").string(var_220);
    }
    if let Some(var_221) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.deployment_type {
        object.key("DeploymentType").string(var_222.as_str());
    }
    if let Some(var_223) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_223.as_str());
    }
    if let Some(var_224) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_224).into()),
        );
    }
    if let Some(var_225) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_225);
    }
    if let Some(var_226) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_227);
    }
    if let Some(var_228) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_228.as_str());
    }
    if let Some(var_229) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_229.as_str());
    }
}

pub fn serialize_structure_crate_model_create_file_system_ontap_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOntapConfiguration,
) {
    if let Some(var_230) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_230).into()),
        );
    }
    if let Some(var_231) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_231);
    }
    if let Some(var_232) = &input.deployment_type {
        object.key("DeploymentType").string(var_232.as_str());
    }
    if let Some(var_233) = &input.endpoint_ip_address_range {
        object.key("EndpointIpAddressRange").string(var_233);
    }
    if let Some(var_234) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_234);
    }
    if let Some(var_235) = &input.disk_iops_configuration {
        let mut object_236 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_236,
            var_235,
        );
        object_236.finish();
    }
    if let Some(var_237) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_237);
    }
    if let Some(var_238) = &input.route_table_ids {
        let mut array_239 = object.key("RouteTableIds").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240);
            }
        }
        array_239.finish();
    }
    if let Some(var_241) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_242);
    }
}

pub fn serialize_structure_crate_model_create_svm_active_directory_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateSvmActiveDirectoryConfiguration,
) {
    if let Some(var_243) = &input.net_bios_name {
        object.key("NetBiosName").string(var_243);
    }
    if let Some(var_244) = &input.self_managed_active_directory_configuration {
        let mut object_245 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_245, var_244);
        object_245.finish();
    }
}

pub fn serialize_structure_crate_model_create_ontap_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOntapVolumeConfiguration,
) {
    if let Some(var_246) = &input.junction_path {
        object.key("JunctionPath").string(var_246);
    }
    if let Some(var_247) = &input.security_style {
        object.key("SecurityStyle").string(var_247.as_str());
    }
    if let Some(var_248) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_249);
    }
    if let Some(var_250) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_250);
    }
    if let Some(var_251) = &input.tiering_policy {
        let mut object_252 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_252, var_251);
        object_252.finish();
    }
}

pub fn serialize_structure_crate_model_delete_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemWindowsConfiguration,
) {
    if let Some(var_253) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_253);
    }
    if let Some(var_254) = &input.final_backup_tags {
        let mut array_255 = object.key("FinalBackupTags").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_257, item_256);
                object_257.finish();
            }
        }
        array_255.finish();
    }
}

pub fn serialize_structure_crate_model_delete_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemLustreConfiguration,
) {
    if let Some(var_258) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_258);
    }
    if let Some(var_259) = &input.final_backup_tags {
        let mut array_260 = object.key("FinalBackupTags").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_262, item_261);
                object_262.finish();
            }
        }
        array_260.finish();
    }
}

pub fn serialize_structure_crate_model_delete_volume_ontap_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOntapConfiguration,
) {
    if let Some(var_263) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_263);
    }
    if let Some(var_264) = &input.final_backup_tags {
        let mut array_265 = object.key("FinalBackupTags").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268.as_str());
    }
    if let Some(var_269) = &input.values {
        let mut array_270 = object.key("Values").start_array();
        for item_271 in var_269 {
            {
                array_270.value().string(item_271);
            }
        }
        array_270.finish();
    }
}

pub fn serialize_structure_crate_model_data_repository_task_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataRepositoryTaskFilter,
) {
    if let Some(var_272) = &input.name {
        object.key("Name").string(var_272.as_str());
    }
    if let Some(var_273) = &input.values {
        let mut array_274 = object.key("Values").start_array();
        for item_275 in var_273 {
            {
                array_274.value().string(item_275);
            }
        }
        array_274.finish();
    }
}

pub fn serialize_structure_crate_model_storage_virtual_machine_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageVirtualMachineFilter,
) {
    if let Some(var_276) = &input.name {
        object.key("Name").string(var_276.as_str());
    }
    if let Some(var_277) = &input.values {
        let mut array_278 = object.key("Values").start_array();
        for item_279 in var_277 {
            {
                array_278.value().string(item_279);
            }
        }
        array_278.finish();
    }
}

pub fn serialize_structure_crate_model_volume_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFilter,
) {
    if let Some(var_280) = &input.name {
        object.key("Name").string(var_280.as_str());
    }
    if let Some(var_281) = &input.values {
        let mut array_282 = object.key("Values").start_array();
        for item_283 in var_281 {
            {
                array_282.value().string(item_283);
            }
        }
        array_282.finish();
    }
}

pub fn serialize_structure_crate_model_update_file_system_windows_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemWindowsConfiguration,
) {
    if let Some(var_284) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_284);
    }
    if let Some(var_285) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_285);
    }
    if let Some(var_286) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_286).into()),
        );
    }
    if let Some(var_287) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.self_managed_active_directory_configuration {
        let mut object_289 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_289, var_288);
        object_289.finish();
    }
    if let Some(var_290) = &input.audit_log_configuration {
        let mut object_291 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_291,
            var_290,
        );
        object_291.finish();
    }
}

pub fn serialize_structure_crate_model_update_file_system_lustre_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemLustreConfiguration,
) {
    if let Some(var_292) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_292);
    }
    if let Some(var_293) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_293);
    }
    if let Some(var_294) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_295.as_str());
    }
    if let Some(var_296) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_296.as_str());
    }
}

pub fn serialize_structure_crate_model_update_file_system_ontap_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOntapConfiguration,
) {
    if let Some(var_297) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    if let Some(var_298) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_298);
    }
    if let Some(var_299) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_299);
    }
    if let Some(var_300) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_300);
    }
}

pub fn serialize_structure_crate_model_update_svm_active_directory_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateSvmActiveDirectoryConfiguration,
) {
    if let Some(var_301) = &input.self_managed_active_directory_configuration {
        let mut object_302 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_302, var_301);
        object_302.finish();
    }
}

pub fn serialize_structure_crate_model_update_ontap_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOntapVolumeConfiguration,
) {
    if let Some(var_303) = &input.junction_path {
        object.key("JunctionPath").string(var_303);
    }
    if let Some(var_304) = &input.security_style {
        object.key("SecurityStyle").string(var_304.as_str());
    }
    if let Some(var_305) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_305).into()),
        );
    }
    if let Some(var_306) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_306);
    }
    if let Some(var_307) = &input.tiering_policy {
        let mut object_308 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_308, var_307);
        object_308.finish();
    }
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfiguration,
) {
    if let Some(var_309) = &input.domain_name {
        object.key("DomainName").string(var_309);
    }
    if let Some(var_310) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_310);
    }
    if let Some(var_311) = &input.file_system_administrators_group {
        object.key("FileSystemAdministratorsGroup").string(var_311);
    }
    if let Some(var_312) = &input.user_name {
        object.key("UserName").string(var_312);
    }
    if let Some(var_313) = &input.password {
        object.key("Password").string(var_313);
    }
    if let Some(var_314) = &input.dns_ips {
        let mut array_315 = object.key("DnsIps").start_array();
        for item_316 in var_314 {
            {
                array_315.value().string(item_316);
            }
        }
        array_315.finish();
    }
}

pub fn serialize_structure_crate_model_windows_audit_log_create_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WindowsAuditLogCreateConfiguration,
) {
    if let Some(var_317) = &input.file_access_audit_log_level {
        object
            .key("FileAccessAuditLogLevel")
            .string(var_317.as_str());
    }
    if let Some(var_318) = &input.file_share_access_audit_log_level {
        object
            .key("FileShareAccessAuditLogLevel")
            .string(var_318.as_str());
    }
    if let Some(var_319) = &input.audit_log_destination {
        object.key("AuditLogDestination").string(var_319);
    }
}

pub fn serialize_structure_crate_model_disk_iops_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskIopsConfiguration,
) {
    if let Some(var_320) = &input.mode {
        object.key("Mode").string(var_320.as_str());
    }
    if let Some(var_321) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_321).into()),
        );
    }
}

pub fn serialize_structure_crate_model_tiering_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TieringPolicy,
) {
    if let Some(var_322) = &input.cooling_period {
        object.key("CoolingPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    if let Some(var_323) = &input.name {
        object.key("Name").string(var_323.as_str());
    }
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration_updates(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfigurationUpdates,
) {
    if let Some(var_324) = &input.user_name {
        object.key("UserName").string(var_324);
    }
    if let Some(var_325) = &input.password {
        object.key("Password").string(var_325);
    }
    if let Some(var_326) = &input.dns_ips {
        let mut array_327 = object.key("DnsIps").start_array();
        for item_328 in var_326 {
            {
                array_327.value().string(item_328);
            }
        }
        array_327.finish();
    }
}
