// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1);
    }
    if let Some(var_2) = &input.file_system_id {
        object.key("FileSystemId").string(var_2);
    }
    if let Some(var_3) = &input.aliases {
        let mut array_4 = object.key("Aliases").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.task_id {
        object.key("TaskId").string(var_6);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_7);
    }
    if let Some(var_8) = &input.source_backup_id {
        object.key("SourceBackupId").string(var_8);
    }
    if let Some(var_9) = &input.source_region {
        object.key("SourceRegion").string(var_9);
    }
    if let Some(var_10) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_10);
    }
    if let Some(var_11) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.file_system_id {
        object.key("FileSystemId").string(var_16);
    }
    if let Some(var_17) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.volume_id {
        object.key("VolumeId").string(var_22);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.r#type {
        object.key("Type").string(var_23.as_str());
    }
    if let Some(var_24) = &input.paths {
        let mut array_25 = object.key("Paths").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.file_system_id {
        object.key("FileSystemId").string(var_27);
    }
    if let Some(var_28) = &input.report {
        let mut object_29 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_completion_report(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_30);
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_35);
    }
    if let Some(var_36) = &input.file_system_type {
        object.key("FileSystemType").string(var_36.as_str());
    }
    if let Some(var_37) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.storage_type {
        object.key("StorageType").string(var_38.as_str());
    }
    if let Some(var_39) = &input.subnet_ids {
        let mut array_40 = object.key("SubnetIds").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41);
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.security_group_ids {
        let mut array_43 = object.key("SecurityGroupIds").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44);
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.tags {
        let mut array_46 = object.key("Tags").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_49);
    }
    if let Some(var_50) = &input.windows_configuration {
        let mut object_51 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.lustre_configuration {
        let mut object_53 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.ontap_configuration {
        let mut object_55 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_ontap_configuration(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_56);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.backup_id {
        object.key("BackupId").string(var_57);
    }
    if let Some(var_58) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_58);
    }
    if let Some(var_59) = &input.subnet_ids {
        let mut array_60 = object.key("SubnetIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61);
            }
        }
        array_60.finish();
    }
    if let Some(var_62) = &input.security_group_ids {
        let mut array_63 = object.key("SecurityGroupIds").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64);
            }
        }
        array_63.finish();
    }
    if let Some(var_65) = &input.tags {
        let mut array_66 = object.key("Tags").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_68, item_67)?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.windows_configuration {
        let mut object_70 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_70,
            var_69,
        )?;
        object_70.finish();
    }
    if let Some(var_71) = &input.lustre_configuration {
        let mut object_72 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_72,
            var_71,
        )?;
        object_72.finish();
    }
    if let Some(var_73) = &input.storage_type {
        object.key("StorageType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_74);
    }
    if let Some(var_75) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_75);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.active_directory_configuration {
        let mut object_77 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_svm_active_directory_configuration(
            &mut object_77,
            var_76,
        )?;
        object_77.finish();
    }
    if let Some(var_78) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_78);
    }
    if let Some(var_79) = &input.file_system_id {
        object.key("FileSystemId").string(var_79);
    }
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80);
    }
    if let Some(var_81) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_81);
    }
    if let Some(var_82) = &input.tags {
        let mut array_83 = object.key("Tags").start_array();
        for item_84 in var_82 {
            {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_85, item_84)?;
                object_85.finish();
            }
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.root_volume_security_style {
        object
            .key("RootVolumeSecurityStyle")
            .string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_87);
    }
    if let Some(var_88) = &input.volume_type {
        object.key("VolumeType").string(var_88.as_str());
    }
    if let Some(var_89) = &input.name {
        object.key("Name").string(var_89);
    }
    if let Some(var_90) = &input.ontap_configuration {
        let mut object_91 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.backup_id {
        object.key("BackupId").string(var_96);
    }
    if let Some(var_97) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_97);
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98);
    }
    if let Some(var_99) = &input.ontap_configuration {
        let mut object_100 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    if let Some(var_101) = &input.tags {
        let mut array_102 = object.key("Tags").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.backup_id {
        object.key("BackupId").string(var_105);
    }
    if let Some(var_106) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_106);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.file_system_id {
        object.key("FileSystemId").string(var_107);
    }
    if let Some(var_108) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_108);
    }
    if let Some(var_109) = &input.windows_configuration {
        let mut object_110 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_windows_configuration(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    if let Some(var_111) = &input.lustre_configuration {
        let mut object_112 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_lustre_configuration(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_113);
    }
    if let Some(var_114) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_114);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_115);
    }
    if let Some(var_116) = &input.volume_id {
        object.key("VolumeId").string(var_116);
    }
    if let Some(var_117) = &input.ontap_configuration {
        let mut object_118 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_ontap_configuration(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.backup_ids {
        let mut array_120 = object.key("BackupIds").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121);
            }
        }
        array_120.finish();
    }
    if let Some(var_122) = &input.filters {
        let mut array_123 = object.key("Filters").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_125, item_124)?;
                object_125.finish();
            }
        }
        array_123.finish();
    }
    if let Some(var_126) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    if let Some(var_127) = &input.next_token {
        object.key("NextToken").string(var_127);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_repository_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.task_ids {
        let mut array_129 = object.key("TaskIds").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130);
            }
        }
        array_129.finish();
    }
    if let Some(var_131) = &input.filters {
        let mut array_132 = object.key("Filters").start_array();
        for item_133 in var_131 {
            {
                let mut object_134 = array_132.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_repository_task_filter(
                    &mut object_134,
                    item_133,
                )?;
                object_134.finish();
            }
        }
        array_132.finish();
    }
    if let Some(var_135) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    if let Some(var_136) = &input.next_token {
        object.key("NextToken").string(var_136);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_137);
    }
    if let Some(var_138) = &input.file_system_id {
        object.key("FileSystemId").string(var_138);
    }
    if let Some(var_139) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.next_token {
        object.key("NextToken").string(var_140);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_systems_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.file_system_ids {
        let mut array_142 = object.key("FileSystemIds").start_array();
        for item_143 in var_141 {
            {
                array_142.value().string(item_143);
            }
        }
        array_142.finish();
    }
    if let Some(var_144) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    if let Some(var_145) = &input.next_token {
        object.key("NextToken").string(var_145);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_storage_virtual_machines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorageVirtualMachinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.storage_virtual_machine_ids {
        let mut array_147 = object.key("StorageVirtualMachineIds").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148);
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.filters {
        let mut array_150 = object.key("Filters").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_virtual_machine_filter(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_153).into()),
        );
    }
    if let Some(var_154) = &input.next_token {
        object.key("NextToken").string(var_154);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_volumes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVolumesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.volume_ids {
        let mut array_156 = object.key("VolumeIds").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157);
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.filters {
        let mut array_159 = object.key("Filters").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_filter(
                    &mut object_161,
                    item_160,
                )?;
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_164);
    }
    if let Some(var_165) = &input.file_system_id {
        object.key("FileSystemId").string(var_165);
    }
    if let Some(var_166) = &input.aliases {
        let mut array_167 = object.key("Aliases").start_array();
        for item_168 in var_166 {
            {
                array_167.value().string(item_168);
            }
        }
        array_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.resource_arn {
        object.key("ResourceARN").string(var_169);
    }
    if let Some(var_170) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    if let Some(var_171) = &input.next_token {
        object.key("NextToken").string(var_171);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.resource_arn {
        object.key("ResourceARN").string(var_172);
    }
    if let Some(var_173) = &input.tags {
        let mut array_174 = object.key("Tags").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_176, item_175)?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.resource_arn {
        object.key("ResourceARN").string(var_177);
    }
    if let Some(var_178) = &input.tag_keys {
        let mut array_179 = object.key("TagKeys").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.file_system_id {
        object.key("FileSystemId").string(var_181);
    }
    if let Some(var_182) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_182);
    }
    if let Some(var_183) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.windows_configuration {
        let mut object_185 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_windows_configuration(
            &mut object_185,
            var_184,
        )?;
        object_185.finish();
    }
    if let Some(var_186) = &input.lustre_configuration {
        let mut object_187 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_lustre_configuration(
            &mut object_187,
            var_186,
        )?;
        object_187.finish();
    }
    if let Some(var_188) = &input.ontap_configuration {
        let mut object_189 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_ontap_configuration(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.active_directory_configuration {
        let mut object_191 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_svm_active_directory_configuration(
            &mut object_191,
            var_190,
        )?;
        object_191.finish();
    }
    if let Some(var_192) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_192);
    }
    if let Some(var_193) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_193);
    }
    if let Some(var_194) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_194);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_195);
    }
    if let Some(var_196) = &input.volume_id {
        object.key("VolumeId").string(var_196);
    }
    if let Some(var_197) = &input.ontap_configuration {
        let mut object_198 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ontap_volume_configuration(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.key {
        object.key("Key").string(var_199);
    }
    if let Some(var_200) = &input.value {
        object.key("Value").string(var_200);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_completion_report(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompletionReport,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.enabled {
        object.key("Enabled").boolean(*var_201);
    }
    if let Some(var_202) = &input.path {
        object.key("Path").string(var_202);
    }
    if let Some(var_203) = &input.format {
        object.key("Format").string(var_203.as_str());
    }
    if let Some(var_204) = &input.scope {
        object.key("Scope").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_205);
    }
    if let Some(var_206) = &input.self_managed_active_directory_configuration {
        let mut object_207 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_207, var_206)?;
        object_207.finish();
    }
    if let Some(var_208) = &input.deployment_type {
        object.key("DeploymentType").string(var_208.as_str());
    }
    if let Some(var_209) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_209);
    }
    if let Some(var_210) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    if let Some(var_211) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_211);
    }
    if let Some(var_212) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_212);
    }
    if let Some(var_213) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_214);
    }
    if let Some(var_215) = &input.aliases {
        let mut array_216 = object.key("Aliases").start_array();
        for item_217 in var_215 {
            {
                array_216.value().string(item_217);
            }
        }
        array_216.finish();
    }
    if let Some(var_218) = &input.audit_log_configuration {
        let mut object_219 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_220);
    }
    if let Some(var_221) = &input.import_path {
        object.key("ImportPath").string(var_221);
    }
    if let Some(var_222) = &input.export_path {
        object.key("ExportPath").string(var_222);
    }
    if let Some(var_223) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_223).into()),
        );
    }
    if let Some(var_224) = &input.deployment_type {
        object.key("DeploymentType").string(var_224.as_str());
    }
    if let Some(var_225) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_225.as_str());
    }
    if let Some(var_226) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_227);
    }
    if let Some(var_228) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_228).into()),
        );
    }
    if let Some(var_229) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_229);
    }
    if let Some(var_230) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_230.as_str());
    }
    if let Some(var_231) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    if let Some(var_233) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_233);
    }
    if let Some(var_234) = &input.deployment_type {
        object.key("DeploymentType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.endpoint_ip_address_range {
        object.key("EndpointIpAddressRange").string(var_235);
    }
    if let Some(var_236) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_236);
    }
    if let Some(var_237) = &input.disk_iops_configuration {
        let mut object_238 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    if let Some(var_239) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_239);
    }
    if let Some(var_240) = &input.route_table_ids {
        let mut array_241 = object.key("RouteTableIds").start_array();
        for item_242 in var_240 {
            {
                array_241.value().string(item_242);
            }
        }
        array_241.finish();
    }
    if let Some(var_243) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_244);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.net_bios_name {
        object.key("NetBiosName").string(var_245);
    }
    if let Some(var_246) = &input.self_managed_active_directory_configuration {
        let mut object_247 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_247, var_246)?;
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.junction_path {
        object.key("JunctionPath").string(var_248);
    }
    if let Some(var_249) = &input.security_style {
        object.key("SecurityStyle").string(var_249.as_str());
    }
    if let Some(var_250) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_250).into()),
        );
    }
    if let Some(var_251) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_251);
    }
    if let Some(var_252) = &input.storage_virtual_machine_id {
        object.key("StorageVirtualMachineId").string(var_252);
    }
    if let Some(var_253) = &input.tiering_policy {
        let mut object_254 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_254, var_253)?;
        object_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_255);
    }
    if let Some(var_256) = &input.final_backup_tags {
        let mut array_257 = object.key("FinalBackupTags").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_259, item_258)?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_260);
    }
    if let Some(var_261) = &input.final_backup_tags {
        let mut array_262 = object.key("FinalBackupTags").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_264, item_263)?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_volume_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_265);
    }
    if let Some(var_266) = &input.final_backup_tags {
        let mut array_267 = object.key("FinalBackupTags").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_269, item_268)?;
                object_269.finish();
            }
        }
        array_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.name {
        object.key("Name").string(var_270.as_str());
    }
    if let Some(var_271) = &input.values {
        let mut array_272 = object.key("Values").start_array();
        for item_273 in var_271 {
            {
                array_272.value().string(item_273);
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_repository_task_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataRepositoryTaskFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.name {
        object.key("Name").string(var_274.as_str());
    }
    if let Some(var_275) = &input.values {
        let mut array_276 = object.key("Values").start_array();
        for item_277 in var_275 {
            {
                array_276.value().string(item_277);
            }
        }
        array_276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_virtual_machine_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageVirtualMachineFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.name {
        object.key("Name").string(var_278.as_str());
    }
    if let Some(var_279) = &input.values {
        let mut array_280 = object.key("Values").start_array();
        for item_281 in var_279 {
            {
                array_280.value().string(item_281);
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.name {
        object.key("Name").string(var_282.as_str());
    }
    if let Some(var_283) = &input.values {
        let mut array_284 = object.key("Values").start_array();
        for item_285 in var_283 {
            {
                array_284.value().string(item_285);
            }
        }
        array_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_286);
    }
    if let Some(var_287) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_287);
    }
    if let Some(var_288) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    if let Some(var_289) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_289).into()),
        );
    }
    if let Some(var_290) = &input.self_managed_active_directory_configuration {
        let mut object_291 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_291, var_290)?;
        object_291.finish();
    }
    if let Some(var_292) = &input.audit_log_configuration {
        let mut object_293 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_293,
            var_292,
        )?;
        object_293.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_294);
    }
    if let Some(var_295) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_295);
    }
    if let Some(var_296) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_297.as_str());
    }
    if let Some(var_298) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    if let Some(var_300) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_300);
    }
    if let Some(var_301) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_301);
    }
    if let Some(var_302) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_302);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.self_managed_active_directory_configuration {
        let mut object_304 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_304, var_303)?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.junction_path {
        object.key("JunctionPath").string(var_305);
    }
    if let Some(var_306) = &input.security_style {
        object.key("SecurityStyle").string(var_306.as_str());
    }
    if let Some(var_307) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_307).into()),
        );
    }
    if let Some(var_308) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_308);
    }
    if let Some(var_309) = &input.tiering_policy {
        let mut object_310 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_310, var_309)?;
        object_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.domain_name {
        object.key("DomainName").string(var_311);
    }
    if let Some(var_312) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_312);
    }
    if let Some(var_313) = &input.file_system_administrators_group {
        object.key("FileSystemAdministratorsGroup").string(var_313);
    }
    if let Some(var_314) = &input.user_name {
        object.key("UserName").string(var_314);
    }
    if let Some(var_315) = &input.password {
        object.key("Password").string(var_315);
    }
    if let Some(var_316) = &input.dns_ips {
        let mut array_317 = object.key("DnsIps").start_array();
        for item_318 in var_316 {
            {
                array_317.value().string(item_318);
            }
        }
        array_317.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_windows_audit_log_create_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WindowsAuditLogCreateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.file_access_audit_log_level {
        object
            .key("FileAccessAuditLogLevel")
            .string(var_319.as_str());
    }
    if let Some(var_320) = &input.file_share_access_audit_log_level {
        object
            .key("FileShareAccessAuditLogLevel")
            .string(var_320.as_str());
    }
    if let Some(var_321) = &input.audit_log_destination {
        object.key("AuditLogDestination").string(var_321);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_disk_iops_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskIopsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.mode {
        object.key("Mode").string(var_322.as_str());
    }
    if let Some(var_323) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tiering_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TieringPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.cooling_period {
        object.key("CoolingPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration_updates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfigurationUpdates,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.user_name {
        object.key("UserName").string(var_326);
    }
    if let Some(var_327) = &input.password {
        object.key("Password").string(var_327);
    }
    if let Some(var_328) = &input.dns_ips {
        let mut array_329 = object.key("DnsIps").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330);
            }
        }
        array_329.finish();
    }
    Ok(())
}
