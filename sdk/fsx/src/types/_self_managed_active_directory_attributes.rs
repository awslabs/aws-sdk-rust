// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SelfManagedActiveDirectoryAttributes {
    /// <p>The fully qualified domain name of the self-managed AD directory.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.</p>
    #[doc(hidden)]
    pub organizational_unit_distinguished_name: std::option::Option<std::string::String>,
    /// <p>The name of the domain group whose members have administrative privileges for the FSx file system.</p>
    #[doc(hidden)]
    pub file_system_administrators_group: std::option::Option<std::string::String>,
    /// <p>The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.</p>
    #[doc(hidden)]
    pub dns_ips: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SelfManagedActiveDirectoryAttributes {
    /// <p>The fully qualified domain name of the self-managed AD directory.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.</p>
    pub fn organizational_unit_distinguished_name(&self) -> std::option::Option<&str> {
        self.organizational_unit_distinguished_name.as_deref()
    }
    /// <p>The name of the domain group whose members have administrative privileges for the FSx file system.</p>
    pub fn file_system_administrators_group(&self) -> std::option::Option<&str> {
        self.file_system_administrators_group.as_deref()
    }
    /// <p>The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.</p>
    pub fn dns_ips(&self) -> std::option::Option<&[std::string::String]> {
        self.dns_ips.as_deref()
    }
}
impl SelfManagedActiveDirectoryAttributes {
    /// Creates a new builder-style object to manufacture [`SelfManagedActiveDirectoryAttributes`](crate::types::SelfManagedActiveDirectoryAttributes).
    pub fn builder() -> crate::types::builders::SelfManagedActiveDirectoryAttributesBuilder {
        crate::types::builders::SelfManagedActiveDirectoryAttributesBuilder::default()
    }
}

/// A builder for [`SelfManagedActiveDirectoryAttributes`](crate::types::SelfManagedActiveDirectoryAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SelfManagedActiveDirectoryAttributesBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) organizational_unit_distinguished_name: std::option::Option<std::string::String>,
    pub(crate) file_system_administrators_group: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) dns_ips: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SelfManagedActiveDirectoryAttributesBuilder {
    /// <p>The fully qualified domain name of the self-managed AD directory.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The fully qualified domain name of the self-managed AD directory.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.</p>
    pub fn organizational_unit_distinguished_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.organizational_unit_distinguished_name = Some(input.into());
        self
    }
    /// <p>The fully qualified distinguished name of the organizational unit within the self-managed AD directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.</p>
    pub fn set_organizational_unit_distinguished_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organizational_unit_distinguished_name = input;
        self
    }
    /// <p>The name of the domain group whose members have administrative privileges for the FSx file system.</p>
    pub fn file_system_administrators_group(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.file_system_administrators_group = Some(input.into());
        self
    }
    /// <p>The name of the domain group whose members have administrative privileges for the FSx file system.</p>
    pub fn set_file_system_administrators_group(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.file_system_administrators_group = input;
        self
    }
    /// <p>The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The user name for the service account on your self-managed AD domain that FSx uses to join to your AD domain.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// Appends an item to `dns_ips`.
    ///
    /// To override the contents of this collection use [`set_dns_ips`](Self::set_dns_ips).
    ///
    /// <p>A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.</p>
    pub fn dns_ips(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.dns_ips.unwrap_or_default();
        v.push(input.into());
        self.dns_ips = Some(v);
        self
    }
    /// <p>A list of up to three IP addresses of DNS servers or domain controllers in the self-managed AD directory.</p>
    pub fn set_dns_ips(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.dns_ips = input;
        self
    }
    /// Consumes the builder and constructs a [`SelfManagedActiveDirectoryAttributes`](crate::types::SelfManagedActiveDirectoryAttributes).
    pub fn build(self) -> crate::types::SelfManagedActiveDirectoryAttributes {
        crate::types::SelfManagedActiveDirectoryAttributes {
            domain_name: self.domain_name,
            organizational_unit_distinguished_name: self.organizational_unit_distinguished_name,
            file_system_administrators_group: self.file_system_administrators_group,
            user_name: self.user_name,
            dns_ips: self.dns_ips,
        }
    }
}
