// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response object for the Amazon File Cache resource being created in the <code>CreateFileCache</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileCacheCreating {
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The system-generated, unique ID of the cache.</p>
    pub file_cache_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of cache, which must be <code>LUSTRE</code>.</p>
    pub file_cache_type: ::std::option::Option<crate::types::FileCacheType>,
    /// <p>The Lustre version of the cache, which must be <code>2.12</code>.</p>
    pub file_cache_type_version: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle status of the cache. The following are the possible values and what they mean:</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The cache is in a healthy state, and is reachable and available for use.</p> </li>
    /// <li> <p> <code>CREATING</code> - The new cache is being created.</p> </li>
    /// <li> <p> <code>DELETING</code> - An existing cache is being deleted.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The cache is undergoing a customer-initiated update.</p> </li>
    /// <li> <p> <code>FAILED</code> - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.</p> </li>
    /// </ul>
    pub lifecycle: ::std::option::Option<crate::types::FileCacheLifecycle>,
    /// <p>A structure providing details of any failures that occurred.</p>
    pub failure_details: ::std::option::Option<crate::types::FileCacheFailureDetails>,
    /// <p>The storage capacity of the cache in gibibytes (GiB).</p>
    pub storage_capacity: ::std::option::Option<i32>,
    /// <p>The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of network interface IDs.</p>
    pub network_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Domain Name System (DNS) name for the cache.</p>
    pub dns_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A boolean flag indicating whether tags for the cache should be copied to data repository associations.</p>
    pub copy_tags_to_data_repository_associations: ::std::option::Option<bool>,
    /// <p>The configuration for the Amazon File Cache resource.</p>
    pub lustre_configuration: ::std::option::Option<crate::types::FileCacheLustreConfiguration>,
    /// <p>A list of IDs of data repository associations that are associated with this cache.</p>
    pub data_repository_association_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FileCacheCreating {
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The system-generated, unique ID of the cache.</p>
    pub fn file_cache_id(&self) -> ::std::option::Option<&str> {
        self.file_cache_id.as_deref()
    }
    /// <p>The type of cache, which must be <code>LUSTRE</code>.</p>
    pub fn file_cache_type(&self) -> ::std::option::Option<&crate::types::FileCacheType> {
        self.file_cache_type.as_ref()
    }
    /// <p>The Lustre version of the cache, which must be <code>2.12</code>.</p>
    pub fn file_cache_type_version(&self) -> ::std::option::Option<&str> {
        self.file_cache_type_version.as_deref()
    }
    /// <p>The lifecycle status of the cache. The following are the possible values and what they mean:</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The cache is in a healthy state, and is reachable and available for use.</p> </li>
    /// <li> <p> <code>CREATING</code> - The new cache is being created.</p> </li>
    /// <li> <p> <code>DELETING</code> - An existing cache is being deleted.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The cache is undergoing a customer-initiated update.</p> </li>
    /// <li> <p> <code>FAILED</code> - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.</p> </li>
    /// </ul>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::FileCacheLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>A structure providing details of any failures that occurred.</p>
    pub fn failure_details(&self) -> ::std::option::Option<&crate::types::FileCacheFailureDetails> {
        self.failure_details.as_ref()
    }
    /// <p>The storage capacity of the cache in gibibytes (GiB).</p>
    pub fn storage_capacity(&self) -> ::std::option::Option<i32> {
        self.storage_capacity
    }
    /// <p>The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of network interface IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interface_ids.is_none()`.
    pub fn network_interface_ids(&self) -> &[::std::string::String] {
        self.network_interface_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Domain Name System (DNS) name for the cache.</p>
    pub fn dns_name(&self) -> ::std::option::Option<&str> {
        self.dns_name.as_deref()
    }
    /// <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>A boolean flag indicating whether tags for the cache should be copied to data repository associations.</p>
    pub fn copy_tags_to_data_repository_associations(&self) -> ::std::option::Option<bool> {
        self.copy_tags_to_data_repository_associations
    }
    /// <p>The configuration for the Amazon File Cache resource.</p>
    pub fn lustre_configuration(&self) -> ::std::option::Option<&crate::types::FileCacheLustreConfiguration> {
        self.lustre_configuration.as_ref()
    }
    /// <p>A list of IDs of data repository associations that are associated with this cache.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_repository_association_ids.is_none()`.
    pub fn data_repository_association_ids(&self) -> &[::std::string::String] {
        self.data_repository_association_ids.as_deref().unwrap_or_default()
    }
}
impl FileCacheCreating {
    /// Creates a new builder-style object to manufacture [`FileCacheCreating`](crate::types::FileCacheCreating).
    pub fn builder() -> crate::types::builders::FileCacheCreatingBuilder {
        crate::types::builders::FileCacheCreatingBuilder::default()
    }
}

/// A builder for [`FileCacheCreating`](crate::types::FileCacheCreating).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FileCacheCreatingBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) file_cache_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_cache_type: ::std::option::Option<crate::types::FileCacheType>,
    pub(crate) file_cache_type_version: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::FileCacheLifecycle>,
    pub(crate) failure_details: ::std::option::Option<crate::types::FileCacheFailureDetails>,
    pub(crate) storage_capacity: ::std::option::Option<i32>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) network_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) copy_tags_to_data_repository_associations: ::std::option::Option<bool>,
    pub(crate) lustre_configuration: ::std::option::Option<crate::types::FileCacheLustreConfiguration>,
    pub(crate) data_repository_association_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FileCacheCreatingBuilder {
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The system-generated, unique ID of the cache.</p>
    pub fn file_cache_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_cache_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated, unique ID of the cache.</p>
    pub fn set_file_cache_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_cache_id = input;
        self
    }
    /// <p>The system-generated, unique ID of the cache.</p>
    pub fn get_file_cache_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_cache_id
    }
    /// <p>The type of cache, which must be <code>LUSTRE</code>.</p>
    pub fn file_cache_type(mut self, input: crate::types::FileCacheType) -> Self {
        self.file_cache_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of cache, which must be <code>LUSTRE</code>.</p>
    pub fn set_file_cache_type(mut self, input: ::std::option::Option<crate::types::FileCacheType>) -> Self {
        self.file_cache_type = input;
        self
    }
    /// <p>The type of cache, which must be <code>LUSTRE</code>.</p>
    pub fn get_file_cache_type(&self) -> &::std::option::Option<crate::types::FileCacheType> {
        &self.file_cache_type
    }
    /// <p>The Lustre version of the cache, which must be <code>2.12</code>.</p>
    pub fn file_cache_type_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_cache_type_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Lustre version of the cache, which must be <code>2.12</code>.</p>
    pub fn set_file_cache_type_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_cache_type_version = input;
        self
    }
    /// <p>The Lustre version of the cache, which must be <code>2.12</code>.</p>
    pub fn get_file_cache_type_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_cache_type_version
    }
    /// <p>The lifecycle status of the cache. The following are the possible values and what they mean:</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The cache is in a healthy state, and is reachable and available for use.</p> </li>
    /// <li> <p> <code>CREATING</code> - The new cache is being created.</p> </li>
    /// <li> <p> <code>DELETING</code> - An existing cache is being deleted.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The cache is undergoing a customer-initiated update.</p> </li>
    /// <li> <p> <code>FAILED</code> - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.</p> </li>
    /// </ul>
    pub fn lifecycle(mut self, input: crate::types::FileCacheLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle status of the cache. The following are the possible values and what they mean:</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The cache is in a healthy state, and is reachable and available for use.</p> </li>
    /// <li> <p> <code>CREATING</code> - The new cache is being created.</p> </li>
    /// <li> <p> <code>DELETING</code> - An existing cache is being deleted.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The cache is undergoing a customer-initiated update.</p> </li>
    /// <li> <p> <code>FAILED</code> - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.</p> </li>
    /// </ul>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::FileCacheLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the cache. The following are the possible values and what they mean:</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The cache is in a healthy state, and is reachable and available for use.</p> </li>
    /// <li> <p> <code>CREATING</code> - The new cache is being created.</p> </li>
    /// <li> <p> <code>DELETING</code> - An existing cache is being deleted.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The cache is undergoing a customer-initiated update.</p> </li>
    /// <li> <p> <code>FAILED</code> - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.</p> </li>
    /// </ul>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::FileCacheLifecycle> {
        &self.lifecycle
    }
    /// <p>A structure providing details of any failures that occurred.</p>
    pub fn failure_details(mut self, input: crate::types::FileCacheFailureDetails) -> Self {
        self.failure_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure providing details of any failures that occurred.</p>
    pub fn set_failure_details(mut self, input: ::std::option::Option<crate::types::FileCacheFailureDetails>) -> Self {
        self.failure_details = input;
        self
    }
    /// <p>A structure providing details of any failures that occurred.</p>
    pub fn get_failure_details(&self) -> &::std::option::Option<crate::types::FileCacheFailureDetails> {
        &self.failure_details
    }
    /// <p>The storage capacity of the cache in gibibytes (GiB).</p>
    pub fn storage_capacity(mut self, input: i32) -> Self {
        self.storage_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage capacity of the cache in gibibytes (GiB).</p>
    pub fn set_storage_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_capacity = input;
        self
    }
    /// <p>The storage capacity of the cache in gibibytes (GiB).</p>
    pub fn get_storage_capacity(&self) -> &::std::option::Option<i32> {
        &self.storage_capacity
    }
    /// <p>The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Appends an item to `network_interface_ids`.
    ///
    /// To override the contents of this collection use [`set_network_interface_ids`](Self::set_network_interface_ids).
    ///
    /// <p>A list of network interface IDs.</p>
    pub fn network_interface_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_interface_ids.unwrap_or_default();
        v.push(input.into());
        self.network_interface_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of network interface IDs.</p>
    pub fn set_network_interface_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_interface_ids = input;
        self
    }
    /// <p>A list of network interface IDs.</p>
    pub fn get_network_interface_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_interface_ids
    }
    /// <p>The Domain Name System (DNS) name for the cache.</p>
    pub fn dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Domain Name System (DNS) name for the cache.</p>
    pub fn set_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_name = input;
        self
    }
    /// <p>The Domain Name System (DNS) name for the cache.</p>
    pub fn get_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_name
    }
    /// <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>A boolean flag indicating whether tags for the cache should be copied to data repository associations.</p>
    pub fn copy_tags_to_data_repository_associations(mut self, input: bool) -> Self {
        self.copy_tags_to_data_repository_associations = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag indicating whether tags for the cache should be copied to data repository associations.</p>
    pub fn set_copy_tags_to_data_repository_associations(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags_to_data_repository_associations = input;
        self
    }
    /// <p>A boolean flag indicating whether tags for the cache should be copied to data repository associations.</p>
    pub fn get_copy_tags_to_data_repository_associations(&self) -> &::std::option::Option<bool> {
        &self.copy_tags_to_data_repository_associations
    }
    /// <p>The configuration for the Amazon File Cache resource.</p>
    pub fn lustre_configuration(mut self, input: crate::types::FileCacheLustreConfiguration) -> Self {
        self.lustre_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the Amazon File Cache resource.</p>
    pub fn set_lustre_configuration(mut self, input: ::std::option::Option<crate::types::FileCacheLustreConfiguration>) -> Self {
        self.lustre_configuration = input;
        self
    }
    /// <p>The configuration for the Amazon File Cache resource.</p>
    pub fn get_lustre_configuration(&self) -> &::std::option::Option<crate::types::FileCacheLustreConfiguration> {
        &self.lustre_configuration
    }
    /// Appends an item to `data_repository_association_ids`.
    ///
    /// To override the contents of this collection use [`set_data_repository_association_ids`](Self::set_data_repository_association_ids).
    ///
    /// <p>A list of IDs of data repository associations that are associated with this cache.</p>
    pub fn data_repository_association_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.data_repository_association_ids.unwrap_or_default();
        v.push(input.into());
        self.data_repository_association_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IDs of data repository associations that are associated with this cache.</p>
    pub fn set_data_repository_association_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.data_repository_association_ids = input;
        self
    }
    /// <p>A list of IDs of data repository associations that are associated with this cache.</p>
    pub fn get_data_repository_association_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.data_repository_association_ids
    }
    /// Consumes the builder and constructs a [`FileCacheCreating`](crate::types::FileCacheCreating).
    pub fn build(self) -> crate::types::FileCacheCreating {
        crate::types::FileCacheCreating {
            owner_id: self.owner_id,
            creation_time: self.creation_time,
            file_cache_id: self.file_cache_id,
            file_cache_type: self.file_cache_type,
            file_cache_type_version: self.file_cache_type_version,
            lifecycle: self.lifecycle,
            failure_details: self.failure_details,
            storage_capacity: self.storage_capacity,
            vpc_id: self.vpc_id,
            subnet_ids: self.subnet_ids,
            network_interface_ids: self.network_interface_ids,
            dns_name: self.dns_name,
            kms_key_id: self.kms_key_id,
            resource_arn: self.resource_arn,
            tags: self.tags,
            copy_tags_to_data_repository_associations: self.copy_tags_to_data_repository_associations,
            lustre_configuration: self.lustre_configuration,
            data_repository_association_ids: self.data_repository_association_ids,
        }
    }
}
