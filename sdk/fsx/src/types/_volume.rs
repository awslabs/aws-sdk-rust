// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Volume {
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    pub file_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle status of the volume.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The volume is fully available for use.</p> </li>
    /// <li> <p> <code>CREATED</code> - The volume has been created.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the new volume.</p> </li>
    /// <li> <p> <code>DELETING</code> - Amazon FSx is deleting an existing volume.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx was unable to create the volume.</p> </li>
    /// <li> <p> <code>MISCONFIGURED</code> - The volume is in a failed but recoverable state.</p> </li>
    /// <li> <p> <code>PENDING</code> - Amazon FSx hasn't started creating the volume.</p> </li>
    /// </ul>
    pub lifecycle: ::std::option::Option<crate::types::VolumeLifecycle>,
    /// <p>The name of the volume.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of an Amazon FSx for NetApp ONTAP volume.</p>
    pub ontap_configuration: ::std::option::Option<crate::types::OntapVolumeConfiguration>,
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The system-generated, unique ID of the volume.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the volume.</p>
    pub volume_type: ::std::option::Option<crate::types::VolumeType>,
    /// <p>The reason why the volume lifecycle status changed.</p>
    pub lifecycle_transition_reason: ::std::option::Option<crate::types::LifecycleTransitionReason>,
    /// <p>A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the <code>UpdateVolume</code> action.</p>
    pub administrative_actions: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>,
    /// <p>The configuration of an Amazon FSx for OpenZFS volume.</p>
    pub open_zfs_configuration: ::std::option::Option<crate::types::OpenZfsVolumeConfiguration>,
}
impl Volume {
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    pub fn file_system_id(&self) -> ::std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The lifecycle status of the volume.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The volume is fully available for use.</p> </li>
    /// <li> <p> <code>CREATED</code> - The volume has been created.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the new volume.</p> </li>
    /// <li> <p> <code>DELETING</code> - Amazon FSx is deleting an existing volume.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx was unable to create the volume.</p> </li>
    /// <li> <p> <code>MISCONFIGURED</code> - The volume is in a failed but recoverable state.</p> </li>
    /// <li> <p> <code>PENDING</code> - Amazon FSx hasn't started creating the volume.</p> </li>
    /// </ul>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::VolumeLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>The name of the volume.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The configuration of an Amazon FSx for NetApp ONTAP volume.</p>
    pub fn ontap_configuration(&self) -> ::std::option::Option<&crate::types::OntapVolumeConfiguration> {
        self.ontap_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The system-generated, unique ID of the volume.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The type of the volume.</p>
    pub fn volume_type(&self) -> ::std::option::Option<&crate::types::VolumeType> {
        self.volume_type.as_ref()
    }
    /// <p>The reason why the volume lifecycle status changed.</p>
    pub fn lifecycle_transition_reason(&self) -> ::std::option::Option<&crate::types::LifecycleTransitionReason> {
        self.lifecycle_transition_reason.as_ref()
    }
    /// <p>A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the <code>UpdateVolume</code> action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.administrative_actions.is_none()`.
    pub fn administrative_actions(&self) -> &[crate::types::AdministrativeAction] {
        self.administrative_actions.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of an Amazon FSx for OpenZFS volume.</p>
    pub fn open_zfs_configuration(&self) -> ::std::option::Option<&crate::types::OpenZfsVolumeConfiguration> {
        self.open_zfs_configuration.as_ref()
    }
}
impl Volume {
    /// Creates a new builder-style object to manufacture [`Volume`](crate::types::Volume).
    pub fn builder() -> crate::types::builders::VolumeBuilder {
        crate::types::builders::VolumeBuilder::default()
    }
}

/// A builder for [`Volume`](crate::types::Volume).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VolumeBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) file_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::VolumeLifecycle>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) ontap_configuration: ::std::option::Option<crate::types::OntapVolumeConfiguration>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_type: ::std::option::Option<crate::types::VolumeType>,
    pub(crate) lifecycle_transition_reason: ::std::option::Option<crate::types::LifecycleTransitionReason>,
    pub(crate) administrative_actions: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>,
    pub(crate) open_zfs_configuration: ::std::option::Option<crate::types::OpenZfsVolumeConfiguration>,
}
impl VolumeBuilder {
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    pub fn file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    pub fn set_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The globally unique ID of the file system, assigned by Amazon FSx.</p>
    pub fn get_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_id
    }
    /// <p>The lifecycle status of the volume.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The volume is fully available for use.</p> </li>
    /// <li> <p> <code>CREATED</code> - The volume has been created.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the new volume.</p> </li>
    /// <li> <p> <code>DELETING</code> - Amazon FSx is deleting an existing volume.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx was unable to create the volume.</p> </li>
    /// <li> <p> <code>MISCONFIGURED</code> - The volume is in a failed but recoverable state.</p> </li>
    /// <li> <p> <code>PENDING</code> - Amazon FSx hasn't started creating the volume.</p> </li>
    /// </ul>
    pub fn lifecycle(mut self, input: crate::types::VolumeLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle status of the volume.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The volume is fully available for use.</p> </li>
    /// <li> <p> <code>CREATED</code> - The volume has been created.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the new volume.</p> </li>
    /// <li> <p> <code>DELETING</code> - Amazon FSx is deleting an existing volume.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx was unable to create the volume.</p> </li>
    /// <li> <p> <code>MISCONFIGURED</code> - The volume is in a failed but recoverable state.</p> </li>
    /// <li> <p> <code>PENDING</code> - Amazon FSx hasn't started creating the volume.</p> </li>
    /// </ul>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::VolumeLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the volume.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The volume is fully available for use.</p> </li>
    /// <li> <p> <code>CREATED</code> - The volume has been created.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the new volume.</p> </li>
    /// <li> <p> <code>DELETING</code> - Amazon FSx is deleting an existing volume.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx was unable to create the volume.</p> </li>
    /// <li> <p> <code>MISCONFIGURED</code> - The volume is in a failed but recoverable state.</p> </li>
    /// <li> <p> <code>PENDING</code> - Amazon FSx hasn't started creating the volume.</p> </li>
    /// </ul>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::VolumeLifecycle> {
        &self.lifecycle
    }
    /// <p>The name of the volume.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the volume.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the volume.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The configuration of an Amazon FSx for NetApp ONTAP volume.</p>
    pub fn ontap_configuration(mut self, input: crate::types::OntapVolumeConfiguration) -> Self {
        self.ontap_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of an Amazon FSx for NetApp ONTAP volume.</p>
    pub fn set_ontap_configuration(mut self, input: ::std::option::Option<crate::types::OntapVolumeConfiguration>) -> Self {
        self.ontap_configuration = input;
        self
    }
    /// <p>The configuration of an Amazon FSx for NetApp ONTAP volume.</p>
    pub fn get_ontap_configuration(&self) -> &::std::option::Option<crate::types::OntapVolumeConfiguration> {
        &self.ontap_configuration
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The system-generated, unique ID of the volume.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated, unique ID of the volume.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The system-generated, unique ID of the volume.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The type of the volume.</p>
    pub fn volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.volume_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the volume.</p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<crate::types::VolumeType>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The type of the volume.</p>
    pub fn get_volume_type(&self) -> &::std::option::Option<crate::types::VolumeType> {
        &self.volume_type
    }
    /// <p>The reason why the volume lifecycle status changed.</p>
    pub fn lifecycle_transition_reason(mut self, input: crate::types::LifecycleTransitionReason) -> Self {
        self.lifecycle_transition_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason why the volume lifecycle status changed.</p>
    pub fn set_lifecycle_transition_reason(mut self, input: ::std::option::Option<crate::types::LifecycleTransitionReason>) -> Self {
        self.lifecycle_transition_reason = input;
        self
    }
    /// <p>The reason why the volume lifecycle status changed.</p>
    pub fn get_lifecycle_transition_reason(&self) -> &::std::option::Option<crate::types::LifecycleTransitionReason> {
        &self.lifecycle_transition_reason
    }
    /// Appends an item to `administrative_actions`.
    ///
    /// To override the contents of this collection use [`set_administrative_actions`](Self::set_administrative_actions).
    ///
    /// <p>A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the <code>UpdateVolume</code> action.</p>
    pub fn administrative_actions(mut self, input: crate::types::AdministrativeAction) -> Self {
        let mut v = self.administrative_actions.unwrap_or_default();
        v.push(input);
        self.administrative_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the <code>UpdateVolume</code> action.</p>
    pub fn set_administrative_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>) -> Self {
        self.administrative_actions = input;
        self
    }
    /// <p>A list of administrative actions for the volume that are in process or waiting to be processed. Administrative actions describe changes to the volume that you have initiated using the <code>UpdateVolume</code> action.</p>
    pub fn get_administrative_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>> {
        &self.administrative_actions
    }
    /// <p>The configuration of an Amazon FSx for OpenZFS volume.</p>
    pub fn open_zfs_configuration(mut self, input: crate::types::OpenZfsVolumeConfiguration) -> Self {
        self.open_zfs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of an Amazon FSx for OpenZFS volume.</p>
    pub fn set_open_zfs_configuration(mut self, input: ::std::option::Option<crate::types::OpenZfsVolumeConfiguration>) -> Self {
        self.open_zfs_configuration = input;
        self
    }
    /// <p>The configuration of an Amazon FSx for OpenZFS volume.</p>
    pub fn get_open_zfs_configuration(&self) -> &::std::option::Option<crate::types::OpenZfsVolumeConfiguration> {
        &self.open_zfs_configuration
    }
    /// Consumes the builder and constructs a [`Volume`](crate::types::Volume).
    pub fn build(self) -> crate::types::Volume {
        crate::types::Volume {
            creation_time: self.creation_time,
            file_system_id: self.file_system_id,
            lifecycle: self.lifecycle,
            name: self.name,
            ontap_configuration: self.ontap_configuration,
            resource_arn: self.resource_arn,
            tags: self.tags,
            volume_id: self.volume_id,
            volume_type: self.volume_type,
            lifecycle_transition_reason: self.lifecycle_transition_reason,
            administrative_actions: self.administrative_actions,
            open_zfs_configuration: self.open_zfs_configuration,
        }
    }
}
