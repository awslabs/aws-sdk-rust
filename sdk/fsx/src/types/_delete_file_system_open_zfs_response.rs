// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response object for the Amazon FSx for OpenZFS file system that's being deleted in the <code>DeleteFileSystem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFileSystemOpenZfsResponse {
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    #[doc(hidden)]
    pub final_backup_id: std::option::Option<std::string::String>,
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    #[doc(hidden)]
    pub final_backup_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl DeleteFileSystemOpenZfsResponse {
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn final_backup_id(&self) -> std::option::Option<&str> {
        self.final_backup_id.as_deref()
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn final_backup_tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.final_backup_tags.as_deref()
    }
}
impl DeleteFileSystemOpenZfsResponse {
    /// Creates a new builder-style object to manufacture [`DeleteFileSystemOpenZfsResponse`](crate::types::DeleteFileSystemOpenZfsResponse).
    pub fn builder() -> crate::types::builders::DeleteFileSystemOpenZfsResponseBuilder {
        crate::types::builders::DeleteFileSystemOpenZfsResponseBuilder::default()
    }
}

/// A builder for [`DeleteFileSystemOpenZfsResponse`](crate::types::DeleteFileSystemOpenZfsResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteFileSystemOpenZfsResponseBuilder {
    pub(crate) final_backup_id: std::option::Option<std::string::String>,
    pub(crate) final_backup_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl DeleteFileSystemOpenZfsResponseBuilder {
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn final_backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.final_backup_id = Some(input.into());
        self
    }
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn set_final_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.final_backup_id = input;
        self
    }
    /// Appends an item to `final_backup_tags`.
    ///
    /// To override the contents of this collection use [`set_final_backup_tags`](Self::set_final_backup_tags).
    ///
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn final_backup_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.final_backup_tags.unwrap_or_default();
        v.push(input);
        self.final_backup_tags = Some(v);
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn set_final_backup_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.final_backup_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteFileSystemOpenZfsResponse`](crate::types::DeleteFileSystemOpenZfsResponse).
    pub fn build(self) -> crate::types::DeleteFileSystemOpenZfsResponse {
        crate::types::DeleteFileSystemOpenZfsResponse {
            final_backup_id: self.final_backup_id,
            final_backup_tags: self.final_backup_tags,
        }
    }
}
