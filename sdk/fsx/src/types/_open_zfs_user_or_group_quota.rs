// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for how much storage a user or group can use on the volume. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OpenZfsUserOrGroupQuota {
    /// <p>A value that specifies whether the quota applies to a user or group.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::OpenZfsQuotaType>,
    /// <p>The ID of the user or group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<i32>,
    /// <p>The amount of storage that the user or group can use in gibibytes (GiB).</p>
    #[doc(hidden)]
    pub storage_capacity_quota_gi_b: std::option::Option<i32>,
}
impl OpenZfsUserOrGroupQuota {
    /// <p>A value that specifies whether the quota applies to a user or group.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::OpenZfsQuotaType> {
        self.r#type.as_ref()
    }
    /// <p>The ID of the user or group.</p>
    pub fn id(&self) -> std::option::Option<i32> {
        self.id
    }
    /// <p>The amount of storage that the user or group can use in gibibytes (GiB).</p>
    pub fn storage_capacity_quota_gi_b(&self) -> std::option::Option<i32> {
        self.storage_capacity_quota_gi_b
    }
}
impl OpenZfsUserOrGroupQuota {
    /// Creates a new builder-style object to manufacture [`OpenZfsUserOrGroupQuota`](crate::types::OpenZfsUserOrGroupQuota).
    pub fn builder() -> crate::types::builders::OpenZfsUserOrGroupQuotaBuilder {
        crate::types::builders::OpenZfsUserOrGroupQuotaBuilder::default()
    }
}

/// A builder for [`OpenZfsUserOrGroupQuota`](crate::types::OpenZfsUserOrGroupQuota).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OpenZfsUserOrGroupQuotaBuilder {
    pub(crate) r#type: std::option::Option<crate::types::OpenZfsQuotaType>,
    pub(crate) id: std::option::Option<i32>,
    pub(crate) storage_capacity_quota_gi_b: std::option::Option<i32>,
}
impl OpenZfsUserOrGroupQuotaBuilder {
    /// <p>A value that specifies whether the quota applies to a user or group.</p>
    pub fn r#type(mut self, input: crate::types::OpenZfsQuotaType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>A value that specifies whether the quota applies to a user or group.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::OpenZfsQuotaType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ID of the user or group.</p>
    pub fn id(mut self, input: i32) -> Self {
        self.id = Some(input);
        self
    }
    /// <p>The ID of the user or group.</p>
    pub fn set_id(mut self, input: std::option::Option<i32>) -> Self {
        self.id = input;
        self
    }
    /// <p>The amount of storage that the user or group can use in gibibytes (GiB).</p>
    pub fn storage_capacity_quota_gi_b(mut self, input: i32) -> Self {
        self.storage_capacity_quota_gi_b = Some(input);
        self
    }
    /// <p>The amount of storage that the user or group can use in gibibytes (GiB).</p>
    pub fn set_storage_capacity_quota_gi_b(mut self, input: std::option::Option<i32>) -> Self {
        self.storage_capacity_quota_gi_b = input;
        self
    }
    /// Consumes the builder and constructs a [`OpenZfsUserOrGroupQuota`](crate::types::OpenZfsUserOrGroupQuota).
    pub fn build(self) -> crate::types::OpenZfsUserOrGroupQuota {
        crate::types::OpenZfsUserOrGroupQuota {
            r#type: self.r#type,
            id: self.id,
            storage_capacity_quota_gi_b: self.storage_capacity_quota_gi_b,
        }
    }
}
