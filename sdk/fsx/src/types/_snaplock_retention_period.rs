// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration to set the retention period of an FSx for ONTAP SnapLock volume. The retention period includes default, maximum, and minimum settings. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-retention.html">Working with the retention period in SnapLock</a>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnaplockRetentionPeriod {
    /// <p>The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period. </p>
    pub default_retention: ::std::option::Option<crate::types::RetentionPeriod>,
    /// <p>The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub minimum_retention: ::std::option::Option<crate::types::RetentionPeriod>,
    /// <p>The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub maximum_retention: ::std::option::Option<crate::types::RetentionPeriod>,
}
impl SnaplockRetentionPeriod {
    /// <p>The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period. </p>
    pub fn default_retention(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.default_retention.as_ref()
    }
    /// <p>The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn minimum_retention(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.minimum_retention.as_ref()
    }
    /// <p>The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn maximum_retention(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.maximum_retention.as_ref()
    }
}
impl SnaplockRetentionPeriod {
    /// Creates a new builder-style object to manufacture [`SnaplockRetentionPeriod`](crate::types::SnaplockRetentionPeriod).
    pub fn builder() -> crate::types::builders::SnaplockRetentionPeriodBuilder {
        crate::types::builders::SnaplockRetentionPeriodBuilder::default()
    }
}

/// A builder for [`SnaplockRetentionPeriod`](crate::types::SnaplockRetentionPeriod).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnaplockRetentionPeriodBuilder {
    pub(crate) default_retention: ::std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) minimum_retention: ::std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) maximum_retention: ::std::option::Option<crate::types::RetentionPeriod>,
}
impl SnaplockRetentionPeriodBuilder {
    /// <p>The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period. </p>
    /// This field is required.
    pub fn default_retention(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.default_retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period. </p>
    pub fn set_default_retention(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.default_retention = input;
        self
    }
    /// <p>The retention period assigned to a write once, read many (WORM) file by default if an explicit retention period is not set for an FSx for ONTAP SnapLock volume. The default retention period must be greater than or equal to the minimum retention period and less than or equal to the maximum retention period. </p>
    pub fn get_default_retention(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.default_retention
    }
    /// <p>The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    /// This field is required.
    pub fn minimum_retention(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.minimum_retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn set_minimum_retention(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.minimum_retention = input;
        self
    }
    /// <p>The shortest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn get_minimum_retention(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.minimum_retention
    }
    /// <p>The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    /// This field is required.
    pub fn maximum_retention(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.maximum_retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn set_maximum_retention(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.maximum_retention = input;
        self
    }
    /// <p>The longest retention period that can be assigned to a WORM file on an FSx for ONTAP SnapLock volume. </p>
    pub fn get_maximum_retention(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.maximum_retention
    }
    /// Consumes the builder and constructs a [`SnaplockRetentionPeriod`](crate::types::SnaplockRetentionPeriod).
    pub fn build(self) -> crate::types::SnaplockRetentionPeriod {
        crate::types::SnaplockRetentionPeriod {
            default_retention: self.default_retention,
            minimum_retention: self.minimum_retention,
            maximum_retention: self.maximum_retention,
        }
    }
}
