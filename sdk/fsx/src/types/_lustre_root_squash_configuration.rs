// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for Lustre root squash used to restrict root-level access from clients that try to access your FSx for Lustre file system as root. Use the <code>RootSquash</code> parameter to enable root squash. To learn more about Lustre root squash, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/root-squash.html">Lustre root squash</a>.</p>
/// <p>You can also use the <code>NoSquashNids</code> parameter to provide an array of clients who are not affected by the root squash setting. These clients will access the file system as root, with unrestricted privileges.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LustreRootSquashConfiguration {
    /// <p>You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format <code>UID:GID</code> (for example, <code>365534:65534</code>). The UID and GID values can range from <code>0</code> to <code>4294967294</code>:</p>
    /// <ul>
    /// <li> <p>A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.</p> </li>
    /// <li> <p>A value of <code>0</code> (zero) for UID and GID indicates root, and therefore disables root squash.</p> </li>
    /// </ul>
    /// <p>When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.</p>
    #[doc(hidden)]
    pub root_squash: std::option::Option<std::string::String>,
    /// <p>When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:</p>
    /// <ul>
    /// <li> <p>A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, <code>10.0.1.6@tcp</code>).</p> </li>
    /// <li> <p>An address range is described using a dash to separate the range (for example, <code>10.0.[2-10].[1-255]@tcp</code>).</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub no_squash_nids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LustreRootSquashConfiguration {
    /// <p>You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format <code>UID:GID</code> (for example, <code>365534:65534</code>). The UID and GID values can range from <code>0</code> to <code>4294967294</code>:</p>
    /// <ul>
    /// <li> <p>A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.</p> </li>
    /// <li> <p>A value of <code>0</code> (zero) for UID and GID indicates root, and therefore disables root squash.</p> </li>
    /// </ul>
    /// <p>When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.</p>
    pub fn root_squash(&self) -> std::option::Option<&str> {
        self.root_squash.as_deref()
    }
    /// <p>When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:</p>
    /// <ul>
    /// <li> <p>A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, <code>10.0.1.6@tcp</code>).</p> </li>
    /// <li> <p>An address range is described using a dash to separate the range (for example, <code>10.0.[2-10].[1-255]@tcp</code>).</p> </li>
    /// </ul>
    pub fn no_squash_nids(&self) -> std::option::Option<&[std::string::String]> {
        self.no_squash_nids.as_deref()
    }
}
impl LustreRootSquashConfiguration {
    /// Creates a new builder-style object to manufacture [`LustreRootSquashConfiguration`](crate::types::LustreRootSquashConfiguration).
    pub fn builder() -> crate::types::builders::LustreRootSquashConfigurationBuilder {
        crate::types::builders::LustreRootSquashConfigurationBuilder::default()
    }
}

/// A builder for [`LustreRootSquashConfiguration`](crate::types::LustreRootSquashConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LustreRootSquashConfigurationBuilder {
    pub(crate) root_squash: std::option::Option<std::string::String>,
    pub(crate) no_squash_nids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LustreRootSquashConfigurationBuilder {
    /// <p>You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format <code>UID:GID</code> (for example, <code>365534:65534</code>). The UID and GID values can range from <code>0</code> to <code>4294967294</code>:</p>
    /// <ul>
    /// <li> <p>A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.</p> </li>
    /// <li> <p>A value of <code>0</code> (zero) for UID and GID indicates root, and therefore disables root squash.</p> </li>
    /// </ul>
    /// <p>When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.</p>
    pub fn root_squash(mut self, input: impl Into<std::string::String>) -> Self {
        self.root_squash = Some(input.into());
        self
    }
    /// <p>You enable root squash by setting a user ID (UID) and group ID (GID) for the file system in the format <code>UID:GID</code> (for example, <code>365534:65534</code>). The UID and GID values can range from <code>0</code> to <code>4294967294</code>:</p>
    /// <ul>
    /// <li> <p>A non-zero value for UID and GID enables root squash. The UID and GID values can be different, but each must be a non-zero value.</p> </li>
    /// <li> <p>A value of <code>0</code> (zero) for UID and GID indicates root, and therefore disables root squash.</p> </li>
    /// </ul>
    /// <p>When root squash is enabled, the user ID and group ID of a root user accessing the file system are re-mapped to the UID and GID you provide.</p>
    pub fn set_root_squash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.root_squash = input;
        self
    }
    /// Appends an item to `no_squash_nids`.
    ///
    /// To override the contents of this collection use [`set_no_squash_nids`](Self::set_no_squash_nids).
    ///
    /// <p>When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:</p>
    /// <ul>
    /// <li> <p>A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, <code>10.0.1.6@tcp</code>).</p> </li>
    /// <li> <p>An address range is described using a dash to separate the range (for example, <code>10.0.[2-10].[1-255]@tcp</code>).</p> </li>
    /// </ul>
    pub fn no_squash_nids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.no_squash_nids.unwrap_or_default();
        v.push(input.into());
        self.no_squash_nids = Some(v);
        self
    }
    /// <p>When root squash is enabled, you can optionally specify an array of NIDs of clients for which root squash does not apply. A client NID is a Lustre Network Identifier used to uniquely identify a client. You can specify the NID as either a single address or a range of addresses:</p>
    /// <ul>
    /// <li> <p>A single address is described in standard Lustre NID format by specifying the client’s IP address followed by the Lustre network ID (for example, <code>10.0.1.6@tcp</code>).</p> </li>
    /// <li> <p>An address range is described using a dash to separate the range (for example, <code>10.0.[2-10].[1-255]@tcp</code>).</p> </li>
    /// </ul>
    pub fn set_no_squash_nids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.no_squash_nids = input;
        self
    }
    /// Consumes the builder and constructs a [`LustreRootSquashConfiguration`](crate::types::LustreRootSquashConfiguration).
    pub fn build(self) -> crate::types::LustreRootSquashConfiguration {
        crate::types::LustreRootSquashConfiguration {
            root_squash: self.root_squash,
            no_squash_nids: self.no_squash_nids,
        }
    }
}
