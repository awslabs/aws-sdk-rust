// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the Amazon File Cache resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileCacheLustreConfiguration {
    /// <p>Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is <code>1000</code>.</p>
    #[doc(hidden)]
    pub per_unit_storage_throughput: std::option::Option<i32>,
    /// <p>The deployment type of the Amazon File Cache resource, which must be <code>CACHE_1</code>.</p>
    #[doc(hidden)]
    pub deployment_type: std::option::Option<crate::types::FileCacheLustreDeploymentType>,
    /// <p>You use the <code>MountName</code> value when mounting the cache. If you pass a cache ID to the <code>DescribeFileCaches</code> operation, it returns the the <code>MountName</code> value as part of the cache's description.</p>
    #[doc(hidden)]
    pub mount_name: std::option::Option<std::string::String>,
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    #[doc(hidden)]
    pub weekly_maintenance_start_time: std::option::Option<std::string::String>,
    /// <p>The configuration for a Lustre MDT (Metadata Target) storage volume.</p>
    #[doc(hidden)]
    pub metadata_configuration:
        std::option::Option<crate::types::FileCacheLustreMetadataConfiguration>,
    /// <p>The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.</p>
    #[doc(hidden)]
    pub log_configuration: std::option::Option<crate::types::LustreLogConfiguration>,
}
impl FileCacheLustreConfiguration {
    /// <p>Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is <code>1000</code>.</p>
    pub fn per_unit_storage_throughput(&self) -> std::option::Option<i32> {
        self.per_unit_storage_throughput
    }
    /// <p>The deployment type of the Amazon File Cache resource, which must be <code>CACHE_1</code>.</p>
    pub fn deployment_type(
        &self,
    ) -> std::option::Option<&crate::types::FileCacheLustreDeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>You use the <code>MountName</code> value when mounting the cache. If you pass a cache ID to the <code>DescribeFileCaches</code> operation, it returns the the <code>MountName</code> value as part of the cache's description.</p>
    pub fn mount_name(&self) -> std::option::Option<&str> {
        self.mount_name.as_deref()
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
    /// <p>The configuration for a Lustre MDT (Metadata Target) storage volume.</p>
    pub fn metadata_configuration(
        &self,
    ) -> std::option::Option<&crate::types::FileCacheLustreMetadataConfiguration> {
        self.metadata_configuration.as_ref()
    }
    /// <p>The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.</p>
    pub fn log_configuration(&self) -> std::option::Option<&crate::types::LustreLogConfiguration> {
        self.log_configuration.as_ref()
    }
}
impl FileCacheLustreConfiguration {
    /// Creates a new builder-style object to manufacture [`FileCacheLustreConfiguration`](crate::types::FileCacheLustreConfiguration).
    pub fn builder() -> crate::types::builders::FileCacheLustreConfigurationBuilder {
        crate::types::builders::FileCacheLustreConfigurationBuilder::default()
    }
}

/// A builder for [`FileCacheLustreConfiguration`](crate::types::FileCacheLustreConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileCacheLustreConfigurationBuilder {
    pub(crate) per_unit_storage_throughput: std::option::Option<i32>,
    pub(crate) deployment_type: std::option::Option<crate::types::FileCacheLustreDeploymentType>,
    pub(crate) mount_name: std::option::Option<std::string::String>,
    pub(crate) weekly_maintenance_start_time: std::option::Option<std::string::String>,
    pub(crate) metadata_configuration:
        std::option::Option<crate::types::FileCacheLustreMetadataConfiguration>,
    pub(crate) log_configuration: std::option::Option<crate::types::LustreLogConfiguration>,
}
impl FileCacheLustreConfigurationBuilder {
    /// <p>Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is <code>1000</code>.</p>
    pub fn per_unit_storage_throughput(mut self, input: i32) -> Self {
        self.per_unit_storage_throughput = Some(input);
        self
    }
    /// <p>Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. Cache throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). The only supported value is <code>1000</code>.</p>
    pub fn set_per_unit_storage_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.per_unit_storage_throughput = input;
        self
    }
    /// <p>The deployment type of the Amazon File Cache resource, which must be <code>CACHE_1</code>.</p>
    pub fn deployment_type(mut self, input: crate::types::FileCacheLustreDeploymentType) -> Self {
        self.deployment_type = Some(input);
        self
    }
    /// <p>The deployment type of the Amazon File Cache resource, which must be <code>CACHE_1</code>.</p>
    pub fn set_deployment_type(
        mut self,
        input: std::option::Option<crate::types::FileCacheLustreDeploymentType>,
    ) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>You use the <code>MountName</code> value when mounting the cache. If you pass a cache ID to the <code>DescribeFileCaches</code> operation, it returns the the <code>MountName</code> value as part of the cache's description.</p>
    pub fn mount_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.mount_name = Some(input.into());
        self
    }
    /// <p>You use the <code>MountName</code> value when mounting the cache. If you pass a cache ID to the <code>DescribeFileCaches</code> operation, it returns the the <code>MountName</code> value as part of the cache's description.</p>
    pub fn set_mount_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mount_name = input;
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.weekly_maintenance_start_time = Some(input.into());
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// <p>The configuration for a Lustre MDT (Metadata Target) storage volume.</p>
    pub fn metadata_configuration(
        mut self,
        input: crate::types::FileCacheLustreMetadataConfiguration,
    ) -> Self {
        self.metadata_configuration = Some(input);
        self
    }
    /// <p>The configuration for a Lustre MDT (Metadata Target) storage volume.</p>
    pub fn set_metadata_configuration(
        mut self,
        input: std::option::Option<crate::types::FileCacheLustreMetadataConfiguration>,
    ) -> Self {
        self.metadata_configuration = input;
        self
    }
    /// <p>The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.</p>
    pub fn log_configuration(mut self, input: crate::types::LustreLogConfiguration) -> Self {
        self.log_configuration = Some(input);
        self
    }
    /// <p>The configuration for Lustre logging used to write the enabled logging events for your Amazon File Cache resource to Amazon CloudWatch Logs.</p>
    pub fn set_log_configuration(
        mut self,
        input: std::option::Option<crate::types::LustreLogConfiguration>,
    ) -> Self {
        self.log_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`FileCacheLustreConfiguration`](crate::types::FileCacheLustreConfiguration).
    pub fn build(self) -> crate::types::FileCacheLustreConfiguration {
        crate::types::FileCacheLustreConfiguration {
            per_unit_storage_throughput: self.per_unit_storage_throughput,
            deployment_type: self.deployment_type,
            mount_name: self.mount_name,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
            metadata_configuration: self.metadata_configuration,
            log_configuration: self.log_configuration,
        }
    }
}
