// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration object for the Amazon FSx for OpenZFS file system used in the <code>DeleteFileSystem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteFileSystemOpenZfsConfiguration {
    /// <p>By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to <code>true</code>.</p>
    pub skip_final_backup: ::std::option::Option<bool>,
    /// <p>A list of tags to apply to the file system's final backup.</p>
    pub final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>To delete a file system if there are child volumes present below the root volume, use the string <code>DELETE_CHILD_VOLUMES_AND_SNAPSHOTS</code>. If your file system has child volumes and you don't use this option, the delete request will fail.</p>
    pub options: ::std::option::Option<::std::vec::Vec<crate::types::DeleteFileSystemOpenZfsOption>>,
}
impl DeleteFileSystemOpenZfsConfiguration {
    /// <p>By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to <code>true</code>.</p>
    pub fn skip_final_backup(&self) -> ::std::option::Option<bool> {
        self.skip_final_backup
    }
    /// <p>A list of tags to apply to the file system's final backup.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.final_backup_tags.is_none()`.
    pub fn final_backup_tags(&self) -> &[crate::types::Tag] {
        self.final_backup_tags.as_deref().unwrap_or_default()
    }
    /// <p>To delete a file system if there are child volumes present below the root volume, use the string <code>DELETE_CHILD_VOLUMES_AND_SNAPSHOTS</code>. If your file system has child volumes and you don't use this option, the delete request will fail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options.is_none()`.
    pub fn options(&self) -> &[crate::types::DeleteFileSystemOpenZfsOption] {
        self.options.as_deref().unwrap_or_default()
    }
}
impl DeleteFileSystemOpenZfsConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteFileSystemOpenZfsConfiguration`](crate::types::DeleteFileSystemOpenZfsConfiguration).
    pub fn builder() -> crate::types::builders::DeleteFileSystemOpenZfsConfigurationBuilder {
        crate::types::builders::DeleteFileSystemOpenZfsConfigurationBuilder::default()
    }
}

/// A builder for [`DeleteFileSystemOpenZfsConfiguration`](crate::types::DeleteFileSystemOpenZfsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteFileSystemOpenZfsConfigurationBuilder {
    pub(crate) skip_final_backup: ::std::option::Option<bool>,
    pub(crate) final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) options: ::std::option::Option<::std::vec::Vec<crate::types::DeleteFileSystemOpenZfsOption>>,
}
impl DeleteFileSystemOpenZfsConfigurationBuilder {
    /// <p>By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to <code>true</code>.</p>
    pub fn skip_final_backup(mut self, input: bool) -> Self {
        self.skip_final_backup = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to <code>true</code>.</p>
    pub fn set_skip_final_backup(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_final_backup = input;
        self
    }
    /// <p>By default, Amazon FSx for OpenZFS takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip taking a final backup, set this value to <code>true</code>.</p>
    pub fn get_skip_final_backup(&self) -> &::std::option::Option<bool> {
        &self.skip_final_backup
    }
    /// Appends an item to `final_backup_tags`.
    ///
    /// To override the contents of this collection use [`set_final_backup_tags`](Self::set_final_backup_tags).
    ///
    /// <p>A list of tags to apply to the file system's final backup.</p>
    pub fn final_backup_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.final_backup_tags.unwrap_or_default();
        v.push(input);
        self.final_backup_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to apply to the file system's final backup.</p>
    pub fn set_final_backup_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.final_backup_tags = input;
        self
    }
    /// <p>A list of tags to apply to the file system's final backup.</p>
    pub fn get_final_backup_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.final_backup_tags
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>To delete a file system if there are child volumes present below the root volume, use the string <code>DELETE_CHILD_VOLUMES_AND_SNAPSHOTS</code>. If your file system has child volumes and you don't use this option, the delete request will fail.</p>
    pub fn options(mut self, input: crate::types::DeleteFileSystemOpenZfsOption) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = ::std::option::Option::Some(v);
        self
    }
    /// <p>To delete a file system if there are child volumes present below the root volume, use the string <code>DELETE_CHILD_VOLUMES_AND_SNAPSHOTS</code>. If your file system has child volumes and you don't use this option, the delete request will fail.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeleteFileSystemOpenZfsOption>>) -> Self {
        self.options = input;
        self
    }
    /// <p>To delete a file system if there are child volumes present below the root volume, use the string <code>DELETE_CHILD_VOLUMES_AND_SNAPSHOTS</code>. If your file system has child volumes and you don't use this option, the delete request will fail.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeleteFileSystemOpenZfsOption>> {
        &self.options
    }
    /// Consumes the builder and constructs a [`DeleteFileSystemOpenZfsConfiguration`](crate::types::DeleteFileSystemOpenZfsConfiguration).
    pub fn build(self) -> crate::types::DeleteFileSystemOpenZfsConfiguration {
        crate::types::DeleteFileSystemOpenZfsConfiguration {
            skip_final_backup: self.skip_final_backup,
            final_backup_tags: self.final_backup_tags,
            options: self.options,
        }
    }
}
