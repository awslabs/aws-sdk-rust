// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an NFS data repository association (DRA) created during the creation of the Amazon File Cache resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileCacheNfsConfiguration {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    #[doc(hidden)]
    pub version: std::option::Option<crate::types::NfsVersion>,
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    #[doc(hidden)]
    pub dns_ips: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FileCacheNfsConfiguration {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn version(&self) -> std::option::Option<&crate::types::NfsVersion> {
        self.version.as_ref()
    }
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn dns_ips(&self) -> std::option::Option<&[std::string::String]> {
        self.dns_ips.as_deref()
    }
}
impl FileCacheNfsConfiguration {
    /// Creates a new builder-style object to manufacture [`FileCacheNfsConfiguration`](crate::types::FileCacheNfsConfiguration).
    pub fn builder() -> crate::types::builders::FileCacheNfsConfigurationBuilder {
        crate::types::builders::FileCacheNfsConfigurationBuilder::default()
    }
}

/// A builder for [`FileCacheNfsConfiguration`](crate::types::FileCacheNfsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileCacheNfsConfigurationBuilder {
    pub(crate) version: std::option::Option<crate::types::NfsVersion>,
    pub(crate) dns_ips: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FileCacheNfsConfigurationBuilder {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn version(mut self, input: crate::types::NfsVersion) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn set_version(mut self, input: std::option::Option<crate::types::NfsVersion>) -> Self {
        self.version = input;
        self
    }
    /// Appends an item to `dns_ips`.
    ///
    /// To override the contents of this collection use [`set_dns_ips`](Self::set_dns_ips).
    ///
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn dns_ips(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.dns_ips.unwrap_or_default();
        v.push(input.into());
        self.dns_ips = Some(v);
        self
    }
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn set_dns_ips(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.dns_ips = input;
        self
    }
    /// Consumes the builder and constructs a [`FileCacheNfsConfiguration`](crate::types::FileCacheNfsConfiguration).
    pub fn build(self) -> crate::types::FileCacheNfsConfiguration {
        crate::types::FileCacheNfsConfiguration {
            version: self.version,
            dns_ips: self.dns_ips,
        }
    }
}
