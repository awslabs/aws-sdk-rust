// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for Lustre logging used to write the enabled logging events for your Amazon FSx for Lustre file system or Amazon File Cache resource to Amazon CloudWatch Logs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LustreLogConfiguration {
    /// <p>The data repository events that are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    /// <p>Note that Amazon File Cache uses a default setting of <code>WARN_ERROR</code>, which can't be changed.</p>
    #[doc(hidden)]
    pub level: std::option::Option<crate::types::LustreAccessAuditLogLevel>,
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
}
impl LustreLogConfiguration {
    /// <p>The data repository events that are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    /// <p>Note that Amazon File Cache uses a default setting of <code>WARN_ERROR</code>, which can't be changed.</p>
    pub fn level(&self) -> std::option::Option<&crate::types::LustreAccessAuditLogLevel> {
        self.level.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
}
impl LustreLogConfiguration {
    /// Creates a new builder-style object to manufacture [`LustreLogConfiguration`](crate::types::LustreLogConfiguration).
    pub fn builder() -> crate::types::builders::LustreLogConfigurationBuilder {
        crate::types::builders::LustreLogConfigurationBuilder::default()
    }
}

/// A builder for [`LustreLogConfiguration`](crate::types::LustreLogConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LustreLogConfigurationBuilder {
    pub(crate) level: std::option::Option<crate::types::LustreAccessAuditLogLevel>,
    pub(crate) destination: std::option::Option<std::string::String>,
}
impl LustreLogConfigurationBuilder {
    /// <p>The data repository events that are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    /// <p>Note that Amazon File Cache uses a default setting of <code>WARN_ERROR</code>, which can't be changed.</p>
    pub fn level(mut self, input: crate::types::LustreAccessAuditLogLevel) -> Self {
        self.level = Some(input);
        self
    }
    /// <p>The data repository events that are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    /// <p>Note that Amazon File Cache uses a default setting of <code>WARN_ERROR</code>, which can't be changed.</p>
    pub fn set_level(
        mut self,
        input: std::option::Option<crate::types::LustreAccessAuditLogLevel>,
    ) -> Self {
        self.level = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs. The destination can be any Amazon CloudWatch Logs log group ARN. The destination ARN must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// Consumes the builder and constructs a [`LustreLogConfiguration`](crate::types::LustreLogConfiguration).
    pub fn build(self) -> crate::types::LustreLogConfiguration {
        crate::types::LustreLogConfiguration {
            level: self.level,
            destination: self.destination,
        }
    }
}
