// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use to specify skipping a final backup, adding tags to a final backup, or bypassing the retention period of an FSx for ONTAP SnapLock Enterprise volume when deleting an FSx for ONTAP volume. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteVolumeOntapConfiguration {
    /// <p>Set to true if you want to skip taking a final backup of the volume you are deleting.</p>
    pub skip_final_backup: ::std::option::Option<bool>,
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Setting this to <code>true</code> allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission <code>fsx:BypassSnaplockEnterpriseRetention</code> is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is <code>false</code>. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html"> Deleting a SnapLock volume</a>. </p>
    pub bypass_snaplock_enterprise_retention: ::std::option::Option<bool>,
}
impl DeleteVolumeOntapConfiguration {
    /// <p>Set to true if you want to skip taking a final backup of the volume you are deleting.</p>
    pub fn skip_final_backup(&self) -> ::std::option::Option<bool> {
        self.skip_final_backup
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.final_backup_tags.is_none()`.
    pub fn final_backup_tags(&self) -> &[crate::types::Tag] {
        self.final_backup_tags.as_deref().unwrap_or_default()
    }
    /// <p>Setting this to <code>true</code> allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission <code>fsx:BypassSnaplockEnterpriseRetention</code> is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is <code>false</code>. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html"> Deleting a SnapLock volume</a>. </p>
    pub fn bypass_snaplock_enterprise_retention(&self) -> ::std::option::Option<bool> {
        self.bypass_snaplock_enterprise_retention
    }
}
impl DeleteVolumeOntapConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteVolumeOntapConfiguration`](crate::types::DeleteVolumeOntapConfiguration).
    pub fn builder() -> crate::types::builders::DeleteVolumeOntapConfigurationBuilder {
        crate::types::builders::DeleteVolumeOntapConfigurationBuilder::default()
    }
}

/// A builder for [`DeleteVolumeOntapConfiguration`](crate::types::DeleteVolumeOntapConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteVolumeOntapConfigurationBuilder {
    pub(crate) skip_final_backup: ::std::option::Option<bool>,
    pub(crate) final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) bypass_snaplock_enterprise_retention: ::std::option::Option<bool>,
}
impl DeleteVolumeOntapConfigurationBuilder {
    /// <p>Set to true if you want to skip taking a final backup of the volume you are deleting.</p>
    pub fn skip_final_backup(mut self, input: bool) -> Self {
        self.skip_final_backup = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to true if you want to skip taking a final backup of the volume you are deleting.</p>
    pub fn set_skip_final_backup(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_final_backup = input;
        self
    }
    /// <p>Set to true if you want to skip taking a final backup of the volume you are deleting.</p>
    pub fn get_skip_final_backup(&self) -> &::std::option::Option<bool> {
        &self.skip_final_backup
    }
    /// Appends an item to `final_backup_tags`.
    ///
    /// To override the contents of this collection use [`set_final_backup_tags`](Self::set_final_backup_tags).
    ///
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn final_backup_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.final_backup_tags.unwrap_or_default();
        v.push(input);
        self.final_backup_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn set_final_backup_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.final_backup_tags = input;
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn get_final_backup_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.final_backup_tags
    }
    /// <p>Setting this to <code>true</code> allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission <code>fsx:BypassSnaplockEnterpriseRetention</code> is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is <code>false</code>. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html"> Deleting a SnapLock volume</a>. </p>
    pub fn bypass_snaplock_enterprise_retention(mut self, input: bool) -> Self {
        self.bypass_snaplock_enterprise_retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>Setting this to <code>true</code> allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission <code>fsx:BypassSnaplockEnterpriseRetention</code> is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is <code>false</code>. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html"> Deleting a SnapLock volume</a>. </p>
    pub fn set_bypass_snaplock_enterprise_retention(mut self, input: ::std::option::Option<bool>) -> Self {
        self.bypass_snaplock_enterprise_retention = input;
        self
    }
    /// <p>Setting this to <code>true</code> allows a SnapLock administrator to delete an FSx for ONTAP SnapLock Enterprise volume with unexpired write once, read many (WORM) files. The IAM permission <code>fsx:BypassSnaplockEnterpriseRetention</code> is also required to delete SnapLock Enterprise volumes with unexpired WORM files. The default value is <code>false</code>. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-delete-volume.html"> Deleting a SnapLock volume</a>. </p>
    pub fn get_bypass_snaplock_enterprise_retention(&self) -> &::std::option::Option<bool> {
        &self.bypass_snaplock_enterprise_retention
    }
    /// Consumes the builder and constructs a [`DeleteVolumeOntapConfiguration`](crate::types::DeleteVolumeOntapConfiguration).
    pub fn build(self) -> crate::types::DeleteVolumeOntapConfiguration {
        crate::types::DeleteVolumeOntapConfiguration {
            skip_final_backup: self.skip_final_backup,
            final_backup_tags: self.final_backup_tags,
            bypass_snaplock_enterprise_retention: self.bypass_snaplock_enterprise_retention,
        }
    }
}
