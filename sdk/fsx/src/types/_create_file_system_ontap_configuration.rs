// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    #[doc(hidden)]
    pub automatic_backup_retention_days: std::option::Option<i32>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    #[doc(hidden)]
    pub daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>. </p>
    #[doc(hidden)]
    pub deployment_type: std::option::Option<crate::types::OntapDeploymentType>,
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.</p>
    #[doc(hidden)]
    pub endpoint_ip_address_range: std::option::Option<std::string::String>,
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    #[doc(hidden)]
    pub fsx_admin_password: std::option::Option<std::string::String>,
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    #[doc(hidden)]
    pub disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    #[doc(hidden)]
    pub preferred_subnet_id: std::option::Option<std::string::String>,
    /// <p>(Multi-AZ only) Specifies the virtual private cloud (VPC) route tables in which your file system's endpoints will be created. You should specify all VPC route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p>
    #[doc(hidden)]
    pub route_table_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Sets the throughput capacity for the file system that you're creating. Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.</p>
    #[doc(hidden)]
    pub throughput_capacity: std::option::Option<i32>,
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    #[doc(hidden)]
    pub weekly_maintenance_start_time: std::option::Option<std::string::String>,
}
impl CreateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(&self) -> std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>. </p>
    pub fn deployment_type(&self) -> std::option::Option<&crate::types::OntapDeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.</p>
    pub fn endpoint_ip_address_range(&self) -> std::option::Option<&str> {
        self.endpoint_ip_address_range.as_deref()
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn fsx_admin_password(&self) -> std::option::Option<&str> {
        self.fsx_admin_password.as_deref()
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn disk_iops_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DiskIopsConfiguration> {
        self.disk_iops_configuration.as_ref()
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn preferred_subnet_id(&self) -> std::option::Option<&str> {
        self.preferred_subnet_id.as_deref()
    }
    /// <p>(Multi-AZ only) Specifies the virtual private cloud (VPC) route tables in which your file system's endpoints will be created. You should specify all VPC route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p>
    pub fn route_table_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.route_table_ids.as_deref()
    }
    /// <p>Sets the throughput capacity for the file system that you're creating. Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.</p>
    pub fn throughput_capacity(&self) -> std::option::Option<i32> {
        self.throughput_capacity
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
}
impl std::fmt::Debug for CreateFileSystemOntapConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFileSystemOntapConfiguration");
        formatter.field(
            "automatic_backup_retention_days",
            &self.automatic_backup_retention_days,
        );
        formatter.field(
            "daily_automatic_backup_start_time",
            &self.daily_automatic_backup_start_time,
        );
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("endpoint_ip_address_range", &self.endpoint_ip_address_range);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("preferred_subnet_id", &self.preferred_subnet_id);
        formatter.field("route_table_ids", &self.route_table_ids);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field(
            "weekly_maintenance_start_time",
            &self.weekly_maintenance_start_time,
        );
        formatter.finish()
    }
}
impl CreateFileSystemOntapConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
    pub fn builder() -> crate::types::builders::CreateFileSystemOntapConfigurationBuilder {
        crate::types::builders::CreateFileSystemOntapConfigurationBuilder::default()
    }
}

/// A builder for [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateFileSystemOntapConfigurationBuilder {
    pub(crate) automatic_backup_retention_days: std::option::Option<i32>,
    pub(crate) daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    pub(crate) deployment_type: std::option::Option<crate::types::OntapDeploymentType>,
    pub(crate) endpoint_ip_address_range: std::option::Option<std::string::String>,
    pub(crate) fsx_admin_password: std::option::Option<std::string::String>,
    pub(crate) disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    pub(crate) preferred_subnet_id: std::option::Option<std::string::String>,
    pub(crate) route_table_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) throughput_capacity: std::option::Option<i32>,
    pub(crate) weekly_maintenance_start_time: std::option::Option<std::string::String>,
}
impl CreateFileSystemOntapConfigurationBuilder {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn set_daily_automatic_backup_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>. </p>
    pub fn deployment_type(mut self, input: crate::types::OntapDeploymentType) -> Self {
        self.deployment_type = Some(input);
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>. </p>
    pub fn set_deployment_type(
        mut self,
        input: std::option::Option<crate::types::OntapDeploymentType>,
    ) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.</p>
    pub fn endpoint_ip_address_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_ip_address_range = Some(input.into());
        self
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPC’s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables.</p>
    pub fn set_endpoint_ip_address_range(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_ip_address_range = input;
        self
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn fsx_admin_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.fsx_admin_password = Some(input.into());
        self
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn set_fsx_admin_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fsx_admin_password = input;
        self
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn disk_iops_configuration(mut self, input: crate::types::DiskIopsConfiguration) -> Self {
        self.disk_iops_configuration = Some(input);
        self
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn set_disk_iops_configuration(
        mut self,
        input: std::option::Option<crate::types::DiskIopsConfiguration>,
    ) -> Self {
        self.disk_iops_configuration = input;
        self
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn preferred_subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_subnet_id = Some(input.into());
        self
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn set_preferred_subnet_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_subnet_id = input;
        self
    }
    /// Appends an item to `route_table_ids`.
    ///
    /// To override the contents of this collection use [`set_route_table_ids`](Self::set_route_table_ids).
    ///
    /// <p>(Multi-AZ only) Specifies the virtual private cloud (VPC) route tables in which your file system's endpoints will be created. You should specify all VPC route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p>
    pub fn route_table_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.route_table_ids.unwrap_or_default();
        v.push(input.into());
        self.route_table_ids = Some(v);
        self
    }
    /// <p>(Multi-AZ only) Specifies the virtual private cloud (VPC) route tables in which your file system's endpoints will be created. You should specify all VPC route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p>
    pub fn set_route_table_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.route_table_ids = input;
        self
    }
    /// <p>Sets the throughput capacity for the file system that you're creating. Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.</p>
    pub fn throughput_capacity(mut self, input: i32) -> Self {
        self.throughput_capacity = Some(input);
        self
    }
    /// <p>Sets the throughput capacity for the file system that you're creating. Valid values are 128, 256, 512, 1024, 2048, and 4096 MBps.</p>
    pub fn set_throughput_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.throughput_capacity = input;
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.weekly_maintenance_start_time = Some(input.into());
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
    pub fn build(self) -> crate::types::CreateFileSystemOntapConfiguration {
        crate::types::CreateFileSystemOntapConfiguration {
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            deployment_type: self.deployment_type,
            endpoint_ip_address_range: self.endpoint_ip_address_range,
            fsx_admin_password: self.fsx_admin_password,
            disk_iops_configuration: self.disk_iops_configuration,
            preferred_subnet_id: self.preferred_subnet_id,
            route_table_ids: self.route_table_ids,
            throughput_capacity: self.throughput_capacity,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
        }
    }
}
impl std::fmt::Debug for CreateFileSystemOntapConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFileSystemOntapConfigurationBuilder");
        formatter.field(
            "automatic_backup_retention_days",
            &self.automatic_backup_retention_days,
        );
        formatter.field(
            "daily_automatic_backup_start_time",
            &self.daily_automatic_backup_start_time,
        );
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("endpoint_ip_address_range", &self.endpoint_ip_address_range);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("preferred_subnet_id", &self.preferred_subnet_id);
        formatter.field("route_table_ids", &self.route_table_ids);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field(
            "weekly_maintenance_start_time",
            &self.weekly_maintenance_start_time,
        );
        formatter.finish()
    }
}
