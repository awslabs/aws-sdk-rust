// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration object for Amazon FSx for Lustre file systems used in the <code>UpdateFileSystem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFileSystemLustreConfiguration {
    /// <p>(Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    #[doc(hidden)]
    pub weekly_maintenance_start_time: std::option::Option<std::string::String>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    #[doc(hidden)]
    pub daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    #[doc(hidden)]
    pub automatic_backup_retention_days: std::option::Option<i32>,
    /// <p> (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. <code>AutoImportPolicy</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.</p> </li>
    /// <li> <p> <code>NEW</code> - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system. </p> </li>
    /// <li> <p> <code>NEW_CHANGED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.</p> </li>
    /// <li> <p> <code>NEW_CHANGED_DELETED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.</p> </li>
    /// </ul>
    /// <p>The <code>AutoImportPolicy</code> parameter is not supported for Lustre file systems with the <code>Persistent_2</code> deployment type. Instead, use to update a data repository association on your <code>Persistent_2</code> file system.</p>
    #[doc(hidden)]
    pub auto_import_policy: std::option::Option<crate::types::AutoImportPolicyType>,
    /// <p>Sets the data compression configuration for the file system. <code>DataCompressionType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Data compression is turned off for the file system.</p> </li>
    /// <li> <p> <code>LZ4</code> - Data compression is turned on with the LZ4 algorithm.</p> </li>
    /// </ul>
    /// <p>If you don't use <code>DataCompressionType</code>, the file system retains its current data compression configuration.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html">Lustre data compression</a>.</p>
    #[doc(hidden)]
    pub data_compression_type: std::option::Option<crate::types::DataCompressionType>,
    /// <p>The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.</p>
    #[doc(hidden)]
    pub log_configuration: std::option::Option<crate::types::LustreLogCreateConfiguration>,
    /// <p>The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.</p>
    #[doc(hidden)]
    pub root_squash_configuration: std::option::Option<crate::types::LustreRootSquashConfiguration>,
}
impl UpdateFileSystemLustreConfiguration {
    /// <p>(Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    pub fn weekly_maintenance_start_time(&self) -> std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(&self) -> std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p> (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. <code>AutoImportPolicy</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.</p> </li>
    /// <li> <p> <code>NEW</code> - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system. </p> </li>
    /// <li> <p> <code>NEW_CHANGED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.</p> </li>
    /// <li> <p> <code>NEW_CHANGED_DELETED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.</p> </li>
    /// </ul>
    /// <p>The <code>AutoImportPolicy</code> parameter is not supported for Lustre file systems with the <code>Persistent_2</code> deployment type. Instead, use to update a data repository association on your <code>Persistent_2</code> file system.</p>
    pub fn auto_import_policy(&self) -> std::option::Option<&crate::types::AutoImportPolicyType> {
        self.auto_import_policy.as_ref()
    }
    /// <p>Sets the data compression configuration for the file system. <code>DataCompressionType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Data compression is turned off for the file system.</p> </li>
    /// <li> <p> <code>LZ4</code> - Data compression is turned on with the LZ4 algorithm.</p> </li>
    /// </ul>
    /// <p>If you don't use <code>DataCompressionType</code>, the file system retains its current data compression configuration.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html">Lustre data compression</a>.</p>
    pub fn data_compression_type(&self) -> std::option::Option<&crate::types::DataCompressionType> {
        self.data_compression_type.as_ref()
    }
    /// <p>The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.</p>
    pub fn log_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LustreLogCreateConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.</p>
    pub fn root_squash_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LustreRootSquashConfiguration> {
        self.root_squash_configuration.as_ref()
    }
}
impl UpdateFileSystemLustreConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateFileSystemLustreConfiguration`](crate::types::UpdateFileSystemLustreConfiguration).
    pub fn builder() -> crate::types::builders::UpdateFileSystemLustreConfigurationBuilder {
        crate::types::builders::UpdateFileSystemLustreConfigurationBuilder::default()
    }
}

/// A builder for [`UpdateFileSystemLustreConfiguration`](crate::types::UpdateFileSystemLustreConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFileSystemLustreConfigurationBuilder {
    pub(crate) weekly_maintenance_start_time: std::option::Option<std::string::String>,
    pub(crate) daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    pub(crate) automatic_backup_retention_days: std::option::Option<i32>,
    pub(crate) auto_import_policy: std::option::Option<crate::types::AutoImportPolicyType>,
    pub(crate) data_compression_type: std::option::Option<crate::types::DataCompressionType>,
    pub(crate) log_configuration: std::option::Option<crate::types::LustreLogCreateConfiguration>,
    pub(crate) root_squash_configuration:
        std::option::Option<crate::types::LustreRootSquashConfiguration>,
}
impl UpdateFileSystemLustreConfigurationBuilder {
    /// <p>(Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.weekly_maintenance_start_time = Some(input.into());
        self
    }
    /// <p>(Optional) The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    pub fn set_weekly_maintenance_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn set_daily_automatic_backup_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p> (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. <code>AutoImportPolicy</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.</p> </li>
    /// <li> <p> <code>NEW</code> - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system. </p> </li>
    /// <li> <p> <code>NEW_CHANGED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.</p> </li>
    /// <li> <p> <code>NEW_CHANGED_DELETED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.</p> </li>
    /// </ul>
    /// <p>The <code>AutoImportPolicy</code> parameter is not supported for Lustre file systems with the <code>Persistent_2</code> deployment type. Instead, use to update a data repository association on your <code>Persistent_2</code> file system.</p>
    pub fn auto_import_policy(mut self, input: crate::types::AutoImportPolicyType) -> Self {
        self.auto_import_policy = Some(input);
        self
    }
    /// <p> (Optional) When you create your file system, your existing S3 objects appear as file and directory listings. Use this property to choose how Amazon FSx keeps your file and directory listing up to date as you add or modify objects in your linked S3 bucket. <code>AutoImportPolicy</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update the file and directory listing for any new or changed objects after choosing this option.</p> </li>
    /// <li> <p> <code>NEW</code> - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system. </p> </li>
    /// <li> <p> <code>NEW_CHANGED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.</p> </li>
    /// <li> <p> <code>NEW_CHANGED_DELETED</code> - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.</p> </li>
    /// </ul>
    /// <p>The <code>AutoImportPolicy</code> parameter is not supported for Lustre file systems with the <code>Persistent_2</code> deployment type. Instead, use to update a data repository association on your <code>Persistent_2</code> file system.</p>
    pub fn set_auto_import_policy(
        mut self,
        input: std::option::Option<crate::types::AutoImportPolicyType>,
    ) -> Self {
        self.auto_import_policy = input;
        self
    }
    /// <p>Sets the data compression configuration for the file system. <code>DataCompressionType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Data compression is turned off for the file system.</p> </li>
    /// <li> <p> <code>LZ4</code> - Data compression is turned on with the LZ4 algorithm.</p> </li>
    /// </ul>
    /// <p>If you don't use <code>DataCompressionType</code>, the file system retains its current data compression configuration.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html">Lustre data compression</a>.</p>
    pub fn data_compression_type(mut self, input: crate::types::DataCompressionType) -> Self {
        self.data_compression_type = Some(input);
        self
    }
    /// <p>Sets the data compression configuration for the file system. <code>DataCompressionType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Data compression is turned off for the file system.</p> </li>
    /// <li> <p> <code>LZ4</code> - Data compression is turned on with the LZ4 algorithm.</p> </li>
    /// </ul>
    /// <p>If you don't use <code>DataCompressionType</code>, the file system retains its current data compression configuration.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html">Lustre data compression</a>.</p>
    pub fn set_data_compression_type(
        mut self,
        input: std::option::Option<crate::types::DataCompressionType>,
    ) -> Self {
        self.data_compression_type = input;
        self
    }
    /// <p>The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.</p>
    pub fn log_configuration(mut self, input: crate::types::LustreLogCreateConfiguration) -> Self {
        self.log_configuration = Some(input);
        self
    }
    /// <p>The Lustre logging configuration used when updating an Amazon FSx for Lustre file system. When logging is enabled, Lustre logs error and warning events for data repositories associated with your file system to Amazon CloudWatch Logs.</p>
    pub fn set_log_configuration(
        mut self,
        input: std::option::Option<crate::types::LustreLogCreateConfiguration>,
    ) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.</p>
    pub fn root_squash_configuration(
        mut self,
        input: crate::types::LustreRootSquashConfiguration,
    ) -> Self {
        self.root_squash_configuration = Some(input);
        self
    }
    /// <p>The Lustre root squash configuration used when updating an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.</p>
    pub fn set_root_squash_configuration(
        mut self,
        input: std::option::Option<crate::types::LustreRootSquashConfiguration>,
    ) -> Self {
        self.root_squash_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFileSystemLustreConfiguration`](crate::types::UpdateFileSystemLustreConfiguration).
    pub fn build(self) -> crate::types::UpdateFileSystemLustreConfiguration {
        crate::types::UpdateFileSystemLustreConfiguration {
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            auto_import_policy: self.auto_import_policy,
            data_compression_type: self.data_compression_type,
            log_configuration: self.log_configuration,
            root_squash_configuration: self.root_squash_configuration,
        }
    }
}
