// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the task status showing a running total of the total number of files to be processed, the number successfully processed, and the number of files the task failed to process.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataRepositoryTaskStatus {
    /// <p>The total number of files that the task will process. While a task is executing, the sum of <code>SucceededCount</code> plus <code>FailedCount</code> may not equal <code>TotalCount</code>. When the task is complete, <code>TotalCount</code> equals the sum of <code>SucceededCount</code> plus <code>FailedCount</code>.</p>
    #[doc(hidden)]
    pub total_count: std::option::Option<i64>,
    /// <p>A running total of the number of files that the task has successfully processed.</p>
    #[doc(hidden)]
    pub succeeded_count: std::option::Option<i64>,
    /// <p>A running total of the number of files that the task failed to process.</p>
    #[doc(hidden)]
    pub failed_count: std::option::Option<i64>,
    /// <p>The time at which the task status was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.</p>
    #[doc(hidden)]
    pub released_capacity: std::option::Option<i64>,
}
impl DataRepositoryTaskStatus {
    /// <p>The total number of files that the task will process. While a task is executing, the sum of <code>SucceededCount</code> plus <code>FailedCount</code> may not equal <code>TotalCount</code>. When the task is complete, <code>TotalCount</code> equals the sum of <code>SucceededCount</code> plus <code>FailedCount</code>.</p>
    pub fn total_count(&self) -> std::option::Option<i64> {
        self.total_count
    }
    /// <p>A running total of the number of files that the task has successfully processed.</p>
    pub fn succeeded_count(&self) -> std::option::Option<i64> {
        self.succeeded_count
    }
    /// <p>A running total of the number of files that the task failed to process.</p>
    pub fn failed_count(&self) -> std::option::Option<i64> {
        self.failed_count
    }
    /// <p>The time at which the task status was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.</p>
    pub fn released_capacity(&self) -> std::option::Option<i64> {
        self.released_capacity
    }
}
impl DataRepositoryTaskStatus {
    /// Creates a new builder-style object to manufacture [`DataRepositoryTaskStatus`](crate::types::DataRepositoryTaskStatus).
    pub fn builder() -> crate::types::builders::DataRepositoryTaskStatusBuilder {
        crate::types::builders::DataRepositoryTaskStatusBuilder::default()
    }
}

/// A builder for [`DataRepositoryTaskStatus`](crate::types::DataRepositoryTaskStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataRepositoryTaskStatusBuilder {
    pub(crate) total_count: std::option::Option<i64>,
    pub(crate) succeeded_count: std::option::Option<i64>,
    pub(crate) failed_count: std::option::Option<i64>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) released_capacity: std::option::Option<i64>,
}
impl DataRepositoryTaskStatusBuilder {
    /// <p>The total number of files that the task will process. While a task is executing, the sum of <code>SucceededCount</code> plus <code>FailedCount</code> may not equal <code>TotalCount</code>. When the task is complete, <code>TotalCount</code> equals the sum of <code>SucceededCount</code> plus <code>FailedCount</code>.</p>
    pub fn total_count(mut self, input: i64) -> Self {
        self.total_count = Some(input);
        self
    }
    /// <p>The total number of files that the task will process. While a task is executing, the sum of <code>SucceededCount</code> plus <code>FailedCount</code> may not equal <code>TotalCount</code>. When the task is complete, <code>TotalCount</code> equals the sum of <code>SucceededCount</code> plus <code>FailedCount</code>.</p>
    pub fn set_total_count(mut self, input: std::option::Option<i64>) -> Self {
        self.total_count = input;
        self
    }
    /// <p>A running total of the number of files that the task has successfully processed.</p>
    pub fn succeeded_count(mut self, input: i64) -> Self {
        self.succeeded_count = Some(input);
        self
    }
    /// <p>A running total of the number of files that the task has successfully processed.</p>
    pub fn set_succeeded_count(mut self, input: std::option::Option<i64>) -> Self {
        self.succeeded_count = input;
        self
    }
    /// <p>A running total of the number of files that the task failed to process.</p>
    pub fn failed_count(mut self, input: i64) -> Self {
        self.failed_count = Some(input);
        self
    }
    /// <p>A running total of the number of files that the task failed to process.</p>
    pub fn set_failed_count(mut self, input: std::option::Option<i64>) -> Self {
        self.failed_count = input;
        self
    }
    /// <p>The time at which the task status was last updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The time at which the task status was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.</p>
    pub fn released_capacity(mut self, input: i64) -> Self {
        self.released_capacity = Some(input);
        self
    }
    /// <p>The total amount of data, in GiB, released by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.</p>
    pub fn set_released_capacity(mut self, input: std::option::Option<i64>) -> Self {
        self.released_capacity = input;
        self
    }
    /// Consumes the builder and constructs a [`DataRepositoryTaskStatus`](crate::types::DataRepositoryTaskStatus).
    pub fn build(self) -> crate::types::DataRepositoryTaskStatus {
        crate::types::DataRepositoryTaskStatus {
            total_count: self.total_count,
            succeeded_count: self.succeeded_count,
            failed_count: self.failed_count,
            last_updated_time: self.last_updated_time,
            released_capacity: self.released_capacity,
        }
    }
}
