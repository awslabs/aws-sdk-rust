// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon FSx for NetApp ONTAP file system has the following endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileSystemEndpoints {
    /// <p>An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.</p>
    #[doc(hidden)]
    pub intercluster: std::option::Option<crate::types::FileSystemEndpoint>,
    /// <p>An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.</p>
    #[doc(hidden)]
    pub management: std::option::Option<crate::types::FileSystemEndpoint>,
}
impl FileSystemEndpoints {
    /// <p>An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.</p>
    pub fn intercluster(&self) -> std::option::Option<&crate::types::FileSystemEndpoint> {
        self.intercluster.as_ref()
    }
    /// <p>An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.</p>
    pub fn management(&self) -> std::option::Option<&crate::types::FileSystemEndpoint> {
        self.management.as_ref()
    }
}
impl FileSystemEndpoints {
    /// Creates a new builder-style object to manufacture [`FileSystemEndpoints`](crate::types::FileSystemEndpoints).
    pub fn builder() -> crate::types::builders::FileSystemEndpointsBuilder {
        crate::types::builders::FileSystemEndpointsBuilder::default()
    }
}

/// A builder for [`FileSystemEndpoints`](crate::types::FileSystemEndpoints).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileSystemEndpointsBuilder {
    pub(crate) intercluster: std::option::Option<crate::types::FileSystemEndpoint>,
    pub(crate) management: std::option::Option<crate::types::FileSystemEndpoint>,
}
impl FileSystemEndpointsBuilder {
    /// <p>An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.</p>
    pub fn intercluster(mut self, input: crate::types::FileSystemEndpoint) -> Self {
        self.intercluster = Some(input);
        self
    }
    /// <p>An endpoint for managing your file system by setting up NetApp SnapMirror with other ONTAP systems.</p>
    pub fn set_intercluster(
        mut self,
        input: std::option::Option<crate::types::FileSystemEndpoint>,
    ) -> Self {
        self.intercluster = input;
        self
    }
    /// <p>An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.</p>
    pub fn management(mut self, input: crate::types::FileSystemEndpoint) -> Self {
        self.management = Some(input);
        self
    }
    /// <p>An endpoint for managing your file system using the NetApp ONTAP CLI and NetApp ONTAP API.</p>
    pub fn set_management(
        mut self,
        input: std::option::Option<crate::types::FileSystemEndpoint>,
    ) -> Self {
        self.management = input;
        self
    }
    /// Consumes the builder and constructs a [`FileSystemEndpoints`](crate::types::FileSystemEndpoints).
    pub fn build(self) -> crate::types::FileSystemEndpoints {
        crate::types::FileSystemEndpoints {
            intercluster: self.intercluster,
            management: self.management,
        }
    }
}
