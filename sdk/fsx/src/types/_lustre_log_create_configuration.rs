// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Lustre logging configuration used when creating or updating an Amazon FSx for Lustre file system. An Amazon File Cache is created with Lustre logging enabled by default, with a setting of <code>WARN_ERROR</code> for the logging events. which can't be changed.</p>
/// <p>Lustre logging writes the enabled logging events for your file system or cache to Amazon CloudWatch Logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LustreLogCreateConfiguration {
    /// <p>Sets which data repository events are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    pub level: ::std::option::Option<crate::types::LustreAccessAuditLogLevel>,
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs.</p>
    /// <p>The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:</p>
    /// <ul>
    /// <li> <p>The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p> </li>
    /// <li> <p>The name of the Amazon CloudWatch Logs log group must begin with the <code>/aws/fsx</code> prefix.</p> </li>
    /// <li> <p>If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs <code>/aws/fsx/lustre</code> log group (for Amazon FSx for Lustre) or <code>/aws/fsx/filecache</code> (for Amazon File Cache).</p> </li>
    /// <li> <p>If <code>Destination</code> is provided and the resource does not exist, the request will fail with a <code>BadRequest</code> error.</p> </li>
    /// <li> <p>If <code>Level</code> is set to <code>DISABLED</code>, you cannot specify a destination in <code>Destination</code>.</p> </li>
    /// </ul>
    pub destination: ::std::option::Option<::std::string::String>,
}
impl LustreLogCreateConfiguration {
    /// <p>Sets which data repository events are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    pub fn level(&self) -> ::std::option::Option<&crate::types::LustreAccessAuditLogLevel> {
        self.level.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs.</p>
    /// <p>The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:</p>
    /// <ul>
    /// <li> <p>The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p> </li>
    /// <li> <p>The name of the Amazon CloudWatch Logs log group must begin with the <code>/aws/fsx</code> prefix.</p> </li>
    /// <li> <p>If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs <code>/aws/fsx/lustre</code> log group (for Amazon FSx for Lustre) or <code>/aws/fsx/filecache</code> (for Amazon File Cache).</p> </li>
    /// <li> <p>If <code>Destination</code> is provided and the resource does not exist, the request will fail with a <code>BadRequest</code> error.</p> </li>
    /// <li> <p>If <code>Level</code> is set to <code>DISABLED</code>, you cannot specify a destination in <code>Destination</code>.</p> </li>
    /// </ul>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
}
impl LustreLogCreateConfiguration {
    /// Creates a new builder-style object to manufacture [`LustreLogCreateConfiguration`](crate::types::LustreLogCreateConfiguration).
    pub fn builder() -> crate::types::builders::LustreLogCreateConfigurationBuilder {
        crate::types::builders::LustreLogCreateConfigurationBuilder::default()
    }
}

/// A builder for [`LustreLogCreateConfiguration`](crate::types::LustreLogCreateConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LustreLogCreateConfigurationBuilder {
    pub(crate) level: ::std::option::Option<crate::types::LustreAccessAuditLogLevel>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
}
impl LustreLogCreateConfigurationBuilder {
    /// <p>Sets which data repository events are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn level(mut self, input: crate::types::LustreAccessAuditLogLevel) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets which data repository events are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    pub fn set_level(mut self, input: ::std::option::Option<crate::types::LustreAccessAuditLogLevel>) -> Self {
        self.level = input;
        self
    }
    /// <p>Sets which data repository events are logged by Amazon FSx.</p>
    /// <ul>
    /// <li> <p> <code>WARN_ONLY</code> - only warning events are logged.</p> </li>
    /// <li> <p> <code>ERROR_ONLY</code> - only error events are logged.</p> </li>
    /// <li> <p> <code>WARN_ERROR</code> - both warning events and error events are logged.</p> </li>
    /// <li> <p> <code>DISABLED</code> - logging of data repository events is turned off.</p> </li>
    /// </ul>
    pub fn get_level(&self) -> &::std::option::Option<crate::types::LustreAccessAuditLogLevel> {
        &self.level
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs.</p>
    /// <p>The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:</p>
    /// <ul>
    /// <li> <p>The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p> </li>
    /// <li> <p>The name of the Amazon CloudWatch Logs log group must begin with the <code>/aws/fsx</code> prefix.</p> </li>
    /// <li> <p>If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs <code>/aws/fsx/lustre</code> log group (for Amazon FSx for Lustre) or <code>/aws/fsx/filecache</code> (for Amazon File Cache).</p> </li>
    /// <li> <p>If <code>Destination</code> is provided and the resource does not exist, the request will fail with a <code>BadRequest</code> error.</p> </li>
    /// <li> <p>If <code>Level</code> is set to <code>DISABLED</code>, you cannot specify a destination in <code>Destination</code>.</p> </li>
    /// </ul>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs.</p>
    /// <p>The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:</p>
    /// <ul>
    /// <li> <p>The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p> </li>
    /// <li> <p>The name of the Amazon CloudWatch Logs log group must begin with the <code>/aws/fsx</code> prefix.</p> </li>
    /// <li> <p>If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs <code>/aws/fsx/lustre</code> log group (for Amazon FSx for Lustre) or <code>/aws/fsx/filecache</code> (for Amazon File Cache).</p> </li>
    /// <li> <p>If <code>Destination</code> is provided and the resource does not exist, the request will fail with a <code>BadRequest</code> error.</p> </li>
    /// <li> <p>If <code>Level</code> is set to <code>DISABLED</code>, you cannot specify a destination in <code>Destination</code>.</p> </li>
    /// </ul>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that specifies the destination of the logs.</p>
    /// <p>The destination can be any Amazon CloudWatch Logs log group ARN, with the following requirements:</p>
    /// <ul>
    /// <li> <p>The destination ARN that you provide must be in the same Amazon Web Services partition, Amazon Web Services Region, and Amazon Web Services account as your Amazon FSx file system.</p> </li>
    /// <li> <p>The name of the Amazon CloudWatch Logs log group must begin with the <code>/aws/fsx</code> prefix.</p> </li>
    /// <li> <p>If you do not provide a destination, Amazon FSx will create and use a log stream in the CloudWatch Logs <code>/aws/fsx/lustre</code> log group (for Amazon FSx for Lustre) or <code>/aws/fsx/filecache</code> (for Amazon File Cache).</p> </li>
    /// <li> <p>If <code>Destination</code> is provided and the resource does not exist, the request will fail with a <code>BadRequest</code> error.</p> </li>
    /// <li> <p>If <code>Level</code> is set to <code>DISABLED</code>, you cannot specify a destination in <code>Destination</code>.</p> </li>
    /// </ul>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`LustreLogCreateConfiguration`](crate::types::LustreLogCreateConfiguration).
    pub fn build(self) -> crate::types::LustreLogCreateConfiguration {
        crate::types::LustreLogCreateConfiguration {
            level: self.level,
            destination: self.destination,
        }
    }
}
