// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon FSx for OpenZFS configuration properties for the file system that you are creating.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFileSystemOpenZfsConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    #[doc(hidden)]
    pub automatic_backup_retention_days: std::option::Option<i32>,
    /// <p>A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.</p>
    #[doc(hidden)]
    pub copy_tags_to_backups: std::option::Option<bool>,
    /// <p>A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.</p>
    #[doc(hidden)]
    pub copy_tags_to_volumes: std::option::Option<bool>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    #[doc(hidden)]
    pub daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    /// <p>Specifies the file system deployment type. Single AZ deployment types are configured for redundancy within a single Availability Zone in an Amazon Web Services Region . Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>SINGLE_AZ_1</code>- (Default) Creates file systems with throughput capacities of 64 - 4,096 MB/s. <code>Single_AZ_1</code> is available in all Amazon Web Services Regions where Amazon FSx for OpenZFS is available, except US West (Oregon).</p> </li>
    /// <li> <p> <code>SINGLE_AZ_2</code>- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache. <code>Single_AZ_2</code> is available only in the US East (N. Virginia), US East (Ohio), US West (Oregon), and Europe (Ireland) Amazon Web Services Regions.</p> </li>
    /// </ul>
    /// <p>For more information, see: <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions">Deployment type availability</a> and <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance">File system performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    #[doc(hidden)]
    pub deployment_type: std::option::Option<crate::types::OpenZfsDeploymentType>,
    /// <p>Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MB/s). Valid values depend on the DeploymentType you choose, as follows:</p>
    /// <ul>
    /// <li> <p>For <code>SINGLE_AZ_1</code>, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.</p> </li>
    /// <li> <p>For <code>SINGLE_AZ_2</code>, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.</p> </li>
    /// </ul>
    /// <p>You pay for additional throughput capacity that you provision.</p>
    #[doc(hidden)]
    pub throughput_capacity: std::option::Option<i32>,
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    #[doc(hidden)]
    pub weekly_maintenance_start_time: std::option::Option<std::string::String>,
    /// <p>The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).</p>
    #[doc(hidden)]
    pub disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    /// <p>The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume. </p>
    #[doc(hidden)]
    pub root_volume_configuration:
        std::option::Option<crate::types::OpenZfsCreateRootVolumeConfiguration>,
}
impl CreateFileSystemOpenZfsConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.</p>
    pub fn copy_tags_to_backups(&self) -> std::option::Option<bool> {
        self.copy_tags_to_backups
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.</p>
    pub fn copy_tags_to_volumes(&self) -> std::option::Option<bool> {
        self.copy_tags_to_volumes
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(&self) -> std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>Specifies the file system deployment type. Single AZ deployment types are configured for redundancy within a single Availability Zone in an Amazon Web Services Region . Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>SINGLE_AZ_1</code>- (Default) Creates file systems with throughput capacities of 64 - 4,096 MB/s. <code>Single_AZ_1</code> is available in all Amazon Web Services Regions where Amazon FSx for OpenZFS is available, except US West (Oregon).</p> </li>
    /// <li> <p> <code>SINGLE_AZ_2</code>- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache. <code>Single_AZ_2</code> is available only in the US East (N. Virginia), US East (Ohio), US West (Oregon), and Europe (Ireland) Amazon Web Services Regions.</p> </li>
    /// </ul>
    /// <p>For more information, see: <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions">Deployment type availability</a> and <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance">File system performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn deployment_type(&self) -> std::option::Option<&crate::types::OpenZfsDeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MB/s). Valid values depend on the DeploymentType you choose, as follows:</p>
    /// <ul>
    /// <li> <p>For <code>SINGLE_AZ_1</code>, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.</p> </li>
    /// <li> <p>For <code>SINGLE_AZ_2</code>, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.</p> </li>
    /// </ul>
    /// <p>You pay for additional throughput capacity that you provision.</p>
    pub fn throughput_capacity(&self) -> std::option::Option<i32> {
        self.throughput_capacity
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
    /// <p>The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).</p>
    pub fn disk_iops_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DiskIopsConfiguration> {
        self.disk_iops_configuration.as_ref()
    }
    /// <p>The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume. </p>
    pub fn root_volume_configuration(
        &self,
    ) -> std::option::Option<&crate::types::OpenZfsCreateRootVolumeConfiguration> {
        self.root_volume_configuration.as_ref()
    }
}
impl CreateFileSystemOpenZfsConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateFileSystemOpenZfsConfiguration`](crate::types::CreateFileSystemOpenZfsConfiguration).
    pub fn builder() -> crate::types::builders::CreateFileSystemOpenZfsConfigurationBuilder {
        crate::types::builders::CreateFileSystemOpenZfsConfigurationBuilder::default()
    }
}

/// A builder for [`CreateFileSystemOpenZfsConfiguration`](crate::types::CreateFileSystemOpenZfsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateFileSystemOpenZfsConfigurationBuilder {
    pub(crate) automatic_backup_retention_days: std::option::Option<i32>,
    pub(crate) copy_tags_to_backups: std::option::Option<bool>,
    pub(crate) copy_tags_to_volumes: std::option::Option<bool>,
    pub(crate) daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    pub(crate) deployment_type: std::option::Option<crate::types::OpenZfsDeploymentType>,
    pub(crate) throughput_capacity: std::option::Option<i32>,
    pub(crate) weekly_maintenance_start_time: std::option::Option<std::string::String>,
    pub(crate) disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    pub(crate) root_volume_configuration:
        std::option::Option<crate::types::OpenZfsCreateRootVolumeConfiguration>,
}
impl CreateFileSystemOpenZfsConfigurationBuilder {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.</p>
    pub fn copy_tags_to_backups(mut self, input: bool) -> Self {
        self.copy_tags_to_backups = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to backups. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to all automatic and user-initiated backups where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value.</p>
    pub fn set_copy_tags_to_backups(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags_to_backups = input;
        self
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.</p>
    pub fn copy_tags_to_volumes(mut self, input: bool) -> Self {
        self.copy_tags_to_volumes = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether tags for the file system should be copied to volumes. This value defaults to <code>false</code>. If it's set to <code>true</code>, all tags for the file system are copied to volumes where the user doesn't specify tags. If this value is <code>true</code>, and you specify one or more tags, only the specified tags are copied to volumes. If you specify one or more tags when creating the volume, no tags are copied from the file system, regardless of this value.</p>
    pub fn set_copy_tags_to_volumes(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags_to_volumes = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn set_daily_automatic_backup_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>Specifies the file system deployment type. Single AZ deployment types are configured for redundancy within a single Availability Zone in an Amazon Web Services Region . Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>SINGLE_AZ_1</code>- (Default) Creates file systems with throughput capacities of 64 - 4,096 MB/s. <code>Single_AZ_1</code> is available in all Amazon Web Services Regions where Amazon FSx for OpenZFS is available, except US West (Oregon).</p> </li>
    /// <li> <p> <code>SINGLE_AZ_2</code>- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache. <code>Single_AZ_2</code> is available only in the US East (N. Virginia), US East (Ohio), US West (Oregon), and Europe (Ireland) Amazon Web Services Regions.</p> </li>
    /// </ul>
    /// <p>For more information, see: <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions">Deployment type availability</a> and <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance">File system performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn deployment_type(mut self, input: crate::types::OpenZfsDeploymentType) -> Self {
        self.deployment_type = Some(input);
        self
    }
    /// <p>Specifies the file system deployment type. Single AZ deployment types are configured for redundancy within a single Availability Zone in an Amazon Web Services Region . Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>SINGLE_AZ_1</code>- (Default) Creates file systems with throughput capacities of 64 - 4,096 MB/s. <code>Single_AZ_1</code> is available in all Amazon Web Services Regions where Amazon FSx for OpenZFS is available, except US West (Oregon).</p> </li>
    /// <li> <p> <code>SINGLE_AZ_2</code>- Creates file systems with throughput capacities of 160 - 10,240 MB/s using an NVMe L2ARC cache. <code>Single_AZ_2</code> is available only in the US East (N. Virginia), US East (Ohio), US West (Oregon), and Europe (Ireland) Amazon Web Services Regions.</p> </li>
    /// </ul>
    /// <p>For more information, see: <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/availability-durability.html#available-aws-regions">Deployment type availability</a> and <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#zfs-fs-performance">File system performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn set_deployment_type(
        mut self,
        input: std::option::Option<crate::types::OpenZfsDeploymentType>,
    ) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MB/s). Valid values depend on the DeploymentType you choose, as follows:</p>
    /// <ul>
    /// <li> <p>For <code>SINGLE_AZ_1</code>, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.</p> </li>
    /// <li> <p>For <code>SINGLE_AZ_2</code>, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.</p> </li>
    /// </ul>
    /// <p>You pay for additional throughput capacity that you provision.</p>
    pub fn throughput_capacity(mut self, input: i32) -> Self {
        self.throughput_capacity = Some(input);
        self
    }
    /// <p>Specifies the throughput of an Amazon FSx for OpenZFS file system, measured in megabytes per second (MB/s). Valid values depend on the DeploymentType you choose, as follows:</p>
    /// <ul>
    /// <li> <p>For <code>SINGLE_AZ_1</code>, valid values are 64, 128, 256, 512, 1024, 2048, 3072, or 4096 MB/s.</p> </li>
    /// <li> <p>For <code>SINGLE_AZ_2</code>, valid values are 160, 320, 640, 1280, 2560, 3840, 5120, 7680, or 10240 MB/s.</p> </li>
    /// </ul>
    /// <p>You pay for additional throughput capacity that you provision.</p>
    pub fn set_throughput_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.throughput_capacity = input;
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.weekly_maintenance_start_time = Some(input.into());
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// <p>The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).</p>
    pub fn disk_iops_configuration(mut self, input: crate::types::DiskIopsConfiguration) -> Self {
        self.disk_iops_configuration = Some(input);
        self
    }
    /// <p>The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how the amount was provisioned (by the customer or by the system).</p>
    pub fn set_disk_iops_configuration(
        mut self,
        input: std::option::Option<crate::types::DiskIopsConfiguration>,
    ) -> Self {
        self.disk_iops_configuration = input;
        self
    }
    /// <p>The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume. </p>
    pub fn root_volume_configuration(
        mut self,
        input: crate::types::OpenZfsCreateRootVolumeConfiguration,
    ) -> Self {
        self.root_volume_configuration = Some(input);
        self
    }
    /// <p>The configuration Amazon FSx uses when creating the root value of the Amazon FSx for OpenZFS file system. All volumes are children of the root volume. </p>
    pub fn set_root_volume_configuration(
        mut self,
        input: std::option::Option<crate::types::OpenZfsCreateRootVolumeConfiguration>,
    ) -> Self {
        self.root_volume_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateFileSystemOpenZfsConfiguration`](crate::types::CreateFileSystemOpenZfsConfiguration).
    pub fn build(self) -> crate::types::CreateFileSystemOpenZfsConfiguration {
        crate::types::CreateFileSystemOpenZfsConfiguration {
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            copy_tags_to_backups: self.copy_tags_to_backups,
            copy_tags_to_volumes: self.copy_tags_to_volumes,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            deployment_type: self.deployment_type,
            throughput_capacity: self.throughput_capacity,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
            disk_iops_configuration: self.disk_iops_configuration,
            root_volume_configuration: self.root_volume_configuration,
        }
    }
}
