// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for the FSx for NetApp ONTAP file system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OntapFileSystemConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    #[doc(hidden)]
    pub automatic_backup_retention_days: std::option::Option<i32>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    #[doc(hidden)]
    pub daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    /// <p>Specifies the FSx for ONTAP file system deployment type in use in the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html">Choosing Multi-AZ or Single-AZ file system deployment</a>. </p>
    #[doc(hidden)]
    pub deployment_type: std::option::Option<crate::types::OntapDeploymentType>,
    /// <p>(Multi-AZ only) The IP address range in which the endpoints to access your file system are created.</p> <important>
    /// <p>The Endpoint IP address range you select for your file system must exist outside the VPC's CIDR range and must be at least /30 or larger. If you do not specify this optional parameter, Amazon FSx will automatically select a CIDR block for you.</p>
    /// </important>
    #[doc(hidden)]
    pub endpoint_ip_address_range: std::option::Option<std::string::String>,
    /// <p>The <code>Management</code> and <code>Intercluster</code> endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.</p>
    #[doc(hidden)]
    pub endpoints: std::option::Option<crate::types::FileSystemEndpoints>,
    /// <p>The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.</p>
    #[doc(hidden)]
    pub disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    /// <p>The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> </p>
    #[doc(hidden)]
    pub preferred_subnet_id: std::option::Option<std::string::String>,
    /// <p>(Multi-AZ only) The VPC route tables in which your file system's endpoints are created.</p>
    #[doc(hidden)]
    pub route_table_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).</p>
    #[doc(hidden)]
    pub throughput_capacity: std::option::Option<i32>,
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    #[doc(hidden)]
    pub weekly_maintenance_start_time: std::option::Option<std::string::String>,
}
impl OntapFileSystemConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(&self) -> std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type in use in the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html">Choosing Multi-AZ or Single-AZ file system deployment</a>. </p>
    pub fn deployment_type(&self) -> std::option::Option<&crate::types::OntapDeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>(Multi-AZ only) The IP address range in which the endpoints to access your file system are created.</p> <important>
    /// <p>The Endpoint IP address range you select for your file system must exist outside the VPC's CIDR range and must be at least /30 or larger. If you do not specify this optional parameter, Amazon FSx will automatically select a CIDR block for you.</p>
    /// </important>
    pub fn endpoint_ip_address_range(&self) -> std::option::Option<&str> {
        self.endpoint_ip_address_range.as_deref()
    }
    /// <p>The <code>Management</code> and <code>Intercluster</code> endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.</p>
    pub fn endpoints(&self) -> std::option::Option<&crate::types::FileSystemEndpoints> {
        self.endpoints.as_ref()
    }
    /// <p>The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.</p>
    pub fn disk_iops_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DiskIopsConfiguration> {
        self.disk_iops_configuration.as_ref()
    }
    /// <p>The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> </p>
    pub fn preferred_subnet_id(&self) -> std::option::Option<&str> {
        self.preferred_subnet_id.as_deref()
    }
    /// <p>(Multi-AZ only) The VPC route tables in which your file system's endpoints are created.</p>
    pub fn route_table_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.route_table_ids.as_deref()
    }
    /// <p>The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).</p>
    pub fn throughput_capacity(&self) -> std::option::Option<i32> {
        self.throughput_capacity
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
}
impl OntapFileSystemConfiguration {
    /// Creates a new builder-style object to manufacture [`OntapFileSystemConfiguration`](crate::types::OntapFileSystemConfiguration).
    pub fn builder() -> crate::types::builders::OntapFileSystemConfigurationBuilder {
        crate::types::builders::OntapFileSystemConfigurationBuilder::default()
    }
}

/// A builder for [`OntapFileSystemConfiguration`](crate::types::OntapFileSystemConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OntapFileSystemConfigurationBuilder {
    pub(crate) automatic_backup_retention_days: std::option::Option<i32>,
    pub(crate) daily_automatic_backup_start_time: std::option::Option<std::string::String>,
    pub(crate) deployment_type: std::option::Option<crate::types::OntapDeploymentType>,
    pub(crate) endpoint_ip_address_range: std::option::Option<std::string::String>,
    pub(crate) endpoints: std::option::Option<crate::types::FileSystemEndpoints>,
    pub(crate) disk_iops_configuration: std::option::Option<crate::types::DiskIopsConfiguration>,
    pub(crate) preferred_subnet_id: std::option::Option<std::string::String>,
    pub(crate) route_table_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) throughput_capacity: std::option::Option<i32>,
    pub(crate) weekly_maintenance_start_time: std::option::Option<std::string::String>,
}
impl OntapFileSystemConfigurationBuilder {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn daily_automatic_backup_start_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. </p>
    pub fn set_daily_automatic_backup_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type in use in the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html">Choosing Multi-AZ or Single-AZ file system deployment</a>. </p>
    pub fn deployment_type(mut self, input: crate::types::OntapDeploymentType) -> Self {
        self.deployment_type = Some(input);
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type in use in the file system. </p>
    /// <ul>
    /// <li> <p> <code>MULTI_AZ_1</code> - (Default) A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. </p> </li>
    /// <li> <p> <code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy.</p> </li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html">Choosing Multi-AZ or Single-AZ file system deployment</a>. </p>
    pub fn set_deployment_type(
        mut self,
        input: std::option::Option<crate::types::OntapDeploymentType>,
    ) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>(Multi-AZ only) The IP address range in which the endpoints to access your file system are created.</p> <important>
    /// <p>The Endpoint IP address range you select for your file system must exist outside the VPC's CIDR range and must be at least /30 or larger. If you do not specify this optional parameter, Amazon FSx will automatically select a CIDR block for you.</p>
    /// </important>
    pub fn endpoint_ip_address_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_ip_address_range = Some(input.into());
        self
    }
    /// <p>(Multi-AZ only) The IP address range in which the endpoints to access your file system are created.</p> <important>
    /// <p>The Endpoint IP address range you select for your file system must exist outside the VPC's CIDR range and must be at least /30 or larger. If you do not specify this optional parameter, Amazon FSx will automatically select a CIDR block for you.</p>
    /// </important>
    pub fn set_endpoint_ip_address_range(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.endpoint_ip_address_range = input;
        self
    }
    /// <p>The <code>Management</code> and <code>Intercluster</code> endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.</p>
    pub fn endpoints(mut self, input: crate::types::FileSystemEndpoints) -> Self {
        self.endpoints = Some(input);
        self
    }
    /// <p>The <code>Management</code> and <code>Intercluster</code> endpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror.</p>
    pub fn set_endpoints(
        mut self,
        input: std::option::Option<crate::types::FileSystemEndpoints>,
    ) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.</p>
    pub fn disk_iops_configuration(mut self, input: crate::types::DiskIopsConfiguration) -> Self {
        self.disk_iops_configuration = Some(input);
        self
    }
    /// <p>The SSD IOPS configuration for the ONTAP file system, specifying the number of provisioned IOPS and the provision mode.</p>
    pub fn set_disk_iops_configuration(
        mut self,
        input: std::option::Option<crate::types::DiskIopsConfiguration>,
    ) -> Self {
        self.disk_iops_configuration = input;
        self
    }
    /// <p>The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> </p>
    pub fn preferred_subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_subnet_id = Some(input.into());
        self
    }
    /// <p>The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> </p>
    pub fn set_preferred_subnet_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_subnet_id = input;
        self
    }
    /// Appends an item to `route_table_ids`.
    ///
    /// To override the contents of this collection use [`set_route_table_ids`](Self::set_route_table_ids).
    ///
    /// <p>(Multi-AZ only) The VPC route tables in which your file system's endpoints are created.</p>
    pub fn route_table_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.route_table_ids.unwrap_or_default();
        v.push(input.into());
        self.route_table_ids = Some(v);
        self
    }
    /// <p>(Multi-AZ only) The VPC route tables in which your file system's endpoints are created.</p>
    pub fn set_route_table_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.route_table_ids = input;
        self
    }
    /// <p>The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).</p>
    pub fn throughput_capacity(mut self, input: i32) -> Self {
        self.throughput_capacity = Some(input);
        self
    }
    /// <p>The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).</p>
    pub fn set_throughput_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.throughput_capacity = input;
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.weekly_maintenance_start_time = Some(input.into());
        self
    }
    /// <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p>
    /// <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p>
    /// <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`OntapFileSystemConfiguration`](crate::types::OntapFileSystemConfiguration).
    pub fn build(self) -> crate::types::OntapFileSystemConfiguration {
        crate::types::OntapFileSystemConfiguration {
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            deployment_type: self.deployment_type,
            endpoint_ip_address_range: self.endpoint_ip_address_range,
            endpoints: self.endpoints,
            disk_iops_configuration: self.disk_iops_configuration,
            preferred_subnet_id: self.preferred_subnet_id,
            route_table_ids: self.route_table_ids,
            throughput_capacity: self.throughput_capacity,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
        }
    }
}
