// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Backup {
    /// <p>The ID of the backup.</p>
    pub backup_id: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle status of the backup.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The backup is fully available.</p> </li>
    /// <li> <p> <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the backup.</p> </li>
    /// <li> <p> <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.</p> </li>
    /// <li> <p> <code>COPYING</code> - Amazon FSx is copying the backup.</p> </li>
    /// <li> <p> <code>DELETED</code> - Amazon FSx deleted the backup and it's no longer available.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx couldn't finish the backup.</p> </li>
    /// </ul>
    pub lifecycle: ::std::option::Option<crate::types::BackupLifecycle>,
    /// <p>Details explaining any failures that occurred when creating a backup.</p>
    pub failure_details: ::std::option::Option<crate::types::BackupFailureDetails>,
    /// <p>The type of the file-system backup.</p>
    pub r#type: ::std::option::Option<crate::types::BackupType>,
    /// <p>Displays the current percent of progress of an asynchronous task.</p>
    pub progress_percent: ::std::option::Option<i32>,
    /// <p>The time when a particular backup was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest. </p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the backup resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags associated with a particular file system.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.</p>
    pub file_system: ::std::option::Option<crate::types::FileSystem>,
    /// <p>The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.</p>
    pub directory_information: ::std::option::Option<crate::types::ActiveDirectoryBackupAttributes>,
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub source_backup_id: ::std::option::Option<::std::string::String>,
    /// <p>The source Region of the backup. Specifies the Region from where this backup is copied.</p>
    pub source_backup_region: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the resource type that's backed up.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
    pub volume: ::std::option::Option<crate::types::Volume>,
}
impl Backup {
    /// <p>The ID of the backup.</p>
    pub fn backup_id(&self) -> ::std::option::Option<&str> {
        self.backup_id.as_deref()
    }
    /// <p>The lifecycle status of the backup.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The backup is fully available.</p> </li>
    /// <li> <p> <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the backup.</p> </li>
    /// <li> <p> <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.</p> </li>
    /// <li> <p> <code>COPYING</code> - Amazon FSx is copying the backup.</p> </li>
    /// <li> <p> <code>DELETED</code> - Amazon FSx deleted the backup and it's no longer available.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx couldn't finish the backup.</p> </li>
    /// </ul>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::BackupLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>Details explaining any failures that occurred when creating a backup.</p>
    pub fn failure_details(&self) -> ::std::option::Option<&crate::types::BackupFailureDetails> {
        self.failure_details.as_ref()
    }
    /// <p>The type of the file-system backup.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::BackupType> {
        self.r#type.as_ref()
    }
    /// <p>Displays the current percent of progress of an asynchronous task.</p>
    pub fn progress_percent(&self) -> ::std::option::Option<i32> {
        self.progress_percent
    }
    /// <p>The time when a particular backup was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest. </p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the backup resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The tags associated with a particular file system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.</p>
    pub fn file_system(&self) -> ::std::option::Option<&crate::types::FileSystem> {
        self.file_system.as_ref()
    }
    /// <p>The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.</p>
    pub fn directory_information(&self) -> ::std::option::Option<&crate::types::ActiveDirectoryBackupAttributes> {
        self.directory_information.as_ref()
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn source_backup_id(&self) -> ::std::option::Option<&str> {
        self.source_backup_id.as_deref()
    }
    /// <p>The source Region of the backup. Specifies the Region from where this backup is copied.</p>
    pub fn source_backup_region(&self) -> ::std::option::Option<&str> {
        self.source_backup_region.as_deref()
    }
    /// <p>Specifies the resource type that's backed up.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
    pub fn volume(&self) -> ::std::option::Option<&crate::types::Volume> {
        self.volume.as_ref()
    }
}
impl Backup {
    /// Creates a new builder-style object to manufacture [`Backup`](crate::types::Backup).
    pub fn builder() -> crate::types::builders::BackupBuilder {
        crate::types::builders::BackupBuilder::default()
    }
}

/// A builder for [`Backup`](crate::types::Backup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BackupBuilder {
    pub(crate) backup_id: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::BackupLifecycle>,
    pub(crate) failure_details: ::std::option::Option<crate::types::BackupFailureDetails>,
    pub(crate) r#type: ::std::option::Option<crate::types::BackupType>,
    pub(crate) progress_percent: ::std::option::Option<i32>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) file_system: ::std::option::Option<crate::types::FileSystem>,
    pub(crate) directory_information: ::std::option::Option<crate::types::ActiveDirectoryBackupAttributes>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_backup_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_backup_region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) volume: ::std::option::Option<crate::types::Volume>,
}
impl BackupBuilder {
    /// <p>The ID of the backup.</p>
    /// This field is required.
    pub fn backup_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn set_backup_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_id = input;
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn get_backup_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_id
    }
    /// <p>The lifecycle status of the backup.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The backup is fully available.</p> </li>
    /// <li> <p> <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the backup.</p> </li>
    /// <li> <p> <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.</p> </li>
    /// <li> <p> <code>COPYING</code> - Amazon FSx is copying the backup.</p> </li>
    /// <li> <p> <code>DELETED</code> - Amazon FSx deleted the backup and it's no longer available.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx couldn't finish the backup.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn lifecycle(mut self, input: crate::types::BackupLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle status of the backup.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The backup is fully available.</p> </li>
    /// <li> <p> <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the backup.</p> </li>
    /// <li> <p> <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.</p> </li>
    /// <li> <p> <code>COPYING</code> - Amazon FSx is copying the backup.</p> </li>
    /// <li> <p> <code>DELETED</code> - Amazon FSx deleted the backup and it's no longer available.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx couldn't finish the backup.</p> </li>
    /// </ul>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::BackupLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the backup.</p>
    /// <ul>
    /// <li> <p> <code>AVAILABLE</code> - The backup is fully available.</p> </li>
    /// <li> <p> <code>PENDING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.</p> </li>
    /// <li> <p> <code>CREATING</code> - Amazon FSx is creating the backup.</p> </li>
    /// <li> <p> <code>TRANSFERRING</code> - For user-initiated backups on Lustre file systems only; Amazon FSx is transferring the backup to Amazon S3.</p> </li>
    /// <li> <p> <code>COPYING</code> - Amazon FSx is copying the backup.</p> </li>
    /// <li> <p> <code>DELETED</code> - Amazon FSx deleted the backup and it's no longer available.</p> </li>
    /// <li> <p> <code>FAILED</code> - Amazon FSx couldn't finish the backup.</p> </li>
    /// </ul>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::BackupLifecycle> {
        &self.lifecycle
    }
    /// <p>Details explaining any failures that occurred when creating a backup.</p>
    pub fn failure_details(mut self, input: crate::types::BackupFailureDetails) -> Self {
        self.failure_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details explaining any failures that occurred when creating a backup.</p>
    pub fn set_failure_details(mut self, input: ::std::option::Option<crate::types::BackupFailureDetails>) -> Self {
        self.failure_details = input;
        self
    }
    /// <p>Details explaining any failures that occurred when creating a backup.</p>
    pub fn get_failure_details(&self) -> &::std::option::Option<crate::types::BackupFailureDetails> {
        &self.failure_details
    }
    /// <p>The type of the file-system backup.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::BackupType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the file-system backup.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::BackupType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the file-system backup.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::BackupType> {
        &self.r#type
    }
    /// <p>Displays the current percent of progress of an asynchronous task.</p>
    pub fn progress_percent(mut self, input: i32) -> Self {
        self.progress_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the current percent of progress of an asynchronous task.</p>
    pub fn set_progress_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.progress_percent = input;
        self
    }
    /// <p>Displays the current percent of progress of an asynchronous task.</p>
    pub fn get_progress_percent(&self) -> &::std::option::Option<i32> {
        &self.progress_percent
    }
    /// <p>The time when a particular backup was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when a particular backup was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when a particular backup was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest. </p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest. </p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the Key Management Service (KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest. </p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The Amazon Resource Name (ARN) for the backup resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the backup resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the backup resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with a particular file system.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with a particular file system.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with a particular file system.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.</p>
    /// This field is required.
    pub fn file_system(mut self, input: crate::types::FileSystem) -> Self {
        self.file_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.</p>
    pub fn set_file_system(mut self, input: ::std::option::Option<crate::types::FileSystem>) -> Self {
        self.file_system = input;
        self
    }
    /// <p>The metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.</p>
    pub fn get_file_system(&self) -> &::std::option::Option<crate::types::FileSystem> {
        &self.file_system
    }
    /// <p>The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.</p>
    pub fn directory_information(mut self, input: crate::types::ActiveDirectoryBackupAttributes) -> Self {
        self.directory_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.</p>
    pub fn set_directory_information(mut self, input: ::std::option::Option<crate::types::ActiveDirectoryBackupAttributes>) -> Self {
        self.directory_information = input;
        self
    }
    /// <p>The configuration of the self-managed Microsoft Active Directory directory to which the Windows File Server instance is joined.</p>
    pub fn get_directory_information(&self) -> &::std::option::Option<crate::types::ActiveDirectoryBackupAttributes> {
        &self.directory_information
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn source_backup_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_backup_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn set_source_backup_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_backup_id = input;
        self
    }
    /// <p>The ID of the source backup. Specifies the backup that you are copying.</p>
    pub fn get_source_backup_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_backup_id
    }
    /// <p>The source Region of the backup. Specifies the Region from where this backup is copied.</p>
    pub fn source_backup_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_backup_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source Region of the backup. Specifies the Region from where this backup is copied.</p>
    pub fn set_source_backup_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_backup_region = input;
        self
    }
    /// <p>The source Region of the backup. Specifies the Region from where this backup is copied.</p>
    pub fn get_source_backup_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_backup_region
    }
    /// <p>Specifies the resource type that's backed up.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the resource type that's backed up.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Specifies the resource type that's backed up.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
    pub fn volume(mut self, input: crate::types::Volume) -> Self {
        self.volume = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
    pub fn set_volume(mut self, input: ::std::option::Option<crate::types::Volume>) -> Self {
        self.volume = input;
        self
    }
    /// <p>Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.</p>
    pub fn get_volume(&self) -> &::std::option::Option<crate::types::Volume> {
        &self.volume
    }
    /// Consumes the builder and constructs a [`Backup`](crate::types::Backup).
    pub fn build(self) -> crate::types::Backup {
        crate::types::Backup {
            backup_id: self.backup_id,
            lifecycle: self.lifecycle,
            failure_details: self.failure_details,
            r#type: self.r#type,
            progress_percent: self.progress_percent,
            creation_time: self.creation_time,
            kms_key_id: self.kms_key_id,
            resource_arn: self.resource_arn,
            tags: self.tags,
            file_system: self.file_system,
            directory_information: self.directory_information,
            owner_id: self.owner_id,
            source_backup_id: self.source_backup_id,
            source_backup_region: self.source_backup_region,
            resource_type: self.resource_type,
            volume: self.volume,
        }
    }
}
