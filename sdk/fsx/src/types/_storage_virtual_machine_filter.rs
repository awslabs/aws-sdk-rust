// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter used to restrict the results of describe calls for Amazon FSx for NetApp ONTAP storage virtual machines (SVMs). You can use multiple filters to return results that meet all applied filter requirements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StorageVirtualMachineFilter {
    /// <p>The name for this filter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::StorageVirtualMachineFilterName>,
    /// <p>The values of the filter. These are all the values for any of the applied filters.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StorageVirtualMachineFilter {
    /// <p>The name for this filter.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::StorageVirtualMachineFilterName> {
        self.name.as_ref()
    }
    /// <p>The values of the filter. These are all the values for any of the applied filters.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
}
impl StorageVirtualMachineFilter {
    /// Creates a new builder-style object to manufacture [`StorageVirtualMachineFilter`](crate::types::StorageVirtualMachineFilter).
    pub fn builder() -> crate::types::builders::StorageVirtualMachineFilterBuilder {
        crate::types::builders::StorageVirtualMachineFilterBuilder::default()
    }
}

/// A builder for [`StorageVirtualMachineFilter`](crate::types::StorageVirtualMachineFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StorageVirtualMachineFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::StorageVirtualMachineFilterName>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StorageVirtualMachineFilterBuilder {
    /// <p>The name for this filter.</p>
    pub fn name(mut self, input: crate::types::StorageVirtualMachineFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name for this filter.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::StorageVirtualMachineFilterName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of the filter. These are all the values for any of the applied filters.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The values of the filter. These are all the values for any of the applied filters.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`StorageVirtualMachineFilter`](crate::types::StorageVirtualMachineFilter).
    pub fn build(self) -> crate::types::StorageVirtualMachineFilter {
        crate::types::StorageVirtualMachineFilter {
            name: self.name,
            values: self.values,
        }
    }
}
