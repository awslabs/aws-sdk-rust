// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to specify changes to the OpenZFS configuration for the volume that you are updating.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateOpenZfsVolumeConfiguration {
    /// <p>The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of <code>-1</code> to unset a volume's storage capacity reservation.</p>
    #[doc(hidden)]
    pub storage_capacity_reservation_gi_b: std::option::Option<i32>,
    /// <p>The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of <code>-1</code> to unset a volume's storage capacity quota.</p>
    #[doc(hidden)]
    pub storage_capacity_quota_gi_b: std::option::Option<i32>,
    /// <p>Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs"> Tips for maximizing performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    #[doc(hidden)]
    pub record_size_ki_b: std::option::Option<i32>,
    /// <p>Specifies the method used to compress the data on the volume. The compression type is <code>NONE</code> by default.</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Doesn't compress the data on the volume. <code>NONE</code> is the default.</p> </li>
    /// <li> <p> <code>ZSTD</code> - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.</p> </li>
    /// <li> <p> <code>LZ4</code> - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub data_compression_type: std::option::Option<crate::types::OpenZfsDataCompressionType>,
    /// <p>The configuration object for mounting a Network File System (NFS) file system.</p>
    #[doc(hidden)]
    pub nfs_exports: std::option::Option<std::vec::Vec<crate::types::OpenZfsNfsExport>>,
    /// <p>An object specifying how much storage users or groups can use on the volume.</p>
    #[doc(hidden)]
    pub user_and_group_quotas:
        std::option::Option<std::vec::Vec<crate::types::OpenZfsUserOrGroupQuota>>,
    /// <p>A Boolean value indicating whether the volume is read-only.</p>
    #[doc(hidden)]
    pub read_only: std::option::Option<bool>,
}
impl UpdateOpenZfsVolumeConfiguration {
    /// <p>The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of <code>-1</code> to unset a volume's storage capacity reservation.</p>
    pub fn storage_capacity_reservation_gi_b(&self) -> std::option::Option<i32> {
        self.storage_capacity_reservation_gi_b
    }
    /// <p>The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of <code>-1</code> to unset a volume's storage capacity quota.</p>
    pub fn storage_capacity_quota_gi_b(&self) -> std::option::Option<i32> {
        self.storage_capacity_quota_gi_b
    }
    /// <p>Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs"> Tips for maximizing performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn record_size_ki_b(&self) -> std::option::Option<i32> {
        self.record_size_ki_b
    }
    /// <p>Specifies the method used to compress the data on the volume. The compression type is <code>NONE</code> by default.</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Doesn't compress the data on the volume. <code>NONE</code> is the default.</p> </li>
    /// <li> <p> <code>ZSTD</code> - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.</p> </li>
    /// <li> <p> <code>LZ4</code> - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.</p> </li>
    /// </ul>
    pub fn data_compression_type(
        &self,
    ) -> std::option::Option<&crate::types::OpenZfsDataCompressionType> {
        self.data_compression_type.as_ref()
    }
    /// <p>The configuration object for mounting a Network File System (NFS) file system.</p>
    pub fn nfs_exports(&self) -> std::option::Option<&[crate::types::OpenZfsNfsExport]> {
        self.nfs_exports.as_deref()
    }
    /// <p>An object specifying how much storage users or groups can use on the volume.</p>
    pub fn user_and_group_quotas(
        &self,
    ) -> std::option::Option<&[crate::types::OpenZfsUserOrGroupQuota]> {
        self.user_and_group_quotas.as_deref()
    }
    /// <p>A Boolean value indicating whether the volume is read-only.</p>
    pub fn read_only(&self) -> std::option::Option<bool> {
        self.read_only
    }
}
impl UpdateOpenZfsVolumeConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateOpenZfsVolumeConfiguration`](crate::types::UpdateOpenZfsVolumeConfiguration).
    pub fn builder() -> crate::types::builders::UpdateOpenZfsVolumeConfigurationBuilder {
        crate::types::builders::UpdateOpenZfsVolumeConfigurationBuilder::default()
    }
}

/// A builder for [`UpdateOpenZfsVolumeConfiguration`](crate::types::UpdateOpenZfsVolumeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateOpenZfsVolumeConfigurationBuilder {
    pub(crate) storage_capacity_reservation_gi_b: std::option::Option<i32>,
    pub(crate) storage_capacity_quota_gi_b: std::option::Option<i32>,
    pub(crate) record_size_ki_b: std::option::Option<i32>,
    pub(crate) data_compression_type: std::option::Option<crate::types::OpenZfsDataCompressionType>,
    pub(crate) nfs_exports: std::option::Option<std::vec::Vec<crate::types::OpenZfsNfsExport>>,
    pub(crate) user_and_group_quotas:
        std::option::Option<std::vec::Vec<crate::types::OpenZfsUserOrGroupQuota>>,
    pub(crate) read_only: std::option::Option<bool>,
}
impl UpdateOpenZfsVolumeConfigurationBuilder {
    /// <p>The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of <code>-1</code> to unset a volume's storage capacity reservation.</p>
    pub fn storage_capacity_reservation_gi_b(mut self, input: i32) -> Self {
        self.storage_capacity_reservation_gi_b = Some(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) to reserve from the parent volume. You can't reserve more storage than the parent volume has reserved. You can specify a value of <code>-1</code> to unset a volume's storage capacity reservation.</p>
    pub fn set_storage_capacity_reservation_gi_b(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.storage_capacity_reservation_gi_b = input;
        self
    }
    /// <p>The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of <code>-1</code> to unset a volume's storage capacity quota.</p>
    pub fn storage_capacity_quota_gi_b(mut self, input: i32) -> Self {
        self.storage_capacity_quota_gi_b = Some(input);
        self
    }
    /// <p>The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent. You can specify a quota larger than the storage on the parent volume. You can specify a value of <code>-1</code> to unset a volume's storage capacity quota.</p>
    pub fn set_storage_capacity_quota_gi_b(mut self, input: std::option::Option<i32>) -> Self {
        self.storage_capacity_quota_gi_b = input;
        self
    }
    /// <p>Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs"> Tips for maximizing performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn record_size_ki_b(mut self, input: i32) -> Self {
        self.record_size_ki_b = Some(input);
        self
    }
    /// <p>Specifies the record size of an OpenZFS volume, in kibibytes (KiB). Valid values are 4, 8, 16, 32, 64, 128, 256, 512, or 1024 KiB. The default is 128 KiB. Most workloads should use the default record size. Database workflows can benefit from a smaller record size, while streaming workflows can benefit from a larger record size. For additional guidance on when to set a custom record size, see <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/performance.html#performance-tips-zfs"> Tips for maximizing performance</a> in the <i>Amazon FSx for OpenZFS User Guide</i>.</p>
    pub fn set_record_size_ki_b(mut self, input: std::option::Option<i32>) -> Self {
        self.record_size_ki_b = input;
        self
    }
    /// <p>Specifies the method used to compress the data on the volume. The compression type is <code>NONE</code> by default.</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Doesn't compress the data on the volume. <code>NONE</code> is the default.</p> </li>
    /// <li> <p> <code>ZSTD</code> - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.</p> </li>
    /// <li> <p> <code>LZ4</code> - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.</p> </li>
    /// </ul>
    pub fn data_compression_type(
        mut self,
        input: crate::types::OpenZfsDataCompressionType,
    ) -> Self {
        self.data_compression_type = Some(input);
        self
    }
    /// <p>Specifies the method used to compress the data on the volume. The compression type is <code>NONE</code> by default.</p>
    /// <ul>
    /// <li> <p> <code>NONE</code> - Doesn't compress the data on the volume. <code>NONE</code> is the default.</p> </li>
    /// <li> <p> <code>ZSTD</code> - Compresses the data in the volume using the Zstandard (ZSTD) compression algorithm. Compared to LZ4, Z-Standard provides a better compression ratio to minimize on-disk storage utilization.</p> </li>
    /// <li> <p> <code>LZ4</code> - Compresses the data in the volume using the LZ4 compression algorithm. Compared to Z-Standard, LZ4 is less compute-intensive and delivers higher write throughput speeds.</p> </li>
    /// </ul>
    pub fn set_data_compression_type(
        mut self,
        input: std::option::Option<crate::types::OpenZfsDataCompressionType>,
    ) -> Self {
        self.data_compression_type = input;
        self
    }
    /// Appends an item to `nfs_exports`.
    ///
    /// To override the contents of this collection use [`set_nfs_exports`](Self::set_nfs_exports).
    ///
    /// <p>The configuration object for mounting a Network File System (NFS) file system.</p>
    pub fn nfs_exports(mut self, input: crate::types::OpenZfsNfsExport) -> Self {
        let mut v = self.nfs_exports.unwrap_or_default();
        v.push(input);
        self.nfs_exports = Some(v);
        self
    }
    /// <p>The configuration object for mounting a Network File System (NFS) file system.</p>
    pub fn set_nfs_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OpenZfsNfsExport>>,
    ) -> Self {
        self.nfs_exports = input;
        self
    }
    /// Appends an item to `user_and_group_quotas`.
    ///
    /// To override the contents of this collection use [`set_user_and_group_quotas`](Self::set_user_and_group_quotas).
    ///
    /// <p>An object specifying how much storage users or groups can use on the volume.</p>
    pub fn user_and_group_quotas(mut self, input: crate::types::OpenZfsUserOrGroupQuota) -> Self {
        let mut v = self.user_and_group_quotas.unwrap_or_default();
        v.push(input);
        self.user_and_group_quotas = Some(v);
        self
    }
    /// <p>An object specifying how much storage users or groups can use on the volume.</p>
    pub fn set_user_and_group_quotas(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OpenZfsUserOrGroupQuota>>,
    ) -> Self {
        self.user_and_group_quotas = input;
        self
    }
    /// <p>A Boolean value indicating whether the volume is read-only.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the volume is read-only.</p>
    pub fn set_read_only(mut self, input: std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateOpenZfsVolumeConfiguration`](crate::types::UpdateOpenZfsVolumeConfiguration).
    pub fn build(self) -> crate::types::UpdateOpenZfsVolumeConfiguration {
        crate::types::UpdateOpenZfsVolumeConfiguration {
            storage_capacity_reservation_gi_b: self.storage_capacity_reservation_gi_b,
            storage_capacity_quota_gi_b: self.storage_capacity_quota_gi_b,
            record_size_ki_b: self.record_size_ki_b,
            data_compression_type: self.data_compression_type,
            nfs_exports: self.nfs_exports,
            user_and_group_quotas: self.user_and_group_quotas,
            read_only: self.read_only,
        }
    }
}
