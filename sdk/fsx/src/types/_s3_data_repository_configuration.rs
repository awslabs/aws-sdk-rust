// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Amazon S3 data repository linked to an Amazon FSx for Lustre file system with a data repository association. The configuration consists of an <code>AutoImportPolicy</code> that defines which file events on the data repository are automatically imported to the file system and an <code>AutoExportPolicy</code> that defines which file events on the file system are automatically exported to the data repository. File events are when files or directories are added, changed, or deleted on the file system or the data repository.</p> <note>
/// <p>Data repository associations on Amazon File Cache don't use <code>S3DataRepositoryConfiguration</code> because they don't support automatic import or automatic export.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3DataRepositoryConfiguration {
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.</p>
    #[doc(hidden)]
    pub auto_import_policy: std::option::Option<crate::types::AutoImportPolicy>,
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.</p>
    #[doc(hidden)]
    pub auto_export_policy: std::option::Option<crate::types::AutoExportPolicy>,
}
impl S3DataRepositoryConfiguration {
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.</p>
    pub fn auto_import_policy(&self) -> std::option::Option<&crate::types::AutoImportPolicy> {
        self.auto_import_policy.as_ref()
    }
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.</p>
    pub fn auto_export_policy(&self) -> std::option::Option<&crate::types::AutoExportPolicy> {
        self.auto_export_policy.as_ref()
    }
}
impl S3DataRepositoryConfiguration {
    /// Creates a new builder-style object to manufacture [`S3DataRepositoryConfiguration`](crate::types::S3DataRepositoryConfiguration).
    pub fn builder() -> crate::types::builders::S3DataRepositoryConfigurationBuilder {
        crate::types::builders::S3DataRepositoryConfigurationBuilder::default()
    }
}

/// A builder for [`S3DataRepositoryConfiguration`](crate::types::S3DataRepositoryConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3DataRepositoryConfigurationBuilder {
    pub(crate) auto_import_policy: std::option::Option<crate::types::AutoImportPolicy>,
    pub(crate) auto_export_policy: std::option::Option<crate::types::AutoExportPolicy>,
}
impl S3DataRepositoryConfigurationBuilder {
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.</p>
    pub fn auto_import_policy(mut self, input: crate::types::AutoImportPolicy) -> Self {
        self.auto_import_policy = Some(input);
        self
    }
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically imported from the linked S3 bucket to your file system.</p>
    pub fn set_auto_import_policy(
        mut self,
        input: std::option::Option<crate::types::AutoImportPolicy>,
    ) -> Self {
        self.auto_import_policy = input;
        self
    }
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.</p>
    pub fn auto_export_policy(mut self, input: crate::types::AutoExportPolicy) -> Self {
        self.auto_export_policy = Some(input);
        self
    }
    /// <p>Specifies the type of updated objects (new, changed, deleted) that will be automatically exported from your file system to the linked S3 bucket.</p>
    pub fn set_auto_export_policy(
        mut self,
        input: std::option::Option<crate::types::AutoExportPolicy>,
    ) -> Self {
        self.auto_export_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`S3DataRepositoryConfiguration`](crate::types::S3DataRepositoryConfiguration).
    pub fn build(self) -> crate::types::S3DataRepositoryConfiguration {
        crate::types::S3DataRepositoryConfiguration {
            auto_import_policy: self.auto_import_policy,
            auto_export_policy: self.auto_export_policy,
        }
    }
}
