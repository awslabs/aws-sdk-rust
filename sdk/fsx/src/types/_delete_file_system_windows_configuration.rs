// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration object for the Microsoft Windows file system used in the <code>DeleteFileSystem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteFileSystemWindowsConfiguration {
    /// <p>By default, Amazon FSx for Windows takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.</p>
    pub skip_final_backup: ::std::option::Option<bool>,
    /// <p>A set of tags for your final backup.</p>
    pub final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DeleteFileSystemWindowsConfiguration {
    /// <p>By default, Amazon FSx for Windows takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.</p>
    pub fn skip_final_backup(&self) -> ::std::option::Option<bool> {
        self.skip_final_backup
    }
    /// <p>A set of tags for your final backup.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.final_backup_tags.is_none()`.
    pub fn final_backup_tags(&self) -> &[crate::types::Tag] {
        self.final_backup_tags.as_deref().unwrap_or_default()
    }
}
impl DeleteFileSystemWindowsConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteFileSystemWindowsConfiguration`](crate::types::DeleteFileSystemWindowsConfiguration).
    pub fn builder() -> crate::types::builders::DeleteFileSystemWindowsConfigurationBuilder {
        crate::types::builders::DeleteFileSystemWindowsConfigurationBuilder::default()
    }
}

/// A builder for [`DeleteFileSystemWindowsConfiguration`](crate::types::DeleteFileSystemWindowsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteFileSystemWindowsConfigurationBuilder {
    pub(crate) skip_final_backup: ::std::option::Option<bool>,
    pub(crate) final_backup_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DeleteFileSystemWindowsConfigurationBuilder {
    /// <p>By default, Amazon FSx for Windows takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.</p>
    pub fn skip_final_backup(mut self, input: bool) -> Self {
        self.skip_final_backup = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default, Amazon FSx for Windows takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.</p>
    pub fn set_skip_final_backup(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_final_backup = input;
        self
    }
    /// <p>By default, Amazon FSx for Windows takes a final backup on your behalf when the <code>DeleteFileSystem</code> operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.</p>
    pub fn get_skip_final_backup(&self) -> &::std::option::Option<bool> {
        &self.skip_final_backup
    }
    /// Appends an item to `final_backup_tags`.
    ///
    /// To override the contents of this collection use [`set_final_backup_tags`](Self::set_final_backup_tags).
    ///
    /// <p>A set of tags for your final backup.</p>
    pub fn final_backup_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.final_backup_tags.unwrap_or_default();
        v.push(input);
        self.final_backup_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of tags for your final backup.</p>
    pub fn set_final_backup_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.final_backup_tags = input;
        self
    }
    /// <p>A set of tags for your final backup.</p>
    pub fn get_final_backup_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.final_backup_tags
    }
    /// Consumes the builder and constructs a [`DeleteFileSystemWindowsConfiguration`](crate::types::DeleteFileSystemWindowsConfiguration).
    pub fn build(self) -> crate::types::DeleteFileSystemWindowsConfiguration {
        crate::types::DeleteFileSystemWindowsConfiguration {
            skip_final_backup: self.skip_final_backup,
            final_backup_tags: self.final_backup_tags,
        }
    }
}
