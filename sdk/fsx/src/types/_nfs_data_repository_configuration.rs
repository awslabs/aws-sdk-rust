// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NfsDataRepositoryConfiguration {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub version: ::std::option::Option<crate::types::NfsVersion>,
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>This parameter is not supported for Amazon File Cache.</p>
    pub auto_export_policy: ::std::option::Option<crate::types::AutoExportPolicy>,
}
impl NfsDataRepositoryConfiguration {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn version(&self) -> ::std::option::Option<&crate::types::NfsVersion> {
        self.version.as_ref()
    }
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ips.is_none()`.
    pub fn dns_ips(&self) -> &[::std::string::String] {
        self.dns_ips.as_deref().unwrap_or_default()
    }
    /// <p>This parameter is not supported for Amazon File Cache.</p>
    pub fn auto_export_policy(&self) -> ::std::option::Option<&crate::types::AutoExportPolicy> {
        self.auto_export_policy.as_ref()
    }
}
impl NfsDataRepositoryConfiguration {
    /// Creates a new builder-style object to manufacture [`NfsDataRepositoryConfiguration`](crate::types::NfsDataRepositoryConfiguration).
    pub fn builder() -> crate::types::builders::NfsDataRepositoryConfigurationBuilder {
        crate::types::builders::NfsDataRepositoryConfigurationBuilder::default()
    }
}

/// A builder for [`NfsDataRepositoryConfiguration`](crate::types::NfsDataRepositoryConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NfsDataRepositoryConfigurationBuilder {
    pub(crate) version: ::std::option::Option<crate::types::NfsVersion>,
    pub(crate) dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) auto_export_policy: ::std::option::Option<crate::types::AutoExportPolicy>,
}
impl NfsDataRepositoryConfigurationBuilder {
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    /// This field is required.
    pub fn version(mut self, input: crate::types::NfsVersion) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn set_version(mut self, input: ::std::option::Option<crate::types::NfsVersion>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the NFS (Network File System) protocol of the NFS data repository. Currently, the only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol.</p>
    pub fn get_version(&self) -> &::std::option::Option<crate::types::NfsVersion> {
        &self.version
    }
    /// Appends an item to `dns_ips`.
    ///
    /// To override the contents of this collection use [`set_dns_ips`](Self::set_dns_ips).
    ///
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ips.unwrap_or_default();
        v.push(input.into());
        self.dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn set_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ips = input;
        self
    }
    /// <p>A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers.</p>
    pub fn get_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ips
    }
    /// <p>This parameter is not supported for Amazon File Cache.</p>
    pub fn auto_export_policy(mut self, input: crate::types::AutoExportPolicy) -> Self {
        self.auto_export_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is not supported for Amazon File Cache.</p>
    pub fn set_auto_export_policy(mut self, input: ::std::option::Option<crate::types::AutoExportPolicy>) -> Self {
        self.auto_export_policy = input;
        self
    }
    /// <p>This parameter is not supported for Amazon File Cache.</p>
    pub fn get_auto_export_policy(&self) -> &::std::option::Option<crate::types::AutoExportPolicy> {
        &self.auto_export_policy
    }
    /// Consumes the builder and constructs a [`NfsDataRepositoryConfiguration`](crate::types::NfsDataRepositoryConfiguration).
    pub fn build(self) -> crate::types::NfsDataRepositoryConfiguration {
        crate::types::NfsDataRepositoryConfiguration {
            version: self.version,
            dns_ips: self.dns_ips,
            auto_export_policy: self.auto_export_policy,
        }
    }
}
