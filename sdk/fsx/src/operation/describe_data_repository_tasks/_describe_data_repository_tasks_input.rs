// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDataRepositoryTasksInput {
    /// <p>(Optional) IDs of the tasks whose descriptions you want to retrieve (String).</p>
    #[doc(hidden)]
    pub task_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>(Optional) You can use filters to narrow the <code>DescribeDataRepositoryTasks</code> response to include just tasks for specific file systems, or tasks in a specific lifecycle state.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::DataRepositoryTaskFilter>>,
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeDataRepositoryTasksInput {
    /// <p>(Optional) IDs of the tasks whose descriptions you want to retrieve (String).</p>
    pub fn task_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.task_ids.as_deref()
    }
    /// <p>(Optional) You can use filters to narrow the <code>DescribeDataRepositoryTasks</code> response to include just tasks for specific file systems, or tasks in a specific lifecycle state.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::DataRepositoryTaskFilter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeDataRepositoryTasksInput {
    /// Creates a new builder-style object to manufacture [`DescribeDataRepositoryTasksInput`](crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksInput).
    pub fn builder() -> crate::operation::describe_data_repository_tasks::builders::DescribeDataRepositoryTasksInputBuilder{
        crate::operation::describe_data_repository_tasks::builders::DescribeDataRepositoryTasksInputBuilder::default()
    }
}

/// A builder for [`DescribeDataRepositoryTasksInput`](crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDataRepositoryTasksInputBuilder {
    pub(crate) task_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::DataRepositoryTaskFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeDataRepositoryTasksInputBuilder {
    /// Appends an item to `task_ids`.
    ///
    /// To override the contents of this collection use [`set_task_ids`](Self::set_task_ids).
    ///
    /// <p>(Optional) IDs of the tasks whose descriptions you want to retrieve (String).</p>
    pub fn task_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.task_ids.unwrap_or_default();
        v.push(input.into());
        self.task_ids = Some(v);
        self
    }
    /// <p>(Optional) IDs of the tasks whose descriptions you want to retrieve (String).</p>
    pub fn set_task_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.task_ids = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>(Optional) You can use filters to narrow the <code>DescribeDataRepositoryTasks</code> response to include just tasks for specific file systems, or tasks in a specific lifecycle state.</p>
    pub fn filters(mut self, input: crate::types::DataRepositoryTaskFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>(Optional) You can use filters to narrow the <code>DescribeDataRepositoryTasks</code> response to include just tasks for specific file systems, or tasks in a specific lifecycle state.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataRepositoryTaskFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDataRepositoryTasksInput`](crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksInput {
                task_ids: self.task_ids,
                filters: self.filters,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
