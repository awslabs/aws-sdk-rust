// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVolumeInput {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>Specifies the type of volume to create; <code>ONTAP</code> and <code>OPENZFS</code> are the only valid volume types.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<crate::types::VolumeType>,
    /// <p>Specifies the name of the volume that you're creating.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specifies the configuration to use when creating the ONTAP volume.</p>
    #[doc(hidden)]
    pub ontap_configuration: std::option::Option<crate::types::CreateOntapVolumeConfiguration>,
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies the configuration to use when creating the OpenZFS volume.</p>
    #[doc(hidden)]
    pub open_zfs_configuration: std::option::Option<crate::types::CreateOpenZfsVolumeConfiguration>,
}
impl CreateVolumeInput {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>Specifies the type of volume to create; <code>ONTAP</code> and <code>OPENZFS</code> are the only valid volume types.</p>
    pub fn volume_type(&self) -> std::option::Option<&crate::types::VolumeType> {
        self.volume_type.as_ref()
    }
    /// <p>Specifies the name of the volume that you're creating.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the configuration to use when creating the ONTAP volume.</p>
    pub fn ontap_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CreateOntapVolumeConfiguration> {
        self.ontap_configuration.as_ref()
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Specifies the configuration to use when creating the OpenZFS volume.</p>
    pub fn open_zfs_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CreateOpenZfsVolumeConfiguration> {
        self.open_zfs_configuration.as_ref()
    }
}
impl CreateVolumeInput {
    /// Creates a new builder-style object to manufacture [`CreateVolumeInput`](crate::operation::create_volume::CreateVolumeInput).
    pub fn builder() -> crate::operation::create_volume::builders::CreateVolumeInputBuilder {
        crate::operation::create_volume::builders::CreateVolumeInputBuilder::default()
    }
}

/// A builder for [`CreateVolumeInput`](crate::operation::create_volume::CreateVolumeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVolumeInputBuilder {
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) volume_type: std::option::Option<crate::types::VolumeType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) ontap_configuration:
        std::option::Option<crate::types::CreateOntapVolumeConfiguration>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) open_zfs_configuration:
        std::option::Option<crate::types::CreateOpenZfsVolumeConfiguration>,
}
impl CreateVolumeInputBuilder {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>Specifies the type of volume to create; <code>ONTAP</code> and <code>OPENZFS</code> are the only valid volume types.</p>
    pub fn volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.volume_type = Some(input);
        self
    }
    /// <p>Specifies the type of volume to create; <code>ONTAP</code> and <code>OPENZFS</code> are the only valid volume types.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<crate::types::VolumeType>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>Specifies the name of the volume that you're creating.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Specifies the name of the volume that you're creating.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the configuration to use when creating the ONTAP volume.</p>
    pub fn ontap_configuration(
        mut self,
        input: crate::types::CreateOntapVolumeConfiguration,
    ) -> Self {
        self.ontap_configuration = Some(input);
        self
    }
    /// <p>Specifies the configuration to use when creating the ONTAP volume.</p>
    pub fn set_ontap_configuration(
        mut self,
        input: std::option::Option<crate::types::CreateOntapVolumeConfiguration>,
    ) -> Self {
        self.ontap_configuration = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of <code>Tag</code> values, with a maximum of 50 elements.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies the configuration to use when creating the OpenZFS volume.</p>
    pub fn open_zfs_configuration(
        mut self,
        input: crate::types::CreateOpenZfsVolumeConfiguration,
    ) -> Self {
        self.open_zfs_configuration = Some(input);
        self
    }
    /// <p>Specifies the configuration to use when creating the OpenZFS volume.</p>
    pub fn set_open_zfs_configuration(
        mut self,
        input: std::option::Option<crate::types::CreateOpenZfsVolumeConfiguration>,
    ) -> Self {
        self.open_zfs_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateVolumeInput`](crate::operation::create_volume::CreateVolumeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_volume::CreateVolumeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_volume::CreateVolumeInput {
            client_request_token: self.client_request_token,
            volume_type: self.volume_type,
            name: self.name,
            ontap_configuration: self.ontap_configuration,
            tags: self.tags,
            open_zfs_configuration: self.open_zfs_configuration,
        })
    }
}
