// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response object for the <code>DeleteFileSystem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFileSystemOutput {
    /// <p>The ID of the file system that's being deleted.</p>
    #[doc(hidden)]
    pub file_system_id: std::option::Option<std::string::String>,
    /// <p>The file system lifecycle for the deletion request. If the <code>DeleteFileSystem</code> operation is successful, this status is <code>DELETING</code>.</p>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::FileSystemLifecycle>,
    /// <p>The response object for the Microsoft Windows file system used in the <code>DeleteFileSystem</code> operation.</p>
    #[doc(hidden)]
    pub windows_response: std::option::Option<crate::types::DeleteFileSystemWindowsResponse>,
    /// <p>The response object for the Amazon FSx for Lustre file system being deleted in the <code>DeleteFileSystem</code> operation.</p>
    #[doc(hidden)]
    pub lustre_response: std::option::Option<crate::types::DeleteFileSystemLustreResponse>,
    /// <p>The response object for the OpenZFS file system that's being deleted in the <code>DeleteFileSystem</code> operation.</p>
    #[doc(hidden)]
    pub open_zfs_response: std::option::Option<crate::types::DeleteFileSystemOpenZfsResponse>,
    _request_id: Option<String>,
}
impl DeleteFileSystemOutput {
    /// <p>The ID of the file system that's being deleted.</p>
    pub fn file_system_id(&self) -> std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The file system lifecycle for the deletion request. If the <code>DeleteFileSystem</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::FileSystemLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>The response object for the Microsoft Windows file system used in the <code>DeleteFileSystem</code> operation.</p>
    pub fn windows_response(
        &self,
    ) -> std::option::Option<&crate::types::DeleteFileSystemWindowsResponse> {
        self.windows_response.as_ref()
    }
    /// <p>The response object for the Amazon FSx for Lustre file system being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn lustre_response(
        &self,
    ) -> std::option::Option<&crate::types::DeleteFileSystemLustreResponse> {
        self.lustre_response.as_ref()
    }
    /// <p>The response object for the OpenZFS file system that's being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn open_zfs_response(
        &self,
    ) -> std::option::Option<&crate::types::DeleteFileSystemOpenZfsResponse> {
        self.open_zfs_response.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteFileSystemOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteFileSystemOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFileSystemOutput`](crate::operation::delete_file_system::DeleteFileSystemOutput).
    pub fn builder() -> crate::operation::delete_file_system::builders::DeleteFileSystemOutputBuilder
    {
        crate::operation::delete_file_system::builders::DeleteFileSystemOutputBuilder::default()
    }
}

/// A builder for [`DeleteFileSystemOutput`](crate::operation::delete_file_system::DeleteFileSystemOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteFileSystemOutputBuilder {
    pub(crate) file_system_id: std::option::Option<std::string::String>,
    pub(crate) lifecycle: std::option::Option<crate::types::FileSystemLifecycle>,
    pub(crate) windows_response: std::option::Option<crate::types::DeleteFileSystemWindowsResponse>,
    pub(crate) lustre_response: std::option::Option<crate::types::DeleteFileSystemLustreResponse>,
    pub(crate) open_zfs_response:
        std::option::Option<crate::types::DeleteFileSystemOpenZfsResponse>,
    _request_id: Option<String>,
}
impl DeleteFileSystemOutputBuilder {
    /// <p>The ID of the file system that's being deleted.</p>
    pub fn file_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_system_id = Some(input.into());
        self
    }
    /// <p>The ID of the file system that's being deleted.</p>
    pub fn set_file_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The file system lifecycle for the deletion request. If the <code>DeleteFileSystem</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn lifecycle(mut self, input: crate::types::FileSystemLifecycle) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>The file system lifecycle for the deletion request. If the <code>DeleteFileSystem</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn set_lifecycle(
        mut self,
        input: std::option::Option<crate::types::FileSystemLifecycle>,
    ) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The response object for the Microsoft Windows file system used in the <code>DeleteFileSystem</code> operation.</p>
    pub fn windows_response(
        mut self,
        input: crate::types::DeleteFileSystemWindowsResponse,
    ) -> Self {
        self.windows_response = Some(input);
        self
    }
    /// <p>The response object for the Microsoft Windows file system used in the <code>DeleteFileSystem</code> operation.</p>
    pub fn set_windows_response(
        mut self,
        input: std::option::Option<crate::types::DeleteFileSystemWindowsResponse>,
    ) -> Self {
        self.windows_response = input;
        self
    }
    /// <p>The response object for the Amazon FSx for Lustre file system being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn lustre_response(mut self, input: crate::types::DeleteFileSystemLustreResponse) -> Self {
        self.lustre_response = Some(input);
        self
    }
    /// <p>The response object for the Amazon FSx for Lustre file system being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn set_lustre_response(
        mut self,
        input: std::option::Option<crate::types::DeleteFileSystemLustreResponse>,
    ) -> Self {
        self.lustre_response = input;
        self
    }
    /// <p>The response object for the OpenZFS file system that's being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn open_zfs_response(
        mut self,
        input: crate::types::DeleteFileSystemOpenZfsResponse,
    ) -> Self {
        self.open_zfs_response = Some(input);
        self
    }
    /// <p>The response object for the OpenZFS file system that's being deleted in the <code>DeleteFileSystem</code> operation.</p>
    pub fn set_open_zfs_response(
        mut self,
        input: std::option::Option<crate::types::DeleteFileSystemOpenZfsResponse>,
    ) -> Self {
        self.open_zfs_response = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteFileSystemOutput`](crate::operation::delete_file_system::DeleteFileSystemOutput).
    pub fn build(self) -> crate::operation::delete_file_system::DeleteFileSystemOutput {
        crate::operation::delete_file_system::DeleteFileSystemOutput {
            file_system_id: self.file_system_id,
            lifecycle: self.lifecycle,
            windows_response: self.windows_response,
            lustre_response: self.lustre_response,
            open_zfs_response: self.open_zfs_response,
            _request_id: self._request_id,
        }
    }
}
