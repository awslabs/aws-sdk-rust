// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_storage_virtual_machines::_describe_storage_virtual_machines_output::DescribeStorageVirtualMachinesOutputBuilder;

pub use crate::operation::describe_storage_virtual_machines::_describe_storage_virtual_machines_input::DescribeStorageVirtualMachinesInputBuilder;

/// Fluent builder constructing a request to `DescribeStorageVirtualMachines`.
///
/// <p>Describes one or more Amazon FSx for NetApp ONTAP storage virtual machines (SVMs).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStorageVirtualMachinesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_storage_virtual_machines::builders::DescribeStorageVirtualMachinesInputBuilder
            }
impl DescribeStorageVirtualMachinesFluentBuilder {
    /// Creates a new `DescribeStorageVirtualMachines`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachines, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesOutput, aws_smithy_http::result::SdkError<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_storage_virtual_machines::paginator::DescribeStorageVirtualMachinesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_storage_virtual_machines::paginator::DescribeStorageVirtualMachinesPaginator{
        crate::operation::describe_storage_virtual_machines::paginator::DescribeStorageVirtualMachinesPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `StorageVirtualMachineIds`.
    ///
    /// To override the contents of this collection use [`set_storage_virtual_machine_ids`](Self::set_storage_virtual_machine_ids).
    ///
    /// <p>Enter the ID of one or more SVMs that you want to view.</p>
    pub fn storage_virtual_machine_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_virtual_machine_ids(input.into());
        self
    }
    /// <p>Enter the ID of one or more SVMs that you want to view.</p>
    pub fn set_storage_virtual_machine_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_storage_virtual_machine_ids(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Enter a filter name:value pair to view a select set of SVMs.</p>
    pub fn filters(mut self, input: crate::types::StorageVirtualMachineFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Enter a filter name:value pair to view a select set of SVMs.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StorageVirtualMachineFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
