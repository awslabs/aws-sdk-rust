// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreVolumeFromSnapshotOutput {
    /// <p>The ID of the volume that you restored.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle state of the volume being restored.</p>
    pub lifecycle: ::std::option::Option<crate::types::VolumeLifecycle>,
    /// <p>A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.</p>
    pub administrative_actions: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>,
    _request_id: Option<String>,
}
impl RestoreVolumeFromSnapshotOutput {
    /// <p>The ID of the volume that you restored.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The lifecycle state of the volume being restored.</p>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::VolumeLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.administrative_actions.is_none()`.
    pub fn administrative_actions(&self) -> &[crate::types::AdministrativeAction] {
        self.administrative_actions.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for RestoreVolumeFromSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestoreVolumeFromSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`RestoreVolumeFromSnapshotOutput`](crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotOutput).
    pub fn builder() -> crate::operation::restore_volume_from_snapshot::builders::RestoreVolumeFromSnapshotOutputBuilder {
        crate::operation::restore_volume_from_snapshot::builders::RestoreVolumeFromSnapshotOutputBuilder::default()
    }
}

/// A builder for [`RestoreVolumeFromSnapshotOutput`](crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreVolumeFromSnapshotOutputBuilder {
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::VolumeLifecycle>,
    pub(crate) administrative_actions: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>,
    _request_id: Option<String>,
}
impl RestoreVolumeFromSnapshotOutputBuilder {
    /// <p>The ID of the volume that you restored.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the volume that you restored.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The ID of the volume that you restored.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The lifecycle state of the volume being restored.</p>
    pub fn lifecycle(mut self, input: crate::types::VolumeLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle state of the volume being restored.</p>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::VolumeLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle state of the volume being restored.</p>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::VolumeLifecycle> {
        &self.lifecycle
    }
    /// Appends an item to `administrative_actions`.
    ///
    /// To override the contents of this collection use [`set_administrative_actions`](Self::set_administrative_actions).
    ///
    /// <p>A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.</p>
    pub fn administrative_actions(mut self, input: crate::types::AdministrativeAction) -> Self {
        let mut v = self.administrative_actions.unwrap_or_default();
        v.push(input);
        self.administrative_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.</p>
    pub fn set_administrative_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>>) -> Self {
        self.administrative_actions = input;
        self
    }
    /// <p>A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system.</p>
    pub fn get_administrative_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdministrativeAction>> {
        &self.administrative_actions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RestoreVolumeFromSnapshotOutput`](crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotOutput).
    pub fn build(self) -> crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotOutput {
        crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotOutput {
            volume_id: self.volume_id,
            lifecycle: self.lifecycle,
            administrative_actions: self.administrative_actions,
            _request_id: self._request_id,
        }
    }
}
