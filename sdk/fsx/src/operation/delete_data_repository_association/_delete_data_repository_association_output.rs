// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDataRepositoryAssociationOutput {
    /// <p>The ID of the data repository association being deleted.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>Describes the lifecycle state of the data repository association being deleted.</p>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::DataRepositoryLifecycle>,
    /// <p>Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is <code>false</code>.</p>
    #[doc(hidden)]
    pub delete_data_in_file_system: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteDataRepositoryAssociationOutput {
    /// <p>The ID of the data repository association being deleted.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>Describes the lifecycle state of the data repository association being deleted.</p>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::DataRepositoryLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is <code>false</code>.</p>
    pub fn delete_data_in_file_system(&self) -> std::option::Option<bool> {
        self.delete_data_in_file_system
    }
}
impl aws_http::request_id::RequestId for DeleteDataRepositoryAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDataRepositoryAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDataRepositoryAssociationOutput`](crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationOutput).
    pub fn builder() -> crate::operation::delete_data_repository_association::builders::DeleteDataRepositoryAssociationOutputBuilder{
        crate::operation::delete_data_repository_association::builders::DeleteDataRepositoryAssociationOutputBuilder::default()
    }
}

/// A builder for [`DeleteDataRepositoryAssociationOutput`](crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteDataRepositoryAssociationOutputBuilder {
    pub(crate) association_id: std::option::Option<std::string::String>,
    pub(crate) lifecycle: std::option::Option<crate::types::DataRepositoryLifecycle>,
    pub(crate) delete_data_in_file_system: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteDataRepositoryAssociationOutputBuilder {
    /// <p>The ID of the data repository association being deleted.</p>
    pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_id = Some(input.into());
        self
    }
    /// <p>The ID of the data repository association being deleted.</p>
    pub fn set_association_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>Describes the lifecycle state of the data repository association being deleted.</p>
    pub fn lifecycle(mut self, input: crate::types::DataRepositoryLifecycle) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>Describes the lifecycle state of the data repository association being deleted.</p>
    pub fn set_lifecycle(
        mut self,
        input: std::option::Option<crate::types::DataRepositoryLifecycle>,
    ) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is <code>false</code>.</p>
    pub fn delete_data_in_file_system(mut self, input: bool) -> Self {
        self.delete_data_in_file_system = Some(input);
        self
    }
    /// <p>Indicates whether data in the file system that corresponds to the data repository association is being deleted. Default is <code>false</code>.</p>
    pub fn set_delete_data_in_file_system(mut self, input: std::option::Option<bool>) -> Self {
        self.delete_data_in_file_system = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteDataRepositoryAssociationOutput`](crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationOutput).
    pub fn build(
        self,
    ) -> crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationOutput
    {
        crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationOutput {
            association_id: self.association_id
            ,
            lifecycle: self.lifecycle
            ,
            delete_data_in_file_system: self.delete_data_in_file_system
            ,
            _request_id: self._request_id,
        }
    }
}
