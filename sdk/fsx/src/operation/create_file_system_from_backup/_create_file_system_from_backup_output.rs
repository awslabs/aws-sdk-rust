// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response object for the <code>CreateFileSystemFromBackup</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFileSystemFromBackupOutput {
    /// <p>A description of the file system.</p>
    #[doc(hidden)]
    pub file_system: std::option::Option<crate::types::FileSystem>,
    _request_id: Option<String>,
}
impl CreateFileSystemFromBackupOutput {
    /// <p>A description of the file system.</p>
    pub fn file_system(&self) -> std::option::Option<&crate::types::FileSystem> {
        self.file_system.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateFileSystemFromBackupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateFileSystemFromBackupOutput {
    /// Creates a new builder-style object to manufacture [`CreateFileSystemFromBackupOutput`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput).
    pub fn builder() -> crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupOutputBuilder{
        crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupOutputBuilder::default()
    }
}

/// A builder for [`CreateFileSystemFromBackupOutput`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateFileSystemFromBackupOutputBuilder {
    pub(crate) file_system: std::option::Option<crate::types::FileSystem>,
    _request_id: Option<String>,
}
impl CreateFileSystemFromBackupOutputBuilder {
    /// <p>A description of the file system.</p>
    pub fn file_system(mut self, input: crate::types::FileSystem) -> Self {
        self.file_system = Some(input);
        self
    }
    /// <p>A description of the file system.</p>
    pub fn set_file_system(mut self, input: std::option::Option<crate::types::FileSystem>) -> Self {
        self.file_system = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateFileSystemFromBackupOutput`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput {
        crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput {
            file_system: self.file_system,
            _request_id: self._request_id,
        }
    }
}
