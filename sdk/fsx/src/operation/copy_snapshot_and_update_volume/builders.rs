// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_snapshot_and_update_volume::_copy_snapshot_and_update_volume_output::CopySnapshotAndUpdateVolumeOutputBuilder;

pub use crate::operation::copy_snapshot_and_update_volume::_copy_snapshot_and_update_volume_input::CopySnapshotAndUpdateVolumeInputBuilder;

impl crate::operation::copy_snapshot_and_update_volume::builders::CopySnapshotAndUpdateVolumeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.copy_snapshot_and_update_volume();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CopySnapshotAndUpdateVolume`.
///
/// <p>Updates an existing volume by using a snapshot from another Amazon FSx for OpenZFS file system. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/on-demand-replication.html">on-demand data replication</a> in the Amazon FSx for OpenZFS User Guide.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CopySnapshotAndUpdateVolumeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_snapshot_and_update_volume::builders::CopySnapshotAndUpdateVolumeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeOutput,
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeError,
    > for CopySnapshotAndUpdateVolumeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeOutput,
            crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CopySnapshotAndUpdateVolumeFluentBuilder {
    /// Creates a new `CopySnapshotAndUpdateVolume`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CopySnapshotAndUpdateVolume as a reference.
    pub fn as_input(&self) -> &crate::operation::copy_snapshot_and_update_volume::builders::CopySnapshotAndUpdateVolumeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolume::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolume::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeOutput,
        crate::operation::copy_snapshot_and_update_volume::CopySnapshotAndUpdateVolumeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>Specifies the ID of the volume that you are copying the snapshot to.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.volume_id(input.into());
        self
    }
    /// <p>Specifies the ID of the volume that you are copying the snapshot to.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_volume_id(input);
        self
    }
    /// <p>Specifies the ID of the volume that you are copying the snapshot to.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_volume_id()
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn source_snapshot_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_snapshot_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_source_snapshot_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_snapshot_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_source_snapshot_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_snapshot_arn()
    }
    /// <p>Specifies the strategy to use when copying data from a snapshot to the volume.</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_COPY</code> - Copies all data from the snapshot to the volume.</p></li>
    /// <li>
    /// <p><code>INCREMENTAL_COPY</code> - Copies only the snapshot data that's changed since the previous replication.</p></li>
    /// </ul><note>
    /// <p><code>CLONE</code> isn't a valid copy strategy option for the <code>CopySnapshotAndUpdateVolume</code> operation.</p>
    /// </note>
    pub fn copy_strategy(mut self, input: crate::types::OpenZfsCopyStrategy) -> Self {
        self.inner = self.inner.copy_strategy(input);
        self
    }
    /// <p>Specifies the strategy to use when copying data from a snapshot to the volume.</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_COPY</code> - Copies all data from the snapshot to the volume.</p></li>
    /// <li>
    /// <p><code>INCREMENTAL_COPY</code> - Copies only the snapshot data that's changed since the previous replication.</p></li>
    /// </ul><note>
    /// <p><code>CLONE</code> isn't a valid copy strategy option for the <code>CopySnapshotAndUpdateVolume</code> operation.</p>
    /// </note>
    pub fn set_copy_strategy(mut self, input: ::std::option::Option<crate::types::OpenZfsCopyStrategy>) -> Self {
        self.inner = self.inner.set_copy_strategy(input);
        self
    }
    /// <p>Specifies the strategy to use when copying data from a snapshot to the volume.</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_COPY</code> - Copies all data from the snapshot to the volume.</p></li>
    /// <li>
    /// <p><code>INCREMENTAL_COPY</code> - Copies only the snapshot data that's changed since the previous replication.</p></li>
    /// </ul><note>
    /// <p><code>CLONE</code> isn't a valid copy strategy option for the <code>CopySnapshotAndUpdateVolume</code> operation.</p>
    /// </note>
    pub fn get_copy_strategy(&self) -> &::std::option::Option<crate::types::OpenZfsCopyStrategy> {
        self.inner.get_copy_strategy()
    }
    ///
    /// Appends an item to `Options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>Confirms that you want to delete data on the destination volume that wasn’t there during the previous snapshot replication.</p>
    /// <p>Your replication will fail if you don’t include an option for a specific type of data and that data is on your destination. For example, if you don’t include <code>DELETE_INTERMEDIATE_SNAPSHOTS</code> and there are intermediate snapshots on the destination, you can’t copy the snapshot.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_SNAPSHOTS</code> - Deletes snapshots on the destination volume that aren’t on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_CLONED_VOLUMES</code> - Deletes snapshot clones on the destination volume that aren't on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_DATA</code> - Overwrites snapshots on the destination volume that don’t match the source snapshot that you’re copying.</p></li>
    /// </ul>
    pub fn options(mut self, input: crate::types::UpdateOpenZfsVolumeOption) -> Self {
        self.inner = self.inner.options(input);
        self
    }
    /// <p>Confirms that you want to delete data on the destination volume that wasn’t there during the previous snapshot replication.</p>
    /// <p>Your replication will fail if you don’t include an option for a specific type of data and that data is on your destination. For example, if you don’t include <code>DELETE_INTERMEDIATE_SNAPSHOTS</code> and there are intermediate snapshots on the destination, you can’t copy the snapshot.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_SNAPSHOTS</code> - Deletes snapshots on the destination volume that aren’t on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_CLONED_VOLUMES</code> - Deletes snapshot clones on the destination volume that aren't on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_DATA</code> - Overwrites snapshots on the destination volume that don’t match the source snapshot that you’re copying.</p></li>
    /// </ul>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateOpenZfsVolumeOption>>) -> Self {
        self.inner = self.inner.set_options(input);
        self
    }
    /// <p>Confirms that you want to delete data on the destination volume that wasn’t there during the previous snapshot replication.</p>
    /// <p>Your replication will fail if you don’t include an option for a specific type of data and that data is on your destination. For example, if you don’t include <code>DELETE_INTERMEDIATE_SNAPSHOTS</code> and there are intermediate snapshots on the destination, you can’t copy the snapshot.</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_SNAPSHOTS</code> - Deletes snapshots on the destination volume that aren’t on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_CLONED_VOLUMES</code> - Deletes snapshot clones on the destination volume that aren't on the source volume.</p></li>
    /// <li>
    /// <p><code>DELETE_INTERMEDIATE_DATA</code> - Overwrites snapshots on the destination volume that don’t match the source snapshot that you’re copying.</p></li>
    /// </ul>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateOpenZfsVolumeOption>> {
        self.inner.get_options()
    }
}
