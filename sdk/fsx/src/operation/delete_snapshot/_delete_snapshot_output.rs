// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSnapshotOutput {
    /// <p>The ID of the deleted snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The lifecycle status of the snapshot. If the <code>DeleteSnapshot</code> operation is successful, this status is <code>DELETING</code>.</p>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::SnapshotLifecycle>,
    _request_id: Option<String>,
}
impl DeleteSnapshotOutput {
    /// <p>The ID of the deleted snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The lifecycle status of the snapshot. If the <code>DeleteSnapshot</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::SnapshotLifecycle> {
        self.lifecycle.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotOutput`](crate::operation::delete_snapshot::DeleteSnapshotOutput).
    pub fn builder() -> crate::operation::delete_snapshot::builders::DeleteSnapshotOutputBuilder {
        crate::operation::delete_snapshot::builders::DeleteSnapshotOutputBuilder::default()
    }
}

/// A builder for [`DeleteSnapshotOutput`](crate::operation::delete_snapshot::DeleteSnapshotOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteSnapshotOutputBuilder {
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) lifecycle: std::option::Option<crate::types::SnapshotLifecycle>,
    _request_id: Option<String>,
}
impl DeleteSnapshotOutputBuilder {
    /// <p>The ID of the deleted snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of the deleted snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The lifecycle status of the snapshot. If the <code>DeleteSnapshot</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn lifecycle(mut self, input: crate::types::SnapshotLifecycle) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>The lifecycle status of the snapshot. If the <code>DeleteSnapshot</code> operation is successful, this status is <code>DELETING</code>.</p>
    pub fn set_lifecycle(
        mut self,
        input: std::option::Option<crate::types::SnapshotLifecycle>,
    ) -> Self {
        self.lifecycle = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteSnapshotOutput`](crate::operation::delete_snapshot::DeleteSnapshotOutput).
    pub fn build(self) -> crate::operation::delete_snapshot::DeleteSnapshotOutput {
        crate::operation::delete_snapshot::DeleteSnapshotOutput {
            snapshot_id: self.snapshot_id,
            lifecycle: self.lifecycle,
            _request_id: self._request_id,
        }
    }
}
