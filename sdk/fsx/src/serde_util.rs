// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn incompatible_parameter_error_correct_errors(
    mut builder: crate::types::error::builders::IncompatibleParameterErrorBuilder,
) -> crate::types::error::builders::IncompatibleParameterErrorBuilder {
    if builder.parameter.is_none() {
        builder.parameter = Some(Default::default())
    }
    builder
}

pub(crate) fn service_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::ServiceLimitExceededBuilder,
) -> crate::types::error::builders::ServiceLimitExceededBuilder {
    if builder.limit.is_none() {
        builder.limit = "no value was set".parse::<crate::types::ServiceLimit>().ok()
    }
    builder
}

pub(crate) fn active_directory_error_correct_errors(
    mut builder: crate::types::error::builders::ActiveDirectoryErrorBuilder,
) -> crate::types::error::builders::ActiveDirectoryErrorBuilder {
    if builder.active_directory_id.is_none() {
        builder.active_directory_id = Some(Default::default())
    }
    builder
}

pub(crate) fn not_service_resource_error_correct_errors(
    mut builder: crate::types::error::builders::NotServiceResourceErrorBuilder,
) -> crate::types::error::builders::NotServiceResourceErrorBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_does_not_support_tagging_correct_errors(
    mut builder: crate::types::error::builders::ResourceDoesNotSupportTaggingBuilder,
) -> crate::types::error::builders::ResourceDoesNotSupportTaggingBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundBuilder,
) -> crate::types::error::builders::ResourceNotFoundBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn backup_correct_errors(mut builder: crate::types::builders::BackupBuilder) -> crate::types::builders::BackupBuilder {
    if builder.backup_id.is_none() {
        builder.backup_id = Some(Default::default())
    }
    if builder.lifecycle.is_none() {
        builder.lifecycle = "no value was set".parse::<crate::types::BackupLifecycle>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BackupType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.file_system.is_none() {
        builder.file_system = {
            let builder = crate::types::builders::FileSystemBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn data_repository_task_correct_errors(
    mut builder: crate::types::builders::DataRepositoryTaskBuilder,
) -> crate::types::builders::DataRepositoryTaskBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.lifecycle.is_none() {
        builder.lifecycle = "no value was set".parse::<crate::types::DataRepositoryTaskLifecycle>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataRepositoryTaskType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn completion_report_correct_errors(
    mut builder: crate::types::builders::CompletionReportBuilder,
) -> crate::types::builders::CompletionReportBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn nfs_data_repository_configuration_correct_errors(
    mut builder: crate::types::builders::NfsDataRepositoryConfigurationBuilder,
) -> crate::types::builders::NfsDataRepositoryConfigurationBuilder {
    if builder.version.is_none() {
        builder.version = "no value was set".parse::<crate::types::NfsVersion>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn file_cache_lustre_metadata_configuration_correct_errors(
    mut builder: crate::types::builders::FileCacheLustreMetadataConfigurationBuilder,
) -> crate::types::builders::FileCacheLustreMetadataConfigurationBuilder {
    if builder.storage_capacity.is_none() {
        builder.storage_capacity = Some(Default::default())
    }
    builder
}

pub(crate) fn lustre_log_configuration_correct_errors(
    mut builder: crate::types::builders::LustreLogConfigurationBuilder,
) -> crate::types::builders::LustreLogConfigurationBuilder {
    if builder.level.is_none() {
        builder.level = "no value was set".parse::<crate::types::LustreAccessAuditLogLevel>().ok()
    }
    builder
}

pub(crate) fn windows_audit_log_configuration_correct_errors(
    mut builder: crate::types::builders::WindowsAuditLogConfigurationBuilder,
) -> crate::types::builders::WindowsAuditLogConfigurationBuilder {
    if builder.file_access_audit_log_level.is_none() {
        builder.file_access_audit_log_level = "no value was set".parse::<crate::types::WindowsAccessAuditLogLevel>().ok()
    }
    if builder.file_share_access_audit_log_level.is_none() {
        builder.file_share_access_audit_log_level = "no value was set".parse::<crate::types::WindowsAccessAuditLogLevel>().ok()
    }
    builder
}

pub(crate) fn autocommit_period_correct_errors(
    mut builder: crate::types::builders::AutocommitPeriodBuilder,
) -> crate::types::builders::AutocommitPeriodBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AutocommitPeriodType>().ok()
    }
    builder
}

pub(crate) fn open_zfs_nfs_export_correct_errors(
    mut builder: crate::types::builders::OpenZfsNfsExportBuilder,
) -> crate::types::builders::OpenZfsNfsExportBuilder {
    if builder.client_configurations.is_none() {
        builder.client_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn open_zfs_user_or_group_quota_correct_errors(
    mut builder: crate::types::builders::OpenZfsUserOrGroupQuotaBuilder,
) -> crate::types::builders::OpenZfsUserOrGroupQuotaBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::OpenZfsQuotaType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.storage_capacity_quota_gib.is_none() {
        builder.storage_capacity_quota_gib = Some(Default::default())
    }
    builder
}

pub(crate) fn snaplock_retention_period_correct_errors(
    mut builder: crate::types::builders::SnaplockRetentionPeriodBuilder,
) -> crate::types::builders::SnaplockRetentionPeriodBuilder {
    if builder.default_retention.is_none() {
        builder.default_retention = {
            let builder = crate::types::builders::RetentionPeriodBuilder::default();
            Some(crate::serde_util::retention_period_correct_errors(builder).build())
        }
    }
    if builder.minimum_retention.is_none() {
        builder.minimum_retention = {
            let builder = crate::types::builders::RetentionPeriodBuilder::default();
            Some(crate::serde_util::retention_period_correct_errors(builder).build())
        }
    }
    if builder.maximum_retention.is_none() {
        builder.maximum_retention = {
            let builder = crate::types::builders::RetentionPeriodBuilder::default();
            Some(crate::serde_util::retention_period_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn retention_period_correct_errors(
    mut builder: crate::types::builders::RetentionPeriodBuilder,
) -> crate::types::builders::RetentionPeriodBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RetentionPeriodType>().ok()
    }
    builder
}

pub(crate) fn open_zfs_client_configuration_correct_errors(
    mut builder: crate::types::builders::OpenZfsClientConfigurationBuilder,
) -> crate::types::builders::OpenZfsClientConfigurationBuilder {
    if builder.clients.is_none() {
        builder.clients = Some(Default::default())
    }
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    builder
}
