// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.active_directory_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::protocol_serde::shape_create_svm_active_directory_configuration::ser_create_svm_active_directory_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.file_system_id {
        object.key("FileSystemId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.root_volume_security_style {
        object
            .key("RootVolumeSecurityStyle")
            .string(var_11.as_str());
    }
    Ok(())
}
