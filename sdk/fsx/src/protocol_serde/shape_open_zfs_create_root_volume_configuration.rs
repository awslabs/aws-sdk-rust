// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_open_zfs_create_root_volume_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OpenZfsCreateRootVolumeConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.record_size_kib {
        object.key("RecordSizeKiB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.nfs_exports {
        let mut array_4 = object.key("NfsExports").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_open_zfs_nfs_export::ser_open_zfs_nfs_export(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.user_and_group_quotas {
        let mut array_8 = object.key("UserAndGroupQuotas").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_open_zfs_user_or_group_quota::ser_open_zfs_user_or_group_quota(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_11);
    }
    if let Some(var_12) = &input.read_only {
        object.key("ReadOnly").boolean(*var_12);
    }
    Ok(())
}
