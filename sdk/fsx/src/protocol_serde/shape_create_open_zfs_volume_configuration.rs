// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_open_zfs_volume_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateOpenZfsVolumeConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.parent_volume_id {
        object.key("ParentVolumeId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.storage_capacity_reservation_gib {
        object.key("StorageCapacityReservationGiB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.storage_capacity_quota_gib {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.record_size_kib {
        object.key("RecordSizeKiB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_6);
    }
    if let Some(var_7) = &input.origin_snapshot {
        #[allow(unused_mut)]
        let mut object_8 = object.key("OriginSnapshot").start_object();
        crate::protocol_serde::shape_create_open_zfs_origin_snapshot_configuration::ser_create_open_zfs_origin_snapshot_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.read_only {
        object.key("ReadOnly").boolean(*var_9);
    }
    if let Some(var_10) = &input.nfs_exports {
        let mut array_11 = object.key("NfsExports").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_open_zfs_nfs_export::ser_open_zfs_nfs_export(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.user_and_group_quotas {
        let mut array_15 = object.key("UserAndGroupQuotas").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_open_zfs_user_or_group_quota::ser_open_zfs_user_or_group_quota(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
