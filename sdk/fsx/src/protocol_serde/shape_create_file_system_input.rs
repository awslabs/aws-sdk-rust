// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_file_system::CreateFileSystemInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.file_system_type {
        object.key("FileSystemType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.storage_type {
        object.key("StorageType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.subnet_ids {
        let mut array_6 = object.key("SubnetIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.security_group_ids {
        let mut array_9 = object.key("SecurityGroupIds").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.windows_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("WindowsConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_windows_configuration::ser_create_file_system_windows_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.lustre_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("LustreConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_lustre_configuration::ser_create_file_system_lustre_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.ontap_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("OntapConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_ontap_configuration::ser_create_file_system_ontap_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_22.as_str());
    }
    if let Some(var_23) = &input.open_zfs_configuration {
        #[allow(unused_mut)]
        let mut object_24 = object.key("OpenZFSConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_open_zfs_configuration::ser_create_file_system_open_zfs_configuration(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    Ok(())
}
