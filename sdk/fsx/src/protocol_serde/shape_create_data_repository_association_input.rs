// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_repository_association_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_repository_association::CreateDataRepositoryAssociationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.file_system_id {
        object.key("FileSystemId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.file_system_path {
        object.key("FileSystemPath").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_repository_path {
        object.key("DataRepositoryPath").string(var_3.as_str());
    }
    if let Some(var_4) = &input.batch_import_meta_data_on_create {
        object.key("BatchImportMetaDataOnCreate").boolean(*var_4);
    }
    if let Some(var_5) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.s3 {
        #[allow(unused_mut)]
        let mut object_7 = object.key("S3").start_object();
        crate::protocol_serde::shape_s3_data_repository_configuration::ser_s3_data_repository_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
