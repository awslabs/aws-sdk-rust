// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.backup_id {
        object.key("BackupId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.subnet_ids {
        let mut array_4 = object.key("SubnetIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.security_group_ids {
        let mut array_7 = object.key("SecurityGroupIds").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.windows_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("WindowsConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_windows_configuration::ser_create_file_system_windows_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.lustre_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("LustreConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_lustre_configuration::ser_create_file_system_lustre_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.storage_type {
        object.key("StorageType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_19.as_str());
    }
    if let Some(var_20) = &input.open_zfs_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("OpenZFSConfiguration").start_object();
        crate::protocol_serde::shape_create_file_system_open_zfs_configuration::ser_create_file_system_open_zfs_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    Ok(())
}
