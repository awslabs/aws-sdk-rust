// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_open_zfs_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateFileSystemOpenZfsConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_2);
    }
    if let Some(var_3) = &input.copy_tags_to_volumes {
        object.key("CopyTagsToVolumes").boolean(*var_3);
    }
    if let Some(var_4) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_4.as_str());
    }
    if let Some(var_5) = &input.deployment_type {
        object.key("DeploymentType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_7.as_str());
    }
    if let Some(var_8) = &input.disk_iops_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DiskIopsConfiguration").start_object();
        crate::protocol_serde::shape_disk_iops_configuration::ser_disk_iops_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.root_volume_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("RootVolumeConfiguration").start_object();
        crate::protocol_serde::shape_open_zfs_create_root_volume_configuration::ser_open_zfs_create_root_volume_configuration(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.endpoint_ip_address_range {
        object.key("EndpointIpAddressRange").string(var_13.as_str());
    }
    if let Some(var_14) = &input.route_table_ids {
        let mut array_15 = object.key("RouteTableIds").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    Ok(())
}
