// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_windows_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateFileSystemWindowsConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.self_managed_active_directory_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SelfManagedActiveDirectoryConfiguration").start_object();
        crate::protocol_serde::shape_self_managed_active_directory_configuration::ser_self_managed_active_directory_configuration(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.deployment_type {
        object.key("DeploymentType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_7.as_str());
    }
    if let Some(var_8) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_8.as_str());
    }
    if let Some(var_9) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_10);
    }
    if let Some(var_11) = &input.aliases {
        let mut array_12 = object.key("Aliases").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.audit_log_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("AuditLogConfiguration").start_object();
        crate::protocol_serde::shape_windows_audit_log_create_configuration::ser_windows_audit_log_create_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.disk_iops_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("DiskIopsConfiguration").start_object();
        crate::protocol_serde::shape_disk_iops_configuration::ser_disk_iops_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
