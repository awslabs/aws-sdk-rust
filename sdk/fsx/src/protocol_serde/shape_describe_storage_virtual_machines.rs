// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_storage_virtual_machines_input(
    input: &crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_describe_storage_virtual_machines_input::ser_describe_storage_virtual_machines_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_storage_virtual_machines_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesOutput,
    crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequest" => crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::BadRequest({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BadRequestBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_bad_request::de_bad_request_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InternalServerError" => crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "StorageVirtualMachineNotFound" => crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::StorageVirtualMachineNotFound({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::StorageVirtualMachineNotFoundBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_storage_virtual_machine_not_found::de_storage_virtual_machine_not_found_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_storage_virtual_machines_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesOutput,
    crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_storage_virtual_machines::builders::DescribeStorageVirtualMachinesOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_describe_storage_virtual_machines::de_describe_storage_virtual_machines(response.body().as_ref(), output).map_err(crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_describe_storage_virtual_machines(value: &[u8], mut builder: crate::operation::describe_storage_virtual_machines::builders::DescribeStorageVirtualMachinesOutputBuilder) -> Result<crate::operation::describe_storage_virtual_machines::builders::DescribeStorageVirtualMachinesOutputBuilder, aws_smithy_json::deserialize::error::DeserializeError>{
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "StorageVirtualMachines" => {
                        builder = builder.set_storage_virtual_machines(
                            crate::protocol_serde::shape_storage_virtual_machines::de_storage_virtual_machines(tokens)?
                        );
                    }
                    "NextToken" => {
                        builder = builder.set_next_token(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
