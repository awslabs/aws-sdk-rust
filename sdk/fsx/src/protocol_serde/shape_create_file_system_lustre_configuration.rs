// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_lustre_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateFileSystemLustreConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_1.as_str());
    }
    if let Some(var_2) = &input.import_path {
        object.key("ImportPath").string(var_2.as_str());
    }
    if let Some(var_3) = &input.export_path {
        object.key("ExportPath").string(var_3.as_str());
    }
    if let Some(var_4) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.deployment_type {
        object.key("DeploymentType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_6.as_str());
    }
    if let Some(var_7) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_8.as_str());
    }
    if let Some(var_9) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_10);
    }
    if let Some(var_11) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_lustre_log_create_configuration::ser_lustre_log_create_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.root_squash_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("RootSquashConfiguration").start_object();
        crate::protocol_serde::shape_lustre_root_squash_configuration::ser_lustre_root_squash_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
