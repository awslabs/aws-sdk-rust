// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteFileCache`](crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`file_cache_id(impl Into<String>)`](crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder::file_cache_id) / [`set_file_cache_id(Option<String>)`](crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder::set_file_cache_id): <p>The ID of the cache that's being deleted.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder::set_client_request_token): <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    /// - On success, responds with [`DeleteFileCacheOutput`](crate::operation::delete_file_cache::DeleteFileCacheOutput) with field(s):
    ///   - [`file_cache_id(Option<String>)`](crate::operation::delete_file_cache::DeleteFileCacheOutput::file_cache_id): <p>The ID of the cache that's being deleted.</p>
    ///   - [`lifecycle(Option<FileCacheLifecycle>)`](crate::operation::delete_file_cache::DeleteFileCacheOutput::lifecycle): <p>The cache lifecycle for the deletion request. If the <code>DeleteFileCache</code> operation is successful, this status is <code>DELETING</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteFileCacheError>`](crate::operation::delete_file_cache::DeleteFileCacheError)
    pub fn delete_file_cache(
        &self,
    ) -> crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder {
        crate::operation::delete_file_cache::builders::DeleteFileCacheFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
