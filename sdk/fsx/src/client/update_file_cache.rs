// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFileCache`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`file_cache_id(impl Into<String>)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::file_cache_id) / [`set_file_cache_id(Option<String>)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::set_file_cache_id):<br>required: **true**<br><p>The ID of the cache that you are updating.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::set_client_request_token):<br>required: **false**<br><p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p><br>
    ///   - [`lustre_configuration(UpdateFileCacheLustreConfiguration)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::lustre_configuration) / [`set_lustre_configuration(Option<UpdateFileCacheLustreConfiguration>)`](crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::set_lustre_configuration):<br>required: **false**<br><p>The configuration updates for an Amazon File Cache resource.</p><br>
    /// - On success, responds with [`UpdateFileCacheOutput`](crate::operation::update_file_cache::UpdateFileCacheOutput) with field(s):
    ///   - [`file_cache(Option<FileCache>)`](crate::operation::update_file_cache::UpdateFileCacheOutput::file_cache): <p>A description of the cache that was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateFileCacheError>`](crate::operation::update_file_cache::UpdateFileCacheError)
    pub fn update_file_cache(&self) -> crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder {
        crate::operation::update_file_cache::builders::UpdateFileCacheFluentBuilder::new(self.handle.clone())
    }
}
