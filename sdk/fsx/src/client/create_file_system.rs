// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateFileSystem`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_client_request_token): <p>A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    ///   - [`file_system_type(FileSystemType)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::file_system_type) / [`set_file_system_type(Option<FileSystemType>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_file_system_type): <p>The type of Amazon FSx file system to create. Valid values are <code>WINDOWS</code>, <code>LUSTRE</code>, <code>ONTAP</code>, and <code>OPENZFS</code>.</p>
    ///   - [`storage_capacity(i32)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_storage_capacity): <p>Sets the storage capacity of the file system that you're creating, in gibibytes (GiB).</p>  <p> <b>FSx for Lustre file systems</b> - The amount of storage capacity that you can configure depends on the value that you set for <code>StorageType</code> and the Lustre <code>DeploymentType</code>, as follows:</p>  <ul>   <li> <p>For <code>SCRATCH_2</code>, <code>PERSISTENT_2</code> and <code>PERSISTENT_1</code> deployment types using SSD storage type, the valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.</p> </li>   <li> <p>For <code>PERSISTENT_1</code> HDD file systems, valid values are increments of 6000 GiB for 12 MB/s/TiB file systems and increments of 1800 GiB for 40 MB/s/TiB file systems.</p> </li>   <li> <p>For <code>SCRATCH_1</code> deployment type, valid values are 1200 GiB, 2400 GiB, and increments of 3600 GiB.</p> </li>  </ul>  <p> <b>FSx for ONTAP file systems</b> - The amount of storage capacity that you can configure is from 1024 GiB up to 196,608 GiB (192 TiB).</p>  <p> <b>FSx for OpenZFS file systems</b> - The amount of storage capacity that you can configure is from 64 GiB up to 524,288 GiB (512 TiB).</p>  <p> <b>FSx for Windows File Server file systems</b> - The amount of storage capacity that you can configure depends on the value that you set for <code>StorageType</code> as follows:</p>  <ul>   <li> <p>For SSD storage, valid values are 32 GiB-65,536 GiB (64 TiB).</p> </li>   <li> <p>For HDD storage, valid values are 2000 GiB-65,536 GiB (64 TiB).</p> </li>  </ul>
    ///   - [`storage_type(StorageType)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::storage_type) / [`set_storage_type(Option<StorageType>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_storage_type): <p>Sets the storage type for the file system that you're creating. Valid values are <code>SSD</code> and <code>HDD</code>.</p>  <ul>   <li> <p>Set to <code>SSD</code> to use solid state drive storage. SSD is supported on all Windows, Lustre, ONTAP, and OpenZFS deployment types.</p> </li>   <li> <p>Set to <code>HDD</code> to use hard disk drive storage. HDD is supported on <code>SINGLE_AZ_2</code> and <code>MULTI_AZ_1</code> Windows file system deployment types, and on <code>PERSISTENT_1</code> Lustre file system deployment types. </p> </li>  </ul>  <p>Default value is <code>SSD</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/optimize-fsx-costs.html#storage-type-options"> Storage type options</a> in the <i>FSx for Windows File Server User Guide</i> and <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/what-is.html#storage-options">Multiple storage options</a> in the <i>FSx for Lustre User Guide</i>. </p>
    ///   - [`subnet_ids(Vec<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_subnet_ids): <p>Specifies the IDs of the subnets that the file system will be accessible from. For Windows and ONTAP <code>MULTI_AZ_1</code> deployment types,provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the <code>WindowsConfiguration &gt; PreferredSubnetID</code> or <code>OntapConfiguration &gt; PreferredSubnetID</code> properties. For more information about Multi-AZ file system configuration, see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/high-availability-multiAZ.html"> Availability and durability: Single-AZ and Multi-AZ file systems</a> in the <i>Amazon FSx for Windows User Guide</i> and <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-multiAZ.html"> Availability and durability</a> in the <i>Amazon FSx for ONTAP User Guide</i>.</p>  <p>For Windows <code>SINGLE_AZ_1</code> and <code>SINGLE_AZ_2</code> and all Lustre deployment types, provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_security_group_ids): <p>A list of IDs specifying the security groups to apply to all network interfaces created for file system access. This list isn't returned in later requests to describe the file system.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_tags): <p>The tags to apply to the file system that's being created. The key value of the <code>Name</code> tag appears in the console as the file system name.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_kms_key_id): <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p>  <ul>   <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li>   <li> <p>Amazon FSx for NetApp ONTAP</p> </li>   <li> <p>Amazon FSx for OpenZFS</p> </li>   <li> <p>Amazon FSx for Windows File Server</p> </li>  </ul>  <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>
    ///   - [`windows_configuration(CreateFileSystemWindowsConfiguration)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::windows_configuration) / [`set_windows_configuration(Option<CreateFileSystemWindowsConfiguration>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_windows_configuration): <p>The Microsoft Windows configuration for the file system that's being created. </p>
    ///   - [`lustre_configuration(CreateFileSystemLustreConfiguration)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::lustre_configuration) / [`set_lustre_configuration(Option<CreateFileSystemLustreConfiguration>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_lustre_configuration): <p>The Lustre configuration for the file system being created.</p> <note>   <p>The following parameters are not supported for file systems with the <code>Persistent_2</code> deployment type. Instead, use <code>CreateDataRepositoryAssociation</code> to create a data repository association to link your Lustre file system to a data repository.</p>   <ul>    <li> <p> <code>AutoImportPolicy</code> </p> </li>    <li> <p> <code>ExportPath</code> </p> </li>    <li> <p> <code>ImportedChunkSize</code> </p> </li>    <li> <p> <code>ImportPath</code> </p> </li>   </ul>  </note>
    ///   - [`ontap_configuration(CreateFileSystemOntapConfiguration)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::ontap_configuration) / [`set_ontap_configuration(Option<CreateFileSystemOntapConfiguration>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_ontap_configuration): <p>The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.</p>
    ///   - [`file_system_type_version(impl Into<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::file_system_type_version) / [`set_file_system_type_version(Option<String>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_file_system_type_version): <p>(Optional) For FSx for Lustre file systems, sets the Lustre version for the file system that you're creating. Valid values are <code>2.10</code> and <code>2.12</code>:</p>  <ul>   <li> <p>2.10 is supported by the Scratch and Persistent_1 Lustre deployment types.</p> </li>   <li> <p>2.12 is supported by all Lustre deployment types. <code>2.12</code> is required when setting FSx for Lustre <code>DeploymentType</code> to <code>PERSISTENT_2</code>.</p> </li>  </ul>  <p>Default value = <code>2.10</code>, except when <code>DeploymentType</code> is set to <code>PERSISTENT_2</code>, then the default is <code>2.12</code>.</p> <note>   <p>If you set <code>FileSystemTypeVersion</code> to <code>2.10</code> for a <code>PERSISTENT_2</code> Lustre deployment type, the <code>CreateFileSystem</code> operation fails.</p>  </note>
    ///   - [`open_zfs_configuration(CreateFileSystemOpenZfsConfiguration)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::open_zfs_configuration) / [`set_open_zfs_configuration(Option<CreateFileSystemOpenZfsConfiguration>)`](crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::set_open_zfs_configuration): <p>The OpenZFS configuration for the file system that's being created.</p>
    /// - On success, responds with [`CreateFileSystemOutput`](crate::operation::create_file_system::CreateFileSystemOutput) with field(s):
    ///   - [`file_system(Option<FileSystem>)`](crate::operation::create_file_system::CreateFileSystemOutput::file_system): <p>The configuration of the file system that was created.</p>
    /// - On failure, responds with [`SdkError<CreateFileSystemError>`](crate::operation::create_file_system::CreateFileSystemError)
    pub fn create_file_system(
        &self,
    ) -> crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder {
        crate::operation::create_file_system::builders::CreateFileSystemFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
