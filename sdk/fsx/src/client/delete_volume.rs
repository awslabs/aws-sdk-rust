// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteVolume`](crate::client::fluent_builders::DeleteVolume) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::DeleteVolume::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::DeleteVolume::set_client_request_token): <p>(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    ///   - [`volume_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVolume::volume_id) / [`set_volume_id(Option<String>)`](crate::client::fluent_builders::DeleteVolume::set_volume_id): <p>The ID of the volume that you are deleting.</p>
    ///   - [`ontap_configuration(DeleteVolumeOntapConfiguration)`](crate::client::fluent_builders::DeleteVolume::ontap_configuration) / [`set_ontap_configuration(Option<DeleteVolumeOntapConfiguration>)`](crate::client::fluent_builders::DeleteVolume::set_ontap_configuration): <p>For Amazon FSx for ONTAP volumes, specify whether to take a final backup of the volume and apply tags to the backup. To apply tags to the backup, you must have the <code>fsx:TagResource</code> permission.</p>
    ///   - [`open_zfs_configuration(DeleteVolumeOpenZfsConfiguration)`](crate::client::fluent_builders::DeleteVolume::open_zfs_configuration) / [`set_open_zfs_configuration(Option<DeleteVolumeOpenZfsConfiguration>)`](crate::client::fluent_builders::DeleteVolume::set_open_zfs_configuration): <p>For Amazon FSx for OpenZFS volumes, specify whether to delete all child volumes and snapshots.</p>
    /// - On success, responds with [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput) with field(s):
    ///   - [`volume_id(Option<String>)`](crate::output::DeleteVolumeOutput::volume_id): <p>The ID of the volume that's being deleted.</p>
    ///   - [`lifecycle(Option<VolumeLifecycle>)`](crate::output::DeleteVolumeOutput::lifecycle): <p>The lifecycle state of the volume being deleted. If the <code>DeleteVolume</code> operation is successful, this value is <code>DELETING</code>.</p>
    ///   - [`ontap_response(Option<DeleteVolumeOntapResponse>)`](crate::output::DeleteVolumeOutput::ontap_response): <p>Returned after a <code>DeleteVolume</code> request, showing the status of the delete request.</p>
    /// - On failure, responds with [`SdkError<DeleteVolumeError>`](crate::error::DeleteVolumeError)
    pub fn delete_volume(&self) -> crate::client::fluent_builders::DeleteVolume {
        crate::client::fluent_builders::DeleteVolume::new(self.handle.clone())
    }
}
