// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateFileSystemFromBackup`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_id(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::backup_id) / [`set_backup_id(Option<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_backup_id):<br>required: **true**<br><p>The ID of the source backup. Specifies the backup that you are copying.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_client_request_token):<br>required: **false**<br><p>A string of up to 63 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p><br>
    ///   - [`subnet_ids(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::subnet_ids) / [`set_subnet_ids(Option<Vec::<String>>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_subnet_ids):<br>required: **true**<br><p>Specifies the IDs of the subnets that the file system will be accessible from. For Windows <code>MULTI_AZ_1</code> file system deployment types, provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the <code>WindowsConfiguration &gt; PreferredSubnetID</code> property.</p>  <p>Windows <code>SINGLE_AZ_1</code> and <code>SINGLE_AZ_2</code> file system deployment types, Lustre file systems, and OpenZFS file systems provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.</p><br>
    ///   - [`security_group_ids(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec::<String>>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_security_group_ids):<br>required: **false**<br><p>A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups apply to all network interfaces. This value isn't returned in later <code>DescribeFileSystem</code> requests.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to be applied to the file system at file system creation. The key value of the <code>Name</code> tag appears in the console as the file system name.</p><br>
    ///   - [`windows_configuration(CreateFileSystemWindowsConfiguration)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::windows_configuration) / [`set_windows_configuration(Option<CreateFileSystemWindowsConfiguration>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_windows_configuration):<br>required: **false**<br><p>The configuration for this Microsoft Windows file system.</p><br>
    ///   - [`lustre_configuration(CreateFileSystemLustreConfiguration)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::lustre_configuration) / [`set_lustre_configuration(Option<CreateFileSystemLustreConfiguration>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_lustre_configuration):<br>required: **false**<br><p>The Lustre configuration for the file system being created.</p> <note>   <p>The following parameters are not supported for file systems with a data repository association created with .</p>   <ul>    <li> <p> <code>AutoImportPolicy</code> </p> </li>    <li> <p> <code>ExportPath</code> </p> </li>    <li> <p> <code>ImportedFileChunkSize</code> </p> </li>    <li> <p> <code>ImportPath</code> </p> </li>   </ul>  </note><br>
    ///   - [`storage_type(StorageType)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::storage_type) / [`set_storage_type(Option<StorageType>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_storage_type):<br>required: **false**<br><p>Sets the storage type for the Windows or OpenZFS file system that you're creating from a backup. Valid values are <code>SSD</code> and <code>HDD</code>.</p>  <ul>   <li> <p>Set to <code>SSD</code> to use solid state drive storage. SSD is supported on all Windows and OpenZFS deployment types.</p> </li>   <li> <p>Set to <code>HDD</code> to use hard disk drive storage. HDD is supported on <code>SINGLE_AZ_2</code> and <code>MULTI_AZ_1</code> FSx for Windows File Server file system deployment types.</p> </li>  </ul>  <p> The default value is <code>SSD</code>. </p> <note>   <p>HDD and SSD storage types have different minimum storage capacity requirements. A restored file system's storage capacity is tied to the file system that was backed up. You can create a file system that uses HDD storage from a backup of a file system that used SSD storage if the original SSD file system had a storage capacity of at least 2000 GiB.</p>  </note><br>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_kms_key_id):<br>required: **false**<br><p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p>  <ul>   <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li>   <li> <p>Amazon FSx for NetApp ONTAP</p> </li>   <li> <p>Amazon FSx for OpenZFS</p> </li>   <li> <p>Amazon FSx for Windows File Server</p> </li>  </ul>  <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p><br>
    ///   - [`file_system_type_version(impl Into<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::file_system_type_version) / [`set_file_system_type_version(Option<String>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_file_system_type_version):<br>required: **false**<br><p>Sets the version for the Amazon FSx for Lustre file system that you're creating from a backup. Valid values are <code>2.10</code>, <code>2.12</code>, and <code>2.15</code>.</p>  <p>You don't need to specify <code>FileSystemTypeVersion</code> because it will be applied using the backup's <code>FileSystemTypeVersion</code> setting. If you choose to specify <code>FileSystemTypeVersion</code> when creating from backup, the value must match the backup's <code>FileSystemTypeVersion</code> setting.</p><br>
    ///   - [`open_zfs_configuration(CreateFileSystemOpenZfsConfiguration)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::open_zfs_configuration) / [`set_open_zfs_configuration(Option<CreateFileSystemOpenZfsConfiguration>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_open_zfs_configuration):<br>required: **false**<br><p>The OpenZFS configuration for the file system that's being created. </p><br>
    ///   - [`storage_capacity(i32)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::set_storage_capacity):<br>required: **false**<br><p>Sets the storage capacity of the OpenZFS file system that you're creating from a backup, in gibibytes (GiB). Valid values are from 64 GiB up to 524,288 GiB (512 TiB). However, the value that you specify must be equal to or greater than the backup's storage capacity value. If you don't use the <code>StorageCapacity</code> parameter, the default is the backup's <code>StorageCapacity</code> value.</p>  <p>If used to create a file system other than OpenZFS, you must provide a value that matches the backup's <code>StorageCapacity</code> value. If you provide any other value, Amazon FSx responds with a 400 Bad Request. </p><br>
    /// - On success, responds with [`CreateFileSystemFromBackupOutput`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput) with field(s):
    ///   - [`file_system(Option<FileSystem>)`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupOutput::file_system): <p>A description of the file system.</p>
    /// - On failure, responds with [`SdkError<CreateFileSystemFromBackupError>`](crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError)
    pub fn create_file_system_from_backup(
        &self,
    ) -> crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder {
        crate::operation::create_file_system_from_backup::builders::CreateFileSystemFromBackupFluentBuilder::new(self.handle.clone())
    }
}
