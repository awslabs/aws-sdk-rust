// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ActiveDirectoryError(crate::error::ActiveDirectoryError),
    BackupBeingCopied(crate::error::BackupBeingCopied),
    BackupInProgress(crate::error::BackupInProgress),
    BackupNotFound(crate::error::BackupNotFound),
    BackupRestoring(crate::error::BackupRestoring),
    BadRequest(crate::error::BadRequest),
    DataRepositoryTaskEnded(crate::error::DataRepositoryTaskEnded),
    DataRepositoryTaskExecuting(crate::error::DataRepositoryTaskExecuting),
    DataRepositoryTaskNotFound(crate::error::DataRepositoryTaskNotFound),
    FileSystemNotFound(crate::error::FileSystemNotFound),
    IncompatibleParameterError(crate::error::IncompatibleParameterError),
    IncompatibleRegionForMultiAz(crate::error::IncompatibleRegionForMultiAz),
    InternalServerError(crate::error::InternalServerError),
    InvalidDestinationKmsKey(crate::error::InvalidDestinationKmsKey),
    InvalidExportPath(crate::error::InvalidExportPath),
    InvalidImportPath(crate::error::InvalidImportPath),
    InvalidNetworkSettings(crate::error::InvalidNetworkSettings),
    InvalidPerUnitStorageThroughput(crate::error::InvalidPerUnitStorageThroughput),
    InvalidRegion(crate::error::InvalidRegion),
    InvalidSourceKmsKey(crate::error::InvalidSourceKmsKey),
    MissingFileSystemConfiguration(crate::error::MissingFileSystemConfiguration),
    NotServiceResourceError(crate::error::NotServiceResourceError),
    ResourceDoesNotSupportTagging(crate::error::ResourceDoesNotSupportTagging),
    ResourceNotFound(crate::error::ResourceNotFound),
    ServiceLimitExceeded(crate::error::ServiceLimitExceeded),
    SourceBackupUnavailable(crate::error::SourceBackupUnavailable),
    UnsupportedOperation(crate::error::UnsupportedOperation),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActiveDirectoryError(inner) => inner.fmt(f),
            Error::BackupBeingCopied(inner) => inner.fmt(f),
            Error::BackupInProgress(inner) => inner.fmt(f),
            Error::BackupNotFound(inner) => inner.fmt(f),
            Error::BackupRestoring(inner) => inner.fmt(f),
            Error::BadRequest(inner) => inner.fmt(f),
            Error::DataRepositoryTaskEnded(inner) => inner.fmt(f),
            Error::DataRepositoryTaskExecuting(inner) => inner.fmt(f),
            Error::DataRepositoryTaskNotFound(inner) => inner.fmt(f),
            Error::FileSystemNotFound(inner) => inner.fmt(f),
            Error::IncompatibleParameterError(inner) => inner.fmt(f),
            Error::IncompatibleRegionForMultiAz(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidDestinationKmsKey(inner) => inner.fmt(f),
            Error::InvalidExportPath(inner) => inner.fmt(f),
            Error::InvalidImportPath(inner) => inner.fmt(f),
            Error::InvalidNetworkSettings(inner) => inner.fmt(f),
            Error::InvalidPerUnitStorageThroughput(inner) => inner.fmt(f),
            Error::InvalidRegion(inner) => inner.fmt(f),
            Error::InvalidSourceKmsKey(inner) => inner.fmt(f),
            Error::MissingFileSystemConfiguration(inner) => inner.fmt(f),
            Error::NotServiceResourceError(inner) => inner.fmt(f),
            Error::ResourceDoesNotSupportTagging(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::ServiceLimitExceeded(inner) => inner.fmt(f),
            Error::SourceBackupUnavailable(inner) => inner.fmt(f),
            Error::UnsupportedOperation(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::AssociateFileSystemAliasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateFileSystemAliasesError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateFileSystemAliasesErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::AssociateFileSystemAliasesErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::AssociateFileSystemAliasesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::AssociateFileSystemAliasesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CancelDataRepositoryTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelDataRepositoryTaskError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelDataRepositoryTaskErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CancelDataRepositoryTaskErrorKind::DataRepositoryTaskEnded(inner) => {
                    Error::DataRepositoryTaskEnded(inner)
                }
                crate::error::CancelDataRepositoryTaskErrorKind::DataRepositoryTaskNotFound(
                    inner,
                ) => Error::DataRepositoryTaskNotFound(inner),
                crate::error::CancelDataRepositoryTaskErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CancelDataRepositoryTaskErrorKind::UnsupportedOperation(inner) => {
                    Error::UnsupportedOperation(inner)
                }
                crate::error::CancelDataRepositoryTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CopyBackupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::CopyBackupError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyBackupErrorKind::BackupNotFound(inner) => {
                    Error::BackupNotFound(inner)
                }
                crate::error::CopyBackupErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::CopyBackupErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::CopyBackupErrorKind::IncompatibleRegionForMultiAz(inner) => {
                    Error::IncompatibleRegionForMultiAz(inner)
                }
                crate::error::CopyBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CopyBackupErrorKind::InvalidDestinationKmsKey(inner) => {
                    Error::InvalidDestinationKmsKey(inner)
                }
                crate::error::CopyBackupErrorKind::InvalidRegion(inner) => {
                    Error::InvalidRegion(inner)
                }
                crate::error::CopyBackupErrorKind::InvalidSourceKmsKey(inner) => {
                    Error::InvalidSourceKmsKey(inner)
                }
                crate::error::CopyBackupErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::CopyBackupErrorKind::SourceBackupUnavailable(inner) => {
                    Error::SourceBackupUnavailable(inner)
                }
                crate::error::CopyBackupErrorKind::UnsupportedOperation(inner) => {
                    Error::UnsupportedOperation(inner)
                }
                crate::error::CopyBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CreateBackupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::CreateBackupError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateBackupErrorKind::BackupInProgress(inner) => {
                    Error::BackupInProgress(inner)
                }
                crate::error::CreateBackupErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::CreateBackupErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::CreateBackupErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::CreateBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateBackupErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::CreateBackupErrorKind::UnsupportedOperation(inner) => {
                    Error::UnsupportedOperation(inner)
                }
                crate::error::CreateBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CreateDataRepositoryTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDataRepositoryTaskError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDataRepositoryTaskErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CreateDataRepositoryTaskErrorKind::DataRepositoryTaskExecuting(
                    inner,
                ) => Error::DataRepositoryTaskExecuting(inner),
                crate::error::CreateDataRepositoryTaskErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::CreateDataRepositoryTaskErrorKind::IncompatibleParameterError(
                    inner,
                ) => Error::IncompatibleParameterError(inner),
                crate::error::CreateDataRepositoryTaskErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateDataRepositoryTaskErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::CreateDataRepositoryTaskErrorKind::UnsupportedOperation(inner) => {
                    Error::UnsupportedOperation(inner)
                }
                crate::error::CreateDataRepositoryTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CreateFileSystemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFileSystemError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFileSystemErrorKind::ActiveDirectoryError(inner) => {
                    Error::ActiveDirectoryError(inner)
                }
                crate::error::CreateFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CreateFileSystemErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::CreateFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateFileSystemErrorKind::InvalidExportPath(inner) => {
                    Error::InvalidExportPath(inner)
                }
                crate::error::CreateFileSystemErrorKind::InvalidImportPath(inner) => {
                    Error::InvalidImportPath(inner)
                }
                crate::error::CreateFileSystemErrorKind::InvalidNetworkSettings(inner) => {
                    Error::InvalidNetworkSettings(inner)
                }
                crate::error::CreateFileSystemErrorKind::InvalidPerUnitStorageThroughput(inner) => {
                    Error::InvalidPerUnitStorageThroughput(inner)
                }
                crate::error::CreateFileSystemErrorKind::MissingFileSystemConfiguration(inner) => {
                    Error::MissingFileSystemConfiguration(inner)
                }
                crate::error::CreateFileSystemErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::CreateFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::CreateFileSystemFromBackupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateFileSystemFromBackupError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateFileSystemFromBackupErrorKind::ActiveDirectoryError(inner) => Error::ActiveDirectoryError(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::BackupNotFound(inner) => Error::BackupNotFound(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::InvalidNetworkSettings(inner) => Error::InvalidNetworkSettings(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::InvalidPerUnitStorageThroughput(inner) => Error::InvalidPerUnitStorageThroughput(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::MissingFileSystemConfiguration(inner) => Error::MissingFileSystemConfiguration(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
                crate::error::CreateFileSystemFromBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DeleteBackupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBackupError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBackupErrorKind::BackupBeingCopied(inner) => {
                    Error::BackupBeingCopied(inner)
                }
                crate::error::DeleteBackupErrorKind::BackupInProgress(inner) => {
                    Error::BackupInProgress(inner)
                }
                crate::error::DeleteBackupErrorKind::BackupNotFound(inner) => {
                    Error::BackupNotFound(inner)
                }
                crate::error::DeleteBackupErrorKind::BackupRestoring(inner) => {
                    Error::BackupRestoring(inner)
                }
                crate::error::DeleteBackupErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::DeleteBackupErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::DeleteBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DeleteFileSystemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFileSystemError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DeleteFileSystemErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DeleteFileSystemErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::DeleteFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteFileSystemErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::DeleteFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DescribeBackupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeBackupsError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeBackupsErrorKind::BackupNotFound(inner) => {
                    Error::BackupNotFound(inner)
                }
                crate::error::DescribeBackupsErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeBackupsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeBackupsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeBackupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DescribeDataRepositoryTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDataRepositoryTasksError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDataRepositoryTasksErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeDataRepositoryTasksErrorKind::DataRepositoryTaskNotFound(
                    inner,
                ) => Error::DataRepositoryTaskNotFound(inner),
                crate::error::DescribeDataRepositoryTasksErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeDataRepositoryTasksErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeDataRepositoryTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DescribeFileSystemAliasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeFileSystemAliasesError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFileSystemAliasesErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeFileSystemAliasesErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeFileSystemAliasesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeFileSystemAliasesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DescribeFileSystemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFileSystemsError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFileSystemsErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::DisassociateFileSystemAliasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateFileSystemAliasesError, R>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateFileSystemAliasesErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DisassociateFileSystemAliasesErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DisassociateFileSystemAliasesErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DisassociateFileSystemAliasesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NotServiceResourceError(inner) => {
                    Error::NotServiceResourceError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceDoesNotSupportTagging(
                    inner,
                ) => Error::ResourceDoesNotSupportTagging(inner),
                crate::error::ListTagsForResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::TagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TagResourceErrorKind::NotServiceResourceError(inner) => {
                    Error::NotServiceResourceError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceDoesNotSupportTagging(inner) => {
                    Error::ResourceDoesNotSupportTagging(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::UntagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UntagResourceErrorKind::NotServiceResourceError(inner) => {
                    Error::NotServiceResourceError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceDoesNotSupportTagging(inner) => {
                    Error::ResourceDoesNotSupportTagging(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<smithy_http::result::SdkError<crate::error::UpdateFileSystemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateFileSystemError, R>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::UpdateFileSystemErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::UpdateFileSystemErrorKind::IncompatibleParameterError(inner) => {
                    Error::IncompatibleParameterError(inner)
                }
                crate::error::UpdateFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateFileSystemErrorKind::MissingFileSystemConfiguration(inner) => {
                    Error::MissingFileSystemConfiguration(inner)
                }
                crate::error::UpdateFileSystemErrorKind::ServiceLimitExceeded(inner) => {
                    Error::ServiceLimitExceeded(inner)
                }
                crate::error::UpdateFileSystemErrorKind::UnsupportedOperation(inner) => {
                    Error::UnsupportedOperation(inner)
                }
                crate::error::UpdateFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
