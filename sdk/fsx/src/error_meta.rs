// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An Active Directory error.</p>
    ActiveDirectoryError(crate::types::error::ActiveDirectoryError),
    /// <p>You can't delete a backup while it's being copied.</p>
    BackupBeingCopied(crate::types::error::BackupBeingCopied),
    /// <p>Another backup is already under way. Wait for completion before initiating additional backups of this file system.</p>
    BackupInProgress(crate::types::error::BackupInProgress),
    /// <p>No Amazon FSx backups were found based upon the supplied parameters.</p>
    BackupNotFound(crate::types::error::BackupNotFound),
    /// <p>You can't delete a backup while it's being used to restore a file system.</p>
    BackupRestoring(crate::types::error::BackupRestoring),
    /// <p>A generic error indicating a failure with a client request.</p>
    BadRequest(crate::types::error::BadRequest),
    /// <p>No data repository associations were found based upon the supplied parameters.</p>
    DataRepositoryAssociationNotFound(crate::types::error::DataRepositoryAssociationNotFound),
    /// <p>The data repository task could not be canceled because the task has already ended.</p>
    DataRepositoryTaskEnded(crate::types::error::DataRepositoryTaskEnded),
    /// <p>An existing data repository task is currently executing on the file system. Wait until the existing task has completed, then create the new task.</p>
    DataRepositoryTaskExecuting(crate::types::error::DataRepositoryTaskExecuting),
    /// <p>The data repository task or tasks you specified could not be found.</p>
    DataRepositoryTaskNotFound(crate::types::error::DataRepositoryTaskNotFound),
    /// <p>No caches were found based upon supplied parameters.</p>
    FileCacheNotFound(crate::types::error::FileCacheNotFound),
    /// <p>No Amazon FSx file systems were found based upon supplied parameters.</p>
    FileSystemNotFound(crate::types::error::FileSystemNotFound),
    /// <p>The error returned when a second request is received with the same client request token but different parameters settings. A client request token should always uniquely identify a single request.</p>
    IncompatibleParameterError(crate::types::error::IncompatibleParameterError),
    /// <p>Amazon FSx doesn't support Multi-AZ Windows File Server copy backup in the destination Region, so the copied backup can't be restored.</p>
    IncompatibleRegionForMultiAz(crate::types::error::IncompatibleRegionForMultiAz),
    /// <p>A generic error indicating a server-side failure.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>You have filtered the response to a data repository type that is not supported.</p>
    InvalidDataRepositoryType(crate::types::error::InvalidDataRepositoryType),
    /// <p>The Key Management Service (KMS) key of the destination backup is not valid.</p>
    InvalidDestinationKmsKey(crate::types::error::InvalidDestinationKmsKey),
    /// <p>The path provided for data repository export isn't valid.</p>
    InvalidExportPath(crate::types::error::InvalidExportPath),
    /// <p>The path provided for data repository import isn't valid.</p>
    InvalidImportPath(crate::types::error::InvalidImportPath),
    /// <p>One or more network settings specified in the request are invalid.</p>
    InvalidNetworkSettings(crate::types::error::InvalidNetworkSettings),
    /// <p>An invalid value for <code>PerUnitStorageThroughput</code> was provided. Please create your file system again, using a valid value.</p>
    InvalidPerUnitStorageThroughput(crate::types::error::InvalidPerUnitStorageThroughput),
    /// <p>The Region provided for <code>SourceRegion</code> is not valid or is in a different Amazon Web Services partition.</p>
    InvalidRegion(crate::types::error::InvalidRegion),
    /// <p>The Key Management Service (KMS) key of the source backup is not valid.</p>
    InvalidSourceKmsKey(crate::types::error::InvalidSourceKmsKey),
    /// <p>A cache configuration is required for this operation.</p>
    MissingFileCacheConfiguration(crate::types::error::MissingFileCacheConfiguration),
    /// <p>A file system configuration is required for this operation.</p>
    MissingFileSystemConfiguration(crate::types::error::MissingFileSystemConfiguration),
    /// <p>A volume configuration is required for this operation.</p>
    MissingVolumeConfiguration(crate::types::error::MissingVolumeConfiguration),
    /// <p>The resource specified for the tagging operation is not a resource type owned by Amazon FSx. Use the API of the relevant service to perform the operation. </p>
    NotServiceResourceError(crate::types::error::NotServiceResourceError),
    /// <p>The resource specified does not support tagging. </p>
    ResourceDoesNotSupportTagging(crate::types::error::ResourceDoesNotSupportTagging),
    /// <p>The resource specified by the Amazon Resource Name (ARN) can't be found.</p>
    ResourceNotFound(crate::types::error::ResourceNotFound),
    /// <p>An error indicating that a particular service limit was exceeded. You can increase some service limits by contacting Amazon Web Services Support.</p>
    ServiceLimitExceeded(crate::types::error::ServiceLimitExceeded),
    /// <p>No Amazon FSx snapshots were found based on the supplied parameters.</p>
    SnapshotNotFound(crate::types::error::SnapshotNotFound),
    /// <p>The request was rejected because the lifecycle status of the source backup isn't <code>AVAILABLE</code>.</p>
    SourceBackupUnavailable(crate::types::error::SourceBackupUnavailable),
    /// <p>No FSx for ONTAP SVMs were found based upon the supplied parameters.</p>
    StorageVirtualMachineNotFound(crate::types::error::StorageVirtualMachineNotFound),
    /// <p>The requested operation is not supported for this resource or API.</p>
    UnsupportedOperation(crate::types::error::UnsupportedOperation),
    /// <p>No Amazon FSx volumes were found based upon the supplied parameters.</p>
    VolumeNotFound(crate::types::error::VolumeNotFound),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActiveDirectoryError(inner) => inner.fmt(f),
            Error::BackupBeingCopied(inner) => inner.fmt(f),
            Error::BackupInProgress(inner) => inner.fmt(f),
            Error::BackupNotFound(inner) => inner.fmt(f),
            Error::BackupRestoring(inner) => inner.fmt(f),
            Error::BadRequest(inner) => inner.fmt(f),
            Error::DataRepositoryAssociationNotFound(inner) => inner.fmt(f),
            Error::DataRepositoryTaskEnded(inner) => inner.fmt(f),
            Error::DataRepositoryTaskExecuting(inner) => inner.fmt(f),
            Error::DataRepositoryTaskNotFound(inner) => inner.fmt(f),
            Error::FileCacheNotFound(inner) => inner.fmt(f),
            Error::FileSystemNotFound(inner) => inner.fmt(f),
            Error::IncompatibleParameterError(inner) => inner.fmt(f),
            Error::IncompatibleRegionForMultiAz(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidDataRepositoryType(inner) => inner.fmt(f),
            Error::InvalidDestinationKmsKey(inner) => inner.fmt(f),
            Error::InvalidExportPath(inner) => inner.fmt(f),
            Error::InvalidImportPath(inner) => inner.fmt(f),
            Error::InvalidNetworkSettings(inner) => inner.fmt(f),
            Error::InvalidPerUnitStorageThroughput(inner) => inner.fmt(f),
            Error::InvalidRegion(inner) => inner.fmt(f),
            Error::InvalidSourceKmsKey(inner) => inner.fmt(f),
            Error::MissingFileCacheConfiguration(inner) => inner.fmt(f),
            Error::MissingFileSystemConfiguration(inner) => inner.fmt(f),
            Error::MissingVolumeConfiguration(inner) => inner.fmt(f),
            Error::NotServiceResourceError(inner) => inner.fmt(f),
            Error::ResourceDoesNotSupportTagging(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::ServiceLimitExceeded(inner) => inner.fmt(f),
            Error::SnapshotNotFound(inner) => inner.fmt(f),
            Error::SourceBackupUnavailable(inner) => inner.fmt(f),
            Error::StorageVirtualMachineNotFound(inner) => inner.fmt(f),
            Error::UnsupportedOperation(inner) => inner.fmt(f),
            Error::VolumeNotFound(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError>
    for Error
{
    fn from(
        err: crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError,
    ) -> Self {
        match err {
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::associate_file_system_aliases::AssociateFileSystemAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError> for Error {
    fn from(
        err: crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError,
    ) -> Self {
        match err {
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::DataRepositoryTaskEnded(inner) => Error::DataRepositoryTaskEnded(inner),
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::DataRepositoryTaskNotFound(inner) => Error::DataRepositoryTaskNotFound(inner),
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::cancel_data_repository_task::CancelDataRepositoryTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::copy_backup::CopyBackupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::copy_backup::CopyBackupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::copy_backup::CopyBackupError> for Error {
    fn from(err: crate::operation::copy_backup::CopyBackupError) -> Self {
        match err {
            crate::operation::copy_backup::CopyBackupError::BackupNotFound(inner) => {
                Error::BackupNotFound(inner)
            }
            crate::operation::copy_backup::CopyBackupError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::copy_backup::CopyBackupError::IncompatibleParameterError(inner) => {
                Error::IncompatibleParameterError(inner)
            }
            crate::operation::copy_backup::CopyBackupError::IncompatibleRegionForMultiAz(inner) => {
                Error::IncompatibleRegionForMultiAz(inner)
            }
            crate::operation::copy_backup::CopyBackupError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::copy_backup::CopyBackupError::InvalidDestinationKmsKey(inner) => {
                Error::InvalidDestinationKmsKey(inner)
            }
            crate::operation::copy_backup::CopyBackupError::InvalidRegion(inner) => {
                Error::InvalidRegion(inner)
            }
            crate::operation::copy_backup::CopyBackupError::InvalidSourceKmsKey(inner) => {
                Error::InvalidSourceKmsKey(inner)
            }
            crate::operation::copy_backup::CopyBackupError::ServiceLimitExceeded(inner) => {
                Error::ServiceLimitExceeded(inner)
            }
            crate::operation::copy_backup::CopyBackupError::SourceBackupUnavailable(inner) => {
                Error::SourceBackupUnavailable(inner)
            }
            crate::operation::copy_backup::CopyBackupError::UnsupportedOperation(inner) => {
                Error::UnsupportedOperation(inner)
            }
            crate::operation::copy_backup::CopyBackupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_backup::CreateBackupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_backup::CreateBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_backup::CreateBackupError> for Error {
    fn from(err: crate::operation::create_backup::CreateBackupError) -> Self {
        match err {
            crate::operation::create_backup::CreateBackupError::BackupInProgress(inner) => {
                Error::BackupInProgress(inner)
            }
            crate::operation::create_backup::CreateBackupError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::create_backup::CreateBackupError::FileSystemNotFound(inner) => {
                Error::FileSystemNotFound(inner)
            }
            crate::operation::create_backup::CreateBackupError::IncompatibleParameterError(
                inner,
            ) => Error::IncompatibleParameterError(inner),
            crate::operation::create_backup::CreateBackupError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::create_backup::CreateBackupError::ServiceLimitExceeded(inner) => {
                Error::ServiceLimitExceeded(inner)
            }
            crate::operation::create_backup::CreateBackupError::UnsupportedOperation(inner) => {
                Error::UnsupportedOperation(inner)
            }
            crate::operation::create_backup::CreateBackupError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::create_backup::CreateBackupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError>
    for Error
{
    fn from(
        err: crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError,
    ) -> Self {
        match err {
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::create_data_repository_association::CreateDataRepositoryAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_repository_task::CreateDataRepositoryTaskError> for Error {
    fn from(
        err: crate::operation::create_data_repository_task::CreateDataRepositoryTaskError,
    ) -> Self {
        match err {
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::DataRepositoryTaskExecuting(inner) => Error::DataRepositoryTaskExecuting(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::create_data_repository_task::CreateDataRepositoryTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_file_cache::CreateFileCacheError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_file_cache::CreateFileCacheError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_file_cache::CreateFileCacheError> for Error {
    fn from(err: crate::operation::create_file_cache::CreateFileCacheError) -> Self {
        match err {
            crate::operation::create_file_cache::CreateFileCacheError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_file_cache::CreateFileCacheError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_file_cache::CreateFileCacheError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_file_cache::CreateFileCacheError::InvalidNetworkSettings(inner) => Error::InvalidNetworkSettings(inner),
            crate::operation::create_file_cache::CreateFileCacheError::InvalidPerUnitStorageThroughput(inner) => Error::InvalidPerUnitStorageThroughput(inner),
            crate::operation::create_file_cache::CreateFileCacheError::MissingFileCacheConfiguration(inner) => Error::MissingFileCacheConfiguration(inner),
            crate::operation::create_file_cache::CreateFileCacheError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_file_cache::CreateFileCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_file_system::CreateFileSystemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_file_system::CreateFileSystemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_file_system::CreateFileSystemError> for Error {
    fn from(err: crate::operation::create_file_system::CreateFileSystemError) -> Self {
        match err {
            crate::operation::create_file_system::CreateFileSystemError::ActiveDirectoryError(inner) => Error::ActiveDirectoryError(inner),
            crate::operation::create_file_system::CreateFileSystemError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_file_system::CreateFileSystemError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_file_system::CreateFileSystemError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_file_system::CreateFileSystemError::InvalidExportPath(inner) => Error::InvalidExportPath(inner),
            crate::operation::create_file_system::CreateFileSystemError::InvalidImportPath(inner) => Error::InvalidImportPath(inner),
            crate::operation::create_file_system::CreateFileSystemError::InvalidNetworkSettings(inner) => Error::InvalidNetworkSettings(inner),
            crate::operation::create_file_system::CreateFileSystemError::InvalidPerUnitStorageThroughput(inner) => Error::InvalidPerUnitStorageThroughput(inner),
            crate::operation::create_file_system::CreateFileSystemError::MissingFileSystemConfiguration(inner) => Error::MissingFileSystemConfiguration(inner),
            crate::operation::create_file_system::CreateFileSystemError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_file_system::CreateFileSystemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError>
    for Error
{
    fn from(
        err: crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError,
    ) -> Self {
        match err {
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::ActiveDirectoryError(inner) => Error::ActiveDirectoryError(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::BackupNotFound(inner) => Error::BackupNotFound(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::InvalidNetworkSettings(inner) => Error::InvalidNetworkSettings(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::InvalidPerUnitStorageThroughput(inner) => Error::InvalidPerUnitStorageThroughput(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::MissingFileSystemConfiguration(inner) => Error::MissingFileSystemConfiguration(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_file_system_from_backup::CreateFileSystemFromBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_snapshot::CreateSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_snapshot::CreateSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_snapshot::CreateSnapshotError> for Error {
    fn from(err: crate::operation::create_snapshot::CreateSnapshotError) -> Self {
        match err {
            crate::operation::create_snapshot::CreateSnapshotError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::create_snapshot::CreateSnapshotError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::create_snapshot::CreateSnapshotError::ServiceLimitExceeded(inner) => {
                Error::ServiceLimitExceeded(inner)
            }
            crate::operation::create_snapshot::CreateSnapshotError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::create_snapshot::CreateSnapshotError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError>
    for Error
{
    fn from(
        err: crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError,
    ) -> Self {
        match err {
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::ActiveDirectoryError(inner) => Error::ActiveDirectoryError(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::create_storage_virtual_machine::CreateStorageVirtualMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_volume::CreateVolumeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_volume::CreateVolumeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_volume::CreateVolumeError> for Error {
    fn from(err: crate::operation::create_volume::CreateVolumeError) -> Self {
        match err {
            crate::operation::create_volume::CreateVolumeError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::create_volume::CreateVolumeError::FileSystemNotFound(inner) => {
                Error::FileSystemNotFound(inner)
            }
            crate::operation::create_volume::CreateVolumeError::IncompatibleParameterError(
                inner,
            ) => Error::IncompatibleParameterError(inner),
            crate::operation::create_volume::CreateVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::create_volume::CreateVolumeError::MissingVolumeConfiguration(
                inner,
            ) => Error::MissingVolumeConfiguration(inner),
            crate::operation::create_volume::CreateVolumeError::ServiceLimitExceeded(inner) => {
                Error::ServiceLimitExceeded(inner)
            }
            crate::operation::create_volume::CreateVolumeError::StorageVirtualMachineNotFound(
                inner,
            ) => Error::StorageVirtualMachineNotFound(inner),
            crate::operation::create_volume::CreateVolumeError::UnsupportedOperation(inner) => {
                Error::UnsupportedOperation(inner)
            }
            crate::operation::create_volume::CreateVolumeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_volume_from_backup::CreateVolumeFromBackupError> for Error {
    fn from(err: crate::operation::create_volume_from_backup::CreateVolumeFromBackupError) -> Self {
        match err {
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::BackupNotFound(inner) => Error::BackupNotFound(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::MissingVolumeConfiguration(inner) => Error::MissingVolumeConfiguration(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::StorageVirtualMachineNotFound(inner) => Error::StorageVirtualMachineNotFound(inner),
            crate::operation::create_volume_from_backup::CreateVolumeFromBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_backup::DeleteBackupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_backup::DeleteBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_backup::DeleteBackupError> for Error {
    fn from(err: crate::operation::delete_backup::DeleteBackupError) -> Self {
        match err {
            crate::operation::delete_backup::DeleteBackupError::BackupBeingCopied(inner) => {
                Error::BackupBeingCopied(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::BackupInProgress(inner) => {
                Error::BackupInProgress(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::BackupNotFound(inner) => {
                Error::BackupNotFound(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::BackupRestoring(inner) => {
                Error::BackupRestoring(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::IncompatibleParameterError(
                inner,
            ) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_backup::DeleteBackupError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::delete_backup::DeleteBackupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError>
    for Error
{
    fn from(
        err: crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError,
    ) -> Self {
        match err {
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::DataRepositoryAssociationNotFound(inner) => Error::DataRepositoryAssociationNotFound(inner),
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::delete_data_repository_association::DeleteDataRepositoryAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_file_cache::DeleteFileCacheError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_file_cache::DeleteFileCacheError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_file_cache::DeleteFileCacheError> for Error {
    fn from(err: crate::operation::delete_file_cache::DeleteFileCacheError) -> Self {
        match err {
            crate::operation::delete_file_cache::DeleteFileCacheError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::delete_file_cache::DeleteFileCacheError::FileCacheNotFound(inner) => Error::FileCacheNotFound(inner),
            crate::operation::delete_file_cache::DeleteFileCacheError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_file_cache::DeleteFileCacheError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_file_cache::DeleteFileCacheError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::delete_file_cache::DeleteFileCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_file_system::DeleteFileSystemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_file_system::DeleteFileSystemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_file_system::DeleteFileSystemError> for Error {
    fn from(err: crate::operation::delete_file_system::DeleteFileSystemError) -> Self {
        match err {
            crate::operation::delete_file_system::DeleteFileSystemError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::delete_file_system::DeleteFileSystemError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::delete_file_system::DeleteFileSystemError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_file_system::DeleteFileSystemError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_file_system::DeleteFileSystemError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::delete_file_system::DeleteFileSystemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_snapshot::DeleteSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_snapshot::DeleteSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_snapshot::DeleteSnapshotError> for Error {
    fn from(err: crate::operation::delete_snapshot::DeleteSnapshotError) -> Self {
        match err {
            crate::operation::delete_snapshot::DeleteSnapshotError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::delete_snapshot::DeleteSnapshotError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::delete_snapshot::DeleteSnapshotError::SnapshotNotFound(inner) => {
                Error::SnapshotNotFound(inner)
            }
            crate::operation::delete_snapshot::DeleteSnapshotError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError>
    for Error
{
    fn from(
        err: crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError,
    ) -> Self {
        match err {
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError::StorageVirtualMachineNotFound(inner) => Error::StorageVirtualMachineNotFound(inner),
            crate::operation::delete_storage_virtual_machine::DeleteStorageVirtualMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_volume::DeleteVolumeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_volume::DeleteVolumeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_volume::DeleteVolumeError> for Error {
    fn from(err: crate::operation::delete_volume::DeleteVolumeError) -> Self {
        match err {
            crate::operation::delete_volume::DeleteVolumeError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::delete_volume::DeleteVolumeError::IncompatibleParameterError(
                inner,
            ) => Error::IncompatibleParameterError(inner),
            crate::operation::delete_volume::DeleteVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::delete_volume::DeleteVolumeError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::delete_volume::DeleteVolumeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_backups::DescribeBackupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_backups::DescribeBackupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_backups::DescribeBackupsError> for Error {
    fn from(err: crate::operation::describe_backups::DescribeBackupsError) -> Self {
        match err {
            crate::operation::describe_backups::DescribeBackupsError::BackupNotFound(inner) => {
                Error::BackupNotFound(inner)
            }
            crate::operation::describe_backups::DescribeBackupsError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::describe_backups::DescribeBackupsError::FileSystemNotFound(inner) => {
                Error::FileSystemNotFound(inner)
            }
            crate::operation::describe_backups::DescribeBackupsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::describe_backups::DescribeBackupsError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::describe_backups::DescribeBackupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError> for Error {
    fn from(err: crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError) -> Self {
        match err {
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::DataRepositoryAssociationNotFound(inner) => Error::DataRepositoryAssociationNotFound(inner),
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::InvalidDataRepositoryType(inner) => Error::InvalidDataRepositoryType(inner),
            crate::operation::describe_data_repository_associations::DescribeDataRepositoryAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError>
    for Error
{
    fn from(
        err: crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError,
    ) -> Self {
        match err {
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError::DataRepositoryTaskNotFound(inner) => Error::DataRepositoryTaskNotFound(inner),
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_data_repository_tasks::DescribeDataRepositoryTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_file_caches::DescribeFileCachesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_file_caches::DescribeFileCachesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_file_caches::DescribeFileCachesError> for Error {
    fn from(err: crate::operation::describe_file_caches::DescribeFileCachesError) -> Self {
        match err {
            crate::operation::describe_file_caches::DescribeFileCachesError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_file_caches::DescribeFileCachesError::FileCacheNotFound(inner) => Error::FileCacheNotFound(inner),
            crate::operation::describe_file_caches::DescribeFileCachesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_file_caches::DescribeFileCachesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError>
    for Error
{
    fn from(
        err: crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError,
    ) -> Self {
        match err {
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_file_system_aliases::DescribeFileSystemAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_file_systems::DescribeFileSystemsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_file_systems::DescribeFileSystemsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_file_systems::DescribeFileSystemsError> for Error {
    fn from(err: crate::operation::describe_file_systems::DescribeFileSystemsError) -> Self {
        match err {
            crate::operation::describe_file_systems::DescribeFileSystemsError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_file_systems::DescribeFileSystemsError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::describe_file_systems::DescribeFileSystemsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_file_systems::DescribeFileSystemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_snapshots::DescribeSnapshotsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_snapshots::DescribeSnapshotsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_snapshots::DescribeSnapshotsError> for Error {
    fn from(err: crate::operation::describe_snapshots::DescribeSnapshotsError) -> Self {
        match err {
            crate::operation::describe_snapshots::DescribeSnapshotsError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::describe_snapshots::DescribeSnapshotsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::describe_snapshots::DescribeSnapshotsError::SnapshotNotFound(
                inner,
            ) => Error::SnapshotNotFound(inner),
            crate::operation::describe_snapshots::DescribeSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError>
    for Error
{
    fn from(
        err: crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError,
    ) -> Self {
        match err {
            crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::StorageVirtualMachineNotFound(inner) => Error::StorageVirtualMachineNotFound(inner),
            crate::operation::describe_storage_virtual_machines::DescribeStorageVirtualMachinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_volumes::DescribeVolumesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_volumes::DescribeVolumesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_volumes::DescribeVolumesError> for Error {
    fn from(err: crate::operation::describe_volumes::DescribeVolumesError) -> Self {
        match err {
            crate::operation::describe_volumes::DescribeVolumesError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::describe_volumes::DescribeVolumesError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::describe_volumes::DescribeVolumesError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::describe_volumes::DescribeVolumesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError,
    ) -> Self {
        match err {
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::disassociate_file_system_aliases::DisassociateFileSystemAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotServiceResourceError(inner) => Error::NotServiceResourceError(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceDoesNotSupportTagging(inner) => Error::ResourceDoesNotSupportTagging(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError>
    for Error
{
    fn from(
        err: crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError,
    ) -> Self {
        match err {
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::release_file_system_nfs_v3_locks::ReleaseFileSystemNfsV3LocksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError>
    for Error
{
    fn from(
        err: crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError,
    ) -> Self {
        match err {
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError::VolumeNotFound(inner) => Error::VolumeNotFound(inner),
            crate::operation::restore_volume_from_snapshot::RestoreVolumeFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::tag_resource::TagResourceError::NotServiceResourceError(inner) => {
                Error::NotServiceResourceError(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceDoesNotSupportTagging(
                inner,
            ) => Error::ResourceDoesNotSupportTagging(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::untag_resource::UntagResourceError::NotServiceResourceError(
                inner,
            ) => Error::NotServiceResourceError(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceDoesNotSupportTagging(
                inner,
            ) => Error::ResourceDoesNotSupportTagging(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError>
    for Error
{
    fn from(
        err: crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError,
    ) -> Self {
        match err {
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::DataRepositoryAssociationNotFound(inner) => Error::DataRepositoryAssociationNotFound(inner),
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::update_data_repository_association::UpdateDataRepositoryAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_file_cache::UpdateFileCacheError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_file_cache::UpdateFileCacheError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_file_cache::UpdateFileCacheError> for Error {
    fn from(err: crate::operation::update_file_cache::UpdateFileCacheError) -> Self {
        match err {
            crate::operation::update_file_cache::UpdateFileCacheError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::FileCacheNotFound(inner) => Error::FileCacheNotFound(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::MissingFileCacheConfiguration(inner) => Error::MissingFileCacheConfiguration(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::update_file_cache::UpdateFileCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_file_system::UpdateFileSystemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_file_system::UpdateFileSystemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_file_system::UpdateFileSystemError> for Error {
    fn from(err: crate::operation::update_file_system::UpdateFileSystemError) -> Self {
        match err {
            crate::operation::update_file_system::UpdateFileSystemError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::update_file_system::UpdateFileSystemError::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
            crate::operation::update_file_system::UpdateFileSystemError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::update_file_system::UpdateFileSystemError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_file_system::UpdateFileSystemError::InvalidNetworkSettings(inner) => Error::InvalidNetworkSettings(inner),
            crate::operation::update_file_system::UpdateFileSystemError::MissingFileSystemConfiguration(inner) => Error::MissingFileSystemConfiguration(inner),
            crate::operation::update_file_system::UpdateFileSystemError::ServiceLimitExceeded(inner) => Error::ServiceLimitExceeded(inner),
            crate::operation::update_file_system::UpdateFileSystemError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::update_file_system::UpdateFileSystemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_snapshot::UpdateSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_snapshot::UpdateSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_snapshot::UpdateSnapshotError> for Error {
    fn from(err: crate::operation::update_snapshot::UpdateSnapshotError) -> Self {
        match err {
            crate::operation::update_snapshot::UpdateSnapshotError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::update_snapshot::UpdateSnapshotError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::update_snapshot::UpdateSnapshotError::SnapshotNotFound(inner) => {
                Error::SnapshotNotFound(inner)
            }
            crate::operation::update_snapshot::UpdateSnapshotError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError>
    for Error
{
    fn from(
        err: crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError,
    ) -> Self {
        match err {
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::BadRequest(inner) => Error::BadRequest(inner),
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::IncompatibleParameterError(inner) => Error::IncompatibleParameterError(inner),
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::StorageVirtualMachineNotFound(inner) => Error::StorageVirtualMachineNotFound(inner),
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::UnsupportedOperation(inner) => Error::UnsupportedOperation(inner),
            crate::operation::update_storage_virtual_machine::UpdateStorageVirtualMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_volume::UpdateVolumeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_volume::UpdateVolumeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_volume::UpdateVolumeError> for Error {
    fn from(err: crate::operation::update_volume::UpdateVolumeError) -> Self {
        match err {
            crate::operation::update_volume::UpdateVolumeError::BadRequest(inner) => {
                Error::BadRequest(inner)
            }
            crate::operation::update_volume::UpdateVolumeError::IncompatibleParameterError(
                inner,
            ) => Error::IncompatibleParameterError(inner),
            crate::operation::update_volume::UpdateVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::update_volume::UpdateVolumeError::MissingVolumeConfiguration(
                inner,
            ) => Error::MissingVolumeConfiguration(inner),
            crate::operation::update_volume::UpdateVolumeError::VolumeNotFound(inner) => {
                Error::VolumeNotFound(inner)
            }
            crate::operation::update_volume::UpdateVolumeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ActiveDirectoryError(e) => e.request_id(),
            Self::BackupBeingCopied(e) => e.request_id(),
            Self::BackupInProgress(e) => e.request_id(),
            Self::BackupNotFound(e) => e.request_id(),
            Self::BackupRestoring(e) => e.request_id(),
            Self::BadRequest(e) => e.request_id(),
            Self::DataRepositoryAssociationNotFound(e) => e.request_id(),
            Self::DataRepositoryTaskEnded(e) => e.request_id(),
            Self::DataRepositoryTaskExecuting(e) => e.request_id(),
            Self::DataRepositoryTaskNotFound(e) => e.request_id(),
            Self::FileCacheNotFound(e) => e.request_id(),
            Self::FileSystemNotFound(e) => e.request_id(),
            Self::IncompatibleParameterError(e) => e.request_id(),
            Self::IncompatibleRegionForMultiAz(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidDataRepositoryType(e) => e.request_id(),
            Self::InvalidDestinationKmsKey(e) => e.request_id(),
            Self::InvalidExportPath(e) => e.request_id(),
            Self::InvalidImportPath(e) => e.request_id(),
            Self::InvalidNetworkSettings(e) => e.request_id(),
            Self::InvalidPerUnitStorageThroughput(e) => e.request_id(),
            Self::InvalidRegion(e) => e.request_id(),
            Self::InvalidSourceKmsKey(e) => e.request_id(),
            Self::MissingFileCacheConfiguration(e) => e.request_id(),
            Self::MissingFileSystemConfiguration(e) => e.request_id(),
            Self::MissingVolumeConfiguration(e) => e.request_id(),
            Self::NotServiceResourceError(e) => e.request_id(),
            Self::ResourceDoesNotSupportTagging(e) => e.request_id(),
            Self::ResourceNotFound(e) => e.request_id(),
            Self::ServiceLimitExceeded(e) => e.request_id(),
            Self::SnapshotNotFound(e) => e.request_id(),
            Self::SourceBackupUnavailable(e) => e.request_id(),
            Self::StorageVirtualMachineNotFound(e) => e.request_id(),
            Self::UnsupportedOperation(e) => e.request_id(),
            Self::VolumeNotFound(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
