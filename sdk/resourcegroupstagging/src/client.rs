// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Resource Groups Tagging API
///
/// Client for invoking operations on AWS Resource Groups Tagging API. Each operation on AWS Resource Groups Tagging API is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_resourcegroupstagging::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_resourcegroupstagging::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_resourcegroupstagging::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`DescribeReportCreation`](crate::client::fluent_builders::DescribeReportCreation) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeReportCreation::send) it.

    /// - On success, responds with [`DescribeReportCreationOutput`](crate::output::DescribeReportCreationOutput) with field(s):
    ///   - [`status(Option<String>)`](crate::output::DescribeReportCreationOutput::status): <p>Reports the status of the operation.</p>  <p>The operation status can be one of the following:</p>  <ul>   <li> <p> <code>RUNNING</code> - Report creation is in progress.</p> </li>   <li> <p> <code>SUCCEEDED</code> - Report creation is complete. You can open the report from the Amazon S3 bucket that you specified when you ran <code>StartReportCreation</code>.</p> </li>   <li> <p> <code>FAILED</code> - Report creation timed out or the Amazon S3 bucket is not accessible. </p> </li>   <li> <p> <code>NO REPORT</code> - No report was generated in the last 90 days.</p> </li>  </ul>
    ///   - [`s3_location(Option<String>)`](crate::output::DescribeReportCreationOutput::s3_location): <p>The path to the Amazon S3 bucket where the report was stored on creation.</p>
    ///   - [`start_date(Option<String>)`](crate::output::DescribeReportCreationOutput::start_date): <p>The date and time that the report was started. </p>
    ///   - [`error_message(Option<String>)`](crate::output::DescribeReportCreationOutput::error_message): <p>Details of the common errors that all operations return.</p>
    /// - On failure, responds with [`SdkError<DescribeReportCreationError>`](crate::error::DescribeReportCreationError)
    pub fn describe_report_creation(&self) -> fluent_builders::DescribeReportCreation {
        fluent_builders::DescribeReportCreation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetComplianceSummary`](crate::client::fluent_builders::GetComplianceSummary) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetComplianceSummary::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_id_filters(Vec<String>)`](crate::client::fluent_builders::GetComplianceSummary::target_id_filters) / [`set_target_id_filters(Option<Vec<String>>)`](crate::client::fluent_builders::GetComplianceSummary::set_target_id_filters): <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
    ///   - [`region_filters(Vec<String>)`](crate::client::fluent_builders::GetComplianceSummary::region_filters) / [`set_region_filters(Option<Vec<String>>)`](crate::client::fluent_builders::GetComplianceSummary::set_region_filters): <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
    ///   - [`resource_type_filters(Vec<String>)`](crate::client::fluent_builders::GetComplianceSummary::resource_type_filters) / [`set_resource_type_filters(Option<Vec<String>>)`](crate::client::fluent_builders::GetComplianceSummary::set_resource_type_filters): <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>  <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>  <ul>   <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>   <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>   <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>  </ul>  <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
    ///   - [`tag_key_filters(Vec<String>)`](crate::client::fluent_builders::GetComplianceSummary::tag_key_filters) / [`set_tag_key_filters(Option<Vec<String>>)`](crate::client::fluent_builders::GetComplianceSummary::set_tag_key_filters): <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
    ///   - [`group_by(Vec<GroupByAttribute>)`](crate::client::fluent_builders::GetComplianceSummary::group_by) / [`set_group_by(Option<Vec<GroupByAttribute>>)`](crate::client::fluent_builders::GetComplianceSummary::set_group_by): <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetComplianceSummary::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetComplianceSummary::set_max_results): <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    ///   - [`pagination_token(impl Into<String>)`](crate::client::fluent_builders::GetComplianceSummary::pagination_token) / [`set_pagination_token(Option<String>)`](crate::client::fluent_builders::GetComplianceSummary::set_pagination_token): <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    /// - On success, responds with [`GetComplianceSummaryOutput`](crate::output::GetComplianceSummaryOutput) with field(s):
    ///   - [`summary_list(Option<Vec<Summary>>)`](crate::output::GetComplianceSummaryOutput::summary_list): <p>A table that shows counts of noncompliant resources.</p>
    ///   - [`pagination_token(Option<String>)`](crate::output::GetComplianceSummaryOutput::pagination_token): <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    /// - On failure, responds with [`SdkError<GetComplianceSummaryError>`](crate::error::GetComplianceSummaryError)
    pub fn get_compliance_summary(&self) -> fluent_builders::GetComplianceSummary {
        fluent_builders::GetComplianceSummary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetResources`](crate::client::fluent_builders::GetResources) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetResources::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pagination_token(impl Into<String>)`](crate::client::fluent_builders::GetResources::pagination_token) / [`set_pagination_token(Option<String>)`](crate::client::fluent_builders::GetResources::set_pagination_token): <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    ///   - [`tag_filters(Vec<TagFilter>)`](crate::client::fluent_builders::GetResources::tag_filters) / [`set_tag_filters(Option<Vec<TagFilter>>)`](crate::client::fluent_builders::GetResources::set_tag_filters): <p>Specifies a list of TagFilters (keys and values) to restrict the output to only those resources that have tags with the specified keys and, if included, the specified values. Each <code>TagFilter</code> must contain a key with values optional. A request can include up to 50 keys, and each key can include up to 20 values. </p>  <p>Note the following when deciding how to use TagFilters:</p>  <ul>   <li> <p>If you <i>don't</i> specify a <code>TagFilter</code>, the response includes all resources that are currently tagged or ever had a tag. Resources that currently don't have tags are shown with an empty tag set, like this: <code>"Tags": []</code>.</p> </li>   <li> <p>If you specify more than one filter in a single request, the response returns only those resources that satisfy all filters.</p> </li>   <li> <p>If you specify a filter that contains more than one value for a key, the response returns resources that match <i>any</i> of the specified values for that key.</p> </li>   <li> <p>If you don't specify a value for a key, the response returns all resources that are tagged with that key, with any or no value.</p> <p>For example, for the following filters: <code>filter1= {keyA,{value1}}</code>, <code>filter2={keyB,{value2,value3,value4}}</code>, <code>filter3= {keyC}</code>:</p>    <ul>     <li> <p> <code>GetResources({filter1})</code> returns resources tagged with <code>key1=value1</code> </p> </li>     <li> <p> <code>GetResources({filter2})</code> returns resources tagged with <code>key2=value2</code> or <code>key2=value3</code> or <code>key2=value4</code> </p> </li>     <li> <p> <code>GetResources({filter3})</code> returns resources tagged with any tag with the key <code>key3</code>, and with any or no value</p> </li>     <li> <p> <code>GetResources({filter1,filter2,filter3})</code> returns resources tagged with <code>(key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any or no value)</code> </p> </li>    </ul> </li>  </ul>
    ///   - [`resources_per_page(i32)`](crate::client::fluent_builders::GetResources::resources_per_page) / [`set_resources_per_page(Option<i32>)`](crate::client::fluent_builders::GetResources::set_resources_per_page): <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    ///   - [`tags_per_page(i32)`](crate::client::fluent_builders::GetResources::tags_per_page) / [`set_tags_per_page(Option<i32>)`](crate::client::fluent_builders::GetResources::set_tags_per_page): <p>Amazon Web Services recommends using <code>ResourcesPerPage</code> instead of this parameter.</p>  <p>A limit that restricts the number of tags (key and value pairs) returned by <code>GetResources</code> in paginated output. A resource with no tags is counted as having one tag (one key and value pair).</p>  <p> <code>GetResources</code> does not split a resource and its associated tags across pages. If the specified <code>TagsPerPage</code> would cause such a break, a <code>PaginationToken</code> is returned in place of the affected resource and its tags. Use that token in another request to get the remaining data. For example, if you specify a <code>TagsPerPage</code> of <code>100</code> and the account has 22 resources with 10 tags each (meaning that each resource has 10 key and value pairs), the output will consist of three pages. The first page displays the first 10 resources, each with its 10 tags. The second page displays the next 10 resources, each with its 10 tags. The third page displays the remaining 2 resources, each with its 10 tags.</p>  <p>You can set <code>TagsPerPage</code> to a minimum of 100 items up to a maximum of 500 items.</p>
    ///   - [`resource_type_filters(Vec<String>)`](crate::client::fluent_builders::GetResources::resource_type_filters) / [`set_resource_type_filters(Option<Vec<String>>)`](crate::client::fluent_builders::GetResources::set_resource_type_filters): <p>Specifies the resource types that you want included in the response. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances. </p>  <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). For the list of services whose resources you can use in this parameter, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the Resource Groups Tagging API</a>.</p>  <p>You can specify multiple resource types by using an array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. For example, the following string would limit the response to only Amazon EC2 instances, Amazon S3 buckets, or any Audit Manager resource:</p>  <p> <code>ec2:instance,s3:bucket,auditmanager</code> </p>
    ///   - [`include_compliance_details(bool)`](crate::client::fluent_builders::GetResources::include_compliance_details) / [`set_include_compliance_details(Option<bool>)`](crate::client::fluent_builders::GetResources::set_include_compliance_details): <p>Specifies whether to include details regarding the compliance with the effective tag policy. Set this to <code>true</code> to determine whether resources are compliant with the tag policy and to get details.</p>
    ///   - [`exclude_compliant_resources(bool)`](crate::client::fluent_builders::GetResources::exclude_compliant_resources) / [`set_exclude_compliant_resources(Option<bool>)`](crate::client::fluent_builders::GetResources::set_exclude_compliant_resources): <p>Specifies whether to exclude resources that are compliant with the tag policy. Set this to <code>true</code> if you are interested in retrieving information on noncompliant resources only.</p>  <p>You can use this parameter only if the <code>IncludeComplianceDetails</code> parameter is also set to <code>true</code>.</p>
    ///   - [`resource_arn_list(Vec<String>)`](crate::client::fluent_builders::GetResources::resource_arn_list) / [`set_resource_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::GetResources::set_resource_arn_list): <p>Specifies a list of ARNs of resources for which you want to retrieve tag data. You can't specify both this parameter and any of the pagination parameters (<code>ResourcesPerPage</code>, <code>TagsPerPage</code>, <code>PaginationToken</code>) in the same request. If you specify both, you get an <code>Invalid Parameter</code> exception.</p>  <p>If a resource specified by this parameter doesn't exist, it doesn't generate an error; it simply isn't included in the response.</p>  <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`GetResourcesOutput`](crate::output::GetResourcesOutput) with field(s):
    ///   - [`pagination_token(Option<String>)`](crate::output::GetResourcesOutput::pagination_token): <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    ///   - [`resource_tag_mapping_list(Option<Vec<ResourceTagMapping>>)`](crate::output::GetResourcesOutput::resource_tag_mapping_list): <p>A list of resource ARNs and the tags (keys and values) associated with each.</p>
    /// - On failure, responds with [`SdkError<GetResourcesError>`](crate::error::GetResourcesError)
    pub fn get_resources(&self) -> fluent_builders::GetResources {
        fluent_builders::GetResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTagKeys`](crate::client::fluent_builders::GetTagKeys) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetTagKeys::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pagination_token(impl Into<String>)`](crate::client::fluent_builders::GetTagKeys::pagination_token) / [`set_pagination_token(Option<String>)`](crate::client::fluent_builders::GetTagKeys::set_pagination_token): <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    /// - On success, responds with [`GetTagKeysOutput`](crate::output::GetTagKeysOutput) with field(s):
    ///   - [`pagination_token(Option<String>)`](crate::output::GetTagKeysOutput::pagination_token): <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    ///   - [`tag_keys(Option<Vec<String>>)`](crate::output::GetTagKeysOutput::tag_keys): <p>A list of all tag keys in the Amazon Web Services account.</p>
    /// - On failure, responds with [`SdkError<GetTagKeysError>`](crate::error::GetTagKeysError)
    pub fn get_tag_keys(&self) -> fluent_builders::GetTagKeys {
        fluent_builders::GetTagKeys::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTagValues`](crate::client::fluent_builders::GetTagValues) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetTagValues::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pagination_token(impl Into<String>)`](crate::client::fluent_builders::GetTagValues::pagination_token) / [`set_pagination_token(Option<String>)`](crate::client::fluent_builders::GetTagValues::set_pagination_token): <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    ///   - [`key(impl Into<String>)`](crate::client::fluent_builders::GetTagValues::key) / [`set_key(Option<String>)`](crate::client::fluent_builders::GetTagValues::set_key): <p>Specifies the tag key for which you want to list all existing values that are currently used in the specified Amazon Web Services Region for the calling account.</p>
    /// - On success, responds with [`GetTagValuesOutput`](crate::output::GetTagValuesOutput) with field(s):
    ///   - [`pagination_token(Option<String>)`](crate::output::GetTagValuesOutput::pagination_token): <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    ///   - [`tag_values(Option<Vec<String>>)`](crate::output::GetTagValuesOutput::tag_values): <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    /// - On failure, responds with [`SdkError<GetTagValuesError>`](crate::error::GetTagValuesError)
    pub fn get_tag_values(&self) -> fluent_builders::GetTagValues {
        fluent_builders::GetTagValues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartReportCreation`](crate::client::fluent_builders::StartReportCreation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`s3_bucket(impl Into<String>)`](crate::client::fluent_builders::StartReportCreation::s3_bucket) / [`set_s3_bucket(Option<String>)`](crate::client::fluent_builders::StartReportCreation::set_s3_bucket): <p>The name of the Amazon S3 bucket where the report will be stored; for example:</p>  <p> <code>awsexamplebucket</code> </p>  <p>For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.</p>
    /// - On success, responds with [`StartReportCreationOutput`](crate::output::StartReportCreationOutput)

    /// - On failure, responds with [`SdkError<StartReportCreationError>`](crate::error::StartReportCreationError)
    pub fn start_report_creation(&self) -> fluent_builders::StartReportCreation {
        fluent_builders::StartReportCreation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResources`](crate::client::fluent_builders::TagResources) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn_list(Vec<String>)`](crate::client::fluent_builders::TagResources::resource_arn_list) / [`set_resource_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::TagResources::set_resource_arn_list): <p>Specifies the list of ARNs of the resources that you want to apply tags to.</p>  <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResources::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResources::set_tags): <p>Specifies a list of tags that you want to add to the specified resources. A tag consists of a key and a value that you define.</p>
    /// - On success, responds with [`TagResourcesOutput`](crate::output::TagResourcesOutput) with field(s):
    ///   - [`failed_resources_map(Option<HashMap<String, FailureInfo>>)`](crate::output::TagResourcesOutput::failed_resources_map): <p>A map containing a key-value pair for each failed item that couldn't be tagged. The key is the ARN of the failed resource. The value is a <code>FailureInfo</code> object that contains an error code, a status code, and an error message. If there are no errors, the <code>FailedResourcesMap</code> is empty.</p>
    /// - On failure, responds with [`SdkError<TagResourcesError>`](crate::error::TagResourcesError)
    pub fn tag_resources(&self) -> fluent_builders::TagResources {
        fluent_builders::TagResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResources`](crate::client::fluent_builders::UntagResources) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn_list(Vec<String>)`](crate::client::fluent_builders::UntagResources::resource_arn_list) / [`set_resource_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResources::set_resource_arn_list): <p>Specifies a list of ARNs of the resources that you want to remove tags from.</p>  <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResources::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResources::set_tag_keys): <p>Specifies a list of tag keys that you want to remove from the specified resources.</p>
    /// - On success, responds with [`UntagResourcesOutput`](crate::output::UntagResourcesOutput) with field(s):
    ///   - [`failed_resources_map(Option<HashMap<String, FailureInfo>>)`](crate::output::UntagResourcesOutput::failed_resources_map): <p>A map containing a key-value pair for each failed item that couldn't be untagged. The key is the ARN of the failed resource. The value is a <code>FailureInfo</code> object that contains an error code, a status code, and an error message. If there are no errors, the <code>FailedResourcesMap</code> is empty.</p>
    /// - On failure, responds with [`SdkError<UntagResourcesError>`](crate::error::UntagResourcesError)
    pub fn untag_resources(&self) -> fluent_builders::UntagResources {
        fluent_builders::UntagResources::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `DescribeReportCreation`.
    ///
    /// <p>Describes the status of the <code>StartReportCreation</code> operation. </p>
    /// <p>You can call this operation only from the organization's management account and from the us-east-1 Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeReportCreation {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_report_creation_input::Builder,
    }
    impl DescribeReportCreation {
        /// Creates a new `DescribeReportCreation`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeReportCreationOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeReportCreationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `GetComplianceSummary`.
    ///
    /// <p>Returns a table that shows counts of resources that are noncompliant with their tag policies.</p>
    /// <p>For more information on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag Policies</a> in the <i>Organizations User Guide.</i> </p>
    /// <p>You can call this operation only from the organization's management account and from the us-east-1 Region.</p>
    /// <p>This operation supports pagination, where the response can be sent in multiple pages. You should check the <code>PaginationToken</code> response parameter to determine if there are additional results available to return. Repeat the query, passing the <code>PaginationToken</code> response parameter value as an input to the next request until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that there are no more results waiting to be returned.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetComplianceSummary {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_compliance_summary_input::Builder,
    }
    impl GetComplianceSummary {
        /// Creates a new `GetComplianceSummary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetComplianceSummaryOutput,
            aws_smithy_http::result::SdkError<crate::error::GetComplianceSummaryError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::GetComplianceSummaryPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::GetComplianceSummaryPaginator {
            crate::paginator::GetComplianceSummaryPaginator::new(self.handle, self.inner)
        }
        /// Appends an item to `TargetIdFilters`.
        ///
        /// To override the contents of this collection use [`set_target_id_filters`](Self::set_target_id_filters).
        ///
        /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
        pub fn target_id_filters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_id_filters(input.into());
            self
        }
        /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
        pub fn set_target_id_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_target_id_filters(input);
            self
        }
        /// Appends an item to `RegionFilters`.
        ///
        /// To override the contents of this collection use [`set_region_filters`](Self::set_region_filters).
        ///
        /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
        pub fn region_filters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.region_filters(input.into());
            self
        }
        /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
        pub fn set_region_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_region_filters(input);
            self
        }
        /// Appends an item to `ResourceTypeFilters`.
        ///
        /// To override the contents of this collection use [`set_resource_type_filters`](Self::set_resource_type_filters).
        ///
        /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
        /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
        /// <ul>
        /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
        /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
        /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
        /// </ul>
        /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
        pub fn resource_type_filters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_type_filters(input.into());
            self
        }
        /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
        /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
        /// <ul>
        /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
        /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
        /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
        /// </ul>
        /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
        pub fn set_resource_type_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_type_filters(input);
            self
        }
        /// Appends an item to `TagKeyFilters`.
        ///
        /// To override the contents of this collection use [`set_tag_key_filters`](Self::set_tag_key_filters).
        ///
        /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
        pub fn tag_key_filters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_key_filters(input.into());
            self
        }
        /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
        pub fn set_tag_key_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_key_filters(input);
            self
        }
        /// Appends an item to `GroupBy`.
        ///
        /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
        ///
        /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
        pub fn group_by(mut self, input: crate::model::GroupByAttribute) -> Self {
            self.inner = self.inner.group_by(input);
            self
        }
        /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
        pub fn set_group_by(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupByAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_group_by(input);
            self
        }
        /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input.into());
            self
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetResources`.
    ///
    /// <p>Returns all the tagged or previously tagged resources that are located in the specified Amazon Web Services Region for the account.</p>
    /// <p>Depending on what information you want returned, you can also specify the following:</p>
    /// <ul>
    /// <li> <p> <i>Filters</i> that specify what tags and resource types you want returned. The response includes all tags that are associated with the requested resources.</p> </li>
    /// <li> <p>Information about compliance with the account's effective tag policy. For more information on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag Policies</a> in the <i>Organizations User Guide.</i> </p> </li>
    /// </ul>
    /// <p>This operation supports pagination, where the response can be sent in multiple pages. You should check the <code>PaginationToken</code> response parameter to determine if there are additional results available to return. Repeat the query, passing the <code>PaginationToken</code> response parameter value as an input to the next request until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that there are no more results waiting to be returned.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetResources {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_resources_input::Builder,
    }
    impl GetResources {
        /// Creates a new `GetResources`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetResourcesOutput,
            aws_smithy_http::result::SdkError<crate::error::GetResourcesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::GetResourcesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::GetResourcesPaginator {
            crate::paginator::GetResourcesPaginator::new(self.handle, self.inner)
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input.into());
            self
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
        /// Appends an item to `TagFilters`.
        ///
        /// To override the contents of this collection use [`set_tag_filters`](Self::set_tag_filters).
        ///
        /// <p>Specifies a list of TagFilters (keys and values) to restrict the output to only those resources that have tags with the specified keys and, if included, the specified values. Each <code>TagFilter</code> must contain a key with values optional. A request can include up to 50 keys, and each key can include up to 20 values. </p>
        /// <p>Note the following when deciding how to use TagFilters:</p>
        /// <ul>
        /// <li> <p>If you <i>don't</i> specify a <code>TagFilter</code>, the response includes all resources that are currently tagged or ever had a tag. Resources that currently don't have tags are shown with an empty tag set, like this: <code>"Tags": []</code>.</p> </li>
        /// <li> <p>If you specify more than one filter in a single request, the response returns only those resources that satisfy all filters.</p> </li>
        /// <li> <p>If you specify a filter that contains more than one value for a key, the response returns resources that match <i>any</i> of the specified values for that key.</p> </li>
        /// <li> <p>If you don't specify a value for a key, the response returns all resources that are tagged with that key, with any or no value.</p> <p>For example, for the following filters: <code>filter1= {keyA,{value1}}</code>, <code>filter2={keyB,{value2,value3,value4}}</code>, <code>filter3= {keyC}</code>:</p>
        /// <ul>
        /// <li> <p> <code>GetResources({filter1})</code> returns resources tagged with <code>key1=value1</code> </p> </li>
        /// <li> <p> <code>GetResources({filter2})</code> returns resources tagged with <code>key2=value2</code> or <code>key2=value3</code> or <code>key2=value4</code> </p> </li>
        /// <li> <p> <code>GetResources({filter3})</code> returns resources tagged with any tag with the key <code>key3</code>, and with any or no value</p> </li>
        /// <li> <p> <code>GetResources({filter1,filter2,filter3})</code> returns resources tagged with <code>(key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any or no value)</code> </p> </li>
        /// </ul> </li>
        /// </ul>
        pub fn tag_filters(mut self, input: crate::model::TagFilter) -> Self {
            self.inner = self.inner.tag_filters(input);
            self
        }
        /// <p>Specifies a list of TagFilters (keys and values) to restrict the output to only those resources that have tags with the specified keys and, if included, the specified values. Each <code>TagFilter</code> must contain a key with values optional. A request can include up to 50 keys, and each key can include up to 20 values. </p>
        /// <p>Note the following when deciding how to use TagFilters:</p>
        /// <ul>
        /// <li> <p>If you <i>don't</i> specify a <code>TagFilter</code>, the response includes all resources that are currently tagged or ever had a tag. Resources that currently don't have tags are shown with an empty tag set, like this: <code>"Tags": []</code>.</p> </li>
        /// <li> <p>If you specify more than one filter in a single request, the response returns only those resources that satisfy all filters.</p> </li>
        /// <li> <p>If you specify a filter that contains more than one value for a key, the response returns resources that match <i>any</i> of the specified values for that key.</p> </li>
        /// <li> <p>If you don't specify a value for a key, the response returns all resources that are tagged with that key, with any or no value.</p> <p>For example, for the following filters: <code>filter1= {keyA,{value1}}</code>, <code>filter2={keyB,{value2,value3,value4}}</code>, <code>filter3= {keyC}</code>:</p>
        /// <ul>
        /// <li> <p> <code>GetResources({filter1})</code> returns resources tagged with <code>key1=value1</code> </p> </li>
        /// <li> <p> <code>GetResources({filter2})</code> returns resources tagged with <code>key2=value2</code> or <code>key2=value3</code> or <code>key2=value4</code> </p> </li>
        /// <li> <p> <code>GetResources({filter3})</code> returns resources tagged with any tag with the key <code>key3</code>, and with any or no value</p> </li>
        /// <li> <p> <code>GetResources({filter1,filter2,filter3})</code> returns resources tagged with <code>(key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any or no value)</code> </p> </li>
        /// </ul> </li>
        /// </ul>
        pub fn set_tag_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagFilter>>,
        ) -> Self {
            self.inner = self.inner.set_tag_filters(input);
            self
        }
        /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
        pub fn resources_per_page(mut self, input: i32) -> Self {
            self.inner = self.inner.resources_per_page(input);
            self
        }
        /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
        pub fn set_resources_per_page(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_resources_per_page(input);
            self
        }
        /// <p>Amazon Web Services recommends using <code>ResourcesPerPage</code> instead of this parameter.</p>
        /// <p>A limit that restricts the number of tags (key and value pairs) returned by <code>GetResources</code> in paginated output. A resource with no tags is counted as having one tag (one key and value pair).</p>
        /// <p> <code>GetResources</code> does not split a resource and its associated tags across pages. If the specified <code>TagsPerPage</code> would cause such a break, a <code>PaginationToken</code> is returned in place of the affected resource and its tags. Use that token in another request to get the remaining data. For example, if you specify a <code>TagsPerPage</code> of <code>100</code> and the account has 22 resources with 10 tags each (meaning that each resource has 10 key and value pairs), the output will consist of three pages. The first page displays the first 10 resources, each with its 10 tags. The second page displays the next 10 resources, each with its 10 tags. The third page displays the remaining 2 resources, each with its 10 tags.</p>
        /// <p>You can set <code>TagsPerPage</code> to a minimum of 100 items up to a maximum of 500 items.</p>
        pub fn tags_per_page(mut self, input: i32) -> Self {
            self.inner = self.inner.tags_per_page(input);
            self
        }
        /// <p>Amazon Web Services recommends using <code>ResourcesPerPage</code> instead of this parameter.</p>
        /// <p>A limit that restricts the number of tags (key and value pairs) returned by <code>GetResources</code> in paginated output. A resource with no tags is counted as having one tag (one key and value pair).</p>
        /// <p> <code>GetResources</code> does not split a resource and its associated tags across pages. If the specified <code>TagsPerPage</code> would cause such a break, a <code>PaginationToken</code> is returned in place of the affected resource and its tags. Use that token in another request to get the remaining data. For example, if you specify a <code>TagsPerPage</code> of <code>100</code> and the account has 22 resources with 10 tags each (meaning that each resource has 10 key and value pairs), the output will consist of three pages. The first page displays the first 10 resources, each with its 10 tags. The second page displays the next 10 resources, each with its 10 tags. The third page displays the remaining 2 resources, each with its 10 tags.</p>
        /// <p>You can set <code>TagsPerPage</code> to a minimum of 100 items up to a maximum of 500 items.</p>
        pub fn set_tags_per_page(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_tags_per_page(input);
            self
        }
        /// Appends an item to `ResourceTypeFilters`.
        ///
        /// To override the contents of this collection use [`set_resource_type_filters`](Self::set_resource_type_filters).
        ///
        /// <p>Specifies the resource types that you want included in the response. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances. </p>
        /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). For the list of services whose resources you can use in this parameter, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the Resource Groups Tagging API</a>.</p>
        /// <p>You can specify multiple resource types by using an array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. For example, the following string would limit the response to only Amazon EC2 instances, Amazon S3 buckets, or any Audit Manager resource:</p>
        /// <p> <code>ec2:instance,s3:bucket,auditmanager</code> </p>
        pub fn resource_type_filters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_type_filters(input.into());
            self
        }
        /// <p>Specifies the resource types that you want included in the response. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances. </p>
        /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). For the list of services whose resources you can use in this parameter, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the Resource Groups Tagging API</a>.</p>
        /// <p>You can specify multiple resource types by using an array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. For example, the following string would limit the response to only Amazon EC2 instances, Amazon S3 buckets, or any Audit Manager resource:</p>
        /// <p> <code>ec2:instance,s3:bucket,auditmanager</code> </p>
        pub fn set_resource_type_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_type_filters(input);
            self
        }
        /// <p>Specifies whether to include details regarding the compliance with the effective tag policy. Set this to <code>true</code> to determine whether resources are compliant with the tag policy and to get details.</p>
        pub fn include_compliance_details(mut self, input: bool) -> Self {
            self.inner = self.inner.include_compliance_details(input);
            self
        }
        /// <p>Specifies whether to include details regarding the compliance with the effective tag policy. Set this to <code>true</code> to determine whether resources are compliant with the tag policy and to get details.</p>
        pub fn set_include_compliance_details(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_compliance_details(input);
            self
        }
        /// <p>Specifies whether to exclude resources that are compliant with the tag policy. Set this to <code>true</code> if you are interested in retrieving information on noncompliant resources only.</p>
        /// <p>You can use this parameter only if the <code>IncludeComplianceDetails</code> parameter is also set to <code>true</code>.</p>
        pub fn exclude_compliant_resources(mut self, input: bool) -> Self {
            self.inner = self.inner.exclude_compliant_resources(input);
            self
        }
        /// <p>Specifies whether to exclude resources that are compliant with the tag policy. Set this to <code>true</code> if you are interested in retrieving information on noncompliant resources only.</p>
        /// <p>You can use this parameter only if the <code>IncludeComplianceDetails</code> parameter is also set to <code>true</code>.</p>
        pub fn set_exclude_compliant_resources(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_exclude_compliant_resources(input);
            self
        }
        /// Appends an item to `ResourceARNList`.
        ///
        /// To override the contents of this collection use [`set_resource_arn_list`](Self::set_resource_arn_list).
        ///
        /// <p>Specifies a list of ARNs of resources for which you want to retrieve tag data. You can't specify both this parameter and any of the pagination parameters (<code>ResourcesPerPage</code>, <code>TagsPerPage</code>, <code>PaginationToken</code>) in the same request. If you specify both, you get an <code>Invalid Parameter</code> exception.</p>
        /// <p>If a resource specified by this parameter doesn't exist, it doesn't generate an error; it simply isn't included in the response.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn resource_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn_list(input.into());
            self
        }
        /// <p>Specifies a list of ARNs of resources for which you want to retrieve tag data. You can't specify both this parameter and any of the pagination parameters (<code>ResourcesPerPage</code>, <code>TagsPerPage</code>, <code>PaginationToken</code>) in the same request. If you specify both, you get an <code>Invalid Parameter</code> exception.</p>
        /// <p>If a resource specified by this parameter doesn't exist, it doesn't generate an error; it simply isn't included in the response.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_resource_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_arn_list(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetTagKeys`.
    ///
    /// <p>Returns all tag keys currently in use in the specified Amazon Web Services Region for the calling account.</p>
    /// <p>This operation supports pagination, where the response can be sent in multiple pages. You should check the <code>PaginationToken</code> response parameter to determine if there are additional results available to return. Repeat the query, passing the <code>PaginationToken</code> response parameter value as an input to the next request until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that there are no more results waiting to be returned.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetTagKeys {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_tag_keys_input::Builder,
    }
    impl GetTagKeys {
        /// Creates a new `GetTagKeys`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetTagKeysOutput,
            aws_smithy_http::result::SdkError<crate::error::GetTagKeysError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::GetTagKeysPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::GetTagKeysPaginator {
            crate::paginator::GetTagKeysPaginator::new(self.handle, self.inner)
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input.into());
            self
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetTagValues`.
    ///
    /// <p>Returns all tag values for the specified key that are used in the specified Amazon Web Services Region for the calling account.</p>
    /// <p>This operation supports pagination, where the response can be sent in multiple pages. You should check the <code>PaginationToken</code> response parameter to determine if there are additional results available to return. Repeat the query, passing the <code>PaginationToken</code> response parameter value as an input to the next request until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that there are no more results waiting to be returned.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetTagValues {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_tag_values_input::Builder,
    }
    impl GetTagValues {
        /// Creates a new `GetTagValues`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetTagValuesOutput,
            aws_smithy_http::result::SdkError<crate::error::GetTagValuesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::GetTagValuesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::GetTagValuesPaginator {
            crate::paginator::GetTagValuesPaginator::new(self.handle, self.inner)
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input.into());
            self
        }
        /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
        /// <p>Specifies the tag key for which you want to list all existing values that are currently used in the specified Amazon Web Services Region for the calling account.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key(input.into());
            self
        }
        /// <p>Specifies the tag key for which you want to list all existing values that are currently used in the specified Amazon Web Services Region for the calling account.</p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartReportCreation`.
    ///
    /// <p>Generates a report that lists all tagged resources in the accounts across your organization and tells whether each resource is compliant with the effective tag policy. Compliance data is refreshed daily. The report is generated asynchronously.</p>
    /// <p>The generated report is saved to the following location:</p>
    /// <p> <code>s3://example-bucket/AwsTagPolicies/o-exampleorgid/YYYY-MM-ddTHH:mm:ssZ/report.csv</code> </p>
    /// <p>You can call this operation only from the organization's management account and from the us-east-1 Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct StartReportCreation {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::start_report_creation_input::Builder,
    }
    impl StartReportCreation {
        /// Creates a new `StartReportCreation`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartReportCreationOutput,
            aws_smithy_http::result::SdkError<crate::error::StartReportCreationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon S3 bucket where the report will be stored; for example:</p>
        /// <p> <code>awsexamplebucket</code> </p>
        /// <p>For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.</p>
        pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.s3_bucket(input.into());
            self
        }
        /// <p>The name of the Amazon S3 bucket where the report will be stored; for example:</p>
        /// <p> <code>awsexamplebucket</code> </p>
        /// <p>For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.</p>
        pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_s3_bucket(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResources`.
    ///
    /// <p>Applies one or more tags to the specified resources. Note the following:</p>
    /// <ul>
    /// <li> <p>Not all resources can have tags. For a list of services with resources that support tagging using this operation, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the Resource Groups Tagging API</a>. If the resource doesn't yet support this operation, the resource's service might support tagging using its own API operations. For more information, refer to the documentation for that service.</p> </li>
    /// <li> <p>Each resource can have up to 50 tags. For other limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag Naming and Usage Conventions</a> in the <i>Amazon Web Services General Reference.</i> </p> </li>
    /// <li> <p>You can only tag resources that are located in the specified Amazon Web Services Region for the Amazon Web Services account.</p> </li>
    /// <li> <p>To add tags to a resource, you need the necessary permissions for the service that the resource belongs to as well as permissions for adding tags. For more information, see the documentation for each service.</p> </li>
    /// </ul> <important>
    /// <p>Do not store personally identifiable information (PII) or other confidential or sensitive information in tags. We use tags to provide you with billing and administration services. Tags are not intended to be used for private or sensitive data.</p>
    /// </important>
    /// <p> <b>Minimum permissions</b> </p>
    /// <p>In addition to the <code>tag:TagResources</code> permission required by this operation, you must also have the tagging permission defined by the service that created the resource. For example, to tag an Amazon EC2 instance using the <code>TagResources</code> operation, you must have both of the following permissions:</p>
    /// <ul>
    /// <li> <p> <code>tag:TagResource</code> </p> </li>
    /// <li> <p> <code>ec2:CreateTags</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResources {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resources_input::Builder,
    }
    impl TagResources {
        /// Creates a new `TagResources`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourcesOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourcesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `ResourceARNList`.
        ///
        /// To override the contents of this collection use [`set_resource_arn_list`](Self::set_resource_arn_list).
        ///
        /// <p>Specifies the list of ARNs of the resources that you want to apply tags to.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn resource_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn_list(input.into());
            self
        }
        /// <p>Specifies the list of ARNs of the resources that you want to apply tags to.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_resource_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_arn_list(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Specifies a list of tags that you want to add to the specified resources. A tag consists of a key and a value that you define.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k.into(), v.into());
            self
        }
        /// <p>Specifies a list of tags that you want to add to the specified resources. A tag consists of a key and a value that you define.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResources`.
    ///
    /// <p>Removes the specified tags from the specified resources. When you specify a tag key, the action removes both that key and its associated value. The operation succeeds even if you attempt to remove tags from a resource that were already removed. Note the following:</p>
    /// <ul>
    /// <li> <p>To remove tags from a resource, you need the necessary permissions for the service that the resource belongs to as well as permissions for removing tags. For more information, see the documentation for the service whose resource you want to untag.</p> </li>
    /// <li> <p>You can only tag resources that are located in the specified Amazon Web Services Region for the calling Amazon Web Services account.</p> </li>
    /// </ul>
    /// <p> <b>Minimum permissions</b> </p>
    /// <p>In addition to the <code>tag:UntagResources</code> permission required by this operation, you must also have the remove tags permission defined by the service that created the resource. For example, to remove the tags from an Amazon EC2 instance using the <code>UntagResources</code> operation, you must have both of the following permissions:</p>
    /// <ul>
    /// <li> <p> <code>tag:UntagResource</code> </p> </li>
    /// <li> <p> <code>ec2:DeleteTags</code> </p> </li>
    /// </ul>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResources {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resources_input::Builder,
    }
    impl UntagResources {
        /// Creates a new `UntagResources`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourcesOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourcesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `ResourceARNList`.
        ///
        /// To override the contents of this collection use [`set_resource_arn_list`](Self::set_resource_arn_list).
        ///
        /// <p>Specifies a list of ARNs of the resources that you want to remove tags from.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn resource_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn_list(input.into());
            self
        }
        /// <p>Specifies a list of ARNs of the resources that you want to remove tags from.</p>
        /// <p>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_resource_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_arn_list(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>Specifies a list of tag keys that you want to remove from the specified resources.</p>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>Specifies a list of tag keys that you want to remove from the specified resources.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
}

impl Client {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn<C, E>(conf: crate::Config, conn: C) -> Self
    where
        C: aws_smithy_client::bounds::SmithyConnector<Error = E> + Send + 'static,
        E: Into<aws_smithy_http::result::ConnectorError>,
    {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(aws_smithy_client::erase::DynConnector::new(conn))
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ));
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https().middleware(
            aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ),
        );
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
