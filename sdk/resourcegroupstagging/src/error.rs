// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeReportCreationError {
    pub kind: DescribeReportCreationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeReportCreationErrorKind {
    ConstraintViolationException(crate::error::ConstraintViolationException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeReportCreationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeReportCreationErrorKind::ConstraintViolationException(_inner) => _inner.fmt(f),
            DescribeReportCreationErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            DescribeReportCreationErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeReportCreationErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            DescribeReportCreationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeReportCreationError {
    fn code(&self) -> Option<&str> {
        DescribeReportCreationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeReportCreationError {
    pub fn new(kind: DescribeReportCreationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeReportCreationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeReportCreationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_constraint_violation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeReportCreationErrorKind::ConstraintViolationException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeReportCreationErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeReportCreationErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeReportCreationErrorKind::ThrottledException(_)
        )
    }
}
impl std::error::Error for DescribeReportCreationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeReportCreationErrorKind::ConstraintViolationException(_inner) => Some(_inner),
            DescribeReportCreationErrorKind::InternalServiceException(_inner) => Some(_inner),
            DescribeReportCreationErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeReportCreationErrorKind::ThrottledException(_inner) => Some(_inner),
            DescribeReportCreationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetComplianceSummaryError {
    pub kind: GetComplianceSummaryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetComplianceSummaryErrorKind {
    ConstraintViolationException(crate::error::ConstraintViolationException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetComplianceSummaryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetComplianceSummaryErrorKind::ConstraintViolationException(_inner) => _inner.fmt(f),
            GetComplianceSummaryErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetComplianceSummaryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetComplianceSummaryErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            GetComplianceSummaryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetComplianceSummaryError {
    fn code(&self) -> Option<&str> {
        GetComplianceSummaryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetComplianceSummaryError {
    pub fn new(kind: GetComplianceSummaryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetComplianceSummaryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetComplianceSummaryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_constraint_violation_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetComplianceSummaryErrorKind::ConstraintViolationException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetComplianceSummaryErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetComplianceSummaryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetComplianceSummaryErrorKind::ThrottledException(_)
        )
    }
}
impl std::error::Error for GetComplianceSummaryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetComplianceSummaryErrorKind::ConstraintViolationException(_inner) => Some(_inner),
            GetComplianceSummaryErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetComplianceSummaryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetComplianceSummaryErrorKind::ThrottledException(_inner) => Some(_inner),
            GetComplianceSummaryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetResourcesError {
    pub kind: GetResourcesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetResourcesErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    PaginationTokenExpiredException(crate::error::PaginationTokenExpiredException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetResourcesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetResourcesErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetResourcesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetResourcesErrorKind::PaginationTokenExpiredException(_inner) => _inner.fmt(f),
            GetResourcesErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            GetResourcesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetResourcesError {
    fn code(&self) -> Option<&str> {
        GetResourcesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetResourcesError {
    pub fn new(kind: GetResourcesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetResourcesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetResourcesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourcesErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourcesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_pagination_token_expired_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourcesErrorKind::PaginationTokenExpiredException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(&self.kind, GetResourcesErrorKind::ThrottledException(_))
    }
}
impl std::error::Error for GetResourcesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetResourcesErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetResourcesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetResourcesErrorKind::PaginationTokenExpiredException(_inner) => Some(_inner),
            GetResourcesErrorKind::ThrottledException(_inner) => Some(_inner),
            GetResourcesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetTagKeysError {
    pub kind: GetTagKeysErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetTagKeysErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    PaginationTokenExpiredException(crate::error::PaginationTokenExpiredException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetTagKeysError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetTagKeysErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetTagKeysErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetTagKeysErrorKind::PaginationTokenExpiredException(_inner) => _inner.fmt(f),
            GetTagKeysErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            GetTagKeysErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetTagKeysError {
    fn code(&self) -> Option<&str> {
        GetTagKeysError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetTagKeysError {
    pub fn new(kind: GetTagKeysErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetTagKeysErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetTagKeysErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(&self.kind, GetTagKeysErrorKind::InternalServiceException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetTagKeysErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_pagination_token_expired_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetTagKeysErrorKind::PaginationTokenExpiredException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(&self.kind, GetTagKeysErrorKind::ThrottledException(_))
    }
}
impl std::error::Error for GetTagKeysError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetTagKeysErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetTagKeysErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetTagKeysErrorKind::PaginationTokenExpiredException(_inner) => Some(_inner),
            GetTagKeysErrorKind::ThrottledException(_inner) => Some(_inner),
            GetTagKeysErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetTagValuesError {
    pub kind: GetTagValuesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetTagValuesErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    PaginationTokenExpiredException(crate::error::PaginationTokenExpiredException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetTagValuesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetTagValuesErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetTagValuesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetTagValuesErrorKind::PaginationTokenExpiredException(_inner) => _inner.fmt(f),
            GetTagValuesErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            GetTagValuesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetTagValuesError {
    fn code(&self) -> Option<&str> {
        GetTagValuesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetTagValuesError {
    pub fn new(kind: GetTagValuesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetTagValuesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetTagValuesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetTagValuesErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetTagValuesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_pagination_token_expired_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetTagValuesErrorKind::PaginationTokenExpiredException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(&self.kind, GetTagValuesErrorKind::ThrottledException(_))
    }
}
impl std::error::Error for GetTagValuesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetTagValuesErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetTagValuesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetTagValuesErrorKind::PaginationTokenExpiredException(_inner) => Some(_inner),
            GetTagValuesErrorKind::ThrottledException(_inner) => Some(_inner),
            GetTagValuesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartReportCreationError {
    pub kind: StartReportCreationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartReportCreationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    ConstraintViolationException(crate::error::ConstraintViolationException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartReportCreationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartReportCreationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            StartReportCreationErrorKind::ConstraintViolationException(_inner) => _inner.fmt(f),
            StartReportCreationErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            StartReportCreationErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            StartReportCreationErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            StartReportCreationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartReportCreationError {
    fn code(&self) -> Option<&str> {
        StartReportCreationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartReportCreationError {
    pub fn new(kind: StartReportCreationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartReportCreationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartReportCreationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartReportCreationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_constraint_violation_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartReportCreationErrorKind::ConstraintViolationException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartReportCreationErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartReportCreationErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartReportCreationErrorKind::ThrottledException(_)
        )
    }
}
impl std::error::Error for StartReportCreationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartReportCreationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            StartReportCreationErrorKind::ConstraintViolationException(_inner) => Some(_inner),
            StartReportCreationErrorKind::InternalServiceException(_inner) => Some(_inner),
            StartReportCreationErrorKind::InvalidParameterException(_inner) => Some(_inner),
            StartReportCreationErrorKind::ThrottledException(_inner) => Some(_inner),
            StartReportCreationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct TagResourcesError {
    pub kind: TagResourcesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum TagResourcesErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for TagResourcesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            TagResourcesErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            TagResourcesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            TagResourcesErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            TagResourcesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for TagResourcesError {
    fn code(&self) -> Option<&str> {
        TagResourcesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl TagResourcesError {
    pub fn new(kind: TagResourcesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: TagResourcesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: TagResourcesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourcesErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourcesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(&self.kind, TagResourcesErrorKind::ThrottledException(_))
    }
}
impl std::error::Error for TagResourcesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            TagResourcesErrorKind::InternalServiceException(_inner) => Some(_inner),
            TagResourcesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            TagResourcesErrorKind::ThrottledException(_inner) => Some(_inner),
            TagResourcesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UntagResourcesError {
    pub kind: UntagResourcesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UntagResourcesErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ThrottledException(crate::error::ThrottledException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UntagResourcesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UntagResourcesErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            UntagResourcesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UntagResourcesErrorKind::ThrottledException(_inner) => _inner.fmt(f),
            UntagResourcesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UntagResourcesError {
    fn code(&self) -> Option<&str> {
        UntagResourcesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UntagResourcesError {
    pub fn new(kind: UntagResourcesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UntagResourcesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UntagResourcesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourcesErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourcesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_throttled_exception(&self) -> bool {
        matches!(&self.kind, UntagResourcesErrorKind::ThrottledException(_))
    }
}
impl std::error::Error for UntagResourcesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UntagResourcesErrorKind::InternalServiceException(_inner) => Some(_inner),
            UntagResourcesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UntagResourcesErrorKind::ThrottledException(_inner) => Some(_inner),
            UntagResourcesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The request was denied to limit the frequency of submitted requests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ThrottledException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ThrottledException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ThrottledException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ThrottledException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ThrottledException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ThrottledException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ThrottledException {}
/// See [`ThrottledException`](crate::error::ThrottledException)
pub mod throttled_exception {
    /// A builder for [`ThrottledException`](crate::error::ThrottledException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ThrottledException`](crate::error::ThrottledException)
        pub fn build(self) -> crate::error::ThrottledException {
            crate::error::ThrottledException {
                message: self.message,
            }
        }
    }
}
impl ThrottledException {
    /// Creates a new builder-style object to manufacture [`ThrottledException`](crate::error::ThrottledException)
    pub fn builder() -> crate::error::throttled_exception::Builder {
        crate::error::throttled_exception::Builder::default()
    }
}

/// <p>This error indicates one of the following:</p>
/// <ul>
/// <li>
/// <p>A parameter is missing.</p>
/// </li>
/// <li>
/// <p>A malformed string was supplied for the request parameter.</p>
/// </li>
/// <li>
/// <p>An out-of-range value was supplied for the request parameter.</p>
/// </li>
/// <li>
/// <p>The target ID is invalid, unsupported, or doesn't exist.</p>
/// </li>
/// <li>
/// <p>You can't access the Amazon S3 bucket for report storage. For more information, see
/// <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html#bucket-policies-org-report">Additional Requirements for Organization-wide Tag Compliance
/// Reports</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidParameterException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidParameterException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidParameterException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidParameterException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidParameterException {}
/// See [`InvalidParameterException`](crate::error::InvalidParameterException)
pub mod invalid_parameter_exception {
    /// A builder for [`InvalidParameterException`](crate::error::InvalidParameterException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidParameterException`](crate::error::InvalidParameterException)
        pub fn build(self) -> crate::error::InvalidParameterException {
            crate::error::InvalidParameterException {
                message: self.message,
            }
        }
    }
}
impl InvalidParameterException {
    /// Creates a new builder-style object to manufacture [`InvalidParameterException`](crate::error::InvalidParameterException)
    pub fn builder() -> crate::error::invalid_parameter_exception::Builder {
        crate::error::invalid_parameter_exception::Builder::default()
    }
}

/// <p>The request processing failed because of an unknown error, exception, or failure. You
/// can retry the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServiceException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServiceException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServiceException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServiceException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalServiceException {}
/// See [`InternalServiceException`](crate::error::InternalServiceException)
pub mod internal_service_exception {
    /// A builder for [`InternalServiceException`](crate::error::InternalServiceException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalServiceException`](crate::error::InternalServiceException)
        pub fn build(self) -> crate::error::InternalServiceException {
            crate::error::InternalServiceException {
                message: self.message,
            }
        }
    }
}
impl InternalServiceException {
    /// Creates a new builder-style object to manufacture [`InternalServiceException`](crate::error::InternalServiceException)
    pub fn builder() -> crate::error::internal_service_exception::Builder {
        crate::error::internal_service_exception::Builder::default()
    }
}

/// <p>The request was denied because performing this operation violates a constraint. </p>
/// <p>Some of the reasons in the following list might not apply to this specific
/// operation.</p>
/// <ul>
/// <li>
/// <p>You must meet the prerequisites for using tag policies. For information, see
/// <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html">Prerequisites and Permissions for Using Tag Policies</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// <li>
/// <p>You must enable the tag policies service principal
/// (<code>tagpolicies.tag.amazonaws.com</code>) to integrate with AWS Organizations For
/// information, see <a href="http://docs.aws.amazon.com/organizations/latest/APIReference/API_EnableAWSServiceAccess.html">EnableAWSServiceAccess</a>.</p>
/// </li>
/// <li>
/// <p>You must have a tag policy attached to the organization root, an OU, or an
/// account.</p>
/// </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConstraintViolationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConstraintViolationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConstraintViolationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConstraintViolationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConstraintViolationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConstraintViolationException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConstraintViolationException {}
/// See [`ConstraintViolationException`](crate::error::ConstraintViolationException)
pub mod constraint_violation_exception {
    /// A builder for [`ConstraintViolationException`](crate::error::ConstraintViolationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConstraintViolationException`](crate::error::ConstraintViolationException)
        pub fn build(self) -> crate::error::ConstraintViolationException {
            crate::error::ConstraintViolationException {
                message: self.message,
            }
        }
    }
}
impl ConstraintViolationException {
    /// Creates a new builder-style object to manufacture [`ConstraintViolationException`](crate::error::ConstraintViolationException)
    pub fn builder() -> crate::error::constraint_violation_exception::Builder {
        crate::error::constraint_violation_exception::Builder::default()
    }
}

/// <p>The target of the operation is currently being modified by a different request. Try
/// again later.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConcurrentModificationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConcurrentModificationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConcurrentModificationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConcurrentModificationException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConcurrentModificationException {}
/// See [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
pub mod concurrent_modification_exception {
    /// A builder for [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
        pub fn build(self) -> crate::error::ConcurrentModificationException {
            crate::error::ConcurrentModificationException {
                message: self.message,
            }
        }
    }
}
impl ConcurrentModificationException {
    /// Creates a new builder-style object to manufacture [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    pub fn builder() -> crate::error::concurrent_modification_exception::Builder {
        crate::error::concurrent_modification_exception::Builder::default()
    }
}

/// <p>A <code>PaginationToken</code> is valid for a maximum of 15 minutes. Your request was
/// denied because the specified <code>PaginationToken</code> has expired.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PaginationTokenExpiredException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PaginationTokenExpiredException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PaginationTokenExpiredException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl PaginationTokenExpiredException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for PaginationTokenExpiredException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "PaginationTokenExpiredException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for PaginationTokenExpiredException {}
/// See [`PaginationTokenExpiredException`](crate::error::PaginationTokenExpiredException)
pub mod pagination_token_expired_exception {
    /// A builder for [`PaginationTokenExpiredException`](crate::error::PaginationTokenExpiredException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`PaginationTokenExpiredException`](crate::error::PaginationTokenExpiredException)
        pub fn build(self) -> crate::error::PaginationTokenExpiredException {
            crate::error::PaginationTokenExpiredException {
                message: self.message,
            }
        }
    }
}
impl PaginationTokenExpiredException {
    /// Creates a new builder-style object to manufacture [`PaginationTokenExpiredException`](crate::error::PaginationTokenExpiredException)
    pub fn builder() -> crate::error::pagination_token_expired_exception::Builder {
        crate::error::pagination_token_expired_exception::Builder::default()
    }
}
