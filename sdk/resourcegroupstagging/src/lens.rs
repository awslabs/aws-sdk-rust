// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_compliance_summary_output_pagination_token(
    input: &crate::output::GetComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.pagination_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_resources_output_pagination_token(
    input: &crate::output::GetResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.pagination_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_tag_keys_output_pagination_token(
    input: &crate::output::GetTagKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.pagination_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_tag_values_output_pagination_token(
    input: &crate::output::GetTagValuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.pagination_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_compliance_summary_output_summary_list(
    input: crate::output::GetComplianceSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Summary>> {
    let input = match input.summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_resources_output_resource_tag_mapping_list(
    input: crate::output::GetResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResourceTagMapping>> {
    let input = match input.resource_tag_mapping_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_tag_keys_output_tag_keys(
    input: crate::output::GetTagKeysOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.tag_keys {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_tag_values_output_tag_values(
    input: crate::output::GetTagValuesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.tag_values {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
