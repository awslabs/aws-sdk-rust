// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTagValuesOutput {
    /// <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    pub pagination_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    pub tag_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTagValuesOutput {
    /// <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    pub fn pagination_token(&self) -> ::std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
    /// <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_values.is_none()`.
    pub fn tag_values(&self) -> &[::std::string::String] {
        self.tag_values.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetTagValuesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTagValuesOutput {
    /// Creates a new builder-style object to manufacture [`GetTagValuesOutput`](crate::operation::get_tag_values::GetTagValuesOutput).
    pub fn builder() -> crate::operation::get_tag_values::builders::GetTagValuesOutputBuilder {
        crate::operation::get_tag_values::builders::GetTagValuesOutputBuilder::default()
    }
}

/// A builder for [`GetTagValuesOutput`](crate::operation::get_tag_values::GetTagValuesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTagValuesOutputBuilder {
    pub(crate) pagination_token: ::std::option::Option<::std::string::String>,
    pub(crate) tag_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTagValuesOutputBuilder {
    /// <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    pub fn pagination_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pagination_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    pub fn set_pagination_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// <p>A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the <code>PaginationToken</code> value in the request for the next page.</p>
    pub fn get_pagination_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.pagination_token
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    pub fn tag_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input.into());
        self.tag_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    pub fn set_tag_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tag_values = input;
        self
    }
    /// <p>A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.</p>
    pub fn get_tag_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tag_values
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTagValuesOutput`](crate::operation::get_tag_values::GetTagValuesOutput).
    pub fn build(self) -> crate::operation::get_tag_values::GetTagValuesOutput {
        crate::operation::get_tag_values::GetTagValuesOutput {
            pagination_token: self.pagination_token,
            tag_values: self.tag_values,
            _request_id: self._request_id,
        }
    }
}
