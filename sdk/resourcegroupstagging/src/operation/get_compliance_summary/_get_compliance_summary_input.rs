// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetComplianceSummaryInput {
    /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
    #[doc(hidden)]
    pub target_id_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
    #[doc(hidden)]
    pub region_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
    /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
    /// <ul>
    /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
    /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
    /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
    /// </ul>
    /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
    #[doc(hidden)]
    pub resource_type_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
    #[doc(hidden)]
    pub tag_key_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
    #[doc(hidden)]
    pub group_by: std::option::Option<std::vec::Vec<crate::types::GroupByAttribute>>,
    /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    #[doc(hidden)]
    pub pagination_token: std::option::Option<std::string::String>,
}
impl GetComplianceSummaryInput {
    /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
    pub fn target_id_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.target_id_filters.as_deref()
    }
    /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
    pub fn region_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.region_filters.as_deref()
    }
    /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
    /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
    /// <ul>
    /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
    /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
    /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
    /// </ul>
    /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
    pub fn resource_type_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_type_filters.as_deref()
    }
    /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
    pub fn tag_key_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_key_filters.as_deref()
    }
    /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
    pub fn group_by(&self) -> std::option::Option<&[crate::types::GroupByAttribute]> {
        self.group_by.as_deref()
    }
    /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    pub fn pagination_token(&self) -> std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
}
impl GetComplianceSummaryInput {
    /// Creates a new builder-style object to manufacture [`GetComplianceSummaryInput`](crate::operation::get_compliance_summary::GetComplianceSummaryInput).
    pub fn builder(
    ) -> crate::operation::get_compliance_summary::builders::GetComplianceSummaryInputBuilder {
        crate::operation::get_compliance_summary::builders::GetComplianceSummaryInputBuilder::default()
    }
}

/// A builder for [`GetComplianceSummaryInput`](crate::operation::get_compliance_summary::GetComplianceSummaryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetComplianceSummaryInputBuilder {
    pub(crate) target_id_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) region_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) resource_type_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tag_key_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) group_by: std::option::Option<std::vec::Vec<crate::types::GroupByAttribute>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) pagination_token: std::option::Option<std::string::String>,
}
impl GetComplianceSummaryInputBuilder {
    /// Appends an item to `target_id_filters`.
    ///
    /// To override the contents of this collection use [`set_target_id_filters`](Self::set_target_id_filters).
    ///
    /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
    pub fn target_id_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_id_filters.unwrap_or_default();
        v.push(input.into());
        self.target_id_filters = Some(v);
        self
    }
    /// <p>Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.</p>
    pub fn set_target_id_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_id_filters = input;
        self
    }
    /// Appends an item to `region_filters`.
    ///
    /// To override the contents of this collection use [`set_region_filters`](Self::set_region_filters).
    ///
    /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
    pub fn region_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.region_filters.unwrap_or_default();
        v.push(input.into());
        self.region_filters = Some(v);
        self
    }
    /// <p>Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.</p>
    pub fn set_region_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.region_filters = input;
        self
    }
    /// Appends an item to `resource_type_filters`.
    ///
    /// To override the contents of this collection use [`set_resource_type_filters`](Self::set_resource_type_filters).
    ///
    /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
    /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
    /// <ul>
    /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
    /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
    /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
    /// </ul>
    /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
    pub fn resource_type_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_type_filters.unwrap_or_default();
        v.push(input.into());
        self.resource_type_filters = Some(v);
        self
    }
    /// <p>Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is <code>service[:resourceType]</code>. For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.</p>
    /// <p>The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the <i> <a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon Web Services General Reference</a> </i> for the following:</p>
    /// <ul>
    /// <li> <p>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services Service Namespaces</a>.</p> </li>
    /// <li> <p>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example ARNs</a>.</p> </li>
    /// <li> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p> </li>
    /// </ul>
    /// <p>You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. </p>
    pub fn set_resource_type_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_type_filters = input;
        self
    }
    /// Appends an item to `tag_key_filters`.
    ///
    /// To override the contents of this collection use [`set_tag_key_filters`](Self::set_tag_key_filters).
    ///
    /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
    pub fn tag_key_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tag_key_filters.unwrap_or_default();
        v.push(input.into());
        self.tag_key_filters = Some(v);
        self
    }
    /// <p>Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.</p>
    pub fn set_tag_key_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tag_key_filters = input;
        self
    }
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
    pub fn group_by(mut self, input: crate::types::GroupByAttribute) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = Some(v);
        self
    }
    /// <p>Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.</p>
    pub fn set_group_by(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GroupByAttribute>>,
    ) -> Self {
        self.group_by = input;
        self
    }
    /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the <code>PaginationToken</code> response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.pagination_token = Some(input.into());
        self
    }
    /// <p>Specifies a <code>PaginationToken</code> response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.</p>
    pub fn set_pagination_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetComplianceSummaryInput`](crate::operation::get_compliance_summary::GetComplianceSummaryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_compliance_summary::GetComplianceSummaryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_compliance_summary::GetComplianceSummaryInput {
                target_id_filters: self.target_id_filters,
                region_filters: self.region_filters,
                resource_type_filters: self.resource_type_filters,
                tag_key_filters: self.tag_key_filters,
                group_by: self.group_by,
                max_results: self.max_results,
                pagination_token: self.pagination_token,
            },
        )
    }
}
