// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_report_creation::_start_report_creation_output::StartReportCreationOutputBuilder;

pub use crate::operation::start_report_creation::_start_report_creation_input::StartReportCreationInputBuilder;

/// Fluent builder constructing a request to `StartReportCreation`.
///
/// <p>Generates a report that lists all tagged resources in the accounts across your organization and tells whether each resource is compliant with the effective tag policy. Compliance data is refreshed daily. The report is generated asynchronously.</p>
/// <p>The generated report is saved to the following location:</p>
/// <p> <code>s3://example-bucket/AwsTagPolicies/o-exampleorgid/YYYY-MM-ddTHH:mm:ssZ/report.csv</code> </p>
/// <p>You can call this operation only from the organization's management account and from the us-east-1 Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartReportCreationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_report_creation::builders::StartReportCreationInputBuilder,
}
impl StartReportCreationFluentBuilder {
    /// Creates a new `StartReportCreation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_report_creation::StartReportCreation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_report_creation::StartReportCreationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_report_creation::StartReportCreationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_report_creation::StartReportCreationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Amazon S3 bucket where the report will be stored; for example:</p>
    /// <p> <code>awsexamplebucket</code> </p>
    /// <p>For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3_bucket(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where the report will be stored; for example:</p>
    /// <p> <code>awsexamplebucket</code> </p>
    /// <p>For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_s3_bucket(input);
        self
    }
}
