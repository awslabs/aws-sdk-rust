// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Describes the status of the <code>StartReportCreation</code> operation. </p>
/// <p>You can call this operation only from the organization's
/// management account and from the us-east-1 Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReportCreation {
    _private: (),
}
impl DescribeReportCreation {
    /// Creates a new builder-style object to manufacture [`DescribeReportCreationInput`](crate::input::DescribeReportCreationInput)
    pub fn builder() -> crate::input::describe_report_creation_input::Builder {
        crate::input::describe_report_creation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReportCreation {
    type Output = std::result::Result<
        crate::output::DescribeReportCreationOutput,
        crate::error::DescribeReportCreationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_report_creation_error(response)
        } else {
            crate::operation_deser::parse_describe_report_creation_response(response)
        }
    }
}

/// <p>Returns a table that shows counts of resources that are noncompliant with their tag
/// policies.</p>
/// <p>For more information on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag Policies</a> in
/// the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>You can call this operation only from the organization's
/// management account and from the us-east-1 Region.</p>
/// <p>This operation supports pagination, where the response can be sent in
/// multiple pages. You should check the <code>PaginationToken</code> response parameter to determine
/// if there are additional results available to return. Repeat the query, passing the
/// <code>PaginationToken</code> response parameter value as an input to the next request until you
/// recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that
/// there are no more results waiting to be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetComplianceSummary {
    _private: (),
}
impl GetComplianceSummary {
    /// Creates a new builder-style object to manufacture [`GetComplianceSummaryInput`](crate::input::GetComplianceSummaryInput)
    pub fn builder() -> crate::input::get_compliance_summary_input::Builder {
        crate::input::get_compliance_summary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetComplianceSummary {
    type Output = std::result::Result<
        crate::output::GetComplianceSummaryOutput,
        crate::error::GetComplianceSummaryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_compliance_summary_error(response)
        } else {
            crate::operation_deser::parse_get_compliance_summary_response(response)
        }
    }
}

/// <p>Returns all the tagged or previously tagged resources that are located in the
/// specified Region for the AWS account.</p>
/// <p>Depending on what information you want returned, you can also specify the
/// following:</p>
/// <ul>
/// <li>
/// <p>
/// <i>Filters</i> that specify what tags and resource types you
/// want returned. The response includes all tags that are associated with the
/// requested resources.</p>
/// </li>
/// <li>
/// <p>Information about compliance with the account's effective tag policy. For more
/// information on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag
/// Policies</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// </ul>
/// <p>This operation supports pagination, where the response can be sent in
/// multiple pages. You should check the <code>PaginationToken</code> response parameter to determine
/// if there are additional results available to return. Repeat the query, passing the
/// <code>PaginationToken</code> response parameter value as an input to the next request until you
/// recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that
/// there are no more results waiting to be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResources {
    _private: (),
}
impl GetResources {
    /// Creates a new builder-style object to manufacture [`GetResourcesInput`](crate::input::GetResourcesInput)
    pub fn builder() -> crate::input::get_resources_input::Builder {
        crate::input::get_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResources {
    type Output =
        std::result::Result<crate::output::GetResourcesOutput, crate::error::GetResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resources_error(response)
        } else {
            crate::operation_deser::parse_get_resources_response(response)
        }
    }
}

/// <p>Returns all tag keys currently in use in the specified Region for the calling AWS
/// account.</p>
/// <p>This operation supports pagination, where the response can be sent in
/// multiple pages. You should check the <code>PaginationToken</code> response parameter to determine
/// if there are additional results available to return. Repeat the query, passing the
/// <code>PaginationToken</code> response parameter value as an input to the next request until you
/// recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that
/// there are no more results waiting to be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTagKeys {
    _private: (),
}
impl GetTagKeys {
    /// Creates a new builder-style object to manufacture [`GetTagKeysInput`](crate::input::GetTagKeysInput)
    pub fn builder() -> crate::input::get_tag_keys_input::Builder {
        crate::input::get_tag_keys_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTagKeys {
    type Output =
        std::result::Result<crate::output::GetTagKeysOutput, crate::error::GetTagKeysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_tag_keys_error(response)
        } else {
            crate::operation_deser::parse_get_tag_keys_response(response)
        }
    }
}

/// <p>Returns all tag values for the specified key that are used in the specified AWS
/// Region for the calling AWS account.</p>
/// <p>This operation supports pagination, where the response can be sent in
/// multiple pages. You should check the <code>PaginationToken</code> response parameter to determine
/// if there are additional results available to return. Repeat the query, passing the
/// <code>PaginationToken</code> response parameter value as an input to the next request until you
/// recieve a <code>null</code> value. A null value for <code>PaginationToken</code> indicates that
/// there are no more results waiting to be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTagValues {
    _private: (),
}
impl GetTagValues {
    /// Creates a new builder-style object to manufacture [`GetTagValuesInput`](crate::input::GetTagValuesInput)
    pub fn builder() -> crate::input::get_tag_values_input::Builder {
        crate::input::get_tag_values_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTagValues {
    type Output =
        std::result::Result<crate::output::GetTagValuesOutput, crate::error::GetTagValuesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_tag_values_error(response)
        } else {
            crate::operation_deser::parse_get_tag_values_response(response)
        }
    }
}

/// <p>Generates a report that lists all tagged resources in the accounts across your
/// organization and tells whether each resource is compliant with the effective tag policy.
/// Compliance data is refreshed daily. The report is generated asynchronously.</p>
/// <p>The generated report is saved to the following location:</p>
/// <p>
/// <code>s3://example-bucket/AwsTagPolicies/o-exampleorgid/YYYY-MM-ddTHH:mm:ssZ/report.csv</code>
/// </p>
/// <p>You can call this operation only from the organization's
/// management account and from the us-east-1 Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartReportCreation {
    _private: (),
}
impl StartReportCreation {
    /// Creates a new builder-style object to manufacture [`StartReportCreationInput`](crate::input::StartReportCreationInput)
    pub fn builder() -> crate::input::start_report_creation_input::Builder {
        crate::input::start_report_creation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartReportCreation {
    type Output = std::result::Result<
        crate::output::StartReportCreationOutput,
        crate::error::StartReportCreationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_report_creation_error(response)
        } else {
            crate::operation_deser::parse_start_report_creation_response(response)
        }
    }
}

/// <p>Applies one or more tags to the specified resources. Note the following:</p>
/// <ul>
/// <li>
/// <p>Not all resources can have tags. For a list of services with resources that
/// support tagging using this operation, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the
/// Resource Groups Tagging API</a>.</p>
/// </li>
/// <li>
/// <p>Each resource can have up to 50 tags. For other limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag Naming and Usage Conventions</a> in the <i>AWS General
/// Reference.</i>
/// </p>
/// </li>
/// <li>
/// <p>You can only tag resources that are located in the specified AWS Region for
/// the AWS account.</p>
/// </li>
/// <li>
/// <p>To add tags to a resource, you need the necessary permissions for the service
/// that the resource belongs to as well as permissions for adding tags. For more
/// information, see the documentation for each service.</p>
/// </li>
/// </ul>
/// <important>
/// <p>Do not store personally identifiable information (PII) or other confidential or
/// sensitive information in tags. We use tags to provide you with billing and
/// administration services. Tags are not intended to be used for private or sensitive
/// data.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResources {
    _private: (),
}
impl TagResources {
    /// Creates a new builder-style object to manufacture [`TagResourcesInput`](crate::input::TagResourcesInput)
    pub fn builder() -> crate::input::tag_resources_input::Builder {
        crate::input::tag_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResources {
    type Output =
        std::result::Result<crate::output::TagResourcesOutput, crate::error::TagResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resources_error(response)
        } else {
            crate::operation_deser::parse_tag_resources_response(response)
        }
    }
}

/// <p>Removes the specified tags from the specified resources. When you specify a tag key,
/// the action removes both that key and its associated value. The operation succeeds even
/// if you attempt to remove tags from a resource that were already removed. Note the
/// following:</p>
/// <ul>
/// <li>
/// <p>To remove tags from a resource, you need the necessary permissions for the
/// service that the resource belongs to as well as permissions for removing tags.
/// For more information, see the documentation for the service whose resource you
/// want to untag.</p>
/// </li>
/// <li>
/// <p>You can only tag resources that are located in the specified AWS Region for
/// the calling AWS account.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResources {
    _private: (),
}
impl UntagResources {
    /// Creates a new builder-style object to manufacture [`UntagResourcesInput`](crate::input::UntagResourcesInput)
    pub fn builder() -> crate::input::untag_resources_input::Builder {
        crate::input::untag_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResources {
    type Output =
        std::result::Result<crate::output::UntagResourcesOutput, crate::error::UntagResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resources_error(response)
        } else {
            crate::operation_deser::parse_untag_resources_response(response)
        }
    }
}
