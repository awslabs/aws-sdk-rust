// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `CreateConnectorProfile`.
///
/// <p> Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnectorProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_connector_profile_input::Builder,
}
impl CreateConnectorProfile {
    /// Creates a new `CreateConnectorProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateConnectorProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateConnectorProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateConnectorProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateConnectorProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_name(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_name(input);
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn kms_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_arn(input.into());
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn set_kms_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_arn(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_type(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorType>,
    ) -> Self {
        self.inner = self.inner.set_connector_type(input);
        self
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p> Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. </p>
    pub fn connection_mode(mut self, input: crate::model::ConnectionMode) -> Self {
        self.inner = self.inner.connection_mode(input);
        self
    }
    /// <p> Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. </p>
    pub fn set_connection_mode(
        mut self,
        input: std::option::Option<crate::model::ConnectionMode>,
    ) -> Self {
        self.inner = self.inner.set_connection_mode(input);
        self
    }
    /// <p> Defines the connector-specific configuration and credentials. </p>
    pub fn connector_profile_config(mut self, input: crate::model::ConnectorProfileConfig) -> Self {
        self.inner = self.inner.connector_profile_config(input);
        self
    }
    /// <p> Defines the connector-specific configuration and credentials. </p>
    pub fn set_connector_profile_config(
        mut self,
        input: std::option::Option<crate::model::ConnectorProfileConfig>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateFlow`.
///
/// <p> Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_flow_input::Builder,
}
impl CreateFlow {
    /// Creates a new `CreateFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
    /// <p> A description of the flow you want to create. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> A description of the flow you want to create. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn kms_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_arn(input.into());
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn set_kms_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_arn(input);
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn trigger_config(mut self, input: crate::model::TriggerConfig) -> Self {
        self.inner = self.inner.trigger_config(input);
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn set_trigger_config(
        mut self,
        input: std::option::Option<crate::model::TriggerConfig>,
    ) -> Self {
        self.inner = self.inner.set_trigger_config(input);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn source_flow_config(mut self, input: crate::model::SourceFlowConfig) -> Self {
        self.inner = self.inner.source_flow_config(input);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn set_source_flow_config(
        mut self,
        input: std::option::Option<crate::model::SourceFlowConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_flow_config(input);
        self
    }
    /// Appends an item to `destinationFlowConfigList`.
    ///
    /// To override the contents of this collection use [`set_destination_flow_config_list`](Self::set_destination_flow_config_list).
    ///
    /// <p> The configuration that controls how Amazon AppFlow places data in the destination connector. </p>
    pub fn destination_flow_config_list(
        mut self,
        input: crate::model::DestinationFlowConfig,
    ) -> Self {
        self.inner = self.inner.destination_flow_config_list(input);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow places data in the destination connector. </p>
    pub fn set_destination_flow_config_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DestinationFlowConfig>>,
    ) -> Self {
        self.inner = self.inner.set_destination_flow_config_list(input);
        self
    }
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn tasks(mut self, input: crate::model::Task) -> Self {
        self.inner = self.inner.tasks(input);
        self
    }
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn set_tasks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Task>>,
    ) -> Self {
        self.inner = self.inner.set_tasks(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn metadata_catalog_config(mut self, input: crate::model::MetadataCatalogConfig) -> Self {
        self.inner = self.inner.metadata_catalog_config(input);
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn set_metadata_catalog_config(
        mut self,
        input: std::option::Option<crate::model::MetadataCatalogConfig>,
    ) -> Self {
        self.inner = self.inner.set_metadata_catalog_config(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteConnectorProfile`.
///
/// <p> Enables you to delete an existing connector profile. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnectorProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_connector_profile_input::Builder,
}
impl DeleteConnectorProfile {
    /// Creates a new `DeleteConnectorProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteConnectorProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteConnectorProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteConnectorProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteConnectorProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_name(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_name(input);
        self
    }
    /// <p> Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. </p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.inner = self.inner.force_delete(input);
        self
    }
    /// <p> Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. </p>
    pub fn set_force_delete(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_delete(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteFlow`.
///
/// <p> Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_flow_input::Builder,
}
impl DeleteFlow {
    /// Creates a new `DeleteFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
    /// <p> Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. </p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.inner = self.inner.force_delete(input);
        self
    }
    /// <p> Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. </p>
    pub fn set_force_delete(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_delete(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeConnector`.
///
/// <p>Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_connector_input::Builder,
}
impl DescribeConnector {
    /// Creates a new `DescribeConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.</p>
    pub fn connector_type(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_type(input);
        self
    }
    /// <p>The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.</p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorType>,
    ) -> Self {
        self.inner = self.inner.set_connector_type(input);
        self
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeConnectorEntity`.
///
/// <p> Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectorEntity {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_connector_entity_input::Builder,
}
impl DescribeConnectorEntity {
    /// Creates a new `DescribeConnectorEntity`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeConnectorEntity,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorEntityError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeConnectorEntityOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorEntityError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The entity name for that connector. </p>
    pub fn connector_entity_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_entity_name(input.into());
        self
    }
    /// <p> The entity name for that connector. </p>
    pub fn set_connector_entity_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_entity_name(input);
        self
    }
    /// <p> The type of connector application, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_type(input);
        self
    }
    /// <p> The type of connector application, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorType>,
    ) -> Self {
        self.inner = self.inner.set_connector_type(input);
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_name(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_name(input);
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn api_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.api_version(input.into());
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn set_api_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_api_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeConnectorProfiles`.
///
/// <p> Returns a list of <code>connector-profile</code> details matching the provided <code>connector-profile</code> names and <code>connector-types</code>. Both input lists are optional, and you can use them to filter the result. </p>
/// <p>If no names or <code>connector-types</code> are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectorProfiles {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_connector_profiles_input::Builder,
}
impl DescribeConnectorProfiles {
    /// Creates a new `DescribeConnectorProfiles`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeConnectorProfiles,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorProfilesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeConnectorProfilesOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorProfilesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeConnectorProfilesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeConnectorProfilesPaginator {
        crate::paginator::DescribeConnectorProfilesPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `connectorProfileNames`.
    ///
    /// To override the contents of this collection use [`set_connector_profile_names`](Self::set_connector_profile_names).
    ///
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn connector_profile_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_names(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn set_connector_profile_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_names(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_type(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorType>,
    ) -> Self {
        self.inner = self.inner.set_connector_type(input);
        self
    }
    /// <p>The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeConnectors`.
///
/// <p> Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a <code>nextToken</code> object, which can be be passed in to the next call to the <code>DescribeConnectors</code> API operation to retrieve the next page. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_connectors_input::Builder,
}
impl DescribeConnectors {
    /// Creates a new `DescribeConnectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeConnectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeConnectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeConnectorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeConnectorsPaginator {
        crate::paginator::DescribeConnectorsPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `connectorTypes`.
    ///
    /// To override the contents of this collection use [`set_connector_types`](Self::set_connector_types).
    ///
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_types(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_types(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ConnectorType>>,
    ) -> Self {
        self.inner = self.inner.set_connector_types(input);
        self
    }
    /// <p>The maximum number of items that should be returned in the result set. The default is 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items that should be returned in the result set. The default is 20.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFlow`.
///
/// <p> Provides a description of the specified flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_flow_input::Builder,
}
impl DescribeFlow {
    /// Creates a new `DescribeFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFlowExecutionRecords`.
///
/// <p> Fetches the execution history of the flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlowExecutionRecords {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_flow_execution_records_input::Builder,
}
impl DescribeFlowExecutionRecords {
    /// Creates a new `DescribeFlowExecutionRecords`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFlowExecutionRecords,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowExecutionRecordsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFlowExecutionRecordsOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowExecutionRecordsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeFlowExecutionRecordsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeFlowExecutionRecordsPaginator {
        crate::paginator::DescribeFlowExecutionRecordsPaginator::new(self.handle, self.inner)
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token for the next page of data. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListConnectorEntities`.
///
/// <p> Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for <i>Account</i> and <i>Opportunity</i> entities, or query ServiceNow for the <i>Incident</i> entity. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListConnectorEntities {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_connector_entities_input::Builder,
}
impl ListConnectorEntities {
    /// Creates a new `ListConnectorEntities`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListConnectorEntities,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorEntitiesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListConnectorEntitiesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorEntitiesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_name(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_name(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(mut self, input: crate::model::ConnectorType) -> Self {
        self.inner = self.inner.connector_type(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorType>,
    ) -> Self {
        self.inner = self.inner.set_connector_type(input);
        self
    }
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    pub fn entities_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entities_path(input.into());
        self
    }
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    pub fn set_entities_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_entities_path(input);
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn api_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.api_version(input.into());
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn set_api_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_api_version(input);
        self
    }
    /// <p>The maximum number of items that the operation returns in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items that the operation returns in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListConnectors`.
///
/// <p>Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListConnectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_connectors_input::Builder,
}
impl ListConnectors {
    /// Creates a new `ListConnectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListConnectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListConnectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListConnectorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListConnectorsPaginator {
        crate::paginator::ListConnectorsPaginator::new(self.handle, self.inner)
    }
    /// <p>Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token for the next page of data.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token for the next page of data.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFlows`.
///
/// <p> Lists all of the flows associated with your account. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFlows {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_flows_input::Builder,
}
impl ListFlows {
    /// Creates a new `ListFlows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFlows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFlowsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFlowsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFlowsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFlowsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFlowsPaginator {
        crate::paginator::ListFlowsPaginator::new(self.handle, self.inner)
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> Specifies the maximum number of items that should be returned in the result set. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token for next page of data. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token for next page of data. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p> Retrieves the tags that are associated with a specified flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the specified flow. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the specified flow. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RegisterConnector`.
///
/// <p>Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::register_connector_input::Builder,
}
impl RegisterConnector {
    /// Creates a new `RegisterConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RegisterConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RegisterConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RegisterConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::RegisterConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p>A description about the connector that's being registered.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description about the connector that's being registered.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    pub fn connector_provisioning_type(
        mut self,
        input: crate::model::ConnectorProvisioningType,
    ) -> Self {
        self.inner = self.inner.connector_provisioning_type(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    pub fn set_connector_provisioning_type(
        mut self,
        input: std::option::Option<crate::model::ConnectorProvisioningType>,
    ) -> Self {
        self.inner = self.inner.set_connector_provisioning_type(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    pub fn connector_provisioning_config(
        mut self,
        input: crate::model::ConnectorProvisioningConfig,
    ) -> Self {
        self.inner = self.inner.connector_provisioning_config(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    pub fn set_connector_provisioning_config(
        mut self,
        input: std::option::Option<crate::model::ConnectorProvisioningConfig>,
    ) -> Self {
        self.inner = self.inner.set_connector_provisioning_config(input);
        self
    }
}

/// Fluent builder constructing a request to `StartFlow`.
///
/// <p> Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_flow_input::Builder,
}
impl StartFlow {
    /// Creates a new `StartFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::StartFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
}

/// Fluent builder constructing a request to `StopFlow`.
///
/// <p> Deactivates the existing flow. For on-demand flows, this operation returns an <code>unsupportedOperationException</code> error message. For schedule and event-triggered flows, this operation deactivates the flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_flow_input::Builder,
}
impl StopFlow {
    /// Creates a new `StopFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::StopFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p> Applies a tag to the specified flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the flow that you want to tag. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the flow that you want to tag. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UnregisterConnector`.
///
/// <p>Unregisters the custom connector registered in your account that matches the connector label provided in the request.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UnregisterConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::unregister_connector_input::Builder,
}
impl UnregisterConnector {
    /// Creates a new `UnregisterConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UnregisterConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UnregisterConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UnregisterConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::UnregisterConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p>Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.</p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.inner = self.inner.force_delete(input);
        self
    }
    /// <p>Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.</p>
    pub fn set_force_delete(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_delete(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p> Removes a tag from the specified flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the flow that you want to untag. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the flow that you want to untag. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `tagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p> The tag keys associated with the tag that you want to remove from your flow. </p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p> The tag keys associated with the tag that you want to remove from your flow. </p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConnectorProfile`.
///
/// <p> Updates a given connector profile associated with your account. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectorProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_connector_profile_input::Builder,
}
impl UpdateConnectorProfile {
    /// Creates a new `UpdateConnectorProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConnectorProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConnectorProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_profile_name(input.into());
        self
    }
    /// <p> The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_name(input);
        self
    }
    /// <p> Indicates the connection mode and if it is public or private. </p>
    pub fn connection_mode(mut self, input: crate::model::ConnectionMode) -> Self {
        self.inner = self.inner.connection_mode(input);
        self
    }
    /// <p> Indicates the connection mode and if it is public or private. </p>
    pub fn set_connection_mode(
        mut self,
        input: std::option::Option<crate::model::ConnectionMode>,
    ) -> Self {
        self.inner = self.inner.set_connection_mode(input);
        self
    }
    /// <p> Defines the connector-specific profile configuration and credentials. </p>
    pub fn connector_profile_config(mut self, input: crate::model::ConnectorProfileConfig) -> Self {
        self.inner = self.inner.connector_profile_config(input);
        self
    }
    /// <p> Defines the connector-specific profile configuration and credentials. </p>
    pub fn set_connector_profile_config(
        mut self,
        input: std::option::Option<crate::model::ConnectorProfileConfig>,
    ) -> Self {
        self.inner = self.inner.set_connector_profile_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConnectorRegistration`.
///
/// <p>Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:</p>
/// <ul>
/// <li> <p>The latest version of the AWS Lambda function that's assigned to the connector</p> </li>
/// <li> <p>A new AWS Lambda function that you specify</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectorRegistration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_connector_registration_input::Builder,
}
impl UpdateConnectorRegistration {
    /// Creates a new `UpdateConnectorRegistration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConnectorRegistration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorRegistrationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConnectorRegistrationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorRegistrationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn connector_provisioning_config(
        mut self,
        input: crate::model::ConnectorProvisioningConfig,
    ) -> Self {
        self.inner = self.inner.connector_provisioning_config(input);
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn set_connector_provisioning_config(
        mut self,
        input: std::option::Option<crate::model::ConnectorProvisioningConfig>,
    ) -> Self {
        self.inner = self.inner.set_connector_provisioning_config(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlow`.
///
/// <p> Updates an existing flow. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_input::Builder,
}
impl UpdateFlow {
    /// Creates a new `UpdateFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
    /// <p> A description of the flow. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> A description of the flow. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn trigger_config(mut self, input: crate::model::TriggerConfig) -> Self {
        self.inner = self.inner.trigger_config(input);
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn set_trigger_config(
        mut self,
        input: std::option::Option<crate::model::TriggerConfig>,
    ) -> Self {
        self.inner = self.inner.set_trigger_config(input);
        self
    }
    /// <p> Contains information about the configuration of the source connector used in the flow. </p>
    pub fn source_flow_config(mut self, input: crate::model::SourceFlowConfig) -> Self {
        self.inner = self.inner.source_flow_config(input);
        self
    }
    /// <p> Contains information about the configuration of the source connector used in the flow. </p>
    pub fn set_source_flow_config(
        mut self,
        input: std::option::Option<crate::model::SourceFlowConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_flow_config(input);
        self
    }
    /// Appends an item to `destinationFlowConfigList`.
    ///
    /// To override the contents of this collection use [`set_destination_flow_config_list`](Self::set_destination_flow_config_list).
    ///
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub fn destination_flow_config_list(
        mut self,
        input: crate::model::DestinationFlowConfig,
    ) -> Self {
        self.inner = self.inner.destination_flow_config_list(input);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub fn set_destination_flow_config_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DestinationFlowConfig>>,
    ) -> Self {
        self.inner = self.inner.set_destination_flow_config_list(input);
        self
    }
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn tasks(mut self, input: crate::model::Task) -> Self {
        self.inner = self.inner.tasks(input);
        self
    }
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn set_tasks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Task>>,
    ) -> Self {
        self.inner = self.inner.set_tasks(input);
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn metadata_catalog_config(mut self, input: crate::model::MetadataCatalogConfig) -> Self {
        self.inner = self.inner.metadata_catalog_config(input);
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn set_metadata_catalog_config(
        mut self,
        input: std::option::Option<crate::model::MetadataCatalogConfig>,
    ) -> Self {
        self.inner = self.inner.set_metadata_catalog_config(input);
        self
    }
}
