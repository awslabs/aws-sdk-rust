// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CancelFlowExecutions`](crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder::flow_name) / [`set_flow_name(Option<String>)`](crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder::set_flow_name):<br>required: **true**<br><p>The name of a flow with active runs that you want to cancel.</p><br>
    ///   - [`execution_ids(impl Into<String>)`](crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder::execution_ids) / [`set_execution_ids(Option<Vec::<String>>)`](crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder::set_execution_ids):<br>required: **false**<br><p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p>  <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p><br>
    /// - On success, responds with [`CancelFlowExecutionsOutput`](crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput) with field(s):
    ///   - [`invalid_executions(Option<Vec::<String>>)`](crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput::invalid_executions): <p>The IDs of runs that Amazon AppFlow couldn't cancel. These runs might be ineligible for canceling because they haven't started yet or have already completed.</p>
    /// - On failure, responds with [`SdkError<CancelFlowExecutionsError>`](crate::operation::cancel_flow_executions::CancelFlowExecutionsError)
    pub fn cancel_flow_executions(&self) -> crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder {
        crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsFluentBuilder::new(self.handle.clone())
    }
}
