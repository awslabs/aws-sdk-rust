// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_connector_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectorProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.connection_mode {
        object.key("connectionMode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.connector_label {
        object.key("connectorLabel").string(var_2.as_str());
    }
    if let Some(var_3) = &input.connector_profile_config {
        let mut object_4 = object.key("connectorProfileConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_profile_config(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.connector_type {
        object.key("connectorType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.kms_arn {
        object.key("kmsArn").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.destination_flow_config_list {
        let mut array_10 = object.key("destinationFlowConfigList").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_destination_flow_config(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.flow_name {
        object.key("flowName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.kms_arn {
        object.key("kmsArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source_flow_config {
        let mut object_16 = object.key("sourceFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_flow_config(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.tags {
        let mut object_18 = object.key("tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.tasks {
        let mut array_22 = object.key("tasks").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.trigger_config {
        let mut object_26 = object.key("triggerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connector_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectorProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_27.as_str());
    }
    if input.force_delete {
        object.key("forceDelete").boolean(input.force_delete);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.flow_name {
        object.key("flowName").string(var_28.as_str());
    }
    if input.force_delete {
        object.key("forceDelete").boolean(input.force_delete);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.connector_label {
        object.key("connectorLabel").string(var_29.as_str());
    }
    if let Some(var_30) = &input.connector_type {
        object.key("connectorType").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connector_entity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectorEntityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.api_version {
        object.key("apiVersion").string(var_31.as_str());
    }
    if let Some(var_32) = &input.connector_entity_name {
        object.key("connectorEntityName").string(var_32.as_str());
    }
    if let Some(var_33) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.connector_type {
        object.key("connectorType").string(var_34.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connector_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectorProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.connector_label {
        object.key("connectorLabel").string(var_35.as_str());
    }
    if let Some(var_36) = &input.connector_profile_names {
        let mut array_37 = object.key("connectorProfileNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.connector_type {
        object.key("connectorType").string(var_39.as_str());
    }
    if let Some(var_40) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("nextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.connector_types {
        let mut array_43 = object.key("connectorTypes").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    if let Some(var_46) = &input.next_token {
        object.key("nextToken").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.flow_name {
        object.key("flowName").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_execution_records_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowExecutionRecordsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.flow_name {
        object.key("flowName").string(var_48.as_str());
    }
    if let Some(var_49) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.next_token {
        object.key("nextToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_connector_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConnectorEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.api_version {
        object.key("apiVersion").string(var_51.as_str());
    }
    if let Some(var_52) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.connector_type {
        object.key("connectorType").string(var_53.as_str());
    }
    if let Some(var_54) = &input.entities_path {
        object.key("entitiesPath").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_connectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConnectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_55).into()),
        );
    }
    if let Some(var_56) = &input.next_token {
        object.key("nextToken").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_flows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_57).into()),
        );
    }
    if let Some(var_58) = &input.next_token {
        object.key("nextToken").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.connector_label {
        object.key("connectorLabel").string(var_59.as_str());
    }
    if let Some(var_60) = &input.connector_provisioning_config {
        let mut object_61 = object.key("connectorProvisioningConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_provisioning_config(
            &mut object_61,
            var_60,
        )?;
        object_61.finish();
    }
    if let Some(var_62) = &input.connector_provisioning_type {
        object
            .key("connectorProvisioningType")
            .string(var_62.as_str());
    }
    if let Some(var_63) = &input.description {
        object.key("description").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.flow_name {
        object.key("flowName").string(var_64.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.flow_name {
        object.key("flowName").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.tags {
        let mut object_67 = object.key("tags").start_object();
        for (key_68, value_69) in var_66 {
            {
                object_67.key(key_68).string(value_69.as_str());
            }
        }
        object_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unregister_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnregisterConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.connector_label {
        object.key("connectorLabel").string(var_70.as_str());
    }
    if input.force_delete {
        object.key("forceDelete").boolean(input.force_delete);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connector_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectorProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.connection_mode {
        object.key("connectionMode").string(var_71.as_str());
    }
    if let Some(var_72) = &input.connector_profile_config {
        let mut object_73 = object.key("connectorProfileConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_profile_config(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.description {
        object.key("description").string(var_75.as_str());
    }
    if let Some(var_76) = &input.destination_flow_config_list {
        let mut array_77 = object.key("destinationFlowConfigList").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_destination_flow_config(
                    &mut object_79,
                    item_78,
                )?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.flow_name {
        object.key("flowName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.source_flow_config {
        let mut object_82 = object.key("sourceFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_flow_config(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.tasks {
        let mut array_84 = object.key("tasks").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task(&mut object_86, item_85)?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.trigger_config {
        let mut object_88 = object.key("triggerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_config(&mut object_88, var_87)?;
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_profile_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorProfileConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.connector_profile_properties {
        let mut object_90 = object.key("connectorProfileProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_profile_properties(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.connector_profile_credentials {
        let mut object_92 = object.key("connectorProfileCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_profile_credentials(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.connector_type {
        object.key("connectorType").string(var_93.as_str());
    }
    if let Some(var_94) = &input.api_version {
        object.key("apiVersion").string(var_94.as_str());
    }
    if let Some(var_95) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_95.as_str());
    }
    if let Some(var_96) = &input.destination_connector_properties {
        let mut object_97 = object.key("destinationConnectorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_connector_properties(
            &mut object_97,
            var_96,
        )?;
        object_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.connector_type {
        object.key("connectorType").string(var_98.as_str());
    }
    if let Some(var_99) = &input.api_version {
        object.key("apiVersion").string(var_99.as_str());
    }
    if let Some(var_100) = &input.connector_profile_name {
        object.key("connectorProfileName").string(var_100.as_str());
    }
    if let Some(var_101) = &input.source_connector_properties {
        let mut object_102 = object.key("sourceConnectorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connector_properties(
            &mut object_102,
            var_101,
        )?;
        object_102.finish();
    }
    if let Some(var_103) = &input.incremental_pull_config {
        let mut object_104 = object.key("incrementalPullConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_incremental_pull_config(
            &mut object_104,
            var_103,
        )?;
        object_104.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Task,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.source_fields {
        let mut array_106 = object.key("sourceFields").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.connector_operator {
        let mut object_109 = object.key("connectorOperator").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_operator(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.destination_field {
        object.key("destinationField").string(var_110.as_str());
    }
    if let Some(var_111) = &input.task_type {
        object.key("taskType").string(var_111.as_str());
    }
    if let Some(var_112) = &input.task_properties {
        let mut object_113 = object.key("taskProperties").start_object();
        for (key_114, value_115) in var_112 {
            {
                object_113.key(key_114.as_str()).string(value_115.as_str());
            }
        }
        object_113.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.trigger_type {
        object.key("triggerType").string(var_116.as_str());
    }
    if let Some(var_117) = &input.trigger_properties {
        let mut object_118 = object.key("triggerProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_properties(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_provisioning_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorProvisioningConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.lambda {
        let mut object_120 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_connector_provisioning_config(
            &mut object_120,
            var_119,
        )?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.amplitude {
        let mut object_122 = object.key("Amplitude").start_object();
        crate::json_ser::serialize_structure_crate_model_amplitude_connector_profile_properties(
            &mut object_122,
            var_121,
        )?;
        object_122.finish();
    }
    if let Some(var_123) = &input.datadog {
        let mut object_124 = object.key("Datadog").start_object();
        crate::json_ser::serialize_structure_crate_model_datadog_connector_profile_properties(
            &mut object_124,
            var_123,
        )?;
        object_124.finish();
    }
    if let Some(var_125) = &input.dynatrace {
        let mut object_126 = object.key("Dynatrace").start_object();
        crate::json_ser::serialize_structure_crate_model_dynatrace_connector_profile_properties(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    if let Some(var_127) = &input.google_analytics {
        let mut object_128 = object.key("GoogleAnalytics").start_object();
        crate::json_ser::serialize_structure_crate_model_google_analytics_connector_profile_properties(&mut object_128, var_127)?;
        object_128.finish();
    }
    if let Some(var_129) = &input.honeycode {
        let mut object_130 = object.key("Honeycode").start_object();
        crate::json_ser::serialize_structure_crate_model_honeycode_connector_profile_properties(
            &mut object_130,
            var_129,
        )?;
        object_130.finish();
    }
    if let Some(var_131) = &input.infor_nexus {
        let mut object_132 = object.key("InforNexus").start_object();
        crate::json_ser::serialize_structure_crate_model_infor_nexus_connector_profile_properties(
            &mut object_132,
            var_131,
        )?;
        object_132.finish();
    }
    if let Some(var_133) = &input.marketo {
        let mut object_134 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_connector_profile_properties(
            &mut object_134,
            var_133,
        )?;
        object_134.finish();
    }
    if let Some(var_135) = &input.redshift {
        let mut object_136 = object.key("Redshift").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_connector_profile_properties(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.salesforce {
        let mut object_138 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_connector_profile_properties(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.service_now {
        let mut object_140 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_connector_profile_properties(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    if let Some(var_141) = &input.singular {
        let mut object_142 = object.key("Singular").start_object();
        crate::json_ser::serialize_structure_crate_model_singular_connector_profile_properties(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.slack {
        let mut object_144 = object.key("Slack").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_connector_profile_properties(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.snowflake {
        let mut object_146 = object.key("Snowflake").start_object();
        crate::json_ser::serialize_structure_crate_model_snowflake_connector_profile_properties(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    if let Some(var_147) = &input.trendmicro {
        let mut object_148 = object.key("Trendmicro").start_object();
        crate::json_ser::serialize_structure_crate_model_trendmicro_connector_profile_properties(
            &mut object_148,
            var_147,
        )?;
        object_148.finish();
    }
    if let Some(var_149) = &input.veeva {
        let mut object_150 = object.key("Veeva").start_object();
        crate::json_ser::serialize_structure_crate_model_veeva_connector_profile_properties(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.zendesk {
        let mut object_152 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_connector_profile_properties(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    if let Some(var_153) = &input.sapo_data {
        let mut object_154 = object.key("SAPOData").start_object();
        crate::json_ser::serialize_structure_crate_model_sapo_data_connector_profile_properties(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    if let Some(var_155) = &input.custom_connector {
        let mut object_156 = object.key("CustomConnector").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_connector_profile_properties(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.amplitude {
        let mut object_158 = object.key("Amplitude").start_object();
        crate::json_ser::serialize_structure_crate_model_amplitude_connector_profile_credentials(
            &mut object_158,
            var_157,
        )?;
        object_158.finish();
    }
    if let Some(var_159) = &input.datadog {
        let mut object_160 = object.key("Datadog").start_object();
        crate::json_ser::serialize_structure_crate_model_datadog_connector_profile_credentials(
            &mut object_160,
            var_159,
        )?;
        object_160.finish();
    }
    if let Some(var_161) = &input.dynatrace {
        let mut object_162 = object.key("Dynatrace").start_object();
        crate::json_ser::serialize_structure_crate_model_dynatrace_connector_profile_credentials(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    if let Some(var_163) = &input.google_analytics {
        let mut object_164 = object.key("GoogleAnalytics").start_object();
        crate::json_ser::serialize_structure_crate_model_google_analytics_connector_profile_credentials(&mut object_164, var_163)?;
        object_164.finish();
    }
    if let Some(var_165) = &input.honeycode {
        let mut object_166 = object.key("Honeycode").start_object();
        crate::json_ser::serialize_structure_crate_model_honeycode_connector_profile_credentials(
            &mut object_166,
            var_165,
        )?;
        object_166.finish();
    }
    if let Some(var_167) = &input.infor_nexus {
        let mut object_168 = object.key("InforNexus").start_object();
        crate::json_ser::serialize_structure_crate_model_infor_nexus_connector_profile_credentials(
            &mut object_168,
            var_167,
        )?;
        object_168.finish();
    }
    if let Some(var_169) = &input.marketo {
        let mut object_170 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_connector_profile_credentials(
            &mut object_170,
            var_169,
        )?;
        object_170.finish();
    }
    if let Some(var_171) = &input.redshift {
        let mut object_172 = object.key("Redshift").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_connector_profile_credentials(
            &mut object_172,
            var_171,
        )?;
        object_172.finish();
    }
    if let Some(var_173) = &input.salesforce {
        let mut object_174 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_connector_profile_credentials(
            &mut object_174,
            var_173,
        )?;
        object_174.finish();
    }
    if let Some(var_175) = &input.service_now {
        let mut object_176 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_connector_profile_credentials(
            &mut object_176,
            var_175,
        )?;
        object_176.finish();
    }
    if let Some(var_177) = &input.singular {
        let mut object_178 = object.key("Singular").start_object();
        crate::json_ser::serialize_structure_crate_model_singular_connector_profile_credentials(
            &mut object_178,
            var_177,
        )?;
        object_178.finish();
    }
    if let Some(var_179) = &input.slack {
        let mut object_180 = object.key("Slack").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_connector_profile_credentials(
            &mut object_180,
            var_179,
        )?;
        object_180.finish();
    }
    if let Some(var_181) = &input.snowflake {
        let mut object_182 = object.key("Snowflake").start_object();
        crate::json_ser::serialize_structure_crate_model_snowflake_connector_profile_credentials(
            &mut object_182,
            var_181,
        )?;
        object_182.finish();
    }
    if let Some(var_183) = &input.trendmicro {
        let mut object_184 = object.key("Trendmicro").start_object();
        crate::json_ser::serialize_structure_crate_model_trendmicro_connector_profile_credentials(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    if let Some(var_185) = &input.veeva {
        let mut object_186 = object.key("Veeva").start_object();
        crate::json_ser::serialize_structure_crate_model_veeva_connector_profile_credentials(
            &mut object_186,
            var_185,
        )?;
        object_186.finish();
    }
    if let Some(var_187) = &input.zendesk {
        let mut object_188 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_connector_profile_credentials(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    if let Some(var_189) = &input.sapo_data {
        let mut object_190 = object.key("SAPOData").start_object();
        crate::json_ser::serialize_structure_crate_model_sapo_data_connector_profile_credentials(
            &mut object_190,
            var_189,
        )?;
        object_190.finish();
    }
    if let Some(var_191) = &input.custom_connector {
        let mut object_192 = object.key("CustomConnector").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_connector_profile_credentials(
            &mut object_192,
            var_191,
        )?;
        object_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination_connector_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationConnectorProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.redshift {
        let mut object_194 = object.key("Redshift").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_destination_properties(
            &mut object_194,
            var_193,
        )?;
        object_194.finish();
    }
    if let Some(var_195) = &input.s3 {
        let mut object_196 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination_properties(
            &mut object_196,
            var_195,
        )?;
        object_196.finish();
    }
    if let Some(var_197) = &input.salesforce {
        let mut object_198 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_destination_properties(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    if let Some(var_199) = &input.snowflake {
        let mut object_200 = object.key("Snowflake").start_object();
        crate::json_ser::serialize_structure_crate_model_snowflake_destination_properties(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    if let Some(var_201) = &input.event_bridge {
        let mut object_202 = object.key("EventBridge").start_object();
        crate::json_ser::serialize_structure_crate_model_event_bridge_destination_properties(
            &mut object_202,
            var_201,
        )?;
        object_202.finish();
    }
    if let Some(var_203) = &input.lookout_metrics {
        let mut object_204 = object.key("LookoutMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_lookout_metrics_destination_properties(
            &mut object_204,
            var_203,
        )?;
        object_204.finish();
    }
    if let Some(var_205) = &input.upsolver {
        let mut object_206 = object.key("Upsolver").start_object();
        crate::json_ser::serialize_structure_crate_model_upsolver_destination_properties(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    if let Some(var_207) = &input.honeycode {
        let mut object_208 = object.key("Honeycode").start_object();
        crate::json_ser::serialize_structure_crate_model_honeycode_destination_properties(
            &mut object_208,
            var_207,
        )?;
        object_208.finish();
    }
    if let Some(var_209) = &input.customer_profiles {
        let mut object_210 = object.key("CustomerProfiles").start_object();
        crate::json_ser::serialize_structure_crate_model_customer_profiles_destination_properties(
            &mut object_210,
            var_209,
        )?;
        object_210.finish();
    }
    if let Some(var_211) = &input.zendesk {
        let mut object_212 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_destination_properties(
            &mut object_212,
            var_211,
        )?;
        object_212.finish();
    }
    if let Some(var_213) = &input.marketo {
        let mut object_214 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_destination_properties(
            &mut object_214,
            var_213,
        )?;
        object_214.finish();
    }
    if let Some(var_215) = &input.custom_connector {
        let mut object_216 = object.key("CustomConnector").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_connector_destination_properties(
            &mut object_216,
            var_215,
        )?;
        object_216.finish();
    }
    if let Some(var_217) = &input.sapo_data {
        let mut object_218 = object.key("SAPOData").start_object();
        crate::json_ser::serialize_structure_crate_model_sapo_data_destination_properties(
            &mut object_218,
            var_217,
        )?;
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_connector_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConnectorProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.amplitude {
        let mut object_220 = object.key("Amplitude").start_object();
        crate::json_ser::serialize_structure_crate_model_amplitude_source_properties(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.datadog {
        let mut object_222 = object.key("Datadog").start_object();
        crate::json_ser::serialize_structure_crate_model_datadog_source_properties(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    if let Some(var_223) = &input.dynatrace {
        let mut object_224 = object.key("Dynatrace").start_object();
        crate::json_ser::serialize_structure_crate_model_dynatrace_source_properties(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    if let Some(var_225) = &input.google_analytics {
        let mut object_226 = object.key("GoogleAnalytics").start_object();
        crate::json_ser::serialize_structure_crate_model_google_analytics_source_properties(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.infor_nexus {
        let mut object_228 = object.key("InforNexus").start_object();
        crate::json_ser::serialize_structure_crate_model_infor_nexus_source_properties(
            &mut object_228,
            var_227,
        )?;
        object_228.finish();
    }
    if let Some(var_229) = &input.marketo {
        let mut object_230 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_source_properties(
            &mut object_230,
            var_229,
        )?;
        object_230.finish();
    }
    if let Some(var_231) = &input.s3 {
        let mut object_232 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_properties(
            &mut object_232,
            var_231,
        )?;
        object_232.finish();
    }
    if let Some(var_233) = &input.salesforce {
        let mut object_234 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_source_properties(
            &mut object_234,
            var_233,
        )?;
        object_234.finish();
    }
    if let Some(var_235) = &input.service_now {
        let mut object_236 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_source_properties(
            &mut object_236,
            var_235,
        )?;
        object_236.finish();
    }
    if let Some(var_237) = &input.singular {
        let mut object_238 = object.key("Singular").start_object();
        crate::json_ser::serialize_structure_crate_model_singular_source_properties(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    if let Some(var_239) = &input.slack {
        let mut object_240 = object.key("Slack").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_source_properties(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    if let Some(var_241) = &input.trendmicro {
        let mut object_242 = object.key("Trendmicro").start_object();
        crate::json_ser::serialize_structure_crate_model_trendmicro_source_properties(
            &mut object_242,
            var_241,
        )?;
        object_242.finish();
    }
    if let Some(var_243) = &input.veeva {
        let mut object_244 = object.key("Veeva").start_object();
        crate::json_ser::serialize_structure_crate_model_veeva_source_properties(
            &mut object_244,
            var_243,
        )?;
        object_244.finish();
    }
    if let Some(var_245) = &input.zendesk {
        let mut object_246 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_source_properties(
            &mut object_246,
            var_245,
        )?;
        object_246.finish();
    }
    if let Some(var_247) = &input.sapo_data {
        let mut object_248 = object.key("SAPOData").start_object();
        crate::json_ser::serialize_structure_crate_model_sapo_data_source_properties(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    if let Some(var_249) = &input.custom_connector {
        let mut object_250 = object.key("CustomConnector").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_connector_source_properties(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_incremental_pull_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IncrementalPullConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.datetime_type_field_name {
        object.key("datetimeTypeFieldName").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_operator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorOperator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.amplitude {
        object.key("Amplitude").string(var_252.as_str());
    }
    if let Some(var_253) = &input.datadog {
        object.key("Datadog").string(var_253.as_str());
    }
    if let Some(var_254) = &input.dynatrace {
        object.key("Dynatrace").string(var_254.as_str());
    }
    if let Some(var_255) = &input.google_analytics {
        object.key("GoogleAnalytics").string(var_255.as_str());
    }
    if let Some(var_256) = &input.infor_nexus {
        object.key("InforNexus").string(var_256.as_str());
    }
    if let Some(var_257) = &input.marketo {
        object.key("Marketo").string(var_257.as_str());
    }
    if let Some(var_258) = &input.s3 {
        object.key("S3").string(var_258.as_str());
    }
    if let Some(var_259) = &input.salesforce {
        object.key("Salesforce").string(var_259.as_str());
    }
    if let Some(var_260) = &input.service_now {
        object.key("ServiceNow").string(var_260.as_str());
    }
    if let Some(var_261) = &input.singular {
        object.key("Singular").string(var_261.as_str());
    }
    if let Some(var_262) = &input.slack {
        object.key("Slack").string(var_262.as_str());
    }
    if let Some(var_263) = &input.trendmicro {
        object.key("Trendmicro").string(var_263.as_str());
    }
    if let Some(var_264) = &input.veeva {
        object.key("Veeva").string(var_264.as_str());
    }
    if let Some(var_265) = &input.zendesk {
        object.key("Zendesk").string(var_265.as_str());
    }
    if let Some(var_266) = &input.sapo_data {
        object.key("SAPOData").string(var_266.as_str());
    }
    if let Some(var_267) = &input.custom_connector {
        object.key("CustomConnector").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.scheduled {
        let mut object_269 = object.key("Scheduled").start_object();
        crate::json_ser::serialize_structure_crate_model_scheduled_trigger_properties(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_connector_provisioning_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConnectorProvisioningConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.lambda_arn {
        object.key("lambdaArn").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amplitude_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmplitudeConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_datadog_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatadogConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.instance_url {
        object.key("instanceUrl").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynatrace_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynatraceConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.instance_url {
        object.key("instanceUrl").string(var_272.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_analytics_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleAnalyticsConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_honeycode_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoneycodeConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_infor_nexus_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InforNexusConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.instance_url {
        object.key("instanceUrl").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.instance_url {
        object.key("instanceUrl").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.database_url {
        object.key("databaseUrl").string(var_275.as_str());
    }
    if let Some(var_276) = &input.bucket_name {
        object.key("bucketName").string(var_276.as_str());
    }
    if let Some(var_277) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_277.as_str());
    }
    if let Some(var_278) = &input.role_arn {
        object.key("roleArn").string(var_278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.instance_url {
        object.key("instanceUrl").string(var_279.as_str());
    }
    if input.is_sandbox_environment {
        object
            .key("isSandboxEnvironment")
            .boolean(input.is_sandbox_environment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.instance_url {
        object.key("instanceUrl").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_singular_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingularConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_slack_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.instance_url {
        object.key("instanceUrl").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snowflake_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.warehouse {
        object.key("warehouse").string(var_282.as_str());
    }
    if let Some(var_283) = &input.stage {
        object.key("stage").string(var_283.as_str());
    }
    if let Some(var_284) = &input.bucket_name {
        object.key("bucketName").string(var_284.as_str());
    }
    if let Some(var_285) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_285.as_str());
    }
    if let Some(var_286) = &input.private_link_service_name {
        object
            .key("privateLinkServiceName")
            .string(var_286.as_str());
    }
    if let Some(var_287) = &input.account_name {
        object.key("accountName").string(var_287.as_str());
    }
    if let Some(var_288) = &input.region {
        object.key("region").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trendmicro_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrendmicroConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_veeva_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VeevaConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.instance_url {
        object.key("instanceUrl").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.instance_url {
        object.key("instanceUrl").string(var_290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sapo_data_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SapoDataConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.application_host_url {
        object.key("applicationHostUrl").string(var_291.as_str());
    }
    if let Some(var_292) = &input.application_service_path {
        object
            .key("applicationServicePath")
            .string(var_292.as_str());
    }
    if let Some(var_293) = &input.port_number {
        object.key("portNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_293).into()),
        );
    }
    if let Some(var_294) = &input.client_number {
        object.key("clientNumber").string(var_294.as_str());
    }
    if let Some(var_295) = &input.logon_language {
        object.key("logonLanguage").string(var_295.as_str());
    }
    if let Some(var_296) = &input.private_link_service_name {
        object
            .key("privateLinkServiceName")
            .string(var_296.as_str());
    }
    if let Some(var_297) = &input.o_auth_properties {
        let mut object_298 = object.key("oAuthProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_o_auth_properties(
            &mut object_298,
            var_297,
        )?;
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_connector_profile_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomConnectorProfileProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.profile_properties {
        let mut object_300 = object.key("profileProperties").start_object();
        for (key_301, value_302) in var_299 {
            {
                object_300.key(key_301).string(value_302.as_str());
            }
        }
        object_300.finish();
    }
    if let Some(var_303) = &input.o_auth2_properties {
        let mut object_304 = object.key("oAuth2Properties").start_object();
        crate::json_ser::serialize_structure_crate_model_o_auth2_properties(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amplitude_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmplitudeConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.api_key {
        object.key("apiKey").string(var_305.as_str());
    }
    if let Some(var_306) = &input.secret_key {
        object.key("secretKey").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datadog_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatadogConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.api_key {
        object.key("apiKey").string(var_307.as_str());
    }
    if let Some(var_308) = &input.application_key {
        object.key("applicationKey").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynatrace_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynatraceConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.api_token {
        object.key("apiToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_analytics_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleAnalyticsConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.client_id {
        object.key("clientId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.client_secret {
        object.key("clientSecret").string(var_311.as_str());
    }
    if let Some(var_312) = &input.access_token {
        object.key("accessToken").string(var_312.as_str());
    }
    if let Some(var_313) = &input.refresh_token {
        object.key("refreshToken").string(var_313.as_str());
    }
    if let Some(var_314) = &input.o_auth_request {
        let mut object_315 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_315,
            var_314,
        )?;
        object_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_honeycode_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoneycodeConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.access_token {
        object.key("accessToken").string(var_316.as_str());
    }
    if let Some(var_317) = &input.refresh_token {
        object.key("refreshToken").string(var_317.as_str());
    }
    if let Some(var_318) = &input.o_auth_request {
        let mut object_319 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_319,
            var_318,
        )?;
        object_319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_infor_nexus_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InforNexusConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.access_key_id {
        object.key("accessKeyId").string(var_320.as_str());
    }
    if let Some(var_321) = &input.user_id {
        object.key("userId").string(var_321.as_str());
    }
    if let Some(var_322) = &input.secret_access_key {
        object.key("secretAccessKey").string(var_322.as_str());
    }
    if let Some(var_323) = &input.datakey {
        object.key("datakey").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.client_id {
        object.key("clientId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.client_secret {
        object.key("clientSecret").string(var_325.as_str());
    }
    if let Some(var_326) = &input.access_token {
        object.key("accessToken").string(var_326.as_str());
    }
    if let Some(var_327) = &input.o_auth_request {
        let mut object_328 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.username {
        object.key("username").string(var_329.as_str());
    }
    if let Some(var_330) = &input.password {
        object.key("password").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.access_token {
        object.key("accessToken").string(var_331.as_str());
    }
    if let Some(var_332) = &input.refresh_token {
        object.key("refreshToken").string(var_332.as_str());
    }
    if let Some(var_333) = &input.o_auth_request {
        let mut object_334 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.client_credentials_arn {
        object.key("clientCredentialsArn").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.username {
        object.key("username").string(var_336.as_str());
    }
    if let Some(var_337) = &input.password {
        object.key("password").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_singular_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingularConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.api_key {
        object.key("apiKey").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.client_id {
        object.key("clientId").string(var_339.as_str());
    }
    if let Some(var_340) = &input.client_secret {
        object.key("clientSecret").string(var_340.as_str());
    }
    if let Some(var_341) = &input.access_token {
        object.key("accessToken").string(var_341.as_str());
    }
    if let Some(var_342) = &input.o_auth_request {
        let mut object_343 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_343,
            var_342,
        )?;
        object_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snowflake_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.username {
        object.key("username").string(var_344.as_str());
    }
    if let Some(var_345) = &input.password {
        object.key("password").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trendmicro_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrendmicroConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.api_secret_key {
        object.key("apiSecretKey").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_veeva_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VeevaConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.username {
        object.key("username").string(var_347.as_str());
    }
    if let Some(var_348) = &input.password {
        object.key("password").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.client_id {
        object.key("clientId").string(var_349.as_str());
    }
    if let Some(var_350) = &input.client_secret {
        object.key("clientSecret").string(var_350.as_str());
    }
    if let Some(var_351) = &input.access_token {
        object.key("accessToken").string(var_351.as_str());
    }
    if let Some(var_352) = &input.o_auth_request {
        let mut object_353 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_353,
            var_352,
        )?;
        object_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sapo_data_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SapoDataConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.basic_auth_credentials {
        let mut object_355 = object.key("basicAuthCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_auth_credentials(
            &mut object_355,
            var_354,
        )?;
        object_355.finish();
    }
    if let Some(var_356) = &input.o_auth_credentials {
        let mut object_357 = object.key("oAuthCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_o_auth_credentials(
            &mut object_357,
            var_356,
        )?;
        object_357.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_connector_profile_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomConnectorProfileCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.authentication_type {
        object.key("authenticationType").string(var_358.as_str());
    }
    if let Some(var_359) = &input.basic {
        let mut object_360 = object.key("basic").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_auth_credentials(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.oauth2 {
        let mut object_362 = object.key("oauth2").start_object();
        crate::json_ser::serialize_structure_crate_model_o_auth2_credentials(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.api_key {
        let mut object_364 = object.key("apiKey").start_object();
        crate::json_ser::serialize_structure_crate_model_api_key_credentials(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.custom {
        let mut object_366 = object.key("custom").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_auth_credentials(
            &mut object_366,
            var_365,
        )?;
        object_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.object {
        object.key("object").string(var_367.as_str());
    }
    if let Some(var_368) = &input.intermediate_bucket_name {
        object
            .key("intermediateBucketName")
            .string(var_368.as_str());
    }
    if let Some(var_369) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_369.as_str());
    }
    if let Some(var_370) = &input.error_handling_config {
        let mut object_371 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_371,
            var_370,
        )?;
        object_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.bucket_name {
        object.key("bucketName").string(var_372.as_str());
    }
    if let Some(var_373) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_373.as_str());
    }
    if let Some(var_374) = &input.s3_output_format_config {
        let mut object_375 = object.key("s3OutputFormatConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_output_format_config(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.object {
        object.key("object").string(var_376.as_str());
    }
    if let Some(var_377) = &input.id_field_names {
        let mut array_378 = object.key("idFieldNames").start_array();
        for item_379 in var_377 {
            {
                array_378.value().string(item_379.as_str());
            }
        }
        array_378.finish();
    }
    if let Some(var_380) = &input.error_handling_config {
        let mut object_381 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_381,
            var_380,
        )?;
        object_381.finish();
    }
    if let Some(var_382) = &input.write_operation_type {
        object.key("writeOperationType").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snowflake_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.object {
        object.key("object").string(var_383.as_str());
    }
    if let Some(var_384) = &input.intermediate_bucket_name {
        object
            .key("intermediateBucketName")
            .string(var_384.as_str());
    }
    if let Some(var_385) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_385.as_str());
    }
    if let Some(var_386) = &input.error_handling_config {
        let mut object_387 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_bridge_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBridgeDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.object {
        object.key("object").string(var_388.as_str());
    }
    if let Some(var_389) = &input.error_handling_config {
        let mut object_390 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_390,
            var_389,
        )?;
        object_390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lookout_metrics_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LookoutMetricsDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_upsolver_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpsolverDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.bucket_name {
        object.key("bucketName").string(var_391.as_str());
    }
    if let Some(var_392) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_392.as_str());
    }
    if let Some(var_393) = &input.s3_output_format_config {
        let mut object_394 = object.key("s3OutputFormatConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_upsolver_s3_output_format_config(
            &mut object_394,
            var_393,
        )?;
        object_394.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_honeycode_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoneycodeDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.object {
        object.key("object").string(var_395.as_str());
    }
    if let Some(var_396) = &input.error_handling_config {
        let mut object_397 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_397,
            var_396,
        )?;
        object_397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_customer_profiles_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomerProfilesDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_398) = &input.domain_name {
        object.key("domainName").string(var_398.as_str());
    }
    if let Some(var_399) = &input.object_type_name {
        object.key("objectTypeName").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.object {
        object.key("object").string(var_400.as_str());
    }
    if let Some(var_401) = &input.id_field_names {
        let mut array_402 = object.key("idFieldNames").start_array();
        for item_403 in var_401 {
            {
                array_402.value().string(item_403.as_str());
            }
        }
        array_402.finish();
    }
    if let Some(var_404) = &input.error_handling_config {
        let mut object_405 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    if let Some(var_406) = &input.write_operation_type {
        object.key("writeOperationType").string(var_406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.object {
        object.key("object").string(var_407.as_str());
    }
    if let Some(var_408) = &input.error_handling_config {
        let mut object_409 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_409,
            var_408,
        )?;
        object_409.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_connector_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomConnectorDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.entity_name {
        object.key("entityName").string(var_410.as_str());
    }
    if let Some(var_411) = &input.error_handling_config {
        let mut object_412 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.write_operation_type {
        object.key("writeOperationType").string(var_413.as_str());
    }
    if let Some(var_414) = &input.id_field_names {
        let mut array_415 = object.key("idFieldNames").start_array();
        for item_416 in var_414 {
            {
                array_415.value().string(item_416.as_str());
            }
        }
        array_415.finish();
    }
    if let Some(var_417) = &input.custom_properties {
        let mut object_418 = object.key("customProperties").start_object();
        for (key_419, value_420) in var_417 {
            {
                object_418.key(key_419).string(value_420.as_str());
            }
        }
        object_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sapo_data_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SapoDataDestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.object_path {
        object.key("objectPath").string(var_421.as_str());
    }
    if let Some(var_422) = &input.success_response_handling_config {
        let mut object_423 = object.key("successResponseHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_success_response_handling_config(
            &mut object_423,
            var_422,
        )?;
        object_423.finish();
    }
    if let Some(var_424) = &input.id_field_names {
        let mut array_425 = object.key("idFieldNames").start_array();
        for item_426 in var_424 {
            {
                array_425.value().string(item_426.as_str());
            }
        }
        array_425.finish();
    }
    if let Some(var_427) = &input.error_handling_config {
        let mut object_428 = object.key("errorHandlingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_error_handling_config(
            &mut object_428,
            var_427,
        )?;
        object_428.finish();
    }
    if let Some(var_429) = &input.write_operation_type {
        object.key("writeOperationType").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amplitude_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmplitudeSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.object {
        object.key("object").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datadog_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatadogSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.object {
        object.key("object").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynatrace_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynatraceSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.object {
        object.key("object").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_analytics_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleAnalyticsSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.object {
        object.key("object").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_infor_nexus_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InforNexusSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.object {
        object.key("object").string(var_434.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.object {
        object.key("object").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.bucket_name {
        object.key("bucketName").string(var_436.as_str());
    }
    if let Some(var_437) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_437.as_str());
    }
    if let Some(var_438) = &input.s3_input_format_config {
        let mut object_439 = object.key("s3InputFormatConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_input_format_config(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.object {
        object.key("object").string(var_440.as_str());
    }
    if input.enable_dynamic_field_update {
        object
            .key("enableDynamicFieldUpdate")
            .boolean(input.enable_dynamic_field_update);
    }
    if input.include_deleted_records {
        object
            .key("includeDeletedRecords")
            .boolean(input.include_deleted_records);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.object {
        object.key("object").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_singular_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingularSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.object {
        object.key("object").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.object {
        object.key("object").string(var_443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trendmicro_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrendmicroSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.object {
        object.key("object").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_veeva_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VeevaSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.object {
        object.key("object").string(var_445.as_str());
    }
    if let Some(var_446) = &input.document_type {
        object.key("documentType").string(var_446.as_str());
    }
    if input.include_source_files {
        object
            .key("includeSourceFiles")
            .boolean(input.include_source_files);
    }
    if input.include_renditions {
        object
            .key("includeRenditions")
            .boolean(input.include_renditions);
    }
    if input.include_all_versions {
        object
            .key("includeAllVersions")
            .boolean(input.include_all_versions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.object {
        object.key("object").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sapo_data_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SapoDataSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.object_path {
        object.key("objectPath").string(var_448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_connector_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomConnectorSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.entity_name {
        object.key("entityName").string(var_449.as_str());
    }
    if let Some(var_450) = &input.custom_properties {
        let mut object_451 = object.key("customProperties").start_object();
        for (key_452, value_453) in var_450 {
            {
                object_451.key(key_452).string(value_453.as_str());
            }
        }
        object_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scheduled_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduledTriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.schedule_expression {
        object.key("scheduleExpression").string(var_454.as_str());
    }
    if let Some(var_455) = &input.data_pull_mode {
        object.key("dataPullMode").string(var_455.as_str());
    }
    if let Some(var_456) = &input.schedule_start_time {
        object
            .key("scheduleStartTime")
            .date_time(var_456, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_457) = &input.schedule_end_time {
        object
            .key("scheduleEndTime")
            .date_time(var_457, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_458) = &input.timezone {
        object.key("timezone").string(var_458.as_str());
    }
    if let Some(var_459) = &input.schedule_offset {
        object.key("scheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    if let Some(var_460) = &input.first_execution_from {
        object
            .key("firstExecutionFrom")
            .date_time(var_460, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_o_auth_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OAuthProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.token_url {
        object.key("tokenUrl").string(var_461.as_str());
    }
    if let Some(var_462) = &input.auth_code_url {
        object.key("authCodeUrl").string(var_462.as_str());
    }
    if let Some(var_463) = &input.o_auth_scopes {
        let mut array_464 = object.key("oAuthScopes").start_array();
        for item_465 in var_463 {
            {
                array_464.value().string(item_465.as_str());
            }
        }
        array_464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_o_auth2_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OAuth2Properties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.token_url {
        object.key("tokenUrl").string(var_466.as_str());
    }
    if let Some(var_467) = &input.o_auth2_grant_type {
        object.key("oAuth2GrantType").string(var_467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_o_auth_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorOAuthRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.auth_code {
        object.key("authCode").string(var_468.as_str());
    }
    if let Some(var_469) = &input.redirect_uri {
        object.key("redirectUri").string(var_469.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_auth_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.username {
        object.key("username").string(var_470.as_str());
    }
    if let Some(var_471) = &input.password {
        object.key("password").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_o_auth_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OAuthCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.client_id {
        object.key("clientId").string(var_472.as_str());
    }
    if let Some(var_473) = &input.client_secret {
        object.key("clientSecret").string(var_473.as_str());
    }
    if let Some(var_474) = &input.access_token {
        object.key("accessToken").string(var_474.as_str());
    }
    if let Some(var_475) = &input.refresh_token {
        object.key("refreshToken").string(var_475.as_str());
    }
    if let Some(var_476) = &input.o_auth_request {
        let mut object_477 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_477,
            var_476,
        )?;
        object_477.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_o_auth2_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OAuth2Credentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.client_id {
        object.key("clientId").string(var_478.as_str());
    }
    if let Some(var_479) = &input.client_secret {
        object.key("clientSecret").string(var_479.as_str());
    }
    if let Some(var_480) = &input.access_token {
        object.key("accessToken").string(var_480.as_str());
    }
    if let Some(var_481) = &input.refresh_token {
        object.key("refreshToken").string(var_481.as_str());
    }
    if let Some(var_482) = &input.o_auth_request {
        let mut object_483 = object.key("oAuthRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_o_auth_request(
            &mut object_483,
            var_482,
        )?;
        object_483.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_api_key_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApiKeyCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.api_key {
        object.key("apiKey").string(var_484.as_str());
    }
    if let Some(var_485) = &input.api_secret_key {
        object.key("apiSecretKey").string(var_485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_auth_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomAuthCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.custom_authentication_type {
        object
            .key("customAuthenticationType")
            .string(var_486.as_str());
    }
    if let Some(var_487) = &input.credentials_map {
        let mut object_488 = object.key("credentialsMap").start_object();
        for (key_489, value_490) in var_487 {
            {
                object_488.key(key_489).string(value_490.as_str());
            }
        }
        object_488.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_error_handling_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ErrorHandlingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.fail_on_first_destination_error {
        object
            .key("failOnFirstDestinationError")
            .boolean(input.fail_on_first_destination_error);
    }
    if let Some(var_491) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_491.as_str());
    }
    if let Some(var_492) = &input.bucket_name {
        object.key("bucketName").string(var_492.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_output_format_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3OutputFormatConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.file_type {
        object.key("fileType").string(var_493.as_str());
    }
    if let Some(var_494) = &input.prefix_config {
        let mut object_495 = object.key("prefixConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_prefix_config(&mut object_495, var_494)?;
        object_495.finish();
    }
    if let Some(var_496) = &input.aggregation_config {
        let mut object_497 = object.key("aggregationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_config(
            &mut object_497,
            var_496,
        )?;
        object_497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upsolver_s3_output_format_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpsolverS3OutputFormatConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.file_type {
        object.key("fileType").string(var_498.as_str());
    }
    if let Some(var_499) = &input.prefix_config {
        let mut object_500 = object.key("prefixConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_prefix_config(&mut object_500, var_499)?;
        object_500.finish();
    }
    if let Some(var_501) = &input.aggregation_config {
        let mut object_502 = object.key("aggregationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_config(
            &mut object_502,
            var_501,
        )?;
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_success_response_handling_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuccessResponseHandlingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.bucket_prefix {
        object.key("bucketPrefix").string(var_503.as_str());
    }
    if let Some(var_504) = &input.bucket_name {
        object.key("bucketName").string(var_504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_input_format_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3InputFormatConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.s3_input_file_type {
        object.key("s3InputFileType").string(var_505.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prefix_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrefixConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.prefix_type {
        object.key("prefixType").string(var_506.as_str());
    }
    if let Some(var_507) = &input.prefix_format {
        object.key("prefixFormat").string(var_507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.aggregation_type {
        object.key("aggregationType").string(var_508.as_str());
    }
    Ok(())
}
