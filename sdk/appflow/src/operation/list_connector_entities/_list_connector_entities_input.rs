// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConnectorEntitiesInput {
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    #[doc(hidden)]
    pub connector_profile_name: std::option::Option<std::string::String>,
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    #[doc(hidden)]
    pub connector_type: std::option::Option<crate::types::ConnectorType>,
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    #[doc(hidden)]
    pub entities_path: std::option::Option<std::string::String>,
    /// <p>The version of the API that's used by the connector.</p>
    #[doc(hidden)]
    pub api_version: std::option::Option<std::string::String>,
    /// <p>The maximum number of items that the operation returns in the response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListConnectorEntitiesInput {
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    pub fn connector_profile_name(&self) -> std::option::Option<&str> {
        self.connector_profile_name.as_deref()
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(&self) -> std::option::Option<&crate::types::ConnectorType> {
        self.connector_type.as_ref()
    }
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    pub fn entities_path(&self) -> std::option::Option<&str> {
        self.entities_path.as_deref()
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn api_version(&self) -> std::option::Option<&str> {
        self.api_version.as_deref()
    }
    /// <p>The maximum number of items that the operation returns in the response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListConnectorEntitiesInput {
    /// Creates a new builder-style object to manufacture [`ListConnectorEntitiesInput`](crate::operation::list_connector_entities::ListConnectorEntitiesInput).
    pub fn builder(
    ) -> crate::operation::list_connector_entities::builders::ListConnectorEntitiesInputBuilder
    {
        crate::operation::list_connector_entities::builders::ListConnectorEntitiesInputBuilder::default()
    }
}

/// A builder for [`ListConnectorEntitiesInput`](crate::operation::list_connector_entities::ListConnectorEntitiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListConnectorEntitiesInputBuilder {
    pub(crate) connector_profile_name: std::option::Option<std::string::String>,
    pub(crate) connector_type: std::option::Option<crate::types::ConnectorType>,
    pub(crate) entities_path: std::option::Option<std::string::String>,
    pub(crate) api_version: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListConnectorEntitiesInputBuilder {
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    pub fn connector_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_profile_name = Some(input.into());
        self
    }
    /// <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    pub fn set_connector_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connector_profile_name = input;
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn connector_type(mut self, input: crate::types::ConnectorType) -> Self {
        self.connector_type = Some(input);
        self
    }
    /// <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    pub fn set_connector_type(
        mut self,
        input: std::option::Option<crate::types::ConnectorType>,
    ) -> Self {
        self.connector_type = input;
        self
    }
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    pub fn entities_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.entities_path = Some(input.into());
        self
    }
    /// <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    pub fn set_entities_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entities_path = input;
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn api_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_version = Some(input.into());
        self
    }
    /// <p>The version of the API that's used by the connector.</p>
    pub fn set_api_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_version = input;
        self
    }
    /// <p>The maximum number of items that the operation returns in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items that the operation returns in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListConnectorEntitiesInput`](crate::operation::list_connector_entities::ListConnectorEntitiesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_connector_entities::ListConnectorEntitiesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_connector_entities::ListConnectorEntitiesInput {
                connector_profile_name: self.connector_profile_name,
                connector_type: self.connector_type,
                entities_path: self.entities_path,
                api_version: self.api_version,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
