// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterConnectorInput {
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub connector_label: std::option::Option<std::string::String>,
    /// <p>A description about the connector that's being registered.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    #[doc(hidden)]
    pub connector_provisioning_type: std::option::Option<crate::types::ConnectorProvisioningType>,
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    #[doc(hidden)]
    pub connector_provisioning_config:
        std::option::Option<crate::types::ConnectorProvisioningConfig>,
}
impl RegisterConnectorInput {
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn connector_label(&self) -> std::option::Option<&str> {
        self.connector_label.as_deref()
    }
    /// <p>A description about the connector that's being registered.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    pub fn connector_provisioning_type(
        &self,
    ) -> std::option::Option<&crate::types::ConnectorProvisioningType> {
        self.connector_provisioning_type.as_ref()
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    pub fn connector_provisioning_config(
        &self,
    ) -> std::option::Option<&crate::types::ConnectorProvisioningConfig> {
        self.connector_provisioning_config.as_ref()
    }
}
impl RegisterConnectorInput {
    /// Creates a new builder-style object to manufacture [`RegisterConnectorInput`](crate::operation::register_connector::RegisterConnectorInput).
    pub fn builder() -> crate::operation::register_connector::builders::RegisterConnectorInputBuilder
    {
        crate::operation::register_connector::builders::RegisterConnectorInputBuilder::default()
    }
}

/// A builder for [`RegisterConnectorInput`](crate::operation::register_connector::RegisterConnectorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterConnectorInputBuilder {
    pub(crate) connector_label: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) connector_provisioning_type:
        std::option::Option<crate::types::ConnectorProvisioningType>,
    pub(crate) connector_provisioning_config:
        std::option::Option<crate::types::ConnectorProvisioningConfig>,
}
impl RegisterConnectorInputBuilder {
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_label = Some(input.into());
        self
    }
    /// <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connector_label = input;
        self
    }
    /// <p>A description about the connector that's being registered.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description about the connector that's being registered.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    pub fn connector_provisioning_type(
        mut self,
        input: crate::types::ConnectorProvisioningType,
    ) -> Self {
        self.connector_provisioning_type = Some(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    pub fn set_connector_provisioning_type(
        mut self,
        input: std::option::Option<crate::types::ConnectorProvisioningType>,
    ) -> Self {
        self.connector_provisioning_type = input;
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    pub fn connector_provisioning_config(
        mut self,
        input: crate::types::ConnectorProvisioningConfig,
    ) -> Self {
        self.connector_provisioning_config = Some(input);
        self
    }
    /// <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    pub fn set_connector_provisioning_config(
        mut self,
        input: std::option::Option<crate::types::ConnectorProvisioningConfig>,
    ) -> Self {
        self.connector_provisioning_config = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisterConnectorInput`](crate::operation::register_connector::RegisterConnectorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::register_connector::RegisterConnectorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::register_connector::RegisterConnectorInput {
                connector_label: self.connector_label,
                description: self.description,
                connector_provisioning_type: self.connector_provisioning_type,
                connector_provisioning_config: self.connector_provisioning_config,
            },
        )
    }
}
