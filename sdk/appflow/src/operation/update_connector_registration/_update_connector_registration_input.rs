// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConnectorRegistrationInput {
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    #[doc(hidden)]
    pub connector_label: std::option::Option<std::string::String>,
    /// <p>A description about the update that you're applying to the connector.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Contains information about the configuration of the connector being registered.</p>
    #[doc(hidden)]
    pub connector_provisioning_config:
        std::option::Option<crate::types::ConnectorProvisioningConfig>,
}
impl UpdateConnectorRegistrationInput {
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn connector_label(&self) -> std::option::Option<&str> {
        self.connector_label.as_deref()
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn connector_provisioning_config(
        &self,
    ) -> std::option::Option<&crate::types::ConnectorProvisioningConfig> {
        self.connector_provisioning_config.as_ref()
    }
}
impl UpdateConnectorRegistrationInput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorRegistrationInput`](crate::operation::update_connector_registration::UpdateConnectorRegistrationInput).
    pub fn builder() -> crate::operation::update_connector_registration::builders::UpdateConnectorRegistrationInputBuilder{
        crate::operation::update_connector_registration::builders::UpdateConnectorRegistrationInputBuilder::default()
    }
}

/// A builder for [`UpdateConnectorRegistrationInput`](crate::operation::update_connector_registration::UpdateConnectorRegistrationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateConnectorRegistrationInputBuilder {
    pub(crate) connector_label: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) connector_provisioning_config:
        std::option::Option<crate::types::ConnectorProvisioningConfig>,
}
impl UpdateConnectorRegistrationInputBuilder {
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_label = Some(input.into());
        self
    }
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connector_label = input;
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn connector_provisioning_config(
        mut self,
        input: crate::types::ConnectorProvisioningConfig,
    ) -> Self {
        self.connector_provisioning_config = Some(input);
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn set_connector_provisioning_config(
        mut self,
        input: std::option::Option<crate::types::ConnectorProvisioningConfig>,
    ) -> Self {
        self.connector_provisioning_config = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateConnectorRegistrationInput`](crate::operation::update_connector_registration::UpdateConnectorRegistrationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_connector_registration::UpdateConnectorRegistrationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_connector_registration::UpdateConnectorRegistrationInput {
                connector_label: self.connector_label,
                description: self.description,
                connector_provisioning_config: self.connector_provisioning_config,
            },
        )
    }
}
