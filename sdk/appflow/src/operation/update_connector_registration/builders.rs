// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_connector_registration::_update_connector_registration_output::UpdateConnectorRegistrationOutputBuilder;

pub use crate::operation::update_connector_registration::_update_connector_registration_input::UpdateConnectorRegistrationInputBuilder;

/// Fluent builder constructing a request to `UpdateConnectorRegistration`.
///
/// <p>Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:</p>
/// <ul>
/// <li> <p>The latest version of the AWS Lambda function that's assigned to the connector</p> </li>
/// <li> <p>A new AWS Lambda function that you specify</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectorRegistrationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_connector_registration::builders::UpdateConnectorRegistrationInputBuilder
            }
impl UpdateConnectorRegistrationFluentBuilder {
    /// Creates a new `UpdateConnectorRegistration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_connector_registration::UpdateConnectorRegistration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_connector_registration::UpdateConnectorRegistrationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn connector_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_label(input.into());
        self
    }
    /// <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    pub fn set_connector_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_label(input);
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description about the update that you're applying to the connector.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn connector_provisioning_config(
        mut self,
        input: crate::types::ConnectorProvisioningConfig,
    ) -> Self {
        self.inner = self.inner.connector_provisioning_config(input);
        self
    }
    /// <p>Contains information about the configuration of the connector being registered.</p>
    pub fn set_connector_provisioning_config(
        mut self,
        input: std::option::Option<crate::types::ConnectorProvisioningConfig>,
    ) -> Self {
        self.inner = self.inner.set_connector_provisioning_config(input);
        self
    }
}
