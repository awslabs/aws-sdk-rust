// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeFlowOutput {
    /// <p> The flow's Amazon Resource Name (ARN). </p>
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// <p> A description of the flow. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub flow_name: ::std::option::Option<::std::string::String>,
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub kms_arn: ::std::option::Option<::std::string::String>,
    /// <p> Indicates the current status of the flow. </p>
    pub flow_status: ::std::option::Option<crate::types::FlowStatus>,
    /// <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    pub flow_status_message: ::std::option::Option<::std::string::String>,
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub source_flow_config: ::std::option::Option<crate::types::SourceFlowConfig>,
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub destination_flow_config_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationFlowConfig>>,
    /// <p> Describes the details of the most recent flow run. </p>
    pub last_run_execution_details: ::std::option::Option<crate::types::ExecutionDetails>,
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub trigger_config: ::std::option::Option<crate::types::TriggerConfig>,
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub tasks: ::std::option::Option<::std::vec::Vec<crate::types::Task>>,
    /// <p> Specifies when the flow was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Specifies when the flow was last updated. </p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The ARN of the user who created the flow. </p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p> Specifies the user name of the account that performed the most recent update. </p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub metadata_catalog_config: ::std::option::Option<crate::types::MetadataCatalogConfig>,
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub last_run_metadata_catalog_details: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>,
    /// <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>
    /// <ul>
    /// <li> <p>Source-to-destination field mappings</p> </li>
    /// <li> <p>Field data types</p> </li>
    /// <li> <p>Partition keys</p> </li>
    /// </ul>
    pub schema_version: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeFlowOutput {
    /// <p> The flow's Amazon Resource Name (ARN). </p>
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// <p> A description of the flow. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(&self) -> ::std::option::Option<&str> {
        self.flow_name.as_deref()
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn kms_arn(&self) -> ::std::option::Option<&str> {
        self.kms_arn.as_deref()
    }
    /// <p> Indicates the current status of the flow. </p>
    pub fn flow_status(&self) -> ::std::option::Option<&crate::types::FlowStatus> {
        self.flow_status.as_ref()
    }
    /// <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    pub fn flow_status_message(&self) -> ::std::option::Option<&str> {
        self.flow_status_message.as_deref()
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn source_flow_config(&self) -> ::std::option::Option<&crate::types::SourceFlowConfig> {
        self.source_flow_config.as_ref()
    }
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_flow_config_list.is_none()`.
    pub fn destination_flow_config_list(&self) -> &[crate::types::DestinationFlowConfig] {
        self.destination_flow_config_list.as_deref().unwrap_or_default()
    }
    /// <p> Describes the details of the most recent flow run. </p>
    pub fn last_run_execution_details(&self) -> ::std::option::Option<&crate::types::ExecutionDetails> {
        self.last_run_execution_details.as_ref()
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn trigger_config(&self) -> ::std::option::Option<&crate::types::TriggerConfig> {
        self.trigger_config.as_ref()
    }
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tasks.is_none()`.
    pub fn tasks(&self) -> &[crate::types::Task] {
        self.tasks.as_deref().unwrap_or_default()
    }
    /// <p> Specifies when the flow was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p> Specifies when the flow was last updated. </p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p> The ARN of the user who created the flow. </p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p> Specifies the user name of the account that performed the most recent update. </p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn metadata_catalog_config(&self) -> ::std::option::Option<&crate::types::MetadataCatalogConfig> {
        self.metadata_catalog_config.as_ref()
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.last_run_metadata_catalog_details.is_none()`.
    pub fn last_run_metadata_catalog_details(&self) -> &[crate::types::MetadataCatalogDetail] {
        self.last_run_metadata_catalog_details.as_deref().unwrap_or_default()
    }
    /// <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>
    /// <ul>
    /// <li> <p>Source-to-destination field mappings</p> </li>
    /// <li> <p>Field data types</p> </li>
    /// <li> <p>Partition keys</p> </li>
    /// </ul>
    pub fn schema_version(&self) -> ::std::option::Option<i64> {
        self.schema_version
    }
}
impl ::aws_http::request_id::RequestId for DescribeFlowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFlowOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFlowOutput`](crate::operation::describe_flow::DescribeFlowOutput).
    pub fn builder() -> crate::operation::describe_flow::builders::DescribeFlowOutputBuilder {
        crate::operation::describe_flow::builders::DescribeFlowOutputBuilder::default()
    }
}

/// A builder for [`DescribeFlowOutput`](crate::operation::describe_flow::DescribeFlowOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeFlowOutputBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) flow_name: ::std::option::Option<::std::string::String>,
    pub(crate) kms_arn: ::std::option::Option<::std::string::String>,
    pub(crate) flow_status: ::std::option::Option<crate::types::FlowStatus>,
    pub(crate) flow_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) source_flow_config: ::std::option::Option<crate::types::SourceFlowConfig>,
    pub(crate) destination_flow_config_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationFlowConfig>>,
    pub(crate) last_run_execution_details: ::std::option::Option<crate::types::ExecutionDetails>,
    pub(crate) trigger_config: ::std::option::Option<crate::types::TriggerConfig>,
    pub(crate) tasks: ::std::option::Option<::std::vec::Vec<crate::types::Task>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) metadata_catalog_config: ::std::option::Option<crate::types::MetadataCatalogConfig>,
    pub(crate) last_run_metadata_catalog_details: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>,
    pub(crate) schema_version: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeFlowOutputBuilder {
    /// <p> The flow's Amazon Resource Name (ARN). </p>
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The flow's Amazon Resource Name (ARN). </p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// <p> The flow's Amazon Resource Name (ARN). </p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// <p> A description of the flow. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A description of the flow. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> A description of the flow. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn flow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn set_flow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_name = input;
        self
    }
    /// <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    pub fn get_flow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_name
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn kms_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn set_kms_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_arn = input;
        self
    }
    /// <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    pub fn get_kms_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_arn
    }
    /// <p> Indicates the current status of the flow. </p>
    pub fn flow_status(mut self, input: crate::types::FlowStatus) -> Self {
        self.flow_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the current status of the flow. </p>
    pub fn set_flow_status(mut self, input: ::std::option::Option<crate::types::FlowStatus>) -> Self {
        self.flow_status = input;
        self
    }
    /// <p> Indicates the current status of the flow. </p>
    pub fn get_flow_status(&self) -> &::std::option::Option<crate::types::FlowStatus> {
        &self.flow_status
    }
    /// <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    pub fn flow_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    pub fn set_flow_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_status_message = input;
        self
    }
    /// <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    pub fn get_flow_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_status_message
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn source_flow_config(mut self, input: crate::types::SourceFlowConfig) -> Self {
        self.source_flow_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn set_source_flow_config(mut self, input: ::std::option::Option<crate::types::SourceFlowConfig>) -> Self {
        self.source_flow_config = input;
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    pub fn get_source_flow_config(&self) -> &::std::option::Option<crate::types::SourceFlowConfig> {
        &self.source_flow_config
    }
    /// Appends an item to `destination_flow_config_list`.
    ///
    /// To override the contents of this collection use [`set_destination_flow_config_list`](Self::set_destination_flow_config_list).
    ///
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub fn destination_flow_config_list(mut self, input: crate::types::DestinationFlowConfig) -> Self {
        let mut v = self.destination_flow_config_list.unwrap_or_default();
        v.push(input);
        self.destination_flow_config_list = ::std::option::Option::Some(v);
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub fn set_destination_flow_config_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationFlowConfig>>) -> Self {
        self.destination_flow_config_list = input;
        self
    }
    /// <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    pub fn get_destination_flow_config_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationFlowConfig>> {
        &self.destination_flow_config_list
    }
    /// <p> Describes the details of the most recent flow run. </p>
    pub fn last_run_execution_details(mut self, input: crate::types::ExecutionDetails) -> Self {
        self.last_run_execution_details = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the details of the most recent flow run. </p>
    pub fn set_last_run_execution_details(mut self, input: ::std::option::Option<crate::types::ExecutionDetails>) -> Self {
        self.last_run_execution_details = input;
        self
    }
    /// <p> Describes the details of the most recent flow run. </p>
    pub fn get_last_run_execution_details(&self) -> &::std::option::Option<crate::types::ExecutionDetails> {
        &self.last_run_execution_details
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn trigger_config(mut self, input: crate::types::TriggerConfig) -> Self {
        self.trigger_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn set_trigger_config(mut self, input: ::std::option::Option<crate::types::TriggerConfig>) -> Self {
        self.trigger_config = input;
        self
    }
    /// <p> The trigger settings that determine how and when the flow runs. </p>
    pub fn get_trigger_config(&self) -> &::std::option::Option<crate::types::TriggerConfig> {
        &self.trigger_config
    }
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn tasks(mut self, input: crate::types::Task) -> Self {
        let mut v = self.tasks.unwrap_or_default();
        v.push(input);
        self.tasks = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn set_tasks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Task>>) -> Self {
        self.tasks = input;
        self
    }
    /// <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    pub fn get_tasks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Task>> {
        &self.tasks
    }
    /// <p> Specifies when the flow was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies when the flow was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p> Specifies when the flow was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p> Specifies when the flow was last updated. </p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies when the flow was last updated. </p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p> Specifies when the flow was last updated. </p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p> The ARN of the user who created the flow. </p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN of the user who created the flow. </p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p> The ARN of the user who created the flow. </p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p> Specifies the user name of the account that performed the most recent update. </p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the user name of the account that performed the most recent update. </p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p> Specifies the user name of the account that performed the most recent update. </p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> The tags used to organize, track, or control access for your flow. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn metadata_catalog_config(mut self, input: crate::types::MetadataCatalogConfig) -> Self {
        self.metadata_catalog_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn set_metadata_catalog_config(mut self, input: ::std::option::Option<crate::types::MetadataCatalogConfig>) -> Self {
        self.metadata_catalog_config = input;
        self
    }
    /// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    pub fn get_metadata_catalog_config(&self) -> &::std::option::Option<crate::types::MetadataCatalogConfig> {
        &self.metadata_catalog_config
    }
    /// Appends an item to `last_run_metadata_catalog_details`.
    ///
    /// To override the contents of this collection use [`set_last_run_metadata_catalog_details`](Self::set_last_run_metadata_catalog_details).
    ///
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn last_run_metadata_catalog_details(mut self, input: crate::types::MetadataCatalogDetail) -> Self {
        let mut v = self.last_run_metadata_catalog_details.unwrap_or_default();
        v.push(input);
        self.last_run_metadata_catalog_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn set_last_run_metadata_catalog_details(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>,
    ) -> Self {
        self.last_run_metadata_catalog_details = input;
        self
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn get_last_run_metadata_catalog_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>> {
        &self.last_run_metadata_catalog_details
    }
    /// <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>
    /// <ul>
    /// <li> <p>Source-to-destination field mappings</p> </li>
    /// <li> <p>Field data types</p> </li>
    /// <li> <p>Partition keys</p> </li>
    /// </ul>
    pub fn schema_version(mut self, input: i64) -> Self {
        self.schema_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>
    /// <ul>
    /// <li> <p>Source-to-destination field mappings</p> </li>
    /// <li> <p>Field data types</p> </li>
    /// <li> <p>Partition keys</p> </li>
    /// </ul>
    pub fn set_schema_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>
    /// <ul>
    /// <li> <p>Source-to-destination field mappings</p> </li>
    /// <li> <p>Field data types</p> </li>
    /// <li> <p>Partition keys</p> </li>
    /// </ul>
    pub fn get_schema_version(&self) -> &::std::option::Option<i64> {
        &self.schema_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFlowOutput`](crate::operation::describe_flow::DescribeFlowOutput).
    pub fn build(self) -> crate::operation::describe_flow::DescribeFlowOutput {
        crate::operation::describe_flow::DescribeFlowOutput {
            flow_arn: self.flow_arn,
            description: self.description,
            flow_name: self.flow_name,
            kms_arn: self.kms_arn,
            flow_status: self.flow_status,
            flow_status_message: self.flow_status_message,
            source_flow_config: self.source_flow_config,
            destination_flow_config_list: self.destination_flow_config_list,
            last_run_execution_details: self.last_run_execution_details,
            trigger_config: self.trigger_config,
            tasks: self.tasks,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            created_by: self.created_by,
            last_updated_by: self.last_updated_by,
            tags: self.tags,
            metadata_catalog_config: self.metadata_catalog_config,
            last_run_metadata_catalog_details: self.last_run_metadata_catalog_details,
            schema_version: self.schema_version,
            _request_id: self._request_id,
        }
    }
}
