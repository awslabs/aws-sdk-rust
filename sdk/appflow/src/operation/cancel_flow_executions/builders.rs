// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::cancel_flow_executions::_cancel_flow_executions_output::CancelFlowExecutionsOutputBuilder;

pub use crate::operation::cancel_flow_executions::_cancel_flow_executions_input::CancelFlowExecutionsInputBuilder;

impl crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_flow_executions::CancelFlowExecutionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.cancel_flow_executions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CancelFlowExecutions`.
///
/// <p>Cancels active runs for a flow.</p>
/// <p>You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.</p>
/// <p>You can cancel a flow run only when the run is in progress. You can't cancel a run that has already completed or failed. You also can't cancel a run that's scheduled to occur but hasn't started yet. To prevent a scheduled run, you can deactivate the flow with the <code>StopFlow</code> action.</p>
/// <p>You cannot resume a run after you cancel it.</p>
/// <p>When you send your request, the status for each run becomes <code>CancelStarted</code>. When the cancellation completes, the status becomes <code>Canceled</code>.</p><note>
/// <p>When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see <a href="http://aws.amazon.com/appflow/pricing/">Amazon AppFlow pricing</a>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CancelFlowExecutionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput,
        crate::operation::cancel_flow_executions::CancelFlowExecutionsError,
    > for CancelFlowExecutionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput,
            crate::operation::cancel_flow_executions::CancelFlowExecutionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CancelFlowExecutionsFluentBuilder {
    /// Creates a new `CancelFlowExecutions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CancelFlowExecutions as a reference.
    pub fn as_input(&self) -> &crate::operation::cancel_flow_executions::builders::CancelFlowExecutionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_flow_executions::CancelFlowExecutionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::cancel_flow_executions::CancelFlowExecutions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::cancel_flow_executions::CancelFlowExecutions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::cancel_flow_executions::CancelFlowExecutionsOutput,
        crate::operation::cancel_flow_executions::CancelFlowExecutionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of a flow with active runs that you want to cancel.</p>
    pub fn flow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.flow_name(input.into());
        self
    }
    /// <p>The name of a flow with active runs that you want to cancel.</p>
    pub fn set_flow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_flow_name(input);
        self
    }
    /// <p>The name of a flow with active runs that you want to cancel.</p>
    pub fn get_flow_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_flow_name()
    }
    ///
    /// Appends an item to `executionIds`.
    ///
    /// To override the contents of this collection use [`set_execution_ids`](Self::set_execution_ids).
    ///
    /// <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p>
    /// <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>
    pub fn execution_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_ids(input.into());
        self
    }
    /// <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p>
    /// <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>
    pub fn set_execution_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_execution_ids(input);
        self
    }
    /// <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p>
    /// <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>
    pub fn get_execution_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_execution_ids()
    }
}
