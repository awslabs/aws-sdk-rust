// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_connector_entity_output_correct_errors(
    mut builder: crate::operation::describe_connector_entity::builders::DescribeConnectorEntityOutputBuilder,
) -> crate::operation::describe_connector_entity::builders::DescribeConnectorEntityOutputBuilder {
    if builder.connector_entity_fields.is_none() {
        builder.connector_entity_fields = Some(Default::default())
    }
    builder
}

pub(crate) fn list_connector_entities_output_correct_errors(
    mut builder: crate::operation::list_connector_entities::builders::ListConnectorEntitiesOutputBuilder,
) -> crate::operation::list_connector_entities::builders::ListConnectorEntitiesOutputBuilder {
    if builder.connector_entity_map.is_none() {
        builder.connector_entity_map = Some(Default::default())
    }
    builder
}

pub(crate) fn source_flow_config_correct_errors(
    mut builder: crate::types::builders::SourceFlowConfigBuilder,
) -> crate::types::builders::SourceFlowConfigBuilder {
    if builder.connector_type.is_none() {
        builder.connector_type = "no value was set".parse::<crate::types::ConnectorType>().ok()
    }
    if builder.source_connector_properties.is_none() {
        builder.source_connector_properties = {
            let builder = crate::types::builders::SourceConnectorPropertiesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn trigger_config_correct_errors(
    mut builder: crate::types::builders::TriggerConfigBuilder,
) -> crate::types::builders::TriggerConfigBuilder {
    if builder.trigger_type.is_none() {
        builder.trigger_type = "no value was set".parse::<crate::types::TriggerType>().ok()
    }
    builder
}

pub(crate) fn connector_entity_field_correct_errors(
    mut builder: crate::types::builders::ConnectorEntityFieldBuilder,
) -> crate::types::builders::ConnectorEntityFieldBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_flow_config_correct_errors(
    mut builder: crate::types::builders::DestinationFlowConfigBuilder,
) -> crate::types::builders::DestinationFlowConfigBuilder {
    if builder.connector_type.is_none() {
        builder.connector_type = "no value was set".parse::<crate::types::ConnectorType>().ok()
    }
    if builder.destination_connector_properties.is_none() {
        builder.destination_connector_properties = {
            let builder = crate::types::builders::DestinationConnectorPropertiesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn glue_data_catalog_config_correct_errors(
    mut builder: crate::types::builders::GlueDataCatalogConfigBuilder,
) -> crate::types::builders::GlueDataCatalogConfigBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_prefix.is_none() {
        builder.table_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn task_correct_errors(mut builder: crate::types::builders::TaskBuilder) -> crate::types::builders::TaskBuilder {
    if builder.source_fields.is_none() {
        builder.source_fields = Some(Default::default())
    }
    if builder.task_type.is_none() {
        builder.task_type = "no value was set".parse::<crate::types::TaskType>().ok()
    }
    builder
}

pub(crate) fn amplitude_source_properties_correct_errors(
    mut builder: crate::types::builders::AmplitudeSourcePropertiesBuilder,
) -> crate::types::builders::AmplitudeSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn connector_entity_correct_errors(
    mut builder: crate::types::builders::ConnectorEntityBuilder,
) -> crate::types::builders::ConnectorEntityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_connector_source_properties_correct_errors(
    mut builder: crate::types::builders::CustomConnectorSourcePropertiesBuilder,
) -> crate::types::builders::CustomConnectorSourcePropertiesBuilder {
    if builder.entity_name.is_none() {
        builder.entity_name = Some(Default::default())
    }
    builder
}

pub(crate) fn datadog_source_properties_correct_errors(
    mut builder: crate::types::builders::DatadogSourcePropertiesBuilder,
) -> crate::types::builders::DatadogSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn dynatrace_source_properties_correct_errors(
    mut builder: crate::types::builders::DynatraceSourcePropertiesBuilder,
) -> crate::types::builders::DynatraceSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn google_analytics_source_properties_correct_errors(
    mut builder: crate::types::builders::GoogleAnalyticsSourcePropertiesBuilder,
) -> crate::types::builders::GoogleAnalyticsSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn infor_nexus_source_properties_correct_errors(
    mut builder: crate::types::builders::InforNexusSourcePropertiesBuilder,
) -> crate::types::builders::InforNexusSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_connector_provisioning_config_correct_errors(
    mut builder: crate::types::builders::LambdaConnectorProvisioningConfigBuilder,
) -> crate::types::builders::LambdaConnectorProvisioningConfigBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn marketo_source_properties_correct_errors(
    mut builder: crate::types::builders::MarketoSourcePropertiesBuilder,
) -> crate::types::builders::MarketoSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn pardot_source_properties_correct_errors(
    mut builder: crate::types::builders::PardotSourcePropertiesBuilder,
) -> crate::types::builders::PardotSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_source_properties_correct_errors(
    mut builder: crate::types::builders::S3SourcePropertiesBuilder,
) -> crate::types::builders::S3SourcePropertiesBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_source_properties_correct_errors(
    mut builder: crate::types::builders::SalesforceSourcePropertiesBuilder,
) -> crate::types::builders::SalesforceSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduled_trigger_properties_correct_errors(
    mut builder: crate::types::builders::ScheduledTriggerPropertiesBuilder,
) -> crate::types::builders::ScheduledTriggerPropertiesBuilder {
    if builder.schedule_expression.is_none() {
        builder.schedule_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn service_now_source_properties_correct_errors(
    mut builder: crate::types::builders::ServiceNowSourcePropertiesBuilder,
) -> crate::types::builders::ServiceNowSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn singular_source_properties_correct_errors(
    mut builder: crate::types::builders::SingularSourcePropertiesBuilder,
) -> crate::types::builders::SingularSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn slack_source_properties_correct_errors(
    mut builder: crate::types::builders::SlackSourcePropertiesBuilder,
) -> crate::types::builders::SlackSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn supported_field_type_details_correct_errors(
    mut builder: crate::types::builders::SupportedFieldTypeDetailsBuilder,
) -> crate::types::builders::SupportedFieldTypeDetailsBuilder {
    if builder.v1.is_none() {
        builder.v1 = {
            let builder = crate::types::builders::FieldTypeDetailsBuilder::default();
            crate::serde_util::field_type_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn trendmicro_source_properties_correct_errors(
    mut builder: crate::types::builders::TrendmicroSourcePropertiesBuilder,
) -> crate::types::builders::TrendmicroSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn veeva_source_properties_correct_errors(
    mut builder: crate::types::builders::VeevaSourcePropertiesBuilder,
) -> crate::types::builders::VeevaSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn zendesk_source_properties_correct_errors(
    mut builder: crate::types::builders::ZendeskSourcePropertiesBuilder,
) -> crate::types::builders::ZendeskSourcePropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_connector_destination_properties_correct_errors(
    mut builder: crate::types::builders::CustomConnectorDestinationPropertiesBuilder,
) -> crate::types::builders::CustomConnectorDestinationPropertiesBuilder {
    if builder.entity_name.is_none() {
        builder.entity_name = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_profiles_destination_properties_correct_errors(
    mut builder: crate::types::builders::CustomerProfilesDestinationPropertiesBuilder,
) -> crate::types::builders::CustomerProfilesDestinationPropertiesBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn datadog_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::DatadogConnectorProfilePropertiesBuilder,
) -> crate::types::builders::DatadogConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn dynatrace_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::DynatraceConnectorProfilePropertiesBuilder,
) -> crate::types::builders::DynatraceConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn event_bridge_destination_properties_correct_errors(
    mut builder: crate::types::builders::EventBridgeDestinationPropertiesBuilder,
) -> crate::types::builders::EventBridgeDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn field_type_details_correct_errors(
    mut builder: crate::types::builders::FieldTypeDetailsBuilder,
) -> crate::types::builders::FieldTypeDetailsBuilder {
    if builder.field_type.is_none() {
        builder.field_type = Some(Default::default())
    }
    if builder.filter_operators.is_none() {
        builder.filter_operators = Some(Default::default())
    }
    builder
}

pub(crate) fn honeycode_destination_properties_correct_errors(
    mut builder: crate::types::builders::HoneycodeDestinationPropertiesBuilder,
) -> crate::types::builders::HoneycodeDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn infor_nexus_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::InforNexusConnectorProfilePropertiesBuilder,
) -> crate::types::builders::InforNexusConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn marketo_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::MarketoConnectorProfilePropertiesBuilder,
) -> crate::types::builders::MarketoConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn marketo_destination_properties_correct_errors(
    mut builder: crate::types::builders::MarketoDestinationPropertiesBuilder,
) -> crate::types::builders::MarketoDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::RedshiftConnectorProfilePropertiesBuilder,
) -> crate::types::builders::RedshiftConnectorProfilePropertiesBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_destination_properties_correct_errors(
    mut builder: crate::types::builders::RedshiftDestinationPropertiesBuilder,
) -> crate::types::builders::RedshiftDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    if builder.intermediate_bucket_name.is_none() {
        builder.intermediate_bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_destination_properties_correct_errors(
    mut builder: crate::types::builders::S3DestinationPropertiesBuilder,
) -> crate::types::builders::S3DestinationPropertiesBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_destination_properties_correct_errors(
    mut builder: crate::types::builders::SalesforceDestinationPropertiesBuilder,
) -> crate::types::builders::SalesforceDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn sapo_data_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::SapoDataConnectorProfilePropertiesBuilder,
) -> crate::types::builders::SapoDataConnectorProfilePropertiesBuilder {
    if builder.application_host_url.is_none() {
        builder.application_host_url = Some(Default::default())
    }
    if builder.application_service_path.is_none() {
        builder.application_service_path = Some(Default::default())
    }
    if builder.port_number.is_none() {
        builder.port_number = Some(Default::default())
    }
    if builder.client_number.is_none() {
        builder.client_number = Some(Default::default())
    }
    builder
}

pub(crate) fn sapo_data_destination_properties_correct_errors(
    mut builder: crate::types::builders::SapoDataDestinationPropertiesBuilder,
) -> crate::types::builders::SapoDataDestinationPropertiesBuilder {
    if builder.object_path.is_none() {
        builder.object_path = Some(Default::default())
    }
    builder
}

pub(crate) fn sapo_data_pagination_config_correct_errors(
    mut builder: crate::types::builders::SapoDataPaginationConfigBuilder,
) -> crate::types::builders::SapoDataPaginationConfigBuilder {
    if builder.max_page_size.is_none() {
        builder.max_page_size = Some(Default::default())
    }
    builder
}

pub(crate) fn sapo_data_parallelism_config_correct_errors(
    mut builder: crate::types::builders::SapoDataParallelismConfigBuilder,
) -> crate::types::builders::SapoDataParallelismConfigBuilder {
    if builder.max_parallelism.is_none() {
        builder.max_parallelism = Some(Default::default())
    }
    builder
}

pub(crate) fn service_now_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::ServiceNowConnectorProfilePropertiesBuilder,
) -> crate::types::builders::ServiceNowConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn slack_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::SlackConnectorProfilePropertiesBuilder,
) -> crate::types::builders::SlackConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn snowflake_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::SnowflakeConnectorProfilePropertiesBuilder,
) -> crate::types::builders::SnowflakeConnectorProfilePropertiesBuilder {
    if builder.warehouse.is_none() {
        builder.warehouse = Some(Default::default())
    }
    if builder.stage.is_none() {
        builder.stage = Some(Default::default())
    }
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn snowflake_destination_properties_correct_errors(
    mut builder: crate::types::builders::SnowflakeDestinationPropertiesBuilder,
) -> crate::types::builders::SnowflakeDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    if builder.intermediate_bucket_name.is_none() {
        builder.intermediate_bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn upsolver_destination_properties_correct_errors(
    mut builder: crate::types::builders::UpsolverDestinationPropertiesBuilder,
) -> crate::types::builders::UpsolverDestinationPropertiesBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.s3_output_format_config.is_none() {
        builder.s3_output_format_config = {
            let builder = crate::types::builders::UpsolverS3OutputFormatConfigBuilder::default();
            Some(crate::serde_util::upsolver_s3_output_format_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn veeva_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::VeevaConnectorProfilePropertiesBuilder,
) -> crate::types::builders::VeevaConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn zendesk_connector_profile_properties_correct_errors(
    mut builder: crate::types::builders::ZendeskConnectorProfilePropertiesBuilder,
) -> crate::types::builders::ZendeskConnectorProfilePropertiesBuilder {
    if builder.instance_url.is_none() {
        builder.instance_url = Some(Default::default())
    }
    builder
}

pub(crate) fn zendesk_destination_properties_correct_errors(
    mut builder: crate::types::builders::ZendeskDestinationPropertiesBuilder,
) -> crate::types::builders::ZendeskDestinationPropertiesBuilder {
    if builder.object.is_none() {
        builder.object = Some(Default::default())
    }
    builder
}

pub(crate) fn o_auth2_properties_correct_errors(
    mut builder: crate::types::builders::OAuth2PropertiesBuilder,
) -> crate::types::builders::OAuth2PropertiesBuilder {
    if builder.token_url.is_none() {
        builder.token_url = Some(Default::default())
    }
    if builder.o_auth2_grant_type.is_none() {
        builder.o_auth2_grant_type = "no value was set".parse::<crate::types::OAuth2GrantType>().ok()
    }
    builder
}

pub(crate) fn o_auth_properties_correct_errors(
    mut builder: crate::types::builders::OAuthPropertiesBuilder,
) -> crate::types::builders::OAuthPropertiesBuilder {
    if builder.token_url.is_none() {
        builder.token_url = Some(Default::default())
    }
    if builder.auth_code_url.is_none() {
        builder.auth_code_url = Some(Default::default())
    }
    if builder.o_auth_scopes.is_none() {
        builder.o_auth_scopes = Some(Default::default())
    }
    builder
}

pub(crate) fn upsolver_s3_output_format_config_correct_errors(
    mut builder: crate::types::builders::UpsolverS3OutputFormatConfigBuilder,
) -> crate::types::builders::UpsolverS3OutputFormatConfigBuilder {
    if builder.prefix_config.is_none() {
        builder.prefix_config = {
            let builder = crate::types::builders::PrefixConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}
