// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties that are applied when the custom connector is being used as a destination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomConnectorDestinationProperties {
    /// <p>The entity specified in the custom connector as a destination in the flow.</p>
    #[doc(hidden)]
    pub entity_name: std::option::Option<std::string::String>,
    /// <p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>
    #[doc(hidden)]
    pub error_handling_config: std::option::Option<crate::types::ErrorHandlingConfig>,
    /// <p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>
    #[doc(hidden)]
    pub write_operation_type: std::option::Option<crate::types::WriteOperationType>,
    /// <p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>
    #[doc(hidden)]
    pub id_field_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>
    #[doc(hidden)]
    pub custom_properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CustomConnectorDestinationProperties {
    /// <p>The entity specified in the custom connector as a destination in the flow.</p>
    pub fn entity_name(&self) -> std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>
    pub fn error_handling_config(&self) -> std::option::Option<&crate::types::ErrorHandlingConfig> {
        self.error_handling_config.as_ref()
    }
    /// <p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>
    pub fn write_operation_type(&self) -> std::option::Option<&crate::types::WriteOperationType> {
        self.write_operation_type.as_ref()
    }
    /// <p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>
    pub fn id_field_names(&self) -> std::option::Option<&[std::string::String]> {
        self.id_field_names.as_deref()
    }
    /// <p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>
    pub fn custom_properties(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.custom_properties.as_ref()
    }
}
impl CustomConnectorDestinationProperties {
    /// Creates a new builder-style object to manufacture [`CustomConnectorDestinationProperties`](crate::types::CustomConnectorDestinationProperties).
    pub fn builder() -> crate::types::builders::CustomConnectorDestinationPropertiesBuilder {
        crate::types::builders::CustomConnectorDestinationPropertiesBuilder::default()
    }
}

/// A builder for [`CustomConnectorDestinationProperties`](crate::types::CustomConnectorDestinationProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomConnectorDestinationPropertiesBuilder {
    pub(crate) entity_name: std::option::Option<std::string::String>,
    pub(crate) error_handling_config: std::option::Option<crate::types::ErrorHandlingConfig>,
    pub(crate) write_operation_type: std::option::Option<crate::types::WriteOperationType>,
    pub(crate) id_field_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) custom_properties:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CustomConnectorDestinationPropertiesBuilder {
    /// <p>The entity specified in the custom connector as a destination in the flow.</p>
    pub fn entity_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_name = Some(input.into());
        self
    }
    /// <p>The entity specified in the custom connector as a destination in the flow.</p>
    pub fn set_entity_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>
    pub fn error_handling_config(mut self, input: crate::types::ErrorHandlingConfig) -> Self {
        self.error_handling_config = Some(input);
        self
    }
    /// <p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>
    pub fn set_error_handling_config(
        mut self,
        input: std::option::Option<crate::types::ErrorHandlingConfig>,
    ) -> Self {
        self.error_handling_config = input;
        self
    }
    /// <p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>
    pub fn write_operation_type(mut self, input: crate::types::WriteOperationType) -> Self {
        self.write_operation_type = Some(input);
        self
    }
    /// <p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>
    pub fn set_write_operation_type(
        mut self,
        input: std::option::Option<crate::types::WriteOperationType>,
    ) -> Self {
        self.write_operation_type = input;
        self
    }
    /// Appends an item to `id_field_names`.
    ///
    /// To override the contents of this collection use [`set_id_field_names`](Self::set_id_field_names).
    ///
    /// <p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>
    pub fn id_field_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.id_field_names.unwrap_or_default();
        v.push(input.into());
        self.id_field_names = Some(v);
        self
    }
    /// <p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>
    pub fn set_id_field_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.id_field_names = input;
        self
    }
    /// Adds a key-value pair to `custom_properties`.
    ///
    /// To override the contents of this collection use [`set_custom_properties`](Self::set_custom_properties).
    ///
    /// <p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>
    pub fn custom_properties(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_properties = Some(hash_map);
        self
    }
    /// <p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>
    pub fn set_custom_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.custom_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomConnectorDestinationProperties`](crate::types::CustomConnectorDestinationProperties).
    pub fn build(self) -> crate::types::CustomConnectorDestinationProperties {
        crate::types::CustomConnectorDestinationProperties {
            entity_name: self.entity_name,
            error_handling_config: self.error_handling_config,
            write_operation_type: self.write_operation_type,
            id_field_names: self.id_field_names,
            custom_properties: self.custom_properties,
        }
    }
}
