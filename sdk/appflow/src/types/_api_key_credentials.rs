// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The API key credentials required for API key authentication.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApiKeyCredentials {
    /// <p>The API key required for API key authentication.</p>
    #[doc(hidden)]
    pub api_key: std::option::Option<std::string::String>,
    /// <p>The API secret key required for API key authentication.</p>
    #[doc(hidden)]
    pub api_secret_key: std::option::Option<std::string::String>,
}
impl ApiKeyCredentials {
    /// <p>The API key required for API key authentication.</p>
    pub fn api_key(&self) -> std::option::Option<&str> {
        self.api_key.as_deref()
    }
    /// <p>The API secret key required for API key authentication.</p>
    pub fn api_secret_key(&self) -> std::option::Option<&str> {
        self.api_secret_key.as_deref()
    }
}
impl std::fmt::Debug for ApiKeyCredentials {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApiKeyCredentials");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.field("api_secret_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ApiKeyCredentials {
    /// Creates a new builder-style object to manufacture [`ApiKeyCredentials`](crate::types::ApiKeyCredentials).
    pub fn builder() -> crate::types::builders::ApiKeyCredentialsBuilder {
        crate::types::builders::ApiKeyCredentialsBuilder::default()
    }
}

/// A builder for [`ApiKeyCredentials`](crate::types::ApiKeyCredentials).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ApiKeyCredentialsBuilder {
    pub(crate) api_key: std::option::Option<std::string::String>,
    pub(crate) api_secret_key: std::option::Option<std::string::String>,
}
impl ApiKeyCredentialsBuilder {
    /// <p>The API key required for API key authentication.</p>
    pub fn api_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_key = Some(input.into());
        self
    }
    /// <p>The API key required for API key authentication.</p>
    pub fn set_api_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_key = input;
        self
    }
    /// <p>The API secret key required for API key authentication.</p>
    pub fn api_secret_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_secret_key = Some(input.into());
        self
    }
    /// <p>The API secret key required for API key authentication.</p>
    pub fn set_api_secret_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_secret_key = input;
        self
    }
    /// Consumes the builder and constructs a [`ApiKeyCredentials`](crate::types::ApiKeyCredentials).
    pub fn build(self) -> crate::types::ApiKeyCredentials {
        crate::types::ApiKeyCredentials {
            api_key: self.api_key,
            api_secret_key: self.api_secret_key,
        }
    }
}
impl std::fmt::Debug for ApiKeyCredentialsBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApiKeyCredentialsBuilder");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.field("api_secret_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
