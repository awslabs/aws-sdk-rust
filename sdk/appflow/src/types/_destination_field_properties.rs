// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that can be applied to a field when connector is being used as a destination. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationFieldProperties {
    /// <p> Specifies if the destination field can be created by the current user. </p>
    pub is_creatable: bool,
    /// <p> Specifies if the destination field can have a null value. </p>
    pub is_nullable: bool,
    /// <p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>
    pub is_upsertable: bool,
    /// <p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>
    pub is_updatable: bool,
    /// <p>Specifies whether the field can use the default value during a Create operation.</p>
    pub is_defaulted_on_create: bool,
    /// <p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>
    pub supported_write_operations: ::std::option::Option<::std::vec::Vec<crate::types::WriteOperationType>>,
}
impl DestinationFieldProperties {
    /// <p> Specifies if the destination field can be created by the current user. </p>
    pub fn is_creatable(&self) -> bool {
        self.is_creatable
    }
    /// <p> Specifies if the destination field can have a null value. </p>
    pub fn is_nullable(&self) -> bool {
        self.is_nullable
    }
    /// <p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>
    pub fn is_upsertable(&self) -> bool {
        self.is_upsertable
    }
    /// <p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>
    pub fn is_updatable(&self) -> bool {
        self.is_updatable
    }
    /// <p>Specifies whether the field can use the default value during a Create operation.</p>
    pub fn is_defaulted_on_create(&self) -> bool {
        self.is_defaulted_on_create
    }
    /// <p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_write_operations.is_none()`.
    pub fn supported_write_operations(&self) -> &[crate::types::WriteOperationType] {
        self.supported_write_operations.as_deref().unwrap_or_default()
    }
}
impl DestinationFieldProperties {
    /// Creates a new builder-style object to manufacture [`DestinationFieldProperties`](crate::types::DestinationFieldProperties).
    pub fn builder() -> crate::types::builders::DestinationFieldPropertiesBuilder {
        crate::types::builders::DestinationFieldPropertiesBuilder::default()
    }
}

/// A builder for [`DestinationFieldProperties`](crate::types::DestinationFieldProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationFieldPropertiesBuilder {
    pub(crate) is_creatable: ::std::option::Option<bool>,
    pub(crate) is_nullable: ::std::option::Option<bool>,
    pub(crate) is_upsertable: ::std::option::Option<bool>,
    pub(crate) is_updatable: ::std::option::Option<bool>,
    pub(crate) is_defaulted_on_create: ::std::option::Option<bool>,
    pub(crate) supported_write_operations: ::std::option::Option<::std::vec::Vec<crate::types::WriteOperationType>>,
}
impl DestinationFieldPropertiesBuilder {
    /// <p> Specifies if the destination field can be created by the current user. </p>
    pub fn is_creatable(mut self, input: bool) -> Self {
        self.is_creatable = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies if the destination field can be created by the current user. </p>
    pub fn set_is_creatable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_creatable = input;
        self
    }
    /// <p> Specifies if the destination field can be created by the current user. </p>
    pub fn get_is_creatable(&self) -> &::std::option::Option<bool> {
        &self.is_creatable
    }
    /// <p> Specifies if the destination field can have a null value. </p>
    pub fn is_nullable(mut self, input: bool) -> Self {
        self.is_nullable = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies if the destination field can have a null value. </p>
    pub fn set_is_nullable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_nullable = input;
        self
    }
    /// <p> Specifies if the destination field can have a null value. </p>
    pub fn get_is_nullable(&self) -> &::std::option::Option<bool> {
        &self.is_nullable
    }
    /// <p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>
    pub fn is_upsertable(mut self, input: bool) -> Self {
        self.is_upsertable = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>
    pub fn set_is_upsertable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_upsertable = input;
        self
    }
    /// <p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>
    pub fn get_is_upsertable(&self) -> &::std::option::Option<bool> {
        &self.is_upsertable
    }
    /// <p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>
    pub fn is_updatable(mut self, input: bool) -> Self {
        self.is_updatable = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>
    pub fn set_is_updatable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_updatable = input;
        self
    }
    /// <p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>
    pub fn get_is_updatable(&self) -> &::std::option::Option<bool> {
        &self.is_updatable
    }
    /// <p>Specifies whether the field can use the default value during a Create operation.</p>
    pub fn is_defaulted_on_create(mut self, input: bool) -> Self {
        self.is_defaulted_on_create = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the field can use the default value during a Create operation.</p>
    pub fn set_is_defaulted_on_create(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_defaulted_on_create = input;
        self
    }
    /// <p>Specifies whether the field can use the default value during a Create operation.</p>
    pub fn get_is_defaulted_on_create(&self) -> &::std::option::Option<bool> {
        &self.is_defaulted_on_create
    }
    /// Appends an item to `supported_write_operations`.
    ///
    /// To override the contents of this collection use [`set_supported_write_operations`](Self::set_supported_write_operations).
    ///
    /// <p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>
    pub fn supported_write_operations(mut self, input: crate::types::WriteOperationType) -> Self {
        let mut v = self.supported_write_operations.unwrap_or_default();
        v.push(input);
        self.supported_write_operations = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>
    pub fn set_supported_write_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WriteOperationType>>) -> Self {
        self.supported_write_operations = input;
        self
    }
    /// <p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>
    pub fn get_supported_write_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WriteOperationType>> {
        &self.supported_write_operations
    }
    /// Consumes the builder and constructs a [`DestinationFieldProperties`](crate::types::DestinationFieldProperties).
    pub fn build(self) -> crate::types::DestinationFieldProperties {
        crate::types::DestinationFieldProperties {
            is_creatable: self.is_creatable.unwrap_or_default(),
            is_nullable: self.is_nullable.unwrap_or_default(),
            is_upsertable: self.is_upsertable.unwrap_or_default(),
            is_updatable: self.is_updatable.unwrap_or_default(),
            is_defaulted_on_create: self.is_defaulted_on_create.unwrap_or_default(),
            supported_write_operations: self.supported_write_operations,
        }
    }
}
