// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the authentication config that the connector supports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthenticationConfig {
    /// <p>Indicates whether basic authentication is supported by the connector.</p>
    #[doc(hidden)]
    pub is_basic_auth_supported: bool,
    /// <p>Indicates whether API key authentication is supported by the connector</p>
    #[doc(hidden)]
    pub is_api_key_auth_supported: bool,
    /// <p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>
    #[doc(hidden)]
    pub is_o_auth2_supported: bool,
    /// <p>Indicates whether custom authentication is supported by the connector</p>
    #[doc(hidden)]
    pub is_custom_auth_supported: bool,
    /// <p>Contains the default values required for OAuth 2.0 authentication.</p>
    #[doc(hidden)]
    pub o_auth2_defaults: std::option::Option<crate::types::OAuth2Defaults>,
    /// <p>Contains information required for custom authentication.</p>
    #[doc(hidden)]
    pub custom_auth_configs: std::option::Option<std::vec::Vec<crate::types::CustomAuthConfig>>,
}
impl AuthenticationConfig {
    /// <p>Indicates whether basic authentication is supported by the connector.</p>
    pub fn is_basic_auth_supported(&self) -> bool {
        self.is_basic_auth_supported
    }
    /// <p>Indicates whether API key authentication is supported by the connector</p>
    pub fn is_api_key_auth_supported(&self) -> bool {
        self.is_api_key_auth_supported
    }
    /// <p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>
    pub fn is_o_auth2_supported(&self) -> bool {
        self.is_o_auth2_supported
    }
    /// <p>Indicates whether custom authentication is supported by the connector</p>
    pub fn is_custom_auth_supported(&self) -> bool {
        self.is_custom_auth_supported
    }
    /// <p>Contains the default values required for OAuth 2.0 authentication.</p>
    pub fn o_auth2_defaults(&self) -> std::option::Option<&crate::types::OAuth2Defaults> {
        self.o_auth2_defaults.as_ref()
    }
    /// <p>Contains information required for custom authentication.</p>
    pub fn custom_auth_configs(&self) -> std::option::Option<&[crate::types::CustomAuthConfig]> {
        self.custom_auth_configs.as_deref()
    }
}
impl AuthenticationConfig {
    /// Creates a new builder-style object to manufacture [`AuthenticationConfig`](crate::types::AuthenticationConfig).
    pub fn builder() -> crate::types::builders::AuthenticationConfigBuilder {
        crate::types::builders::AuthenticationConfigBuilder::default()
    }
}

/// A builder for [`AuthenticationConfig`](crate::types::AuthenticationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthenticationConfigBuilder {
    pub(crate) is_basic_auth_supported: std::option::Option<bool>,
    pub(crate) is_api_key_auth_supported: std::option::Option<bool>,
    pub(crate) is_o_auth2_supported: std::option::Option<bool>,
    pub(crate) is_custom_auth_supported: std::option::Option<bool>,
    pub(crate) o_auth2_defaults: std::option::Option<crate::types::OAuth2Defaults>,
    pub(crate) custom_auth_configs:
        std::option::Option<std::vec::Vec<crate::types::CustomAuthConfig>>,
}
impl AuthenticationConfigBuilder {
    /// <p>Indicates whether basic authentication is supported by the connector.</p>
    pub fn is_basic_auth_supported(mut self, input: bool) -> Self {
        self.is_basic_auth_supported = Some(input);
        self
    }
    /// <p>Indicates whether basic authentication is supported by the connector.</p>
    pub fn set_is_basic_auth_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.is_basic_auth_supported = input;
        self
    }
    /// <p>Indicates whether API key authentication is supported by the connector</p>
    pub fn is_api_key_auth_supported(mut self, input: bool) -> Self {
        self.is_api_key_auth_supported = Some(input);
        self
    }
    /// <p>Indicates whether API key authentication is supported by the connector</p>
    pub fn set_is_api_key_auth_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.is_api_key_auth_supported = input;
        self
    }
    /// <p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>
    pub fn is_o_auth2_supported(mut self, input: bool) -> Self {
        self.is_o_auth2_supported = Some(input);
        self
    }
    /// <p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>
    pub fn set_is_o_auth2_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.is_o_auth2_supported = input;
        self
    }
    /// <p>Indicates whether custom authentication is supported by the connector</p>
    pub fn is_custom_auth_supported(mut self, input: bool) -> Self {
        self.is_custom_auth_supported = Some(input);
        self
    }
    /// <p>Indicates whether custom authentication is supported by the connector</p>
    pub fn set_is_custom_auth_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.is_custom_auth_supported = input;
        self
    }
    /// <p>Contains the default values required for OAuth 2.0 authentication.</p>
    pub fn o_auth2_defaults(mut self, input: crate::types::OAuth2Defaults) -> Self {
        self.o_auth2_defaults = Some(input);
        self
    }
    /// <p>Contains the default values required for OAuth 2.0 authentication.</p>
    pub fn set_o_auth2_defaults(
        mut self,
        input: std::option::Option<crate::types::OAuth2Defaults>,
    ) -> Self {
        self.o_auth2_defaults = input;
        self
    }
    /// Appends an item to `custom_auth_configs`.
    ///
    /// To override the contents of this collection use [`set_custom_auth_configs`](Self::set_custom_auth_configs).
    ///
    /// <p>Contains information required for custom authentication.</p>
    pub fn custom_auth_configs(mut self, input: crate::types::CustomAuthConfig) -> Self {
        let mut v = self.custom_auth_configs.unwrap_or_default();
        v.push(input);
        self.custom_auth_configs = Some(v);
        self
    }
    /// <p>Contains information required for custom authentication.</p>
    pub fn set_custom_auth_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CustomAuthConfig>>,
    ) -> Self {
        self.custom_auth_configs = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthenticationConfig`](crate::types::AuthenticationConfig).
    pub fn build(self) -> crate::types::AuthenticationConfig {
        crate::types::AuthenticationConfig {
            is_basic_auth_supported: self.is_basic_auth_supported.unwrap_or_default(),
            is_api_key_auth_supported: self.is_api_key_auth_supported.unwrap_or_default(),
            is_o_auth2_supported: self.is_o_auth2_supported.unwrap_or_default(),
            is_custom_auth_supported: self.is_custom_auth_supported.unwrap_or_default(),
            o_auth2_defaults: self.o_auth2_defaults,
            custom_auth_configs: self.custom_auth_configs,
        }
    }
}
