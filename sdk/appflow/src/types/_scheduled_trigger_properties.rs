// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduledTriggerProperties {
    /// <p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>
    #[doc(hidden)]
    pub schedule_expression: std::option::Option<std::string::String>,
    /// <p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>
    #[doc(hidden)]
    pub data_pull_mode: std::option::Option<crate::types::DataPullMode>,
    /// <p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>
    #[doc(hidden)]
    pub schedule_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>
    #[doc(hidden)]
    pub schedule_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p>
    /// <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>
    #[doc(hidden)]
    pub timezone: std::option::Option<std::string::String>,
    /// <p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>
    #[doc(hidden)]
    pub schedule_offset: std::option::Option<i64>,
    /// <p> Specifies the date range for the records to import from the connector in the first flow run. </p>
    #[doc(hidden)]
    pub first_execution_from: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>
    #[doc(hidden)]
    pub flow_error_deactivation_threshold: std::option::Option<i32>,
}
impl ScheduledTriggerProperties {
    /// <p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>
    pub fn schedule_expression(&self) -> std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
    /// <p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>
    pub fn data_pull_mode(&self) -> std::option::Option<&crate::types::DataPullMode> {
        self.data_pull_mode.as_ref()
    }
    /// <p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>
    pub fn schedule_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.schedule_start_time.as_ref()
    }
    /// <p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>
    pub fn schedule_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.schedule_end_time.as_ref()
    }
    /// <p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p>
    /// <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>
    pub fn timezone(&self) -> std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>
    pub fn schedule_offset(&self) -> std::option::Option<i64> {
        self.schedule_offset
    }
    /// <p> Specifies the date range for the records to import from the connector in the first flow run. </p>
    pub fn first_execution_from(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.first_execution_from.as_ref()
    }
    /// <p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>
    pub fn flow_error_deactivation_threshold(&self) -> std::option::Option<i32> {
        self.flow_error_deactivation_threshold
    }
}
impl ScheduledTriggerProperties {
    /// Creates a new builder-style object to manufacture [`ScheduledTriggerProperties`](crate::types::ScheduledTriggerProperties).
    pub fn builder() -> crate::types::builders::ScheduledTriggerPropertiesBuilder {
        crate::types::builders::ScheduledTriggerPropertiesBuilder::default()
    }
}

/// A builder for [`ScheduledTriggerProperties`](crate::types::ScheduledTriggerProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduledTriggerPropertiesBuilder {
    pub(crate) schedule_expression: std::option::Option<std::string::String>,
    pub(crate) data_pull_mode: std::option::Option<crate::types::DataPullMode>,
    pub(crate) schedule_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) schedule_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) timezone: std::option::Option<std::string::String>,
    pub(crate) schedule_offset: std::option::Option<i64>,
    pub(crate) first_execution_from: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) flow_error_deactivation_threshold: std::option::Option<i32>,
}
impl ScheduledTriggerPropertiesBuilder {
    /// <p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>
    pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_expression = Some(input.into());
        self
    }
    /// <p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>
    pub fn set_schedule_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schedule_expression = input;
        self
    }
    /// <p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>
    pub fn data_pull_mode(mut self, input: crate::types::DataPullMode) -> Self {
        self.data_pull_mode = Some(input);
        self
    }
    /// <p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>
    pub fn set_data_pull_mode(
        mut self,
        input: std::option::Option<crate::types::DataPullMode>,
    ) -> Self {
        self.data_pull_mode = input;
        self
    }
    /// <p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>
    pub fn schedule_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.schedule_start_time = Some(input);
        self
    }
    /// <p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>
    pub fn set_schedule_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.schedule_start_time = input;
        self
    }
    /// <p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>
    pub fn schedule_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.schedule_end_time = Some(input);
        self
    }
    /// <p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>
    pub fn set_schedule_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.schedule_end_time = input;
        self
    }
    /// <p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p>
    /// <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>
    pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.timezone = Some(input.into());
        self
    }
    /// <p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p>
    /// <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>
    pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>
    pub fn schedule_offset(mut self, input: i64) -> Self {
        self.schedule_offset = Some(input);
        self
    }
    /// <p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>
    pub fn set_schedule_offset(mut self, input: std::option::Option<i64>) -> Self {
        self.schedule_offset = input;
        self
    }
    /// <p> Specifies the date range for the records to import from the connector in the first flow run. </p>
    pub fn first_execution_from(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.first_execution_from = Some(input);
        self
    }
    /// <p> Specifies the date range for the records to import from the connector in the first flow run. </p>
    pub fn set_first_execution_from(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.first_execution_from = input;
        self
    }
    /// <p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>
    pub fn flow_error_deactivation_threshold(mut self, input: i32) -> Self {
        self.flow_error_deactivation_threshold = Some(input);
        self
    }
    /// <p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>
    pub fn set_flow_error_deactivation_threshold(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.flow_error_deactivation_threshold = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledTriggerProperties`](crate::types::ScheduledTriggerProperties).
    pub fn build(self) -> crate::types::ScheduledTriggerProperties {
        crate::types::ScheduledTriggerProperties {
            schedule_expression: self.schedule_expression,
            data_pull_mode: self.data_pull_mode,
            schedule_start_time: self.schedule_start_time,
            schedule_end_time: self.schedule_end_time,
            timezone: self.timezone,
            schedule_offset: self.schedule_offset,
            first_execution_from: self.first_execution_from,
            flow_error_deactivation_threshold: self.flow_error_deactivation_threshold,
        }
    }
}
