// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that are applied when Amazon EventBridge is being used as a destination. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventBridgeDestinationProperties {
    /// <p> The object specified in the Amazon EventBridge flow destination. </p>
    pub object: ::std::string::String,
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub error_handling_config: ::std::option::Option<crate::types::ErrorHandlingConfig>,
}
impl EventBridgeDestinationProperties {
    /// <p> The object specified in the Amazon EventBridge flow destination. </p>
    pub fn object(&self) -> &str {
        use std::ops::Deref;
        self.object.deref()
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(&self) -> ::std::option::Option<&crate::types::ErrorHandlingConfig> {
        self.error_handling_config.as_ref()
    }
}
impl EventBridgeDestinationProperties {
    /// Creates a new builder-style object to manufacture [`EventBridgeDestinationProperties`](crate::types::EventBridgeDestinationProperties).
    pub fn builder() -> crate::types::builders::EventBridgeDestinationPropertiesBuilder {
        crate::types::builders::EventBridgeDestinationPropertiesBuilder::default()
    }
}

/// A builder for [`EventBridgeDestinationProperties`](crate::types::EventBridgeDestinationProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventBridgeDestinationPropertiesBuilder {
    pub(crate) object: ::std::option::Option<::std::string::String>,
    pub(crate) error_handling_config: ::std::option::Option<crate::types::ErrorHandlingConfig>,
}
impl EventBridgeDestinationPropertiesBuilder {
    /// <p> The object specified in the Amazon EventBridge flow destination. </p>
    /// This field is required.
    pub fn object(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The object specified in the Amazon EventBridge flow destination. </p>
    pub fn set_object(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object = input;
        self
    }
    /// <p> The object specified in the Amazon EventBridge flow destination. </p>
    pub fn get_object(&self) -> &::std::option::Option<::std::string::String> {
        &self.object
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(mut self, input: crate::types::ErrorHandlingConfig) -> Self {
        self.error_handling_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn set_error_handling_config(mut self, input: ::std::option::Option<crate::types::ErrorHandlingConfig>) -> Self {
        self.error_handling_config = input;
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn get_error_handling_config(&self) -> &::std::option::Option<crate::types::ErrorHandlingConfig> {
        &self.error_handling_config
    }
    /// Consumes the builder and constructs a [`EventBridgeDestinationProperties`](crate::types::EventBridgeDestinationProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`object`](crate::types::builders::EventBridgeDestinationPropertiesBuilder::object)
    pub fn build(self) -> ::std::result::Result<crate::types::EventBridgeDestinationProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventBridgeDestinationProperties {
            object: self.object.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object",
                    "object was not specified but it is required when building EventBridgeDestinationProperties",
                )
            })?,
            error_handling_config: self.error_handling_config,
        })
    }
}
