// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectorMetadata {
    /// <p> The connector metadata specific to Amplitude. </p>
    #[doc(hidden)]
    pub amplitude: std::option::Option<crate::types::AmplitudeMetadata>,
    /// <p> The connector metadata specific to Datadog. </p>
    #[doc(hidden)]
    pub datadog: std::option::Option<crate::types::DatadogMetadata>,
    /// <p> The connector metadata specific to Dynatrace. </p>
    #[doc(hidden)]
    pub dynatrace: std::option::Option<crate::types::DynatraceMetadata>,
    /// <p> The connector metadata specific to Google Analytics. </p>
    #[doc(hidden)]
    pub google_analytics: std::option::Option<crate::types::GoogleAnalyticsMetadata>,
    /// <p> The connector metadata specific to Infor Nexus. </p>
    #[doc(hidden)]
    pub infor_nexus: std::option::Option<crate::types::InforNexusMetadata>,
    /// <p> The connector metadata specific to Marketo. </p>
    #[doc(hidden)]
    pub marketo: std::option::Option<crate::types::MarketoMetadata>,
    /// <p> The connector metadata specific to Amazon Redshift. </p>
    #[doc(hidden)]
    pub redshift: std::option::Option<crate::types::RedshiftMetadata>,
    /// <p> The connector metadata specific to Amazon S3. </p>
    #[doc(hidden)]
    pub s3: std::option::Option<crate::types::S3Metadata>,
    /// <p> The connector metadata specific to Salesforce. </p>
    #[doc(hidden)]
    pub salesforce: std::option::Option<crate::types::SalesforceMetadata>,
    /// <p> The connector metadata specific to ServiceNow. </p>
    #[doc(hidden)]
    pub service_now: std::option::Option<crate::types::ServiceNowMetadata>,
    /// <p> The connector metadata specific to Singular. </p>
    #[doc(hidden)]
    pub singular: std::option::Option<crate::types::SingularMetadata>,
    /// <p> The connector metadata specific to Slack. </p>
    #[doc(hidden)]
    pub slack: std::option::Option<crate::types::SlackMetadata>,
    /// <p> The connector metadata specific to Snowflake. </p>
    #[doc(hidden)]
    pub snowflake: std::option::Option<crate::types::SnowflakeMetadata>,
    /// <p> The connector metadata specific to Trend Micro. </p>
    #[doc(hidden)]
    pub trendmicro: std::option::Option<crate::types::TrendmicroMetadata>,
    /// <p> The connector metadata specific to Veeva. </p>
    #[doc(hidden)]
    pub veeva: std::option::Option<crate::types::VeevaMetadata>,
    /// <p> The connector metadata specific to Zendesk. </p>
    #[doc(hidden)]
    pub zendesk: std::option::Option<crate::types::ZendeskMetadata>,
    /// <p> The connector metadata specific to Amazon EventBridge. </p>
    #[doc(hidden)]
    pub event_bridge: std::option::Option<crate::types::EventBridgeMetadata>,
    /// <p> The connector metadata specific to Upsolver. </p>
    #[doc(hidden)]
    pub upsolver: std::option::Option<crate::types::UpsolverMetadata>,
    /// <p> The connector metadata specific to Amazon Connect Customer Profiles. </p>
    #[doc(hidden)]
    pub customer_profiles: std::option::Option<crate::types::CustomerProfilesMetadata>,
    /// <p> The connector metadata specific to Amazon Honeycode. </p>
    #[doc(hidden)]
    pub honeycode: std::option::Option<crate::types::HoneycodeMetadata>,
    /// <p> The connector metadata specific to SAPOData. </p>
    #[doc(hidden)]
    pub sapo_data: std::option::Option<crate::types::SapoDataMetadata>,
    /// <p>The connector metadata specific to Salesforce Pardot.</p>
    #[doc(hidden)]
    pub pardot: std::option::Option<crate::types::PardotMetadata>,
}
impl ConnectorMetadata {
    /// <p> The connector metadata specific to Amplitude. </p>
    pub fn amplitude(&self) -> std::option::Option<&crate::types::AmplitudeMetadata> {
        self.amplitude.as_ref()
    }
    /// <p> The connector metadata specific to Datadog. </p>
    pub fn datadog(&self) -> std::option::Option<&crate::types::DatadogMetadata> {
        self.datadog.as_ref()
    }
    /// <p> The connector metadata specific to Dynatrace. </p>
    pub fn dynatrace(&self) -> std::option::Option<&crate::types::DynatraceMetadata> {
        self.dynatrace.as_ref()
    }
    /// <p> The connector metadata specific to Google Analytics. </p>
    pub fn google_analytics(&self) -> std::option::Option<&crate::types::GoogleAnalyticsMetadata> {
        self.google_analytics.as_ref()
    }
    /// <p> The connector metadata specific to Infor Nexus. </p>
    pub fn infor_nexus(&self) -> std::option::Option<&crate::types::InforNexusMetadata> {
        self.infor_nexus.as_ref()
    }
    /// <p> The connector metadata specific to Marketo. </p>
    pub fn marketo(&self) -> std::option::Option<&crate::types::MarketoMetadata> {
        self.marketo.as_ref()
    }
    /// <p> The connector metadata specific to Amazon Redshift. </p>
    pub fn redshift(&self) -> std::option::Option<&crate::types::RedshiftMetadata> {
        self.redshift.as_ref()
    }
    /// <p> The connector metadata specific to Amazon S3. </p>
    pub fn s3(&self) -> std::option::Option<&crate::types::S3Metadata> {
        self.s3.as_ref()
    }
    /// <p> The connector metadata specific to Salesforce. </p>
    pub fn salesforce(&self) -> std::option::Option<&crate::types::SalesforceMetadata> {
        self.salesforce.as_ref()
    }
    /// <p> The connector metadata specific to ServiceNow. </p>
    pub fn service_now(&self) -> std::option::Option<&crate::types::ServiceNowMetadata> {
        self.service_now.as_ref()
    }
    /// <p> The connector metadata specific to Singular. </p>
    pub fn singular(&self) -> std::option::Option<&crate::types::SingularMetadata> {
        self.singular.as_ref()
    }
    /// <p> The connector metadata specific to Slack. </p>
    pub fn slack(&self) -> std::option::Option<&crate::types::SlackMetadata> {
        self.slack.as_ref()
    }
    /// <p> The connector metadata specific to Snowflake. </p>
    pub fn snowflake(&self) -> std::option::Option<&crate::types::SnowflakeMetadata> {
        self.snowflake.as_ref()
    }
    /// <p> The connector metadata specific to Trend Micro. </p>
    pub fn trendmicro(&self) -> std::option::Option<&crate::types::TrendmicroMetadata> {
        self.trendmicro.as_ref()
    }
    /// <p> The connector metadata specific to Veeva. </p>
    pub fn veeva(&self) -> std::option::Option<&crate::types::VeevaMetadata> {
        self.veeva.as_ref()
    }
    /// <p> The connector metadata specific to Zendesk. </p>
    pub fn zendesk(&self) -> std::option::Option<&crate::types::ZendeskMetadata> {
        self.zendesk.as_ref()
    }
    /// <p> The connector metadata specific to Amazon EventBridge. </p>
    pub fn event_bridge(&self) -> std::option::Option<&crate::types::EventBridgeMetadata> {
        self.event_bridge.as_ref()
    }
    /// <p> The connector metadata specific to Upsolver. </p>
    pub fn upsolver(&self) -> std::option::Option<&crate::types::UpsolverMetadata> {
        self.upsolver.as_ref()
    }
    /// <p> The connector metadata specific to Amazon Connect Customer Profiles. </p>
    pub fn customer_profiles(
        &self,
    ) -> std::option::Option<&crate::types::CustomerProfilesMetadata> {
        self.customer_profiles.as_ref()
    }
    /// <p> The connector metadata specific to Amazon Honeycode. </p>
    pub fn honeycode(&self) -> std::option::Option<&crate::types::HoneycodeMetadata> {
        self.honeycode.as_ref()
    }
    /// <p> The connector metadata specific to SAPOData. </p>
    pub fn sapo_data(&self) -> std::option::Option<&crate::types::SapoDataMetadata> {
        self.sapo_data.as_ref()
    }
    /// <p>The connector metadata specific to Salesforce Pardot.</p>
    pub fn pardot(&self) -> std::option::Option<&crate::types::PardotMetadata> {
        self.pardot.as_ref()
    }
}
impl ConnectorMetadata {
    /// Creates a new builder-style object to manufacture [`ConnectorMetadata`](crate::types::ConnectorMetadata).
    pub fn builder() -> crate::types::builders::ConnectorMetadataBuilder {
        crate::types::builders::ConnectorMetadataBuilder::default()
    }
}

/// A builder for [`ConnectorMetadata`](crate::types::ConnectorMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectorMetadataBuilder {
    pub(crate) amplitude: std::option::Option<crate::types::AmplitudeMetadata>,
    pub(crate) datadog: std::option::Option<crate::types::DatadogMetadata>,
    pub(crate) dynatrace: std::option::Option<crate::types::DynatraceMetadata>,
    pub(crate) google_analytics: std::option::Option<crate::types::GoogleAnalyticsMetadata>,
    pub(crate) infor_nexus: std::option::Option<crate::types::InforNexusMetadata>,
    pub(crate) marketo: std::option::Option<crate::types::MarketoMetadata>,
    pub(crate) redshift: std::option::Option<crate::types::RedshiftMetadata>,
    pub(crate) s3: std::option::Option<crate::types::S3Metadata>,
    pub(crate) salesforce: std::option::Option<crate::types::SalesforceMetadata>,
    pub(crate) service_now: std::option::Option<crate::types::ServiceNowMetadata>,
    pub(crate) singular: std::option::Option<crate::types::SingularMetadata>,
    pub(crate) slack: std::option::Option<crate::types::SlackMetadata>,
    pub(crate) snowflake: std::option::Option<crate::types::SnowflakeMetadata>,
    pub(crate) trendmicro: std::option::Option<crate::types::TrendmicroMetadata>,
    pub(crate) veeva: std::option::Option<crate::types::VeevaMetadata>,
    pub(crate) zendesk: std::option::Option<crate::types::ZendeskMetadata>,
    pub(crate) event_bridge: std::option::Option<crate::types::EventBridgeMetadata>,
    pub(crate) upsolver: std::option::Option<crate::types::UpsolverMetadata>,
    pub(crate) customer_profiles: std::option::Option<crate::types::CustomerProfilesMetadata>,
    pub(crate) honeycode: std::option::Option<crate::types::HoneycodeMetadata>,
    pub(crate) sapo_data: std::option::Option<crate::types::SapoDataMetadata>,
    pub(crate) pardot: std::option::Option<crate::types::PardotMetadata>,
}
impl ConnectorMetadataBuilder {
    /// <p> The connector metadata specific to Amplitude. </p>
    pub fn amplitude(mut self, input: crate::types::AmplitudeMetadata) -> Self {
        self.amplitude = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amplitude. </p>
    pub fn set_amplitude(
        mut self,
        input: std::option::Option<crate::types::AmplitudeMetadata>,
    ) -> Self {
        self.amplitude = input;
        self
    }
    /// <p> The connector metadata specific to Datadog. </p>
    pub fn datadog(mut self, input: crate::types::DatadogMetadata) -> Self {
        self.datadog = Some(input);
        self
    }
    /// <p> The connector metadata specific to Datadog. </p>
    pub fn set_datadog(
        mut self,
        input: std::option::Option<crate::types::DatadogMetadata>,
    ) -> Self {
        self.datadog = input;
        self
    }
    /// <p> The connector metadata specific to Dynatrace. </p>
    pub fn dynatrace(mut self, input: crate::types::DynatraceMetadata) -> Self {
        self.dynatrace = Some(input);
        self
    }
    /// <p> The connector metadata specific to Dynatrace. </p>
    pub fn set_dynatrace(
        mut self,
        input: std::option::Option<crate::types::DynatraceMetadata>,
    ) -> Self {
        self.dynatrace = input;
        self
    }
    /// <p> The connector metadata specific to Google Analytics. </p>
    pub fn google_analytics(mut self, input: crate::types::GoogleAnalyticsMetadata) -> Self {
        self.google_analytics = Some(input);
        self
    }
    /// <p> The connector metadata specific to Google Analytics. </p>
    pub fn set_google_analytics(
        mut self,
        input: std::option::Option<crate::types::GoogleAnalyticsMetadata>,
    ) -> Self {
        self.google_analytics = input;
        self
    }
    /// <p> The connector metadata specific to Infor Nexus. </p>
    pub fn infor_nexus(mut self, input: crate::types::InforNexusMetadata) -> Self {
        self.infor_nexus = Some(input);
        self
    }
    /// <p> The connector metadata specific to Infor Nexus. </p>
    pub fn set_infor_nexus(
        mut self,
        input: std::option::Option<crate::types::InforNexusMetadata>,
    ) -> Self {
        self.infor_nexus = input;
        self
    }
    /// <p> The connector metadata specific to Marketo. </p>
    pub fn marketo(mut self, input: crate::types::MarketoMetadata) -> Self {
        self.marketo = Some(input);
        self
    }
    /// <p> The connector metadata specific to Marketo. </p>
    pub fn set_marketo(
        mut self,
        input: std::option::Option<crate::types::MarketoMetadata>,
    ) -> Self {
        self.marketo = input;
        self
    }
    /// <p> The connector metadata specific to Amazon Redshift. </p>
    pub fn redshift(mut self, input: crate::types::RedshiftMetadata) -> Self {
        self.redshift = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amazon Redshift. </p>
    pub fn set_redshift(
        mut self,
        input: std::option::Option<crate::types::RedshiftMetadata>,
    ) -> Self {
        self.redshift = input;
        self
    }
    /// <p> The connector metadata specific to Amazon S3. </p>
    pub fn s3(mut self, input: crate::types::S3Metadata) -> Self {
        self.s3 = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amazon S3. </p>
    pub fn set_s3(mut self, input: std::option::Option<crate::types::S3Metadata>) -> Self {
        self.s3 = input;
        self
    }
    /// <p> The connector metadata specific to Salesforce. </p>
    pub fn salesforce(mut self, input: crate::types::SalesforceMetadata) -> Self {
        self.salesforce = Some(input);
        self
    }
    /// <p> The connector metadata specific to Salesforce. </p>
    pub fn set_salesforce(
        mut self,
        input: std::option::Option<crate::types::SalesforceMetadata>,
    ) -> Self {
        self.salesforce = input;
        self
    }
    /// <p> The connector metadata specific to ServiceNow. </p>
    pub fn service_now(mut self, input: crate::types::ServiceNowMetadata) -> Self {
        self.service_now = Some(input);
        self
    }
    /// <p> The connector metadata specific to ServiceNow. </p>
    pub fn set_service_now(
        mut self,
        input: std::option::Option<crate::types::ServiceNowMetadata>,
    ) -> Self {
        self.service_now = input;
        self
    }
    /// <p> The connector metadata specific to Singular. </p>
    pub fn singular(mut self, input: crate::types::SingularMetadata) -> Self {
        self.singular = Some(input);
        self
    }
    /// <p> The connector metadata specific to Singular. </p>
    pub fn set_singular(
        mut self,
        input: std::option::Option<crate::types::SingularMetadata>,
    ) -> Self {
        self.singular = input;
        self
    }
    /// <p> The connector metadata specific to Slack. </p>
    pub fn slack(mut self, input: crate::types::SlackMetadata) -> Self {
        self.slack = Some(input);
        self
    }
    /// <p> The connector metadata specific to Slack. </p>
    pub fn set_slack(mut self, input: std::option::Option<crate::types::SlackMetadata>) -> Self {
        self.slack = input;
        self
    }
    /// <p> The connector metadata specific to Snowflake. </p>
    pub fn snowflake(mut self, input: crate::types::SnowflakeMetadata) -> Self {
        self.snowflake = Some(input);
        self
    }
    /// <p> The connector metadata specific to Snowflake. </p>
    pub fn set_snowflake(
        mut self,
        input: std::option::Option<crate::types::SnowflakeMetadata>,
    ) -> Self {
        self.snowflake = input;
        self
    }
    /// <p> The connector metadata specific to Trend Micro. </p>
    pub fn trendmicro(mut self, input: crate::types::TrendmicroMetadata) -> Self {
        self.trendmicro = Some(input);
        self
    }
    /// <p> The connector metadata specific to Trend Micro. </p>
    pub fn set_trendmicro(
        mut self,
        input: std::option::Option<crate::types::TrendmicroMetadata>,
    ) -> Self {
        self.trendmicro = input;
        self
    }
    /// <p> The connector metadata specific to Veeva. </p>
    pub fn veeva(mut self, input: crate::types::VeevaMetadata) -> Self {
        self.veeva = Some(input);
        self
    }
    /// <p> The connector metadata specific to Veeva. </p>
    pub fn set_veeva(mut self, input: std::option::Option<crate::types::VeevaMetadata>) -> Self {
        self.veeva = input;
        self
    }
    /// <p> The connector metadata specific to Zendesk. </p>
    pub fn zendesk(mut self, input: crate::types::ZendeskMetadata) -> Self {
        self.zendesk = Some(input);
        self
    }
    /// <p> The connector metadata specific to Zendesk. </p>
    pub fn set_zendesk(
        mut self,
        input: std::option::Option<crate::types::ZendeskMetadata>,
    ) -> Self {
        self.zendesk = input;
        self
    }
    /// <p> The connector metadata specific to Amazon EventBridge. </p>
    pub fn event_bridge(mut self, input: crate::types::EventBridgeMetadata) -> Self {
        self.event_bridge = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amazon EventBridge. </p>
    pub fn set_event_bridge(
        mut self,
        input: std::option::Option<crate::types::EventBridgeMetadata>,
    ) -> Self {
        self.event_bridge = input;
        self
    }
    /// <p> The connector metadata specific to Upsolver. </p>
    pub fn upsolver(mut self, input: crate::types::UpsolverMetadata) -> Self {
        self.upsolver = Some(input);
        self
    }
    /// <p> The connector metadata specific to Upsolver. </p>
    pub fn set_upsolver(
        mut self,
        input: std::option::Option<crate::types::UpsolverMetadata>,
    ) -> Self {
        self.upsolver = input;
        self
    }
    /// <p> The connector metadata specific to Amazon Connect Customer Profiles. </p>
    pub fn customer_profiles(mut self, input: crate::types::CustomerProfilesMetadata) -> Self {
        self.customer_profiles = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amazon Connect Customer Profiles. </p>
    pub fn set_customer_profiles(
        mut self,
        input: std::option::Option<crate::types::CustomerProfilesMetadata>,
    ) -> Self {
        self.customer_profiles = input;
        self
    }
    /// <p> The connector metadata specific to Amazon Honeycode. </p>
    pub fn honeycode(mut self, input: crate::types::HoneycodeMetadata) -> Self {
        self.honeycode = Some(input);
        self
    }
    /// <p> The connector metadata specific to Amazon Honeycode. </p>
    pub fn set_honeycode(
        mut self,
        input: std::option::Option<crate::types::HoneycodeMetadata>,
    ) -> Self {
        self.honeycode = input;
        self
    }
    /// <p> The connector metadata specific to SAPOData. </p>
    pub fn sapo_data(mut self, input: crate::types::SapoDataMetadata) -> Self {
        self.sapo_data = Some(input);
        self
    }
    /// <p> The connector metadata specific to SAPOData. </p>
    pub fn set_sapo_data(
        mut self,
        input: std::option::Option<crate::types::SapoDataMetadata>,
    ) -> Self {
        self.sapo_data = input;
        self
    }
    /// <p>The connector metadata specific to Salesforce Pardot.</p>
    pub fn pardot(mut self, input: crate::types::PardotMetadata) -> Self {
        self.pardot = Some(input);
        self
    }
    /// <p>The connector metadata specific to Salesforce Pardot.</p>
    pub fn set_pardot(mut self, input: std::option::Option<crate::types::PardotMetadata>) -> Self {
        self.pardot = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectorMetadata`](crate::types::ConnectorMetadata).
    pub fn build(self) -> crate::types::ConnectorMetadata {
        crate::types::ConnectorMetadata {
            amplitude: self.amplitude,
            datadog: self.datadog,
            dynatrace: self.dynatrace,
            google_analytics: self.google_analytics,
            infor_nexus: self.infor_nexus,
            marketo: self.marketo,
            redshift: self.redshift,
            s3: self.s3,
            salesforce: self.salesforce,
            service_now: self.service_now,
            singular: self.singular,
            slack: self.slack,
            snowflake: self.snowflake,
            trendmicro: self.trendmicro,
            veeva: self.veeva,
            zendesk: self.zendesk,
            event_bridge: self.event_bridge,
            upsolver: self.upsolver,
            customer_profiles: self.customer_profiles,
            honeycode: self.honeycode,
            sapo_data: self.sapo_data,
            pardot: self.pardot,
        }
    }
}
