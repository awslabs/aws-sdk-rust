// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the connector runtime settings that are required for flow execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorRuntimeSetting {
    /// <p>Contains value information about the connector runtime setting.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>Data type of the connector runtime setting.</p>
    pub data_type: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether this connector runtime setting is required.</p>
    pub is_required: bool,
    /// <p>A label used for connector runtime setting.</p>
    pub label: ::std::option::Option<::std::string::String>,
    /// <p>A description about the connector runtime setting.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the scope of the connector runtime setting.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>Contains default values for the connector runtime setting that are supplied by the connector.</p>
    pub connector_supplied_value_options: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConnectorRuntimeSetting {
    /// <p>Contains value information about the connector runtime setting.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Data type of the connector runtime setting.</p>
    pub fn data_type(&self) -> ::std::option::Option<&str> {
        self.data_type.as_deref()
    }
    /// <p>Indicates whether this connector runtime setting is required.</p>
    pub fn is_required(&self) -> bool {
        self.is_required
    }
    /// <p>A label used for connector runtime setting.</p>
    pub fn label(&self) -> ::std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>A description about the connector runtime setting.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates the scope of the connector runtime setting.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>Contains default values for the connector runtime setting that are supplied by the connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.connector_supplied_value_options.is_none()`.
    pub fn connector_supplied_value_options(&self) -> &[::std::string::String] {
        self.connector_supplied_value_options.as_deref().unwrap_or_default()
    }
}
impl ConnectorRuntimeSetting {
    /// Creates a new builder-style object to manufacture [`ConnectorRuntimeSetting`](crate::types::ConnectorRuntimeSetting).
    pub fn builder() -> crate::types::builders::ConnectorRuntimeSettingBuilder {
        crate::types::builders::ConnectorRuntimeSettingBuilder::default()
    }
}

/// A builder for [`ConnectorRuntimeSetting`](crate::types::ConnectorRuntimeSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectorRuntimeSettingBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<::std::string::String>,
    pub(crate) is_required: ::std::option::Option<bool>,
    pub(crate) label: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) connector_supplied_value_options: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConnectorRuntimeSettingBuilder {
    /// <p>Contains value information about the connector runtime setting.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains value information about the connector runtime setting.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Contains value information about the connector runtime setting.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>Data type of the connector runtime setting.</p>
    pub fn data_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Data type of the connector runtime setting.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>Data type of the connector runtime setting.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_type
    }
    /// <p>Indicates whether this connector runtime setting is required.</p>
    pub fn is_required(mut self, input: bool) -> Self {
        self.is_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this connector runtime setting is required.</p>
    pub fn set_is_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_required = input;
        self
    }
    /// <p>Indicates whether this connector runtime setting is required.</p>
    pub fn get_is_required(&self) -> &::std::option::Option<bool> {
        &self.is_required
    }
    /// <p>A label used for connector runtime setting.</p>
    pub fn label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A label used for connector runtime setting.</p>
    pub fn set_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>A label used for connector runtime setting.</p>
    pub fn get_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.label
    }
    /// <p>A description about the connector runtime setting.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description about the connector runtime setting.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description about the connector runtime setting.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Indicates the scope of the connector runtime setting.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the scope of the connector runtime setting.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>Indicates the scope of the connector runtime setting.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// Appends an item to `connector_supplied_value_options`.
    ///
    /// To override the contents of this collection use [`set_connector_supplied_value_options`](Self::set_connector_supplied_value_options).
    ///
    /// <p>Contains default values for the connector runtime setting that are supplied by the connector.</p>
    pub fn connector_supplied_value_options(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.connector_supplied_value_options.unwrap_or_default();
        v.push(input.into());
        self.connector_supplied_value_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains default values for the connector runtime setting that are supplied by the connector.</p>
    pub fn set_connector_supplied_value_options(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.connector_supplied_value_options = input;
        self
    }
    /// <p>Contains default values for the connector runtime setting that are supplied by the connector.</p>
    pub fn get_connector_supplied_value_options(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.connector_supplied_value_options
    }
    /// Consumes the builder and constructs a [`ConnectorRuntimeSetting`](crate::types::ConnectorRuntimeSetting).
    pub fn build(self) -> crate::types::ConnectorRuntimeSetting {
        crate::types::ConnectorRuntimeSetting {
            key: self.key,
            data_type: self.data_type,
            is_required: self.is_required.unwrap_or_default(),
            label: self.label,
            description: self.description,
            scope: self.scope,
            connector_supplied_value_options: self.connector_supplied_value_options,
        }
    }
}
