// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the default values required for OAuth 2.0 authentication.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OAuth2Defaults {
    /// <p>OAuth 2.0 scopes that the connector supports.</p>
    #[doc(hidden)]
    pub oauth_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Token URLs that can be used for OAuth 2.0 authentication.</p>
    #[doc(hidden)]
    pub token_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>
    #[doc(hidden)]
    pub auth_code_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>OAuth 2.0 grant types supported by the connector.</p>
    #[doc(hidden)]
    pub oauth2_grant_types_supported:
        std::option::Option<std::vec::Vec<crate::types::OAuth2GrantType>>,
    /// <p>List of custom parameters required for OAuth 2.0 authentication.</p>
    #[doc(hidden)]
    pub oauth2_custom_properties:
        std::option::Option<std::vec::Vec<crate::types::OAuth2CustomParameter>>,
}
impl OAuth2Defaults {
    /// <p>OAuth 2.0 scopes that the connector supports.</p>
    pub fn oauth_scopes(&self) -> std::option::Option<&[std::string::String]> {
        self.oauth_scopes.as_deref()
    }
    /// <p>Token URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn token_urls(&self) -> std::option::Option<&[std::string::String]> {
        self.token_urls.as_deref()
    }
    /// <p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn auth_code_urls(&self) -> std::option::Option<&[std::string::String]> {
        self.auth_code_urls.as_deref()
    }
    /// <p>OAuth 2.0 grant types supported by the connector.</p>
    pub fn oauth2_grant_types_supported(
        &self,
    ) -> std::option::Option<&[crate::types::OAuth2GrantType]> {
        self.oauth2_grant_types_supported.as_deref()
    }
    /// <p>List of custom parameters required for OAuth 2.0 authentication.</p>
    pub fn oauth2_custom_properties(
        &self,
    ) -> std::option::Option<&[crate::types::OAuth2CustomParameter]> {
        self.oauth2_custom_properties.as_deref()
    }
}
impl OAuth2Defaults {
    /// Creates a new builder-style object to manufacture [`OAuth2Defaults`](crate::types::OAuth2Defaults).
    pub fn builder() -> crate::types::builders::OAuth2DefaultsBuilder {
        crate::types::builders::OAuth2DefaultsBuilder::default()
    }
}

/// A builder for [`OAuth2Defaults`](crate::types::OAuth2Defaults).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OAuth2DefaultsBuilder {
    pub(crate) oauth_scopes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) token_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) auth_code_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) oauth2_grant_types_supported:
        std::option::Option<std::vec::Vec<crate::types::OAuth2GrantType>>,
    pub(crate) oauth2_custom_properties:
        std::option::Option<std::vec::Vec<crate::types::OAuth2CustomParameter>>,
}
impl OAuth2DefaultsBuilder {
    /// Appends an item to `oauth_scopes`.
    ///
    /// To override the contents of this collection use [`set_oauth_scopes`](Self::set_oauth_scopes).
    ///
    /// <p>OAuth 2.0 scopes that the connector supports.</p>
    pub fn oauth_scopes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.oauth_scopes.unwrap_or_default();
        v.push(input.into());
        self.oauth_scopes = Some(v);
        self
    }
    /// <p>OAuth 2.0 scopes that the connector supports.</p>
    pub fn set_oauth_scopes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.oauth_scopes = input;
        self
    }
    /// Appends an item to `token_urls`.
    ///
    /// To override the contents of this collection use [`set_token_urls`](Self::set_token_urls).
    ///
    /// <p>Token URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn token_urls(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.token_urls.unwrap_or_default();
        v.push(input.into());
        self.token_urls = Some(v);
        self
    }
    /// <p>Token URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn set_token_urls(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.token_urls = input;
        self
    }
    /// Appends an item to `auth_code_urls`.
    ///
    /// To override the contents of this collection use [`set_auth_code_urls`](Self::set_auth_code_urls).
    ///
    /// <p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn auth_code_urls(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.auth_code_urls.unwrap_or_default();
        v.push(input.into());
        self.auth_code_urls = Some(v);
        self
    }
    /// <p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>
    pub fn set_auth_code_urls(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.auth_code_urls = input;
        self
    }
    /// Appends an item to `oauth2_grant_types_supported`.
    ///
    /// To override the contents of this collection use [`set_oauth2_grant_types_supported`](Self::set_oauth2_grant_types_supported).
    ///
    /// <p>OAuth 2.0 grant types supported by the connector.</p>
    pub fn oauth2_grant_types_supported(mut self, input: crate::types::OAuth2GrantType) -> Self {
        let mut v = self.oauth2_grant_types_supported.unwrap_or_default();
        v.push(input);
        self.oauth2_grant_types_supported = Some(v);
        self
    }
    /// <p>OAuth 2.0 grant types supported by the connector.</p>
    pub fn set_oauth2_grant_types_supported(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OAuth2GrantType>>,
    ) -> Self {
        self.oauth2_grant_types_supported = input;
        self
    }
    /// Appends an item to `oauth2_custom_properties`.
    ///
    /// To override the contents of this collection use [`set_oauth2_custom_properties`](Self::set_oauth2_custom_properties).
    ///
    /// <p>List of custom parameters required for OAuth 2.0 authentication.</p>
    pub fn oauth2_custom_properties(mut self, input: crate::types::OAuth2CustomParameter) -> Self {
        let mut v = self.oauth2_custom_properties.unwrap_or_default();
        v.push(input);
        self.oauth2_custom_properties = Some(v);
        self
    }
    /// <p>List of custom parameters required for OAuth 2.0 authentication.</p>
    pub fn set_oauth2_custom_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OAuth2CustomParameter>>,
    ) -> Self {
        self.oauth2_custom_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`OAuth2Defaults`](crate::types::OAuth2Defaults).
    pub fn build(self) -> crate::types::OAuth2Defaults {
        crate::types::OAuth2Defaults {
            oauth_scopes: self.oauth_scopes,
            token_urls: self.token_urls,
            auth_code_urls: self.auth_code_urls,
            oauth2_grant_types_supported: self.oauth2_grant_types_supported,
            oauth2_custom_properties: self.oauth2_custom_properties,
        }
    }
}
