// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies information about the past flow run instances for a given flow. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionRecord {
    /// <p> Specifies the identifier of the given flow run. </p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>
    pub execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
    /// <p> Describes the result of the given flow run. </p>
    pub execution_result: ::std::option::Option<crate::types::ExecutionResult>,
    /// <p> Specifies the start time of the flow run. </p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Specifies the time of the most recent update. </p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>
    pub data_pull_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>
    pub data_pull_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub metadata_catalog_details: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>,
}
impl ExecutionRecord {
    /// <p> Specifies the identifier of the given flow run. </p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>
    pub fn execution_status(&self) -> ::std::option::Option<&crate::types::ExecutionStatus> {
        self.execution_status.as_ref()
    }
    /// <p> Describes the result of the given flow run. </p>
    pub fn execution_result(&self) -> ::std::option::Option<&crate::types::ExecutionResult> {
        self.execution_result.as_ref()
    }
    /// <p> Specifies the start time of the flow run. </p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p> Specifies the time of the most recent update. </p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>
    pub fn data_pull_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.data_pull_start_time.as_ref()
    }
    /// <p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>
    pub fn data_pull_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.data_pull_end_time.as_ref()
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metadata_catalog_details.is_none()`.
    pub fn metadata_catalog_details(&self) -> &[crate::types::MetadataCatalogDetail] {
        self.metadata_catalog_details.as_deref().unwrap_or_default()
    }
}
impl ExecutionRecord {
    /// Creates a new builder-style object to manufacture [`ExecutionRecord`](crate::types::ExecutionRecord).
    pub fn builder() -> crate::types::builders::ExecutionRecordBuilder {
        crate::types::builders::ExecutionRecordBuilder::default()
    }
}

/// A builder for [`ExecutionRecord`](crate::types::ExecutionRecord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionRecordBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) execution_result: ::std::option::Option<crate::types::ExecutionResult>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_pull_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_pull_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metadata_catalog_details: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>,
}
impl ExecutionRecordBuilder {
    /// <p> Specifies the identifier of the given flow run. </p>
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the identifier of the given flow run. </p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p> Specifies the identifier of the given flow run. </p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>
    pub fn execution_status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>
    pub fn set_execution_status(mut self, input: ::std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.execution_status = input;
        self
    }
    /// <p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>
    pub fn get_execution_status(&self) -> &::std::option::Option<crate::types::ExecutionStatus> {
        &self.execution_status
    }
    /// <p> Describes the result of the given flow run. </p>
    pub fn execution_result(mut self, input: crate::types::ExecutionResult) -> Self {
        self.execution_result = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the result of the given flow run. </p>
    pub fn set_execution_result(mut self, input: ::std::option::Option<crate::types::ExecutionResult>) -> Self {
        self.execution_result = input;
        self
    }
    /// <p> Describes the result of the given flow run. </p>
    pub fn get_execution_result(&self) -> &::std::option::Option<crate::types::ExecutionResult> {
        &self.execution_result
    }
    /// <p> Specifies the start time of the flow run. </p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the start time of the flow run. </p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p> Specifies the start time of the flow run. </p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p> Specifies the time of the most recent update. </p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the time of the most recent update. </p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p> Specifies the time of the most recent update. </p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>
    pub fn data_pull_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_pull_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>
    pub fn set_data_pull_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_pull_start_time = input;
        self
    }
    /// <p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>
    pub fn get_data_pull_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_pull_start_time
    }
    /// <p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>
    pub fn data_pull_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_pull_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>
    pub fn set_data_pull_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_pull_end_time = input;
        self
    }
    /// <p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>
    pub fn get_data_pull_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_pull_end_time
    }
    /// Appends an item to `metadata_catalog_details`.
    ///
    /// To override the contents of this collection use [`set_metadata_catalog_details`](Self::set_metadata_catalog_details).
    ///
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn metadata_catalog_details(mut self, input: crate::types::MetadataCatalogDetail) -> Self {
        let mut v = self.metadata_catalog_details.unwrap_or_default();
        v.push(input);
        self.metadata_catalog_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn set_metadata_catalog_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>>) -> Self {
        self.metadata_catalog_details = input;
        self
    }
    /// <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    pub fn get_metadata_catalog_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetadataCatalogDetail>> {
        &self.metadata_catalog_details
    }
    /// Consumes the builder and constructs a [`ExecutionRecord`](crate::types::ExecutionRecord).
    pub fn build(self) -> crate::types::ExecutionRecord {
        crate::types::ExecutionRecord {
            execution_id: self.execution_id,
            execution_status: self.execution_status,
            execution_result: self.execution_result,
            started_at: self.started_at,
            last_updated_at: self.last_updated_at,
            data_pull_start_time: self.data_pull_start_time,
            data_pull_end_time: self.data_pull_end_time,
            metadata_catalog_details: self.metadata_catalog_details,
        }
    }
}
