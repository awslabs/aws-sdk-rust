// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The trigger settings that determine how and when Amazon AppFlow runs the specified flow. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TriggerConfig {
    /// <p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>
    #[doc(hidden)]
    pub trigger_type: std::option::Option<crate::types::TriggerType>,
    /// <p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>
    #[doc(hidden)]
    pub trigger_properties: std::option::Option<crate::types::TriggerProperties>,
}
impl TriggerConfig {
    /// <p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>
    pub fn trigger_type(&self) -> std::option::Option<&crate::types::TriggerType> {
        self.trigger_type.as_ref()
    }
    /// <p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>
    pub fn trigger_properties(&self) -> std::option::Option<&crate::types::TriggerProperties> {
        self.trigger_properties.as_ref()
    }
}
impl TriggerConfig {
    /// Creates a new builder-style object to manufacture [`TriggerConfig`](crate::types::TriggerConfig).
    pub fn builder() -> crate::types::builders::TriggerConfigBuilder {
        crate::types::builders::TriggerConfigBuilder::default()
    }
}

/// A builder for [`TriggerConfig`](crate::types::TriggerConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TriggerConfigBuilder {
    pub(crate) trigger_type: std::option::Option<crate::types::TriggerType>,
    pub(crate) trigger_properties: std::option::Option<crate::types::TriggerProperties>,
}
impl TriggerConfigBuilder {
    /// <p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>
    pub fn trigger_type(mut self, input: crate::types::TriggerType) -> Self {
        self.trigger_type = Some(input);
        self
    }
    /// <p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>
    pub fn set_trigger_type(
        mut self,
        input: std::option::Option<crate::types::TriggerType>,
    ) -> Self {
        self.trigger_type = input;
        self
    }
    /// <p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>
    pub fn trigger_properties(mut self, input: crate::types::TriggerProperties) -> Self {
        self.trigger_properties = Some(input);
        self
    }
    /// <p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>
    pub fn set_trigger_properties(
        mut self,
        input: std::option::Option<crate::types::TriggerProperties>,
    ) -> Self {
        self.trigger_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`TriggerConfig`](crate::types::TriggerConfig).
    pub fn build(self) -> crate::types::TriggerConfig {
        crate::types::TriggerConfig {
            trigger_type: self.trigger_type,
            trigger_properties: self.trigger_properties,
        }
    }
}
