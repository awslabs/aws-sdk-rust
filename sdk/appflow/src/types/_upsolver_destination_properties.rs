// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that are applied when Upsolver is used as a destination. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpsolverDestinationProperties {
    /// <p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>
    #[doc(hidden)]
    pub bucket_prefix: std::option::Option<std::string::String>,
    /// <p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>
    #[doc(hidden)]
    pub s3_output_format_config: std::option::Option<crate::types::UpsolverS3OutputFormatConfig>,
}
impl UpsolverDestinationProperties {
    /// <p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>
    pub fn bucket_prefix(&self) -> std::option::Option<&str> {
        self.bucket_prefix.as_deref()
    }
    /// <p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>
    pub fn s3_output_format_config(
        &self,
    ) -> std::option::Option<&crate::types::UpsolverS3OutputFormatConfig> {
        self.s3_output_format_config.as_ref()
    }
}
impl UpsolverDestinationProperties {
    /// Creates a new builder-style object to manufacture [`UpsolverDestinationProperties`](crate::types::UpsolverDestinationProperties).
    pub fn builder() -> crate::types::builders::UpsolverDestinationPropertiesBuilder {
        crate::types::builders::UpsolverDestinationPropertiesBuilder::default()
    }
}

/// A builder for [`UpsolverDestinationProperties`](crate::types::UpsolverDestinationProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpsolverDestinationPropertiesBuilder {
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) bucket_prefix: std::option::Option<std::string::String>,
    pub(crate) s3_output_format_config:
        std::option::Option<crate::types::UpsolverS3OutputFormatConfig>,
}
impl UpsolverDestinationPropertiesBuilder {
    /// <p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>
    pub fn bucket_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_prefix = Some(input.into());
        self
    }
    /// <p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>
    pub fn set_bucket_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_prefix = input;
        self
    }
    /// <p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>
    pub fn s3_output_format_config(
        mut self,
        input: crate::types::UpsolverS3OutputFormatConfig,
    ) -> Self {
        self.s3_output_format_config = Some(input);
        self
    }
    /// <p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>
    pub fn set_s3_output_format_config(
        mut self,
        input: std::option::Option<crate::types::UpsolverS3OutputFormatConfig>,
    ) -> Self {
        self.s3_output_format_config = input;
        self
    }
    /// Consumes the builder and constructs a [`UpsolverDestinationProperties`](crate::types::UpsolverDestinationProperties).
    pub fn build(self) -> crate::types::UpsolverDestinationProperties {
        crate::types::UpsolverDestinationProperties {
            bucket_name: self.bucket_name,
            bucket_prefix: self.bucket_prefix,
            s3_output_format_config: self.s3_output_format_config,
        }
    }
}
