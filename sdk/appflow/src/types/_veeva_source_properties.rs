// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that are applied when using Veeva as a flow source. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VeevaSourceProperties {
    /// <p> The object specified in the Veeva flow source. </p>
    pub object: ::std::string::String,
    /// <p>The document type specified in the Veeva document extract flow.</p>
    pub document_type: ::std::option::Option<::std::string::String>,
    /// <p>Boolean value to include source files in Veeva document extract flow.</p>
    pub include_source_files: bool,
    /// <p>Boolean value to include file renditions in Veeva document extract flow.</p>
    pub include_renditions: bool,
    /// <p>Boolean value to include All Versions of files in Veeva document extract flow.</p>
    pub include_all_versions: bool,
}
impl VeevaSourceProperties {
    /// <p> The object specified in the Veeva flow source. </p>
    pub fn object(&self) -> &str {
        use std::ops::Deref;
        self.object.deref()
    }
    /// <p>The document type specified in the Veeva document extract flow.</p>
    pub fn document_type(&self) -> ::std::option::Option<&str> {
        self.document_type.as_deref()
    }
    /// <p>Boolean value to include source files in Veeva document extract flow.</p>
    pub fn include_source_files(&self) -> bool {
        self.include_source_files
    }
    /// <p>Boolean value to include file renditions in Veeva document extract flow.</p>
    pub fn include_renditions(&self) -> bool {
        self.include_renditions
    }
    /// <p>Boolean value to include All Versions of files in Veeva document extract flow.</p>
    pub fn include_all_versions(&self) -> bool {
        self.include_all_versions
    }
}
impl VeevaSourceProperties {
    /// Creates a new builder-style object to manufacture [`VeevaSourceProperties`](crate::types::VeevaSourceProperties).
    pub fn builder() -> crate::types::builders::VeevaSourcePropertiesBuilder {
        crate::types::builders::VeevaSourcePropertiesBuilder::default()
    }
}

/// A builder for [`VeevaSourceProperties`](crate::types::VeevaSourceProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VeevaSourcePropertiesBuilder {
    pub(crate) object: ::std::option::Option<::std::string::String>,
    pub(crate) document_type: ::std::option::Option<::std::string::String>,
    pub(crate) include_source_files: ::std::option::Option<bool>,
    pub(crate) include_renditions: ::std::option::Option<bool>,
    pub(crate) include_all_versions: ::std::option::Option<bool>,
}
impl VeevaSourcePropertiesBuilder {
    /// <p> The object specified in the Veeva flow source. </p>
    /// This field is required.
    pub fn object(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The object specified in the Veeva flow source. </p>
    pub fn set_object(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object = input;
        self
    }
    /// <p> The object specified in the Veeva flow source. </p>
    pub fn get_object(&self) -> &::std::option::Option<::std::string::String> {
        &self.object
    }
    /// <p>The document type specified in the Veeva document extract flow.</p>
    pub fn document_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The document type specified in the Veeva document extract flow.</p>
    pub fn set_document_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_type = input;
        self
    }
    /// <p>The document type specified in the Veeva document extract flow.</p>
    pub fn get_document_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_type
    }
    /// <p>Boolean value to include source files in Veeva document extract flow.</p>
    pub fn include_source_files(mut self, input: bool) -> Self {
        self.include_source_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean value to include source files in Veeva document extract flow.</p>
    pub fn set_include_source_files(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_source_files = input;
        self
    }
    /// <p>Boolean value to include source files in Veeva document extract flow.</p>
    pub fn get_include_source_files(&self) -> &::std::option::Option<bool> {
        &self.include_source_files
    }
    /// <p>Boolean value to include file renditions in Veeva document extract flow.</p>
    pub fn include_renditions(mut self, input: bool) -> Self {
        self.include_renditions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean value to include file renditions in Veeva document extract flow.</p>
    pub fn set_include_renditions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_renditions = input;
        self
    }
    /// <p>Boolean value to include file renditions in Veeva document extract flow.</p>
    pub fn get_include_renditions(&self) -> &::std::option::Option<bool> {
        &self.include_renditions
    }
    /// <p>Boolean value to include All Versions of files in Veeva document extract flow.</p>
    pub fn include_all_versions(mut self, input: bool) -> Self {
        self.include_all_versions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean value to include All Versions of files in Veeva document extract flow.</p>
    pub fn set_include_all_versions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_all_versions = input;
        self
    }
    /// <p>Boolean value to include All Versions of files in Veeva document extract flow.</p>
    pub fn get_include_all_versions(&self) -> &::std::option::Option<bool> {
        &self.include_all_versions
    }
    /// Consumes the builder and constructs a [`VeevaSourceProperties`](crate::types::VeevaSourceProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`object`](crate::types::builders::VeevaSourcePropertiesBuilder::object)
    pub fn build(self) -> ::std::result::Result<crate::types::VeevaSourceProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VeevaSourceProperties {
            object: self.object.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object",
                    "object was not specified but it is required when building VeevaSourceProperties",
                )
            })?,
            document_type: self.document_type,
            include_source_files: self.include_source_files.unwrap_or_default(),
            include_renditions: self.include_renditions.unwrap_or_default(),
            include_all_versions: self.include_all_versions.unwrap_or_default(),
        })
    }
}
