// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile credentials required when using Singular. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SingularConnectorProfileCredentials {
    /// <p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>
    pub api_key: ::std::string::String,
}
impl SingularConnectorProfileCredentials {
    /// <p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>
    pub fn api_key(&self) -> &str {
        use std::ops::Deref;
        self.api_key.deref()
    }
}
impl ::std::fmt::Debug for SingularConnectorProfileCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SingularConnectorProfileCredentials");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SingularConnectorProfileCredentials {
    /// Creates a new builder-style object to manufacture [`SingularConnectorProfileCredentials`](crate::types::SingularConnectorProfileCredentials).
    pub fn builder() -> crate::types::builders::SingularConnectorProfileCredentialsBuilder {
        crate::types::builders::SingularConnectorProfileCredentialsBuilder::default()
    }
}

/// A builder for [`SingularConnectorProfileCredentials`](crate::types::SingularConnectorProfileCredentials).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SingularConnectorProfileCredentialsBuilder {
    pub(crate) api_key: ::std::option::Option<::std::string::String>,
}
impl SingularConnectorProfileCredentialsBuilder {
    /// <p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>
    /// This field is required.
    pub fn api_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>
    pub fn set_api_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_key = input;
        self
    }
    /// <p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>
    pub fn get_api_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_key
    }
    /// Consumes the builder and constructs a [`SingularConnectorProfileCredentials`](crate::types::SingularConnectorProfileCredentials).
    /// This method will fail if any of the following fields are not set:
    /// - [`api_key`](crate::types::builders::SingularConnectorProfileCredentialsBuilder::api_key)
    pub fn build(self) -> ::std::result::Result<crate::types::SingularConnectorProfileCredentials, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SingularConnectorProfileCredentials {
            api_key: self.api_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "api_key",
                    "api_key was not specified but it is required when building SingularConnectorProfileCredentials",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SingularConnectorProfileCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SingularConnectorProfileCredentialsBuilder");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
