// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that are applied when using SAPOData as a flow source. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SapoDataSourceProperties {
    /// <p> The object path specified in the SAPOData flow source. </p>
    #[doc(hidden)]
    pub object_path: std::option::Option<std::string::String>,
}
impl SapoDataSourceProperties {
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn object_path(&self) -> std::option::Option<&str> {
        self.object_path.as_deref()
    }
}
impl SapoDataSourceProperties {
    /// Creates a new builder-style object to manufacture [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
    pub fn builder() -> crate::types::builders::SapoDataSourcePropertiesBuilder {
        crate::types::builders::SapoDataSourcePropertiesBuilder::default()
    }
}

/// A builder for [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SapoDataSourcePropertiesBuilder {
    pub(crate) object_path: std::option::Option<std::string::String>,
}
impl SapoDataSourcePropertiesBuilder {
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn object_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_path = Some(input.into());
        self
    }
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn set_object_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_path = input;
        self
    }
    /// Consumes the builder and constructs a [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
    pub fn build(self) -> crate::types::SapoDataSourceProperties {
        crate::types::SapoDataSourceProperties {
            object_path: self.object_path,
        }
    }
}
