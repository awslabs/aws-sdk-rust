// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Operators`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let operators = unimplemented!();
/// match operators {
///     Operators::Addition => { /* ... */ },
///     Operators::Between => { /* ... */ },
///     Operators::Contains => { /* ... */ },
///     Operators::Division => { /* ... */ },
///     Operators::EqualTo => { /* ... */ },
///     Operators::GreaterThan => { /* ... */ },
///     Operators::GreaterThanOrEqualTo => { /* ... */ },
///     Operators::LessThan => { /* ... */ },
///     Operators::LessThanOrEqualTo => { /* ... */ },
///     Operators::MaskAll => { /* ... */ },
///     Operators::MaskFirstN => { /* ... */ },
///     Operators::MaskLastN => { /* ... */ },
///     Operators::Multiplication => { /* ... */ },
///     Operators::NotEqualTo => { /* ... */ },
///     Operators::NoOp => { /* ... */ },
///     Operators::Projection => { /* ... */ },
///     Operators::Subtraction => { /* ... */ },
///     Operators::ValidateNonNegative => { /* ... */ },
///     Operators::ValidateNonNull => { /* ... */ },
///     Operators::ValidateNonZero => { /* ... */ },
///     Operators::ValidateNumeric => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `operators` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Operators::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Operators::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Operators::NewFeature` is defined.
/// Specifically, when `operators` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Operators::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Operators {
    #[allow(missing_docs)] // documentation missing in model
    Addition,
    #[allow(missing_docs)] // documentation missing in model
    Between,
    #[allow(missing_docs)] // documentation missing in model
    Contains,
    #[allow(missing_docs)] // documentation missing in model
    Division,
    #[allow(missing_docs)] // documentation missing in model
    EqualTo,
    #[allow(missing_docs)] // documentation missing in model
    GreaterThan,
    #[allow(missing_docs)] // documentation missing in model
    GreaterThanOrEqualTo,
    #[allow(missing_docs)] // documentation missing in model
    LessThan,
    #[allow(missing_docs)] // documentation missing in model
    LessThanOrEqualTo,
    #[allow(missing_docs)] // documentation missing in model
    MaskAll,
    #[allow(missing_docs)] // documentation missing in model
    MaskFirstN,
    #[allow(missing_docs)] // documentation missing in model
    MaskLastN,
    #[allow(missing_docs)] // documentation missing in model
    Multiplication,
    #[allow(missing_docs)] // documentation missing in model
    NotEqualTo,
    #[allow(missing_docs)] // documentation missing in model
    NoOp,
    #[allow(missing_docs)] // documentation missing in model
    Projection,
    #[allow(missing_docs)] // documentation missing in model
    Subtraction,
    #[allow(missing_docs)] // documentation missing in model
    ValidateNonNegative,
    #[allow(missing_docs)] // documentation missing in model
    ValidateNonNull,
    #[allow(missing_docs)] // documentation missing in model
    ValidateNonZero,
    #[allow(missing_docs)] // documentation missing in model
    ValidateNumeric,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Operators {
    fn from(s: &str) -> Self {
        match s {
            "ADDITION" => Operators::Addition,
            "BETWEEN" => Operators::Between,
            "CONTAINS" => Operators::Contains,
            "DIVISION" => Operators::Division,
            "EQUAL_TO" => Operators::EqualTo,
            "GREATER_THAN" => Operators::GreaterThan,
            "GREATER_THAN_OR_EQUAL_TO" => Operators::GreaterThanOrEqualTo,
            "LESS_THAN" => Operators::LessThan,
            "LESS_THAN_OR_EQUAL_TO" => Operators::LessThanOrEqualTo,
            "MASK_ALL" => Operators::MaskAll,
            "MASK_FIRST_N" => Operators::MaskFirstN,
            "MASK_LAST_N" => Operators::MaskLastN,
            "MULTIPLICATION" => Operators::Multiplication,
            "NOT_EQUAL_TO" => Operators::NotEqualTo,
            "NO_OP" => Operators::NoOp,
            "PROJECTION" => Operators::Projection,
            "SUBTRACTION" => Operators::Subtraction,
            "VALIDATE_NON_NEGATIVE" => Operators::ValidateNonNegative,
            "VALIDATE_NON_NULL" => Operators::ValidateNonNull,
            "VALIDATE_NON_ZERO" => Operators::ValidateNonZero,
            "VALIDATE_NUMERIC" => Operators::ValidateNumeric,
            other => Operators::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for Operators {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Operators::from(s))
    }
}
impl Operators {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Operators::Addition => "ADDITION",
            Operators::Between => "BETWEEN",
            Operators::Contains => "CONTAINS",
            Operators::Division => "DIVISION",
            Operators::EqualTo => "EQUAL_TO",
            Operators::GreaterThan => "GREATER_THAN",
            Operators::GreaterThanOrEqualTo => "GREATER_THAN_OR_EQUAL_TO",
            Operators::LessThan => "LESS_THAN",
            Operators::LessThanOrEqualTo => "LESS_THAN_OR_EQUAL_TO",
            Operators::MaskAll => "MASK_ALL",
            Operators::MaskFirstN => "MASK_FIRST_N",
            Operators::MaskLastN => "MASK_LAST_N",
            Operators::Multiplication => "MULTIPLICATION",
            Operators::NotEqualTo => "NOT_EQUAL_TO",
            Operators::NoOp => "NO_OP",
            Operators::Projection => "PROJECTION",
            Operators::Subtraction => "SUBTRACTION",
            Operators::ValidateNonNegative => "VALIDATE_NON_NEGATIVE",
            Operators::ValidateNonNull => "VALIDATE_NON_NULL",
            Operators::ValidateNonZero => "VALIDATE_NON_ZERO",
            Operators::ValidateNumeric => "VALIDATE_NUMERIC",
            Operators::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADDITION",
            "BETWEEN",
            "CONTAINS",
            "DIVISION",
            "EQUAL_TO",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL_TO",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL_TO",
            "MASK_ALL",
            "MASK_FIRST_N",
            "MASK_LAST_N",
            "MULTIPLICATION",
            "NOT_EQUAL_TO",
            "NO_OP",
            "PROJECTION",
            "SUBTRACTION",
            "VALIDATE_NON_NEGATIVE",
            "VALIDATE_NON_NULL",
            "VALIDATE_NON_ZERO",
            "VALIDATE_NUMERIC",
        ]
    }
}
impl AsRef<str> for Operators {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
