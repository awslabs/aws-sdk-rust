// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that can be applied to a field when the connector is being used as a source. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceFieldProperties {
    /// <p> Indicates whether the field can be returned in a search result. </p>
    #[doc(hidden)]
    pub is_retrievable: bool,
    /// <p> Indicates if the field can be queried. </p>
    #[doc(hidden)]
    pub is_queryable: bool,
    /// <p>Indicates if this timestamp field can be used for incremental queries.</p>
    #[doc(hidden)]
    pub is_timestamp_field_for_incremental_queries: bool,
}
impl SourceFieldProperties {
    /// <p> Indicates whether the field can be returned in a search result. </p>
    pub fn is_retrievable(&self) -> bool {
        self.is_retrievable
    }
    /// <p> Indicates if the field can be queried. </p>
    pub fn is_queryable(&self) -> bool {
        self.is_queryable
    }
    /// <p>Indicates if this timestamp field can be used for incremental queries.</p>
    pub fn is_timestamp_field_for_incremental_queries(&self) -> bool {
        self.is_timestamp_field_for_incremental_queries
    }
}
impl SourceFieldProperties {
    /// Creates a new builder-style object to manufacture [`SourceFieldProperties`](crate::types::SourceFieldProperties).
    pub fn builder() -> crate::types::builders::SourceFieldPropertiesBuilder {
        crate::types::builders::SourceFieldPropertiesBuilder::default()
    }
}

/// A builder for [`SourceFieldProperties`](crate::types::SourceFieldProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceFieldPropertiesBuilder {
    pub(crate) is_retrievable: std::option::Option<bool>,
    pub(crate) is_queryable: std::option::Option<bool>,
    pub(crate) is_timestamp_field_for_incremental_queries: std::option::Option<bool>,
}
impl SourceFieldPropertiesBuilder {
    /// <p> Indicates whether the field can be returned in a search result. </p>
    pub fn is_retrievable(mut self, input: bool) -> Self {
        self.is_retrievable = Some(input);
        self
    }
    /// <p> Indicates whether the field can be returned in a search result. </p>
    pub fn set_is_retrievable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_retrievable = input;
        self
    }
    /// <p> Indicates if the field can be queried. </p>
    pub fn is_queryable(mut self, input: bool) -> Self {
        self.is_queryable = Some(input);
        self
    }
    /// <p> Indicates if the field can be queried. </p>
    pub fn set_is_queryable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_queryable = input;
        self
    }
    /// <p>Indicates if this timestamp field can be used for incremental queries.</p>
    pub fn is_timestamp_field_for_incremental_queries(mut self, input: bool) -> Self {
        self.is_timestamp_field_for_incremental_queries = Some(input);
        self
    }
    /// <p>Indicates if this timestamp field can be used for incremental queries.</p>
    pub fn set_is_timestamp_field_for_incremental_queries(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.is_timestamp_field_for_incremental_queries = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceFieldProperties`](crate::types::SourceFieldProperties).
    pub fn build(self) -> crate::types::SourceFieldProperties {
        crate::types::SourceFieldProperties {
            is_retrievable: self.is_retrievable.unwrap_or_default(),
            is_queryable: self.is_queryable.unwrap_or_default(),
            is_timestamp_field_for_incremental_queries: self
                .is_timestamp_field_for_incremental_queries
                .unwrap_or_default(),
        }
    }
}
