// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> When you use Amazon S3 as the source, the configuration format that you provide the flow input data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3InputFormatConfig {
    /// <p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>
    #[doc(hidden)]
    pub s3_input_file_type: std::option::Option<crate::types::S3InputFileType>,
}
impl S3InputFormatConfig {
    /// <p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>
    pub fn s3_input_file_type(&self) -> std::option::Option<&crate::types::S3InputFileType> {
        self.s3_input_file_type.as_ref()
    }
}
impl S3InputFormatConfig {
    /// Creates a new builder-style object to manufacture [`S3InputFormatConfig`](crate::types::S3InputFormatConfig).
    pub fn builder() -> crate::types::builders::S3InputFormatConfigBuilder {
        crate::types::builders::S3InputFormatConfigBuilder::default()
    }
}

/// A builder for [`S3InputFormatConfig`](crate::types::S3InputFormatConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3InputFormatConfigBuilder {
    pub(crate) s3_input_file_type: std::option::Option<crate::types::S3InputFileType>,
}
impl S3InputFormatConfigBuilder {
    /// <p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>
    pub fn s3_input_file_type(mut self, input: crate::types::S3InputFileType) -> Self {
        self.s3_input_file_type = Some(input);
        self
    }
    /// <p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>
    pub fn set_s3_input_file_type(
        mut self,
        input: std::option::Option<crate::types::S3InputFileType>,
    ) -> Self {
        self.s3_input_file_type = input;
        self
    }
    /// Consumes the builder and constructs a [`S3InputFormatConfig`](crate::types::S3InputFormatConfig).
    pub fn build(self) -> crate::types::S3InputFormatConfig {
        crate::types::S3InputFormatConfig {
            s3_input_file_type: self.s3_input_file_type,
        }
    }
}
