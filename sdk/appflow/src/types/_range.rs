// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The range of values that the property supports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Range {
    /// <p>Maximum value supported by the field.</p>
    #[doc(hidden)]
    pub maximum: f64,
    /// <p>Minimum value supported by the field.</p>
    #[doc(hidden)]
    pub minimum: f64,
}
impl Range {
    /// <p>Maximum value supported by the field.</p>
    pub fn maximum(&self) -> f64 {
        self.maximum
    }
    /// <p>Minimum value supported by the field.</p>
    pub fn minimum(&self) -> f64 {
        self.minimum
    }
}
impl Range {
    /// Creates a new builder-style object to manufacture [`Range`](crate::types::Range).
    pub fn builder() -> crate::types::builders::RangeBuilder {
        crate::types::builders::RangeBuilder::default()
    }
}

/// A builder for [`Range`](crate::types::Range).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RangeBuilder {
    pub(crate) maximum: std::option::Option<f64>,
    pub(crate) minimum: std::option::Option<f64>,
}
impl RangeBuilder {
    /// <p>Maximum value supported by the field.</p>
    pub fn maximum(mut self, input: f64) -> Self {
        self.maximum = Some(input);
        self
    }
    /// <p>Maximum value supported by the field.</p>
    pub fn set_maximum(mut self, input: std::option::Option<f64>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>Minimum value supported by the field.</p>
    pub fn minimum(mut self, input: f64) -> Self {
        self.minimum = Some(input);
        self
    }
    /// <p>Minimum value supported by the field.</p>
    pub fn set_minimum(mut self, input: std::option::Option<f64>) -> Self {
        self.minimum = input;
        self
    }
    /// Consumes the builder and constructs a [`Range`](crate::types::Range).
    pub fn build(self) -> crate::types::Range {
        crate::types::Range {
            maximum: self.maximum.unwrap_or_default(),
            minimum: self.minimum.unwrap_or_default(),
        }
    }
}
