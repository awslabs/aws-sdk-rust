// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the configuration of the lambda which is being registered as the connector.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaConnectorProvisioningConfig {
    /// <p>Lambda ARN of the connector being registered.</p>
    #[doc(hidden)]
    pub lambda_arn: std::option::Option<std::string::String>,
}
impl LambdaConnectorProvisioningConfig {
    /// <p>Lambda ARN of the connector being registered.</p>
    pub fn lambda_arn(&self) -> std::option::Option<&str> {
        self.lambda_arn.as_deref()
    }
}
impl LambdaConnectorProvisioningConfig {
    /// Creates a new builder-style object to manufacture [`LambdaConnectorProvisioningConfig`](crate::types::LambdaConnectorProvisioningConfig).
    pub fn builder() -> crate::types::builders::LambdaConnectorProvisioningConfigBuilder {
        crate::types::builders::LambdaConnectorProvisioningConfigBuilder::default()
    }
}

/// A builder for [`LambdaConnectorProvisioningConfig`](crate::types::LambdaConnectorProvisioningConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaConnectorProvisioningConfigBuilder {
    pub(crate) lambda_arn: std::option::Option<std::string::String>,
}
impl LambdaConnectorProvisioningConfigBuilder {
    /// <p>Lambda ARN of the connector being registered.</p>
    pub fn lambda_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_arn = Some(input.into());
        self
    }
    /// <p>Lambda ARN of the connector being registered.</p>
    pub fn set_lambda_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lambda_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaConnectorProvisioningConfig`](crate::types::LambdaConnectorProvisioningConfig).
    pub fn build(self) -> crate::types::LambdaConnectorProvisioningConfig {
        crate::types::LambdaConnectorProvisioningConfig {
            lambda_arn: self.lambda_arn,
        }
    }
}
