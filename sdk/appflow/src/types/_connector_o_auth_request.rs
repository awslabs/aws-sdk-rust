// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectorOAuthRequest {
    /// <p> The code provided by the connector when it has been authenticated via the connected app. </p>
    #[doc(hidden)]
    pub auth_code: std::option::Option<std::string::String>,
    /// <p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>
    #[doc(hidden)]
    pub redirect_uri: std::option::Option<std::string::String>,
}
impl ConnectorOAuthRequest {
    /// <p> The code provided by the connector when it has been authenticated via the connected app. </p>
    pub fn auth_code(&self) -> std::option::Option<&str> {
        self.auth_code.as_deref()
    }
    /// <p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>
    pub fn redirect_uri(&self) -> std::option::Option<&str> {
        self.redirect_uri.as_deref()
    }
}
impl ConnectorOAuthRequest {
    /// Creates a new builder-style object to manufacture [`ConnectorOAuthRequest`](crate::types::ConnectorOAuthRequest).
    pub fn builder() -> crate::types::builders::ConnectorOAuthRequestBuilder {
        crate::types::builders::ConnectorOAuthRequestBuilder::default()
    }
}

/// A builder for [`ConnectorOAuthRequest`](crate::types::ConnectorOAuthRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectorOAuthRequestBuilder {
    pub(crate) auth_code: std::option::Option<std::string::String>,
    pub(crate) redirect_uri: std::option::Option<std::string::String>,
}
impl ConnectorOAuthRequestBuilder {
    /// <p> The code provided by the connector when it has been authenticated via the connected app. </p>
    pub fn auth_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.auth_code = Some(input.into());
        self
    }
    /// <p> The code provided by the connector when it has been authenticated via the connected app. </p>
    pub fn set_auth_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auth_code = input;
        self
    }
    /// <p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>
    pub fn redirect_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.redirect_uri = Some(input.into());
        self
    }
    /// <p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>
    pub fn set_redirect_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectorOAuthRequest`](crate::types::ConnectorOAuthRequest).
    pub fn build(self) -> crate::types::ConnectorOAuthRequest {
        crate::types::ConnectorOAuthRequest {
            auth_code: self.auth_code,
            redirect_uri: self.redirect_uri,
        }
    }
}
