// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile credentials required by Infor Nexus. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InforNexusConnectorProfileCredentials {
    /// <p> The Access Key portion of the credentials. </p>
    #[doc(hidden)]
    pub access_key_id: std::option::Option<std::string::String>,
    /// <p> The identifier for the user. </p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p> The secret key used to sign requests. </p>
    #[doc(hidden)]
    pub secret_access_key: std::option::Option<std::string::String>,
    /// <p> The encryption keys used to encrypt data. </p>
    #[doc(hidden)]
    pub datakey: std::option::Option<std::string::String>,
}
impl InforNexusConnectorProfileCredentials {
    /// <p> The Access Key portion of the credentials. </p>
    pub fn access_key_id(&self) -> std::option::Option<&str> {
        self.access_key_id.as_deref()
    }
    /// <p> The identifier for the user. </p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn secret_access_key(&self) -> std::option::Option<&str> {
        self.secret_access_key.as_deref()
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn datakey(&self) -> std::option::Option<&str> {
        self.datakey.as_deref()
    }
}
impl std::fmt::Debug for InforNexusConnectorProfileCredentials {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InforNexusConnectorProfileCredentials");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("secret_access_key", &self.secret_access_key);
        formatter.field("datakey", &self.datakey);
        formatter.finish()
    }
}
impl InforNexusConnectorProfileCredentials {
    /// Creates a new builder-style object to manufacture [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
    pub fn builder() -> crate::types::builders::InforNexusConnectorProfileCredentialsBuilder {
        crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::default()
    }
}

/// A builder for [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct InforNexusConnectorProfileCredentialsBuilder {
    pub(crate) access_key_id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) secret_access_key: std::option::Option<std::string::String>,
    pub(crate) datakey: std::option::Option<std::string::String>,
}
impl InforNexusConnectorProfileCredentialsBuilder {
    /// <p> The Access Key portion of the credentials. </p>
    pub fn access_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_key_id = Some(input.into());
        self
    }
    /// <p> The Access Key portion of the credentials. </p>
    pub fn set_access_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_key_id = input;
        self
    }
    /// <p> The identifier for the user. </p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p> The identifier for the user. </p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn secret_access_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_access_key = Some(input.into());
        self
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn set_secret_access_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secret_access_key = input;
        self
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn datakey(mut self, input: impl Into<std::string::String>) -> Self {
        self.datakey = Some(input.into());
        self
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn set_datakey(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datakey = input;
        self
    }
    /// Consumes the builder and constructs a [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
    pub fn build(self) -> crate::types::InforNexusConnectorProfileCredentials {
        crate::types::InforNexusConnectorProfileCredentials {
            access_key_id: self.access_key_id,
            user_id: self.user_id,
            secret_access_key: self.secret_access_key,
            datakey: self.datakey,
        }
    }
}
impl std::fmt::Debug for InforNexusConnectorProfileCredentialsBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InforNexusConnectorProfileCredentialsBuilder");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("secret_access_key", &self.secret_access_key);
        formatter.field("datakey", &self.datakey);
        formatter.finish()
    }
}
