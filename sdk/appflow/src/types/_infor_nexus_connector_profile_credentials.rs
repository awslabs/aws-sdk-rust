// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile credentials required by Infor Nexus. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InforNexusConnectorProfileCredentials {
    /// <p> The Access Key portion of the credentials. </p>
    pub access_key_id: ::std::string::String,
    /// <p> The identifier for the user. </p>
    pub user_id: ::std::string::String,
    /// <p> The secret key used to sign requests. </p>
    pub secret_access_key: ::std::string::String,
    /// <p> The encryption keys used to encrypt data. </p>
    pub datakey: ::std::string::String,
}
impl InforNexusConnectorProfileCredentials {
    /// <p> The Access Key portion of the credentials. </p>
    pub fn access_key_id(&self) -> &str {
        use std::ops::Deref;
        self.access_key_id.deref()
    }
    /// <p> The identifier for the user. </p>
    pub fn user_id(&self) -> &str {
        use std::ops::Deref;
        self.user_id.deref()
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn secret_access_key(&self) -> &str {
        use std::ops::Deref;
        self.secret_access_key.deref()
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn datakey(&self) -> &str {
        use std::ops::Deref;
        self.datakey.deref()
    }
}
impl ::std::fmt::Debug for InforNexusConnectorProfileCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InforNexusConnectorProfileCredentials");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("secret_access_key", &self.secret_access_key);
        formatter.field("datakey", &self.datakey);
        formatter.finish()
    }
}
impl InforNexusConnectorProfileCredentials {
    /// Creates a new builder-style object to manufacture [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
    pub fn builder() -> crate::types::builders::InforNexusConnectorProfileCredentialsBuilder {
        crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::default()
    }
}

/// A builder for [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct InforNexusConnectorProfileCredentialsBuilder {
    pub(crate) access_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) secret_access_key: ::std::option::Option<::std::string::String>,
    pub(crate) datakey: ::std::option::Option<::std::string::String>,
}
impl InforNexusConnectorProfileCredentialsBuilder {
    /// <p> The Access Key portion of the credentials. </p>
    /// This field is required.
    pub fn access_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Access Key portion of the credentials. </p>
    pub fn set_access_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key_id = input;
        self
    }
    /// <p> The Access Key portion of the credentials. </p>
    pub fn get_access_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key_id
    }
    /// <p> The identifier for the user. </p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the user. </p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p> The identifier for the user. </p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p> The secret key used to sign requests. </p>
    /// This field is required.
    pub fn secret_access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_access_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn set_secret_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_access_key = input;
        self
    }
    /// <p> The secret key used to sign requests. </p>
    pub fn get_secret_access_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_access_key
    }
    /// <p> The encryption keys used to encrypt data. </p>
    /// This field is required.
    pub fn datakey(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datakey = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn set_datakey(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datakey = input;
        self
    }
    /// <p> The encryption keys used to encrypt data. </p>
    pub fn get_datakey(&self) -> &::std::option::Option<::std::string::String> {
        &self.datakey
    }
    /// Consumes the builder and constructs a [`InforNexusConnectorProfileCredentials`](crate::types::InforNexusConnectorProfileCredentials).
    /// This method will fail if any of the following fields are not set:
    /// - [`access_key_id`](crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::access_key_id)
    /// - [`user_id`](crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::user_id)
    /// - [`secret_access_key`](crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::secret_access_key)
    /// - [`datakey`](crate::types::builders::InforNexusConnectorProfileCredentialsBuilder::datakey)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::InforNexusConnectorProfileCredentials, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InforNexusConnectorProfileCredentials {
            access_key_id: self.access_key_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "access_key_id",
                    "access_key_id was not specified but it is required when building InforNexusConnectorProfileCredentials",
                )
            })?,
            user_id: self.user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id",
                    "user_id was not specified but it is required when building InforNexusConnectorProfileCredentials",
                )
            })?,
            secret_access_key: self.secret_access_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "secret_access_key",
                    "secret_access_key was not specified but it is required when building InforNexusConnectorProfileCredentials",
                )
            })?,
            datakey: self.datakey.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datakey",
                    "datakey was not specified but it is required when building InforNexusConnectorProfileCredentials",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for InforNexusConnectorProfileCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InforNexusConnectorProfileCredentialsBuilder");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("secret_access_key", &self.secret_access_key);
        formatter.field("datakey", &self.datakey);
        formatter.finish()
    }
}
