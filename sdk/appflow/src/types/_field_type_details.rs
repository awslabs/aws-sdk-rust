// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains details regarding the supported field type and the operators that can be applied for filtering. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldTypeDetails {
    /// <p> The type of field, such as string, integer, date, and so on. </p>
    #[doc(hidden)]
    pub field_type: std::option::Option<std::string::String>,
    /// <p> The list of operators supported by a field. </p>
    #[doc(hidden)]
    pub filter_operators: std::option::Option<std::vec::Vec<crate::types::Operator>>,
    /// <p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: "true" and "false". </p>
    #[doc(hidden)]
    pub supported_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The regular expression pattern for the field name.</p>
    #[doc(hidden)]
    pub value_regex_pattern: std::option::Option<std::string::String>,
    /// <p>The date format that the field supports.</p>
    #[doc(hidden)]
    pub supported_date_format: std::option::Option<std::string::String>,
    /// <p>The range of values this field can hold.</p>
    #[doc(hidden)]
    pub field_value_range: std::option::Option<crate::types::Range>,
    /// <p>This is the allowable length range for this field's value.</p>
    #[doc(hidden)]
    pub field_length_range: std::option::Option<crate::types::Range>,
}
impl FieldTypeDetails {
    /// <p> The type of field, such as string, integer, date, and so on. </p>
    pub fn field_type(&self) -> std::option::Option<&str> {
        self.field_type.as_deref()
    }
    /// <p> The list of operators supported by a field. </p>
    pub fn filter_operators(&self) -> std::option::Option<&[crate::types::Operator]> {
        self.filter_operators.as_deref()
    }
    /// <p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: "true" and "false". </p>
    pub fn supported_values(&self) -> std::option::Option<&[std::string::String]> {
        self.supported_values.as_deref()
    }
    /// <p>The regular expression pattern for the field name.</p>
    pub fn value_regex_pattern(&self) -> std::option::Option<&str> {
        self.value_regex_pattern.as_deref()
    }
    /// <p>The date format that the field supports.</p>
    pub fn supported_date_format(&self) -> std::option::Option<&str> {
        self.supported_date_format.as_deref()
    }
    /// <p>The range of values this field can hold.</p>
    pub fn field_value_range(&self) -> std::option::Option<&crate::types::Range> {
        self.field_value_range.as_ref()
    }
    /// <p>This is the allowable length range for this field's value.</p>
    pub fn field_length_range(&self) -> std::option::Option<&crate::types::Range> {
        self.field_length_range.as_ref()
    }
}
impl FieldTypeDetails {
    /// Creates a new builder-style object to manufacture [`FieldTypeDetails`](crate::types::FieldTypeDetails).
    pub fn builder() -> crate::types::builders::FieldTypeDetailsBuilder {
        crate::types::builders::FieldTypeDetailsBuilder::default()
    }
}

/// A builder for [`FieldTypeDetails`](crate::types::FieldTypeDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldTypeDetailsBuilder {
    pub(crate) field_type: std::option::Option<std::string::String>,
    pub(crate) filter_operators: std::option::Option<std::vec::Vec<crate::types::Operator>>,
    pub(crate) supported_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) value_regex_pattern: std::option::Option<std::string::String>,
    pub(crate) supported_date_format: std::option::Option<std::string::String>,
    pub(crate) field_value_range: std::option::Option<crate::types::Range>,
    pub(crate) field_length_range: std::option::Option<crate::types::Range>,
}
impl FieldTypeDetailsBuilder {
    /// <p> The type of field, such as string, integer, date, and so on. </p>
    pub fn field_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_type = Some(input.into());
        self
    }
    /// <p> The type of field, such as string, integer, date, and so on. </p>
    pub fn set_field_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_type = input;
        self
    }
    /// Appends an item to `filter_operators`.
    ///
    /// To override the contents of this collection use [`set_filter_operators`](Self::set_filter_operators).
    ///
    /// <p> The list of operators supported by a field. </p>
    pub fn filter_operators(mut self, input: crate::types::Operator) -> Self {
        let mut v = self.filter_operators.unwrap_or_default();
        v.push(input);
        self.filter_operators = Some(v);
        self
    }
    /// <p> The list of operators supported by a field. </p>
    pub fn set_filter_operators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Operator>>,
    ) -> Self {
        self.filter_operators = input;
        self
    }
    /// Appends an item to `supported_values`.
    ///
    /// To override the contents of this collection use [`set_supported_values`](Self::set_supported_values).
    ///
    /// <p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: "true" and "false". </p>
    pub fn supported_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.supported_values.unwrap_or_default();
        v.push(input.into());
        self.supported_values = Some(v);
        self
    }
    /// <p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: "true" and "false". </p>
    pub fn set_supported_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.supported_values = input;
        self
    }
    /// <p>The regular expression pattern for the field name.</p>
    pub fn value_regex_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.value_regex_pattern = Some(input.into());
        self
    }
    /// <p>The regular expression pattern for the field name.</p>
    pub fn set_value_regex_pattern(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.value_regex_pattern = input;
        self
    }
    /// <p>The date format that the field supports.</p>
    pub fn supported_date_format(mut self, input: impl Into<std::string::String>) -> Self {
        self.supported_date_format = Some(input.into());
        self
    }
    /// <p>The date format that the field supports.</p>
    pub fn set_supported_date_format(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.supported_date_format = input;
        self
    }
    /// <p>The range of values this field can hold.</p>
    pub fn field_value_range(mut self, input: crate::types::Range) -> Self {
        self.field_value_range = Some(input);
        self
    }
    /// <p>The range of values this field can hold.</p>
    pub fn set_field_value_range(
        mut self,
        input: std::option::Option<crate::types::Range>,
    ) -> Self {
        self.field_value_range = input;
        self
    }
    /// <p>This is the allowable length range for this field's value.</p>
    pub fn field_length_range(mut self, input: crate::types::Range) -> Self {
        self.field_length_range = Some(input);
        self
    }
    /// <p>This is the allowable length range for this field's value.</p>
    pub fn set_field_length_range(
        mut self,
        input: std::option::Option<crate::types::Range>,
    ) -> Self {
        self.field_length_range = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldTypeDetails`](crate::types::FieldTypeDetails).
    pub fn build(self) -> crate::types::FieldTypeDetails {
        crate::types::FieldTypeDetails {
            field_type: self.field_type,
            filter_operators: self.filter_operators,
            supported_values: self.supported_values,
            value_regex_pattern: self.value_regex_pattern,
            supported_date_format: self.supported_date_format,
            field_value_range: self.field_value_range,
            field_length_range: self.field_length_range,
        }
    }
}
