// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile credentials required by Marketo. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MarketoConnectorProfileCredentials {
    /// <p> The identifier for the desired client. </p>
    pub client_id: ::std::string::String,
    /// <p> The client secret used by the OAuth client to authenticate to the authorization server. </p>
    pub client_secret: ::std::string::String,
    /// <p> The credentials used to access protected Marketo resources. </p>
    pub access_token: ::std::option::Option<::std::string::String>,
    /// <p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>
    pub o_auth_request: ::std::option::Option<crate::types::ConnectorOAuthRequest>,
}
impl MarketoConnectorProfileCredentials {
    /// <p> The identifier for the desired client. </p>
    pub fn client_id(&self) -> &str {
        use std::ops::Deref;
        self.client_id.deref()
    }
    /// <p> The client secret used by the OAuth client to authenticate to the authorization server. </p>
    pub fn client_secret(&self) -> &str {
        use std::ops::Deref;
        self.client_secret.deref()
    }
    /// <p> The credentials used to access protected Marketo resources. </p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>
    pub fn o_auth_request(&self) -> ::std::option::Option<&crate::types::ConnectorOAuthRequest> {
        self.o_auth_request.as_ref()
    }
}
impl ::std::fmt::Debug for MarketoConnectorProfileCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MarketoConnectorProfileCredentials");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("o_auth_request", &self.o_auth_request);
        formatter.finish()
    }
}
impl MarketoConnectorProfileCredentials {
    /// Creates a new builder-style object to manufacture [`MarketoConnectorProfileCredentials`](crate::types::MarketoConnectorProfileCredentials).
    pub fn builder() -> crate::types::builders::MarketoConnectorProfileCredentialsBuilder {
        crate::types::builders::MarketoConnectorProfileCredentialsBuilder::default()
    }
}

/// A builder for [`MarketoConnectorProfileCredentials`](crate::types::MarketoConnectorProfileCredentials).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct MarketoConnectorProfileCredentialsBuilder {
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
    pub(crate) o_auth_request: ::std::option::Option<crate::types::ConnectorOAuthRequest>,
}
impl MarketoConnectorProfileCredentialsBuilder {
    /// <p> The identifier for the desired client. </p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the desired client. </p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p> The identifier for the desired client. </p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p> The client secret used by the OAuth client to authenticate to the authorization server. </p>
    /// This field is required.
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The client secret used by the OAuth client to authenticate to the authorization server. </p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p> The client secret used by the OAuth client to authenticate to the authorization server. </p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// <p> The credentials used to access protected Marketo resources. </p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The credentials used to access protected Marketo resources. </p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p> The credentials used to access protected Marketo resources. </p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// <p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>
    pub fn o_auth_request(mut self, input: crate::types::ConnectorOAuthRequest) -> Self {
        self.o_auth_request = ::std::option::Option::Some(input);
        self
    }
    /// <p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>
    pub fn set_o_auth_request(mut self, input: ::std::option::Option<crate::types::ConnectorOAuthRequest>) -> Self {
        self.o_auth_request = input;
        self
    }
    /// <p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>
    pub fn get_o_auth_request(&self) -> &::std::option::Option<crate::types::ConnectorOAuthRequest> {
        &self.o_auth_request
    }
    /// Consumes the builder and constructs a [`MarketoConnectorProfileCredentials`](crate::types::MarketoConnectorProfileCredentials).
    /// This method will fail if any of the following fields are not set:
    /// - [`client_id`](crate::types::builders::MarketoConnectorProfileCredentialsBuilder::client_id)
    /// - [`client_secret`](crate::types::builders::MarketoConnectorProfileCredentialsBuilder::client_secret)
    pub fn build(self) -> ::std::result::Result<crate::types::MarketoConnectorProfileCredentials, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MarketoConnectorProfileCredentials {
            client_id: self.client_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_id",
                    "client_id was not specified but it is required when building MarketoConnectorProfileCredentials",
                )
            })?,
            client_secret: self.client_secret.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_secret",
                    "client_secret was not specified but it is required when building MarketoConnectorProfileCredentials",
                )
            })?,
            access_token: self.access_token,
            o_auth_request: self.o_auth_request,
        })
    }
}
impl ::std::fmt::Debug for MarketoConnectorProfileCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MarketoConnectorProfileCredentialsBuilder");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("o_auth_request", &self.o_auth_request);
        formatter.finish()
    }
}
