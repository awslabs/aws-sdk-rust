// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets the number of <i>concurrent processes</i> that transfer OData records from your SAP instance. A concurrent process is query that retrieves a batch of records as part of a flow run. Amazon AppFlow can run multiple concurrent processes in parallel to transfer data faster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SapoDataParallelismConfig {
    /// <p>The maximum number of processes that Amazon AppFlow runs at the same time when it retrieves your data from your SAP application.</p>
    pub max_parallelism: i32,
}
impl SapoDataParallelismConfig {
    /// <p>The maximum number of processes that Amazon AppFlow runs at the same time when it retrieves your data from your SAP application.</p>
    pub fn max_parallelism(&self) -> i32 {
        self.max_parallelism
    }
}
impl SapoDataParallelismConfig {
    /// Creates a new builder-style object to manufacture [`SapoDataParallelismConfig`](crate::types::SapoDataParallelismConfig).
    pub fn builder() -> crate::types::builders::SapoDataParallelismConfigBuilder {
        crate::types::builders::SapoDataParallelismConfigBuilder::default()
    }
}

/// A builder for [`SapoDataParallelismConfig`](crate::types::SapoDataParallelismConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SapoDataParallelismConfigBuilder {
    pub(crate) max_parallelism: ::std::option::Option<i32>,
}
impl SapoDataParallelismConfigBuilder {
    /// <p>The maximum number of processes that Amazon AppFlow runs at the same time when it retrieves your data from your SAP application.</p>
    /// This field is required.
    pub fn max_parallelism(mut self, input: i32) -> Self {
        self.max_parallelism = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of processes that Amazon AppFlow runs at the same time when it retrieves your data from your SAP application.</p>
    pub fn set_max_parallelism(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_parallelism = input;
        self
    }
    /// <p>The maximum number of processes that Amazon AppFlow runs at the same time when it retrieves your data from your SAP application.</p>
    pub fn get_max_parallelism(&self) -> &::std::option::Option<i32> {
        &self.max_parallelism
    }
    /// Consumes the builder and constructs a [`SapoDataParallelismConfig`](crate::types::SapoDataParallelismConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_parallelism`](crate::types::builders::SapoDataParallelismConfigBuilder::max_parallelism)
    pub fn build(self) -> ::std::result::Result<crate::types::SapoDataParallelismConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SapoDataParallelismConfig {
            max_parallelism: self.max_parallelism.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_parallelism",
                    "max_parallelism was not specified but it is required when building SapoDataParallelismConfig",
                )
            })?,
        })
    }
}
