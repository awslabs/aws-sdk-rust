// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile properties required when using SAPOData. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SapoDataConnectorProfileProperties {
    /// <p> The location of the SAPOData resource. </p>
    #[doc(hidden)]
    pub application_host_url: std::option::Option<std::string::String>,
    /// <p> The application path to catalog service. </p>
    #[doc(hidden)]
    pub application_service_path: std::option::Option<std::string::String>,
    /// <p> The port number of the SAPOData instance. </p>
    #[doc(hidden)]
    pub port_number: std::option::Option<i32>,
    /// <p> The client number for the client creating the connection. </p>
    #[doc(hidden)]
    pub client_number: std::option::Option<std::string::String>,
    /// <p> The logon language of SAPOData instance. </p>
    #[doc(hidden)]
    pub logon_language: std::option::Option<std::string::String>,
    /// <p> The SAPOData Private Link service name to be used for private data transfers. </p>
    #[doc(hidden)]
    pub private_link_service_name: std::option::Option<std::string::String>,
    /// <p> The SAPOData OAuth properties required for OAuth type authentication. </p>
    #[doc(hidden)]
    pub o_auth_properties: std::option::Option<crate::types::OAuthProperties>,
}
impl SapoDataConnectorProfileProperties {
    /// <p> The location of the SAPOData resource. </p>
    pub fn application_host_url(&self) -> std::option::Option<&str> {
        self.application_host_url.as_deref()
    }
    /// <p> The application path to catalog service. </p>
    pub fn application_service_path(&self) -> std::option::Option<&str> {
        self.application_service_path.as_deref()
    }
    /// <p> The port number of the SAPOData instance. </p>
    pub fn port_number(&self) -> std::option::Option<i32> {
        self.port_number
    }
    /// <p> The client number for the client creating the connection. </p>
    pub fn client_number(&self) -> std::option::Option<&str> {
        self.client_number.as_deref()
    }
    /// <p> The logon language of SAPOData instance. </p>
    pub fn logon_language(&self) -> std::option::Option<&str> {
        self.logon_language.as_deref()
    }
    /// <p> The SAPOData Private Link service name to be used for private data transfers. </p>
    pub fn private_link_service_name(&self) -> std::option::Option<&str> {
        self.private_link_service_name.as_deref()
    }
    /// <p> The SAPOData OAuth properties required for OAuth type authentication. </p>
    pub fn o_auth_properties(&self) -> std::option::Option<&crate::types::OAuthProperties> {
        self.o_auth_properties.as_ref()
    }
}
impl SapoDataConnectorProfileProperties {
    /// Creates a new builder-style object to manufacture [`SapoDataConnectorProfileProperties`](crate::types::SapoDataConnectorProfileProperties).
    pub fn builder() -> crate::types::builders::SapoDataConnectorProfilePropertiesBuilder {
        crate::types::builders::SapoDataConnectorProfilePropertiesBuilder::default()
    }
}

/// A builder for [`SapoDataConnectorProfileProperties`](crate::types::SapoDataConnectorProfileProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SapoDataConnectorProfilePropertiesBuilder {
    pub(crate) application_host_url: std::option::Option<std::string::String>,
    pub(crate) application_service_path: std::option::Option<std::string::String>,
    pub(crate) port_number: std::option::Option<i32>,
    pub(crate) client_number: std::option::Option<std::string::String>,
    pub(crate) logon_language: std::option::Option<std::string::String>,
    pub(crate) private_link_service_name: std::option::Option<std::string::String>,
    pub(crate) o_auth_properties: std::option::Option<crate::types::OAuthProperties>,
}
impl SapoDataConnectorProfilePropertiesBuilder {
    /// <p> The location of the SAPOData resource. </p>
    pub fn application_host_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_host_url = Some(input.into());
        self
    }
    /// <p> The location of the SAPOData resource. </p>
    pub fn set_application_host_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_host_url = input;
        self
    }
    /// <p> The application path to catalog service. </p>
    pub fn application_service_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_service_path = Some(input.into());
        self
    }
    /// <p> The application path to catalog service. </p>
    pub fn set_application_service_path(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_service_path = input;
        self
    }
    /// <p> The port number of the SAPOData instance. </p>
    pub fn port_number(mut self, input: i32) -> Self {
        self.port_number = Some(input);
        self
    }
    /// <p> The port number of the SAPOData instance. </p>
    pub fn set_port_number(mut self, input: std::option::Option<i32>) -> Self {
        self.port_number = input;
        self
    }
    /// <p> The client number for the client creating the connection. </p>
    pub fn client_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_number = Some(input.into());
        self
    }
    /// <p> The client number for the client creating the connection. </p>
    pub fn set_client_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_number = input;
        self
    }
    /// <p> The logon language of SAPOData instance. </p>
    pub fn logon_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.logon_language = Some(input.into());
        self
    }
    /// <p> The logon language of SAPOData instance. </p>
    pub fn set_logon_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logon_language = input;
        self
    }
    /// <p> The SAPOData Private Link service name to be used for private data transfers. </p>
    pub fn private_link_service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_link_service_name = Some(input.into());
        self
    }
    /// <p> The SAPOData Private Link service name to be used for private data transfers. </p>
    pub fn set_private_link_service_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_link_service_name = input;
        self
    }
    /// <p> The SAPOData OAuth properties required for OAuth type authentication. </p>
    pub fn o_auth_properties(mut self, input: crate::types::OAuthProperties) -> Self {
        self.o_auth_properties = Some(input);
        self
    }
    /// <p> The SAPOData OAuth properties required for OAuth type authentication. </p>
    pub fn set_o_auth_properties(
        mut self,
        input: std::option::Option<crate::types::OAuthProperties>,
    ) -> Self {
        self.o_auth_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`SapoDataConnectorProfileProperties`](crate::types::SapoDataConnectorProfileProperties).
    pub fn build(self) -> crate::types::SapoDataConnectorProfileProperties {
        crate::types::SapoDataConnectorProfileProperties {
            application_host_url: self.application_host_url,
            application_service_path: self.application_service_path,
            port_number: self.port_number,
            client_number: self.client_number,
            logon_language: self.logon_language,
            private_link_service_name: self.private_link_service_name,
            o_auth_properties: self.o_auth_properties,
        }
    }
}
