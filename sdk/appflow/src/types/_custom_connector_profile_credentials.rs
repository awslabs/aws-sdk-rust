// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connector-specific profile credentials that are required when using the custom connector.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomConnectorProfileCredentials {
    /// <p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>
    #[doc(hidden)]
    pub authentication_type: std::option::Option<crate::types::AuthenticationType>,
    /// <p>The basic credentials that are required for the authentication of the user.</p>
    #[doc(hidden)]
    pub basic: std::option::Option<crate::types::BasicAuthCredentials>,
    /// <p>The OAuth 2.0 credentials required for the authentication of the user.</p>
    #[doc(hidden)]
    pub oauth2: std::option::Option<crate::types::OAuth2Credentials>,
    /// <p>The API keys required for the authentication of the user.</p>
    #[doc(hidden)]
    pub api_key: std::option::Option<crate::types::ApiKeyCredentials>,
    /// <p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>
    #[doc(hidden)]
    pub custom: std::option::Option<crate::types::CustomAuthCredentials>,
}
impl CustomConnectorProfileCredentials {
    /// <p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>
    pub fn authentication_type(&self) -> std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>The basic credentials that are required for the authentication of the user.</p>
    pub fn basic(&self) -> std::option::Option<&crate::types::BasicAuthCredentials> {
        self.basic.as_ref()
    }
    /// <p>The OAuth 2.0 credentials required for the authentication of the user.</p>
    pub fn oauth2(&self) -> std::option::Option<&crate::types::OAuth2Credentials> {
        self.oauth2.as_ref()
    }
    /// <p>The API keys required for the authentication of the user.</p>
    pub fn api_key(&self) -> std::option::Option<&crate::types::ApiKeyCredentials> {
        self.api_key.as_ref()
    }
    /// <p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>
    pub fn custom(&self) -> std::option::Option<&crate::types::CustomAuthCredentials> {
        self.custom.as_ref()
    }
}
impl CustomConnectorProfileCredentials {
    /// Creates a new builder-style object to manufacture [`CustomConnectorProfileCredentials`](crate::types::CustomConnectorProfileCredentials).
    pub fn builder() -> crate::types::builders::CustomConnectorProfileCredentialsBuilder {
        crate::types::builders::CustomConnectorProfileCredentialsBuilder::default()
    }
}

/// A builder for [`CustomConnectorProfileCredentials`](crate::types::CustomConnectorProfileCredentials).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomConnectorProfileCredentialsBuilder {
    pub(crate) authentication_type: std::option::Option<crate::types::AuthenticationType>,
    pub(crate) basic: std::option::Option<crate::types::BasicAuthCredentials>,
    pub(crate) oauth2: std::option::Option<crate::types::OAuth2Credentials>,
    pub(crate) api_key: std::option::Option<crate::types::ApiKeyCredentials>,
    pub(crate) custom: std::option::Option<crate::types::CustomAuthCredentials>,
}
impl CustomConnectorProfileCredentialsBuilder {
    /// <p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = Some(input);
        self
    }
    /// <p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>
    pub fn set_authentication_type(
        mut self,
        input: std::option::Option<crate::types::AuthenticationType>,
    ) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The basic credentials that are required for the authentication of the user.</p>
    pub fn basic(mut self, input: crate::types::BasicAuthCredentials) -> Self {
        self.basic = Some(input);
        self
    }
    /// <p>The basic credentials that are required for the authentication of the user.</p>
    pub fn set_basic(
        mut self,
        input: std::option::Option<crate::types::BasicAuthCredentials>,
    ) -> Self {
        self.basic = input;
        self
    }
    /// <p>The OAuth 2.0 credentials required for the authentication of the user.</p>
    pub fn oauth2(mut self, input: crate::types::OAuth2Credentials) -> Self {
        self.oauth2 = Some(input);
        self
    }
    /// <p>The OAuth 2.0 credentials required for the authentication of the user.</p>
    pub fn set_oauth2(
        mut self,
        input: std::option::Option<crate::types::OAuth2Credentials>,
    ) -> Self {
        self.oauth2 = input;
        self
    }
    /// <p>The API keys required for the authentication of the user.</p>
    pub fn api_key(mut self, input: crate::types::ApiKeyCredentials) -> Self {
        self.api_key = Some(input);
        self
    }
    /// <p>The API keys required for the authentication of the user.</p>
    pub fn set_api_key(
        mut self,
        input: std::option::Option<crate::types::ApiKeyCredentials>,
    ) -> Self {
        self.api_key = input;
        self
    }
    /// <p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>
    pub fn custom(mut self, input: crate::types::CustomAuthCredentials) -> Self {
        self.custom = Some(input);
        self
    }
    /// <p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>
    pub fn set_custom(
        mut self,
        input: std::option::Option<crate::types::CustomAuthCredentials>,
    ) -> Self {
        self.custom = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomConnectorProfileCredentials`](crate::types::CustomConnectorProfileCredentials).
    pub fn build(self) -> crate::types::CustomConnectorProfileCredentials {
        crate::types::CustomConnectorProfileCredentials {
            authentication_type: self.authentication_type,
            basic: self.basic,
            oauth2: self.oauth2,
            api_key: self.api_key,
            custom: self.custom,
        }
    }
}
