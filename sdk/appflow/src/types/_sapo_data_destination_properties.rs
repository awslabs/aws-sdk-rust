// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties that are applied when using SAPOData as a flow destination</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SapoDataDestinationProperties {
    /// <p>The object path specified in the SAPOData flow destination.</p>
    pub object_path: ::std::string::String,
    /// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p>
    /// <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>
    pub success_response_handling_config: ::std::option::Option<crate::types::SuccessResponseHandlingConfig>,
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub id_field_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub error_handling_config: ::std::option::Option<crate::types::ErrorHandlingConfig>,
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub write_operation_type: ::std::option::Option<crate::types::WriteOperationType>,
}
impl SapoDataDestinationProperties {
    /// <p>The object path specified in the SAPOData flow destination.</p>
    pub fn object_path(&self) -> &str {
        use std::ops::Deref;
        self.object_path.deref()
    }
    /// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p>
    /// <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>
    pub fn success_response_handling_config(&self) -> ::std::option::Option<&crate::types::SuccessResponseHandlingConfig> {
        self.success_response_handling_config.as_ref()
    }
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.id_field_names.is_none()`.
    pub fn id_field_names(&self) -> &[::std::string::String] {
        self.id_field_names.as_deref().unwrap_or_default()
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(&self) -> ::std::option::Option<&crate::types::ErrorHandlingConfig> {
        self.error_handling_config.as_ref()
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn write_operation_type(&self) -> ::std::option::Option<&crate::types::WriteOperationType> {
        self.write_operation_type.as_ref()
    }
}
impl SapoDataDestinationProperties {
    /// Creates a new builder-style object to manufacture [`SapoDataDestinationProperties`](crate::types::SapoDataDestinationProperties).
    pub fn builder() -> crate::types::builders::SapoDataDestinationPropertiesBuilder {
        crate::types::builders::SapoDataDestinationPropertiesBuilder::default()
    }
}

/// A builder for [`SapoDataDestinationProperties`](crate::types::SapoDataDestinationProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SapoDataDestinationPropertiesBuilder {
    pub(crate) object_path: ::std::option::Option<::std::string::String>,
    pub(crate) success_response_handling_config: ::std::option::Option<crate::types::SuccessResponseHandlingConfig>,
    pub(crate) id_field_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) error_handling_config: ::std::option::Option<crate::types::ErrorHandlingConfig>,
    pub(crate) write_operation_type: ::std::option::Option<crate::types::WriteOperationType>,
}
impl SapoDataDestinationPropertiesBuilder {
    /// <p>The object path specified in the SAPOData flow destination.</p>
    /// This field is required.
    pub fn object_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The object path specified in the SAPOData flow destination.</p>
    pub fn set_object_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_path = input;
        self
    }
    /// <p>The object path specified in the SAPOData flow destination.</p>
    pub fn get_object_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_path
    }
    /// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p>
    /// <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>
    pub fn success_response_handling_config(mut self, input: crate::types::SuccessResponseHandlingConfig) -> Self {
        self.success_response_handling_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p>
    /// <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>
    pub fn set_success_response_handling_config(mut self, input: ::std::option::Option<crate::types::SuccessResponseHandlingConfig>) -> Self {
        self.success_response_handling_config = input;
        self
    }
    /// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p>
    /// <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>
    pub fn get_success_response_handling_config(&self) -> &::std::option::Option<crate::types::SuccessResponseHandlingConfig> {
        &self.success_response_handling_config
    }
    /// Appends an item to `id_field_names`.
    ///
    /// To override the contents of this collection use [`set_id_field_names`](Self::set_id_field_names).
    ///
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn id_field_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.id_field_names.unwrap_or_default();
        v.push(input.into());
        self.id_field_names = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn set_id_field_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.id_field_names = input;
        self
    }
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn get_id_field_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.id_field_names
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(mut self, input: crate::types::ErrorHandlingConfig) -> Self {
        self.error_handling_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn set_error_handling_config(mut self, input: ::std::option::Option<crate::types::ErrorHandlingConfig>) -> Self {
        self.error_handling_config = input;
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn get_error_handling_config(&self) -> &::std::option::Option<crate::types::ErrorHandlingConfig> {
        &self.error_handling_config
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn write_operation_type(mut self, input: crate::types::WriteOperationType) -> Self {
        self.write_operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn set_write_operation_type(mut self, input: ::std::option::Option<crate::types::WriteOperationType>) -> Self {
        self.write_operation_type = input;
        self
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn get_write_operation_type(&self) -> &::std::option::Option<crate::types::WriteOperationType> {
        &self.write_operation_type
    }
    /// Consumes the builder and constructs a [`SapoDataDestinationProperties`](crate::types::SapoDataDestinationProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`object_path`](crate::types::builders::SapoDataDestinationPropertiesBuilder::object_path)
    pub fn build(self) -> ::std::result::Result<crate::types::SapoDataDestinationProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SapoDataDestinationProperties {
            object_path: self.object_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_path",
                    "object_path was not specified but it is required when building SapoDataDestinationProperties",
                )
            })?,
            success_response_handling_config: self.success_response_handling_config,
            id_field_names: self.id_field_names,
            error_handling_config: self.error_handling_config,
            write_operation_type: self.write_operation_type,
        })
    }
}
