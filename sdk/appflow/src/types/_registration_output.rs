// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the status of an attempt from Amazon AppFlow to register a resource.</p>
/// <p>When you run a flow that you've configured to use a metadata catalog, Amazon AppFlow registers a metadata table and data partitions with that catalog. This operation provides the status of that registration attempt. The operation also indicates how many related resources Amazon AppFlow created or updated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegistrationOutput {
    /// <p>Explains the status of the registration attempt from Amazon AppFlow. If the attempt fails, the message explains why.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>Indicates the number of resources that Amazon AppFlow created or updated. Possible resources include metadata tables and data partitions.</p>
    #[doc(hidden)]
    pub result: std::option::Option<std::string::String>,
    /// <p>Indicates the status of the registration attempt from Amazon AppFlow.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ExecutionStatus>,
}
impl RegistrationOutput {
    /// <p>Explains the status of the registration attempt from Amazon AppFlow. If the attempt fails, the message explains why.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Indicates the number of resources that Amazon AppFlow created or updated. Possible resources include metadata tables and data partitions.</p>
    pub fn result(&self) -> std::option::Option<&str> {
        self.result.as_deref()
    }
    /// <p>Indicates the status of the registration attempt from Amazon AppFlow.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ExecutionStatus> {
        self.status.as_ref()
    }
}
impl RegistrationOutput {
    /// Creates a new builder-style object to manufacture [`RegistrationOutput`](crate::types::RegistrationOutput).
    pub fn builder() -> crate::types::builders::RegistrationOutputBuilder {
        crate::types::builders::RegistrationOutputBuilder::default()
    }
}

/// A builder for [`RegistrationOutput`](crate::types::RegistrationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegistrationOutputBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) result: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ExecutionStatus>,
}
impl RegistrationOutputBuilder {
    /// <p>Explains the status of the registration attempt from Amazon AppFlow. If the attempt fails, the message explains why.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Explains the status of the registration attempt from Amazon AppFlow. If the attempt fails, the message explains why.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Indicates the number of resources that Amazon AppFlow created or updated. Possible resources include metadata tables and data partitions.</p>
    pub fn result(mut self, input: impl Into<std::string::String>) -> Self {
        self.result = Some(input.into());
        self
    }
    /// <p>Indicates the number of resources that Amazon AppFlow created or updated. Possible resources include metadata tables and data partitions.</p>
    pub fn set_result(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.result = input;
        self
    }
    /// <p>Indicates the status of the registration attempt from Amazon AppFlow.</p>
    pub fn status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of the registration attempt from Amazon AppFlow.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`RegistrationOutput`](crate::types::RegistrationOutput).
    pub fn build(self) -> crate::types::RegistrationOutput {
        crate::types::RegistrationOutput {
            message: self.message,
            result: self.result,
            status: self.status,
        }
    }
}
