// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The high-level entity that can be queried in Amazon AppFlow. For example, a Salesforce entity might be an <i>Account</i> or <i>Opportunity</i>, whereas a ServiceNow entity might be an <i>Incident</i>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectorEntity {
    /// <p> The name of the connector entity. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The label applied to the connector entity. </p>
    #[doc(hidden)]
    pub label: std::option::Option<std::string::String>,
    /// <p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = "the_current_entity_name_with_hasNestedEntities_true"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>
    #[doc(hidden)]
    pub has_nested_entities: bool,
}
impl ConnectorEntity {
    /// <p> The name of the connector entity. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The label applied to the connector entity. </p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = "the_current_entity_name_with_hasNestedEntities_true"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>
    pub fn has_nested_entities(&self) -> bool {
        self.has_nested_entities
    }
}
impl ConnectorEntity {
    /// Creates a new builder-style object to manufacture [`ConnectorEntity`](crate::types::ConnectorEntity).
    pub fn builder() -> crate::types::builders::ConnectorEntityBuilder {
        crate::types::builders::ConnectorEntityBuilder::default()
    }
}

/// A builder for [`ConnectorEntity`](crate::types::ConnectorEntity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectorEntityBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) label: std::option::Option<std::string::String>,
    pub(crate) has_nested_entities: std::option::Option<bool>,
}
impl ConnectorEntityBuilder {
    /// <p> The name of the connector entity. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the connector entity. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The label applied to the connector entity. </p>
    pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
        self.label = Some(input.into());
        self
    }
    /// <p> The label applied to the connector entity. </p>
    pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = "the_current_entity_name_with_hasNestedEntities_true"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>
    pub fn has_nested_entities(mut self, input: bool) -> Self {
        self.has_nested_entities = Some(input);
        self
    }
    /// <p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = "the_current_entity_name_with_hasNestedEntities_true"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>
    pub fn set_has_nested_entities(mut self, input: std::option::Option<bool>) -> Self {
        self.has_nested_entities = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectorEntity`](crate::types::ConnectorEntity).
    pub fn build(self) -> crate::types::ConnectorEntity {
        crate::types::ConnectorEntity {
            name: self.name,
            label: self.label,
            has_nested_entities: self.has_nested_entities.unwrap_or_default(),
        }
    }
}
