// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The connector-specific profile properties required by each connector. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectorProfileProperties {
    /// <p> The connector-specific properties required by Amplitude. </p>
    #[doc(hidden)]
    pub amplitude: std::option::Option<crate::types::AmplitudeConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Datadog. </p>
    #[doc(hidden)]
    pub datadog: std::option::Option<crate::types::DatadogConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Dynatrace. </p>
    #[doc(hidden)]
    pub dynatrace: std::option::Option<crate::types::DynatraceConnectorProfileProperties>,
    /// <p> The connector-specific properties required Google Analytics. </p>
    #[doc(hidden)]
    pub google_analytics:
        std::option::Option<crate::types::GoogleAnalyticsConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Amazon Honeycode. </p>
    #[doc(hidden)]
    pub honeycode: std::option::Option<crate::types::HoneycodeConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Infor Nexus. </p>
    #[doc(hidden)]
    pub infor_nexus: std::option::Option<crate::types::InforNexusConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Marketo. </p>
    #[doc(hidden)]
    pub marketo: std::option::Option<crate::types::MarketoConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Amazon Redshift. </p>
    #[doc(hidden)]
    pub redshift: std::option::Option<crate::types::RedshiftConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Salesforce. </p>
    #[doc(hidden)]
    pub salesforce: std::option::Option<crate::types::SalesforceConnectorProfileProperties>,
    /// <p> The connector-specific properties required by serviceNow. </p>
    #[doc(hidden)]
    pub service_now: std::option::Option<crate::types::ServiceNowConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Singular. </p>
    #[doc(hidden)]
    pub singular: std::option::Option<crate::types::SingularConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Slack. </p>
    #[doc(hidden)]
    pub slack: std::option::Option<crate::types::SlackConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Snowflake. </p>
    #[doc(hidden)]
    pub snowflake: std::option::Option<crate::types::SnowflakeConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Trend Micro. </p>
    #[doc(hidden)]
    pub trendmicro: std::option::Option<crate::types::TrendmicroConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Veeva. </p>
    #[doc(hidden)]
    pub veeva: std::option::Option<crate::types::VeevaConnectorProfileProperties>,
    /// <p> The connector-specific properties required by Zendesk. </p>
    #[doc(hidden)]
    pub zendesk: std::option::Option<crate::types::ZendeskConnectorProfileProperties>,
    /// <p> The connector-specific profile properties required when using SAPOData. </p>
    #[doc(hidden)]
    pub sapo_data: std::option::Option<crate::types::SapoDataConnectorProfileProperties>,
    /// <p>The properties required by the custom connector.</p>
    #[doc(hidden)]
    pub custom_connector: std::option::Option<crate::types::CustomConnectorProfileProperties>,
    /// <p>The connector-specific properties required by Salesforce Pardot.</p>
    #[doc(hidden)]
    pub pardot: std::option::Option<crate::types::PardotConnectorProfileProperties>,
}
impl ConnectorProfileProperties {
    /// <p> The connector-specific properties required by Amplitude. </p>
    pub fn amplitude(
        &self,
    ) -> std::option::Option<&crate::types::AmplitudeConnectorProfileProperties> {
        self.amplitude.as_ref()
    }
    /// <p> The connector-specific properties required by Datadog. </p>
    pub fn datadog(&self) -> std::option::Option<&crate::types::DatadogConnectorProfileProperties> {
        self.datadog.as_ref()
    }
    /// <p> The connector-specific properties required by Dynatrace. </p>
    pub fn dynatrace(
        &self,
    ) -> std::option::Option<&crate::types::DynatraceConnectorProfileProperties> {
        self.dynatrace.as_ref()
    }
    /// <p> The connector-specific properties required Google Analytics. </p>
    pub fn google_analytics(
        &self,
    ) -> std::option::Option<&crate::types::GoogleAnalyticsConnectorProfileProperties> {
        self.google_analytics.as_ref()
    }
    /// <p> The connector-specific properties required by Amazon Honeycode. </p>
    pub fn honeycode(
        &self,
    ) -> std::option::Option<&crate::types::HoneycodeConnectorProfileProperties> {
        self.honeycode.as_ref()
    }
    /// <p> The connector-specific properties required by Infor Nexus. </p>
    pub fn infor_nexus(
        &self,
    ) -> std::option::Option<&crate::types::InforNexusConnectorProfileProperties> {
        self.infor_nexus.as_ref()
    }
    /// <p> The connector-specific properties required by Marketo. </p>
    pub fn marketo(&self) -> std::option::Option<&crate::types::MarketoConnectorProfileProperties> {
        self.marketo.as_ref()
    }
    /// <p> The connector-specific properties required by Amazon Redshift. </p>
    pub fn redshift(
        &self,
    ) -> std::option::Option<&crate::types::RedshiftConnectorProfileProperties> {
        self.redshift.as_ref()
    }
    /// <p> The connector-specific properties required by Salesforce. </p>
    pub fn salesforce(
        &self,
    ) -> std::option::Option<&crate::types::SalesforceConnectorProfileProperties> {
        self.salesforce.as_ref()
    }
    /// <p> The connector-specific properties required by serviceNow. </p>
    pub fn service_now(
        &self,
    ) -> std::option::Option<&crate::types::ServiceNowConnectorProfileProperties> {
        self.service_now.as_ref()
    }
    /// <p> The connector-specific properties required by Singular. </p>
    pub fn singular(
        &self,
    ) -> std::option::Option<&crate::types::SingularConnectorProfileProperties> {
        self.singular.as_ref()
    }
    /// <p> The connector-specific properties required by Slack. </p>
    pub fn slack(&self) -> std::option::Option<&crate::types::SlackConnectorProfileProperties> {
        self.slack.as_ref()
    }
    /// <p> The connector-specific properties required by Snowflake. </p>
    pub fn snowflake(
        &self,
    ) -> std::option::Option<&crate::types::SnowflakeConnectorProfileProperties> {
        self.snowflake.as_ref()
    }
    /// <p> The connector-specific properties required by Trend Micro. </p>
    pub fn trendmicro(
        &self,
    ) -> std::option::Option<&crate::types::TrendmicroConnectorProfileProperties> {
        self.trendmicro.as_ref()
    }
    /// <p> The connector-specific properties required by Veeva. </p>
    pub fn veeva(&self) -> std::option::Option<&crate::types::VeevaConnectorProfileProperties> {
        self.veeva.as_ref()
    }
    /// <p> The connector-specific properties required by Zendesk. </p>
    pub fn zendesk(&self) -> std::option::Option<&crate::types::ZendeskConnectorProfileProperties> {
        self.zendesk.as_ref()
    }
    /// <p> The connector-specific profile properties required when using SAPOData. </p>
    pub fn sapo_data(
        &self,
    ) -> std::option::Option<&crate::types::SapoDataConnectorProfileProperties> {
        self.sapo_data.as_ref()
    }
    /// <p>The properties required by the custom connector.</p>
    pub fn custom_connector(
        &self,
    ) -> std::option::Option<&crate::types::CustomConnectorProfileProperties> {
        self.custom_connector.as_ref()
    }
    /// <p>The connector-specific properties required by Salesforce Pardot.</p>
    pub fn pardot(&self) -> std::option::Option<&crate::types::PardotConnectorProfileProperties> {
        self.pardot.as_ref()
    }
}
impl ConnectorProfileProperties {
    /// Creates a new builder-style object to manufacture [`ConnectorProfileProperties`](crate::types::ConnectorProfileProperties).
    pub fn builder() -> crate::types::builders::ConnectorProfilePropertiesBuilder {
        crate::types::builders::ConnectorProfilePropertiesBuilder::default()
    }
}

/// A builder for [`ConnectorProfileProperties`](crate::types::ConnectorProfileProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectorProfilePropertiesBuilder {
    pub(crate) amplitude: std::option::Option<crate::types::AmplitudeConnectorProfileProperties>,
    pub(crate) datadog: std::option::Option<crate::types::DatadogConnectorProfileProperties>,
    pub(crate) dynatrace: std::option::Option<crate::types::DynatraceConnectorProfileProperties>,
    pub(crate) google_analytics:
        std::option::Option<crate::types::GoogleAnalyticsConnectorProfileProperties>,
    pub(crate) honeycode: std::option::Option<crate::types::HoneycodeConnectorProfileProperties>,
    pub(crate) infor_nexus: std::option::Option<crate::types::InforNexusConnectorProfileProperties>,
    pub(crate) marketo: std::option::Option<crate::types::MarketoConnectorProfileProperties>,
    pub(crate) redshift: std::option::Option<crate::types::RedshiftConnectorProfileProperties>,
    pub(crate) salesforce: std::option::Option<crate::types::SalesforceConnectorProfileProperties>,
    pub(crate) service_now: std::option::Option<crate::types::ServiceNowConnectorProfileProperties>,
    pub(crate) singular: std::option::Option<crate::types::SingularConnectorProfileProperties>,
    pub(crate) slack: std::option::Option<crate::types::SlackConnectorProfileProperties>,
    pub(crate) snowflake: std::option::Option<crate::types::SnowflakeConnectorProfileProperties>,
    pub(crate) trendmicro: std::option::Option<crate::types::TrendmicroConnectorProfileProperties>,
    pub(crate) veeva: std::option::Option<crate::types::VeevaConnectorProfileProperties>,
    pub(crate) zendesk: std::option::Option<crate::types::ZendeskConnectorProfileProperties>,
    pub(crate) sapo_data: std::option::Option<crate::types::SapoDataConnectorProfileProperties>,
    pub(crate) custom_connector:
        std::option::Option<crate::types::CustomConnectorProfileProperties>,
    pub(crate) pardot: std::option::Option<crate::types::PardotConnectorProfileProperties>,
}
impl ConnectorProfilePropertiesBuilder {
    /// <p> The connector-specific properties required by Amplitude. </p>
    pub fn amplitude(mut self, input: crate::types::AmplitudeConnectorProfileProperties) -> Self {
        self.amplitude = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Amplitude. </p>
    pub fn set_amplitude(
        mut self,
        input: std::option::Option<crate::types::AmplitudeConnectorProfileProperties>,
    ) -> Self {
        self.amplitude = input;
        self
    }
    /// <p> The connector-specific properties required by Datadog. </p>
    pub fn datadog(mut self, input: crate::types::DatadogConnectorProfileProperties) -> Self {
        self.datadog = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Datadog. </p>
    pub fn set_datadog(
        mut self,
        input: std::option::Option<crate::types::DatadogConnectorProfileProperties>,
    ) -> Self {
        self.datadog = input;
        self
    }
    /// <p> The connector-specific properties required by Dynatrace. </p>
    pub fn dynatrace(mut self, input: crate::types::DynatraceConnectorProfileProperties) -> Self {
        self.dynatrace = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Dynatrace. </p>
    pub fn set_dynatrace(
        mut self,
        input: std::option::Option<crate::types::DynatraceConnectorProfileProperties>,
    ) -> Self {
        self.dynatrace = input;
        self
    }
    /// <p> The connector-specific properties required Google Analytics. </p>
    pub fn google_analytics(
        mut self,
        input: crate::types::GoogleAnalyticsConnectorProfileProperties,
    ) -> Self {
        self.google_analytics = Some(input);
        self
    }
    /// <p> The connector-specific properties required Google Analytics. </p>
    pub fn set_google_analytics(
        mut self,
        input: std::option::Option<crate::types::GoogleAnalyticsConnectorProfileProperties>,
    ) -> Self {
        self.google_analytics = input;
        self
    }
    /// <p> The connector-specific properties required by Amazon Honeycode. </p>
    pub fn honeycode(mut self, input: crate::types::HoneycodeConnectorProfileProperties) -> Self {
        self.honeycode = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Amazon Honeycode. </p>
    pub fn set_honeycode(
        mut self,
        input: std::option::Option<crate::types::HoneycodeConnectorProfileProperties>,
    ) -> Self {
        self.honeycode = input;
        self
    }
    /// <p> The connector-specific properties required by Infor Nexus. </p>
    pub fn infor_nexus(
        mut self,
        input: crate::types::InforNexusConnectorProfileProperties,
    ) -> Self {
        self.infor_nexus = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Infor Nexus. </p>
    pub fn set_infor_nexus(
        mut self,
        input: std::option::Option<crate::types::InforNexusConnectorProfileProperties>,
    ) -> Self {
        self.infor_nexus = input;
        self
    }
    /// <p> The connector-specific properties required by Marketo. </p>
    pub fn marketo(mut self, input: crate::types::MarketoConnectorProfileProperties) -> Self {
        self.marketo = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Marketo. </p>
    pub fn set_marketo(
        mut self,
        input: std::option::Option<crate::types::MarketoConnectorProfileProperties>,
    ) -> Self {
        self.marketo = input;
        self
    }
    /// <p> The connector-specific properties required by Amazon Redshift. </p>
    pub fn redshift(mut self, input: crate::types::RedshiftConnectorProfileProperties) -> Self {
        self.redshift = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Amazon Redshift. </p>
    pub fn set_redshift(
        mut self,
        input: std::option::Option<crate::types::RedshiftConnectorProfileProperties>,
    ) -> Self {
        self.redshift = input;
        self
    }
    /// <p> The connector-specific properties required by Salesforce. </p>
    pub fn salesforce(mut self, input: crate::types::SalesforceConnectorProfileProperties) -> Self {
        self.salesforce = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Salesforce. </p>
    pub fn set_salesforce(
        mut self,
        input: std::option::Option<crate::types::SalesforceConnectorProfileProperties>,
    ) -> Self {
        self.salesforce = input;
        self
    }
    /// <p> The connector-specific properties required by serviceNow. </p>
    pub fn service_now(
        mut self,
        input: crate::types::ServiceNowConnectorProfileProperties,
    ) -> Self {
        self.service_now = Some(input);
        self
    }
    /// <p> The connector-specific properties required by serviceNow. </p>
    pub fn set_service_now(
        mut self,
        input: std::option::Option<crate::types::ServiceNowConnectorProfileProperties>,
    ) -> Self {
        self.service_now = input;
        self
    }
    /// <p> The connector-specific properties required by Singular. </p>
    pub fn singular(mut self, input: crate::types::SingularConnectorProfileProperties) -> Self {
        self.singular = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Singular. </p>
    pub fn set_singular(
        mut self,
        input: std::option::Option<crate::types::SingularConnectorProfileProperties>,
    ) -> Self {
        self.singular = input;
        self
    }
    /// <p> The connector-specific properties required by Slack. </p>
    pub fn slack(mut self, input: crate::types::SlackConnectorProfileProperties) -> Self {
        self.slack = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Slack. </p>
    pub fn set_slack(
        mut self,
        input: std::option::Option<crate::types::SlackConnectorProfileProperties>,
    ) -> Self {
        self.slack = input;
        self
    }
    /// <p> The connector-specific properties required by Snowflake. </p>
    pub fn snowflake(mut self, input: crate::types::SnowflakeConnectorProfileProperties) -> Self {
        self.snowflake = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Snowflake. </p>
    pub fn set_snowflake(
        mut self,
        input: std::option::Option<crate::types::SnowflakeConnectorProfileProperties>,
    ) -> Self {
        self.snowflake = input;
        self
    }
    /// <p> The connector-specific properties required by Trend Micro. </p>
    pub fn trendmicro(mut self, input: crate::types::TrendmicroConnectorProfileProperties) -> Self {
        self.trendmicro = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Trend Micro. </p>
    pub fn set_trendmicro(
        mut self,
        input: std::option::Option<crate::types::TrendmicroConnectorProfileProperties>,
    ) -> Self {
        self.trendmicro = input;
        self
    }
    /// <p> The connector-specific properties required by Veeva. </p>
    pub fn veeva(mut self, input: crate::types::VeevaConnectorProfileProperties) -> Self {
        self.veeva = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Veeva. </p>
    pub fn set_veeva(
        mut self,
        input: std::option::Option<crate::types::VeevaConnectorProfileProperties>,
    ) -> Self {
        self.veeva = input;
        self
    }
    /// <p> The connector-specific properties required by Zendesk. </p>
    pub fn zendesk(mut self, input: crate::types::ZendeskConnectorProfileProperties) -> Self {
        self.zendesk = Some(input);
        self
    }
    /// <p> The connector-specific properties required by Zendesk. </p>
    pub fn set_zendesk(
        mut self,
        input: std::option::Option<crate::types::ZendeskConnectorProfileProperties>,
    ) -> Self {
        self.zendesk = input;
        self
    }
    /// <p> The connector-specific profile properties required when using SAPOData. </p>
    pub fn sapo_data(mut self, input: crate::types::SapoDataConnectorProfileProperties) -> Self {
        self.sapo_data = Some(input);
        self
    }
    /// <p> The connector-specific profile properties required when using SAPOData. </p>
    pub fn set_sapo_data(
        mut self,
        input: std::option::Option<crate::types::SapoDataConnectorProfileProperties>,
    ) -> Self {
        self.sapo_data = input;
        self
    }
    /// <p>The properties required by the custom connector.</p>
    pub fn custom_connector(
        mut self,
        input: crate::types::CustomConnectorProfileProperties,
    ) -> Self {
        self.custom_connector = Some(input);
        self
    }
    /// <p>The properties required by the custom connector.</p>
    pub fn set_custom_connector(
        mut self,
        input: std::option::Option<crate::types::CustomConnectorProfileProperties>,
    ) -> Self {
        self.custom_connector = input;
        self
    }
    /// <p>The connector-specific properties required by Salesforce Pardot.</p>
    pub fn pardot(mut self, input: crate::types::PardotConnectorProfileProperties) -> Self {
        self.pardot = Some(input);
        self
    }
    /// <p>The connector-specific properties required by Salesforce Pardot.</p>
    pub fn set_pardot(
        mut self,
        input: std::option::Option<crate::types::PardotConnectorProfileProperties>,
    ) -> Self {
        self.pardot = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectorProfileProperties`](crate::types::ConnectorProfileProperties).
    pub fn build(self) -> crate::types::ConnectorProfileProperties {
        crate::types::ConnectorProfileProperties {
            amplitude: self.amplitude,
            datadog: self.datadog,
            dynatrace: self.dynatrace,
            google_analytics: self.google_analytics,
            honeycode: self.honeycode,
            infor_nexus: self.infor_nexus,
            marketo: self.marketo,
            redshift: self.redshift,
            salesforce: self.salesforce,
            service_now: self.service_now,
            singular: self.singular,
            slack: self.slack,
            snowflake: self.snowflake,
            trendmicro: self.trendmicro,
            veeva: self.veeva,
            zendesk: self.zendesk,
            sapo_data: self.sapo_data,
            custom_connector: self.custom_connector,
            pardot: self.pardot,
        }
    }
}
