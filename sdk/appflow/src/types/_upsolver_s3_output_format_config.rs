// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpsolverS3OutputFormatConfig {
    /// <p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>
    pub file_type: ::std::option::Option<crate::types::FileType>,
    /// <p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>
    pub prefix_config: ::std::option::Option<crate::types::PrefixConfig>,
    /// <p> The aggregation settings that you can use to customize the output format of your flow data. </p>
    pub aggregation_config: ::std::option::Option<crate::types::AggregationConfig>,
}
impl UpsolverS3OutputFormatConfig {
    /// <p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>
    pub fn file_type(&self) -> ::std::option::Option<&crate::types::FileType> {
        self.file_type.as_ref()
    }
    /// <p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>
    pub fn prefix_config(&self) -> ::std::option::Option<&crate::types::PrefixConfig> {
        self.prefix_config.as_ref()
    }
    /// <p> The aggregation settings that you can use to customize the output format of your flow data. </p>
    pub fn aggregation_config(&self) -> ::std::option::Option<&crate::types::AggregationConfig> {
        self.aggregation_config.as_ref()
    }
}
impl UpsolverS3OutputFormatConfig {
    /// Creates a new builder-style object to manufacture [`UpsolverS3OutputFormatConfig`](crate::types::UpsolverS3OutputFormatConfig).
    pub fn builder() -> crate::types::builders::UpsolverS3OutputFormatConfigBuilder {
        crate::types::builders::UpsolverS3OutputFormatConfigBuilder::default()
    }
}

/// A builder for [`UpsolverS3OutputFormatConfig`](crate::types::UpsolverS3OutputFormatConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpsolverS3OutputFormatConfigBuilder {
    pub(crate) file_type: ::std::option::Option<crate::types::FileType>,
    pub(crate) prefix_config: ::std::option::Option<crate::types::PrefixConfig>,
    pub(crate) aggregation_config: ::std::option::Option<crate::types::AggregationConfig>,
}
impl UpsolverS3OutputFormatConfigBuilder {
    /// <p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>
    pub fn file_type(mut self, input: crate::types::FileType) -> Self {
        self.file_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>
    pub fn set_file_type(mut self, input: ::std::option::Option<crate::types::FileType>) -> Self {
        self.file_type = input;
        self
    }
    /// <p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>
    pub fn get_file_type(&self) -> &::std::option::Option<crate::types::FileType> {
        &self.file_type
    }
    /// <p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>
    /// This field is required.
    pub fn prefix_config(mut self, input: crate::types::PrefixConfig) -> Self {
        self.prefix_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>
    pub fn set_prefix_config(mut self, input: ::std::option::Option<crate::types::PrefixConfig>) -> Self {
        self.prefix_config = input;
        self
    }
    /// <p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>
    pub fn get_prefix_config(&self) -> &::std::option::Option<crate::types::PrefixConfig> {
        &self.prefix_config
    }
    /// <p> The aggregation settings that you can use to customize the output format of your flow data. </p>
    pub fn aggregation_config(mut self, input: crate::types::AggregationConfig) -> Self {
        self.aggregation_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> The aggregation settings that you can use to customize the output format of your flow data. </p>
    pub fn set_aggregation_config(mut self, input: ::std::option::Option<crate::types::AggregationConfig>) -> Self {
        self.aggregation_config = input;
        self
    }
    /// <p> The aggregation settings that you can use to customize the output format of your flow data. </p>
    pub fn get_aggregation_config(&self) -> &::std::option::Option<crate::types::AggregationConfig> {
        &self.aggregation_config
    }
    /// Consumes the builder and constructs a [`UpsolverS3OutputFormatConfig`](crate::types::UpsolverS3OutputFormatConfig).
    pub fn build(self) -> crate::types::UpsolverS3OutputFormatConfig {
        crate::types::UpsolverS3OutputFormatConfig {
            file_type: self.file_type,
            prefix_config: self.prefix_config,
            aggregation_config: self.aggregation_config,
        }
    }
}
