// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the information that is required to query a particular connector. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceConnectorProperties {
    /// <p> Specifies the information that is required for querying Amplitude. </p>
    #[doc(hidden)]
    pub amplitude: std::option::Option<crate::types::AmplitudeSourceProperties>,
    /// <p> Specifies the information that is required for querying Datadog. </p>
    #[doc(hidden)]
    pub datadog: std::option::Option<crate::types::DatadogSourceProperties>,
    /// <p> Specifies the information that is required for querying Dynatrace. </p>
    #[doc(hidden)]
    pub dynatrace: std::option::Option<crate::types::DynatraceSourceProperties>,
    /// <p> Specifies the information that is required for querying Google Analytics. </p>
    #[doc(hidden)]
    pub google_analytics: std::option::Option<crate::types::GoogleAnalyticsSourceProperties>,
    /// <p> Specifies the information that is required for querying Infor Nexus. </p>
    #[doc(hidden)]
    pub infor_nexus: std::option::Option<crate::types::InforNexusSourceProperties>,
    /// <p> Specifies the information that is required for querying Marketo. </p>
    #[doc(hidden)]
    pub marketo: std::option::Option<crate::types::MarketoSourceProperties>,
    /// <p> Specifies the information that is required for querying Amazon S3. </p>
    #[doc(hidden)]
    pub s3: std::option::Option<crate::types::S3SourceProperties>,
    /// <p> Specifies the information that is required for querying Salesforce. </p>
    #[doc(hidden)]
    pub salesforce: std::option::Option<crate::types::SalesforceSourceProperties>,
    /// <p> Specifies the information that is required for querying ServiceNow. </p>
    #[doc(hidden)]
    pub service_now: std::option::Option<crate::types::ServiceNowSourceProperties>,
    /// <p> Specifies the information that is required for querying Singular. </p>
    #[doc(hidden)]
    pub singular: std::option::Option<crate::types::SingularSourceProperties>,
    /// <p> Specifies the information that is required for querying Slack. </p>
    #[doc(hidden)]
    pub slack: std::option::Option<crate::types::SlackSourceProperties>,
    /// <p> Specifies the information that is required for querying Trend Micro. </p>
    #[doc(hidden)]
    pub trendmicro: std::option::Option<crate::types::TrendmicroSourceProperties>,
    /// <p> Specifies the information that is required for querying Veeva. </p>
    #[doc(hidden)]
    pub veeva: std::option::Option<crate::types::VeevaSourceProperties>,
    /// <p> Specifies the information that is required for querying Zendesk. </p>
    #[doc(hidden)]
    pub zendesk: std::option::Option<crate::types::ZendeskSourceProperties>,
    /// <p> The properties that are applied when using SAPOData as a flow source. </p>
    #[doc(hidden)]
    pub sapo_data: std::option::Option<crate::types::SapoDataSourceProperties>,
    /// <p>The properties that are applied when the custom connector is being used as a source.</p>
    #[doc(hidden)]
    pub custom_connector: std::option::Option<crate::types::CustomConnectorSourceProperties>,
    /// <p>Specifies the information that is required for querying Salesforce Pardot.</p>
    #[doc(hidden)]
    pub pardot: std::option::Option<crate::types::PardotSourceProperties>,
}
impl SourceConnectorProperties {
    /// <p> Specifies the information that is required for querying Amplitude. </p>
    pub fn amplitude(&self) -> std::option::Option<&crate::types::AmplitudeSourceProperties> {
        self.amplitude.as_ref()
    }
    /// <p> Specifies the information that is required for querying Datadog. </p>
    pub fn datadog(&self) -> std::option::Option<&crate::types::DatadogSourceProperties> {
        self.datadog.as_ref()
    }
    /// <p> Specifies the information that is required for querying Dynatrace. </p>
    pub fn dynatrace(&self) -> std::option::Option<&crate::types::DynatraceSourceProperties> {
        self.dynatrace.as_ref()
    }
    /// <p> Specifies the information that is required for querying Google Analytics. </p>
    pub fn google_analytics(
        &self,
    ) -> std::option::Option<&crate::types::GoogleAnalyticsSourceProperties> {
        self.google_analytics.as_ref()
    }
    /// <p> Specifies the information that is required for querying Infor Nexus. </p>
    pub fn infor_nexus(&self) -> std::option::Option<&crate::types::InforNexusSourceProperties> {
        self.infor_nexus.as_ref()
    }
    /// <p> Specifies the information that is required for querying Marketo. </p>
    pub fn marketo(&self) -> std::option::Option<&crate::types::MarketoSourceProperties> {
        self.marketo.as_ref()
    }
    /// <p> Specifies the information that is required for querying Amazon S3. </p>
    pub fn s3(&self) -> std::option::Option<&crate::types::S3SourceProperties> {
        self.s3.as_ref()
    }
    /// <p> Specifies the information that is required for querying Salesforce. </p>
    pub fn salesforce(&self) -> std::option::Option<&crate::types::SalesforceSourceProperties> {
        self.salesforce.as_ref()
    }
    /// <p> Specifies the information that is required for querying ServiceNow. </p>
    pub fn service_now(&self) -> std::option::Option<&crate::types::ServiceNowSourceProperties> {
        self.service_now.as_ref()
    }
    /// <p> Specifies the information that is required for querying Singular. </p>
    pub fn singular(&self) -> std::option::Option<&crate::types::SingularSourceProperties> {
        self.singular.as_ref()
    }
    /// <p> Specifies the information that is required for querying Slack. </p>
    pub fn slack(&self) -> std::option::Option<&crate::types::SlackSourceProperties> {
        self.slack.as_ref()
    }
    /// <p> Specifies the information that is required for querying Trend Micro. </p>
    pub fn trendmicro(&self) -> std::option::Option<&crate::types::TrendmicroSourceProperties> {
        self.trendmicro.as_ref()
    }
    /// <p> Specifies the information that is required for querying Veeva. </p>
    pub fn veeva(&self) -> std::option::Option<&crate::types::VeevaSourceProperties> {
        self.veeva.as_ref()
    }
    /// <p> Specifies the information that is required for querying Zendesk. </p>
    pub fn zendesk(&self) -> std::option::Option<&crate::types::ZendeskSourceProperties> {
        self.zendesk.as_ref()
    }
    /// <p> The properties that are applied when using SAPOData as a flow source. </p>
    pub fn sapo_data(&self) -> std::option::Option<&crate::types::SapoDataSourceProperties> {
        self.sapo_data.as_ref()
    }
    /// <p>The properties that are applied when the custom connector is being used as a source.</p>
    pub fn custom_connector(
        &self,
    ) -> std::option::Option<&crate::types::CustomConnectorSourceProperties> {
        self.custom_connector.as_ref()
    }
    /// <p>Specifies the information that is required for querying Salesforce Pardot.</p>
    pub fn pardot(&self) -> std::option::Option<&crate::types::PardotSourceProperties> {
        self.pardot.as_ref()
    }
}
impl SourceConnectorProperties {
    /// Creates a new builder-style object to manufacture [`SourceConnectorProperties`](crate::types::SourceConnectorProperties).
    pub fn builder() -> crate::types::builders::SourceConnectorPropertiesBuilder {
        crate::types::builders::SourceConnectorPropertiesBuilder::default()
    }
}

/// A builder for [`SourceConnectorProperties`](crate::types::SourceConnectorProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceConnectorPropertiesBuilder {
    pub(crate) amplitude: std::option::Option<crate::types::AmplitudeSourceProperties>,
    pub(crate) datadog: std::option::Option<crate::types::DatadogSourceProperties>,
    pub(crate) dynatrace: std::option::Option<crate::types::DynatraceSourceProperties>,
    pub(crate) google_analytics: std::option::Option<crate::types::GoogleAnalyticsSourceProperties>,
    pub(crate) infor_nexus: std::option::Option<crate::types::InforNexusSourceProperties>,
    pub(crate) marketo: std::option::Option<crate::types::MarketoSourceProperties>,
    pub(crate) s3: std::option::Option<crate::types::S3SourceProperties>,
    pub(crate) salesforce: std::option::Option<crate::types::SalesforceSourceProperties>,
    pub(crate) service_now: std::option::Option<crate::types::ServiceNowSourceProperties>,
    pub(crate) singular: std::option::Option<crate::types::SingularSourceProperties>,
    pub(crate) slack: std::option::Option<crate::types::SlackSourceProperties>,
    pub(crate) trendmicro: std::option::Option<crate::types::TrendmicroSourceProperties>,
    pub(crate) veeva: std::option::Option<crate::types::VeevaSourceProperties>,
    pub(crate) zendesk: std::option::Option<crate::types::ZendeskSourceProperties>,
    pub(crate) sapo_data: std::option::Option<crate::types::SapoDataSourceProperties>,
    pub(crate) custom_connector: std::option::Option<crate::types::CustomConnectorSourceProperties>,
    pub(crate) pardot: std::option::Option<crate::types::PardotSourceProperties>,
}
impl SourceConnectorPropertiesBuilder {
    /// <p> Specifies the information that is required for querying Amplitude. </p>
    pub fn amplitude(mut self, input: crate::types::AmplitudeSourceProperties) -> Self {
        self.amplitude = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Amplitude. </p>
    pub fn set_amplitude(
        mut self,
        input: std::option::Option<crate::types::AmplitudeSourceProperties>,
    ) -> Self {
        self.amplitude = input;
        self
    }
    /// <p> Specifies the information that is required for querying Datadog. </p>
    pub fn datadog(mut self, input: crate::types::DatadogSourceProperties) -> Self {
        self.datadog = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Datadog. </p>
    pub fn set_datadog(
        mut self,
        input: std::option::Option<crate::types::DatadogSourceProperties>,
    ) -> Self {
        self.datadog = input;
        self
    }
    /// <p> Specifies the information that is required for querying Dynatrace. </p>
    pub fn dynatrace(mut self, input: crate::types::DynatraceSourceProperties) -> Self {
        self.dynatrace = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Dynatrace. </p>
    pub fn set_dynatrace(
        mut self,
        input: std::option::Option<crate::types::DynatraceSourceProperties>,
    ) -> Self {
        self.dynatrace = input;
        self
    }
    /// <p> Specifies the information that is required for querying Google Analytics. </p>
    pub fn google_analytics(
        mut self,
        input: crate::types::GoogleAnalyticsSourceProperties,
    ) -> Self {
        self.google_analytics = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Google Analytics. </p>
    pub fn set_google_analytics(
        mut self,
        input: std::option::Option<crate::types::GoogleAnalyticsSourceProperties>,
    ) -> Self {
        self.google_analytics = input;
        self
    }
    /// <p> Specifies the information that is required for querying Infor Nexus. </p>
    pub fn infor_nexus(mut self, input: crate::types::InforNexusSourceProperties) -> Self {
        self.infor_nexus = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Infor Nexus. </p>
    pub fn set_infor_nexus(
        mut self,
        input: std::option::Option<crate::types::InforNexusSourceProperties>,
    ) -> Self {
        self.infor_nexus = input;
        self
    }
    /// <p> Specifies the information that is required for querying Marketo. </p>
    pub fn marketo(mut self, input: crate::types::MarketoSourceProperties) -> Self {
        self.marketo = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Marketo. </p>
    pub fn set_marketo(
        mut self,
        input: std::option::Option<crate::types::MarketoSourceProperties>,
    ) -> Self {
        self.marketo = input;
        self
    }
    /// <p> Specifies the information that is required for querying Amazon S3. </p>
    pub fn s3(mut self, input: crate::types::S3SourceProperties) -> Self {
        self.s3 = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Amazon S3. </p>
    pub fn set_s3(mut self, input: std::option::Option<crate::types::S3SourceProperties>) -> Self {
        self.s3 = input;
        self
    }
    /// <p> Specifies the information that is required for querying Salesforce. </p>
    pub fn salesforce(mut self, input: crate::types::SalesforceSourceProperties) -> Self {
        self.salesforce = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Salesforce. </p>
    pub fn set_salesforce(
        mut self,
        input: std::option::Option<crate::types::SalesforceSourceProperties>,
    ) -> Self {
        self.salesforce = input;
        self
    }
    /// <p> Specifies the information that is required for querying ServiceNow. </p>
    pub fn service_now(mut self, input: crate::types::ServiceNowSourceProperties) -> Self {
        self.service_now = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying ServiceNow. </p>
    pub fn set_service_now(
        mut self,
        input: std::option::Option<crate::types::ServiceNowSourceProperties>,
    ) -> Self {
        self.service_now = input;
        self
    }
    /// <p> Specifies the information that is required for querying Singular. </p>
    pub fn singular(mut self, input: crate::types::SingularSourceProperties) -> Self {
        self.singular = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Singular. </p>
    pub fn set_singular(
        mut self,
        input: std::option::Option<crate::types::SingularSourceProperties>,
    ) -> Self {
        self.singular = input;
        self
    }
    /// <p> Specifies the information that is required for querying Slack. </p>
    pub fn slack(mut self, input: crate::types::SlackSourceProperties) -> Self {
        self.slack = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Slack. </p>
    pub fn set_slack(
        mut self,
        input: std::option::Option<crate::types::SlackSourceProperties>,
    ) -> Self {
        self.slack = input;
        self
    }
    /// <p> Specifies the information that is required for querying Trend Micro. </p>
    pub fn trendmicro(mut self, input: crate::types::TrendmicroSourceProperties) -> Self {
        self.trendmicro = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Trend Micro. </p>
    pub fn set_trendmicro(
        mut self,
        input: std::option::Option<crate::types::TrendmicroSourceProperties>,
    ) -> Self {
        self.trendmicro = input;
        self
    }
    /// <p> Specifies the information that is required for querying Veeva. </p>
    pub fn veeva(mut self, input: crate::types::VeevaSourceProperties) -> Self {
        self.veeva = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Veeva. </p>
    pub fn set_veeva(
        mut self,
        input: std::option::Option<crate::types::VeevaSourceProperties>,
    ) -> Self {
        self.veeva = input;
        self
    }
    /// <p> Specifies the information that is required for querying Zendesk. </p>
    pub fn zendesk(mut self, input: crate::types::ZendeskSourceProperties) -> Self {
        self.zendesk = Some(input);
        self
    }
    /// <p> Specifies the information that is required for querying Zendesk. </p>
    pub fn set_zendesk(
        mut self,
        input: std::option::Option<crate::types::ZendeskSourceProperties>,
    ) -> Self {
        self.zendesk = input;
        self
    }
    /// <p> The properties that are applied when using SAPOData as a flow source. </p>
    pub fn sapo_data(mut self, input: crate::types::SapoDataSourceProperties) -> Self {
        self.sapo_data = Some(input);
        self
    }
    /// <p> The properties that are applied when using SAPOData as a flow source. </p>
    pub fn set_sapo_data(
        mut self,
        input: std::option::Option<crate::types::SapoDataSourceProperties>,
    ) -> Self {
        self.sapo_data = input;
        self
    }
    /// <p>The properties that are applied when the custom connector is being used as a source.</p>
    pub fn custom_connector(
        mut self,
        input: crate::types::CustomConnectorSourceProperties,
    ) -> Self {
        self.custom_connector = Some(input);
        self
    }
    /// <p>The properties that are applied when the custom connector is being used as a source.</p>
    pub fn set_custom_connector(
        mut self,
        input: std::option::Option<crate::types::CustomConnectorSourceProperties>,
    ) -> Self {
        self.custom_connector = input;
        self
    }
    /// <p>Specifies the information that is required for querying Salesforce Pardot.</p>
    pub fn pardot(mut self, input: crate::types::PardotSourceProperties) -> Self {
        self.pardot = Some(input);
        self
    }
    /// <p>Specifies the information that is required for querying Salesforce Pardot.</p>
    pub fn set_pardot(
        mut self,
        input: std::option::Option<crate::types::PardotSourceProperties>,
    ) -> Self {
        self.pardot = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceConnectorProperties`](crate::types::SourceConnectorProperties).
    pub fn build(self) -> crate::types::SourceConnectorProperties {
        crate::types::SourceConnectorProperties {
            amplitude: self.amplitude,
            datadog: self.datadog,
            dynatrace: self.dynatrace,
            google_analytics: self.google_analytics,
            infor_nexus: self.infor_nexus,
            marketo: self.marketo,
            s3: self.s3,
            salesforce: self.salesforce,
            service_now: self.service_now,
            singular: self.singular,
            slack: self.slack,
            trendmicro: self.trendmicro,
            veeva: self.veeva,
            zendesk: self.zendesk,
            sapo_data: self.sapo_data,
            custom_connector: self.custom_connector,
            pardot: self.pardot,
        }
    }
}
