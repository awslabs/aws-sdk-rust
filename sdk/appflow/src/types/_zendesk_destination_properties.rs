// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties that are applied when Zendesk is used as a destination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ZendeskDestinationProperties {
    /// <p>The object specified in the Zendesk flow destination.</p>
    #[doc(hidden)]
    pub object: std::option::Option<std::string::String>,
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    #[doc(hidden)]
    pub id_field_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    #[doc(hidden)]
    pub error_handling_config: std::option::Option<crate::types::ErrorHandlingConfig>,
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    #[doc(hidden)]
    pub write_operation_type: std::option::Option<crate::types::WriteOperationType>,
}
impl ZendeskDestinationProperties {
    /// <p>The object specified in the Zendesk flow destination.</p>
    pub fn object(&self) -> std::option::Option<&str> {
        self.object.as_deref()
    }
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn id_field_names(&self) -> std::option::Option<&[std::string::String]> {
        self.id_field_names.as_deref()
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(&self) -> std::option::Option<&crate::types::ErrorHandlingConfig> {
        self.error_handling_config.as_ref()
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn write_operation_type(&self) -> std::option::Option<&crate::types::WriteOperationType> {
        self.write_operation_type.as_ref()
    }
}
impl ZendeskDestinationProperties {
    /// Creates a new builder-style object to manufacture [`ZendeskDestinationProperties`](crate::types::ZendeskDestinationProperties).
    pub fn builder() -> crate::types::builders::ZendeskDestinationPropertiesBuilder {
        crate::types::builders::ZendeskDestinationPropertiesBuilder::default()
    }
}

/// A builder for [`ZendeskDestinationProperties`](crate::types::ZendeskDestinationProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ZendeskDestinationPropertiesBuilder {
    pub(crate) object: std::option::Option<std::string::String>,
    pub(crate) id_field_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) error_handling_config: std::option::Option<crate::types::ErrorHandlingConfig>,
    pub(crate) write_operation_type: std::option::Option<crate::types::WriteOperationType>,
}
impl ZendeskDestinationPropertiesBuilder {
    /// <p>The object specified in the Zendesk flow destination.</p>
    pub fn object(mut self, input: impl Into<std::string::String>) -> Self {
        self.object = Some(input.into());
        self
    }
    /// <p>The object specified in the Zendesk flow destination.</p>
    pub fn set_object(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object = input;
        self
    }
    /// Appends an item to `id_field_names`.
    ///
    /// To override the contents of this collection use [`set_id_field_names`](Self::set_id_field_names).
    ///
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn id_field_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.id_field_names.unwrap_or_default();
        v.push(input.into());
        self.id_field_names = Some(v);
        self
    }
    /// <p> A list of field names that can be used as an ID field when performing a write operation. </p>
    pub fn set_id_field_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.id_field_names = input;
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn error_handling_config(mut self, input: crate::types::ErrorHandlingConfig) -> Self {
        self.error_handling_config = Some(input);
        self
    }
    /// <p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>
    pub fn set_error_handling_config(
        mut self,
        input: std::option::Option<crate::types::ErrorHandlingConfig>,
    ) -> Self {
        self.error_handling_config = input;
        self
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn write_operation_type(mut self, input: crate::types::WriteOperationType) -> Self {
        self.write_operation_type = Some(input);
        self
    }
    /// <p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>
    pub fn set_write_operation_type(
        mut self,
        input: std::option::Option<crate::types::WriteOperationType>,
    ) -> Self {
        self.write_operation_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ZendeskDestinationProperties`](crate::types::ZendeskDestinationProperties).
    pub fn build(self) -> crate::types::ZendeskDestinationProperties {
        crate::types::ZendeskDestinationProperties {
            object: self.object,
            id_field_names: self.id_field_names,
            error_handling_config: self.error_handling_config,
            write_operation_type: self.write_operation_type,
        }
    }
}
