// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_flow::UpdateFlowInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_flow_config_list {
        let mut array_3 = object.key("destinationFlowConfigList").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_destination_flow_config::ser_destination_flow_config(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.flow_name {
        object.key("flowName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.metadata_catalog_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("metadataCatalogConfig").start_object();
        crate::protocol_serde::shape_metadata_catalog_config::ser_metadata_catalog_config(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("sourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tasks {
        let mut array_12 = object.key("tasks").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("triggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
