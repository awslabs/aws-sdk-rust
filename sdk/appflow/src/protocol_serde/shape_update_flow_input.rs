// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_flow_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_flow::UpdateFlowInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination_flow_config_list {
        let mut array_4 = object.key("destinationFlowConfigList").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_destination_flow_config::ser_destination_flow_config(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.flow_name {
        object.key("flowName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.metadata_catalog_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("metadataCatalogConfig").start_object();
        crate::protocol_serde::shape_metadata_catalog_config::ser_metadata_catalog_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("sourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tasks {
        let mut array_13 = object.key("tasks").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("triggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
