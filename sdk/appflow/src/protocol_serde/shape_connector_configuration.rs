// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_connector_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ConnectorConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ConnectorConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "canUseAsSource" => {
                                builder = builder.set_can_use_as_source(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "canUseAsDestination" => {
                                builder = builder.set_can_use_as_destination(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "supportedDestinationConnectors" => {
                                builder = builder.set_supported_destination_connectors(
                                    crate::protocol_serde::shape_connector_type_list::de_connector_type_list(tokens)?
                                );
                            }
                            "supportedSchedulingFrequencies" => {
                                builder = builder.set_supported_scheduling_frequencies(
                                    crate::protocol_serde::shape_scheduling_frequency_type_list::de_scheduling_frequency_type_list(tokens)?
                                );
                            }
                            "isPrivateLinkEnabled" => {
                                builder = builder.set_is_private_link_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "isPrivateLinkEndpointUrlRequired" => {
                                builder = builder.set_is_private_link_endpoint_url_required(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "supportedTriggerTypes" => {
                                builder = builder.set_supported_trigger_types(
                                    crate::protocol_serde::shape_trigger_type_list::de_trigger_type_list(tokens)?
                                );
                            }
                            "connectorMetadata" => {
                                builder = builder.set_connector_metadata(
                                    crate::protocol_serde::shape_connector_metadata::de_connector_metadata(tokens)?
                                );
                            }
                            "connectorType" => {
                                builder = builder.set_connector_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::ConnectorType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "connectorLabel" => {
                                builder = builder.set_connector_label(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorDescription" => {
                                builder = builder.set_connector_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorOwner" => {
                                builder = builder.set_connector_owner(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorName" => {
                                builder = builder.set_connector_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorVersion" => {
                                builder = builder.set_connector_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorArn" => {
                                builder = builder.set_connector_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "connectorModes" => {
                                builder = builder.set_connector_modes(
                                    crate::protocol_serde::shape_connector_mode_list::de_connector_mode_list(tokens)?
                                );
                            }
                            "authenticationConfig" => {
                                builder = builder.set_authentication_config(
                                    crate::protocol_serde::shape_authentication_config::de_authentication_config(tokens)?
                                );
                            }
                            "connectorRuntimeSettings" => {
                                builder = builder.set_connector_runtime_settings(
                                    crate::protocol_serde::shape_connector_runtime_setting_list::de_connector_runtime_setting_list(tokens)?
                                );
                            }
                            "supportedApiVersions" => {
                                builder = builder.set_supported_api_versions(
                                    crate::protocol_serde::shape_supported_api_version_list::de_supported_api_version_list(tokens)?
                                );
                            }
                            "supportedOperators" => {
                                builder = builder.set_supported_operators(
                                    crate::protocol_serde::shape_supported_operator_list::de_supported_operator_list(tokens)?
                                );
                            }
                            "supportedWriteOperations" => {
                                builder = builder.set_supported_write_operations(
                                    crate::protocol_serde::shape_supported_write_operation_list::de_supported_write_operation_list(tokens)?
                                );
                            }
                            "connectorProvisioningType" => {
                                builder = builder.set_connector_provisioning_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ConnectorProvisioningType::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "connectorProvisioningConfig" => {
                                builder = builder.set_connector_provisioning_config(
                                    crate::protocol_serde::shape_connector_provisioning_config::de_connector_provisioning_config(tokens)?
                                );
                            }
                            "logoURL" => {
                                builder = builder.set_logo_url(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "registeredAt" => {
                                builder = builder.set_registered_at(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "registeredBy" => {
                                builder = builder.set_registered_by(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
