// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_task(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Task,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("sourceFields").start_array();
        for item_2 in &input.source_fields {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.connector_operator {
        #[allow(unused_mut)]
        let mut object_4 = object.key("connectorOperator").start_object();
        crate::protocol_serde::shape_connector_operator::ser_connector_operator(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.destination_field {
        object.key("destinationField").string(var_5.as_str());
    }
    {
        object.key("taskType").string(input.task_type.as_str());
    }
    if let Some(var_6) = &input.task_properties {
        #[allow(unused_mut)]
        let mut object_7 = object.key("taskProperties").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    Ok(())
}

pub(crate) fn de_task<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Task>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TaskBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "sourceFields" => {
                            builder = builder.set_source_fields(crate::protocol_serde::shape_source_fields::de_source_fields(tokens)?);
                        }
                        "connectorOperator" => {
                            builder = builder.set_connector_operator(crate::protocol_serde::shape_connector_operator::de_connector_operator(tokens)?);
                        }
                        "destinationField" => {
                            builder = builder.set_destination_field(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "taskType" => {
                            builder = builder.set_task_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TaskType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "taskProperties" => {
                            builder = builder.set_task_properties(crate::protocol_serde::shape_task_properties_map::de_task_properties_map(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::task_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
