// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_flow::CreateFlowInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_flow_config_list {
        let mut array_3 = object.key("destinationFlowConfigList").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_destination_flow_config::ser_destination_flow_config(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.flow_name {
        object.key("flowName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.kms_arn {
        object.key("kmsArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.metadata_catalog_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("metadataCatalogConfig").start_object();
        crate::protocol_serde::shape_metadata_catalog_config::ser_metadata_catalog_config(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("sourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.tasks {
        let mut array_17 = object.key("tasks").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_21 = object.key("triggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}
