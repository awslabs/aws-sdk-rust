// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_flow_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_flow::CreateFlowInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination_flow_config_list {
        let mut array_4 = object.key("destinationFlowConfigList").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_destination_flow_config::ser_destination_flow_config(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.flow_name {
        object.key("flowName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.kms_arn {
        object.key("kmsArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.metadata_catalog_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("metadataCatalogConfig").start_object();
        crate::protocol_serde::shape_metadata_catalog_config::ser_metadata_catalog_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("sourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.tasks {
        let mut array_18 = object.key("tasks").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("triggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
