// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_flow_input(
    input: &crate::operation::describe_flow::DescribeFlowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_describe_flow_input::ser_describe_flow_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_flow_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_flow::DescribeFlowOutput,
    crate::operation::describe_flow::DescribeFlowError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::describe_flow::DescribeFlowError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::describe_flow::DescribeFlowError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerException" => {
            crate::operation::describe_flow::DescribeFlowError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::InternalServerExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_flow::DescribeFlowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::operation::describe_flow::DescribeFlowError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_flow::DescribeFlowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::describe_flow::DescribeFlowError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_flow_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_flow::DescribeFlowOutput,
    crate::operation::describe_flow::DescribeFlowError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::describe_flow::builders::DescribeFlowOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_describe_flow::de_describe_flow(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::describe_flow::DescribeFlowError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_describe_flow(
    value: &[u8],
    mut builder: crate::operation::describe_flow::builders::DescribeFlowOutputBuilder,
) -> Result<
    crate::operation::describe_flow::builders::DescribeFlowOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "createdAt" => {
                        builder = builder.set_created_at(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "createdBy" => {
                        builder = builder.set_created_by(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "description" => {
                        builder = builder.set_description(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "destinationFlowConfigList" => {
                        builder = builder.set_destination_flow_config_list(
                            crate::protocol_serde::shape_destination_flow_config_list::de_destination_flow_config_list(tokens)?
                        );
                    }
                    "flowArn" => {
                        builder = builder.set_flow_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "flowName" => {
                        builder = builder.set_flow_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "flowStatus" => {
                        builder = builder.set_flow_status(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::FlowStatus::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "flowStatusMessage" => {
                        builder = builder.set_flow_status_message(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "kmsArn" => {
                        builder = builder.set_kms_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "lastRunExecutionDetails" => {
                        builder = builder.set_last_run_execution_details(
                            crate::protocol_serde::shape_execution_details::de_execution_details(
                                tokens,
                            )?,
                        );
                    }
                    "lastRunMetadataCatalogDetails" => {
                        builder = builder.set_last_run_metadata_catalog_details(
                            crate::protocol_serde::shape_metadata_catalog_details::de_metadata_catalog_details(tokens)?
                        );
                    }
                    "lastUpdatedAt" => {
                        builder = builder.set_last_updated_at(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "lastUpdatedBy" => {
                        builder = builder.set_last_updated_by(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "metadataCatalogConfig" => {
                        builder = builder.set_metadata_catalog_config(
                            crate::protocol_serde::shape_metadata_catalog_config::de_metadata_catalog_config(tokens)?
                        );
                    }
                    "schemaVersion" => {
                        builder = builder.set_schema_version(
                            aws_smithy_json::deserialize::token::expect_number_or_null(
                                tokens.next(),
                            )?
                            .map(i64::try_from)
                            .transpose()?,
                        );
                    }
                    "sourceFlowConfig" => {
                        builder = builder.set_source_flow_config(
                            crate::protocol_serde::shape_source_flow_config::de_source_flow_config(
                                tokens,
                            )?,
                        );
                    }
                    "tags" => {
                        builder = builder
                            .set_tags(crate::protocol_serde::shape_tag_map::de_tag_map(tokens)?);
                    }
                    "tasks" => {
                        builder = builder
                            .set_tasks(crate::protocol_serde::shape_tasks::de_tasks(tokens)?);
                    }
                    "triggerConfig" => {
                        builder = builder.set_trigger_config(
                            crate::protocol_serde::shape_trigger_config::de_trigger_config(tokens)?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
