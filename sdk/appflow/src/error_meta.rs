// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>AppFlow/Requester has invalid or missing permissions.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p> An error occurred when authenticating with the connector endpoint. </p>
    ConnectorAuthenticationException(crate::types::error::ConnectorAuthenticationException),
    /// <p> An error occurred when retrieving data from the connector endpoint. </p>
    ConnectorServerException(crate::types::error::ConnectorServerException),
    /// <p> An internal service error occurred during the processing of your request. Try again later. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p> The resource specified in the request (such as the source or destination connector profile) is not found. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> The request would cause a service quota (such as the number of flows) to be exceeded. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>API calls have exceeded the maximum allowed API request rate per account and per Region. </p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> The requested operation is not supported for the current flow. </p>
    UnsupportedOperationException(crate::types::error::UnsupportedOperationException),
    /// <p> The request has invalid or missing parameters. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ConnectorAuthenticationException(inner) => inner.fmt(f),
            Error::ConnectorServerException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connector_profile::CreateConnectorProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connector_profile::CreateConnectorProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connector_profile::CreateConnectorProfileError> for Error {
    fn from(err: crate::operation::create_connector_profile::CreateConnectorProfileError) -> Self {
        match err {
            crate::operation::create_connector_profile::CreateConnectorProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connector_profile::CreateConnectorProfileError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::create_connector_profile::CreateConnectorProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_connector_profile::CreateConnectorProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_connector_profile::CreateConnectorProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connector_profile::CreateConnectorProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_flow::CreateFlowError> for Error {
    fn from(err: crate::operation::create_flow::CreateFlowError) -> Self {
        match err {
            crate::operation::create_flow::CreateFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_flow::CreateFlowError::ConnectorAuthenticationException(
                inner,
            ) => Error::ConnectorAuthenticationException(inner),
            crate::operation::create_flow::CreateFlowError::ConnectorServerException(inner) => {
                Error::ConnectorServerException(inner)
            }
            crate::operation::create_flow::CreateFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_flow::CreateFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_flow::CreateFlowError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_flow::CreateFlowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_flow::CreateFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_connector_profile::DeleteConnectorProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_connector_profile::DeleteConnectorProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connector_profile::DeleteConnectorProfileError> for Error {
    fn from(err: crate::operation::delete_connector_profile::DeleteConnectorProfileError) -> Self {
        match err {
            crate::operation::delete_connector_profile::DeleteConnectorProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_connector_profile::DeleteConnectorProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_connector_profile::DeleteConnectorProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_connector_profile::DeleteConnectorProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_flow::DeleteFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_flow::DeleteFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_flow::DeleteFlowError> for Error {
    fn from(err: crate::operation::delete_flow::DeleteFlowError) -> Self {
        match err {
            crate::operation::delete_flow::DeleteFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_connector::DescribeConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_connector::DescribeConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connector::DescribeConnectorError> for Error {
    fn from(err: crate::operation::describe_connector::DescribeConnectorError) -> Self {
        match err {
            crate::operation::describe_connector::DescribeConnectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_connector::DescribeConnectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_connector::DescribeConnectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_connector::DescribeConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_connector_entity::DescribeConnectorEntityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_connector_entity::DescribeConnectorEntityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connector_entity::DescribeConnectorEntityError> for Error {
    fn from(
        err: crate::operation::describe_connector_entity::DescribeConnectorEntityError,
    ) -> Self {
        match err {
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::ConnectorServerException(inner) => Error::ConnectorServerException(inner),
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_connector_entity::DescribeConnectorEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_connector_profiles::DescribeConnectorProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_connector_profiles::DescribeConnectorProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connector_profiles::DescribeConnectorProfilesError> for Error {
    fn from(
        err: crate::operation::describe_connector_profiles::DescribeConnectorProfilesError,
    ) -> Self {
        match err {
            crate::operation::describe_connector_profiles::DescribeConnectorProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_connector_profiles::DescribeConnectorProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_connector_profiles::DescribeConnectorProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_connectors::DescribeConnectorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_connectors::DescribeConnectorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connectors::DescribeConnectorsError> for Error {
    fn from(err: crate::operation::describe_connectors::DescribeConnectorsError) -> Self {
        match err {
            crate::operation::describe_connectors::DescribeConnectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_connectors::DescribeConnectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_connectors::DescribeConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_flow::DescribeFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_flow::DescribeFlowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_flow::DescribeFlowError> for Error {
    fn from(err: crate::operation::describe_flow::DescribeFlowError) -> Self {
        match err {
            crate::operation::describe_flow::DescribeFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_flow::DescribeFlowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_flow::DescribeFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError>
    for Error
{
    fn from(
        err: crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError,
    ) -> Self {
        match err {
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_flow_execution_records::DescribeFlowExecutionRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_connector_entities::ListConnectorEntitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_connector_entities::ListConnectorEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connector_entities::ListConnectorEntitiesError> for Error {
    fn from(err: crate::operation::list_connector_entities::ListConnectorEntitiesError) -> Self {
        match err {
            crate::operation::list_connector_entities::ListConnectorEntitiesError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::list_connector_entities::ListConnectorEntitiesError::ConnectorServerException(inner) => Error::ConnectorServerException(inner),
            crate::operation::list_connector_entities::ListConnectorEntitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_connector_entities::ListConnectorEntitiesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_connector_entities::ListConnectorEntitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_connector_entities::ListConnectorEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_connectors::ListConnectorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_connectors::ListConnectorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connectors::ListConnectorsError> for Error {
    fn from(err: crate::operation::list_connectors::ListConnectorsError) -> Self {
        match err {
            crate::operation::list_connectors::ListConnectorsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_connectors::ListConnectorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_connectors::ListConnectorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_flows::ListFlowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_flows::ListFlowsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_flows::ListFlowsError> for Error {
    fn from(err: crate::operation::list_flows::ListFlowsError) -> Self {
        match err {
            crate::operation::list_flows::ListFlowsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_flows::ListFlowsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_flows::ListFlowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_connector::RegisterConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_connector::RegisterConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_connector::RegisterConnectorError> for Error {
    fn from(err: crate::operation::register_connector::RegisterConnectorError) -> Self {
        match err {
            crate::operation::register_connector::RegisterConnectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::register_connector::RegisterConnectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_connector::RegisterConnectorError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::register_connector::RegisterConnectorError::ConnectorServerException(inner) => Error::ConnectorServerException(inner),
            crate::operation::register_connector::RegisterConnectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::register_connector::RegisterConnectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::register_connector::RegisterConnectorError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::register_connector::RegisterConnectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::register_connector::RegisterConnectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_connector::RegisterConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_flow::StartFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::start_flow::StartFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_flow::StartFlowError> for Error {
    fn from(err: crate::operation::start_flow::StartFlowError) -> Self {
        match err {
            crate::operation::start_flow::StartFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_flow::StartFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_flow::StartFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_flow::StartFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_flow::StartFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::stop_flow::StopFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::stop_flow::StopFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_flow::StopFlowError> for Error {
    fn from(err: crate::operation::stop_flow::StopFlowError) -> Self {
        match err {
            crate::operation::stop_flow::StopFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::stop_flow::StopFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_flow::StopFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_flow::StopFlowError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::stop_flow::StopFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::unregister_connector::UnregisterConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::unregister_connector::UnregisterConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::unregister_connector::UnregisterConnectorError> for Error {
    fn from(err: crate::operation::unregister_connector::UnregisterConnectorError) -> Self {
        match err {
            crate::operation::unregister_connector::UnregisterConnectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::unregister_connector::UnregisterConnectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::unregister_connector::UnregisterConnectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::unregister_connector::UnregisterConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector_profile::UpdateConnectorProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connector_profile::UpdateConnectorProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connector_profile::UpdateConnectorProfileError> for Error {
    fn from(err: crate::operation::update_connector_profile::UpdateConnectorProfileError) -> Self {
        match err {
            crate::operation::update_connector_profile::UpdateConnectorProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_connector_profile::UpdateConnectorProfileError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::update_connector_profile::UpdateConnectorProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_connector_profile::UpdateConnectorProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_connector_profile::UpdateConnectorProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_connector_profile::UpdateConnectorProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connector_registration::UpdateConnectorRegistrationError>
    for Error
{
    fn from(
        err: crate::operation::update_connector_registration::UpdateConnectorRegistrationError,
    ) -> Self {
        match err {
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ConnectorAuthenticationException(inner) => Error::ConnectorAuthenticationException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ConnectorServerException(inner) => Error::ConnectorServerException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_connector_registration::UpdateConnectorRegistrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_flow::UpdateFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_flow::UpdateFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow::UpdateFlowError> for Error {
    fn from(err: crate::operation::update_flow::UpdateFlowError) -> Self {
        match err {
            crate::operation::update_flow::UpdateFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::ConnectorAuthenticationException(
                inner,
            ) => Error::ConnectorAuthenticationException(inner),
            crate::operation::update_flow::UpdateFlowError::ConnectorServerException(inner) => {
                Error::ConnectorServerException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_flow::UpdateFlowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ConnectorAuthenticationException(e) => e.request_id(),
            Self::ConnectorServerException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
