// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Appflow
///
/// Client for invoking operations on Amazon Appflow. Each operation on Amazon Appflow is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_appflow::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_appflow::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_appflow::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateConnectorProfile`](crate::client::fluent_builders::CreateConnectorProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_profile_name(impl Into<String>)`](crate::client::fluent_builders::CreateConnectorProfile::connector_profile_name) / [`set_connector_profile_name(Option<String>)`](crate::client::fluent_builders::CreateConnectorProfile::set_connector_profile_name): <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. </p>
    ///   - [`kms_arn(impl Into<String>)`](crate::client::fluent_builders::CreateConnectorProfile::kms_arn) / [`set_kms_arn(Option<String>)`](crate::client::fluent_builders::CreateConnectorProfile::set_kms_arn): <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    ///   - [`connector_type(ConnectorType)`](crate::client::fluent_builders::CreateConnectorProfile::connector_type) / [`set_connector_type(Option<ConnectorType>)`](crate::client::fluent_builders::CreateConnectorProfile::set_connector_type): <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::CreateConnectorProfile::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::CreateConnectorProfile::set_connector_label): <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    ///   - [`connection_mode(ConnectionMode)`](crate::client::fluent_builders::CreateConnectorProfile::connection_mode) / [`set_connection_mode(Option<ConnectionMode>)`](crate::client::fluent_builders::CreateConnectorProfile::set_connection_mode): <p> Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. </p>
    ///   - [`connector_profile_config(ConnectorProfileConfig)`](crate::client::fluent_builders::CreateConnectorProfile::connector_profile_config) / [`set_connector_profile_config(Option<ConnectorProfileConfig>)`](crate::client::fluent_builders::CreateConnectorProfile::set_connector_profile_config): <p> Defines the connector-specific configuration and credentials. </p>
    /// - On success, responds with [`CreateConnectorProfileOutput`](crate::output::CreateConnectorProfileOutput) with field(s):
    ///   - [`connector_profile_arn(Option<String>)`](crate::output::CreateConnectorProfileOutput::connector_profile_arn): <p> The Amazon Resource Name (ARN) of the connector profile. </p>
    /// - On failure, responds with [`SdkError<CreateConnectorProfileError>`](crate::error::CreateConnectorProfileError)
    pub fn create_connector_profile(
        &self,
    ) -> crate::client::fluent_builders::CreateConnectorProfile {
        crate::client::fluent_builders::CreateConnectorProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFlow`](crate::client::fluent_builders::CreateFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::CreateFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::CreateFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateFlow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateFlow::set_description): <p> A description of the flow you want to create. </p>
    ///   - [`kms_arn(impl Into<String>)`](crate::client::fluent_builders::CreateFlow::kms_arn) / [`set_kms_arn(Option<String>)`](crate::client::fluent_builders::CreateFlow::set_kms_arn): <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    ///   - [`trigger_config(TriggerConfig)`](crate::client::fluent_builders::CreateFlow::trigger_config) / [`set_trigger_config(Option<TriggerConfig>)`](crate::client::fluent_builders::CreateFlow::set_trigger_config): <p> The trigger settings that determine how and when the flow runs. </p>
    ///   - [`source_flow_config(SourceFlowConfig)`](crate::client::fluent_builders::CreateFlow::source_flow_config) / [`set_source_flow_config(Option<SourceFlowConfig>)`](crate::client::fluent_builders::CreateFlow::set_source_flow_config): <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    ///   - [`destination_flow_config_list(Vec<DestinationFlowConfig>)`](crate::client::fluent_builders::CreateFlow::destination_flow_config_list) / [`set_destination_flow_config_list(Option<Vec<DestinationFlowConfig>>)`](crate::client::fluent_builders::CreateFlow::set_destination_flow_config_list): <p> The configuration that controls how Amazon AppFlow places data in the destination connector. </p>
    ///   - [`tasks(Vec<Task>)`](crate::client::fluent_builders::CreateFlow::tasks) / [`set_tasks(Option<Vec<Task>>)`](crate::client::fluent_builders::CreateFlow::set_tasks): <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateFlow::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateFlow::set_tags): <p> The tags used to organize, track, or control access for your flow. </p>
    ///   - [`metadata_catalog_config(MetadataCatalogConfig)`](crate::client::fluent_builders::CreateFlow::metadata_catalog_config) / [`set_metadata_catalog_config(Option<MetadataCatalogConfig>)`](crate::client::fluent_builders::CreateFlow::set_metadata_catalog_config): <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    /// - On success, responds with [`CreateFlowOutput`](crate::output::CreateFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::CreateFlowOutput::flow_arn): <p> The flow's Amazon Resource Name (ARN). </p>
    ///   - [`flow_status(Option<FlowStatus>)`](crate::output::CreateFlowOutput::flow_status): <p> Indicates the current status of the flow. </p>
    /// - On failure, responds with [`SdkError<CreateFlowError>`](crate::error::CreateFlowError)
    pub fn create_flow(&self) -> crate::client::fluent_builders::CreateFlow {
        crate::client::fluent_builders::CreateFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConnectorProfile`](crate::client::fluent_builders::DeleteConnectorProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_profile_name(impl Into<String>)`](crate::client::fluent_builders::DeleteConnectorProfile::connector_profile_name) / [`set_connector_profile_name(Option<String>)`](crate::client::fluent_builders::DeleteConnectorProfile::set_connector_profile_name): <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. </p>
    ///   - [`force_delete(bool)`](crate::client::fluent_builders::DeleteConnectorProfile::force_delete) / [`set_force_delete(bool)`](crate::client::fluent_builders::DeleteConnectorProfile::set_force_delete): <p> Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. </p>
    /// - On success, responds with [`DeleteConnectorProfileOutput`](crate::output::DeleteConnectorProfileOutput)

    /// - On failure, responds with [`SdkError<DeleteConnectorProfileError>`](crate::error::DeleteConnectorProfileError)
    pub fn delete_connector_profile(
        &self,
    ) -> crate::client::fluent_builders::DeleteConnectorProfile {
        crate::client::fluent_builders::DeleteConnectorProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFlow`](crate::client::fluent_builders::DeleteFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::DeleteFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::DeleteFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    ///   - [`force_delete(bool)`](crate::client::fluent_builders::DeleteFlow::force_delete) / [`set_force_delete(bool)`](crate::client::fluent_builders::DeleteFlow::set_force_delete): <p> Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. </p>
    /// - On success, responds with [`DeleteFlowOutput`](crate::output::DeleteFlowOutput)

    /// - On failure, responds with [`SdkError<DeleteFlowError>`](crate::error::DeleteFlowError)
    pub fn delete_flow(&self) -> crate::client::fluent_builders::DeleteFlow {
        crate::client::fluent_builders::DeleteFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnector`](crate::client::fluent_builders::DescribeConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_type(ConnectorType)`](crate::client::fluent_builders::DescribeConnector::connector_type) / [`set_connector_type(Option<ConnectorType>)`](crate::client::fluent_builders::DescribeConnector::set_connector_type): <p>The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.</p>
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::DescribeConnector::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::DescribeConnector::set_connector_label): <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    /// - On success, responds with [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput) with field(s):
    ///   - [`connector_configuration(Option<ConnectorConfiguration>)`](crate::output::DescribeConnectorOutput::connector_configuration): <p>Configuration info of all the connectors that the user requested.</p>
    /// - On failure, responds with [`SdkError<DescribeConnectorError>`](crate::error::DescribeConnectorError)
    pub fn describe_connector(&self) -> crate::client::fluent_builders::DescribeConnector {
        crate::client::fluent_builders::DescribeConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnectorEntity`](crate::client::fluent_builders::DescribeConnectorEntity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_entity_name(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::connector_entity_name) / [`set_connector_entity_name(Option<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::set_connector_entity_name): <p> The entity name for that connector. </p>
    ///   - [`connector_type(ConnectorType)`](crate::client::fluent_builders::DescribeConnectorEntity::connector_type) / [`set_connector_type(Option<ConnectorType>)`](crate::client::fluent_builders::DescribeConnectorEntity::set_connector_type): <p> The type of connector application, such as Salesforce, Amplitude, and so on. </p>
    ///   - [`connector_profile_name(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::connector_profile_name) / [`set_connector_profile_name(Option<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::set_connector_profile_name): <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    ///   - [`api_version(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::api_version) / [`set_api_version(Option<String>)`](crate::client::fluent_builders::DescribeConnectorEntity::set_api_version): <p>The version of the API that's used by the connector.</p>
    /// - On success, responds with [`DescribeConnectorEntityOutput`](crate::output::DescribeConnectorEntityOutput) with field(s):
    ///   - [`connector_entity_fields(Option<Vec<ConnectorEntityField>>)`](crate::output::DescribeConnectorEntityOutput::connector_entity_fields): <p> Describes the fields for that connector entity. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. </p>
    /// - On failure, responds with [`SdkError<DescribeConnectorEntityError>`](crate::error::DescribeConnectorEntityError)
    pub fn describe_connector_entity(
        &self,
    ) -> crate::client::fluent_builders::DescribeConnectorEntity {
        crate::client::fluent_builders::DescribeConnectorEntity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnectorProfiles`](crate::client::fluent_builders::DescribeConnectorProfiles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeConnectorProfiles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_profile_names(Vec<String>)`](crate::client::fluent_builders::DescribeConnectorProfiles::connector_profile_names) / [`set_connector_profile_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeConnectorProfiles::set_connector_profile_names): <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    ///   - [`connector_type(ConnectorType)`](crate::client::fluent_builders::DescribeConnectorProfiles::connector_type) / [`set_connector_type(Option<ConnectorType>)`](crate::client::fluent_builders::DescribeConnectorProfiles::set_connector_type): <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectorProfiles::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::DescribeConnectorProfiles::set_connector_label): <p>The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeConnectorProfiles::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeConnectorProfiles::set_max_results): <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectorProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeConnectorProfiles::set_next_token): <p> The pagination token for the next page of data. </p>
    /// - On success, responds with [`DescribeConnectorProfilesOutput`](crate::output::DescribeConnectorProfilesOutput) with field(s):
    ///   - [`connector_profile_details(Option<Vec<ConnectorProfile>>)`](crate::output::DescribeConnectorProfilesOutput::connector_profile_details): <p> Returns information about the connector profiles associated with the flow. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeConnectorProfilesOutput::next_token): <p> The pagination token for the next page of data. If <code>nextToken=null</code>, this means that all records have been fetched. </p>
    /// - On failure, responds with [`SdkError<DescribeConnectorProfilesError>`](crate::error::DescribeConnectorProfilesError)
    pub fn describe_connector_profiles(
        &self,
    ) -> crate::client::fluent_builders::DescribeConnectorProfiles {
        crate::client::fluent_builders::DescribeConnectorProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnectors`](crate::client::fluent_builders::DescribeConnectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeConnectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_types(Vec<ConnectorType>)`](crate::client::fluent_builders::DescribeConnectors::connector_types) / [`set_connector_types(Option<Vec<ConnectorType>>)`](crate::client::fluent_builders::DescribeConnectors::set_connector_types): <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeConnectors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeConnectors::set_max_results): <p>The maximum number of items that should be returned in the result set. The default is 20.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeConnectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeConnectors::set_next_token): <p> The pagination token for the next page of data. </p>
    /// - On success, responds with [`DescribeConnectorsOutput`](crate::output::DescribeConnectorsOutput) with field(s):
    ///   - [`connector_configurations(Option<HashMap<ConnectorType, ConnectorConfiguration>>)`](crate::output::DescribeConnectorsOutput::connector_configurations): <p> The configuration that is applied to the connectors used in the flow. </p>
    ///   - [`connectors(Option<Vec<ConnectorDetail>>)`](crate::output::DescribeConnectorsOutput::connectors): <p>Information about the connectors supported in Amazon AppFlow.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeConnectorsOutput::next_token): <p> The pagination token for the next page of data. </p>
    /// - On failure, responds with [`SdkError<DescribeConnectorsError>`](crate::error::DescribeConnectorsError)
    pub fn describe_connectors(&self) -> crate::client::fluent_builders::DescribeConnectors {
        crate::client::fluent_builders::DescribeConnectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFlow`](crate::client::fluent_builders::DescribeFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::DescribeFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::DescribeFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    /// - On success, responds with [`DescribeFlowOutput`](crate::output::DescribeFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::DescribeFlowOutput::flow_arn): <p> The flow's Amazon Resource Name (ARN). </p>
    ///   - [`description(Option<String>)`](crate::output::DescribeFlowOutput::description): <p> A description of the flow. </p>
    ///   - [`flow_name(Option<String>)`](crate::output::DescribeFlowOutput::flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    ///   - [`kms_arn(Option<String>)`](crate::output::DescribeFlowOutput::kms_arn): <p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>
    ///   - [`flow_status(Option<FlowStatus>)`](crate::output::DescribeFlowOutput::flow_status): <p> Indicates the current status of the flow. </p>
    ///   - [`flow_status_message(Option<String>)`](crate::output::DescribeFlowOutput::flow_status_message): <p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>
    ///   - [`source_flow_config(Option<SourceFlowConfig>)`](crate::output::DescribeFlowOutput::source_flow_config): <p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>
    ///   - [`destination_flow_config_list(Option<Vec<DestinationFlowConfig>>)`](crate::output::DescribeFlowOutput::destination_flow_config_list): <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    ///   - [`last_run_execution_details(Option<ExecutionDetails>)`](crate::output::DescribeFlowOutput::last_run_execution_details): <p> Describes the details of the most recent flow run. </p>
    ///   - [`trigger_config(Option<TriggerConfig>)`](crate::output::DescribeFlowOutput::trigger_config): <p> The trigger settings that determine how and when the flow runs. </p>
    ///   - [`tasks(Option<Vec<Task>>)`](crate::output::DescribeFlowOutput::tasks): <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    ///   - [`created_at(Option<DateTime>)`](crate::output::DescribeFlowOutput::created_at): <p> Specifies when the flow was created. </p>
    ///   - [`last_updated_at(Option<DateTime>)`](crate::output::DescribeFlowOutput::last_updated_at): <p> Specifies when the flow was last updated. </p>
    ///   - [`created_by(Option<String>)`](crate::output::DescribeFlowOutput::created_by): <p> The ARN of the user who created the flow. </p>
    ///   - [`last_updated_by(Option<String>)`](crate::output::DescribeFlowOutput::last_updated_by): <p> Specifies the user name of the account that performed the most recent update. </p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::DescribeFlowOutput::tags): <p> The tags used to organize, track, or control access for your flow. </p>
    ///   - [`metadata_catalog_config(Option<MetadataCatalogConfig>)`](crate::output::DescribeFlowOutput::metadata_catalog_config): <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    ///   - [`last_run_metadata_catalog_details(Option<Vec<MetadataCatalogDetail>>)`](crate::output::DescribeFlowOutput::last_run_metadata_catalog_details): <p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>
    ///   - [`schema_version(Option<i64>)`](crate::output::DescribeFlowOutput::schema_version): <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p>  <ul>   <li> <p>Source-to-destination field mappings</p> </li>   <li> <p>Field data types</p> </li>   <li> <p>Partition keys</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DescribeFlowError>`](crate::error::DescribeFlowError)
    pub fn describe_flow(&self) -> crate::client::fluent_builders::DescribeFlow {
        crate::client::fluent_builders::DescribeFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFlowExecutionRecords`](crate::client::fluent_builders::DescribeFlowExecutionRecords) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFlowExecutionRecords::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::set_max_results): <p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFlowExecutionRecords::set_next_token): <p> The pagination token for the next page of data. </p>
    /// - On success, responds with [`DescribeFlowExecutionRecordsOutput`](crate::output::DescribeFlowExecutionRecordsOutput) with field(s):
    ///   - [`flow_executions(Option<Vec<ExecutionRecord>>)`](crate::output::DescribeFlowExecutionRecordsOutput::flow_executions): <p> Returns a list of all instances when this flow was run. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFlowExecutionRecordsOutput::next_token): <p> The pagination token for the next page of data. </p>
    /// - On failure, responds with [`SdkError<DescribeFlowExecutionRecordsError>`](crate::error::DescribeFlowExecutionRecordsError)
    pub fn describe_flow_execution_records(
        &self,
    ) -> crate::client::fluent_builders::DescribeFlowExecutionRecords {
        crate::client::fluent_builders::DescribeFlowExecutionRecords::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConnectorEntities`](crate::client::fluent_builders::ListConnectorEntities) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_profile_name(impl Into<String>)`](crate::client::fluent_builders::ListConnectorEntities::connector_profile_name) / [`set_connector_profile_name(Option<String>)`](crate::client::fluent_builders::ListConnectorEntities::set_connector_profile_name): <p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>
    ///   - [`connector_type(ConnectorType)`](crate::client::fluent_builders::ListConnectorEntities::connector_type) / [`set_connector_type(Option<ConnectorType>)`](crate::client::fluent_builders::ListConnectorEntities::set_connector_type): <p> The type of connector, such as Salesforce, Amplitude, and so on. </p>
    ///   - [`entities_path(impl Into<String>)`](crate::client::fluent_builders::ListConnectorEntities::entities_path) / [`set_entities_path(Option<String>)`](crate::client::fluent_builders::ListConnectorEntities::set_entities_path): <p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>
    ///   - [`api_version(impl Into<String>)`](crate::client::fluent_builders::ListConnectorEntities::api_version) / [`set_api_version(Option<String>)`](crate::client::fluent_builders::ListConnectorEntities::set_api_version): <p>The version of the API that's used by the connector.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConnectorEntities::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConnectorEntities::set_max_results): <p>The maximum number of items that the operation returns in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConnectorEntities::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConnectorEntities::set_next_token): <p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>
    /// - On success, responds with [`ListConnectorEntitiesOutput`](crate::output::ListConnectorEntitiesOutput) with field(s):
    ///   - [`connector_entity_map(Option<HashMap<String, Vec<ConnectorEntity>>>)`](crate::output::ListConnectorEntitiesOutput::connector_entity_map): <p> The response of <code>ListConnectorEntities</code> lists entities grouped by category. This map's key represents the group name, and its value contains the list of entities belonging to that group. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConnectorEntitiesOutput::next_token): <p>A token that you specify in your next <code>ListConnectorEntities</code> operation to get the next page of results in paginated response. The <code>ListConnectorEntities</code> operation provides this token if the response is too big for the page size.</p>
    /// - On failure, responds with [`SdkError<ListConnectorEntitiesError>`](crate::error::ListConnectorEntitiesError)
    pub fn list_connector_entities(&self) -> crate::client::fluent_builders::ListConnectorEntities {
        crate::client::fluent_builders::ListConnectorEntities::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConnectors`](crate::client::fluent_builders::ListConnectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConnectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConnectors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConnectors::set_max_results): <p>Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConnectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConnectors::set_next_token): <p>The pagination token for the next page of data.</p>
    /// - On success, responds with [`ListConnectorsOutput`](crate::output::ListConnectorsOutput) with field(s):
    ///   - [`connectors(Option<Vec<ConnectorDetail>>)`](crate::output::ListConnectorsOutput::connectors): <p>Contains information about the connectors supported by Amazon AppFlow.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConnectorsOutput::next_token): <p>The pagination token for the next page of data. If nextToken=null, this means that all records have been fetched.</p>
    /// - On failure, responds with [`SdkError<ListConnectorsError>`](crate::error::ListConnectorsError)
    pub fn list_connectors(&self) -> crate::client::fluent_builders::ListConnectors {
        crate::client::fluent_builders::ListConnectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFlows`](crate::client::fluent_builders::ListFlows) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFlows::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFlows::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFlows::set_max_results): <p> Specifies the maximum number of items that should be returned in the result set. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFlows::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFlows::set_next_token): <p> The pagination token for next page of data. </p>
    /// - On success, responds with [`ListFlowsOutput`](crate::output::ListFlowsOutput) with field(s):
    ///   - [`flows(Option<Vec<FlowDefinition>>)`](crate::output::ListFlowsOutput::flows): <p> The list of flows associated with your account. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFlowsOutput::next_token): <p> The pagination token for next page of data. </p>
    /// - On failure, responds with [`SdkError<ListFlowsError>`](crate::error::ListFlowsError)
    pub fn list_flows(&self) -> crate::client::fluent_builders::ListFlows {
        crate::client::fluent_builders::ListFlows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p> The Amazon Resource Name (ARN) of the specified flow. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p> The tags used to organize, track, or control access for your flow. </p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterConnector`](crate::client::fluent_builders::RegisterConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::RegisterConnector::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::RegisterConnector::set_connector_label): <p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::RegisterConnector::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::RegisterConnector::set_description): <p>A description about the connector that's being registered.</p>
    ///   - [`connector_provisioning_type(ConnectorProvisioningType)`](crate::client::fluent_builders::RegisterConnector::connector_provisioning_type) / [`set_connector_provisioning_type(Option<ConnectorProvisioningType>)`](crate::client::fluent_builders::RegisterConnector::set_connector_provisioning_type): <p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>
    ///   - [`connector_provisioning_config(ConnectorProvisioningConfig)`](crate::client::fluent_builders::RegisterConnector::connector_provisioning_config) / [`set_connector_provisioning_config(Option<ConnectorProvisioningConfig>)`](crate::client::fluent_builders::RegisterConnector::set_connector_provisioning_config): <p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>
    /// - On success, responds with [`RegisterConnectorOutput`](crate::output::RegisterConnectorOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::output::RegisterConnectorOutput::connector_arn): <p>The ARN of the connector being registered.</p>
    /// - On failure, responds with [`SdkError<RegisterConnectorError>`](crate::error::RegisterConnectorError)
    pub fn register_connector(&self) -> crate::client::fluent_builders::RegisterConnector {
        crate::client::fluent_builders::RegisterConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartFlow`](crate::client::fluent_builders::StartFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::StartFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::StartFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    /// - On success, responds with [`StartFlowOutput`](crate::output::StartFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::StartFlowOutput::flow_arn): <p> The flow's Amazon Resource Name (ARN). </p>
    ///   - [`flow_status(Option<FlowStatus>)`](crate::output::StartFlowOutput::flow_status): <p> Indicates the current status of the flow. </p>
    ///   - [`execution_id(Option<String>)`](crate::output::StartFlowOutput::execution_id): <p> Returns the internal execution ID of an on-demand flow when the flow is started. For scheduled or event-triggered flows, this value is null. </p>
    /// - On failure, responds with [`SdkError<StartFlowError>`](crate::error::StartFlowError)
    pub fn start_flow(&self) -> crate::client::fluent_builders::StartFlow {
        crate::client::fluent_builders::StartFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopFlow`](crate::client::fluent_builders::StopFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::StopFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::StopFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    /// - On success, responds with [`StopFlowOutput`](crate::output::StopFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::StopFlowOutput::flow_arn): <p> The flow's Amazon Resource Name (ARN). </p>
    ///   - [`flow_status(Option<FlowStatus>)`](crate::output::StopFlowOutput::flow_status): <p> Indicates the current status of the flow. </p>
    /// - On failure, responds with [`SdkError<StopFlowError>`](crate::error::StopFlowError)
    pub fn stop_flow(&self) -> crate::client::fluent_builders::StopFlow {
        crate::client::fluent_builders::StopFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p> The Amazon Resource Name (ARN) of the flow that you want to tag. </p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p> The tags used to organize, track, or control access for your flow. </p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UnregisterConnector`](crate::client::fluent_builders::UnregisterConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::UnregisterConnector::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::UnregisterConnector::set_connector_label): <p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>
    ///   - [`force_delete(bool)`](crate::client::fluent_builders::UnregisterConnector::force_delete) / [`set_force_delete(bool)`](crate::client::fluent_builders::UnregisterConnector::set_force_delete): <p>Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.</p>
    /// - On success, responds with [`UnregisterConnectorOutput`](crate::output::UnregisterConnectorOutput)

    /// - On failure, responds with [`SdkError<UnregisterConnectorError>`](crate::error::UnregisterConnectorError)
    pub fn unregister_connector(&self) -> crate::client::fluent_builders::UnregisterConnector {
        crate::client::fluent_builders::UnregisterConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p> The Amazon Resource Name (ARN) of the flow that you want to untag. </p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p> The tag keys associated with the tag that you want to remove from your flow. </p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnectorProfile`](crate::client::fluent_builders::UpdateConnectorProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_profile_name(impl Into<String>)`](crate::client::fluent_builders::UpdateConnectorProfile::connector_profile_name) / [`set_connector_profile_name(Option<String>)`](crate::client::fluent_builders::UpdateConnectorProfile::set_connector_profile_name): <p> The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>
    ///   - [`connection_mode(ConnectionMode)`](crate::client::fluent_builders::UpdateConnectorProfile::connection_mode) / [`set_connection_mode(Option<ConnectionMode>)`](crate::client::fluent_builders::UpdateConnectorProfile::set_connection_mode): <p> Indicates the connection mode and if it is public or private. </p>
    ///   - [`connector_profile_config(ConnectorProfileConfig)`](crate::client::fluent_builders::UpdateConnectorProfile::connector_profile_config) / [`set_connector_profile_config(Option<ConnectorProfileConfig>)`](crate::client::fluent_builders::UpdateConnectorProfile::set_connector_profile_config): <p> Defines the connector-specific profile configuration and credentials. </p>
    /// - On success, responds with [`UpdateConnectorProfileOutput`](crate::output::UpdateConnectorProfileOutput) with field(s):
    ///   - [`connector_profile_arn(Option<String>)`](crate::output::UpdateConnectorProfileOutput::connector_profile_arn): <p> The Amazon Resource Name (ARN) of the connector profile. </p>
    /// - On failure, responds with [`SdkError<UpdateConnectorProfileError>`](crate::error::UpdateConnectorProfileError)
    pub fn update_connector_profile(
        &self,
    ) -> crate::client::fluent_builders::UpdateConnectorProfile {
        crate::client::fluent_builders::UpdateConnectorProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnectorRegistration`](crate::client::fluent_builders::UpdateConnectorRegistration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_label(impl Into<String>)`](crate::client::fluent_builders::UpdateConnectorRegistration::connector_label) / [`set_connector_label(Option<String>)`](crate::client::fluent_builders::UpdateConnectorRegistration::set_connector_label): <p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateConnectorRegistration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateConnectorRegistration::set_description): <p>A description about the update that you're applying to the connector.</p>
    ///   - [`connector_provisioning_config(ConnectorProvisioningConfig)`](crate::client::fluent_builders::UpdateConnectorRegistration::connector_provisioning_config) / [`set_connector_provisioning_config(Option<ConnectorProvisioningConfig>)`](crate::client::fluent_builders::UpdateConnectorRegistration::set_connector_provisioning_config): <p>Contains information about the configuration of the connector being registered.</p>
    /// - On success, responds with [`UpdateConnectorRegistrationOutput`](crate::output::UpdateConnectorRegistrationOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::output::UpdateConnectorRegistrationOutput::connector_arn): <p>The ARN of the connector being updated.</p>
    /// - On failure, responds with [`SdkError<UpdateConnectorRegistrationError>`](crate::error::UpdateConnectorRegistrationError)
    pub fn update_connector_registration(
        &self,
    ) -> crate::client::fluent_builders::UpdateConnectorRegistration {
        crate::client::fluent_builders::UpdateConnectorRegistration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlow`](crate::client::fluent_builders::UpdateFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_name(impl Into<String>)`](crate::client::fluent_builders::UpdateFlow::flow_name) / [`set_flow_name(Option<String>)`](crate::client::fluent_builders::UpdateFlow::set_flow_name): <p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFlow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFlow::set_description): <p> A description of the flow. </p>
    ///   - [`trigger_config(TriggerConfig)`](crate::client::fluent_builders::UpdateFlow::trigger_config) / [`set_trigger_config(Option<TriggerConfig>)`](crate::client::fluent_builders::UpdateFlow::set_trigger_config): <p> The trigger settings that determine how and when the flow runs. </p>
    ///   - [`source_flow_config(SourceFlowConfig)`](crate::client::fluent_builders::UpdateFlow::source_flow_config) / [`set_source_flow_config(Option<SourceFlowConfig>)`](crate::client::fluent_builders::UpdateFlow::set_source_flow_config): <p> Contains information about the configuration of the source connector used in the flow. </p>
    ///   - [`destination_flow_config_list(Vec<DestinationFlowConfig>)`](crate::client::fluent_builders::UpdateFlow::destination_flow_config_list) / [`set_destination_flow_config_list(Option<Vec<DestinationFlowConfig>>)`](crate::client::fluent_builders::UpdateFlow::set_destination_flow_config_list): <p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>
    ///   - [`tasks(Vec<Task>)`](crate::client::fluent_builders::UpdateFlow::tasks) / [`set_tasks(Option<Vec<Task>>)`](crate::client::fluent_builders::UpdateFlow::set_tasks): <p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>
    ///   - [`metadata_catalog_config(MetadataCatalogConfig)`](crate::client::fluent_builders::UpdateFlow::metadata_catalog_config) / [`set_metadata_catalog_config(Option<MetadataCatalogConfig>)`](crate::client::fluent_builders::UpdateFlow::set_metadata_catalog_config): <p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>
    /// - On success, responds with [`UpdateFlowOutput`](crate::output::UpdateFlowOutput) with field(s):
    ///   - [`flow_status(Option<FlowStatus>)`](crate::output::UpdateFlowOutput::flow_status): <p>Indicates the current status of the flow. </p>
    /// - On failure, responds with [`SdkError<UpdateFlowError>`](crate::error::UpdateFlowError)
    pub fn update_flow(&self) -> crate::client::fluent_builders::UpdateFlow {
        crate::client::fluent_builders::UpdateFlow::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
