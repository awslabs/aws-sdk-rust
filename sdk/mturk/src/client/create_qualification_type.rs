// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateQualificationType`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_name): <p> The name you give to the Qualification type. The type name is used to represent the Qualification to Workers, and to find the type using a Qualification type search. It must be unique across all of your Qualification types.</p>
    ///   - [`keywords(impl Into<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::keywords) / [`set_keywords(Option<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_keywords): <p>One or more words or phrases that describe the Qualification type, separated by commas. The keywords of a type make the type easier to find during a search.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_description): <p>A long description for the Qualification type. On the Amazon Mechanical Turk website, the long description is displayed when a Worker examines a Qualification type.</p>
    ///   - [`qualification_type_status(QualificationTypeStatus)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::qualification_type_status) / [`set_qualification_type_status(Option<QualificationTypeStatus>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_qualification_type_status): <p>The initial status of the Qualification type.</p>  <p>Constraints: Valid values are: Active | Inactive</p>
    ///   - [`retry_delay_in_seconds(i64)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::retry_delay_in_seconds) / [`set_retry_delay_in_seconds(Option<i64>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_retry_delay_in_seconds): <p>The number of seconds that a Worker must wait after requesting a Qualification of the Qualification type before the worker can retry the Qualification request.</p>  <p>Constraints: None. If not specified, retries are disabled and Workers can request a Qualification of this type only once, even if the Worker has not been granted the Qualification. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must delete existing retry-enabled Qualification type and then create a new Qualification type with retries disabled.</p>
    ///   - [`test(impl Into<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::test) / [`set_test(Option<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_test): <p> The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified. </p>  <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>  <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    ///   - [`answer_key(impl Into<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::answer_key) / [`set_answer_key(Option<String>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_answer_key): <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>  <p>Constraints: Must not be longer than 65535 bytes.</p>  <p>Constraints: None. If not specified, you must process Qualification requests manually.</p>
    ///   - [`test_duration_in_seconds(i64)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::test_duration_in_seconds) / [`set_test_duration_in_seconds(Option<i64>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_test_duration_in_seconds): <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    ///   - [`auto_granted(bool)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::auto_granted) / [`set_auto_granted(Option<bool>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_auto_granted): <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>  <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    ///   - [`auto_granted_value(i32)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::auto_granted_value) / [`set_auto_granted_value(Option<i32>)`](crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::set_auto_granted_value): <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    /// - On success, responds with [`CreateQualificationTypeOutput`](crate::operation::create_qualification_type::CreateQualificationTypeOutput) with field(s):
    ///   - [`qualification_type(Option<QualificationType>)`](crate::operation::create_qualification_type::CreateQualificationTypeOutput::qualification_type): <p>The created Qualification type, returned as a QualificationType data structure.</p>
    /// - On failure, responds with [`SdkError<CreateQualificationTypeError>`](crate::operation::create_qualification_type::CreateQualificationTypeError)
    pub fn create_qualification_type(
        &self,
    ) -> crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder
    {
        crate::operation::create_qualification_type::builders::CreateQualificationTypeFluentBuilder::new(self.handle.clone())
    }
}
