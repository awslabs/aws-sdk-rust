// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Your request is invalid.</p>
    RequestError(crate::error::RequestError),
    /// <p>Amazon Mechanical Turk is temporarily unable to process your request. Try your call again.</p>
    ServiceFault(crate::error::ServiceFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::RequestError(inner) => inner.fmt(f),
            Error::ServiceFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptQualificationRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptQualificationRequestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptQualificationRequestError> for Error {
    fn from(err: crate::error::AcceptQualificationRequestError) -> Self {
        match err {
            crate::error::AcceptQualificationRequestError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::AcceptQualificationRequestError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::AcceptQualificationRequestError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ApproveAssignmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ApproveAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ApproveAssignmentError> for Error {
    fn from(err: crate::error::ApproveAssignmentError) -> Self {
        match err {
            crate::error::ApproveAssignmentError::RequestError(inner) => Error::RequestError(inner),
            crate::error::ApproveAssignmentError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::ApproveAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AssociateQualificationWithWorkerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateQualificationWithWorkerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateQualificationWithWorkerError> for Error {
    fn from(err: crate::error::AssociateQualificationWithWorkerError) -> Self {
        match err {
            crate::error::AssociateQualificationWithWorkerError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::AssociateQualificationWithWorkerError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::AssociateQualificationWithWorkerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateAdditionalAssignmentsForHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateAdditionalAssignmentsForHITError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAdditionalAssignmentsForHITError> for Error {
    fn from(err: crate::error::CreateAdditionalAssignmentsForHITError) -> Self {
        match err {
            crate::error::CreateAdditionalAssignmentsForHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::CreateAdditionalAssignmentsForHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::CreateAdditionalAssignmentsForHITError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHITError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateHITError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHITError> for Error {
    fn from(err: crate::error::CreateHITError) -> Self {
        match err {
            crate::error::CreateHITError::RequestError(inner) => Error::RequestError(inner),
            crate::error::CreateHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::CreateHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHITTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateHITTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHITTypeError> for Error {
    fn from(err: crate::error::CreateHITTypeError) -> Self {
        match err {
            crate::error::CreateHITTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::error::CreateHITTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::CreateHITTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHITWithHITTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateHITWithHITTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHITWithHITTypeError> for Error {
    fn from(err: crate::error::CreateHITWithHITTypeError) -> Self {
        match err {
            crate::error::CreateHITWithHITTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::CreateHITWithHITTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::CreateHITWithHITTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateQualificationTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateQualificationTypeError> for Error {
    fn from(err: crate::error::CreateQualificationTypeError) -> Self {
        match err {
            crate::error::CreateQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::CreateQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::CreateQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkerBlockError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateWorkerBlockError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWorkerBlockError> for Error {
    fn from(err: crate::error::CreateWorkerBlockError) -> Self {
        match err {
            crate::error::CreateWorkerBlockError::RequestError(inner) => Error::RequestError(inner),
            crate::error::CreateWorkerBlockError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::CreateWorkerBlockError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHITError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteHITError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHITError> for Error {
    fn from(err: crate::error::DeleteHITError) -> Self {
        match err {
            crate::error::DeleteHITError::RequestError(inner) => Error::RequestError(inner),
            crate::error::DeleteHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::DeleteHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteQualificationTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteQualificationTypeError> for Error {
    fn from(err: crate::error::DeleteQualificationTypeError) -> Self {
        match err {
            crate::error::DeleteQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::DeleteQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::DeleteQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkerBlockError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkerBlockError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWorkerBlockError> for Error {
    fn from(err: crate::error::DeleteWorkerBlockError) -> Self {
        match err {
            crate::error::DeleteWorkerBlockError::RequestError(inner) => Error::RequestError(inner),
            crate::error::DeleteWorkerBlockError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::DeleteWorkerBlockError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateQualificationFromWorkerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateQualificationFromWorkerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateQualificationFromWorkerError> for Error {
    fn from(err: crate::error::DisassociateQualificationFromWorkerError) -> Self {
        match err {
            crate::error::DisassociateQualificationFromWorkerError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::DisassociateQualificationFromWorkerError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::DisassociateQualificationFromWorkerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountBalanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountBalanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountBalanceError> for Error {
    fn from(err: crate::error::GetAccountBalanceError) -> Self {
        match err {
            crate::error::GetAccountBalanceError::RequestError(inner) => Error::RequestError(inner),
            crate::error::GetAccountBalanceError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::GetAccountBalanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAssignmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAssignmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAssignmentError> for Error {
    fn from(err: crate::error::GetAssignmentError) -> Self {
        match err {
            crate::error::GetAssignmentError::RequestError(inner) => Error::RequestError(inner),
            crate::error::GetAssignmentError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::GetAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFileUploadURLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFileUploadURLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFileUploadURLError> for Error {
    fn from(err: crate::error::GetFileUploadURLError) -> Self {
        match err {
            crate::error::GetFileUploadURLError::RequestError(inner) => Error::RequestError(inner),
            crate::error::GetFileUploadURLError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::GetFileUploadURLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetHITError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetHITError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetHITError> for Error {
    fn from(err: crate::error::GetHITError) -> Self {
        match err {
            crate::error::GetHITError::RequestError(inner) => Error::RequestError(inner),
            crate::error::GetHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::GetHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQualificationScoreError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetQualificationScoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQualificationScoreError> for Error {
    fn from(err: crate::error::GetQualificationScoreError) -> Self {
        match err {
            crate::error::GetQualificationScoreError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::GetQualificationScoreError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::GetQualificationScoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetQualificationTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQualificationTypeError> for Error {
    fn from(err: crate::error::GetQualificationTypeError) -> Self {
        match err {
            crate::error::GetQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::GetQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::GetQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssignmentsForHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssignmentsForHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssignmentsForHITError> for Error {
    fn from(err: crate::error::ListAssignmentsForHITError) -> Self {
        match err {
            crate::error::ListAssignmentsForHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListAssignmentsForHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListAssignmentsForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBonusPaymentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBonusPaymentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBonusPaymentsError> for Error {
    fn from(err: crate::error::ListBonusPaymentsError) -> Self {
        match err {
            crate::error::ListBonusPaymentsError::RequestError(inner) => Error::RequestError(inner),
            crate::error::ListBonusPaymentsError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::ListBonusPaymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHITsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListHITsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHITsError> for Error {
    fn from(err: crate::error::ListHITsError) -> Self {
        match err {
            crate::error::ListHITsError::RequestError(inner) => Error::RequestError(inner),
            crate::error::ListHITsError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::ListHITsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHITsForQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListHITsForQualificationTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHITsForQualificationTypeError> for Error {
    fn from(err: crate::error::ListHITsForQualificationTypeError) -> Self {
        match err {
            crate::error::ListHITsForQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListHITsForQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListHITsForQualificationTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQualificationRequestsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListQualificationRequestsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQualificationRequestsError> for Error {
    fn from(err: crate::error::ListQualificationRequestsError) -> Self {
        match err {
            crate::error::ListQualificationRequestsError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListQualificationRequestsError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListQualificationRequestsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQualificationTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListQualificationTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQualificationTypesError> for Error {
    fn from(err: crate::error::ListQualificationTypesError) -> Self {
        match err {
            crate::error::ListQualificationTypesError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListQualificationTypesError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListQualificationTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReviewableHITsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListReviewableHITsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReviewableHITsError> for Error {
    fn from(err: crate::error::ListReviewableHITsError) -> Self {
        match err {
            crate::error::ListReviewableHITsError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListReviewableHITsError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListReviewableHITsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReviewPolicyResultsForHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListReviewPolicyResultsForHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReviewPolicyResultsForHITError> for Error {
    fn from(err: crate::error::ListReviewPolicyResultsForHITError) -> Self {
        match err {
            crate::error::ListReviewPolicyResultsForHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListReviewPolicyResultsForHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListReviewPolicyResultsForHITError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkerBlocksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListWorkerBlocksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorkerBlocksError> for Error {
    fn from(err: crate::error::ListWorkerBlocksError) -> Self {
        match err {
            crate::error::ListWorkerBlocksError::RequestError(inner) => Error::RequestError(inner),
            crate::error::ListWorkerBlocksError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::ListWorkerBlocksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListWorkersWithQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListWorkersWithQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorkersWithQualificationTypeError> for Error {
    fn from(err: crate::error::ListWorkersWithQualificationTypeError) -> Self {
        match err {
            crate::error::ListWorkersWithQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::ListWorkersWithQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::ListWorkersWithQualificationTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::NotifyWorkersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::NotifyWorkersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::NotifyWorkersError> for Error {
    fn from(err: crate::error::NotifyWorkersError) -> Self {
        match err {
            crate::error::NotifyWorkersError::RequestError(inner) => Error::RequestError(inner),
            crate::error::NotifyWorkersError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::NotifyWorkersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RejectAssignmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RejectAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectAssignmentError> for Error {
    fn from(err: crate::error::RejectAssignmentError) -> Self {
        match err {
            crate::error::RejectAssignmentError::RequestError(inner) => Error::RequestError(inner),
            crate::error::RejectAssignmentError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::RejectAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RejectQualificationRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RejectQualificationRequestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectQualificationRequestError> for Error {
    fn from(err: crate::error::RejectQualificationRequestError) -> Self {
        match err {
            crate::error::RejectQualificationRequestError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::RejectQualificationRequestError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::RejectQualificationRequestError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendBonusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendBonusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendBonusError> for Error {
    fn from(err: crate::error::SendBonusError) -> Self {
        match err {
            crate::error::SendBonusError::RequestError(inner) => Error::RequestError(inner),
            crate::error::SendBonusError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::error::SendBonusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendTestEventNotificationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendTestEventNotificationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendTestEventNotificationError> for Error {
    fn from(err: crate::error::SendTestEventNotificationError) -> Self {
        match err {
            crate::error::SendTestEventNotificationError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::SendTestEventNotificationError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::SendTestEventNotificationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateExpirationForHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateExpirationForHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateExpirationForHITError> for Error {
    fn from(err: crate::error::UpdateExpirationForHITError) -> Self {
        match err {
            crate::error::UpdateExpirationForHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::UpdateExpirationForHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::UpdateExpirationForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateHITReviewStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateHITReviewStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateHITReviewStatusError> for Error {
    fn from(err: crate::error::UpdateHITReviewStatusError) -> Self {
        match err {
            crate::error::UpdateHITReviewStatusError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::UpdateHITReviewStatusError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::UpdateHITReviewStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateHITTypeOfHITError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateHITTypeOfHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateHITTypeOfHITError> for Error {
    fn from(err: crate::error::UpdateHITTypeOfHITError) -> Self {
        match err {
            crate::error::UpdateHITTypeOfHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::UpdateHITTypeOfHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::UpdateHITTypeOfHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNotificationSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateNotificationSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateNotificationSettingsError> for Error {
    fn from(err: crate::error::UpdateNotificationSettingsError) -> Self {
        match err {
            crate::error::UpdateNotificationSettingsError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::UpdateNotificationSettingsError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::UpdateNotificationSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQualificationTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQualificationTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQualificationTypeError> for Error {
    fn from(err: crate::error::UpdateQualificationTypeError) -> Self {
        match err {
            crate::error::UpdateQualificationTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::error::UpdateQualificationTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::error::UpdateQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::RequestError(e) => e.request_id(),
            Self::ServiceFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
