// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Your request is invalid.</p>
    RequestError(crate::types::error::RequestError),
    /// <p>Amazon Mechanical Turk is temporarily unable to process your request. Try your call again.</p>
    ServiceFault(crate::types::error::ServiceFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::RequestError(inner) => inner.fmt(f),
            Error::ServiceFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::accept_qualification_request::AcceptQualificationRequestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::accept_qualification_request::AcceptQualificationRequestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_qualification_request::AcceptQualificationRequestError>
    for Error
{
    fn from(
        err: crate::operation::accept_qualification_request::AcceptQualificationRequestError,
    ) -> Self {
        match err {
            crate::operation::accept_qualification_request::AcceptQualificationRequestError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::accept_qualification_request::AcceptQualificationRequestError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::accept_qualification_request::AcceptQualificationRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::approve_assignment::ApproveAssignmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::approve_assignment::ApproveAssignmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::approve_assignment::ApproveAssignmentError> for Error {
    fn from(err: crate::operation::approve_assignment::ApproveAssignmentError) -> Self {
        match err {
            crate::operation::approve_assignment::ApproveAssignmentError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::approve_assignment::ApproveAssignmentError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::approve_assignment::ApproveAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError> for Error {
    fn from(err: crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError) -> Self {
        match err {
            crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError> for Error {
    fn from(err: crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError) -> Self {
        match err {
            crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_hit::CreateHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_hit::CreateHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_hit::CreateHITError> for Error {
    fn from(err: crate::operation::create_hit::CreateHITError) -> Self {
        match err {
            crate::operation::create_hit::CreateHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::create_hit::CreateHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::create_hit::CreateHITError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::create_hit_type::CreateHITTypeError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_hit_type::CreateHITTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_hit_type::CreateHITTypeError> for Error {
    fn from(err: crate::operation::create_hit_type::CreateHITTypeError) -> Self {
        match err {
            crate::operation::create_hit_type::CreateHITTypeError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::create_hit_type::CreateHITTypeError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::create_hit_type::CreateHITTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError> for Error {
    fn from(err: crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError) -> Self {
        match err {
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError::RequestError(
                inner,
            ) => Error::RequestError(inner),
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError::ServiceFault(
                inner,
            ) => Error::ServiceFault(inner),
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_qualification_type::CreateQualificationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_qualification_type::CreateQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_qualification_type::CreateQualificationTypeError> for Error {
    fn from(
        err: crate::operation::create_qualification_type::CreateQualificationTypeError,
    ) -> Self {
        match err {
            crate::operation::create_qualification_type::CreateQualificationTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::create_qualification_type::CreateQualificationTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::create_qualification_type::CreateQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_worker_block::CreateWorkerBlockError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_worker_block::CreateWorkerBlockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_worker_block::CreateWorkerBlockError> for Error {
    fn from(err: crate::operation::create_worker_block::CreateWorkerBlockError) -> Self {
        match err {
            crate::operation::create_worker_block::CreateWorkerBlockError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::create_worker_block::CreateWorkerBlockError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::create_worker_block::CreateWorkerBlockError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_hit::DeleteHITError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_hit::DeleteHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_hit::DeleteHITError> for Error {
    fn from(err: crate::operation::delete_hit::DeleteHITError) -> Self {
        match err {
            crate::operation::delete_hit::DeleteHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::delete_hit::DeleteHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::delete_hit::DeleteHITError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_qualification_type::DeleteQualificationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_qualification_type::DeleteQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_qualification_type::DeleteQualificationTypeError> for Error {
    fn from(
        err: crate::operation::delete_qualification_type::DeleteQualificationTypeError,
    ) -> Self {
        match err {
            crate::operation::delete_qualification_type::DeleteQualificationTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::delete_qualification_type::DeleteQualificationTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::delete_qualification_type::DeleteQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_worker_block::DeleteWorkerBlockError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_worker_block::DeleteWorkerBlockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_worker_block::DeleteWorkerBlockError> for Error {
    fn from(err: crate::operation::delete_worker_block::DeleteWorkerBlockError) -> Self {
        match err {
            crate::operation::delete_worker_block::DeleteWorkerBlockError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::delete_worker_block::DeleteWorkerBlockError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::delete_worker_block::DeleteWorkerBlockError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError> for Error {
    fn from(err: crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError) -> Self {
        match err {
            crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_balance::GetAccountBalanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_balance::GetAccountBalanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_balance::GetAccountBalanceError> for Error {
    fn from(err: crate::operation::get_account_balance::GetAccountBalanceError) -> Self {
        match err {
            crate::operation::get_account_balance::GetAccountBalanceError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::get_account_balance::GetAccountBalanceError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::get_account_balance::GetAccountBalanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_assignment::GetAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_assignment::GetAssignmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_assignment::GetAssignmentError> for Error {
    fn from(err: crate::operation::get_assignment::GetAssignmentError) -> Self {
        match err {
            crate::operation::get_assignment::GetAssignmentError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::get_assignment::GetAssignmentError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::get_assignment::GetAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_file_upload_url::GetFileUploadURLError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_file_upload_url::GetFileUploadURLError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_file_upload_url::GetFileUploadURLError> for Error {
    fn from(err: crate::operation::get_file_upload_url::GetFileUploadURLError) -> Self {
        match err {
            crate::operation::get_file_upload_url::GetFileUploadURLError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::get_file_upload_url::GetFileUploadURLError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::get_file_upload_url::GetFileUploadURLError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_hit::GetHITError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_hit::GetHITError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_hit::GetHITError> for Error {
    fn from(err: crate::operation::get_hit::GetHITError) -> Self {
        match err {
            crate::operation::get_hit::GetHITError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::get_hit::GetHITError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::get_hit::GetHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_qualification_score::GetQualificationScoreError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_qualification_score::GetQualificationScoreError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_qualification_score::GetQualificationScoreError> for Error {
    fn from(err: crate::operation::get_qualification_score::GetQualificationScoreError) -> Self {
        match err {
            crate::operation::get_qualification_score::GetQualificationScoreError::RequestError(
                inner,
            ) => Error::RequestError(inner),
            crate::operation::get_qualification_score::GetQualificationScoreError::ServiceFault(
                inner,
            ) => Error::ServiceFault(inner),
            crate::operation::get_qualification_score::GetQualificationScoreError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_qualification_type::GetQualificationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_qualification_type::GetQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_qualification_type::GetQualificationTypeError> for Error {
    fn from(err: crate::operation::get_qualification_type::GetQualificationTypeError) -> Self {
        match err {
            crate::operation::get_qualification_type::GetQualificationTypeError::RequestError(
                inner,
            ) => Error::RequestError(inner),
            crate::operation::get_qualification_type::GetQualificationTypeError::ServiceFault(
                inner,
            ) => Error::ServiceFault(inner),
            crate::operation::get_qualification_type::GetQualificationTypeError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_assignments_for_hit::ListAssignmentsForHITError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_assignments_for_hit::ListAssignmentsForHITError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assignments_for_hit::ListAssignmentsForHITError> for Error {
    fn from(err: crate::operation::list_assignments_for_hit::ListAssignmentsForHITError) -> Self {
        match err {
            crate::operation::list_assignments_for_hit::ListAssignmentsForHITError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_assignments_for_hit::ListAssignmentsForHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_assignments_for_hit::ListAssignmentsForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_bonus_payments::ListBonusPaymentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_bonus_payments::ListBonusPaymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_bonus_payments::ListBonusPaymentsError> for Error {
    fn from(err: crate::operation::list_bonus_payments::ListBonusPaymentsError) -> Self {
        match err {
            crate::operation::list_bonus_payments::ListBonusPaymentsError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::list_bonus_payments::ListBonusPaymentsError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::list_bonus_payments::ListBonusPaymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_hi_ts::ListHITsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_hi_ts::ListHITsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hi_ts::ListHITsError> for Error {
    fn from(err: crate::operation::list_hi_ts::ListHITsError) -> Self {
        match err {
            crate::operation::list_hi_ts::ListHITsError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::list_hi_ts::ListHITsError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::list_hi_ts::ListHITsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError>
    for Error
{
    fn from(
        err: crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError,
    ) -> Self {
        match err {
            crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_hi_ts_for_qualification_type::ListHITsForQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_qualification_requests::ListQualificationRequestsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_qualification_requests::ListQualificationRequestsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_qualification_requests::ListQualificationRequestsError> for Error {
    fn from(
        err: crate::operation::list_qualification_requests::ListQualificationRequestsError,
    ) -> Self {
        match err {
            crate::operation::list_qualification_requests::ListQualificationRequestsError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_qualification_requests::ListQualificationRequestsError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_qualification_requests::ListQualificationRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_qualification_types::ListQualificationTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_qualification_types::ListQualificationTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_qualification_types::ListQualificationTypesError> for Error {
    fn from(err: crate::operation::list_qualification_types::ListQualificationTypesError) -> Self {
        match err {
            crate::operation::list_qualification_types::ListQualificationTypesError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_qualification_types::ListQualificationTypesError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_qualification_types::ListQualificationTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_reviewable_hi_ts::ListReviewableHITsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_reviewable_hi_ts::ListReviewableHITsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_reviewable_hi_ts::ListReviewableHITsError> for Error {
    fn from(err: crate::operation::list_reviewable_hi_ts::ListReviewableHITsError) -> Self {
        match err {
            crate::operation::list_reviewable_hi_ts::ListReviewableHITsError::RequestError(
                inner,
            ) => Error::RequestError(inner),
            crate::operation::list_reviewable_hi_ts::ListReviewableHITsError::ServiceFault(
                inner,
            ) => Error::ServiceFault(inner),
            crate::operation::list_reviewable_hi_ts::ListReviewableHITsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError>
    for Error
{
    fn from(
        err: crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError,
    ) -> Self {
        match err {
            crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_worker_blocks::ListWorkerBlocksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_worker_blocks::ListWorkerBlocksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_worker_blocks::ListWorkerBlocksError> for Error {
    fn from(err: crate::operation::list_worker_blocks::ListWorkerBlocksError) -> Self {
        match err {
            crate::operation::list_worker_blocks::ListWorkerBlocksError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::list_worker_blocks::ListWorkerBlocksError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::list_worker_blocks::ListWorkerBlocksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError> for Error {
    fn from(err: crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError) -> Self {
        match err {
            crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::notify_workers::NotifyWorkersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::notify_workers::NotifyWorkersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::notify_workers::NotifyWorkersError> for Error {
    fn from(err: crate::operation::notify_workers::NotifyWorkersError) -> Self {
        match err {
            crate::operation::notify_workers::NotifyWorkersError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::notify_workers::NotifyWorkersError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::notify_workers::NotifyWorkersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reject_assignment::RejectAssignmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reject_assignment::RejectAssignmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_assignment::RejectAssignmentError> for Error {
    fn from(err: crate::operation::reject_assignment::RejectAssignmentError) -> Self {
        match err {
            crate::operation::reject_assignment::RejectAssignmentError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::reject_assignment::RejectAssignmentError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::reject_assignment::RejectAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reject_qualification_request::RejectQualificationRequestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reject_qualification_request::RejectQualificationRequestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_qualification_request::RejectQualificationRequestError>
    for Error
{
    fn from(
        err: crate::operation::reject_qualification_request::RejectQualificationRequestError,
    ) -> Self {
        match err {
            crate::operation::reject_qualification_request::RejectQualificationRequestError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::reject_qualification_request::RejectQualificationRequestError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::reject_qualification_request::RejectQualificationRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_bonus::SendBonusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::send_bonus::SendBonusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_bonus::SendBonusError> for Error {
    fn from(err: crate::operation::send_bonus::SendBonusError) -> Self {
        match err {
            crate::operation::send_bonus::SendBonusError::RequestError(inner) => {
                Error::RequestError(inner)
            }
            crate::operation::send_bonus::SendBonusError::ServiceFault(inner) => {
                Error::ServiceFault(inner)
            }
            crate::operation::send_bonus::SendBonusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_test_event_notification::SendTestEventNotificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_test_event_notification::SendTestEventNotificationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_test_event_notification::SendTestEventNotificationError>
    for Error
{
    fn from(
        err: crate::operation::send_test_event_notification::SendTestEventNotificationError,
    ) -> Self {
        match err {
            crate::operation::send_test_event_notification::SendTestEventNotificationError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::send_test_event_notification::SendTestEventNotificationError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::send_test_event_notification::SendTestEventNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_expiration_for_hit::UpdateExpirationForHITError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_expiration_for_hit::UpdateExpirationForHITError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_expiration_for_hit::UpdateExpirationForHITError> for Error {
    fn from(err: crate::operation::update_expiration_for_hit::UpdateExpirationForHITError) -> Self {
        match err {
            crate::operation::update_expiration_for_hit::UpdateExpirationForHITError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::update_expiration_for_hit::UpdateExpirationForHITError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::update_expiration_for_hit::UpdateExpirationForHITError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_hit_review_status::UpdateHITReviewStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_hit_review_status::UpdateHITReviewStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_hit_review_status::UpdateHITReviewStatusError> for Error {
    fn from(err: crate::operation::update_hit_review_status::UpdateHITReviewStatusError) -> Self {
        match err {
            crate::operation::update_hit_review_status::UpdateHITReviewStatusError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::update_hit_review_status::UpdateHITReviewStatusError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::update_hit_review_status::UpdateHITReviewStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError> for Error {
    fn from(err: crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError) -> Self {
        match err {
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError::RequestError(
                inner,
            ) => Error::RequestError(inner),
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError::ServiceFault(
                inner,
            ) => Error::ServiceFault(inner),
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_notification_settings::UpdateNotificationSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_notification_settings::UpdateNotificationSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_notification_settings::UpdateNotificationSettingsError>
    for Error
{
    fn from(
        err: crate::operation::update_notification_settings::UpdateNotificationSettingsError,
    ) -> Self {
        match err {
            crate::operation::update_notification_settings::UpdateNotificationSettingsError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::update_notification_settings::UpdateNotificationSettingsError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::update_notification_settings::UpdateNotificationSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_qualification_type::UpdateQualificationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_qualification_type::UpdateQualificationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_qualification_type::UpdateQualificationTypeError> for Error {
    fn from(
        err: crate::operation::update_qualification_type::UpdateQualificationTypeError,
    ) -> Self {
        match err {
            crate::operation::update_qualification_type::UpdateQualificationTypeError::RequestError(inner) => Error::RequestError(inner),
            crate::operation::update_qualification_type::UpdateQualificationTypeError::ServiceFault(inner) => Error::ServiceFault(inner),
            crate::operation::update_qualification_type::UpdateQualificationTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::RequestError(e) => e.request_id(),
            Self::ServiceFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
