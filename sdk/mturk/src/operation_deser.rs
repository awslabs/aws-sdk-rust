// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_qualification_request_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptQualificationRequestOutput,
    crate::error::AcceptQualificationRequestError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::AcceptQualificationRequestError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AcceptQualificationRequestError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::AcceptQualificationRequestError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AcceptQualificationRequestError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::AcceptQualificationRequestError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AcceptQualificationRequestError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::AcceptQualificationRequestError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_qualification_request_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptQualificationRequestOutput,
    crate::error::AcceptQualificationRequestError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::accept_qualification_request_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_approve_assignment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ApproveAssignmentOutput, crate::error::ApproveAssignmentError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ApproveAssignmentError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ApproveAssignmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ApproveAssignmentError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ApproveAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ApproveAssignmentError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ApproveAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ApproveAssignmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_approve_assignment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ApproveAssignmentOutput, crate::error::ApproveAssignmentError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::approve_assignment_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_qualification_with_worker_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateQualificationWithWorkerOutput,
    crate::error::AssociateQualificationWithWorkerError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::AssociateQualificationWithWorkerError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AssociateQualificationWithWorkerError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::AssociateQualificationWithWorkerError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AssociateQualificationWithWorkerError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::AssociateQualificationWithWorkerError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AssociateQualificationWithWorkerError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::AssociateQualificationWithWorkerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_qualification_with_worker_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateQualificationWithWorkerOutput,
    crate::error::AssociateQualificationWithWorkerError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::associate_qualification_with_worker_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_additional_assignments_for_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateAdditionalAssignmentsForHitOutput,
    crate::error::CreateAdditionalAssignmentsForHITError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateAdditionalAssignmentsForHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateAdditionalAssignmentsForHITError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateAdditionalAssignmentsForHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateAdditionalAssignmentsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateAdditionalAssignmentsForHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateAdditionalAssignmentsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateAdditionalAssignmentsForHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_additional_assignments_for_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateAdditionalAssignmentsForHitOutput,
    crate::error::CreateAdditionalAssignmentsForHITError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::create_additional_assignments_for_hit_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHitOutput, crate::error::CreateHITError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHITError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHitOutput, crate::error::CreateHITError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hit_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_hit(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateHITError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHitTypeOutput, crate::error::CreateHITTypeError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateHITTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHITTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateHITTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateHITTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateHITTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHitTypeOutput, crate::error::CreateHITTypeError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hit_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_hit_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateHITTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_with_hit_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateHitWithHitTypeOutput,
    crate::error::CreateHITWithHITTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateHITWithHITTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHITWithHITTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateHITWithHITTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITWithHITTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateHITWithHITTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHITWithHITTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateHITWithHITTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hit_with_hit_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateHitWithHitTypeOutput,
    crate::error::CreateHITWithHITTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hit_with_hit_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_hit_with_hit_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateHITWithHITTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateQualificationTypeOutput,
    crate::error::CreateQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateQualificationTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateQualificationTypeOutput,
    crate::error::CreateQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_qualification_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_qualification_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateQualificationTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_worker_block_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateWorkerBlockOutput, crate::error::CreateWorkerBlockError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateWorkerBlockError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateWorkerBlockError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::CreateWorkerBlockError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateWorkerBlockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::CreateWorkerBlockError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateWorkerBlockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateWorkerBlockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_worker_block_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateWorkerBlockOutput, crate::error::CreateWorkerBlockError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_worker_block_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHitOutput, crate::error::DeleteHITError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteHITError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::DeleteHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::DeleteHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHitOutput, crate::error::DeleteHITError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_hit_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteQualificationTypeOutput,
    crate::error::DeleteQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteQualificationTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::DeleteQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::DeleteQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteQualificationTypeOutput,
    crate::error::DeleteQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_qualification_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_worker_block_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteWorkerBlockOutput, crate::error::DeleteWorkerBlockError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteWorkerBlockError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteWorkerBlockError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::DeleteWorkerBlockError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteWorkerBlockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::DeleteWorkerBlockError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteWorkerBlockError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteWorkerBlockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_worker_block_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteWorkerBlockOutput, crate::error::DeleteWorkerBlockError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_worker_block_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_qualification_from_worker_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateQualificationFromWorkerOutput,
    crate::error::DisassociateQualificationFromWorkerError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DisassociateQualificationFromWorkerError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DisassociateQualificationFromWorkerError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::DisassociateQualificationFromWorkerError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisassociateQualificationFromWorkerError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::DisassociateQualificationFromWorkerError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DisassociateQualificationFromWorkerError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DisassociateQualificationFromWorkerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_qualification_from_worker_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateQualificationFromWorkerOutput,
    crate::error::DisassociateQualificationFromWorkerError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::disassociate_qualification_from_worker_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_account_balance_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetAccountBalanceOutput, crate::error::GetAccountBalanceError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetAccountBalanceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetAccountBalanceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetAccountBalanceError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetAccountBalanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetAccountBalanceError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetAccountBalanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetAccountBalanceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_account_balance_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetAccountBalanceOutput, crate::error::GetAccountBalanceError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_account_balance_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_account_balance(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetAccountBalanceError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_assignment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetAssignmentOutput, crate::error::GetAssignmentError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetAssignmentError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetAssignmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetAssignmentError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetAssignmentError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetAssignmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_assignment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetAssignmentOutput, crate::error::GetAssignmentError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_assignment_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_assignment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetAssignmentError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_file_upload_url_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetFileUploadUrlOutput, crate::error::GetFileUploadURLError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetFileUploadURLError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetFileUploadURLError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetFileUploadURLError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetFileUploadURLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetFileUploadURLError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetFileUploadURLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetFileUploadURLError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_file_upload_url_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetFileUploadUrlOutput, crate::error::GetFileUploadURLError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_file_upload_url_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_file_upload_url(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetFileUploadURLError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetHitOutput, crate::error::GetHITError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetHITError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetHitOutput, crate::error::GetHITError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_hit_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_hit(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetHITError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_qualification_score_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetQualificationScoreOutput,
    crate::error::GetQualificationScoreError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetQualificationScoreError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetQualificationScoreError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetQualificationScoreError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetQualificationScoreError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetQualificationScoreError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetQualificationScoreError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetQualificationScoreError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_qualification_score_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetQualificationScoreOutput,
    crate::error::GetQualificationScoreError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_qualification_score_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_qualification_score(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetQualificationScoreError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetQualificationTypeOutput,
    crate::error::GetQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetQualificationTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::GetQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::GetQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetQualificationTypeOutput,
    crate::error::GetQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_qualification_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_qualification_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetQualificationTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_assignments_for_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAssignmentsForHitOutput,
    crate::error::ListAssignmentsForHITError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListAssignmentsForHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListAssignmentsForHITError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListAssignmentsForHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListAssignmentsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListAssignmentsForHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListAssignmentsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListAssignmentsForHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_assignments_for_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAssignmentsForHitOutput,
    crate::error::ListAssignmentsForHITError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_assignments_for_hit_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_assignments_for_hit(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListAssignmentsForHITError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_bonus_payments_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListBonusPaymentsOutput, crate::error::ListBonusPaymentsError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListBonusPaymentsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListBonusPaymentsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListBonusPaymentsError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListBonusPaymentsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListBonusPaymentsError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListBonusPaymentsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListBonusPaymentsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_bonus_payments_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListBonusPaymentsOutput, crate::error::ListBonusPaymentsError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_bonus_payments_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_bonus_payments(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListBonusPaymentsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hi_ts_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHiTsOutput, crate::error::ListHITsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListHITsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListHITsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListHITsError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHITsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListHITsError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHITsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListHITsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hi_ts_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHiTsOutput, crate::error::ListHITsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_hi_ts_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_hi_ts(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListHITsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hi_ts_for_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListHiTsForQualificationTypeOutput,
    crate::error::ListHITsForQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListHITsForQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListHITsForQualificationTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListHITsForQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHITsForQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListHITsForQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHITsForQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListHITsForQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hi_ts_for_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListHiTsForQualificationTypeOutput,
    crate::error::ListHITsForQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_hi_ts_for_qualification_type_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_list_hi_ts_for_qualification_type(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::ListHITsForQualificationTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_qualification_requests_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListQualificationRequestsOutput,
    crate::error::ListQualificationRequestsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListQualificationRequestsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListQualificationRequestsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListQualificationRequestsError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListQualificationRequestsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListQualificationRequestsError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListQualificationRequestsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListQualificationRequestsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_qualification_requests_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListQualificationRequestsOutput,
    crate::error::ListQualificationRequestsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_qualification_requests_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_qualification_requests(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListQualificationRequestsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_qualification_types_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListQualificationTypesOutput,
    crate::error::ListQualificationTypesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListQualificationTypesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListQualificationTypesError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListQualificationTypesError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListQualificationTypesError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListQualificationTypesError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListQualificationTypesError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListQualificationTypesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_qualification_types_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListQualificationTypesOutput,
    crate::error::ListQualificationTypesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_qualification_types_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_qualification_types(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListQualificationTypesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_reviewable_hi_ts_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListReviewableHiTsOutput,
    crate::error::ListReviewableHITsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListReviewableHITsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListReviewableHITsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListReviewableHITsError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReviewableHITsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListReviewableHITsError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReviewableHITsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListReviewableHITsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_reviewable_hi_ts_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListReviewableHiTsOutput,
    crate::error::ListReviewableHITsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_reviewable_hi_ts_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_reviewable_hi_ts(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListReviewableHITsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_review_policy_results_for_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListReviewPolicyResultsForHitOutput,
    crate::error::ListReviewPolicyResultsForHITError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListReviewPolicyResultsForHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListReviewPolicyResultsForHITError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListReviewPolicyResultsForHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReviewPolicyResultsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListReviewPolicyResultsForHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReviewPolicyResultsForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListReviewPolicyResultsForHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_review_policy_results_for_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListReviewPolicyResultsForHitOutput,
    crate::error::ListReviewPolicyResultsForHITError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_review_policy_results_for_hit_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_list_review_policy_results_for_hit(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::ListReviewPolicyResultsForHITError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_worker_blocks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkerBlocksOutput, crate::error::ListWorkerBlocksError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListWorkerBlocksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListWorkerBlocksError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListWorkerBlocksError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListWorkerBlocksError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListWorkerBlocksError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListWorkerBlocksError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListWorkerBlocksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_worker_blocks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkerBlocksOutput, crate::error::ListWorkerBlocksError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_worker_blocks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_worker_blocks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListWorkerBlocksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workers_with_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListWorkersWithQualificationTypeOutput,
    crate::error::ListWorkersWithQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListWorkersWithQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListWorkersWithQualificationTypeError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::ListWorkersWithQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListWorkersWithQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::ListWorkersWithQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListWorkersWithQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListWorkersWithQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workers_with_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListWorkersWithQualificationTypeOutput,
    crate::error::ListWorkersWithQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_workers_with_qualification_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_workers_with_qualification_type(response.body().as_ref(), output).map_err(crate::error::ListWorkersWithQualificationTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_notify_workers_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::NotifyWorkersOutput, crate::error::NotifyWorkersError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::NotifyWorkersError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::NotifyWorkersError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::NotifyWorkersError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::NotifyWorkersError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::NotifyWorkersError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::NotifyWorkersError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::NotifyWorkersError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_notify_workers_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::NotifyWorkersOutput, crate::error::NotifyWorkersError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::notify_workers_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_notify_workers(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::NotifyWorkersError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_assignment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RejectAssignmentOutput, crate::error::RejectAssignmentError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RejectAssignmentError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RejectAssignmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::RejectAssignmentError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::RejectAssignmentError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectAssignmentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::RejectAssignmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_assignment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RejectAssignmentOutput, crate::error::RejectAssignmentError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::reject_assignment_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_qualification_request_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectQualificationRequestOutput,
    crate::error::RejectQualificationRequestError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RejectQualificationRequestError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RejectQualificationRequestError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::RejectQualificationRequestError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectQualificationRequestError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::RejectQualificationRequestError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectQualificationRequestError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::RejectQualificationRequestError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_qualification_request_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectQualificationRequestOutput,
    crate::error::RejectQualificationRequestError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::reject_qualification_request_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_bonus_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendBonusOutput, crate::error::SendBonusError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::SendBonusError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SendBonusError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::SendBonusError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SendBonusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::SendBonusError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SendBonusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::SendBonusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_bonus_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendBonusOutput, crate::error::SendBonusError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::send_bonus_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_test_event_notification_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendTestEventNotificationOutput,
    crate::error::SendTestEventNotificationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::SendTestEventNotificationError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SendTestEventNotificationError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::SendTestEventNotificationError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SendTestEventNotificationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::SendTestEventNotificationError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SendTestEventNotificationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::SendTestEventNotificationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_test_event_notification_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendTestEventNotificationOutput,
    crate::error::SendTestEventNotificationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::send_test_event_notification_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_expiration_for_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateExpirationForHitOutput,
    crate::error::UpdateExpirationForHITError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateExpirationForHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateExpirationForHITError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::UpdateExpirationForHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateExpirationForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::UpdateExpirationForHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateExpirationForHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateExpirationForHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_expiration_for_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateExpirationForHitOutput,
    crate::error::UpdateExpirationForHITError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_expiration_for_hit_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_hit_review_status_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateHitReviewStatusOutput,
    crate::error::UpdateHITReviewStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateHITReviewStatusError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateHITReviewStatusError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::UpdateHITReviewStatusError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateHITReviewStatusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::UpdateHITReviewStatusError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateHITReviewStatusError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateHITReviewStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_hit_review_status_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateHitReviewStatusOutput,
    crate::error::UpdateHITReviewStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_hit_review_status_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_hit_type_of_hit_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateHitTypeOfHitOutput,
    crate::error::UpdateHITTypeOfHITError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateHITTypeOfHITError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateHITTypeOfHITError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::UpdateHITTypeOfHITError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateHITTypeOfHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::UpdateHITTypeOfHITError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateHITTypeOfHITError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateHITTypeOfHITError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_hit_type_of_hit_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateHitTypeOfHitOutput,
    crate::error::UpdateHITTypeOfHITError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_hit_type_of_hit_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_notification_settings_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateNotificationSettingsOutput,
    crate::error::UpdateNotificationSettingsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateNotificationSettingsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateNotificationSettingsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::UpdateNotificationSettingsError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateNotificationSettingsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::UpdateNotificationSettingsError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateNotificationSettingsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateNotificationSettingsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_notification_settings_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateNotificationSettingsOutput,
    crate::error::UpdateNotificationSettingsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_notification_settings_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_qualification_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateQualificationTypeOutput,
    crate::error::UpdateQualificationTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateQualificationTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateQualificationTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "RequestError" => crate::error::UpdateQualificationTypeError::RequestError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_request_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceFault" => crate::error::UpdateQualificationTypeError::ServiceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::service_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_service_fault_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateQualificationTypeError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateQualificationTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_qualification_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateQualificationTypeOutput,
    crate::error::UpdateQualificationTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_qualification_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_update_qualification_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateQualificationTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
