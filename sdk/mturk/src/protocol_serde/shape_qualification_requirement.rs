// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_qualification_requirement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::QualificationRequirement,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.qualification_type_id {
        object.key("QualificationTypeId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.comparator {
        object.key("Comparator").string(var_2.as_str());
    }
    if let Some(var_3) = &input.integer_values {
        let mut array_4 = object.key("IntegerValues").start_array();
        for item_5 in var_3 {
            {
                array_4.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_5).into()),
                );
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.locale_values {
        let mut array_7 = object.key("LocaleValues").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_locale::ser_locale(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.required_to_preview {
        object.key("RequiredToPreview").boolean(*var_10);
    }
    if let Some(var_11) = &input.actions_guarded {
        object.key("ActionsGuarded").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_qualification_requirement<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::QualificationRequirement>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::QualificationRequirementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "QualificationTypeId" => {
                                builder = builder.set_qualification_type_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Comparator" => {
                                builder = builder.set_comparator(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Comparator::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "IntegerValues" => {
                                builder = builder.set_integer_values(
                                    crate::protocol_serde::shape_integer_list::de_integer_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "LocaleValues" => {
                                builder = builder.set_locale_values(
                                    crate::protocol_serde::shape_locale_list::de_locale_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "RequiredToPreview" => {
                                builder = builder.set_required_to_preview(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ActionsGuarded" => {
                                builder = builder.set_actions_guarded(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::HitAccessActions::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
