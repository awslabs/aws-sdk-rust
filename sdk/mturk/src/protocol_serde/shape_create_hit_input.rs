// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_hit_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_hit::CreateHitInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.max_assignments {
        object.key("MaxAssignments").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.auto_approval_delay_in_seconds {
        object.key("AutoApprovalDelayInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.lifetime_in_seconds {
        object.key("LifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.assignment_duration_in_seconds {
        object.key("AssignmentDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.reward {
        object.key("Reward").string(var_5.as_str());
    }
    if let Some(var_6) = &input.title {
        object.key("Title").string(var_6.as_str());
    }
    if let Some(var_7) = &input.keywords {
        object.key("Keywords").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("Description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.question {
        object.key("Question").string(var_9.as_str());
    }
    if let Some(var_10) = &input.requester_annotation {
        object.key("RequesterAnnotation").string(var_10.as_str());
    }
    if let Some(var_11) = &input.qualification_requirements {
        let mut array_12 = object.key("QualificationRequirements").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_qualification_requirement::ser_qualification_requirement(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.unique_request_token {
        object.key("UniqueRequestToken").string(var_15.as_str());
    }
    if let Some(var_16) = &input.assignment_review_policy {
        #[allow(unused_mut)]
        let mut object_17 = object.key("AssignmentReviewPolicy").start_object();
        crate::protocol_serde::shape_review_policy::ser_review_policy(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.hit_review_policy {
        #[allow(unused_mut)]
        let mut object_19 = object.key("HITReviewPolicy").start_object();
        crate::protocol_serde::shape_review_policy::ser_review_policy(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.hit_layout_id {
        object.key("HITLayoutId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.hit_layout_parameters {
        let mut array_22 = object.key("HITLayoutParameters").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_hit_layout_parameter::ser_hit_layout_parameter(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}
