// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_hit_with_hit_type_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.hit_type_id {
        object.key("HITTypeId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.max_assignments {
        object.key("MaxAssignments").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.lifetime_in_seconds {
        object.key("LifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.question {
        object.key("Question").string(var_4.as_str());
    }
    if let Some(var_5) = &input.requester_annotation {
        object.key("RequesterAnnotation").string(var_5.as_str());
    }
    if let Some(var_6) = &input.unique_request_token {
        object.key("UniqueRequestToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.assignment_review_policy {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AssignmentReviewPolicy").start_object();
        crate::protocol_serde::shape_review_policy::ser_review_policy(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.hit_review_policy {
        #[allow(unused_mut)]
        let mut object_10 = object.key("HITReviewPolicy").start_object();
        crate::protocol_serde::shape_review_policy::ser_review_policy(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.hit_layout_id {
        object.key("HITLayoutId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.hit_layout_parameters {
        let mut array_13 = object.key("HITLayoutParameters").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_hit_layout_parameter::ser_hit_layout_parameter(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
