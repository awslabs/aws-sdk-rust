// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_file_upload_url::_get_file_upload_url_output::GetFileUploadUrlOutputBuilder;

pub use crate::operation::get_file_upload_url::_get_file_upload_url_input::GetFileUploadUrlInputBuilder;

/// Fluent builder constructing a request to `GetFileUploadURL`.
///
/// <p> The <code>GetFileUploadURL</code> operation generates and returns a temporary URL. You use the temporary URL to retrieve a file uploaded by a Worker as an answer to a FileUploadAnswer question for a HIT. The temporary URL is generated the instant the GetFileUploadURL operation is called, and is valid for 60 seconds. You can get a temporary file upload URL any time until the HIT is disposed. After the HIT is disposed, any uploaded files are deleted, and cannot be retrieved. Pending Deprecation on December 12, 2017. The Answer Specification structure will no longer support the <code>FileUploadAnswer</code> element to be used for the QuestionForm data structure. Instead, we recommend that Requesters who want to create HITs asking Workers to upload files to use Amazon S3. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetFileUploadURLFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_file_upload_url::builders::GetFileUploadUrlInputBuilder,
}
impl GetFileUploadURLFluentBuilder {
    /// Creates a new `GetFileUploadURL`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_file_upload_url::GetFileUploadURL,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_file_upload_url::GetFileUploadURLError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_file_upload_url::GetFileUploadUrlOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_file_upload_url::GetFileUploadURLError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the assignment that contains the question with a FileUploadAnswer.</p>
    pub fn assignment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.assignment_id(input.into());
        self
    }
    /// <p>The ID of the assignment that contains the question with a FileUploadAnswer.</p>
    pub fn set_assignment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_assignment_id(input);
        self
    }
    /// <p>The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.</p>
    pub fn question_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_identifier(input.into());
        self
    }
    /// <p>The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.</p>
    pub fn set_question_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_question_identifier(input);
        self
    }
}
