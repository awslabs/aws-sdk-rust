// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_worker_block::_delete_worker_block_output::DeleteWorkerBlockOutputBuilder;

pub use crate::operation::delete_worker_block::_delete_worker_block_input::DeleteWorkerBlockInputBuilder;

impl DeleteWorkerBlockInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_worker_block::DeleteWorkerBlockOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_worker_block::DeleteWorkerBlockError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_worker_block();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteWorkerBlock`.
///
/// <p>The <code>DeleteWorkerBlock</code> operation allows you to reinstate a blocked Worker to work on your HITs. This operation reverses the effects of the CreateWorkerBlock operation. You need the Worker ID to use this operation. If the Worker ID is missing or invalid, this operation fails and returns the message “WorkerId is invalid.” If the specified Worker is not blocked, this operation returns successfully.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteWorkerBlockFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_worker_block::builders::DeleteWorkerBlockInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_worker_block::DeleteWorkerBlockOutput,
        crate::operation::delete_worker_block::DeleteWorkerBlockError,
    > for DeleteWorkerBlockFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_worker_block::DeleteWorkerBlockOutput,
            crate::operation::delete_worker_block::DeleteWorkerBlockError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteWorkerBlockFluentBuilder {
    /// Creates a new `DeleteWorkerBlock`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteWorkerBlock as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_worker_block::builders::DeleteWorkerBlockInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_worker_block::DeleteWorkerBlockOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_worker_block::DeleteWorkerBlockError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_worker_block::DeleteWorkerBlock::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_worker_block::DeleteWorkerBlock::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_worker_block::DeleteWorkerBlockOutput,
        crate::operation::delete_worker_block::DeleteWorkerBlockError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Worker to unblock.</p>
    pub fn worker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.worker_id(input.into());
        self
    }
    /// <p>The ID of the Worker to unblock.</p>
    pub fn set_worker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_worker_id(input);
        self
    }
    /// <p>The ID of the Worker to unblock.</p>
    pub fn get_worker_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_worker_id()
    }
    /// <p>A message that explains the reason for unblocking the Worker. The Worker does not see this message.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>A message that explains the reason for unblocking the Worker. The Worker does not see this message.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
    /// <p>A message that explains the reason for unblocking the Worker. The Worker does not see this message.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_reason()
    }
}
