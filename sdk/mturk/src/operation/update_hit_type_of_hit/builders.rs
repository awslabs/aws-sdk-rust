// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_hit_type_of_hit::_update_hit_type_of_hit_output::UpdateHitTypeOfHitOutputBuilder;

pub use crate::operation::update_hit_type_of_hit::_update_hit_type_of_hit_input::UpdateHitTypeOfHitInputBuilder;

/// Fluent builder constructing a request to `UpdateHITTypeOfHIT`.
///
/// <p> The <code>UpdateHITTypeOfHIT</code> operation allows you to change the HITType properties of a HIT. This operation disassociates the HIT from its old HITType properties and associates it with the new HITType properties. The HIT takes on the properties of the new HITType in place of the old ones. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateHITTypeOfHITFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_hit_type_of_hit::builders::UpdateHitTypeOfHitInputBuilder,
}
impl UpdateHITTypeOfHITFluentBuilder {
    /// Creates a new `UpdateHITTypeOfHIT`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHIT,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_hit_type_of_hit::UpdateHitTypeOfHitOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_hit_type_of_hit::UpdateHITTypeOfHITError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The HIT to update.</p>
    pub fn hit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hit_id(input.into());
        self
    }
    /// <p>The HIT to update.</p>
    pub fn set_hit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hit_id(input);
        self
    }
    /// <p>The ID of the new HIT type.</p>
    pub fn hit_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hit_type_id(input.into());
        self
    }
    /// <p>The ID of the new HIT type.</p>
    pub fn set_hit_type_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hit_type_id(input);
        self
    }
}
