// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReviewableHiTsInput {
    /// <p> The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered </p>
    pub hit_type_id: ::std::option::Option<::std::string::String>,
    /// <p> Can be either <code>Reviewable</code> or <code>Reviewing</code>. Reviewable is the default value. </p>
    pub status: ::std::option::Option<crate::types::ReviewableHitStatus>,
    /// <p>Pagination Token</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> Limit the number of results returned. </p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListReviewableHiTsInput {
    /// <p> The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered </p>
    pub fn hit_type_id(&self) -> ::std::option::Option<&str> {
        self.hit_type_id.as_deref()
    }
    /// <p> Can be either <code>Reviewable</code> or <code>Reviewing</code>. Reviewable is the default value. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ReviewableHitStatus> {
        self.status.as_ref()
    }
    /// <p>Pagination Token</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Limit the number of results returned. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListReviewableHiTsInput {
    /// Creates a new builder-style object to manufacture [`ListReviewableHiTsInput`](crate::operation::list_reviewable_hits::ListReviewableHiTsInput).
    pub fn builder() -> crate::operation::list_reviewable_hits::builders::ListReviewableHiTsInputBuilder {
        crate::operation::list_reviewable_hits::builders::ListReviewableHiTsInputBuilder::default()
    }
}

/// A builder for [`ListReviewableHiTsInput`](crate::operation::list_reviewable_hits::ListReviewableHiTsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListReviewableHiTsInputBuilder {
    pub(crate) hit_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ReviewableHitStatus>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListReviewableHiTsInputBuilder {
    /// <p> The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered </p>
    pub fn hit_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hit_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered </p>
    pub fn set_hit_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hit_type_id = input;
        self
    }
    /// <p> The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered </p>
    pub fn get_hit_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hit_type_id
    }
    /// <p> Can be either <code>Reviewable</code> or <code>Reviewing</code>. Reviewable is the default value. </p>
    pub fn status(mut self, input: crate::types::ReviewableHitStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Can be either <code>Reviewable</code> or <code>Reviewing</code>. Reviewable is the default value. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReviewableHitStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> Can be either <code>Reviewable</code> or <code>Reviewing</code>. Reviewable is the default value. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReviewableHitStatus> {
        &self.status
    }
    /// <p>Pagination Token</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination Token</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination Token</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p> Limit the number of results returned. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p> Limit the number of results returned. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> Limit the number of results returned. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListReviewableHiTsInput`](crate::operation::list_reviewable_hits::ListReviewableHiTsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_reviewable_hits::ListReviewableHiTsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_reviewable_hits::ListReviewableHiTsInput {
            hit_type_id: self.hit_type_id,
            status: self.status,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
