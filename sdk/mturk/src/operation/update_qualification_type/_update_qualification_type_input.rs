// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateQualificationTypeInput {
    /// <p>The ID of the Qualification type to update.</p>
    pub qualification_type_id: ::std::option::Option<::std::string::String>,
    /// <p>The new description of the Qualification type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub qualification_type_status: ::std::option::Option<crate::types::QualificationTypeStatus>,
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub test: ::std::option::Option<::std::string::String>,
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub answer_key: ::std::option::Option<::std::string::String>,
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub test_duration_in_seconds: ::std::option::Option<i64>,
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub retry_delay_in_seconds: ::std::option::Option<i64>,
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub auto_granted: ::std::option::Option<bool>,
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub auto_granted_value: ::std::option::Option<i32>,
}
impl UpdateQualificationTypeInput {
    /// <p>The ID of the Qualification type to update.</p>
    pub fn qualification_type_id(&self) -> ::std::option::Option<&str> {
        self.qualification_type_id.as_deref()
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn qualification_type_status(&self) -> ::std::option::Option<&crate::types::QualificationTypeStatus> {
        self.qualification_type_status.as_ref()
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn test(&self) -> ::std::option::Option<&str> {
        self.test.as_deref()
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn answer_key(&self) -> ::std::option::Option<&str> {
        self.answer_key.as_deref()
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn test_duration_in_seconds(&self) -> ::std::option::Option<i64> {
        self.test_duration_in_seconds
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn retry_delay_in_seconds(&self) -> ::std::option::Option<i64> {
        self.retry_delay_in_seconds
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn auto_granted(&self) -> ::std::option::Option<bool> {
        self.auto_granted
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn auto_granted_value(&self) -> ::std::option::Option<i32> {
        self.auto_granted_value
    }
}
impl UpdateQualificationTypeInput {
    /// Creates a new builder-style object to manufacture [`UpdateQualificationTypeInput`](crate::operation::update_qualification_type::UpdateQualificationTypeInput).
    pub fn builder() -> crate::operation::update_qualification_type::builders::UpdateQualificationTypeInputBuilder {
        crate::operation::update_qualification_type::builders::UpdateQualificationTypeInputBuilder::default()
    }
}

/// A builder for [`UpdateQualificationTypeInput`](crate::operation::update_qualification_type::UpdateQualificationTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateQualificationTypeInputBuilder {
    pub(crate) qualification_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) qualification_type_status: ::std::option::Option<crate::types::QualificationTypeStatus>,
    pub(crate) test: ::std::option::Option<::std::string::String>,
    pub(crate) answer_key: ::std::option::Option<::std::string::String>,
    pub(crate) test_duration_in_seconds: ::std::option::Option<i64>,
    pub(crate) retry_delay_in_seconds: ::std::option::Option<i64>,
    pub(crate) auto_granted: ::std::option::Option<bool>,
    pub(crate) auto_granted_value: ::std::option::Option<i32>,
}
impl UpdateQualificationTypeInputBuilder {
    /// <p>The ID of the Qualification type to update.</p>
    /// This field is required.
    pub fn qualification_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.qualification_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Qualification type to update.</p>
    pub fn set_qualification_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.qualification_type_id = input;
        self
    }
    /// <p>The ID of the Qualification type to update.</p>
    pub fn get_qualification_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.qualification_type_id
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn qualification_type_status(mut self, input: crate::types::QualificationTypeStatus) -> Self {
        self.qualification_type_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn set_qualification_type_status(mut self, input: ::std::option::Option<crate::types::QualificationTypeStatus>) -> Self {
        self.qualification_type_status = input;
        self
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn get_qualification_type_status(&self) -> &::std::option::Option<crate::types::QualificationTypeStatus> {
        &self.qualification_type_status
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn test(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn set_test(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test = input;
        self
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn get_test(&self) -> &::std::option::Option<::std::string::String> {
        &self.test
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn answer_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.answer_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn set_answer_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.answer_key = input;
        self
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn get_answer_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.answer_key
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn test_duration_in_seconds(mut self, input: i64) -> Self {
        self.test_duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn set_test_duration_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.test_duration_in_seconds = input;
        self
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn get_test_duration_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.test_duration_in_seconds
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn retry_delay_in_seconds(mut self, input: i64) -> Self {
        self.retry_delay_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn set_retry_delay_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.retry_delay_in_seconds = input;
        self
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn get_retry_delay_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.retry_delay_in_seconds
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn auto_granted(mut self, input: bool) -> Self {
        self.auto_granted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn set_auto_granted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_granted = input;
        self
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn get_auto_granted(&self) -> &::std::option::Option<bool> {
        &self.auto_granted
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn auto_granted_value(mut self, input: i32) -> Self {
        self.auto_granted_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn set_auto_granted_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.auto_granted_value = input;
        self
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn get_auto_granted_value(&self) -> &::std::option::Option<i32> {
        &self.auto_granted_value
    }
    /// Consumes the builder and constructs a [`UpdateQualificationTypeInput`](crate::operation::update_qualification_type::UpdateQualificationTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_qualification_type::UpdateQualificationTypeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_qualification_type::UpdateQualificationTypeInput {
            qualification_type_id: self.qualification_type_id,
            description: self.description,
            qualification_type_status: self.qualification_type_status,
            test: self.test,
            answer_key: self.answer_key,
            test_duration_in_seconds: self.test_duration_in_seconds,
            retry_delay_in_seconds: self.retry_delay_in_seconds,
            auto_granted: self.auto_granted,
            auto_granted_value: self.auto_granted_value,
        })
    }
}
