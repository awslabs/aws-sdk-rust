// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_qualification_type::_update_qualification_type_output::UpdateQualificationTypeOutputBuilder;

pub use crate::operation::update_qualification_type::_update_qualification_type_input::UpdateQualificationTypeInputBuilder;

/// Fluent builder constructing a request to `UpdateQualificationType`.
///
/// <p> The <code>UpdateQualificationType</code> operation modifies the attributes of an existing Qualification type, which is represented by a QualificationType data structure. Only the owner of a Qualification type can modify its attributes. </p>
/// <p> Most attributes of a Qualification type can be changed after the type has been created. However, the Name and Keywords fields cannot be modified. The RetryDelayInSeconds parameter can be modified or added to change the delay or to enable retries, but RetryDelayInSeconds cannot be used to disable retries. </p>
/// <p> You can use this operation to update the test for a Qualification type. The test is updated based on the values specified for the Test, TestDurationInSeconds and AnswerKey parameters. All three parameters specify the updated test. If you are updating the test for a type, you must specify the Test and TestDurationInSeconds parameters. The AnswerKey parameter is optional; omitting it specifies that the updated test does not have an answer key. </p>
/// <p> If you omit the Test parameter, the test for the Qualification type is unchanged. There is no way to remove a test from a Qualification type that has one. If the type already has a test, you cannot update it to be AutoGranted. If the Qualification type does not have a test and one is provided by an update, the type will henceforth have a test. </p>
/// <p> If you want to update the test duration or answer key for an existing test without changing the questions, you must specify a Test parameter with the original questions, along with the updated values. </p>
/// <p> If you provide an updated Test but no AnswerKey, the new test will not have an answer key. Requests for such Qualifications must be granted manually. </p>
/// <p> You can also update the AutoGranted and AutoGrantedValue attributes of the Qualification type.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateQualificationTypeFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::update_qualification_type::builders::UpdateQualificationTypeInputBuilder,
}
impl UpdateQualificationTypeFluentBuilder {
    /// Creates a new `UpdateQualificationType`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_qualification_type::UpdateQualificationType,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_qualification_type::UpdateQualificationTypeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_qualification_type::UpdateQualificationTypeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_qualification_type::UpdateQualificationTypeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Qualification type to update.</p>
    pub fn qualification_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.qualification_type_id(input.into());
        self
    }
    /// <p>The ID of the Qualification type to update.</p>
    pub fn set_qualification_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_qualification_type_id(input);
        self
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The new description of the Qualification type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn qualification_type_status(
        mut self,
        input: crate::types::QualificationTypeStatus,
    ) -> Self {
        self.inner = self.inner.qualification_type_status(input);
        self
    }
    /// <p>The new status of the Qualification type - Active | Inactive</p>
    pub fn set_qualification_type_status(
        mut self,
        input: std::option::Option<crate::types::QualificationTypeStatus>,
    ) -> Self {
        self.inner = self.inner.set_qualification_type_status(input);
        self
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn test(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.test(input.into());
        self
    }
    /// <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
    /// <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
    /// <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
    pub fn set_test(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_test(input);
        self
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn answer_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.answer_key(input.into());
        self
    }
    /// <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
    pub fn set_answer_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_answer_key(input);
        self
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn test_duration_in_seconds(mut self, input: i64) -> Self {
        self.inner = self.inner.test_duration_in_seconds(input);
        self
    }
    /// <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
    pub fn set_test_duration_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_test_duration_in_seconds(input);
        self
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn retry_delay_in_seconds(mut self, input: i64) -> Self {
        self.inner = self.inner.retry_delay_in_seconds(input);
        self
    }
    /// <p>The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.</p>
    pub fn set_retry_delay_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_retry_delay_in_seconds(input);
        self
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn auto_granted(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_granted(input);
        self
    }
    /// <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
    /// <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
    pub fn set_auto_granted(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_granted(input);
        self
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn auto_granted_value(mut self, input: i32) -> Self {
        self.inner = self.inner.auto_granted_value(input);
        self
    }
    /// <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
    pub fn set_auto_granted_value(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_auto_granted_value(input);
        self
    }
}
