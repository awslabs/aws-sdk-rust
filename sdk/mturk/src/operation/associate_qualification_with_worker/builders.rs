// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_qualification_with_worker::_associate_qualification_with_worker_output::AssociateQualificationWithWorkerOutputBuilder;

pub use crate::operation::associate_qualification_with_worker::_associate_qualification_with_worker_input::AssociateQualificationWithWorkerInputBuilder;

/// Fluent builder constructing a request to `AssociateQualificationWithWorker`.
///
/// <p> The <code>AssociateQualificationWithWorker</code> operation gives a Worker a Qualification. <code>AssociateQualificationWithWorker</code> does not require that the Worker submit a Qualification request. It gives the Qualification directly to the Worker. </p>
/// <p> You can only assign a Qualification of a Qualification type that you created (using the <code>CreateQualificationType</code> operation). </p> <note>
/// <p> Note: <code>AssociateQualificationWithWorker</code> does not affect any pending Qualification requests for the Qualification by the Worker. If you assign a Qualification to a Worker, then later grant a Qualification request made by the Worker, the granting of the request may modify the Qualification score. To resolve a pending Qualification request without affecting the Qualification the Worker already has, reject the request with the <code>RejectQualificationRequest</code> operation. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateQualificationWithWorkerFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::associate_qualification_with_worker::builders::AssociateQualificationWithWorkerInputBuilder
            }
impl AssociateQualificationWithWorkerFluentBuilder {
    /// Creates a new `AssociateQualificationWithWorker`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorker, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerOutput, aws_smithy_http::result::SdkError<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    pub fn qualification_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.qualification_type_id(input.into());
        self
    }
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    pub fn set_qualification_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_qualification_type_id(input);
        self
    }
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    pub fn worker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.worker_id(input.into());
        self
    }
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    pub fn set_worker_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_worker_id(input);
        self
    }
    /// <p>The value of the Qualification to assign.</p>
    pub fn integer_value(mut self, input: i32) -> Self {
        self.inner = self.inner.integer_value(input);
        self
    }
    /// <p>The value of the Qualification to assign.</p>
    pub fn set_integer_value(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_integer_value(input);
        self
    }
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    pub fn send_notification(mut self, input: bool) -> Self {
        self.inner = self.inner.send_notification(input);
        self
    }
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    pub fn set_send_notification(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_send_notification(input);
        self
    }
}
