// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateQualificationWithWorkerInput {
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    #[doc(hidden)]
    pub qualification_type_id: std::option::Option<std::string::String>,
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    #[doc(hidden)]
    pub worker_id: std::option::Option<std::string::String>,
    /// <p>The value of the Qualification to assign.</p>
    #[doc(hidden)]
    pub integer_value: std::option::Option<i32>,
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    #[doc(hidden)]
    pub send_notification: std::option::Option<bool>,
}
impl AssociateQualificationWithWorkerInput {
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    pub fn qualification_type_id(&self) -> std::option::Option<&str> {
        self.qualification_type_id.as_deref()
    }
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    pub fn worker_id(&self) -> std::option::Option<&str> {
        self.worker_id.as_deref()
    }
    /// <p>The value of the Qualification to assign.</p>
    pub fn integer_value(&self) -> std::option::Option<i32> {
        self.integer_value
    }
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    pub fn send_notification(&self) -> std::option::Option<bool> {
        self.send_notification
    }
}
impl AssociateQualificationWithWorkerInput {
    /// Creates a new builder-style object to manufacture [`AssociateQualificationWithWorkerInput`](crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerInput).
    pub fn builder() -> crate::operation::associate_qualification_with_worker::builders::AssociateQualificationWithWorkerInputBuilder{
        crate::operation::associate_qualification_with_worker::builders::AssociateQualificationWithWorkerInputBuilder::default()
    }
}

/// A builder for [`AssociateQualificationWithWorkerInput`](crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateQualificationWithWorkerInputBuilder {
    pub(crate) qualification_type_id: std::option::Option<std::string::String>,
    pub(crate) worker_id: std::option::Option<std::string::String>,
    pub(crate) integer_value: std::option::Option<i32>,
    pub(crate) send_notification: std::option::Option<bool>,
}
impl AssociateQualificationWithWorkerInputBuilder {
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    pub fn qualification_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.qualification_type_id = Some(input.into());
        self
    }
    /// <p>The ID of the Qualification type to use for the assigned Qualification.</p>
    pub fn set_qualification_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.qualification_type_id = input;
        self
    }
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    pub fn worker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.worker_id = Some(input.into());
        self
    }
    /// <p> The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. </p>
    pub fn set_worker_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p>The value of the Qualification to assign.</p>
    pub fn integer_value(mut self, input: i32) -> Self {
        self.integer_value = Some(input);
        self
    }
    /// <p>The value of the Qualification to assign.</p>
    pub fn set_integer_value(mut self, input: std::option::Option<i32>) -> Self {
        self.integer_value = input;
        self
    }
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    pub fn send_notification(mut self, input: bool) -> Self {
        self.send_notification = Some(input);
        self
    }
    /// <p> Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. </p>
    pub fn set_send_notification(mut self, input: std::option::Option<bool>) -> Self {
        self.send_notification = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateQualificationWithWorkerInput`](crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerInput).
    pub fn build(self) -> Result<crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::associate_qualification_with_worker::AssociateQualificationWithWorkerInput {
                qualification_type_id: self.qualification_type_id
                ,
                worker_id: self.worker_id
                ,
                integer_value: self.integer_value
                ,
                send_notification: self.send_notification
                ,
            }
        )
    }
}
