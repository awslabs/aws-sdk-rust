// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountBalanceOutput {
    /// <p>A string representing a currency amount.</p>
    #[doc(hidden)]
    pub available_balance: std::option::Option<std::string::String>,
    /// <p>A string representing a currency amount.</p>
    #[doc(hidden)]
    pub on_hold_balance: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAccountBalanceOutput {
    /// <p>A string representing a currency amount.</p>
    pub fn available_balance(&self) -> std::option::Option<&str> {
        self.available_balance.as_deref()
    }
    /// <p>A string representing a currency amount.</p>
    pub fn on_hold_balance(&self) -> std::option::Option<&str> {
        self.on_hold_balance.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetAccountBalanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccountBalanceOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountBalanceOutput`](crate::operation::get_account_balance::GetAccountBalanceOutput).
    pub fn builder(
    ) -> crate::operation::get_account_balance::builders::GetAccountBalanceOutputBuilder {
        crate::operation::get_account_balance::builders::GetAccountBalanceOutputBuilder::default()
    }
}

/// A builder for [`GetAccountBalanceOutput`](crate::operation::get_account_balance::GetAccountBalanceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAccountBalanceOutputBuilder {
    pub(crate) available_balance: std::option::Option<std::string::String>,
    pub(crate) on_hold_balance: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAccountBalanceOutputBuilder {
    /// <p>A string representing a currency amount.</p>
    pub fn available_balance(mut self, input: impl Into<std::string::String>) -> Self {
        self.available_balance = Some(input.into());
        self
    }
    /// <p>A string representing a currency amount.</p>
    pub fn set_available_balance(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.available_balance = input;
        self
    }
    /// <p>A string representing a currency amount.</p>
    pub fn on_hold_balance(mut self, input: impl Into<std::string::String>) -> Self {
        self.on_hold_balance = Some(input.into());
        self
    }
    /// <p>A string representing a currency amount.</p>
    pub fn set_on_hold_balance(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.on_hold_balance = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAccountBalanceOutput`](crate::operation::get_account_balance::GetAccountBalanceOutput).
    pub fn build(self) -> crate::operation::get_account_balance::GetAccountBalanceOutput {
        crate::operation::get_account_balance::GetAccountBalanceOutput {
            available_balance: self.available_balance,
            on_hold_balance: self.on_hold_balance,
            _request_id: self._request_id,
        }
    }
}
