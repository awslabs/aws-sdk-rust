// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListQualificationTypesInput {
    /// <p> A text query against all of the searchable attributes of Qualification types. </p>
    #[doc(hidden)]
    pub query: std::option::Option<std::string::String>,
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. </p>
    #[doc(hidden)]
    pub must_be_requestable: std::option::Option<bool>,
    /// <p> Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. </p>
    #[doc(hidden)]
    pub must_be_owned_by_caller: std::option::Option<bool>,
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The maximum number of results to return in a single call. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListQualificationTypesInput {
    /// <p> A text query against all of the searchable attributes of Qualification types. </p>
    pub fn query(&self) -> std::option::Option<&str> {
        self.query.as_deref()
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. </p>
    pub fn must_be_requestable(&self) -> std::option::Option<bool> {
        self.must_be_requestable
    }
    /// <p> Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. </p>
    pub fn must_be_owned_by_caller(&self) -> std::option::Option<bool> {
        self.must_be_owned_by_caller
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The maximum number of results to return in a single call. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListQualificationTypesInput {
    /// Creates a new builder-style object to manufacture [`ListQualificationTypesInput`](crate::operation::list_qualification_types::ListQualificationTypesInput).
    pub fn builder(
    ) -> crate::operation::list_qualification_types::builders::ListQualificationTypesInputBuilder
    {
        crate::operation::list_qualification_types::builders::ListQualificationTypesInputBuilder::default()
    }
}

/// A builder for [`ListQualificationTypesInput`](crate::operation::list_qualification_types::ListQualificationTypesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListQualificationTypesInputBuilder {
    pub(crate) query: std::option::Option<std::string::String>,
    pub(crate) must_be_requestable: std::option::Option<bool>,
    pub(crate) must_be_owned_by_caller: std::option::Option<bool>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListQualificationTypesInputBuilder {
    /// <p> A text query against all of the searchable attributes of Qualification types. </p>
    pub fn query(mut self, input: impl Into<std::string::String>) -> Self {
        self.query = Some(input.into());
        self
    }
    /// <p> A text query against all of the searchable attributes of Qualification types. </p>
    pub fn set_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query = input;
        self
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. </p>
    pub fn must_be_requestable(mut self, input: bool) -> Self {
        self.must_be_requestable = Some(input);
        self
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. </p>
    pub fn set_must_be_requestable(mut self, input: std::option::Option<bool>) -> Self {
        self.must_be_requestable = input;
        self
    }
    /// <p> Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. </p>
    pub fn must_be_owned_by_caller(mut self, input: bool) -> Self {
        self.must_be_owned_by_caller = Some(input);
        self
    }
    /// <p> Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. </p>
    pub fn set_must_be_owned_by_caller(mut self, input: std::option::Option<bool>) -> Self {
        self.must_be_owned_by_caller = input;
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> The maximum number of results to return in a single call. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> The maximum number of results to return in a single call. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListQualificationTypesInput`](crate::operation::list_qualification_types::ListQualificationTypesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_qualification_types::ListQualificationTypesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_qualification_types::ListQualificationTypesInput {
                query: self.query,
                must_be_requestable: self.must_be_requestable,
                must_be_owned_by_caller: self.must_be_owned_by_caller,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
