// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_qualification_types::_list_qualification_types_output::ListQualificationTypesOutputBuilder;

pub use crate::operation::list_qualification_types::_list_qualification_types_input::ListQualificationTypesInputBuilder;

impl crate::operation::list_qualification_types::builders::ListQualificationTypesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_qualification_types::ListQualificationTypesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_qualification_types::ListQualificationTypesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_qualification_types();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListQualificationTypes`.
///
/// <p>The <code>ListQualificationTypes</code> operation returns a list of Qualification types, filtered by an optional search term.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListQualificationTypesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_qualification_types::builders::ListQualificationTypesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_qualification_types::ListQualificationTypesOutput,
        crate::operation::list_qualification_types::ListQualificationTypesError,
    > for ListQualificationTypesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_qualification_types::ListQualificationTypesOutput,
            crate::operation::list_qualification_types::ListQualificationTypesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListQualificationTypesFluentBuilder {
    /// Creates a new `ListQualificationTypes`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListQualificationTypes as a reference.
    pub fn as_input(&self) -> &crate::operation::list_qualification_types::builders::ListQualificationTypesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_qualification_types::ListQualificationTypesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_qualification_types::ListQualificationTypesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_qualification_types::ListQualificationTypes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_qualification_types::ListQualificationTypes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_qualification_types::ListQualificationTypesOutput,
        crate::operation::list_qualification_types::ListQualificationTypesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_qualification_types::paginator::ListQualificationTypesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_qualification_types::paginator::ListQualificationTypesPaginator {
        crate::operation::list_qualification_types::paginator::ListQualificationTypesPaginator::new(self.handle, self.inner)
    }
    /// <p>A text query against all of the searchable attributes of Qualification types.</p>
    pub fn query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.query(input.into());
        self
    }
    /// <p>A text query against all of the searchable attributes of Qualification types.</p>
    pub fn set_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_query(input);
        self
    }
    /// <p>A text query against all of the searchable attributes of Qualification types.</p>
    pub fn get_query(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_query()
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False.</p>
    pub fn must_be_requestable(mut self, input: bool) -> Self {
        self.inner = self.inner.must_be_requestable(input);
        self
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False.</p>
    pub fn set_must_be_requestable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_must_be_requestable(input);
        self
    }
    /// <p>Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False.</p>
    pub fn get_must_be_requestable(&self) -> &::std::option::Option<bool> {
        self.inner.get_must_be_requestable()
    }
    /// <p>Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types.</p>
    pub fn must_be_owned_by_caller(mut self, input: bool) -> Self {
        self.inner = self.inner.must_be_owned_by_caller(input);
        self
    }
    /// <p>Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types.</p>
    pub fn set_must_be_owned_by_caller(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_must_be_owned_by_caller(input);
        self
    }
    /// <p>Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types.</p>
    pub fn get_must_be_owned_by_caller(&self) -> &::std::option::Option<bool> {
        self.inner.get_must_be_owned_by_caller()
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
