// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAdditionalAssignmentsForHitInput {
    /// <p>The ID of the HIT to extend.</p>
    pub hit_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of additional assignments to request for this HIT.</p>
    pub number_of_additional_assignments: ::std::option::Option<i32>,
    /// <p> A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same <code>UniqueRequestToken</code>, subsequent calls will return an error with a message containing the request ID. </p>
    pub unique_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateAdditionalAssignmentsForHitInput {
    /// <p>The ID of the HIT to extend.</p>
    pub fn hit_id(&self) -> ::std::option::Option<&str> {
        self.hit_id.as_deref()
    }
    /// <p>The number of additional assignments to request for this HIT.</p>
    pub fn number_of_additional_assignments(&self) -> ::std::option::Option<i32> {
        self.number_of_additional_assignments
    }
    /// <p> A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same <code>UniqueRequestToken</code>, subsequent calls will return an error with a message containing the request ID. </p>
    pub fn unique_request_token(&self) -> ::std::option::Option<&str> {
        self.unique_request_token.as_deref()
    }
}
impl CreateAdditionalAssignmentsForHitInput {
    /// Creates a new builder-style object to manufacture [`CreateAdditionalAssignmentsForHitInput`](crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHitInput).
    pub fn builder() -> crate::operation::create_additional_assignments_for_hit::builders::CreateAdditionalAssignmentsForHitInputBuilder {
        crate::operation::create_additional_assignments_for_hit::builders::CreateAdditionalAssignmentsForHitInputBuilder::default()
    }
}

/// A builder for [`CreateAdditionalAssignmentsForHitInput`](crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHitInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateAdditionalAssignmentsForHitInputBuilder {
    pub(crate) hit_id: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_additional_assignments: ::std::option::Option<i32>,
    pub(crate) unique_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateAdditionalAssignmentsForHitInputBuilder {
    /// <p>The ID of the HIT to extend.</p>
    /// This field is required.
    pub fn hit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the HIT to extend.</p>
    pub fn set_hit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hit_id = input;
        self
    }
    /// <p>The ID of the HIT to extend.</p>
    pub fn get_hit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hit_id
    }
    /// <p>The number of additional assignments to request for this HIT.</p>
    /// This field is required.
    pub fn number_of_additional_assignments(mut self, input: i32) -> Self {
        self.number_of_additional_assignments = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of additional assignments to request for this HIT.</p>
    pub fn set_number_of_additional_assignments(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_additional_assignments = input;
        self
    }
    /// <p>The number of additional assignments to request for this HIT.</p>
    pub fn get_number_of_additional_assignments(&self) -> &::std::option::Option<i32> {
        &self.number_of_additional_assignments
    }
    /// <p> A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same <code>UniqueRequestToken</code>, subsequent calls will return an error with a message containing the request ID. </p>
    pub fn unique_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unique_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same <code>UniqueRequestToken</code>, subsequent calls will return an error with a message containing the request ID. </p>
    pub fn set_unique_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unique_request_token = input;
        self
    }
    /// <p> A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same <code>UniqueRequestToken</code>, subsequent calls will return an error with a message containing the request ID. </p>
    pub fn get_unique_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.unique_request_token
    }
    /// Consumes the builder and constructs a [`CreateAdditionalAssignmentsForHitInput`](crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHitInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHitInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_additional_assignments_for_hit::CreateAdditionalAssignmentsForHitInput {
                hit_id: self.hit_id,
                number_of_additional_assignments: self.number_of_additional_assignments,
                unique_request_token: self.unique_request_token,
            },
        )
    }
}
