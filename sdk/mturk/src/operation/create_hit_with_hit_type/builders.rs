// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_hit_with_hit_type::_create_hit_with_hit_type_output::CreateHitWithHitTypeOutputBuilder;

pub use crate::operation::create_hit_with_hit_type::_create_hit_with_hit_type_input::CreateHitWithHitTypeInputBuilder;

impl CreateHitWithHitTypeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_hit_with_hit_type();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateHITWithHITType`.
///
/// <p> The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT) using an existing HITTypeID generated by the <code>CreateHITType</code> operation. </p>
/// <p> This is an alternative way to create HITs from the <code>CreateHIT</code> operation. This is the recommended best practice for Requesters who are creating large numbers of HITs. </p>
/// <p>CreateHITWithHITType also supports several ways to provide question data: by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT, or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>. </p> <note>
/// <p> If a HIT is created with 10 or more maximum assignments, there is an additional fee. For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>. </p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateHITWithHITTypeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_hit_with_hit_type::builders::CreateHitWithHitTypeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeOutput,
        crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
    > for CreateHITWithHITTypeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeOutput,
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateHITWithHITTypeFluentBuilder {
    /// Creates a new `CreateHITWithHITType`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateHITWithHITType as a reference.
    pub fn as_input(&self) -> &crate::operation::create_hit_with_hit_type::builders::CreateHitWithHitTypeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_hit_with_hit_type::CreateHITWithHITType::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_hit_with_hit_type::CreateHITWithHITType::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_hit_with_hit_type::CreateHitWithHitTypeOutput,
        crate::operation::create_hit_with_hit_type::CreateHITWithHITTypeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The HIT type ID you want to create this HIT with.</p>
    pub fn hit_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hit_type_id(input.into());
        self
    }
    /// <p>The HIT type ID you want to create this HIT with.</p>
    pub fn set_hit_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hit_type_id(input);
        self
    }
    /// <p>The HIT type ID you want to create this HIT with.</p>
    pub fn get_hit_type_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hit_type_id()
    }
    /// <p> The number of times the HIT can be accepted and completed before the HIT becomes unavailable. </p>
    pub fn max_assignments(mut self, input: i32) -> Self {
        self.inner = self.inner.max_assignments(input);
        self
    }
    /// <p> The number of times the HIT can be accepted and completed before the HIT becomes unavailable. </p>
    pub fn set_max_assignments(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_assignments(input);
        self
    }
    /// <p> The number of times the HIT can be accepted and completed before the HIT becomes unavailable. </p>
    pub fn get_max_assignments(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_assignments()
    }
    /// <p> An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. </p>
    pub fn lifetime_in_seconds(mut self, input: i64) -> Self {
        self.inner = self.inner.lifetime_in_seconds(input);
        self
    }
    /// <p> An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. </p>
    pub fn set_lifetime_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_lifetime_in_seconds(input);
        self
    }
    /// <p> An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. </p>
    pub fn get_lifetime_in_seconds(&self) -> &::std::option::Option<i64> {
        self.inner.get_lifetime_in_seconds()
    }
    /// <p> The data the person completing the HIT uses to produce the results. </p>
    /// <p> Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. </p>
    /// <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>
    pub fn question(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.question(input.into());
        self
    }
    /// <p> The data the person completing the HIT uses to produce the results. </p>
    /// <p> Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. </p>
    /// <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>
    pub fn set_question(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_question(input);
        self
    }
    /// <p> The data the person completing the HIT uses to produce the results. </p>
    /// <p> Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. </p>
    /// <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>
    pub fn get_question(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_question()
    }
    /// <p> An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. </p>
    /// <p> The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. </p>
    /// <p> The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. </p>
    pub fn requester_annotation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.requester_annotation(input.into());
        self
    }
    /// <p> An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. </p>
    /// <p> The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. </p>
    /// <p> The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. </p>
    pub fn set_requester_annotation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_requester_annotation(input);
        self
    }
    /// <p> An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. </p>
    /// <p> The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. </p>
    /// <p> The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. </p>
    pub fn get_requester_annotation(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_requester_annotation()
    }
    /// <p> A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. </p> <note>
    /// <p> Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs. </p>
    /// </note>
    pub fn unique_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.unique_request_token(input.into());
        self
    }
    /// <p> A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. </p> <note>
    /// <p> Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs. </p>
    /// </note>
    pub fn set_unique_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_unique_request_token(input);
        self
    }
    /// <p> A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. </p> <note>
    /// <p> Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs. </p>
    /// </note>
    pub fn get_unique_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_unique_request_token()
    }
    /// <p> The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn assignment_review_policy(mut self, input: crate::types::ReviewPolicy) -> Self {
        self.inner = self.inner.assignment_review_policy(input);
        self
    }
    /// <p> The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn set_assignment_review_policy(mut self, input: ::std::option::Option<crate::types::ReviewPolicy>) -> Self {
        self.inner = self.inner.set_assignment_review_policy(input);
        self
    }
    /// <p> The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn get_assignment_review_policy(&self) -> &::std::option::Option<crate::types::ReviewPolicy> {
        self.inner.get_assignment_review_policy()
    }
    /// <p> The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn hit_review_policy(mut self, input: crate::types::ReviewPolicy) -> Self {
        self.inner = self.inner.hit_review_policy(input);
        self
    }
    /// <p> The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn set_hit_review_policy(mut self, input: ::std::option::Option<crate::types::ReviewPolicy>) -> Self {
        self.inner = self.inner.set_hit_review_policy(input);
        self
    }
    /// <p> The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. </p>
    pub fn get_hit_review_policy(&self) -> &::std::option::Option<crate::types::ReviewPolicy> {
        self.inner.get_hit_review_policy()
    }
    /// <p> The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. </p>
    /// <p> Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. </p>
    pub fn hit_layout_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hit_layout_id(input.into());
        self
    }
    /// <p> The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. </p>
    /// <p> Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. </p>
    pub fn set_hit_layout_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hit_layout_id(input);
        self
    }
    /// <p> The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. </p>
    /// <p> Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. </p>
    pub fn get_hit_layout_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hit_layout_id()
    }
    /// Appends an item to `HITLayoutParameters`.
    ///
    /// To override the contents of this collection use [`set_hit_layout_parameters`](Self::set_hit_layout_parameters).
    ///
    /// <p> If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. </p>
    pub fn hit_layout_parameters(mut self, input: crate::types::HitLayoutParameter) -> Self {
        self.inner = self.inner.hit_layout_parameters(input);
        self
    }
    /// <p> If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. </p>
    pub fn set_hit_layout_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HitLayoutParameter>>) -> Self {
        self.inner = self.inner.set_hit_layout_parameters(input);
        self
    }
    /// <p> If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. </p>
    pub fn get_hit_layout_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HitLayoutParameter>> {
        self.inner.get_hit_layout_parameters()
    }
}
