// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBonusPaymentsInput {
    /// <p>The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    #[doc(hidden)]
    pub hit_id: std::option::Option<std::string::String>,
    /// <p>The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    #[doc(hidden)]
    pub assignment_id: std::option::Option<std::string::String>,
    /// <p>Pagination token</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListBonusPaymentsInput {
    /// <p>The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn hit_id(&self) -> std::option::Option<&str> {
        self.hit_id.as_deref()
    }
    /// <p>The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn assignment_id(&self) -> std::option::Option<&str> {
        self.assignment_id.as_deref()
    }
    /// <p>Pagination token</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListBonusPaymentsInput {
    /// Creates a new builder-style object to manufacture [`ListBonusPaymentsInput`](crate::operation::list_bonus_payments::ListBonusPaymentsInput).
    pub fn builder(
    ) -> crate::operation::list_bonus_payments::builders::ListBonusPaymentsInputBuilder {
        crate::operation::list_bonus_payments::builders::ListBonusPaymentsInputBuilder::default()
    }
}

/// A builder for [`ListBonusPaymentsInput`](crate::operation::list_bonus_payments::ListBonusPaymentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListBonusPaymentsInputBuilder {
    pub(crate) hit_id: std::option::Option<std::string::String>,
    pub(crate) assignment_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListBonusPaymentsInputBuilder {
    /// <p>The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn hit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hit_id = Some(input.into());
        self
    }
    /// <p>The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn set_hit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hit_id = input;
        self
    }
    /// <p>The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn assignment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.assignment_id = Some(input.into());
        self
    }
    /// <p>The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified</p>
    pub fn set_assignment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assignment_id = input;
        self
    }
    /// <p>Pagination token</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListBonusPaymentsInput`](crate::operation::list_bonus_payments::ListBonusPaymentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_bonus_payments::ListBonusPaymentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_bonus_payments::ListBonusPaymentsInput {
                hit_id: self.hit_id,
                assignment_id: self.assignment_id,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
