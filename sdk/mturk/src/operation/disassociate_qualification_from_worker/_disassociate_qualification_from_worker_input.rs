// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateQualificationFromWorkerInput {
    /// <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
    pub worker_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Qualification type of the Qualification to be revoked.</p>
    pub qualification_type_id: ::std::option::Option<::std::string::String>,
    /// <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl DisassociateQualificationFromWorkerInput {
    /// <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
    pub fn worker_id(&self) -> ::std::option::Option<&str> {
        self.worker_id.as_deref()
    }
    /// <p>The ID of the Qualification type of the Qualification to be revoked.</p>
    pub fn qualification_type_id(&self) -> ::std::option::Option<&str> {
        self.qualification_type_id.as_deref()
    }
    /// <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl DisassociateQualificationFromWorkerInput {
    /// Creates a new builder-style object to manufacture [`DisassociateQualificationFromWorkerInput`](crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerInput).
    pub fn builder() -> crate::operation::disassociate_qualification_from_worker::builders::DisassociateQualificationFromWorkerInputBuilder {
        crate::operation::disassociate_qualification_from_worker::builders::DisassociateQualificationFromWorkerInputBuilder::default()
    }
}

/// A builder for [`DisassociateQualificationFromWorkerInput`](crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisassociateQualificationFromWorkerInputBuilder {
    pub(crate) worker_id: ::std::option::Option<::std::string::String>,
    pub(crate) qualification_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl DisassociateQualificationFromWorkerInputBuilder {
    /// <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
    /// This field is required.
    pub fn worker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
    pub fn set_worker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
    pub fn get_worker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_id
    }
    /// <p>The ID of the Qualification type of the Qualification to be revoked.</p>
    /// This field is required.
    pub fn qualification_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.qualification_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Qualification type of the Qualification to be revoked.</p>
    pub fn set_qualification_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.qualification_type_id = input;
        self
    }
    /// <p>The ID of the Qualification type of the Qualification to be revoked.</p>
    pub fn get_qualification_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.qualification_type_id
    }
    /// <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`DisassociateQualificationFromWorkerInput`](crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::disassociate_qualification_from_worker::DisassociateQualificationFromWorkerInput {
                worker_id: self.worker_id,
                qualification_type_id: self.qualification_type_id,
                reason: self.reason,
            },
        )
    }
}
