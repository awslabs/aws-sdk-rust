// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotifyWorkersOutput {
    /// <p> When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. </p>
    #[doc(hidden)]
    pub notify_workers_failure_statuses:
        std::option::Option<std::vec::Vec<crate::types::NotifyWorkersFailureStatus>>,
    _request_id: Option<String>,
}
impl NotifyWorkersOutput {
    /// <p> When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. </p>
    pub fn notify_workers_failure_statuses(
        &self,
    ) -> std::option::Option<&[crate::types::NotifyWorkersFailureStatus]> {
        self.notify_workers_failure_statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for NotifyWorkersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl NotifyWorkersOutput {
    /// Creates a new builder-style object to manufacture [`NotifyWorkersOutput`](crate::operation::notify_workers::NotifyWorkersOutput).
    pub fn builder() -> crate::operation::notify_workers::builders::NotifyWorkersOutputBuilder {
        crate::operation::notify_workers::builders::NotifyWorkersOutputBuilder::default()
    }
}

/// A builder for [`NotifyWorkersOutput`](crate::operation::notify_workers::NotifyWorkersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotifyWorkersOutputBuilder {
    pub(crate) notify_workers_failure_statuses:
        std::option::Option<std::vec::Vec<crate::types::NotifyWorkersFailureStatus>>,
    _request_id: Option<String>,
}
impl NotifyWorkersOutputBuilder {
    /// Appends an item to `notify_workers_failure_statuses`.
    ///
    /// To override the contents of this collection use [`set_notify_workers_failure_statuses`](Self::set_notify_workers_failure_statuses).
    ///
    /// <p> When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. </p>
    pub fn notify_workers_failure_statuses(
        mut self,
        input: crate::types::NotifyWorkersFailureStatus,
    ) -> Self {
        let mut v = self.notify_workers_failure_statuses.unwrap_or_default();
        v.push(input);
        self.notify_workers_failure_statuses = Some(v);
        self
    }
    /// <p> When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. </p>
    pub fn set_notify_workers_failure_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotifyWorkersFailureStatus>>,
    ) -> Self {
        self.notify_workers_failure_statuses = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`NotifyWorkersOutput`](crate::operation::notify_workers::NotifyWorkersOutput).
    pub fn build(self) -> crate::operation::notify_workers::NotifyWorkersOutput {
        crate::operation::notify_workers::NotifyWorkersOutput {
            notify_workers_failure_statuses: self.notify_workers_failure_statuses,
            _request_id: self._request_id,
        }
    }
}
