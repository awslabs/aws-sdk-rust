// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::notify_workers::_notify_workers_output::NotifyWorkersOutputBuilder;

pub use crate::operation::notify_workers::_notify_workers_input::NotifyWorkersInputBuilder;

/// Fluent builder constructing a request to `NotifyWorkers`.
///
/// <p> The <code>NotifyWorkers</code> operation sends an email to one or more Workers that you specify with the Worker ID. You can specify up to 100 Worker IDs to send the same message with a single call to the NotifyWorkers operation. The NotifyWorkers operation will send a notification email to a Worker only if you have previously approved or rejected work from the Worker. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct NotifyWorkersFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::notify_workers::builders::NotifyWorkersInputBuilder,
}
impl NotifyWorkersFluentBuilder {
    /// Creates a new `NotifyWorkers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::notify_workers::NotifyWorkers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::notify_workers::NotifyWorkersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::notify_workers::NotifyWorkersOutput,
        aws_smithy_http::result::SdkError<crate::operation::notify_workers::NotifyWorkersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The subject line of the email message to send. Can include up to 200 characters.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subject(input.into());
        self
    }
    /// <p>The subject line of the email message to send. Can include up to 200 characters.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subject(input);
        self
    }
    /// <p>The text of the email message to send. Can include up to 4,096 characters</p>
    pub fn message_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.message_text(input.into());
        self
    }
    /// <p>The text of the email message to send. Can include up to 4,096 characters</p>
    pub fn set_message_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_message_text(input);
        self
    }
    /// Appends an item to `WorkerIds`.
    ///
    /// To override the contents of this collection use [`set_worker_ids`](Self::set_worker_ids).
    ///
    /// <p>A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.</p>
    pub fn worker_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.worker_ids(input.into());
        self
    }
    /// <p>A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.</p>
    pub fn set_worker_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_worker_ids(input);
        self
    }
}
