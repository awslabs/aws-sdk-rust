// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::notify_workers::_notify_workers_output::NotifyWorkersOutputBuilder;

pub use crate::operation::notify_workers::_notify_workers_input::NotifyWorkersInputBuilder;

impl crate::operation::notify_workers::builders::NotifyWorkersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::notify_workers::NotifyWorkersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_workers::NotifyWorkersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.notify_workers();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `NotifyWorkers`.
///
/// <p>The <code>NotifyWorkers</code> operation sends an email to one or more Workers that you specify with the Worker ID. You can specify up to 100 Worker IDs to send the same message with a single call to the NotifyWorkers operation. The NotifyWorkers operation will send a notification email to a Worker only if you have previously approved or rejected work from the Worker.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct NotifyWorkersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::notify_workers::builders::NotifyWorkersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::notify_workers::NotifyWorkersOutput,
        crate::operation::notify_workers::NotifyWorkersError,
    > for NotifyWorkersFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::notify_workers::NotifyWorkersOutput,
            crate::operation::notify_workers::NotifyWorkersError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl NotifyWorkersFluentBuilder {
    /// Creates a new `NotifyWorkers`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the NotifyWorkers as a reference.
    pub fn as_input(&self) -> &crate::operation::notify_workers::builders::NotifyWorkersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::notify_workers::NotifyWorkersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_workers::NotifyWorkersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::notify_workers::NotifyWorkers::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::notify_workers::NotifyWorkers::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::notify_workers::NotifyWorkersOutput,
        crate::operation::notify_workers::NotifyWorkersError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The subject line of the email message to send. Can include up to 200 characters.</p>
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subject(input.into());
        self
    }
    /// <p>The subject line of the email message to send. Can include up to 200 characters.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_subject(input);
        self
    }
    /// <p>The subject line of the email message to send. Can include up to 200 characters.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_subject()
    }
    /// <p>The text of the email message to send. Can include up to 4,096 characters</p>
    pub fn message_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message_text(input.into());
        self
    }
    /// <p>The text of the email message to send. Can include up to 4,096 characters</p>
    pub fn set_message_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message_text(input);
        self
    }
    /// <p>The text of the email message to send. Can include up to 4,096 characters</p>
    pub fn get_message_text(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message_text()
    }
    ///
    /// Appends an item to `WorkerIds`.
    ///
    /// To override the contents of this collection use [`set_worker_ids`](Self::set_worker_ids).
    ///
    /// <p>A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.</p>
    pub fn worker_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.worker_ids(input.into());
        self
    }
    /// <p>A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.</p>
    pub fn set_worker_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_worker_ids(input);
        self
    }
    /// <p>A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.</p>
    pub fn get_worker_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_worker_ids()
    }
}
