// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_workers_with_qualification_type::_list_workers_with_qualification_type_output::ListWorkersWithQualificationTypeOutputBuilder;

pub use crate::operation::list_workers_with_qualification_type::_list_workers_with_qualification_type_input::ListWorkersWithQualificationTypeInputBuilder;

/// Fluent builder constructing a request to `ListWorkersWithQualificationType`.
///
/// <p> The <code>ListWorkersWithQualificationType</code> operation returns all of the Workers that have been associated with a given Qualification type. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkersWithQualificationTypeFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_workers_with_qualification_type::builders::ListWorkersWithQualificationTypeInputBuilder
            }
impl ListWorkersWithQualificationTypeFluentBuilder {
    /// Creates a new `ListWorkersWithQualificationType`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationType, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeOutput, aws_smithy_http::result::SdkError<crate::operation::list_workers_with_qualification_type::ListWorkersWithQualificationTypeError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_workers_with_qualification_type::paginator::ListWorkersWithQualificationTypePaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_workers_with_qualification_type::paginator::ListWorkersWithQualificationTypePaginator{
        crate::operation::list_workers_with_qualification_type::paginator::ListWorkersWithQualificationTypePaginator::new(self.handle, self.inner)
    }
    /// <p>The ID of the Qualification type of the Qualifications to return.</p>
    pub fn qualification_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.qualification_type_id(input.into());
        self
    }
    /// <p>The ID of the Qualification type of the Qualifications to return.</p>
    pub fn set_qualification_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_qualification_type_id(input);
        self
    }
    /// <p> The status of the Qualifications to return. Can be <code>Granted | Revoked</code>. </p>
    pub fn status(mut self, input: crate::types::QualificationStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p> The status of the Qualifications to return. Can be <code>Granted | Revoked</code>. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::QualificationStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Pagination Token</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Pagination Token</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> Limit the number of results returned. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> Limit the number of results returned. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
