// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateNotificationSettingsInput {
    /// <p> The ID of the HIT type whose notification specification is being updated. </p>
    #[doc(hidden)]
    pub hit_type_id: std::option::Option<std::string::String>,
    /// <p> The notification specification for the HIT type. </p>
    #[doc(hidden)]
    pub notification: std::option::Option<crate::types::NotificationSpecification>,
    /// <p> Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. </p>
    #[doc(hidden)]
    pub active: std::option::Option<bool>,
}
impl UpdateNotificationSettingsInput {
    /// <p> The ID of the HIT type whose notification specification is being updated. </p>
    pub fn hit_type_id(&self) -> std::option::Option<&str> {
        self.hit_type_id.as_deref()
    }
    /// <p> The notification specification for the HIT type. </p>
    pub fn notification(&self) -> std::option::Option<&crate::types::NotificationSpecification> {
        self.notification.as_ref()
    }
    /// <p> Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. </p>
    pub fn active(&self) -> std::option::Option<bool> {
        self.active
    }
}
impl UpdateNotificationSettingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateNotificationSettingsInput`](crate::operation::update_notification_settings::UpdateNotificationSettingsInput).
    pub fn builder() -> crate::operation::update_notification_settings::builders::UpdateNotificationSettingsInputBuilder{
        crate::operation::update_notification_settings::builders::UpdateNotificationSettingsInputBuilder::default()
    }
}

/// A builder for [`UpdateNotificationSettingsInput`](crate::operation::update_notification_settings::UpdateNotificationSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateNotificationSettingsInputBuilder {
    pub(crate) hit_type_id: std::option::Option<std::string::String>,
    pub(crate) notification: std::option::Option<crate::types::NotificationSpecification>,
    pub(crate) active: std::option::Option<bool>,
}
impl UpdateNotificationSettingsInputBuilder {
    /// <p> The ID of the HIT type whose notification specification is being updated. </p>
    pub fn hit_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hit_type_id = Some(input.into());
        self
    }
    /// <p> The ID of the HIT type whose notification specification is being updated. </p>
    pub fn set_hit_type_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hit_type_id = input;
        self
    }
    /// <p> The notification specification for the HIT type. </p>
    pub fn notification(mut self, input: crate::types::NotificationSpecification) -> Self {
        self.notification = Some(input);
        self
    }
    /// <p> The notification specification for the HIT type. </p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::types::NotificationSpecification>,
    ) -> Self {
        self.notification = input;
        self
    }
    /// <p> Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. </p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = Some(input);
        self
    }
    /// <p> Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. </p>
    pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateNotificationSettingsInput`](crate::operation::update_notification_settings::UpdateNotificationSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_notification_settings::UpdateNotificationSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_notification_settings::UpdateNotificationSettingsInput {
                hit_type_id: self.hit_type_id,
                notification: self.notification,
                active: self.active,
            },
        )
    }
}
