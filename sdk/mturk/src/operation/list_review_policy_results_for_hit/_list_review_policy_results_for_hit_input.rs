// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReviewPolicyResultsForHitInput {
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    #[doc(hidden)]
    pub hit_id: std::option::Option<std::string::String>,
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    #[doc(hidden)]
    pub policy_levels: std::option::Option<std::vec::Vec<crate::types::ReviewPolicyLevel>>,
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    #[doc(hidden)]
    pub retrieve_actions: std::option::Option<bool>,
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    #[doc(hidden)]
    pub retrieve_results: std::option::Option<bool>,
    /// <p>Pagination token</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Limit the number of results returned.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListReviewPolicyResultsForHitInput {
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    pub fn hit_id(&self) -> std::option::Option<&str> {
        self.hit_id.as_deref()
    }
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    pub fn policy_levels(&self) -> std::option::Option<&[crate::types::ReviewPolicyLevel]> {
        self.policy_levels.as_deref()
    }
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    pub fn retrieve_actions(&self) -> std::option::Option<bool> {
        self.retrieve_actions
    }
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    pub fn retrieve_results(&self) -> std::option::Option<bool> {
        self.retrieve_results
    }
    /// <p>Pagination token</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Limit the number of results returned.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListReviewPolicyResultsForHitInput {
    /// Creates a new builder-style object to manufacture [`ListReviewPolicyResultsForHitInput`](crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitInput).
    pub fn builder() -> crate::operation::list_review_policy_results_for_hit::builders::ListReviewPolicyResultsForHitInputBuilder{
        crate::operation::list_review_policy_results_for_hit::builders::ListReviewPolicyResultsForHitInputBuilder::default()
    }
}

/// A builder for [`ListReviewPolicyResultsForHitInput`](crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReviewPolicyResultsForHitInputBuilder {
    pub(crate) hit_id: std::option::Option<std::string::String>,
    pub(crate) policy_levels: std::option::Option<std::vec::Vec<crate::types::ReviewPolicyLevel>>,
    pub(crate) retrieve_actions: std::option::Option<bool>,
    pub(crate) retrieve_results: std::option::Option<bool>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListReviewPolicyResultsForHitInputBuilder {
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    pub fn hit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hit_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    pub fn set_hit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hit_id = input;
        self
    }
    /// Appends an item to `policy_levels`.
    ///
    /// To override the contents of this collection use [`set_policy_levels`](Self::set_policy_levels).
    ///
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    pub fn policy_levels(mut self, input: crate::types::ReviewPolicyLevel) -> Self {
        let mut v = self.policy_levels.unwrap_or_default();
        v.push(input);
        self.policy_levels = Some(v);
        self
    }
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    pub fn set_policy_levels(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReviewPolicyLevel>>,
    ) -> Self {
        self.policy_levels = input;
        self
    }
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    pub fn retrieve_actions(mut self, input: bool) -> Self {
        self.retrieve_actions = Some(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    pub fn set_retrieve_actions(mut self, input: std::option::Option<bool>) -> Self {
        self.retrieve_actions = input;
        self
    }
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    pub fn retrieve_results(mut self, input: bool) -> Self {
        self.retrieve_results = Some(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    pub fn set_retrieve_results(mut self, input: std::option::Option<bool>) -> Self {
        self.retrieve_results = input;
        self
    }
    /// <p>Pagination token</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Limit the number of results returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Limit the number of results returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListReviewPolicyResultsForHitInput`](crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitInput {
                hit_id: self.hit_id
                ,
                policy_levels: self.policy_levels
                ,
                retrieve_actions: self.retrieve_actions
                ,
                retrieve_results: self.retrieve_results
                ,
                next_token: self.next_token
                ,
                max_results: self.max_results
                ,
            }
        )
    }
}
