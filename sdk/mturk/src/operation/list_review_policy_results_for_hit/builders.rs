// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_review_policy_results_for_hit::_list_review_policy_results_for_hit_output::ListReviewPolicyResultsForHitOutputBuilder;

pub use crate::operation::list_review_policy_results_for_hit::_list_review_policy_results_for_hit_input::ListReviewPolicyResultsForHitInputBuilder;

/// Fluent builder constructing a request to `ListReviewPolicyResultsForHIT`.
///
/// <p> The <code>ListReviewPolicyResultsForHIT</code> operation retrieves the computed results and the actions taken in the course of executing your Review Policies for a given HIT. For information about how to specify Review Policies when you call CreateHIT, see Review Policies. The ListReviewPolicyResultsForHIT operation can return results for both Assignment-level and HIT-level review results. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReviewPolicyResultsForHITFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_review_policy_results_for_hit::builders::ListReviewPolicyResultsForHitInputBuilder
            }
impl ListReviewPolicyResultsForHITFluentBuilder {
    /// Creates a new `ListReviewPolicyResultsForHIT`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHIT, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHitOutput, aws_smithy_http::result::SdkError<crate::operation::list_review_policy_results_for_hit::ListReviewPolicyResultsForHITError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_review_policy_results_for_hit::paginator::ListReviewPolicyResultsForHitPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_review_policy_results_for_hit::paginator::ListReviewPolicyResultsForHitPaginator{
        crate::operation::list_review_policy_results_for_hit::paginator::ListReviewPolicyResultsForHitPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    pub fn hit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hit_id(input.into());
        self
    }
    /// <p>The unique identifier of the HIT to retrieve review results for.</p>
    pub fn set_hit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hit_id(input);
        self
    }
    /// Appends an item to `PolicyLevels`.
    ///
    /// To override the contents of this collection use [`set_policy_levels`](Self::set_policy_levels).
    ///
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    pub fn policy_levels(mut self, input: crate::types::ReviewPolicyLevel) -> Self {
        self.inner = self.inner.policy_levels(input);
        self
    }
    /// <p> The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. </p>
    pub fn set_policy_levels(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReviewPolicyLevel>>,
    ) -> Self {
        self.inner = self.inner.set_policy_levels(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    pub fn retrieve_actions(mut self, input: bool) -> Self {
        self.inner = self.inner.retrieve_actions(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. </p>
    pub fn set_retrieve_actions(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_retrieve_actions(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    pub fn retrieve_results(mut self, input: bool) -> Self {
        self.inner = self.inner.retrieve_results(input);
        self
    }
    /// <p> Specify if the operation should retrieve a list of the results computed by the Review Policies. </p>
    pub fn set_retrieve_results(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_retrieve_results(input);
        self
    }
    /// <p>Pagination token</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Pagination token</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Limit the number of results returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Limit the number of results returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
