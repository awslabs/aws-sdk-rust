// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The NotificationSpecification data structure describes a HIT event notification for a HIT type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationSpecification {
    /// <p> The target for notification messages. The Destination’s format is determined by the specified Transport: </p>
    /// <ul>
    /// <li> <p>When Transport is Email, the Destination is your email address.</p> </li>
    /// <li> <p>When Transport is SQS, the Destination is your queue URL.</p> </li>
    /// <li> <p>When Transport is SNS, the Destination is the ARN of your topic.</p> </li>
    /// </ul>
    pub destination: ::std::string::String,
    /// <p> The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. </p>
    pub transport: crate::types::NotificationTransport,
    /// <p>The version of the Notification API to use. Valid value is 2006-05-05.</p>
    pub version: ::std::string::String,
    /// <p> The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. </p>
    pub event_types: ::std::vec::Vec<crate::types::EventType>,
}
impl NotificationSpecification {
    /// <p> The target for notification messages. The Destination’s format is determined by the specified Transport: </p>
    /// <ul>
    /// <li> <p>When Transport is Email, the Destination is your email address.</p> </li>
    /// <li> <p>When Transport is SQS, the Destination is your queue URL.</p> </li>
    /// <li> <p>When Transport is SNS, the Destination is the ARN of your topic.</p> </li>
    /// </ul>
    pub fn destination(&self) -> &str {
        use std::ops::Deref;
        self.destination.deref()
    }
    /// <p> The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. </p>
    pub fn transport(&self) -> &crate::types::NotificationTransport {
        &self.transport
    }
    /// <p>The version of the Notification API to use. Valid value is 2006-05-05.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p> The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. </p>
    pub fn event_types(&self) -> &[crate::types::EventType] {
        use std::ops::Deref;
        self.event_types.deref()
    }
}
impl NotificationSpecification {
    /// Creates a new builder-style object to manufacture [`NotificationSpecification`](crate::types::NotificationSpecification).
    pub fn builder() -> crate::types::builders::NotificationSpecificationBuilder {
        crate::types::builders::NotificationSpecificationBuilder::default()
    }
}

/// A builder for [`NotificationSpecification`](crate::types::NotificationSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotificationSpecificationBuilder {
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) transport: ::std::option::Option<crate::types::NotificationTransport>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) event_types: ::std::option::Option<::std::vec::Vec<crate::types::EventType>>,
}
impl NotificationSpecificationBuilder {
    /// <p> The target for notification messages. The Destination’s format is determined by the specified Transport: </p>
    /// <ul>
    /// <li> <p>When Transport is Email, the Destination is your email address.</p> </li>
    /// <li> <p>When Transport is SQS, the Destination is your queue URL.</p> </li>
    /// <li> <p>When Transport is SNS, the Destination is the ARN of your topic.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The target for notification messages. The Destination’s format is determined by the specified Transport: </p>
    /// <ul>
    /// <li> <p>When Transport is Email, the Destination is your email address.</p> </li>
    /// <li> <p>When Transport is SQS, the Destination is your queue URL.</p> </li>
    /// <li> <p>When Transport is SNS, the Destination is the ARN of your topic.</p> </li>
    /// </ul>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p> The target for notification messages. The Destination’s format is determined by the specified Transport: </p>
    /// <ul>
    /// <li> <p>When Transport is Email, the Destination is your email address.</p> </li>
    /// <li> <p>When Transport is SQS, the Destination is your queue URL.</p> </li>
    /// <li> <p>When Transport is SNS, the Destination is the ARN of your topic.</p> </li>
    /// </ul>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p> The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. </p>
    /// This field is required.
    pub fn transport(mut self, input: crate::types::NotificationTransport) -> Self {
        self.transport = ::std::option::Option::Some(input);
        self
    }
    /// <p> The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. </p>
    pub fn set_transport(mut self, input: ::std::option::Option<crate::types::NotificationTransport>) -> Self {
        self.transport = input;
        self
    }
    /// <p> The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. </p>
    pub fn get_transport(&self) -> &::std::option::Option<crate::types::NotificationTransport> {
        &self.transport
    }
    /// <p>The version of the Notification API to use. Valid value is 2006-05-05.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Notification API to use. Valid value is 2006-05-05.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the Notification API to use. Valid value is 2006-05-05.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Appends an item to `event_types`.
    ///
    /// To override the contents of this collection use [`set_event_types`](Self::set_event_types).
    ///
    /// <p> The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. </p>
    pub fn event_types(mut self, input: crate::types::EventType) -> Self {
        let mut v = self.event_types.unwrap_or_default();
        v.push(input);
        self.event_types = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. </p>
    pub fn set_event_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventType>>) -> Self {
        self.event_types = input;
        self
    }
    /// <p> The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. </p>
    pub fn get_event_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventType>> {
        &self.event_types
    }
    /// Consumes the builder and constructs a [`NotificationSpecification`](crate::types::NotificationSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination`](crate::types::builders::NotificationSpecificationBuilder::destination)
    /// - [`transport`](crate::types::builders::NotificationSpecificationBuilder::transport)
    /// - [`version`](crate::types::builders::NotificationSpecificationBuilder::version)
    /// - [`event_types`](crate::types::builders::NotificationSpecificationBuilder::event_types)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationSpecification {
            destination: self.destination.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination",
                    "destination was not specified but it is required when building NotificationSpecification",
                )
            })?,
            transport: self.transport.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transport",
                    "transport was not specified but it is required when building NotificationSpecification",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building NotificationSpecification",
                )
            })?,
            event_types: self.event_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_types",
                    "event_types was not specified but it is required when building NotificationSpecification",
                )
            })?,
        })
    }
}
