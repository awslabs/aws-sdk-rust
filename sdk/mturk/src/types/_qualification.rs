// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Qualification data structure represents a Qualification assigned to a user, including the Qualification type and the value (score).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Qualification {
    /// <p> The ID of the Qualification type for the Qualification.</p>
    #[doc(hidden)]
    pub qualification_type_id: std::option::Option<std::string::String>,
    /// <p> The ID of the Worker who possesses the Qualification. </p>
    #[doc(hidden)]
    pub worker_id: std::option::Option<std::string::String>,
    /// <p> The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.</p>
    #[doc(hidden)]
    pub grant_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The value (score) of the Qualification, if the Qualification has an integer value.</p>
    #[doc(hidden)]
    pub integer_value: std::option::Option<i32>,
    /// <p>The Locale data structure represents a geographical region or location.</p>
    #[doc(hidden)]
    pub locale_value: std::option::Option<crate::types::Locale>,
    /// <p> The status of the Qualification. Valid values are Granted | Revoked.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::QualificationStatus>,
}
impl Qualification {
    /// <p> The ID of the Qualification type for the Qualification.</p>
    pub fn qualification_type_id(&self) -> std::option::Option<&str> {
        self.qualification_type_id.as_deref()
    }
    /// <p> The ID of the Worker who possesses the Qualification. </p>
    pub fn worker_id(&self) -> std::option::Option<&str> {
        self.worker_id.as_deref()
    }
    /// <p> The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.</p>
    pub fn grant_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.grant_time.as_ref()
    }
    /// <p> The value (score) of the Qualification, if the Qualification has an integer value.</p>
    pub fn integer_value(&self) -> std::option::Option<i32> {
        self.integer_value
    }
    /// <p>The Locale data structure represents a geographical region or location.</p>
    pub fn locale_value(&self) -> std::option::Option<&crate::types::Locale> {
        self.locale_value.as_ref()
    }
    /// <p> The status of the Qualification. Valid values are Granted | Revoked.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::QualificationStatus> {
        self.status.as_ref()
    }
}
impl Qualification {
    /// Creates a new builder-style object to manufacture [`Qualification`](crate::types::Qualification).
    pub fn builder() -> crate::types::builders::QualificationBuilder {
        crate::types::builders::QualificationBuilder::default()
    }
}

/// A builder for [`Qualification`](crate::types::Qualification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QualificationBuilder {
    pub(crate) qualification_type_id: std::option::Option<std::string::String>,
    pub(crate) worker_id: std::option::Option<std::string::String>,
    pub(crate) grant_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) integer_value: std::option::Option<i32>,
    pub(crate) locale_value: std::option::Option<crate::types::Locale>,
    pub(crate) status: std::option::Option<crate::types::QualificationStatus>,
}
impl QualificationBuilder {
    /// <p> The ID of the Qualification type for the Qualification.</p>
    pub fn qualification_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.qualification_type_id = Some(input.into());
        self
    }
    /// <p> The ID of the Qualification type for the Qualification.</p>
    pub fn set_qualification_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.qualification_type_id = input;
        self
    }
    /// <p> The ID of the Worker who possesses the Qualification. </p>
    pub fn worker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.worker_id = Some(input.into());
        self
    }
    /// <p> The ID of the Worker who possesses the Qualification. </p>
    pub fn set_worker_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p> The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.</p>
    pub fn grant_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.grant_time = Some(input);
        self
    }
    /// <p> The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.</p>
    pub fn set_grant_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.grant_time = input;
        self
    }
    /// <p> The value (score) of the Qualification, if the Qualification has an integer value.</p>
    pub fn integer_value(mut self, input: i32) -> Self {
        self.integer_value = Some(input);
        self
    }
    /// <p> The value (score) of the Qualification, if the Qualification has an integer value.</p>
    pub fn set_integer_value(mut self, input: std::option::Option<i32>) -> Self {
        self.integer_value = input;
        self
    }
    /// <p>The Locale data structure represents a geographical region or location.</p>
    pub fn locale_value(mut self, input: crate::types::Locale) -> Self {
        self.locale_value = Some(input);
        self
    }
    /// <p>The Locale data structure represents a geographical region or location.</p>
    pub fn set_locale_value(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.locale_value = input;
        self
    }
    /// <p> The status of the Qualification. Valid values are Granted | Revoked.</p>
    pub fn status(mut self, input: crate::types::QualificationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status of the Qualification. Valid values are Granted | Revoked.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::QualificationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`Qualification`](crate::types::Qualification).
    pub fn build(self) -> crate::types::Qualification {
        crate::types::Qualification {
            qualification_type_id: self.qualification_type_id,
            worker_id: self.worker_id,
            grant_time: self.grant_time,
            integer_value: self.integer_value,
            locale_value: self.locale_value,
            status: self.status,
        }
    }
}
