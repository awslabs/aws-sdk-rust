// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> HIT Review Policy data structures represent HIT review policies, which you specify when you create a HIT. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReviewPolicy {
    /// <p> Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 </p>
    pub policy_name: ::std::string::String,
    /// <p>Name of the parameter from the Review policy.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::PolicyParameter>>,
}
impl ReviewPolicy {
    /// <p> Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 </p>
    pub fn policy_name(&self) -> &str {
        use std::ops::Deref;
        self.policy_name.deref()
    }
    /// <p>Name of the parameter from the Review policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::PolicyParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
}
impl ReviewPolicy {
    /// Creates a new builder-style object to manufacture [`ReviewPolicy`](crate::types::ReviewPolicy).
    pub fn builder() -> crate::types::builders::ReviewPolicyBuilder {
        crate::types::builders::ReviewPolicyBuilder::default()
    }
}

/// A builder for [`ReviewPolicy`](crate::types::ReviewPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReviewPolicyBuilder {
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::PolicyParameter>>,
}
impl ReviewPolicyBuilder {
    /// <p> Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 </p>
    /// This field is required.
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 </p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p> Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 </p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Name of the parameter from the Review policy.</p>
    pub fn parameters(mut self, input: crate::types::PolicyParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the parameter from the Review policy.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Name of the parameter from the Review policy.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyParameter>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`ReviewPolicy`](crate::types::ReviewPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_name`](crate::types::builders::ReviewPolicyBuilder::policy_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ReviewPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReviewPolicy {
            policy_name: self.policy_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_name",
                    "policy_name was not specified but it is required when building ReviewPolicy",
                )
            })?,
            parameters: self.parameters,
        })
    }
}
