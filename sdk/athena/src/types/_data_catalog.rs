// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a data catalog in an Amazon Web Services account.</p><note>
/// <p>In the Athena console, data catalogs are listed as "data sources" on the <b>Data sources</b> page under the <b>Data source name</b> column.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataCatalog {
    /// <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub name: ::std::string::String,
    /// <p>An optional description of the data catalog.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for an Glue Data Catalog, and <code>HIVE</code> for an external Apache Hive metastore. <code>FEDERATED</code> is a federated catalog for which Athena creates the connection and the Lambda function for you based on the parameters that you pass.</p>
    pub r#type: crate::types::DataCatalogType,
    /// <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code></p></li>
    /// <li>
    /// <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>
    /// <ul>
    /// <li>
    /// <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code></p></li>
    /// <li>
    /// <p>If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p>
    /// <p><code>function=<i>lambda_arn</i> </code></p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p>
    /// <p><code>catalog-id=<i>catalog_id</i> </code></p>
    /// <ul>
    /// <li>
    /// <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type uses one of the following parameters, but not both. Use <code>connection-arn</code> for an existing Glue connection. Use <code>connection-type</code> and <code>connection-properties</code> to specify the configuration setting for a new connection.</p>
    /// <ul>
    /// <li>
    /// <p><code>connection-arn:<i><glue_connection_arn_to_reuse></glue_connection_arn_to_reuse></i> </code></p></li>
    /// <li>
    /// <p><code>connection-type:MYSQL|REDSHIFT|...., connection-properties:"<i><json_string></json_string></i>"</code></p>
    /// <p>For <i> <code><json_string></json_string></code> </i>, use escaped JSON text, as in the following example.</p>
    /// <p><code>"{\"spill_bucket\":\"my_spill\",\"spill_prefix\":\"athena-spill\",\"host\":\"abc12345.snowflakecomputing.com\",\"port\":\"1234\",\"warehouse\":\"DEV_WH\",\"database\":\"TEST\",\"schema\":\"PUBLIC\",\"SecretArn\":\"arn:aws:secretsmanager:ap-south-1:111122223333:secret:snowflake-XHb67j\"}"</code></p></li>
    /// </ul></li>
    /// </ul>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The status of the creation or deletion of the data catalog.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>LAMBDA</code>, <code>GLUE</code>, and <code>HIVE</code> data catalog types are created synchronously. Their status is either <code>CREATE_COMPLETE</code> or <code>CREATE_FAILED</code>.</p></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type is created asynchronously.</p></li>
    /// </ul>
    /// <p>Data catalog creation status:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATE_IN_PROGRESS</code>: Federated data catalog creation in progress.</p></li>
    /// <li>
    /// <p><code>CREATE_COMPLETE</code>: Data catalog creation complete.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED</code>: Data catalog could not be created.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_IN_PROGRESS</code>: Federated data catalog creation failed and is being removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_COMPLETE</code>: Federated data catalog creation failed and was removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_FAILED</code>: Federated data catalog creation failed but could not be removed.</p></li>
    /// </ul>
    /// <p>Data catalog deletion status:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_IN_PROGRESS</code>: Federated data catalog deletion in progress.</p></li>
    /// <li>
    /// <p><code>DELETE_COMPLETE</code>: Federated data catalog deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_FAILED</code>: Federated data catalog could not be deleted.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::DataCatalogStatus>,
    /// <p>The type of connection for a <code>FEDERATED</code> data catalog (for example, <code>REDSHIFT</code>, <code>MYSQL</code>, or <code>SQLSERVER</code>). For information about individual connectors, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connectors-available.html">Available data source connectors</a>.</p>
    pub connection_type: ::std::option::Option<crate::types::ConnectionType>,
    /// <p>Text of the error that occurred during data catalog creation or deletion.</p>
    pub error: ::std::option::Option<::std::string::String>,
}
impl DataCatalog {
    /// <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An optional description of the data catalog.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for an Glue Data Catalog, and <code>HIVE</code> for an external Apache Hive metastore. <code>FEDERATED</code> is a federated catalog for which Athena creates the connection and the Lambda function for you based on the parameters that you pass.</p>
    pub fn r#type(&self) -> &crate::types::DataCatalogType {
        &self.r#type
    }
    /// <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code></p></li>
    /// <li>
    /// <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>
    /// <ul>
    /// <li>
    /// <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code></p></li>
    /// <li>
    /// <p>If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p>
    /// <p><code>function=<i>lambda_arn</i> </code></p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p>
    /// <p><code>catalog-id=<i>catalog_id</i> </code></p>
    /// <ul>
    /// <li>
    /// <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type uses one of the following parameters, but not both. Use <code>connection-arn</code> for an existing Glue connection. Use <code>connection-type</code> and <code>connection-properties</code> to specify the configuration setting for a new connection.</p>
    /// <ul>
    /// <li>
    /// <p><code>connection-arn:<i><glue_connection_arn_to_reuse></glue_connection_arn_to_reuse></i> </code></p></li>
    /// <li>
    /// <p><code>connection-type:MYSQL|REDSHIFT|...., connection-properties:"<i><json_string></json_string></i>"</code></p>
    /// <p>For <i> <code><json_string></json_string></code> </i>, use escaped JSON text, as in the following example.</p>
    /// <p><code>"{\"spill_bucket\":\"my_spill\",\"spill_prefix\":\"athena-spill\",\"host\":\"abc12345.snowflakecomputing.com\",\"port\":\"1234\",\"warehouse\":\"DEV_WH\",\"database\":\"TEST\",\"schema\":\"PUBLIC\",\"SecretArn\":\"arn:aws:secretsmanager:ap-south-1:111122223333:secret:snowflake-XHb67j\"}"</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
    /// <p>The status of the creation or deletion of the data catalog.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>LAMBDA</code>, <code>GLUE</code>, and <code>HIVE</code> data catalog types are created synchronously. Their status is either <code>CREATE_COMPLETE</code> or <code>CREATE_FAILED</code>.</p></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type is created asynchronously.</p></li>
    /// </ul>
    /// <p>Data catalog creation status:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATE_IN_PROGRESS</code>: Federated data catalog creation in progress.</p></li>
    /// <li>
    /// <p><code>CREATE_COMPLETE</code>: Data catalog creation complete.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED</code>: Data catalog could not be created.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_IN_PROGRESS</code>: Federated data catalog creation failed and is being removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_COMPLETE</code>: Federated data catalog creation failed and was removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_FAILED</code>: Federated data catalog creation failed but could not be removed.</p></li>
    /// </ul>
    /// <p>Data catalog deletion status:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_IN_PROGRESS</code>: Federated data catalog deletion in progress.</p></li>
    /// <li>
    /// <p><code>DELETE_COMPLETE</code>: Federated data catalog deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_FAILED</code>: Federated data catalog could not be deleted.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataCatalogStatus> {
        self.status.as_ref()
    }
    /// <p>The type of connection for a <code>FEDERATED</code> data catalog (for example, <code>REDSHIFT</code>, <code>MYSQL</code>, or <code>SQLSERVER</code>). For information about individual connectors, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connectors-available.html">Available data source connectors</a>.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&crate::types::ConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>Text of the error that occurred during data catalog creation or deletion.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
}
impl DataCatalog {
    /// Creates a new builder-style object to manufacture [`DataCatalog`](crate::types::DataCatalog).
    pub fn builder() -> crate::types::builders::DataCatalogBuilder {
        crate::types::builders::DataCatalogBuilder::default()
    }
}

/// A builder for [`DataCatalog`](crate::types::DataCatalog).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataCatalogBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DataCatalogType>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::DataCatalogStatus>,
    pub(crate) connection_type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
}
impl DataCatalogBuilder {
    /// <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An optional description of the data catalog.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description of the data catalog.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description of the data catalog.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for an Glue Data Catalog, and <code>HIVE</code> for an external Apache Hive metastore. <code>FEDERATED</code> is a federated catalog for which Athena creates the connection and the Lambda function for you based on the parameters that you pass.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataCatalogType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for an Glue Data Catalog, and <code>HIVE</code> for an external Apache Hive metastore. <code>FEDERATED</code> is a federated catalog for which Athena creates the connection and the Lambda function for you based on the parameters that you pass.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataCatalogType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for an Glue Data Catalog, and <code>HIVE</code> for an external Apache Hive metastore. <code>FEDERATED</code> is a federated catalog for which Athena creates the connection and the Lambda function for you based on the parameters that you pass.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataCatalogType> {
        &self.r#type
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code></p></li>
    /// <li>
    /// <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>
    /// <ul>
    /// <li>
    /// <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code></p></li>
    /// <li>
    /// <p>If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p>
    /// <p><code>function=<i>lambda_arn</i> </code></p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p>
    /// <p><code>catalog-id=<i>catalog_id</i> </code></p>
    /// <ul>
    /// <li>
    /// <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type uses one of the following parameters, but not both. Use <code>connection-arn</code> for an existing Glue connection. Use <code>connection-type</code> and <code>connection-properties</code> to specify the configuration setting for a new connection.</p>
    /// <ul>
    /// <li>
    /// <p><code>connection-arn:<i><glue_connection_arn_to_reuse></glue_connection_arn_to_reuse></i> </code></p></li>
    /// <li>
    /// <p><code>connection-type:MYSQL|REDSHIFT|...., connection-properties:"<i><json_string></json_string></i>"</code></p>
    /// <p>For <i> <code><json_string></json_string></code> </i>, use escaped JSON text, as in the following example.</p>
    /// <p><code>"{\"spill_bucket\":\"my_spill\",\"spill_prefix\":\"athena-spill\",\"host\":\"abc12345.snowflakecomputing.com\",\"port\":\"1234\",\"warehouse\":\"DEV_WH\",\"database\":\"TEST\",\"schema\":\"PUBLIC\",\"SecretArn\":\"arn:aws:secretsmanager:ap-south-1:111122223333:secret:snowflake-XHb67j\"}"</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code></p></li>
    /// <li>
    /// <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>
    /// <ul>
    /// <li>
    /// <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code></p></li>
    /// <li>
    /// <p>If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p>
    /// <p><code>function=<i>lambda_arn</i> </code></p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p>
    /// <p><code>catalog-id=<i>catalog_id</i> </code></p>
    /// <ul>
    /// <li>
    /// <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type uses one of the following parameters, but not both. Use <code>connection-arn</code> for an existing Glue connection. Use <code>connection-type</code> and <code>connection-properties</code> to specify the configuration setting for a new connection.</p>
    /// <ul>
    /// <li>
    /// <p><code>connection-arn:<i><glue_connection_arn_to_reuse></glue_connection_arn_to_reuse></i> </code></p></li>
    /// <li>
    /// <p><code>connection-type:MYSQL|REDSHIFT|...., connection-properties:"<i><json_string></json_string></i>"</code></p>
    /// <p>For <i> <code><json_string></json_string></code> </i>, use escaped JSON text, as in the following example.</p>
    /// <p><code>"{\"spill_bucket\":\"my_spill\",\"spill_prefix\":\"athena-spill\",\"host\":\"abc12345.snowflakecomputing.com\",\"port\":\"1234\",\"warehouse\":\"DEV_WH\",\"database\":\"TEST\",\"schema\":\"PUBLIC\",\"SecretArn\":\"arn:aws:secretsmanager:ap-south-1:111122223333:secret:snowflake-XHb67j\"}"</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code></p></li>
    /// <li>
    /// <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>
    /// <ul>
    /// <li>
    /// <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p>
    /// <p><code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code></p></li>
    /// <li>
    /// <p>If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p>
    /// <p><code>function=<i>lambda_arn</i> </code></p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p>
    /// <p><code>catalog-id=<i>catalog_id</i> </code></p>
    /// <ul>
    /// <li>
    /// <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type uses one of the following parameters, but not both. Use <code>connection-arn</code> for an existing Glue connection. Use <code>connection-type</code> and <code>connection-properties</code> to specify the configuration setting for a new connection.</p>
    /// <ul>
    /// <li>
    /// <p><code>connection-arn:<i><glue_connection_arn_to_reuse></glue_connection_arn_to_reuse></i> </code></p></li>
    /// <li>
    /// <p><code>connection-type:MYSQL|REDSHIFT|...., connection-properties:"<i><json_string></json_string></i>"</code></p>
    /// <p>For <i> <code><json_string></json_string></code> </i>, use escaped JSON text, as in the following example.</p>
    /// <p><code>"{\"spill_bucket\":\"my_spill\",\"spill_prefix\":\"athena-spill\",\"host\":\"abc12345.snowflakecomputing.com\",\"port\":\"1234\",\"warehouse\":\"DEV_WH\",\"database\":\"TEST\",\"schema\":\"PUBLIC\",\"SecretArn\":\"arn:aws:secretsmanager:ap-south-1:111122223333:secret:snowflake-XHb67j\"}"</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// <p>The status of the creation or deletion of the data catalog.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>LAMBDA</code>, <code>GLUE</code>, and <code>HIVE</code> data catalog types are created synchronously. Their status is either <code>CREATE_COMPLETE</code> or <code>CREATE_FAILED</code>.</p></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type is created asynchronously.</p></li>
    /// </ul>
    /// <p>Data catalog creation status:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATE_IN_PROGRESS</code>: Federated data catalog creation in progress.</p></li>
    /// <li>
    /// <p><code>CREATE_COMPLETE</code>: Data catalog creation complete.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED</code>: Data catalog could not be created.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_IN_PROGRESS</code>: Federated data catalog creation failed and is being removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_COMPLETE</code>: Federated data catalog creation failed and was removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_FAILED</code>: Federated data catalog creation failed but could not be removed.</p></li>
    /// </ul>
    /// <p>Data catalog deletion status:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_IN_PROGRESS</code>: Federated data catalog deletion in progress.</p></li>
    /// <li>
    /// <p><code>DELETE_COMPLETE</code>: Federated data catalog deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_FAILED</code>: Federated data catalog could not be deleted.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::DataCatalogStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the creation or deletion of the data catalog.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>LAMBDA</code>, <code>GLUE</code>, and <code>HIVE</code> data catalog types are created synchronously. Their status is either <code>CREATE_COMPLETE</code> or <code>CREATE_FAILED</code>.</p></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type is created asynchronously.</p></li>
    /// </ul>
    /// <p>Data catalog creation status:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATE_IN_PROGRESS</code>: Federated data catalog creation in progress.</p></li>
    /// <li>
    /// <p><code>CREATE_COMPLETE</code>: Data catalog creation complete.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED</code>: Data catalog could not be created.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_IN_PROGRESS</code>: Federated data catalog creation failed and is being removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_COMPLETE</code>: Federated data catalog creation failed and was removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_FAILED</code>: Federated data catalog creation failed but could not be removed.</p></li>
    /// </ul>
    /// <p>Data catalog deletion status:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_IN_PROGRESS</code>: Federated data catalog deletion in progress.</p></li>
    /// <li>
    /// <p><code>DELETE_COMPLETE</code>: Federated data catalog deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_FAILED</code>: Federated data catalog could not be deleted.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataCatalogStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the creation or deletion of the data catalog.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>LAMBDA</code>, <code>GLUE</code>, and <code>HIVE</code> data catalog types are created synchronously. Their status is either <code>CREATE_COMPLETE</code> or <code>CREATE_FAILED</code>.</p></li>
    /// <li>
    /// <p>The <code>FEDERATED</code> data catalog type is created asynchronously.</p></li>
    /// </ul>
    /// <p>Data catalog creation status:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATE_IN_PROGRESS</code>: Federated data catalog creation in progress.</p></li>
    /// <li>
    /// <p><code>CREATE_COMPLETE</code>: Data catalog creation complete.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED</code>: Data catalog could not be created.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_IN_PROGRESS</code>: Federated data catalog creation failed and is being removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_COMPLETE</code>: Federated data catalog creation failed and was removed.</p></li>
    /// <li>
    /// <p><code>CREATE_FAILED_CLEANUP_FAILED</code>: Federated data catalog creation failed but could not be removed.</p></li>
    /// </ul>
    /// <p>Data catalog deletion status:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE_IN_PROGRESS</code>: Federated data catalog deletion in progress.</p></li>
    /// <li>
    /// <p><code>DELETE_COMPLETE</code>: Federated data catalog deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_FAILED</code>: Federated data catalog could not be deleted.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataCatalogStatus> {
        &self.status
    }
    /// <p>The type of connection for a <code>FEDERATED</code> data catalog (for example, <code>REDSHIFT</code>, <code>MYSQL</code>, or <code>SQLSERVER</code>). For information about individual connectors, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connectors-available.html">Available data source connectors</a>.</p>
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of connection for a <code>FEDERATED</code> data catalog (for example, <code>REDSHIFT</code>, <code>MYSQL</code>, or <code>SQLSERVER</code>). For information about individual connectors, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connectors-available.html">Available data source connectors</a>.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The type of connection for a <code>FEDERATED</code> data catalog (for example, <code>REDSHIFT</code>, <code>MYSQL</code>, or <code>SQLSERVER</code>). For information about individual connectors, see <a href="https://docs.aws.amazon.com/athena/latest/ug/connectors-available.html">Available data source connectors</a>.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.connection_type
    }
    /// <p>Text of the error that occurred during data catalog creation or deletion.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Text of the error that occurred during data catalog creation or deletion.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>Text of the error that occurred during data catalog creation or deletion.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// Consumes the builder and constructs a [`DataCatalog`](crate::types::DataCatalog).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DataCatalogBuilder::name)
    /// - [`r#type`](crate::types::builders::DataCatalogBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::DataCatalog, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataCatalog {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DataCatalog",
                )
            })?,
            description: self.description,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DataCatalog",
                )
            })?,
            parameters: self.parameters,
            status: self.status,
            connection_type: self.connection_type,
            error: self.error,
        })
    }
}
