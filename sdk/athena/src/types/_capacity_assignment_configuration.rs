// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Assigns Athena workgroups (and hence their queries) to capacity reservations. A capacity reservation can have only one capacity assignment configuration, but the capacity assignment configuration can be made up of multiple individual assignments. Each assignment specifies how Athena queries can consume capacity from the capacity reservation that their workgroup is mapped to.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityAssignmentConfiguration {
    /// <p>The name of the reservation that the capacity assignment configuration is for.</p>
    pub capacity_reservation_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of assignments that make up the capacity assignment configuration.</p>
    pub capacity_assignments: ::std::option::Option<::std::vec::Vec<crate::types::CapacityAssignment>>,
}
impl CapacityAssignmentConfiguration {
    /// <p>The name of the reservation that the capacity assignment configuration is for.</p>
    pub fn capacity_reservation_name(&self) -> ::std::option::Option<&str> {
        self.capacity_reservation_name.as_deref()
    }
    /// <p>The list of assignments that make up the capacity assignment configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_assignments.is_none()`.
    pub fn capacity_assignments(&self) -> &[crate::types::CapacityAssignment] {
        self.capacity_assignments.as_deref().unwrap_or_default()
    }
}
impl CapacityAssignmentConfiguration {
    /// Creates a new builder-style object to manufacture [`CapacityAssignmentConfiguration`](crate::types::CapacityAssignmentConfiguration).
    pub fn builder() -> crate::types::builders::CapacityAssignmentConfigurationBuilder {
        crate::types::builders::CapacityAssignmentConfigurationBuilder::default()
    }
}

/// A builder for [`CapacityAssignmentConfiguration`](crate::types::CapacityAssignmentConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CapacityAssignmentConfigurationBuilder {
    pub(crate) capacity_reservation_name: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_assignments: ::std::option::Option<::std::vec::Vec<crate::types::CapacityAssignment>>,
}
impl CapacityAssignmentConfigurationBuilder {
    /// <p>The name of the reservation that the capacity assignment configuration is for.</p>
    pub fn capacity_reservation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_reservation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the reservation that the capacity assignment configuration is for.</p>
    pub fn set_capacity_reservation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_reservation_name = input;
        self
    }
    /// <p>The name of the reservation that the capacity assignment configuration is for.</p>
    pub fn get_capacity_reservation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_reservation_name
    }
    /// Appends an item to `capacity_assignments`.
    ///
    /// To override the contents of this collection use [`set_capacity_assignments`](Self::set_capacity_assignments).
    ///
    /// <p>The list of assignments that make up the capacity assignment configuration.</p>
    pub fn capacity_assignments(mut self, input: crate::types::CapacityAssignment) -> Self {
        let mut v = self.capacity_assignments.unwrap_or_default();
        v.push(input);
        self.capacity_assignments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of assignments that make up the capacity assignment configuration.</p>
    pub fn set_capacity_assignments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapacityAssignment>>) -> Self {
        self.capacity_assignments = input;
        self
    }
    /// <p>The list of assignments that make up the capacity assignment configuration.</p>
    pub fn get_capacity_assignments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapacityAssignment>> {
        &self.capacity_assignments
    }
    /// Consumes the builder and constructs a [`CapacityAssignmentConfiguration`](crate::types::CapacityAssignmentConfiguration).
    pub fn build(self) -> crate::types::CapacityAssignmentConfiguration {
        crate::types::CapacityAssignmentConfiguration {
            capacity_reservation_name: self.capacity_reservation_name,
            capacity_assignments: self.capacity_assignments,
        }
    }
}
