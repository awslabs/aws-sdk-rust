// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about whether the result of a previous query was reused.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultReuseInformation {
    /// <p>True if a previous query result was reused; false if the result was generated from a new run of the query.</p>
    #[doc(hidden)]
    pub reused_previous_result: bool,
}
impl ResultReuseInformation {
    /// <p>True if a previous query result was reused; false if the result was generated from a new run of the query.</p>
    pub fn reused_previous_result(&self) -> bool {
        self.reused_previous_result
    }
}
impl ResultReuseInformation {
    /// Creates a new builder-style object to manufacture [`ResultReuseInformation`](crate::types::ResultReuseInformation).
    pub fn builder() -> crate::types::builders::ResultReuseInformationBuilder {
        crate::types::builders::ResultReuseInformationBuilder::default()
    }
}

/// A builder for [`ResultReuseInformation`](crate::types::ResultReuseInformation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultReuseInformationBuilder {
    pub(crate) reused_previous_result: std::option::Option<bool>,
}
impl ResultReuseInformationBuilder {
    /// <p>True if a previous query result was reused; false if the result was generated from a new run of the query.</p>
    pub fn reused_previous_result(mut self, input: bool) -> Self {
        self.reused_previous_result = Some(input);
        self
    }
    /// <p>True if a previous query result was reused; false if the result was generated from a new run of the query.</p>
    pub fn set_reused_previous_result(mut self, input: std::option::Option<bool>) -> Self {
        self.reused_previous_result = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultReuseInformation`](crate::types::ResultReuseInformation).
    pub fn build(self) -> crate::types::ResultReuseInformation {
        crate::types::ResultReuseInformation {
            reused_previous_result: self.reused_previous_result.unwrap_or_default(),
        }
    }
}
