// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata and rows that make up a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <code>GetQueryResults</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultSet {
    /// <p>The rows in the table.</p>
    #[doc(hidden)]
    pub rows: std::option::Option<std::vec::Vec<crate::types::Row>>,
    /// <p>The metadata that describes the column structure and data types of a table of query results.</p>
    #[doc(hidden)]
    pub result_set_metadata: std::option::Option<crate::types::ResultSetMetadata>,
}
impl ResultSet {
    /// <p>The rows in the table.</p>
    pub fn rows(&self) -> std::option::Option<&[crate::types::Row]> {
        self.rows.as_deref()
    }
    /// <p>The metadata that describes the column structure and data types of a table of query results.</p>
    pub fn result_set_metadata(&self) -> std::option::Option<&crate::types::ResultSetMetadata> {
        self.result_set_metadata.as_ref()
    }
}
impl ResultSet {
    /// Creates a new builder-style object to manufacture [`ResultSet`](crate::types::ResultSet).
    pub fn builder() -> crate::types::builders::ResultSetBuilder {
        crate::types::builders::ResultSetBuilder::default()
    }
}

/// A builder for [`ResultSet`](crate::types::ResultSet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultSetBuilder {
    pub(crate) rows: std::option::Option<std::vec::Vec<crate::types::Row>>,
    pub(crate) result_set_metadata: std::option::Option<crate::types::ResultSetMetadata>,
}
impl ResultSetBuilder {
    /// Appends an item to `rows`.
    ///
    /// To override the contents of this collection use [`set_rows`](Self::set_rows).
    ///
    /// <p>The rows in the table.</p>
    pub fn rows(mut self, input: crate::types::Row) -> Self {
        let mut v = self.rows.unwrap_or_default();
        v.push(input);
        self.rows = Some(v);
        self
    }
    /// <p>The rows in the table.</p>
    pub fn set_rows(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Row>>,
    ) -> Self {
        self.rows = input;
        self
    }
    /// <p>The metadata that describes the column structure and data types of a table of query results.</p>
    pub fn result_set_metadata(mut self, input: crate::types::ResultSetMetadata) -> Self {
        self.result_set_metadata = Some(input);
        self
    }
    /// <p>The metadata that describes the column structure and data types of a table of query results.</p>
    pub fn set_result_set_metadata(
        mut self,
        input: std::option::Option<crate::types::ResultSetMetadata>,
    ) -> Self {
        self.result_set_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultSet`](crate::types::ResultSet).
    pub fn build(self) -> crate::types::ResultSet {
        crate::types::ResultSet {
            rows: self.rows,
            result_set_metadata: self.result_set_metadata,
        }
    }
}
