// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information for a notebook calculation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculationSummary {
    /// <p>The calculation execution UUID.</p>
    #[doc(hidden)]
    pub calculation_execution_id: std::option::Option<std::string::String>,
    /// <p>A description of the calculation.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Contains information about the status of the calculation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CalculationStatus>,
}
impl CalculationSummary {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(&self) -> std::option::Option<&str> {
        self.calculation_execution_id.as_deref()
    }
    /// <p>A description of the calculation.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CalculationStatus> {
        self.status.as_ref()
    }
}
impl CalculationSummary {
    /// Creates a new builder-style object to manufacture [`CalculationSummary`](crate::types::CalculationSummary).
    pub fn builder() -> crate::types::builders::CalculationSummaryBuilder {
        crate::types::builders::CalculationSummaryBuilder::default()
    }
}

/// A builder for [`CalculationSummary`](crate::types::CalculationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculationSummaryBuilder {
    pub(crate) calculation_execution_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::CalculationStatus>,
}
impl CalculationSummaryBuilder {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.calculation_execution_id = Some(input.into());
        self
    }
    /// <p>The calculation execution UUID.</p>
    pub fn set_calculation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.calculation_execution_id = input;
        self
    }
    /// <p>A description of the calculation.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the calculation.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn status(mut self, input: crate::types::CalculationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CalculationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculationSummary`](crate::types::CalculationSummary).
    pub fn build(self) -> crate::types::CalculationSummary {
        crate::types::CalculationSummary {
            calculation_execution_id: self.calculation_execution_id,
            description: self.description,
            status: self.status,
        }
    }
}
