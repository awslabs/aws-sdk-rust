// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The name of a prepared statement that could not be returned.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnprocessedPreparedStatementName {
    /// <p>The name of a prepared statement that could not be returned due to an error.</p>
    #[doc(hidden)]
    pub statement_name: std::option::Option<std::string::String>,
    /// <p>The error code returned when the request for the prepared statement failed.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p>
    /// <ul>
    /// <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li>
    /// <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li>
    /// <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl UnprocessedPreparedStatementName {
    /// <p>The name of a prepared statement that could not be returned due to an error.</p>
    pub fn statement_name(&self) -> std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>The error code returned when the request for the prepared statement failed.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p>
    /// <ul>
    /// <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li>
    /// <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li>
    /// <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li>
    /// </ul>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl UnprocessedPreparedStatementName {
    /// Creates a new builder-style object to manufacture [`UnprocessedPreparedStatementName`](crate::types::UnprocessedPreparedStatementName).
    pub fn builder() -> crate::types::builders::UnprocessedPreparedStatementNameBuilder {
        crate::types::builders::UnprocessedPreparedStatementNameBuilder::default()
    }
}

/// A builder for [`UnprocessedPreparedStatementName`](crate::types::UnprocessedPreparedStatementName).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnprocessedPreparedStatementNameBuilder {
    pub(crate) statement_name: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl UnprocessedPreparedStatementNameBuilder {
    /// <p>The name of a prepared statement that could not be returned due to an error.</p>
    pub fn statement_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.statement_name = Some(input.into());
        self
    }
    /// <p>The name of a prepared statement that could not be returned due to an error.</p>
    pub fn set_statement_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>The error code returned when the request for the prepared statement failed.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>The error code returned when the request for the prepared statement failed.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p>
    /// <ul>
    /// <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li>
    /// <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li>
    /// <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li>
    /// </ul>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p>
    /// <ul>
    /// <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li>
    /// <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li>
    /// <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li>
    /// </ul>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`UnprocessedPreparedStatementName`](crate::types::UnprocessedPreparedStatementName).
    pub fn build(self) -> crate::types::UnprocessedPreparedStatementName {
        crate::types::UnprocessedPreparedStatementName {
            statement_name: self.statement_name,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
