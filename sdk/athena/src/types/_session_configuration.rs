// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains session configuration information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SessionConfiguration {
    /// <p>The ARN of the execution role used for the session.</p>
    #[doc(hidden)]
    pub execution_role: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 location that stores information for the notebook.</p>
    #[doc(hidden)]
    pub working_directory: std::option::Option<std::string::String>,
    /// <p>The idle timeout in seconds for the session.</p>
    #[doc(hidden)]
    pub idle_timeout_seconds: std::option::Option<i64>,
    /// <p>If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.</p>
    #[doc(hidden)]
    pub encryption_configuration: std::option::Option<crate::types::EncryptionConfiguration>,
}
impl SessionConfiguration {
    /// <p>The ARN of the execution role used for the session.</p>
    pub fn execution_role(&self) -> std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The Amazon S3 location that stores information for the notebook.</p>
    pub fn working_directory(&self) -> std::option::Option<&str> {
        self.working_directory.as_deref()
    }
    /// <p>The idle timeout in seconds for the session.</p>
    pub fn idle_timeout_seconds(&self) -> std::option::Option<i64> {
        self.idle_timeout_seconds
    }
    /// <p>If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.</p>
    pub fn encryption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
}
impl SessionConfiguration {
    /// Creates a new builder-style object to manufacture [`SessionConfiguration`](crate::types::SessionConfiguration).
    pub fn builder() -> crate::types::builders::SessionConfigurationBuilder {
        crate::types::builders::SessionConfigurationBuilder::default()
    }
}

/// A builder for [`SessionConfiguration`](crate::types::SessionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionConfigurationBuilder {
    pub(crate) execution_role: std::option::Option<std::string::String>,
    pub(crate) working_directory: std::option::Option<std::string::String>,
    pub(crate) idle_timeout_seconds: std::option::Option<i64>,
    pub(crate) encryption_configuration: std::option::Option<crate::types::EncryptionConfiguration>,
}
impl SessionConfigurationBuilder {
    /// <p>The ARN of the execution role used for the session.</p>
    pub fn execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role = Some(input.into());
        self
    }
    /// <p>The ARN of the execution role used for the session.</p>
    pub fn set_execution_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The Amazon S3 location that stores information for the notebook.</p>
    pub fn working_directory(mut self, input: impl Into<std::string::String>) -> Self {
        self.working_directory = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location that stores information for the notebook.</p>
    pub fn set_working_directory(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.working_directory = input;
        self
    }
    /// <p>The idle timeout in seconds for the session.</p>
    pub fn idle_timeout_seconds(mut self, input: i64) -> Self {
        self.idle_timeout_seconds = Some(input);
        self
    }
    /// <p>The idle timeout in seconds for the session.</p>
    pub fn set_idle_timeout_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.idle_timeout_seconds = input;
        self
    }
    /// <p>If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.</p>
    pub fn encryption_configuration(
        mut self,
        input: crate::types::EncryptionConfiguration,
    ) -> Self {
        self.encryption_configuration = Some(input);
        self
    }
    /// <p>If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information.</p>
    pub fn set_encryption_configuration(
        mut self,
        input: std::option::Option<crate::types::EncryptionConfiguration>,
    ) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`SessionConfiguration`](crate::types::SessionConfiguration).
    pub fn build(self) -> crate::types::SessionConfiguration {
        crate::types::SessionConfiguration {
            execution_role: self.execution_role,
            working_directory: self.working_directory,
            idle_timeout_seconds: self.idle_timeout_seconds,
            encryption_configuration: self.encryption_configuration,
        }
    }
}
