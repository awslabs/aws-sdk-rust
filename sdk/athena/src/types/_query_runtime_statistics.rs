// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The query execution timeline, statistics on input and output rows and bytes, and the different query stages that form the query execution plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryRuntimeStatistics {
    /// <p>Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time.</p>
    #[doc(hidden)]
    pub timeline: std::option::Option<crate::types::QueryRuntimeStatisticsTimeline>,
    /// <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query.</p>
    #[doc(hidden)]
    pub rows: std::option::Option<crate::types::QueryRuntimeStatisticsRows>,
    /// <p>Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan.</p>
    #[doc(hidden)]
    pub output_stage: std::option::Option<crate::types::QueryStage>,
}
impl QueryRuntimeStatistics {
    /// <p>Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time.</p>
    pub fn timeline(&self) -> std::option::Option<&crate::types::QueryRuntimeStatisticsTimeline> {
        self.timeline.as_ref()
    }
    /// <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query.</p>
    pub fn rows(&self) -> std::option::Option<&crate::types::QueryRuntimeStatisticsRows> {
        self.rows.as_ref()
    }
    /// <p>Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan.</p>
    pub fn output_stage(&self) -> std::option::Option<&crate::types::QueryStage> {
        self.output_stage.as_ref()
    }
}
impl QueryRuntimeStatistics {
    /// Creates a new builder-style object to manufacture [`QueryRuntimeStatistics`](crate::types::QueryRuntimeStatistics).
    pub fn builder() -> crate::types::builders::QueryRuntimeStatisticsBuilder {
        crate::types::builders::QueryRuntimeStatisticsBuilder::default()
    }
}

/// A builder for [`QueryRuntimeStatistics`](crate::types::QueryRuntimeStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryRuntimeStatisticsBuilder {
    pub(crate) timeline: std::option::Option<crate::types::QueryRuntimeStatisticsTimeline>,
    pub(crate) rows: std::option::Option<crate::types::QueryRuntimeStatisticsRows>,
    pub(crate) output_stage: std::option::Option<crate::types::QueryStage>,
}
impl QueryRuntimeStatisticsBuilder {
    /// <p>Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time.</p>
    pub fn timeline(mut self, input: crate::types::QueryRuntimeStatisticsTimeline) -> Self {
        self.timeline = Some(input);
        self
    }
    /// <p>Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time.</p>
    pub fn set_timeline(
        mut self,
        input: std::option::Option<crate::types::QueryRuntimeStatisticsTimeline>,
    ) -> Self {
        self.timeline = input;
        self
    }
    /// <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query.</p>
    pub fn rows(mut self, input: crate::types::QueryRuntimeStatisticsRows) -> Self {
        self.rows = Some(input);
        self
    }
    /// <p>Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query.</p>
    pub fn set_rows(
        mut self,
        input: std::option::Option<crate::types::QueryRuntimeStatisticsRows>,
    ) -> Self {
        self.rows = input;
        self
    }
    /// <p>Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan.</p>
    pub fn output_stage(mut self, input: crate::types::QueryStage) -> Self {
        self.output_stage = Some(input);
        self
    }
    /// <p>Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan.</p>
    pub fn set_output_stage(
        mut self,
        input: std::option::Option<crate::types::QueryStage>,
    ) -> Self {
        self.output_stage = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryRuntimeStatistics`](crate::types::QueryRuntimeStatistics).
    pub fn build(self) -> crate::types::QueryRuntimeStatistics {
        crate::types::QueryRuntimeStatistics {
            timeline: self.timeline,
            rows: self.rows,
            output_stage: self.output_stage,
        }
    }
}
