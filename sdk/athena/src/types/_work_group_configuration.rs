// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <code>WorkGroupConfiguration$EnforceWorkGroupConfiguration</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkGroupConfiguration {
    /// <p>The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <code>ResultConfiguration$OutputLocation</code>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>.</p>
    #[doc(hidden)]
    pub result_configuration: std::option::Option<crate::types::ResultConfiguration>,
    /// <p>If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
    #[doc(hidden)]
    pub enforce_work_group_configuration: std::option::Option<bool>,
    /// <p>Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.</p>
    #[doc(hidden)]
    pub publish_cloud_watch_metrics_enabled: std::option::Option<bool>,
    /// <p>The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.</p>
    #[doc(hidden)]
    pub bytes_scanned_cutoff_per_query: std::option::Option<i64>,
    /// <p>If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    #[doc(hidden)]
    pub requester_pays_enabled: std::option::Option<bool>,
    /// <p>The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<crate::types::EngineVersion>,
    /// <p>Specifies a user defined JSON string that is passed to the notebook engine.</p>
    #[doc(hidden)]
    pub additional_configuration: std::option::Option<std::string::String>,
    /// <p>Role used in a notebook session for accessing the user's resources.</p>
    #[doc(hidden)]
    pub execution_role: std::option::Option<std::string::String>,
    /// <p>Specifies the KMS key that is used to encrypt the user's data stores in Athena.</p>
    #[doc(hidden)]
    pub customer_content_encryption_configuration:
        std::option::Option<crate::types::CustomerContentEncryptionConfiguration>,
}
impl WorkGroupConfiguration {
    /// <p>The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <code>ResultConfiguration$OutputLocation</code>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>.</p>
    pub fn result_configuration(&self) -> std::option::Option<&crate::types::ResultConfiguration> {
        self.result_configuration.as_ref()
    }
    /// <p>If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
    pub fn enforce_work_group_configuration(&self) -> std::option::Option<bool> {
        self.enforce_work_group_configuration
    }
    /// <p>Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.</p>
    pub fn publish_cloud_watch_metrics_enabled(&self) -> std::option::Option<bool> {
        self.publish_cloud_watch_metrics_enabled
    }
    /// <p>The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.</p>
    pub fn bytes_scanned_cutoff_per_query(&self) -> std::option::Option<i64> {
        self.bytes_scanned_cutoff_per_query
    }
    /// <p>If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    pub fn requester_pays_enabled(&self) -> std::option::Option<bool> {
        self.requester_pays_enabled
    }
    /// <p>The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.</p>
    pub fn engine_version(&self) -> std::option::Option<&crate::types::EngineVersion> {
        self.engine_version.as_ref()
    }
    /// <p>Specifies a user defined JSON string that is passed to the notebook engine.</p>
    pub fn additional_configuration(&self) -> std::option::Option<&str> {
        self.additional_configuration.as_deref()
    }
    /// <p>Role used in a notebook session for accessing the user's resources.</p>
    pub fn execution_role(&self) -> std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>Specifies the KMS key that is used to encrypt the user's data stores in Athena.</p>
    pub fn customer_content_encryption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CustomerContentEncryptionConfiguration> {
        self.customer_content_encryption_configuration.as_ref()
    }
}
impl WorkGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`WorkGroupConfiguration`](crate::types::WorkGroupConfiguration).
    pub fn builder() -> crate::types::builders::WorkGroupConfigurationBuilder {
        crate::types::builders::WorkGroupConfigurationBuilder::default()
    }
}

/// A builder for [`WorkGroupConfiguration`](crate::types::WorkGroupConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkGroupConfigurationBuilder {
    pub(crate) result_configuration: std::option::Option<crate::types::ResultConfiguration>,
    pub(crate) enforce_work_group_configuration: std::option::Option<bool>,
    pub(crate) publish_cloud_watch_metrics_enabled: std::option::Option<bool>,
    pub(crate) bytes_scanned_cutoff_per_query: std::option::Option<i64>,
    pub(crate) requester_pays_enabled: std::option::Option<bool>,
    pub(crate) engine_version: std::option::Option<crate::types::EngineVersion>,
    pub(crate) additional_configuration: std::option::Option<std::string::String>,
    pub(crate) execution_role: std::option::Option<std::string::String>,
    pub(crate) customer_content_encryption_configuration:
        std::option::Option<crate::types::CustomerContentEncryptionConfiguration>,
}
impl WorkGroupConfigurationBuilder {
    /// <p>The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <code>ResultConfiguration$OutputLocation</code>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>.</p>
    pub fn result_configuration(mut self, input: crate::types::ResultConfiguration) -> Self {
        self.result_configuration = Some(input);
        self
    }
    /// <p>The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <code>ResultConfiguration$OutputLocation</code>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>.</p>
    pub fn set_result_configuration(
        mut self,
        input: std::option::Option<crate::types::ResultConfiguration>,
    ) -> Self {
        self.result_configuration = input;
        self
    }
    /// <p>If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
    pub fn enforce_work_group_configuration(mut self, input: bool) -> Self {
        self.enforce_work_group_configuration = Some(input);
        self
    }
    /// <p>If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.</p>
    pub fn set_enforce_work_group_configuration(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.enforce_work_group_configuration = input;
        self
    }
    /// <p>Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.</p>
    pub fn publish_cloud_watch_metrics_enabled(mut self, input: bool) -> Self {
        self.publish_cloud_watch_metrics_enabled = Some(input);
        self
    }
    /// <p>Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.</p>
    pub fn set_publish_cloud_watch_metrics_enabled(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.publish_cloud_watch_metrics_enabled = input;
        self
    }
    /// <p>The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.</p>
    pub fn bytes_scanned_cutoff_per_query(mut self, input: i64) -> Self {
        self.bytes_scanned_cutoff_per_query = Some(input);
        self
    }
    /// <p>The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.</p>
    pub fn set_bytes_scanned_cutoff_per_query(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_scanned_cutoff_per_query = input;
        self
    }
    /// <p>If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    pub fn requester_pays_enabled(mut self, input: bool) -> Self {
        self.requester_pays_enabled = Some(input);
        self
    }
    /// <p>If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    pub fn set_requester_pays_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.requester_pays_enabled = input;
        self
    }
    /// <p>The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.</p>
    pub fn engine_version(mut self, input: crate::types::EngineVersion) -> Self {
        self.engine_version = Some(input);
        self
    }
    /// <p>The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting.</p>
    pub fn set_engine_version(
        mut self,
        input: std::option::Option<crate::types::EngineVersion>,
    ) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Specifies a user defined JSON string that is passed to the notebook engine.</p>
    pub fn additional_configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_configuration = Some(input.into());
        self
    }
    /// <p>Specifies a user defined JSON string that is passed to the notebook engine.</p>
    pub fn set_additional_configuration(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_configuration = input;
        self
    }
    /// <p>Role used in a notebook session for accessing the user's resources.</p>
    pub fn execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role = Some(input.into());
        self
    }
    /// <p>Role used in a notebook session for accessing the user's resources.</p>
    pub fn set_execution_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>Specifies the KMS key that is used to encrypt the user's data stores in Athena.</p>
    pub fn customer_content_encryption_configuration(
        mut self,
        input: crate::types::CustomerContentEncryptionConfiguration,
    ) -> Self {
        self.customer_content_encryption_configuration = Some(input);
        self
    }
    /// <p>Specifies the KMS key that is used to encrypt the user's data stores in Athena.</p>
    pub fn set_customer_content_encryption_configuration(
        mut self,
        input: std::option::Option<crate::types::CustomerContentEncryptionConfiguration>,
    ) -> Self {
        self.customer_content_encryption_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkGroupConfiguration`](crate::types::WorkGroupConfiguration).
    pub fn build(self) -> crate::types::WorkGroupConfiguration {
        crate::types::WorkGroupConfiguration {
            result_configuration: self.result_configuration,
            enforce_work_group_configuration: self.enforce_work_group_configuration,
            publish_cloud_watch_metrics_enabled: self.publish_cloud_watch_metrics_enabled,
            bytes_scanned_cutoff_per_query: self.bytes_scanned_cutoff_per_query,
            requester_pays_enabled: self.requester_pays_enabled,
            engine_version: self.engine_version,
            additional_configuration: self.additional_configuration,
            execution_role: self.execution_role,
            customer_content_encryption_configuration: self
                .customer_content_encryption_configuration,
        }
    }
}
