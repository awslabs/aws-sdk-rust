// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The database and data catalog context in which the query execution occurs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryExecutionContext {
    /// <p>The name of the database used in the query execution. The database must exist in the catalog.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>The name of the data catalog used in the query execution.</p>
    #[doc(hidden)]
    pub catalog: std::option::Option<std::string::String>,
}
impl QueryExecutionContext {
    /// <p>The name of the database used in the query execution. The database must exist in the catalog.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The name of the data catalog used in the query execution.</p>
    pub fn catalog(&self) -> std::option::Option<&str> {
        self.catalog.as_deref()
    }
}
impl QueryExecutionContext {
    /// Creates a new builder-style object to manufacture [`QueryExecutionContext`](crate::types::QueryExecutionContext).
    pub fn builder() -> crate::types::builders::QueryExecutionContextBuilder {
        crate::types::builders::QueryExecutionContextBuilder::default()
    }
}

/// A builder for [`QueryExecutionContext`](crate::types::QueryExecutionContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryExecutionContextBuilder {
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) catalog: std::option::Option<std::string::String>,
}
impl QueryExecutionContextBuilder {
    /// <p>The name of the database used in the query execution. The database must exist in the catalog.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The name of the database used in the query execution. The database must exist in the catalog.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the data catalog used in the query execution.</p>
    pub fn catalog(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog = Some(input.into());
        self
    }
    /// <p>The name of the data catalog used in the query execution.</p>
    pub fn set_catalog(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryExecutionContext`](crate::types::QueryExecutionContext).
    pub fn build(self) -> crate::types::QueryExecutionContext {
        crate::types::QueryExecutionContext {
            database: self.database,
            catalog: self.catalog,
        }
    }
}
