// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration information for the calculation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculationConfiguration {
    /// <p>A string that contains the code for the calculation.</p>
    #[doc(hidden)]
    pub code_block: std::option::Option<std::string::String>,
}
impl CalculationConfiguration {
    /// <p>A string that contains the code for the calculation.</p>
    pub fn code_block(&self) -> std::option::Option<&str> {
        self.code_block.as_deref()
    }
}
impl CalculationConfiguration {
    /// Creates a new builder-style object to manufacture [`CalculationConfiguration`](crate::types::CalculationConfiguration).
    pub fn builder() -> crate::types::builders::CalculationConfigurationBuilder {
        crate::types::builders::CalculationConfigurationBuilder::default()
    }
}

/// A builder for [`CalculationConfiguration`](crate::types::CalculationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculationConfigurationBuilder {
    pub(crate) code_block: std::option::Option<std::string::String>,
}
impl CalculationConfigurationBuilder {
    /// <p>A string that contains the code for the calculation.</p>
    pub fn code_block(mut self, input: impl Into<std::string::String>) -> Self {
        self.code_block = Some(input.into());
        self
    }
    /// <p>A string that contains the code for the calculation.</p>
    pub fn set_code_block(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code_block = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculationConfiguration`](crate::types::CalculationConfiguration).
    pub fn build(self) -> crate::types::CalculationConfiguration {
        crate::types::CalculationConfiguration {
            code_block: self.code_block,
        }
    }
}
