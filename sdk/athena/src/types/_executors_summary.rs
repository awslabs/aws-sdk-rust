// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about an executor.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutorsSummary {
    /// <p>The UUID of the executor.</p>
    pub executor_id: ::std::string::String,
    /// <p>The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).</p>
    pub executor_type: ::std::option::Option<crate::types::ExecutorType>,
    /// <p>The date and time that the executor started.</p>
    pub start_date_time: ::std::option::Option<i64>,
    /// <p>The date and time that the executor was terminated.</p>
    pub termination_date_time: ::std::option::Option<i64>,
    /// <p>The processing state of the executor. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The executor has been started.</p>
    /// <p> <code>REGISTERED</code> - The executor has been registered.</p>
    /// <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The executor is no longer running.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    pub executor_state: ::std::option::Option<crate::types::ExecutorState>,
    /// <p>The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.</p>
    pub executor_size: ::std::option::Option<i64>,
}
impl ExecutorsSummary {
    /// <p>The UUID of the executor.</p>
    pub fn executor_id(&self) -> &str {
        use std::ops::Deref;
        self.executor_id.deref()
    }
    /// <p>The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).</p>
    pub fn executor_type(&self) -> ::std::option::Option<&crate::types::ExecutorType> {
        self.executor_type.as_ref()
    }
    /// <p>The date and time that the executor started.</p>
    pub fn start_date_time(&self) -> ::std::option::Option<i64> {
        self.start_date_time
    }
    /// <p>The date and time that the executor was terminated.</p>
    pub fn termination_date_time(&self) -> ::std::option::Option<i64> {
        self.termination_date_time
    }
    /// <p>The processing state of the executor. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The executor has been started.</p>
    /// <p> <code>REGISTERED</code> - The executor has been registered.</p>
    /// <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The executor is no longer running.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    pub fn executor_state(&self) -> ::std::option::Option<&crate::types::ExecutorState> {
        self.executor_state.as_ref()
    }
    /// <p>The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.</p>
    pub fn executor_size(&self) -> ::std::option::Option<i64> {
        self.executor_size
    }
}
impl ExecutorsSummary {
    /// Creates a new builder-style object to manufacture [`ExecutorsSummary`](crate::types::ExecutorsSummary).
    pub fn builder() -> crate::types::builders::ExecutorsSummaryBuilder {
        crate::types::builders::ExecutorsSummaryBuilder::default()
    }
}

/// A builder for [`ExecutorsSummary`](crate::types::ExecutorsSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutorsSummaryBuilder {
    pub(crate) executor_id: ::std::option::Option<::std::string::String>,
    pub(crate) executor_type: ::std::option::Option<crate::types::ExecutorType>,
    pub(crate) start_date_time: ::std::option::Option<i64>,
    pub(crate) termination_date_time: ::std::option::Option<i64>,
    pub(crate) executor_state: ::std::option::Option<crate::types::ExecutorState>,
    pub(crate) executor_size: ::std::option::Option<i64>,
}
impl ExecutorsSummaryBuilder {
    /// <p>The UUID of the executor.</p>
    /// This field is required.
    pub fn executor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The UUID of the executor.</p>
    pub fn set_executor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executor_id = input;
        self
    }
    /// <p>The UUID of the executor.</p>
    pub fn get_executor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.executor_id
    }
    /// <p>The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).</p>
    pub fn executor_type(mut self, input: crate::types::ExecutorType) -> Self {
        self.executor_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).</p>
    pub fn set_executor_type(mut self, input: ::std::option::Option<crate::types::ExecutorType>) -> Self {
        self.executor_type = input;
        self
    }
    /// <p>The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>).</p>
    pub fn get_executor_type(&self) -> &::std::option::Option<crate::types::ExecutorType> {
        &self.executor_type
    }
    /// <p>The date and time that the executor started.</p>
    pub fn start_date_time(mut self, input: i64) -> Self {
        self.start_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the executor started.</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time that the executor started.</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<i64> {
        &self.start_date_time
    }
    /// <p>The date and time that the executor was terminated.</p>
    pub fn termination_date_time(mut self, input: i64) -> Self {
        self.termination_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the executor was terminated.</p>
    pub fn set_termination_date_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.termination_date_time = input;
        self
    }
    /// <p>The date and time that the executor was terminated.</p>
    pub fn get_termination_date_time(&self) -> &::std::option::Option<i64> {
        &self.termination_date_time
    }
    /// <p>The processing state of the executor. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The executor has been started.</p>
    /// <p> <code>REGISTERED</code> - The executor has been registered.</p>
    /// <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The executor is no longer running.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    pub fn executor_state(mut self, input: crate::types::ExecutorState) -> Self {
        self.executor_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing state of the executor. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The executor has been started.</p>
    /// <p> <code>REGISTERED</code> - The executor has been registered.</p>
    /// <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The executor is no longer running.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    pub fn set_executor_state(mut self, input: ::std::option::Option<crate::types::ExecutorState>) -> Self {
        self.executor_state = input;
        self
    }
    /// <p>The processing state of the executor. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The executor has been started.</p>
    /// <p> <code>REGISTERED</code> - The executor has been registered.</p>
    /// <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The executor is no longer running.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    pub fn get_executor_state(&self) -> &::std::option::Option<crate::types::ExecutorState> {
        &self.executor_state
    }
    /// <p>The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.</p>
    pub fn executor_size(mut self, input: i64) -> Self {
        self.executor_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.</p>
    pub fn set_executor_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.executor_size = input;
        self
    }
    /// <p>The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power.</p>
    pub fn get_executor_size(&self) -> &::std::option::Option<i64> {
        &self.executor_size
    }
    /// Consumes the builder and constructs a [`ExecutorsSummary`](crate::types::ExecutorsSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`executor_id`](crate::types::builders::ExecutorsSummaryBuilder::executor_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ExecutorsSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExecutorsSummary {
            executor_id: self.executor_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "executor_id",
                    "executor_id was not specified but it is required when building ExecutorsSummary",
                )
            })?,
            executor_type: self.executor_type,
            start_date_time: self.start_date_time,
            termination_date_time: self.termination_date_time,
            executor_state: self.executor_state,
            executor_size: self.executor_size,
        })
    }
}
