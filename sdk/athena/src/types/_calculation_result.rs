// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an application-specific calculation result.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculationResult {
    /// <p>The Amazon S3 location of the <code>stdout</code> file for the calculation.</p>
    #[doc(hidden)]
    pub std_out_s3_uri: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 location of the <code>stderr</code> error messages file for the calculation.</p>
    #[doc(hidden)]
    pub std_error_s3_uri: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 location of the folder for the calculation results.</p>
    #[doc(hidden)]
    pub result_s3_uri: std::option::Option<std::string::String>,
    /// <p>The data format of the calculation result.</p>
    #[doc(hidden)]
    pub result_type: std::option::Option<std::string::String>,
}
impl CalculationResult {
    /// <p>The Amazon S3 location of the <code>stdout</code> file for the calculation.</p>
    pub fn std_out_s3_uri(&self) -> std::option::Option<&str> {
        self.std_out_s3_uri.as_deref()
    }
    /// <p>The Amazon S3 location of the <code>stderr</code> error messages file for the calculation.</p>
    pub fn std_error_s3_uri(&self) -> std::option::Option<&str> {
        self.std_error_s3_uri.as_deref()
    }
    /// <p>The Amazon S3 location of the folder for the calculation results.</p>
    pub fn result_s3_uri(&self) -> std::option::Option<&str> {
        self.result_s3_uri.as_deref()
    }
    /// <p>The data format of the calculation result.</p>
    pub fn result_type(&self) -> std::option::Option<&str> {
        self.result_type.as_deref()
    }
}
impl CalculationResult {
    /// Creates a new builder-style object to manufacture [`CalculationResult`](crate::types::CalculationResult).
    pub fn builder() -> crate::types::builders::CalculationResultBuilder {
        crate::types::builders::CalculationResultBuilder::default()
    }
}

/// A builder for [`CalculationResult`](crate::types::CalculationResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculationResultBuilder {
    pub(crate) std_out_s3_uri: std::option::Option<std::string::String>,
    pub(crate) std_error_s3_uri: std::option::Option<std::string::String>,
    pub(crate) result_s3_uri: std::option::Option<std::string::String>,
    pub(crate) result_type: std::option::Option<std::string::String>,
}
impl CalculationResultBuilder {
    /// <p>The Amazon S3 location of the <code>stdout</code> file for the calculation.</p>
    pub fn std_out_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.std_out_s3_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the <code>stdout</code> file for the calculation.</p>
    pub fn set_std_out_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.std_out_s3_uri = input;
        self
    }
    /// <p>The Amazon S3 location of the <code>stderr</code> error messages file for the calculation.</p>
    pub fn std_error_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.std_error_s3_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the <code>stderr</code> error messages file for the calculation.</p>
    pub fn set_std_error_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.std_error_s3_uri = input;
        self
    }
    /// <p>The Amazon S3 location of the folder for the calculation results.</p>
    pub fn result_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_s3_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the folder for the calculation results.</p>
    pub fn set_result_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.result_s3_uri = input;
        self
    }
    /// <p>The data format of the calculation result.</p>
    pub fn result_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_type = Some(input.into());
        self
    }
    /// <p>The data format of the calculation result.</p>
    pub fn set_result_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.result_type = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculationResult`](crate::types::CalculationResult).
    pub fn build(self) -> crate::types::CalculationResult {
        crate::types::CalculationResult {
            std_out_s3_uri: self.std_out_s3_uri,
            std_error_s3_uri: self.std_error_s3_uri,
            result_s3_uri: self.result_s3_uri,
            result_type: self.result_type,
        }
    }
}
