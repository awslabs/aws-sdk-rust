// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <code>GetQueryResults</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResultSetMetadata {
    /// <p>Information about the columns returned in a query result metadata.</p>
    pub column_info: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>,
}
impl ResultSetMetadata {
    /// <p>Information about the columns returned in a query result metadata.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.column_info.is_none()`.
    pub fn column_info(&self) -> &[crate::types::ColumnInfo] {
        self.column_info.as_deref().unwrap_or_default()
    }
}
impl ResultSetMetadata {
    /// Creates a new builder-style object to manufacture [`ResultSetMetadata`](crate::types::ResultSetMetadata).
    pub fn builder() -> crate::types::builders::ResultSetMetadataBuilder {
        crate::types::builders::ResultSetMetadataBuilder::default()
    }
}

/// A builder for [`ResultSetMetadata`](crate::types::ResultSetMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResultSetMetadataBuilder {
    pub(crate) column_info: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>,
}
impl ResultSetMetadataBuilder {
    /// Appends an item to `column_info`.
    ///
    /// To override the contents of this collection use [`set_column_info`](Self::set_column_info).
    ///
    /// <p>Information about the columns returned in a query result metadata.</p>
    pub fn column_info(mut self, input: crate::types::ColumnInfo) -> Self {
        let mut v = self.column_info.unwrap_or_default();
        v.push(input);
        self.column_info = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the columns returned in a query result metadata.</p>
    pub fn set_column_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>) -> Self {
        self.column_info = input;
        self
    }
    /// <p>Information about the columns returned in a query result metadata.</p>
    pub fn get_column_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>> {
        &self.column_info
    }
    /// Consumes the builder and constructs a [`ResultSetMetadata`](crate::types::ResultSetMetadata).
    pub fn build(self) -> crate::types::ResultSetMetadata {
        crate::types::ResultSetMetadata {
            column_info: self.column_info,
        }
    }
}
