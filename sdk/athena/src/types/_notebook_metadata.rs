// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata for notebook, including the notebook name, ID, workgroup, and time created.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotebookMetadata {
    /// <p>The notebook ID.</p>
    #[doc(hidden)]
    pub notebook_id: std::option::Option<std::string::String>,
    /// <p>The name of the notebook.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the Spark enabled workgroup to which the notebook belongs.</p>
    #[doc(hidden)]
    pub work_group: std::option::Option<std::string::String>,
    /// <p>The time when the notebook was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of notebook. Currently, the only valid type is <code>IPYNB</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::NotebookType>,
    /// <p>The time when the notebook was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl NotebookMetadata {
    /// <p>The notebook ID.</p>
    pub fn notebook_id(&self) -> std::option::Option<&str> {
        self.notebook_id.as_deref()
    }
    /// <p>The name of the notebook.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the Spark enabled workgroup to which the notebook belongs.</p>
    pub fn work_group(&self) -> std::option::Option<&str> {
        self.work_group.as_deref()
    }
    /// <p>The time when the notebook was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The type of notebook. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::NotebookType> {
        self.r#type.as_ref()
    }
    /// <p>The time when the notebook was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl NotebookMetadata {
    /// Creates a new builder-style object to manufacture [`NotebookMetadata`](crate::types::NotebookMetadata).
    pub fn builder() -> crate::types::builders::NotebookMetadataBuilder {
        crate::types::builders::NotebookMetadataBuilder::default()
    }
}

/// A builder for [`NotebookMetadata`](crate::types::NotebookMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotebookMetadataBuilder {
    pub(crate) notebook_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) work_group: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) r#type: std::option::Option<crate::types::NotebookType>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl NotebookMetadataBuilder {
    /// <p>The notebook ID.</p>
    pub fn notebook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.notebook_id = Some(input.into());
        self
    }
    /// <p>The notebook ID.</p>
    pub fn set_notebook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.notebook_id = input;
        self
    }
    /// <p>The name of the notebook.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the notebook.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Spark enabled workgroup to which the notebook belongs.</p>
    pub fn work_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_group = Some(input.into());
        self
    }
    /// <p>The name of the Spark enabled workgroup to which the notebook belongs.</p>
    pub fn set_work_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// <p>The time when the notebook was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the notebook was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The type of notebook. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn r#type(mut self, input: crate::types::NotebookType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of notebook. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::NotebookType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The time when the notebook was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time when the notebook was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`NotebookMetadata`](crate::types::NotebookMetadata).
    pub fn build(self) -> crate::types::NotebookMetadata {
        crate::types::NotebookMetadata {
            notebook_id: self.notebook_id,
            name: self.name,
            work_group: self.work_group,
            creation_time: self.creation_time,
            r#type: self.r#type,
            last_modified_time: self.last_modified_time,
        }
    }
}
