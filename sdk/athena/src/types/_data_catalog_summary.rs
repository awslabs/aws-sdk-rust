// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary information for the data catalog, which includes its name and type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataCatalogSummary {
    /// <p>The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    #[doc(hidden)]
    pub catalog_name: std::option::Option<std::string::String>,
    /// <p>The data catalog type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DataCatalogType>,
}
impl DataCatalogSummary {
    /// <p>The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn catalog_name(&self) -> std::option::Option<&str> {
        self.catalog_name.as_deref()
    }
    /// <p>The data catalog type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DataCatalogType> {
        self.r#type.as_ref()
    }
}
impl DataCatalogSummary {
    /// Creates a new builder-style object to manufacture [`DataCatalogSummary`](crate::types::DataCatalogSummary).
    pub fn builder() -> crate::types::builders::DataCatalogSummaryBuilder {
        crate::types::builders::DataCatalogSummaryBuilder::default()
    }
}

/// A builder for [`DataCatalogSummary`](crate::types::DataCatalogSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataCatalogSummaryBuilder {
    pub(crate) catalog_name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DataCatalogType>,
}
impl DataCatalogSummaryBuilder {
    /// <p>The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn catalog_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_name = Some(input.into());
        self
    }
    /// <p>The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    pub fn set_catalog_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_name = input;
        self
    }
    /// <p>The data catalog type.</p>
    pub fn r#type(mut self, input: crate::types::DataCatalogType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The data catalog type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DataCatalogType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`DataCatalogSummary`](crate::types::DataCatalogSummary).
    pub fn build(self) -> crate::types::DataCatalogSummary {
        crate::types::DataCatalogSummary {
            catalog_name: self.catalog_name,
            r#type: self.r#type,
        }
    }
}
