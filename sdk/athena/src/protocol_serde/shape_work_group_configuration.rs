// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_work_group_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WorkGroupConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.result_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ResultConfiguration").start_object();
        crate::protocol_serde::shape_result_configuration::ser_result_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.enforce_work_group_configuration {
        object.key("EnforceWorkGroupConfiguration").boolean(*var_3);
    }
    if let Some(var_4) = &input.publish_cloud_watch_metrics_enabled {
        object.key("PublishCloudWatchMetricsEnabled").boolean(*var_4);
    }
    if let Some(var_5) = &input.bytes_scanned_cutoff_per_query {
        object.key("BytesScannedCutoffPerQuery").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.requester_pays_enabled {
        object.key("RequesterPaysEnabled").boolean(*var_6);
    }
    if let Some(var_7) = &input.engine_version {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EngineVersion").start_object();
        crate::protocol_serde::shape_engine_version::ser_engine_version(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.additional_configuration {
        object.key("AdditionalConfiguration").string(var_9.as_str());
    }
    if let Some(var_10) = &input.execution_role {
        object.key("ExecutionRole").string(var_10.as_str());
    }
    if let Some(var_11) = &input.customer_content_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("CustomerContentEncryptionConfiguration").start_object();
        crate::protocol_serde::shape_customer_content_encryption_configuration::ser_customer_content_encryption_configuration(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.enable_minimum_encryption_configuration {
        object.key("EnableMinimumEncryptionConfiguration").boolean(*var_13);
    }
    Ok(())
}

pub(crate) fn de_work_group_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::WorkGroupConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::WorkGroupConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ResultConfiguration" => {
                            builder =
                                builder.set_result_configuration(crate::protocol_serde::shape_result_configuration::de_result_configuration(tokens)?);
                        }
                        "EnforceWorkGroupConfiguration" => {
                            builder = builder
                                .set_enforce_work_group_configuration(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PublishCloudWatchMetricsEnabled" => {
                            builder = builder
                                .set_publish_cloud_watch_metrics_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "BytesScannedCutoffPerQuery" => {
                            builder = builder.set_bytes_scanned_cutoff_per_query(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "RequesterPaysEnabled" => {
                            builder = builder.set_requester_pays_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "EngineVersion" => {
                            builder = builder.set_engine_version(crate::protocol_serde::shape_engine_version::de_engine_version(tokens)?);
                        }
                        "AdditionalConfiguration" => {
                            builder = builder.set_additional_configuration(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ExecutionRole" => {
                            builder = builder.set_execution_role(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CustomerContentEncryptionConfiguration" => {
                            builder = builder.set_customer_content_encryption_configuration(
                                crate::protocol_serde::shape_customer_content_encryption_configuration::de_customer_content_encryption_configuration(
                                    tokens,
                                )?,
                            );
                        }
                        "EnableMinimumEncryptionConfiguration" => {
                            builder = builder.set_enable_minimum_encryption_configuration(
                                ::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
