// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_work_group_configuration_updates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WorkGroupConfigurationUpdates,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.enforce_work_group_configuration {
        object.key("EnforceWorkGroupConfiguration").boolean(*var_1);
    }
    if let Some(var_2) = &input.result_configuration_updates {
        #[allow(unused_mut)]
        let mut object_3 = object.key("ResultConfigurationUpdates").start_object();
        crate::protocol_serde::shape_result_configuration_updates::ser_result_configuration_updates(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.publish_cloud_watch_metrics_enabled {
        object
            .key("PublishCloudWatchMetricsEnabled")
            .boolean(*var_4);
    }
    if let Some(var_5) = &input.bytes_scanned_cutoff_per_query {
        object.key("BytesScannedCutoffPerQuery").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.remove_bytes_scanned_cutoff_per_query {
        object
            .key("RemoveBytesScannedCutoffPerQuery")
            .boolean(*var_6);
    }
    if let Some(var_7) = &input.requester_pays_enabled {
        object.key("RequesterPaysEnabled").boolean(*var_7);
    }
    if let Some(var_8) = &input.engine_version {
        #[allow(unused_mut)]
        let mut object_9 = object.key("EngineVersion").start_object();
        crate::protocol_serde::shape_engine_version::ser_engine_version(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.remove_customer_content_encryption_configuration {
        object
            .key("RemoveCustomerContentEncryptionConfiguration")
            .boolean(*var_10);
    }
    if let Some(var_11) = &input.additional_configuration {
        object
            .key("AdditionalConfiguration")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.execution_role {
        object.key("ExecutionRole").string(var_12.as_str());
    }
    if let Some(var_13) = &input.customer_content_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object
            .key("CustomerContentEncryptionConfiguration")
            .start_object();
        crate::protocol_serde::shape_customer_content_encryption_configuration::ser_customer_content_encryption_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
