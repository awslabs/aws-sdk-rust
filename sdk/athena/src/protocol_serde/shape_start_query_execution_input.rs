// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_query_execution_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_query_execution::StartQueryExecutionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.query_string {
        object.key("QueryString").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.query_execution_context {
        #[allow(unused_mut)]
        let mut object_4 = object.key("QueryExecutionContext").start_object();
        crate::protocol_serde::shape_query_execution_context::ser_query_execution_context(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.result_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ResultConfiguration").start_object();
        crate::protocol_serde::shape_result_configuration::ser_result_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.work_group {
        object.key("WorkGroup").string(var_7.as_str());
    }
    if let Some(var_8) = &input.execution_parameters {
        let mut array_9 = object.key("ExecutionParameters").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.result_reuse_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ResultReuseConfiguration").start_object();
        crate::protocol_serde::shape_result_reuse_configuration::ser_result_reuse_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
