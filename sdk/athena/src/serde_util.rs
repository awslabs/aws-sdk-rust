// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_presigned_notebook_url_output_correct_errors(
    mut builder: crate::operation::create_presigned_notebook_url::builders::CreatePresignedNotebookUrlOutputBuilder,
) -> crate::operation::create_presigned_notebook_url::builders::CreatePresignedNotebookUrlOutputBuilder {
    if builder.notebook_url.is_none() {
        builder.notebook_url = Some(Default::default())
    }
    if builder.auth_token.is_none() {
        builder.auth_token = Some(Default::default())
    }
    if builder.auth_token_expiration_time.is_none() {
        builder.auth_token_expiration_time = Some(Default::default())
    }
    builder
}

pub(crate) fn get_capacity_assignment_configuration_output_correct_errors(
    mut builder: crate::operation::get_capacity_assignment_configuration::builders::GetCapacityAssignmentConfigurationOutputBuilder,
) -> crate::operation::get_capacity_assignment_configuration::builders::GetCapacityAssignmentConfigurationOutputBuilder {
    if builder.capacity_assignment_configuration.is_none() {
        builder.capacity_assignment_configuration = {
            let builder = crate::types::builders::CapacityAssignmentConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_capacity_reservation_output_correct_errors(
    mut builder: crate::operation::get_capacity_reservation::builders::GetCapacityReservationOutputBuilder,
) -> crate::operation::get_capacity_reservation::builders::GetCapacityReservationOutputBuilder {
    if builder.capacity_reservation.is_none() {
        builder.capacity_reservation = {
            let builder = crate::types::builders::CapacityReservationBuilder::default();
            crate::serde_util::capacity_reservation_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_capacity_reservations_output_correct_errors(
    mut builder: crate::operation::list_capacity_reservations::builders::ListCapacityReservationsOutputBuilder,
) -> crate::operation::list_capacity_reservations::builders::ListCapacityReservationsOutputBuilder {
    if builder.capacity_reservations.is_none() {
        builder.capacity_reservations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_executors_output_correct_errors(
    mut builder: crate::operation::list_executors::builders::ListExecutorsOutputBuilder,
) -> crate::operation::list_executors::builders::ListExecutorsOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_notebook_sessions_output_correct_errors(
    mut builder: crate::operation::list_notebook_sessions::builders::ListNotebookSessionsOutputBuilder,
) -> crate::operation::list_notebook_sessions::builders::ListNotebookSessionsOutputBuilder {
    if builder.notebook_sessions_list.is_none() {
        builder.notebook_sessions_list = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_reservation_correct_errors(
    mut builder: crate::types::builders::CapacityReservationBuilder,
) -> crate::types::builders::CapacityReservationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CapacityReservationStatus>().ok()
    }
    if builder.target_dpus.is_none() {
        builder.target_dpus = Some(Default::default())
    }
    if builder.allocated_dpus.is_none() {
        builder.allocated_dpus = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_catalog_correct_errors(mut builder: crate::types::builders::DataCatalogBuilder) -> crate::types::builders::DataCatalogBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataCatalogType>().ok()
    }
    builder
}

pub(crate) fn database_correct_errors(mut builder: crate::types::builders::DatabaseBuilder) -> crate::types::builders::DatabaseBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn engine_configuration_correct_errors(
    mut builder: crate::types::builders::EngineConfigurationBuilder,
) -> crate::types::builders::EngineConfigurationBuilder {
    if builder.max_concurrent_dpus.is_none() {
        builder.max_concurrent_dpus = Some(Default::default())
    }
    builder
}

pub(crate) fn named_query_correct_errors(mut builder: crate::types::builders::NamedQueryBuilder) -> crate::types::builders::NamedQueryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    builder
}

pub(crate) fn table_metadata_correct_errors(
    mut builder: crate::types::builders::TableMetadataBuilder,
) -> crate::types::builders::TableMetadataBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn work_group_correct_errors(mut builder: crate::types::builders::WorkGroupBuilder) -> crate::types::builders::WorkGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_allocation_correct_errors(
    mut builder: crate::types::builders::CapacityAllocationBuilder,
) -> crate::types::builders::CapacityAllocationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CapacityAllocationStatus>().ok()
    }
    if builder.request_time.is_none() {
        builder.request_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn encryption_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigurationBuilder,
) -> crate::types::builders::EncryptionConfigurationBuilder {
    if builder.encryption_option.is_none() {
        builder.encryption_option = "no value was set".parse::<crate::types::EncryptionOption>().ok()
    }
    builder
}

pub(crate) fn executors_summary_correct_errors(
    mut builder: crate::types::builders::ExecutorsSummaryBuilder,
) -> crate::types::builders::ExecutorsSummaryBuilder {
    if builder.executor_id.is_none() {
        builder.executor_id = Some(Default::default())
    }
    builder
}

pub(crate) fn acl_configuration_correct_errors(
    mut builder: crate::types::builders::AclConfigurationBuilder,
) -> crate::types::builders::AclConfigurationBuilder {
    if builder.s3_acl_option.is_none() {
        builder.s3_acl_option = "no value was set".parse::<crate::types::S3AclOption>().ok()
    }
    builder
}

pub(crate) fn column_correct_errors(mut builder: crate::types::builders::ColumnBuilder) -> crate::types::builders::ColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_content_encryption_configuration_correct_errors(
    mut builder: crate::types::builders::CustomerContentEncryptionConfigurationBuilder,
) -> crate::types::builders::CustomerContentEncryptionConfigurationBuilder {
    if builder.kms_key.is_none() {
        builder.kms_key = Some(Default::default())
    }
    builder
}

pub(crate) fn result_reuse_by_age_configuration_correct_errors(
    mut builder: crate::types::builders::ResultReuseByAgeConfigurationBuilder,
) -> crate::types::builders::ResultReuseByAgeConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn result_reuse_information_correct_errors(
    mut builder: crate::types::builders::ResultReuseInformationBuilder,
) -> crate::types::builders::ResultReuseInformationBuilder {
    if builder.reused_previous_result.is_none() {
        builder.reused_previous_result = Some(Default::default())
    }
    builder
}

pub(crate) fn column_info_correct_errors(mut builder: crate::types::builders::ColumnInfoBuilder) -> crate::types::builders::ColumnInfoBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}
