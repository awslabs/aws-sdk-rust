// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Athena
///
/// Client for invoking operations on Amazon Athena. Each operation on Amazon Athena is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_athena::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_athena::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_athena::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchGetNamedQuery`](crate::client::fluent_builders::BatchGetNamedQuery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`named_query_ids(Vec<String>)`](crate::client::fluent_builders::BatchGetNamedQuery::named_query_ids) / [`set_named_query_ids(Option<Vec<String>>)`](crate::client::fluent_builders::BatchGetNamedQuery::set_named_query_ids): <p>An array of query IDs.</p>
    /// - On success, responds with [`BatchGetNamedQueryOutput`](crate::output::BatchGetNamedQueryOutput) with field(s):
    ///   - [`named_queries(Option<Vec<NamedQuery>>)`](crate::output::BatchGetNamedQueryOutput::named_queries): <p>Information about the named query IDs submitted.</p>
    ///   - [`unprocessed_named_query_ids(Option<Vec<UnprocessedNamedQueryId>>)`](crate::output::BatchGetNamedQueryOutput::unprocessed_named_query_ids): <p>Information about provided query IDs.</p>
    /// - On failure, responds with [`SdkError<BatchGetNamedQueryError>`](crate::error::BatchGetNamedQueryError)
    pub fn batch_get_named_query(&self) -> crate::client::fluent_builders::BatchGetNamedQuery {
        crate::client::fluent_builders::BatchGetNamedQuery::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchGetPreparedStatement`](crate::client::fluent_builders::BatchGetPreparedStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`prepared_statement_names(Vec<String>)`](crate::client::fluent_builders::BatchGetPreparedStatement::prepared_statement_names) / [`set_prepared_statement_names(Option<Vec<String>>)`](crate::client::fluent_builders::BatchGetPreparedStatement::set_prepared_statement_names): <p>A list of prepared statement names to return.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::BatchGetPreparedStatement::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::BatchGetPreparedStatement::set_work_group): <p>The name of the workgroup to which the prepared statements belong.</p>
    /// - On success, responds with [`BatchGetPreparedStatementOutput`](crate::output::BatchGetPreparedStatementOutput) with field(s):
    ///   - [`prepared_statements(Option<Vec<PreparedStatement>>)`](crate::output::BatchGetPreparedStatementOutput::prepared_statements): <p>The list of prepared statements returned.</p>
    ///   - [`unprocessed_prepared_statement_names(Option<Vec<UnprocessedPreparedStatementName>>)`](crate::output::BatchGetPreparedStatementOutput::unprocessed_prepared_statement_names): <p>A list of one or more prepared statements that were requested but could not be returned.</p>
    /// - On failure, responds with [`SdkError<BatchGetPreparedStatementError>`](crate::error::BatchGetPreparedStatementError)
    pub fn batch_get_prepared_statement(
        &self,
    ) -> crate::client::fluent_builders::BatchGetPreparedStatement {
        crate::client::fluent_builders::BatchGetPreparedStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchGetQueryExecution`](crate::client::fluent_builders::BatchGetQueryExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_execution_ids(Vec<String>)`](crate::client::fluent_builders::BatchGetQueryExecution::query_execution_ids) / [`set_query_execution_ids(Option<Vec<String>>)`](crate::client::fluent_builders::BatchGetQueryExecution::set_query_execution_ids): <p>An array of query execution IDs.</p>
    /// - On success, responds with [`BatchGetQueryExecutionOutput`](crate::output::BatchGetQueryExecutionOutput) with field(s):
    ///   - [`query_executions(Option<Vec<QueryExecution>>)`](crate::output::BatchGetQueryExecutionOutput::query_executions): <p>Information about a query execution.</p>
    ///   - [`unprocessed_query_execution_ids(Option<Vec<UnprocessedQueryExecutionId>>)`](crate::output::BatchGetQueryExecutionOutput::unprocessed_query_execution_ids): <p>Information about the query executions that failed to run.</p>
    /// - On failure, responds with [`SdkError<BatchGetQueryExecutionError>`](crate::error::BatchGetQueryExecutionError)
    pub fn batch_get_query_execution(
        &self,
    ) -> crate::client::fluent_builders::BatchGetQueryExecution {
        crate::client::fluent_builders::BatchGetQueryExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDataCatalog`](crate::client::fluent_builders::CreateDataCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDataCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDataCatalog::set_name): <p>The name of the data catalog to create. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    ///   - [`r#type(DataCatalogType)`](crate::client::fluent_builders::CreateDataCatalog::type) / [`set_type(Option<DataCatalogType>)`](crate::client::fluent_builders::CreateDataCatalog::set_type): <p>The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDataCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDataCatalog::set_description): <p>A description of the data catalog to be created.</p>
    ///   - [`parameters(HashMap<String, String>)`](crate::client::fluent_builders::CreateDataCatalog::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateDataCatalog::set_parameters): <p>Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. </p>  <ul>   <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li>   <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>    <ul>     <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li>     <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li>    </ul> </li>   <li> <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue Data Catalog belongs.</p> <p> <code>catalog-id=<i>catalog_id</i> </code> </p>    <ul>     <li> <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p> </li>     <li> <p>Queries that specify a Glue Data Catalog other than the default <code>AwsDataCatalog</code> must be run on Athena engine version 2.</p> </li>     <li> <p>In Regions where Athena engine version 2 is not available, creating new Glue data catalogs results in an <code>INVALID_INPUT</code> error.</p> </li>    </ul> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDataCatalog::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDataCatalog::set_tags): <p>A list of comma separated tags to add to the data catalog that is created.</p>
    /// - On success, responds with [`CreateDataCatalogOutput`](crate::output::CreateDataCatalogOutput)

    /// - On failure, responds with [`SdkError<CreateDataCatalogError>`](crate::error::CreateDataCatalogError)
    pub fn create_data_catalog(&self) -> crate::client::fluent_builders::CreateDataCatalog {
        crate::client::fluent_builders::CreateDataCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateNamedQuery`](crate::client::fluent_builders::CreateNamedQuery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_name): <p>The query name.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_description): <p>The query description.</p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_database): <p>The database to which the query belongs.</p>
    ///   - [`query_string(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::query_string) / [`set_query_string(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_query_string): <p>The contents of the query with all query statements.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::CreateNamedQuery::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::CreateNamedQuery::set_work_group): <p>The name of the workgroup in which the named query is being created.</p>
    /// - On success, responds with [`CreateNamedQueryOutput`](crate::output::CreateNamedQueryOutput) with field(s):
    ///   - [`named_query_id(Option<String>)`](crate::output::CreateNamedQueryOutput::named_query_id): <p>The unique ID of the query.</p>
    /// - On failure, responds with [`SdkError<CreateNamedQueryError>`](crate::error::CreateNamedQueryError)
    pub fn create_named_query(&self) -> crate::client::fluent_builders::CreateNamedQuery {
        crate::client::fluent_builders::CreateNamedQuery::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateNotebook`](crate::client::fluent_builders::CreateNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::CreateNotebook::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::CreateNotebook::set_work_group): <p>The name of the Spark enabled workgroup in which the notebook will be created.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateNotebook::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateNotebook::set_name): <p>The name of the <code>ipynb</code> file to be created in the Spark workgroup, without the <code>.ipynb</code> extension.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateNotebook::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateNotebook::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`CreateNotebookOutput`](crate::output::CreateNotebookOutput) with field(s):
    ///   - [`notebook_id(Option<String>)`](crate::output::CreateNotebookOutput::notebook_id): <p>A unique identifier for the notebook.</p>
    /// - On failure, responds with [`SdkError<CreateNotebookError>`](crate::error::CreateNotebookError)
    pub fn create_notebook(&self) -> crate::client::fluent_builders::CreateNotebook {
        crate::client::fluent_builders::CreateNotebook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePreparedStatement`](crate::client::fluent_builders::CreatePreparedStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::CreatePreparedStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::CreatePreparedStatement::set_statement_name): <p>The name of the prepared statement.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::CreatePreparedStatement::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::CreatePreparedStatement::set_work_group): <p>The name of the workgroup to which the prepared statement belongs.</p>
    ///   - [`query_statement(impl Into<String>)`](crate::client::fluent_builders::CreatePreparedStatement::query_statement) / [`set_query_statement(Option<String>)`](crate::client::fluent_builders::CreatePreparedStatement::set_query_statement): <p>The query string for the prepared statement.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreatePreparedStatement::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreatePreparedStatement::set_description): <p>The description of the prepared statement.</p>
    /// - On success, responds with [`CreatePreparedStatementOutput`](crate::output::CreatePreparedStatementOutput)

    /// - On failure, responds with [`SdkError<CreatePreparedStatementError>`](crate::error::CreatePreparedStatementError)
    pub fn create_prepared_statement(
        &self,
    ) -> crate::client::fluent_builders::CreatePreparedStatement {
        crate::client::fluent_builders::CreatePreparedStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePresignedNotebookUrl`](crate::client::fluent_builders::CreatePresignedNotebookUrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::CreatePresignedNotebookUrl::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::CreatePresignedNotebookUrl::set_session_id): <p>The session ID.</p>
    /// - On success, responds with [`CreatePresignedNotebookUrlOutput`](crate::output::CreatePresignedNotebookUrlOutput) with field(s):
    ///   - [`notebook_url(Option<String>)`](crate::output::CreatePresignedNotebookUrlOutput::notebook_url): <p>The URL of the notebook. The URL includes the authentication token and notebook file name and points directly to the opened notebook.</p>
    ///   - [`auth_token(Option<String>)`](crate::output::CreatePresignedNotebookUrlOutput::auth_token): <p>The authentication token for the notebook.</p>
    ///   - [`auth_token_expiration_time(Option<i64>)`](crate::output::CreatePresignedNotebookUrlOutput::auth_token_expiration_time): <p>The UTC epoch time when the authentication token expires.</p>
    /// - On failure, responds with [`SdkError<CreatePresignedNotebookUrlError>`](crate::error::CreatePresignedNotebookUrlError)
    pub fn create_presigned_notebook_url(
        &self,
    ) -> crate::client::fluent_builders::CreatePresignedNotebookUrl {
        crate::client::fluent_builders::CreatePresignedNotebookUrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkGroup`](crate::client::fluent_builders::CreateWorkGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateWorkGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateWorkGroup::set_name): <p>The workgroup name.</p>
    ///   - [`configuration(WorkGroupConfiguration)`](crate::client::fluent_builders::CreateWorkGroup::configuration) / [`set_configuration(Option<WorkGroupConfiguration>)`](crate::client::fluent_builders::CreateWorkGroup::set_configuration): <p>Contains configuration information for creating an Athena SQL workgroup, which includes the location in Amazon S3 where query results are stored, the encryption configuration, if any, used for encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is specified, and whether workgroup's settings (specified with <code>EnforceWorkGroupConfiguration</code>) in the <code>WorkGroupConfiguration</code> override client-side settings. See <code>WorkGroupConfiguration$EnforceWorkGroupConfiguration</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkGroup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkGroup::set_description): <p>The workgroup description.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWorkGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWorkGroup::set_tags): <p>A list of comma separated tags to add to the workgroup that is created.</p>
    /// - On success, responds with [`CreateWorkGroupOutput`](crate::output::CreateWorkGroupOutput)

    /// - On failure, responds with [`SdkError<CreateWorkGroupError>`](crate::error::CreateWorkGroupError)
    pub fn create_work_group(&self) -> crate::client::fluent_builders::CreateWorkGroup {
        crate::client::fluent_builders::CreateWorkGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataCatalog`](crate::client::fluent_builders::DeleteDataCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteDataCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteDataCatalog::set_name): <p>The name of the data catalog to delete.</p>
    /// - On success, responds with [`DeleteDataCatalogOutput`](crate::output::DeleteDataCatalogOutput)

    /// - On failure, responds with [`SdkError<DeleteDataCatalogError>`](crate::error::DeleteDataCatalogError)
    pub fn delete_data_catalog(&self) -> crate::client::fluent_builders::DeleteDataCatalog {
        crate::client::fluent_builders::DeleteDataCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteNamedQuery`](crate::client::fluent_builders::DeleteNamedQuery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`named_query_id(impl Into<String>)`](crate::client::fluent_builders::DeleteNamedQuery::named_query_id) / [`set_named_query_id(Option<String>)`](crate::client::fluent_builders::DeleteNamedQuery::set_named_query_id): <p>The unique ID of the query to delete.</p>
    /// - On success, responds with [`DeleteNamedQueryOutput`](crate::output::DeleteNamedQueryOutput)

    /// - On failure, responds with [`SdkError<DeleteNamedQueryError>`](crate::error::DeleteNamedQueryError)
    pub fn delete_named_query(&self) -> crate::client::fluent_builders::DeleteNamedQuery {
        crate::client::fluent_builders::DeleteNamedQuery::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteNotebook`](crate::client::fluent_builders::DeleteNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::DeleteNotebook::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::DeleteNotebook::set_notebook_id): <p>The ID of the notebook to delete.</p>
    /// - On success, responds with [`DeleteNotebookOutput`](crate::output::DeleteNotebookOutput)

    /// - On failure, responds with [`SdkError<DeleteNotebookError>`](crate::error::DeleteNotebookError)
    pub fn delete_notebook(&self) -> crate::client::fluent_builders::DeleteNotebook {
        crate::client::fluent_builders::DeleteNotebook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePreparedStatement`](crate::client::fluent_builders::DeletePreparedStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::DeletePreparedStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::DeletePreparedStatement::set_statement_name): <p>The name of the prepared statement to delete.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::DeletePreparedStatement::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::DeletePreparedStatement::set_work_group): <p>The workgroup to which the statement to be deleted belongs.</p>
    /// - On success, responds with [`DeletePreparedStatementOutput`](crate::output::DeletePreparedStatementOutput)

    /// - On failure, responds with [`SdkError<DeletePreparedStatementError>`](crate::error::DeletePreparedStatementError)
    pub fn delete_prepared_statement(
        &self,
    ) -> crate::client::fluent_builders::DeletePreparedStatement {
        crate::client::fluent_builders::DeletePreparedStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkGroup`](crate::client::fluent_builders::DeleteWorkGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkGroup::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::DeleteWorkGroup::set_work_group): <p>The unique name of the workgroup to delete.</p>
    ///   - [`recursive_delete_option(bool)`](crate::client::fluent_builders::DeleteWorkGroup::recursive_delete_option) / [`set_recursive_delete_option(Option<bool>)`](crate::client::fluent_builders::DeleteWorkGroup::set_recursive_delete_option): <p>The option to delete the workgroup and its contents even if the workgroup contains any named queries or query executions.</p>
    /// - On success, responds with [`DeleteWorkGroupOutput`](crate::output::DeleteWorkGroupOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkGroupError>`](crate::error::DeleteWorkGroupError)
    pub fn delete_work_group(&self) -> crate::client::fluent_builders::DeleteWorkGroup {
        crate::client::fluent_builders::DeleteWorkGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportNotebook`](crate::client::fluent_builders::ExportNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::ExportNotebook::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::ExportNotebook::set_notebook_id): <p>The ID of the notebook to export.</p>
    /// - On success, responds with [`ExportNotebookOutput`](crate::output::ExportNotebookOutput) with field(s):
    ///   - [`notebook_metadata(Option<NotebookMetadata>)`](crate::output::ExportNotebookOutput::notebook_metadata): <p>The notebook metadata, including notebook ID, notebook name, and workgroup name.</p>
    ///   - [`payload(Option<String>)`](crate::output::ExportNotebookOutput::payload): <p>The content of the exported notebook.</p>
    /// - On failure, responds with [`SdkError<ExportNotebookError>`](crate::error::ExportNotebookError)
    pub fn export_notebook(&self) -> crate::client::fluent_builders::ExportNotebook {
        crate::client::fluent_builders::ExportNotebook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCalculationExecution`](crate::client::fluent_builders::GetCalculationExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`calculation_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetCalculationExecution::calculation_execution_id) / [`set_calculation_execution_id(Option<String>)`](crate::client::fluent_builders::GetCalculationExecution::set_calculation_execution_id): <p>The calculation execution UUID.</p>
    /// - On success, responds with [`GetCalculationExecutionOutput`](crate::output::GetCalculationExecutionOutput) with field(s):
    ///   - [`calculation_execution_id(Option<String>)`](crate::output::GetCalculationExecutionOutput::calculation_execution_id): <p>The calculation execution UUID.</p>
    ///   - [`session_id(Option<String>)`](crate::output::GetCalculationExecutionOutput::session_id): <p>The session ID that the calculation ran in.</p>
    ///   - [`description(Option<String>)`](crate::output::GetCalculationExecutionOutput::description): <p>The description of the calculation execution.</p>
    ///   - [`working_directory(Option<String>)`](crate::output::GetCalculationExecutionOutput::working_directory): <p>The Amazon S3 location in which calculation results are stored.</p>
    ///   - [`status(Option<CalculationStatus>)`](crate::output::GetCalculationExecutionOutput::status): <p>Contains information about the status of the calculation.</p>
    ///   - [`statistics(Option<CalculationStatistics>)`](crate::output::GetCalculationExecutionOutput::statistics): <p>Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.</p>
    ///   - [`result(Option<CalculationResult>)`](crate::output::GetCalculationExecutionOutput::result): <p>Contains result information. This field is populated only if the calculation is completed.</p>
    /// - On failure, responds with [`SdkError<GetCalculationExecutionError>`](crate::error::GetCalculationExecutionError)
    pub fn get_calculation_execution(
        &self,
    ) -> crate::client::fluent_builders::GetCalculationExecution {
        crate::client::fluent_builders::GetCalculationExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCalculationExecutionCode`](crate::client::fluent_builders::GetCalculationExecutionCode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`calculation_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetCalculationExecutionCode::calculation_execution_id) / [`set_calculation_execution_id(Option<String>)`](crate::client::fluent_builders::GetCalculationExecutionCode::set_calculation_execution_id): <p>The calculation execution UUID.</p>
    /// - On success, responds with [`GetCalculationExecutionCodeOutput`](crate::output::GetCalculationExecutionCodeOutput) with field(s):
    ///   - [`code_block(Option<String>)`](crate::output::GetCalculationExecutionCodeOutput::code_block): <p>A pre-signed URL to the code that executed the calculation.</p>
    /// - On failure, responds with [`SdkError<GetCalculationExecutionCodeError>`](crate::error::GetCalculationExecutionCodeError)
    pub fn get_calculation_execution_code(
        &self,
    ) -> crate::client::fluent_builders::GetCalculationExecutionCode {
        crate::client::fluent_builders::GetCalculationExecutionCode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCalculationExecutionStatus`](crate::client::fluent_builders::GetCalculationExecutionStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`calculation_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetCalculationExecutionStatus::calculation_execution_id) / [`set_calculation_execution_id(Option<String>)`](crate::client::fluent_builders::GetCalculationExecutionStatus::set_calculation_execution_id): <p>The calculation execution UUID.</p>
    /// - On success, responds with [`GetCalculationExecutionStatusOutput`](crate::output::GetCalculationExecutionStatusOutput) with field(s):
    ///   - [`status(Option<CalculationStatus>)`](crate::output::GetCalculationExecutionStatusOutput::status): <p>Contains information about the calculation execution status.</p>
    ///   - [`statistics(Option<CalculationStatistics>)`](crate::output::GetCalculationExecutionStatusOutput::statistics): <p>Contains information about the DPU execution time and progress.</p>
    /// - On failure, responds with [`SdkError<GetCalculationExecutionStatusError>`](crate::error::GetCalculationExecutionStatusError)
    pub fn get_calculation_execution_status(
        &self,
    ) -> crate::client::fluent_builders::GetCalculationExecutionStatus {
        crate::client::fluent_builders::GetCalculationExecutionStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDatabase`](crate::client::fluent_builders::GetDatabase) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_name(impl Into<String>)`](crate::client::fluent_builders::GetDatabase::catalog_name) / [`set_catalog_name(Option<String>)`](crate::client::fluent_builders::GetDatabase::set_catalog_name): <p>The name of the data catalog that contains the database to return.</p>
    ///   - [`database_name(impl Into<String>)`](crate::client::fluent_builders::GetDatabase::database_name) / [`set_database_name(Option<String>)`](crate::client::fluent_builders::GetDatabase::set_database_name): <p>The name of the database to return.</p>
    /// - On success, responds with [`GetDatabaseOutput`](crate::output::GetDatabaseOutput) with field(s):
    ///   - [`database(Option<Database>)`](crate::output::GetDatabaseOutput::database): <p>The database returned.</p>
    /// - On failure, responds with [`SdkError<GetDatabaseError>`](crate::error::GetDatabaseError)
    pub fn get_database(&self) -> crate::client::fluent_builders::GetDatabase {
        crate::client::fluent_builders::GetDatabase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDataCatalog`](crate::client::fluent_builders::GetDataCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetDataCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetDataCatalog::set_name): <p>The name of the data catalog to return.</p>
    /// - On success, responds with [`GetDataCatalogOutput`](crate::output::GetDataCatalogOutput) with field(s):
    ///   - [`data_catalog(Option<DataCatalog>)`](crate::output::GetDataCatalogOutput::data_catalog): <p>The data catalog returned.</p>
    /// - On failure, responds with [`SdkError<GetDataCatalogError>`](crate::error::GetDataCatalogError)
    pub fn get_data_catalog(&self) -> crate::client::fluent_builders::GetDataCatalog {
        crate::client::fluent_builders::GetDataCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNamedQuery`](crate::client::fluent_builders::GetNamedQuery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`named_query_id(impl Into<String>)`](crate::client::fluent_builders::GetNamedQuery::named_query_id) / [`set_named_query_id(Option<String>)`](crate::client::fluent_builders::GetNamedQuery::set_named_query_id): <p>The unique ID of the query. Use <code>ListNamedQueries</code> to get query IDs.</p>
    /// - On success, responds with [`GetNamedQueryOutput`](crate::output::GetNamedQueryOutput) with field(s):
    ///   - [`named_query(Option<NamedQuery>)`](crate::output::GetNamedQueryOutput::named_query): <p>Information about the query.</p>
    /// - On failure, responds with [`SdkError<GetNamedQueryError>`](crate::error::GetNamedQueryError)
    pub fn get_named_query(&self) -> crate::client::fluent_builders::GetNamedQuery {
        crate::client::fluent_builders::GetNamedQuery::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNotebookMetadata`](crate::client::fluent_builders::GetNotebookMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::GetNotebookMetadata::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::GetNotebookMetadata::set_notebook_id): <p>The ID of the notebook whose metadata is to be retrieved.</p>
    /// - On success, responds with [`GetNotebookMetadataOutput`](crate::output::GetNotebookMetadataOutput) with field(s):
    ///   - [`notebook_metadata(Option<NotebookMetadata>)`](crate::output::GetNotebookMetadataOutput::notebook_metadata): <p>The metadata that is returned for the specified notebook ID.</p>
    /// - On failure, responds with [`SdkError<GetNotebookMetadataError>`](crate::error::GetNotebookMetadataError)
    pub fn get_notebook_metadata(&self) -> crate::client::fluent_builders::GetNotebookMetadata {
        crate::client::fluent_builders::GetNotebookMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPreparedStatement`](crate::client::fluent_builders::GetPreparedStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::GetPreparedStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::GetPreparedStatement::set_statement_name): <p>The name of the prepared statement to retrieve.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::GetPreparedStatement::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::GetPreparedStatement::set_work_group): <p>The workgroup to which the statement to be retrieved belongs.</p>
    /// - On success, responds with [`GetPreparedStatementOutput`](crate::output::GetPreparedStatementOutput) with field(s):
    ///   - [`prepared_statement(Option<PreparedStatement>)`](crate::output::GetPreparedStatementOutput::prepared_statement): <p>The name of the prepared statement that was retrieved.</p>
    /// - On failure, responds with [`SdkError<GetPreparedStatementError>`](crate::error::GetPreparedStatementError)
    pub fn get_prepared_statement(&self) -> crate::client::fluent_builders::GetPreparedStatement {
        crate::client::fluent_builders::GetPreparedStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueryExecution`](crate::client::fluent_builders::GetQueryExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetQueryExecution::query_execution_id) / [`set_query_execution_id(Option<String>)`](crate::client::fluent_builders::GetQueryExecution::set_query_execution_id): <p>The unique ID of the query execution.</p>
    /// - On success, responds with [`GetQueryExecutionOutput`](crate::output::GetQueryExecutionOutput) with field(s):
    ///   - [`query_execution(Option<QueryExecution>)`](crate::output::GetQueryExecutionOutput::query_execution): <p>Information about the query execution.</p>
    /// - On failure, responds with [`SdkError<GetQueryExecutionError>`](crate::error::GetQueryExecutionError)
    pub fn get_query_execution(&self) -> crate::client::fluent_builders::GetQueryExecution {
        crate::client::fluent_builders::GetQueryExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueryResults`](crate::client::fluent_builders::GetQueryResults) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetQueryResults::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetQueryResults::query_execution_id) / [`set_query_execution_id(Option<String>)`](crate::client::fluent_builders::GetQueryResults::set_query_execution_id): <p>The unique ID of the query execution.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetQueryResults::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetQueryResults::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetQueryResults::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetQueryResults::set_max_results): <p>The maximum number of results (rows) to return in this request.</p>
    /// - On success, responds with [`GetQueryResultsOutput`](crate::output::GetQueryResultsOutput) with field(s):
    ///   - [`update_count(Option<i64>)`](crate::output::GetQueryResultsOutput::update_count): <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. </p>
    ///   - [`result_set(Option<ResultSet>)`](crate::output::GetQueryResultsOutput::result_set): <p>The results of the query execution.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetQueryResultsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<GetQueryResultsError>`](crate::error::GetQueryResultsError)
    pub fn get_query_results(&self) -> crate::client::fluent_builders::GetQueryResults {
        crate::client::fluent_builders::GetQueryResults::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueryRuntimeStatistics`](crate::client::fluent_builders::GetQueryRuntimeStatistics) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_execution_id(impl Into<String>)`](crate::client::fluent_builders::GetQueryRuntimeStatistics::query_execution_id) / [`set_query_execution_id(Option<String>)`](crate::client::fluent_builders::GetQueryRuntimeStatistics::set_query_execution_id): <p>The unique ID of the query execution.</p>
    /// - On success, responds with [`GetQueryRuntimeStatisticsOutput`](crate::output::GetQueryRuntimeStatisticsOutput) with field(s):
    ///   - [`query_runtime_statistics(Option<QueryRuntimeStatistics>)`](crate::output::GetQueryRuntimeStatisticsOutput::query_runtime_statistics): <p>Runtime statistics about the query execution.</p>
    /// - On failure, responds with [`SdkError<GetQueryRuntimeStatisticsError>`](crate::error::GetQueryRuntimeStatisticsError)
    pub fn get_query_runtime_statistics(
        &self,
    ) -> crate::client::fluent_builders::GetQueryRuntimeStatistics {
        crate::client::fluent_builders::GetQueryRuntimeStatistics::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSession`](crate::client::fluent_builders::GetSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::GetSession::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::GetSession::set_session_id): <p>The session ID.</p>
    /// - On success, responds with [`GetSessionOutput`](crate::output::GetSessionOutput) with field(s):
    ///   - [`session_id(Option<String>)`](crate::output::GetSessionOutput::session_id): <p>The session ID.</p>
    ///   - [`description(Option<String>)`](crate::output::GetSessionOutput::description): <p>The session description.</p>
    ///   - [`work_group(Option<String>)`](crate::output::GetSessionOutput::work_group): <p>The workgroup to which the session belongs.</p>
    ///   - [`engine_version(Option<String>)`](crate::output::GetSessionOutput::engine_version): <p>The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <code>ListEngineVersions</code>.</p>
    ///   - [`engine_configuration(Option<EngineConfiguration>)`](crate::output::GetSessionOutput::engine_configuration): <p>Contains engine configuration information like DPU usage.</p>
    ///   - [`notebook_version(Option<String>)`](crate::output::GetSessionOutput::notebook_version): <p>The notebook version.</p>
    ///   - [`session_configuration(Option<SessionConfiguration>)`](crate::output::GetSessionOutput::session_configuration): <p>Contains the workgroup configuration information used by the session.</p>
    ///   - [`status(Option<SessionStatus>)`](crate::output::GetSessionOutput::status): <p>Contains information about the status of the session.</p>
    ///   - [`statistics(Option<SessionStatistics>)`](crate::output::GetSessionOutput::statistics): <p>Contains the DPU execution time.</p>
    /// - On failure, responds with [`SdkError<GetSessionError>`](crate::error::GetSessionError)
    pub fn get_session(&self) -> crate::client::fluent_builders::GetSession {
        crate::client::fluent_builders::GetSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSessionStatus`](crate::client::fluent_builders::GetSessionStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::GetSessionStatus::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::GetSessionStatus::set_session_id): <p>The session ID.</p>
    /// - On success, responds with [`GetSessionStatusOutput`](crate::output::GetSessionStatusOutput) with field(s):
    ///   - [`session_id(Option<String>)`](crate::output::GetSessionStatusOutput::session_id): <p>The session ID.</p>
    ///   - [`status(Option<SessionStatus>)`](crate::output::GetSessionStatusOutput::status): <p>Contains information about the status of the session.</p>
    /// - On failure, responds with [`SdkError<GetSessionStatusError>`](crate::error::GetSessionStatusError)
    pub fn get_session_status(&self) -> crate::client::fluent_builders::GetSessionStatus {
        crate::client::fluent_builders::GetSessionStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTableMetadata`](crate::client::fluent_builders::GetTableMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_name(impl Into<String>)`](crate::client::fluent_builders::GetTableMetadata::catalog_name) / [`set_catalog_name(Option<String>)`](crate::client::fluent_builders::GetTableMetadata::set_catalog_name): <p>The name of the data catalog that contains the database and table metadata to return.</p>
    ///   - [`database_name(impl Into<String>)`](crate::client::fluent_builders::GetTableMetadata::database_name) / [`set_database_name(Option<String>)`](crate::client::fluent_builders::GetTableMetadata::set_database_name): <p>The name of the database that contains the table metadata to return.</p>
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::GetTableMetadata::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::GetTableMetadata::set_table_name): <p>The name of the table for which metadata is returned.</p>
    /// - On success, responds with [`GetTableMetadataOutput`](crate::output::GetTableMetadataOutput) with field(s):
    ///   - [`table_metadata(Option<TableMetadata>)`](crate::output::GetTableMetadataOutput::table_metadata): <p>An object that contains table metadata.</p>
    /// - On failure, responds with [`SdkError<GetTableMetadataError>`](crate::error::GetTableMetadataError)
    pub fn get_table_metadata(&self) -> crate::client::fluent_builders::GetTableMetadata {
        crate::client::fluent_builders::GetTableMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetWorkGroup`](crate::client::fluent_builders::GetWorkGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::GetWorkGroup::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::GetWorkGroup::set_work_group): <p>The name of the workgroup.</p>
    /// - On success, responds with [`GetWorkGroupOutput`](crate::output::GetWorkGroupOutput) with field(s):
    ///   - [`work_group(Option<WorkGroup>)`](crate::output::GetWorkGroupOutput::work_group): <p>Information about the workgroup.</p>
    /// - On failure, responds with [`SdkError<GetWorkGroupError>`](crate::error::GetWorkGroupError)
    pub fn get_work_group(&self) -> crate::client::fluent_builders::GetWorkGroup {
        crate::client::fluent_builders::GetWorkGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportNotebook`](crate::client::fluent_builders::ImportNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_work_group): <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_name): <p>The name of the notebook to import.</p>
    ///   - [`payload(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::payload) / [`set_payload(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_payload): <p>The notebook content to be imported.</p>
    ///   - [`r#type(NotebookType)`](crate::client::fluent_builders::ImportNotebook::type) / [`set_type(Option<NotebookType>)`](crate::client::fluent_builders::ImportNotebook::set_type): <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`ImportNotebookOutput`](crate::output::ImportNotebookOutput) with field(s):
    ///   - [`notebook_id(Option<String>)`](crate::output::ImportNotebookOutput::notebook_id): <p>The ID of the notebook to import.</p>
    /// - On failure, responds with [`SdkError<ImportNotebookError>`](crate::error::ImportNotebookError)
    pub fn import_notebook(&self) -> crate::client::fluent_builders::ImportNotebook {
        crate::client::fluent_builders::ImportNotebook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplicationDPUSizes`](crate::client::fluent_builders::ListApplicationDPUSizes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApplicationDPUSizes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApplicationDPUSizes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApplicationDPUSizes::set_max_results): <p>Specifies the maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplicationDPUSizes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplicationDPUSizes::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.</p>
    /// - On success, responds with [`ListApplicationDpuSizesOutput`](crate::output::ListApplicationDpuSizesOutput) with field(s):
    ///   - [`application_dpu_sizes(Option<Vec<ApplicationDpuSizes>>)`](crate::output::ListApplicationDpuSizesOutput::application_dpu_sizes): <p>A list of the supported DPU sizes that the application runtime supports.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationDpuSizesOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListApplicationDPUSizesError>`](crate::error::ListApplicationDPUSizesError)
    pub fn list_application_dpu_sizes(
        &self,
    ) -> crate::client::fluent_builders::ListApplicationDPUSizes {
        crate::client::fluent_builders::ListApplicationDPUSizes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCalculationExecutions`](crate::client::fluent_builders::ListCalculationExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCalculationExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::ListCalculationExecutions::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::ListCalculationExecutions::set_session_id): <p>The session ID.</p>
    ///   - [`state_filter(CalculationExecutionState)`](crate::client::fluent_builders::ListCalculationExecutions::state_filter) / [`set_state_filter(Option<CalculationExecutionState>)`](crate::client::fluent_builders::ListCalculationExecutions::set_state_filter): <p>A filter for a specific calculation execution state. A description of each state follows.</p>  <p> <code>CREATING</code> - The calculation is in the process of being created.</p>  <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>  <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>  <p> <code>RUNNING</code> - The calculation is running.</p>  <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>  <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>  <p> <code>COMPLETED</code> - The calculation has completed without error.</p>  <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCalculationExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCalculationExecutions::set_max_results): <p>The maximum number of calculation executions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCalculationExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCalculationExecutions::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On success, responds with [`ListCalculationExecutionsOutput`](crate::output::ListCalculationExecutionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListCalculationExecutionsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`calculations(Option<Vec<CalculationSummary>>)`](crate::output::ListCalculationExecutionsOutput::calculations): <p>A list of <code>CalculationSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListCalculationExecutionsError>`](crate::error::ListCalculationExecutionsError)
    pub fn list_calculation_executions(
        &self,
    ) -> crate::client::fluent_builders::ListCalculationExecutions {
        crate::client::fluent_builders::ListCalculationExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatabases`](crate::client::fluent_builders::ListDatabases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatabases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_name(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::catalog_name) / [`set_catalog_name(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_catalog_name): <p>The name of the data catalog that contains the databases to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatabases::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatabases::set_max_results): <p>Specifies the maximum number of results to return.</p>
    /// - On success, responds with [`ListDatabasesOutput`](crate::output::ListDatabasesOutput) with field(s):
    ///   - [`database_list(Option<Vec<Database>>)`](crate::output::ListDatabasesOutput::database_list): <p>A list of databases from a data catalog.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatabasesOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListDatabasesError>`](crate::error::ListDatabasesError)
    pub fn list_databases(&self) -> crate::client::fluent_builders::ListDatabases {
        crate::client::fluent_builders::ListDatabases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDataCatalogs`](crate::client::fluent_builders::ListDataCatalogs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDataCatalogs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDataCatalogs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDataCatalogs::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDataCatalogs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDataCatalogs::set_max_results): <p>Specifies the maximum number of data catalogs to return.</p>
    /// - On success, responds with [`ListDataCatalogsOutput`](crate::output::ListDataCatalogsOutput) with field(s):
    ///   - [`data_catalogs_summary(Option<Vec<DataCatalogSummary>>)`](crate::output::ListDataCatalogsOutput::data_catalogs_summary): <p>A summary list of data catalogs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDataCatalogsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListDataCatalogsError>`](crate::error::ListDataCatalogsError)
    pub fn list_data_catalogs(&self) -> crate::client::fluent_builders::ListDataCatalogs {
        crate::client::fluent_builders::ListDataCatalogs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEngineVersions`](crate::client::fluent_builders::ListEngineVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEngineVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEngineVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEngineVersions::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEngineVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEngineVersions::set_max_results): <p>The maximum number of engine versions to return in this request.</p>
    /// - On success, responds with [`ListEngineVersionsOutput`](crate::output::ListEngineVersionsOutput) with field(s):
    ///   - [`engine_versions(Option<Vec<EngineVersion>>)`](crate::output::ListEngineVersionsOutput::engine_versions): <p>A list of engine versions that are available to choose from.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEngineVersionsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListEngineVersionsError>`](crate::error::ListEngineVersionsError)
    pub fn list_engine_versions(&self) -> crate::client::fluent_builders::ListEngineVersions {
        crate::client::fluent_builders::ListEngineVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExecutors`](crate::client::fluent_builders::ListExecutors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExecutors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::ListExecutors::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::ListExecutors::set_session_id): <p>The session ID.</p>
    ///   - [`executor_state_filter(ExecutorState)`](crate::client::fluent_builders::ListExecutors::executor_state_filter) / [`set_executor_state_filter(Option<ExecutorState>)`](crate::client::fluent_builders::ListExecutors::set_executor_state_filter): <p>A filter for a specific executor state. A description of each state follows.</p>  <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p>  <p> <code>CREATED</code> - The executor has been started.</p>  <p> <code>REGISTERED</code> - The executor has been registered.</p>  <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p>  <p> <code>TERMINATED</code> - The executor is no longer running.</p>  <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExecutors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExecutors::set_max_results): <p>The maximum number of executors to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExecutors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExecutors::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On success, responds with [`ListExecutorsOutput`](crate::output::ListExecutorsOutput) with field(s):
    ///   - [`session_id(Option<String>)`](crate::output::ListExecutorsOutput::session_id): <p>The session ID.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExecutorsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`executors_summary(Option<Vec<ExecutorsSummary>>)`](crate::output::ListExecutorsOutput::executors_summary): <p>Contains summary information about the executor.</p>
    /// - On failure, responds with [`SdkError<ListExecutorsError>`](crate::error::ListExecutorsError)
    pub fn list_executors(&self) -> crate::client::fluent_builders::ListExecutors {
        crate::client::fluent_builders::ListExecutors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNamedQueries`](crate::client::fluent_builders::ListNamedQueries) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNamedQueries::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNamedQueries::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNamedQueries::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNamedQueries::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNamedQueries::set_max_results): <p>The maximum number of queries to return in this request.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ListNamedQueries::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ListNamedQueries::set_work_group): <p>The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.</p>
    /// - On success, responds with [`ListNamedQueriesOutput`](crate::output::ListNamedQueriesOutput) with field(s):
    ///   - [`named_query_ids(Option<Vec<String>>)`](crate::output::ListNamedQueriesOutput::named_query_ids): <p>The list of unique query IDs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNamedQueriesOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListNamedQueriesError>`](crate::error::ListNamedQueriesError)
    pub fn list_named_queries(&self) -> crate::client::fluent_builders::ListNamedQueries {
        crate::client::fluent_builders::ListNamedQueries::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNotebookMetadata`](crate::client::fluent_builders::ListNotebookMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(FilterDefinition)`](crate::client::fluent_builders::ListNotebookMetadata::filters) / [`set_filters(Option<FilterDefinition>)`](crate::client::fluent_builders::ListNotebookMetadata::set_filters): <p>Search filter string.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNotebookMetadata::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNotebookMetadata::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNotebookMetadata::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNotebookMetadata::set_max_results): <p>Specifies the maximum number of results to return.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ListNotebookMetadata::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ListNotebookMetadata::set_work_group): <p>The name of the Spark enabled workgroup to retrieve notebook metadata for.</p>
    /// - On success, responds with [`ListNotebookMetadataOutput`](crate::output::ListNotebookMetadataOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListNotebookMetadataOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`notebook_metadata_list(Option<Vec<NotebookMetadata>>)`](crate::output::ListNotebookMetadataOutput::notebook_metadata_list): <p>The list of notebook metadata for the specified workgroup.</p>
    /// - On failure, responds with [`SdkError<ListNotebookMetadataError>`](crate::error::ListNotebookMetadataError)
    pub fn list_notebook_metadata(&self) -> crate::client::fluent_builders::ListNotebookMetadata {
        crate::client::fluent_builders::ListNotebookMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNotebookSessions`](crate::client::fluent_builders::ListNotebookSessions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::ListNotebookSessions::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::ListNotebookSessions::set_notebook_id): <p>The ID of the notebook to list sessions for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNotebookSessions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNotebookSessions::set_max_results): <p>The maximum number of notebook sessions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNotebookSessions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNotebookSessions::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On success, responds with [`ListNotebookSessionsOutput`](crate::output::ListNotebookSessionsOutput) with field(s):
    ///   - [`notebook_sessions_list(Option<Vec<NotebookSessionSummary>>)`](crate::output::ListNotebookSessionsOutput::notebook_sessions_list): <p>A list of the sessions belonging to the notebook.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNotebookSessionsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListNotebookSessionsError>`](crate::error::ListNotebookSessionsError)
    pub fn list_notebook_sessions(&self) -> crate::client::fluent_builders::ListNotebookSessions {
        crate::client::fluent_builders::ListNotebookSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPreparedStatements`](crate::client::fluent_builders::ListPreparedStatements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPreparedStatements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ListPreparedStatements::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ListPreparedStatements::set_work_group): <p>The workgroup to list the prepared statements for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPreparedStatements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPreparedStatements::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPreparedStatements::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPreparedStatements::set_max_results): <p>The maximum number of results to return in this request.</p>
    /// - On success, responds with [`ListPreparedStatementsOutput`](crate::output::ListPreparedStatementsOutput) with field(s):
    ///   - [`prepared_statements(Option<Vec<PreparedStatementSummary>>)`](crate::output::ListPreparedStatementsOutput::prepared_statements): <p>The list of prepared statements for the workgroup.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPreparedStatementsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListPreparedStatementsError>`](crate::error::ListPreparedStatementsError)
    pub fn list_prepared_statements(
        &self,
    ) -> crate::client::fluent_builders::ListPreparedStatements {
        crate::client::fluent_builders::ListPreparedStatements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListQueryExecutions`](crate::client::fluent_builders::ListQueryExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListQueryExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListQueryExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListQueryExecutions::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListQueryExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListQueryExecutions::set_max_results): <p>The maximum number of query executions to return in this request.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ListQueryExecutions::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ListQueryExecutions::set_work_group): <p>The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.</p>
    /// - On success, responds with [`ListQueryExecutionsOutput`](crate::output::ListQueryExecutionsOutput) with field(s):
    ///   - [`query_execution_ids(Option<Vec<String>>)`](crate::output::ListQueryExecutionsOutput::query_execution_ids): <p>The unique IDs of each query execution as an array of strings.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListQueryExecutionsOutput::next_token): <p>A token to be used by the next request if this request is truncated.</p>
    /// - On failure, responds with [`SdkError<ListQueryExecutionsError>`](crate::error::ListQueryExecutionsError)
    pub fn list_query_executions(&self) -> crate::client::fluent_builders::ListQueryExecutions {
        crate::client::fluent_builders::ListQueryExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSessions`](crate::client::fluent_builders::ListSessions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSessions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ListSessions::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ListSessions::set_work_group): <p>The workgroup to which the session belongs.</p>
    ///   - [`state_filter(SessionState)`](crate::client::fluent_builders::ListSessions::state_filter) / [`set_state_filter(Option<SessionState>)`](crate::client::fluent_builders::ListSessions::set_state_filter): <p>A filter for a specific session state. A description of each state follows.</p>  <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>  <p> <code>CREATED</code> - The session has been started.</p>  <p> <code>IDLE</code> - The session is able to accept a calculation.</p>  <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>  <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>  <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>  <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>  <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSessions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSessions::set_max_results): <p>The maximum number of sessions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSessions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSessions::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On success, responds with [`ListSessionsOutput`](crate::output::ListSessionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListSessionsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`sessions(Option<Vec<SessionSummary>>)`](crate::output::ListSessionsOutput::sessions): <p>A list of sessions.</p>
    /// - On failure, responds with [`SdkError<ListSessionsError>`](crate::error::ListSessionsError)
    pub fn list_sessions(&self) -> crate::client::fluent_builders::ListSessions {
        crate::client::fluent_builders::ListSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTableMetadata`](crate::client::fluent_builders::ListTableMetadata) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTableMetadata::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_name(impl Into<String>)`](crate::client::fluent_builders::ListTableMetadata::catalog_name) / [`set_catalog_name(Option<String>)`](crate::client::fluent_builders::ListTableMetadata::set_catalog_name): <p>The name of the data catalog for which table metadata should be returned.</p>
    ///   - [`database_name(impl Into<String>)`](crate::client::fluent_builders::ListTableMetadata::database_name) / [`set_database_name(Option<String>)`](crate::client::fluent_builders::ListTableMetadata::set_database_name): <p>The name of the database for which table metadata should be returned.</p>
    ///   - [`expression(impl Into<String>)`](crate::client::fluent_builders::ListTableMetadata::expression) / [`set_expression(Option<String>)`](crate::client::fluent_builders::ListTableMetadata::set_expression): <p>A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTableMetadata::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTableMetadata::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTableMetadata::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTableMetadata::set_max_results): <p>Specifies the maximum number of results to return.</p>
    /// - On success, responds with [`ListTableMetadataOutput`](crate::output::ListTableMetadataOutput) with field(s):
    ///   - [`table_metadata_list(Option<Vec<TableMetadata>>)`](crate::output::ListTableMetadataOutput::table_metadata_list): <p>A list of table metadata.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTableMetadataOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListTableMetadataError>`](crate::error::ListTableMetadataError)
    pub fn list_table_metadata(&self) -> crate::client::fluent_builders::ListTableMetadata {
        crate::client::fluent_builders::ListTableMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTagsForResource::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>Lists the tags for the resource with the specified ARN.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_token): <p>The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTagsForResource::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTagsForResource::set_max_results): <p>The maximum number of results to be returned per request that lists the tags for the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The list of tags associated with the specified resource.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsForResourceOutput::next_token): <p>A token to be used by the next request if this request is truncated.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkGroups`](crate::client::fluent_builders::ListWorkGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkGroups::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkGroups::set_max_results): <p>The maximum number of workgroups to return in this request.</p>
    /// - On success, responds with [`ListWorkGroupsOutput`](crate::output::ListWorkGroupsOutput) with field(s):
    ///   - [`work_groups(Option<Vec<WorkGroupSummary>>)`](crate::output::ListWorkGroupsOutput::work_groups): <p>A list of <code>WorkGroupSummary</code> objects that include the names, descriptions, creation times, and states for each workgroup.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkGroupsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListWorkGroupsError>`](crate::error::ListWorkGroupsError)
    pub fn list_work_groups(&self) -> crate::client::fluent_builders::ListWorkGroups {
        crate::client::fluent_builders::ListWorkGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartCalculationExecution`](crate::client::fluent_builders::StartCalculationExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::StartCalculationExecution::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::StartCalculationExecution::set_session_id): <p>The session ID.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartCalculationExecution::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartCalculationExecution::set_description): <p>A description of the calculation.</p>
    ///   - [`calculation_configuration(CalculationConfiguration)`](crate::client::fluent_builders::StartCalculationExecution::calculation_configuration) / [`set_calculation_configuration(Option<CalculationConfiguration>)`](crate::client::fluent_builders::StartCalculationExecution::set_calculation_configuration): <p>Contains configuration information for the calculation.</p>
    ///   - [`code_block(impl Into<String>)`](crate::client::fluent_builders::StartCalculationExecution::code_block) / [`set_code_block(Option<String>)`](crate::client::fluent_builders::StartCalculationExecution::set_code_block): <p>A string that contains the code of the calculation.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartCalculationExecution::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartCalculationExecution::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the calculation is idempotent (executes only once). If another <code>StartCalculationExecutionRequest</code> is received, the same response is returned and another calculation is not created. If a parameter has changed, an error is returned.</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`StartCalculationExecutionOutput`](crate::output::StartCalculationExecutionOutput) with field(s):
    ///   - [`calculation_execution_id(Option<String>)`](crate::output::StartCalculationExecutionOutput::calculation_execution_id): <p>The calculation execution UUID.</p>
    ///   - [`state(Option<CalculationExecutionState>)`](crate::output::StartCalculationExecutionOutput::state): <p> <code>CREATING</code> - The calculation is in the process of being created.</p>  <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>  <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>  <p> <code>RUNNING</code> - The calculation is running.</p>  <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>  <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>  <p> <code>COMPLETED</code> - The calculation has completed without error.</p>  <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    /// - On failure, responds with [`SdkError<StartCalculationExecutionError>`](crate::error::StartCalculationExecutionError)
    pub fn start_calculation_execution(
        &self,
    ) -> crate::client::fluent_builders::StartCalculationExecution {
        crate::client::fluent_builders::StartCalculationExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartQueryExecution`](crate::client::fluent_builders::StartQueryExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_string(impl Into<String>)`](crate::client::fluent_builders::StartQueryExecution::query_string) / [`set_query_string(Option<String>)`](crate::client::fluent_builders::StartQueryExecution::set_query_string): <p>The SQL query statements to be executed.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartQueryExecution::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartQueryExecution::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    ///   - [`query_execution_context(QueryExecutionContext)`](crate::client::fluent_builders::StartQueryExecution::query_execution_context) / [`set_query_execution_context(Option<QueryExecutionContext>)`](crate::client::fluent_builders::StartQueryExecution::set_query_execution_context): <p>The database within which the query executes.</p>
    ///   - [`result_configuration(ResultConfiguration)`](crate::client::fluent_builders::StartQueryExecution::result_configuration) / [`set_result_configuration(Option<ResultConfiguration>)`](crate::client::fluent_builders::StartQueryExecution::set_result_configuration): <p>Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <code>WorkGroupConfiguration$EnforceWorkGroupConfiguration</code>.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::StartQueryExecution::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::StartQueryExecution::set_work_group): <p>The name of the workgroup in which the query is being started.</p>
    ///   - [`execution_parameters(Vec<String>)`](crate::client::fluent_builders::StartQueryExecution::execution_parameters) / [`set_execution_parameters(Option<Vec<String>>)`](crate::client::fluent_builders::StartQueryExecution::set_execution_parameters): <p>A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.</p>
    ///   - [`result_reuse_configuration(ResultReuseConfiguration)`](crate::client::fluent_builders::StartQueryExecution::result_reuse_configuration) / [`set_result_reuse_configuration(Option<ResultReuseConfiguration>)`](crate::client::fluent_builders::StartQueryExecution::set_result_reuse_configuration): <p>Specifies the query result reuse behavior for the query.</p>
    /// - On success, responds with [`StartQueryExecutionOutput`](crate::output::StartQueryExecutionOutput) with field(s):
    ///   - [`query_execution_id(Option<String>)`](crate::output::StartQueryExecutionOutput::query_execution_id): <p>The unique ID of the query that ran as a result of this request.</p>
    /// - On failure, responds with [`SdkError<StartQueryExecutionError>`](crate::error::StartQueryExecutionError)
    pub fn start_query_execution(&self) -> crate::client::fluent_builders::StartQueryExecution {
        crate::client::fluent_builders::StartQueryExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartSession`](crate::client::fluent_builders::StartSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartSession::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartSession::set_description): <p>The session description.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::StartSession::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::StartSession::set_work_group): <p>The workgroup to which the session belongs.</p>
    ///   - [`engine_configuration(EngineConfiguration)`](crate::client::fluent_builders::StartSession::engine_configuration) / [`set_engine_configuration(Option<EngineConfiguration>)`](crate::client::fluent_builders::StartSession::set_engine_configuration): <p>Contains engine data processing unit (DPU) configuration settings and parameter mappings.</p>
    ///   - [`notebook_version(impl Into<String>)`](crate::client::fluent_builders::StartSession::notebook_version) / [`set_notebook_version(Option<String>)`](crate::client::fluent_builders::StartSession::set_notebook_version): <p>The notebook version. This value is required only when requesting that a notebook server be started for the session. The only valid notebook version is <code>Jupyter1.0</code>.</p>
    ///   - [`session_idle_timeout_in_minutes(i32)`](crate::client::fluent_builders::StartSession::session_idle_timeout_in_minutes) / [`set_session_idle_timeout_in_minutes(Option<i32>)`](crate::client::fluent_builders::StartSession::set_session_idle_timeout_in_minutes): <p>The idle timeout in minutes for the session.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartSession::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartSession::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the session is idempotent (executes only once). If another <code>StartSessionRequest</code> is received, the same response is returned and another session is not created. If a parameter has changed, an error is returned.</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`StartSessionOutput`](crate::output::StartSessionOutput) with field(s):
    ///   - [`session_id(Option<String>)`](crate::output::StartSessionOutput::session_id): <p>The session ID.</p>
    ///   - [`state(Option<SessionState>)`](crate::output::StartSessionOutput::state): <p>The state of the session. A description of each state follows.</p>  <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>  <p> <code>CREATED</code> - The session has been started.</p>  <p> <code>IDLE</code> - The session is able to accept a calculation.</p>  <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>  <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>  <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>  <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>  <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    /// - On failure, responds with [`SdkError<StartSessionError>`](crate::error::StartSessionError)
    pub fn start_session(&self) -> crate::client::fluent_builders::StartSession {
        crate::client::fluent_builders::StartSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopCalculationExecution`](crate::client::fluent_builders::StopCalculationExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`calculation_execution_id(impl Into<String>)`](crate::client::fluent_builders::StopCalculationExecution::calculation_execution_id) / [`set_calculation_execution_id(Option<String>)`](crate::client::fluent_builders::StopCalculationExecution::set_calculation_execution_id): <p>The calculation execution UUID.</p>
    /// - On success, responds with [`StopCalculationExecutionOutput`](crate::output::StopCalculationExecutionOutput) with field(s):
    ///   - [`state(Option<CalculationExecutionState>)`](crate::output::StopCalculationExecutionOutput::state): <p> <code>CREATING</code> - The calculation is in the process of being created.</p>  <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>  <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>  <p> <code>RUNNING</code> - The calculation is running.</p>  <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>  <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>  <p> <code>COMPLETED</code> - The calculation has completed without error.</p>  <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    /// - On failure, responds with [`SdkError<StopCalculationExecutionError>`](crate::error::StopCalculationExecutionError)
    pub fn stop_calculation_execution(
        &self,
    ) -> crate::client::fluent_builders::StopCalculationExecution {
        crate::client::fluent_builders::StopCalculationExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopQueryExecution`](crate::client::fluent_builders::StopQueryExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_execution_id(impl Into<String>)`](crate::client::fluent_builders::StopQueryExecution::query_execution_id) / [`set_query_execution_id(Option<String>)`](crate::client::fluent_builders::StopQueryExecution::set_query_execution_id): <p>The unique ID of the query execution to stop.</p>
    /// - On success, responds with [`StopQueryExecutionOutput`](crate::output::StopQueryExecutionOutput)

    /// - On failure, responds with [`SdkError<StopQueryExecutionError>`](crate::error::StopQueryExecutionError)
    pub fn stop_query_execution(&self) -> crate::client::fluent_builders::StopQueryExecution {
        crate::client::fluent_builders::StopQueryExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>Specifies the ARN of the Athena resource (workgroup or data catalog) to which tags are to be added.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TerminateSession`](crate::client::fluent_builders::TerminateSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::TerminateSession::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::TerminateSession::set_session_id): <p>The session ID.</p>
    /// - On success, responds with [`TerminateSessionOutput`](crate::output::TerminateSessionOutput) with field(s):
    ///   - [`state(Option<SessionState>)`](crate::output::TerminateSessionOutput::state): <p>The state of the session. A description of each state follows.</p>  <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>  <p> <code>CREATED</code> - The session has been started.</p>  <p> <code>IDLE</code> - The session is able to accept a calculation.</p>  <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>  <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>  <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>  <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>  <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    /// - On failure, responds with [`SdkError<TerminateSessionError>`](crate::error::TerminateSessionError)
    pub fn terminate_session(&self) -> crate::client::fluent_builders::TerminateSession {
        crate::client::fluent_builders::TerminateSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>Specifies the ARN of the resource from which tags are to be removed.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDataCatalog`](crate::client::fluent_builders::UpdateDataCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateDataCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateDataCatalog::set_name): <p>The name of the data catalog to update. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.</p>
    ///   - [`r#type(DataCatalogType)`](crate::client::fluent_builders::UpdateDataCatalog::type) / [`set_type(Option<DataCatalogType>)`](crate::client::fluent_builders::UpdateDataCatalog::set_type): <p>Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDataCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDataCatalog::set_description): <p>New or modified text that describes the data catalog.</p>
    ///   - [`parameters(HashMap<String, String>)`](crate::client::fluent_builders::UpdateDataCatalog::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateDataCatalog::set_parameters): <p>Specifies the Lambda function or functions to use for updating the data catalog. This is a mapping whose values depend on the catalog type. </p>  <ul>   <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li>   <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p>    <ul>     <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li>     <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li>    </ul> </li>  </ul>
    /// - On success, responds with [`UpdateDataCatalogOutput`](crate::output::UpdateDataCatalogOutput)

    /// - On failure, responds with [`SdkError<UpdateDataCatalogError>`](crate::error::UpdateDataCatalogError)
    pub fn update_data_catalog(&self) -> crate::client::fluent_builders::UpdateDataCatalog {
        crate::client::fluent_builders::UpdateDataCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNamedQuery`](crate::client::fluent_builders::UpdateNamedQuery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`named_query_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNamedQuery::named_query_id) / [`set_named_query_id(Option<String>)`](crate::client::fluent_builders::UpdateNamedQuery::set_named_query_id): <p>The unique identifier (UUID) of the query.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateNamedQuery::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateNamedQuery::set_name): <p>The name of the query.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateNamedQuery::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateNamedQuery::set_description): <p>The query description.</p>
    ///   - [`query_string(impl Into<String>)`](crate::client::fluent_builders::UpdateNamedQuery::query_string) / [`set_query_string(Option<String>)`](crate::client::fluent_builders::UpdateNamedQuery::set_query_string): <p>The contents of the query with all query statements.</p>
    /// - On success, responds with [`UpdateNamedQueryOutput`](crate::output::UpdateNamedQueryOutput)

    /// - On failure, responds with [`SdkError<UpdateNamedQueryError>`](crate::error::UpdateNamedQueryError)
    pub fn update_named_query(&self) -> crate::client::fluent_builders::UpdateNamedQuery {
        crate::client::fluent_builders::UpdateNamedQuery::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNotebook`](crate::client::fluent_builders::UpdateNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebook::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::UpdateNotebook::set_notebook_id): <p>The ID of the notebook to update.</p>
    ///   - [`payload(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebook::payload) / [`set_payload(Option<String>)`](crate::client::fluent_builders::UpdateNotebook::set_payload): <p>The updated content for the notebook.</p>
    ///   - [`r#type(NotebookType)`](crate::client::fluent_builders::UpdateNotebook::type) / [`set_type(Option<NotebookType>)`](crate::client::fluent_builders::UpdateNotebook::set_type): <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebook::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::UpdateNotebook::set_session_id): <p>The ID of the session in which the notebook will be updated.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebook::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::UpdateNotebook::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`UpdateNotebookOutput`](crate::output::UpdateNotebookOutput)

    /// - On failure, responds with [`SdkError<UpdateNotebookError>`](crate::error::UpdateNotebookError)
    pub fn update_notebook(&self) -> crate::client::fluent_builders::UpdateNotebook {
        crate::client::fluent_builders::UpdateNotebook::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNotebookMetadata`](crate::client::fluent_builders::UpdateNotebookMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`notebook_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::notebook_id) / [`set_notebook_id(Option<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::set_notebook_id): <p>The ID of the notebook to update the metadata for.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateNotebookMetadata::set_name): <p>The name to update the notebook to.</p>
    /// - On success, responds with [`UpdateNotebookMetadataOutput`](crate::output::UpdateNotebookMetadataOutput)

    /// - On failure, responds with [`SdkError<UpdateNotebookMetadataError>`](crate::error::UpdateNotebookMetadataError)
    pub fn update_notebook_metadata(
        &self,
    ) -> crate::client::fluent_builders::UpdateNotebookMetadata {
        crate::client::fluent_builders::UpdateNotebookMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePreparedStatement`](crate::client::fluent_builders::UpdatePreparedStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::set_statement_name): <p>The name of the prepared statement.</p>
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::set_work_group): <p>The workgroup for the prepared statement.</p>
    ///   - [`query_statement(impl Into<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::query_statement) / [`set_query_statement(Option<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::set_query_statement): <p>The query string for the prepared statement.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdatePreparedStatement::set_description): <p>The description of the prepared statement.</p>
    /// - On success, responds with [`UpdatePreparedStatementOutput`](crate::output::UpdatePreparedStatementOutput)

    /// - On failure, responds with [`SdkError<UpdatePreparedStatementError>`](crate::error::UpdatePreparedStatementError)
    pub fn update_prepared_statement(
        &self,
    ) -> crate::client::fluent_builders::UpdatePreparedStatement {
        crate::client::fluent_builders::UpdatePreparedStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWorkGroup`](crate::client::fluent_builders::UpdateWorkGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkGroup::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::UpdateWorkGroup::set_work_group): <p>The specified workgroup that will be updated.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkGroup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateWorkGroup::set_description): <p>The workgroup description.</p>
    ///   - [`configuration_updates(WorkGroupConfigurationUpdates)`](crate::client::fluent_builders::UpdateWorkGroup::configuration_updates) / [`set_configuration_updates(Option<WorkGroupConfigurationUpdates>)`](crate::client::fluent_builders::UpdateWorkGroup::set_configuration_updates): <p>Contains configuration updates for an Athena SQL workgroup.</p>
    ///   - [`state(WorkGroupState)`](crate::client::fluent_builders::UpdateWorkGroup::state) / [`set_state(Option<WorkGroupState>)`](crate::client::fluent_builders::UpdateWorkGroup::set_state): <p>The workgroup state that will be updated for the given workgroup.</p>
    /// - On success, responds with [`UpdateWorkGroupOutput`](crate::output::UpdateWorkGroupOutput)

    /// - On failure, responds with [`SdkError<UpdateWorkGroupError>`](crate::error::UpdateWorkGroupError)
    pub fn update_work_group(&self) -> crate::client::fluent_builders::UpdateWorkGroup {
        crate::client::fluent_builders::UpdateWorkGroup::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
