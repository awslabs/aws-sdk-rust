// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePreparedStatementInput {
    /// <p>The name of the prepared statement.</p>
    pub statement_name: ::std::option::Option<::std::string::String>,
    /// <p>The workgroup for the prepared statement.</p>
    pub work_group: ::std::option::Option<::std::string::String>,
    /// <p>The query string for the prepared statement.</p>
    pub query_statement: ::std::option::Option<::std::string::String>,
    /// <p>The description of the prepared statement.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdatePreparedStatementInput {
    /// <p>The name of the prepared statement.</p>
    pub fn statement_name(&self) -> ::std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>The workgroup for the prepared statement.</p>
    pub fn work_group(&self) -> ::std::option::Option<&str> {
        self.work_group.as_deref()
    }
    /// <p>The query string for the prepared statement.</p>
    pub fn query_statement(&self) -> ::std::option::Option<&str> {
        self.query_statement.as_deref()
    }
    /// <p>The description of the prepared statement.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdatePreparedStatementInput {
    /// Creates a new builder-style object to manufacture [`UpdatePreparedStatementInput`](crate::operation::update_prepared_statement::UpdatePreparedStatementInput).
    pub fn builder() -> crate::operation::update_prepared_statement::builders::UpdatePreparedStatementInputBuilder {
        crate::operation::update_prepared_statement::builders::UpdatePreparedStatementInputBuilder::default()
    }
}

/// A builder for [`UpdatePreparedStatementInput`](crate::operation::update_prepared_statement::UpdatePreparedStatementInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePreparedStatementInputBuilder {
    pub(crate) statement_name: ::std::option::Option<::std::string::String>,
    pub(crate) work_group: ::std::option::Option<::std::string::String>,
    pub(crate) query_statement: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdatePreparedStatementInputBuilder {
    /// <p>The name of the prepared statement.</p>
    /// This field is required.
    pub fn statement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the prepared statement.</p>
    pub fn set_statement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>The name of the prepared statement.</p>
    pub fn get_statement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_name
    }
    /// <p>The workgroup for the prepared statement.</p>
    /// This field is required.
    pub fn work_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.work_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workgroup for the prepared statement.</p>
    pub fn set_work_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// <p>The workgroup for the prepared statement.</p>
    pub fn get_work_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.work_group
    }
    /// <p>The query string for the prepared statement.</p>
    /// This field is required.
    pub fn query_statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query string for the prepared statement.</p>
    pub fn set_query_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_statement = input;
        self
    }
    /// <p>The query string for the prepared statement.</p>
    pub fn get_query_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_statement
    }
    /// <p>The description of the prepared statement.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the prepared statement.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the prepared statement.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdatePreparedStatementInput`](crate::operation::update_prepared_statement::UpdatePreparedStatementInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_prepared_statement::UpdatePreparedStatementInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_prepared_statement::UpdatePreparedStatementInput {
            statement_name: self.statement_name,
            work_group: self.work_group,
            query_statement: self.query_statement,
            description: self.description,
        })
    }
}
