// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportNotebookInput {
    /// <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    pub work_group: ::std::option::Option<::std::string::String>,
    /// <p>The name of the notebook to import.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The notebook content to be imported.</p>
    pub payload: ::std::option::Option<::std::string::String>,
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub r#type: ::std::option::Option<crate::types::NotebookType>,
    /// <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl ImportNotebookInput {
    /// <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    pub fn work_group(&self) -> ::std::option::Option<&str> {
        self.work_group.as_deref()
    }
    /// <p>The name of the notebook to import.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The notebook content to be imported.</p>
    pub fn payload(&self) -> ::std::option::Option<&str> {
        self.payload.as_deref()
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NotebookType> {
        self.r#type.as_ref()
    }
    /// <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl ImportNotebookInput {
    /// Creates a new builder-style object to manufacture [`ImportNotebookInput`](crate::operation::import_notebook::ImportNotebookInput).
    pub fn builder() -> crate::operation::import_notebook::builders::ImportNotebookInputBuilder {
        crate::operation::import_notebook::builders::ImportNotebookInputBuilder::default()
    }
}

/// A builder for [`ImportNotebookInput`](crate::operation::import_notebook::ImportNotebookInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportNotebookInputBuilder {
    pub(crate) work_group: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::NotebookType>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl ImportNotebookInputBuilder {
    /// <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    /// This field is required.
    pub fn work_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.work_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    pub fn set_work_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    pub fn get_work_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.work_group
    }
    /// <p>The name of the notebook to import.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the notebook to import.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the notebook to import.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The notebook content to be imported.</p>
    /// This field is required.
    pub fn payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The notebook content to be imported.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The notebook content to be imported.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NotebookType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotebookType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotebookType> {
        &self.r#type
    }
    /// <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`ImportNotebookInput`](crate::operation::import_notebook::ImportNotebookInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_notebook::ImportNotebookInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_notebook::ImportNotebookInput {
            work_group: self.work_group,
            name: self.name,
            payload: self.payload,
            r#type: self.r#type,
            client_request_token: self.client_request_token,
        })
    }
}
