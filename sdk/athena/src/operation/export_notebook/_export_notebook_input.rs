// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportNotebookInput {
    /// <p>The ID of the notebook to export.</p>
    pub notebook_id: ::std::option::Option<::std::string::String>,
}
impl ExportNotebookInput {
    /// <p>The ID of the notebook to export.</p>
    pub fn notebook_id(&self) -> ::std::option::Option<&str> {
        self.notebook_id.as_deref()
    }
}
impl ExportNotebookInput {
    /// Creates a new builder-style object to manufacture [`ExportNotebookInput`](crate::operation::export_notebook::ExportNotebookInput).
    pub fn builder() -> crate::operation::export_notebook::builders::ExportNotebookInputBuilder {
        crate::operation::export_notebook::builders::ExportNotebookInputBuilder::default()
    }
}

/// A builder for [`ExportNotebookInput`](crate::operation::export_notebook::ExportNotebookInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportNotebookInputBuilder {
    pub(crate) notebook_id: ::std::option::Option<::std::string::String>,
}
impl ExportNotebookInputBuilder {
    /// <p>The ID of the notebook to export.</p>
    /// This field is required.
    pub fn notebook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notebook_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the notebook to export.</p>
    pub fn set_notebook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notebook_id = input;
        self
    }
    /// <p>The ID of the notebook to export.</p>
    pub fn get_notebook_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.notebook_id
    }
    /// Consumes the builder and constructs a [`ExportNotebookInput`](crate::operation::export_notebook::ExportNotebookInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::export_notebook::ExportNotebookInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::export_notebook::ExportNotebookInput {
            notebook_id: self.notebook_id,
        })
    }
}
