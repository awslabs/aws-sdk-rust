// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetQueryResultsOutput {
    /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. </p>
    #[doc(hidden)]
    pub update_count: std::option::Option<i64>,
    /// <p>The results of the query execution.</p>
    #[doc(hidden)]
    pub result_set: std::option::Option<crate::types::ResultSet>,
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetQueryResultsOutput {
    /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. </p>
    pub fn update_count(&self) -> std::option::Option<i64> {
        self.update_count
    }
    /// <p>The results of the query execution.</p>
    pub fn result_set(&self) -> std::option::Option<&crate::types::ResultSet> {
        self.result_set.as_ref()
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetQueryResultsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetQueryResultsOutput {
    /// Creates a new builder-style object to manufacture [`GetQueryResultsOutput`](crate::operation::get_query_results::GetQueryResultsOutput).
    pub fn builder() -> crate::operation::get_query_results::builders::GetQueryResultsOutputBuilder
    {
        crate::operation::get_query_results::builders::GetQueryResultsOutputBuilder::default()
    }
}

/// A builder for [`GetQueryResultsOutput`](crate::operation::get_query_results::GetQueryResultsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetQueryResultsOutputBuilder {
    pub(crate) update_count: std::option::Option<i64>,
    pub(crate) result_set: std::option::Option<crate::types::ResultSet>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetQueryResultsOutputBuilder {
    /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. </p>
    pub fn update_count(mut self, input: i64) -> Self {
        self.update_count = Some(input);
        self
    }
    /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. </p>
    pub fn set_update_count(mut self, input: std::option::Option<i64>) -> Self {
        self.update_count = input;
        self
    }
    /// <p>The results of the query execution.</p>
    pub fn result_set(mut self, input: crate::types::ResultSet) -> Self {
        self.result_set = Some(input);
        self
    }
    /// <p>The results of the query execution.</p>
    pub fn set_result_set(mut self, input: std::option::Option<crate::types::ResultSet>) -> Self {
        self.result_set = input;
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetQueryResultsOutput`](crate::operation::get_query_results::GetQueryResultsOutput).
    pub fn build(self) -> crate::operation::get_query_results::GetQueryResultsOutput {
        crate::operation::get_query_results::GetQueryResultsOutput {
            update_count: self.update_count,
            result_set: self.result_set,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
