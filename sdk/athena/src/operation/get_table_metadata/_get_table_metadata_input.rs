// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTableMetadataInput {
    /// <p>The name of the data catalog that contains the database and table metadata to return.</p>
    #[doc(hidden)]
    pub catalog_name: std::option::Option<std::string::String>,
    /// <p>The name of the database that contains the table metadata to return.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the table for which metadata is returned.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
}
impl GetTableMetadataInput {
    /// <p>The name of the data catalog that contains the database and table metadata to return.</p>
    pub fn catalog_name(&self) -> std::option::Option<&str> {
        self.catalog_name.as_deref()
    }
    /// <p>The name of the database that contains the table metadata to return.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table for which metadata is returned.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
}
impl GetTableMetadataInput {
    /// Creates a new builder-style object to manufacture [`GetTableMetadataInput`](crate::operation::get_table_metadata::GetTableMetadataInput).
    pub fn builder() -> crate::operation::get_table_metadata::builders::GetTableMetadataInputBuilder
    {
        crate::operation::get_table_metadata::builders::GetTableMetadataInputBuilder::default()
    }
}

/// A builder for [`GetTableMetadataInput`](crate::operation::get_table_metadata::GetTableMetadataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTableMetadataInputBuilder {
    pub(crate) catalog_name: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
}
impl GetTableMetadataInputBuilder {
    /// <p>The name of the data catalog that contains the database and table metadata to return.</p>
    pub fn catalog_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_name = Some(input.into());
        self
    }
    /// <p>The name of the data catalog that contains the database and table metadata to return.</p>
    pub fn set_catalog_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_name = input;
        self
    }
    /// <p>The name of the database that contains the table metadata to return.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the database that contains the table metadata to return.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the table for which metadata is returned.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table for which metadata is returned.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTableMetadataInput`](crate::operation::get_table_metadata::GetTableMetadataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_table_metadata::GetTableMetadataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_table_metadata::GetTableMetadataInput {
                catalog_name: self.catalog_name,
                database_name: self.database_name,
                table_name: self.table_name,
            },
        )
    }
}
