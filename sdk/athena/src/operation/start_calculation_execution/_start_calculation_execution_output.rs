// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartCalculationExecutionOutput {
    /// <p>The calculation execution UUID.</p>
    #[doc(hidden)]
    pub calculation_execution_id: std::option::Option<std::string::String>,
    /// <p> <code>CREATING</code> - The calculation is in the process of being created.</p>
    /// <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>
    /// <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>
    /// <p> <code>RUNNING</code> - The calculation is running.</p>
    /// <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>
    /// <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>
    /// <p> <code>COMPLETED</code> - The calculation has completed without error.</p>
    /// <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::CalculationExecutionState>,
    _request_id: Option<String>,
}
impl StartCalculationExecutionOutput {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(&self) -> std::option::Option<&str> {
        self.calculation_execution_id.as_deref()
    }
    /// <p> <code>CREATING</code> - The calculation is in the process of being created.</p>
    /// <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>
    /// <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>
    /// <p> <code>RUNNING</code> - The calculation is running.</p>
    /// <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>
    /// <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>
    /// <p> <code>COMPLETED</code> - The calculation has completed without error.</p>
    /// <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::CalculationExecutionState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartCalculationExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartCalculationExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StartCalculationExecutionOutput`](crate::operation::start_calculation_execution::StartCalculationExecutionOutput).
    pub fn builder() -> crate::operation::start_calculation_execution::builders::StartCalculationExecutionOutputBuilder{
        crate::operation::start_calculation_execution::builders::StartCalculationExecutionOutputBuilder::default()
    }
}

/// A builder for [`StartCalculationExecutionOutput`](crate::operation::start_calculation_execution::StartCalculationExecutionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartCalculationExecutionOutputBuilder {
    pub(crate) calculation_execution_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::CalculationExecutionState>,
    _request_id: Option<String>,
}
impl StartCalculationExecutionOutputBuilder {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.calculation_execution_id = Some(input.into());
        self
    }
    /// <p>The calculation execution UUID.</p>
    pub fn set_calculation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.calculation_execution_id = input;
        self
    }
    /// <p> <code>CREATING</code> - The calculation is in the process of being created.</p>
    /// <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>
    /// <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>
    /// <p> <code>RUNNING</code> - The calculation is running.</p>
    /// <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>
    /// <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>
    /// <p> <code>COMPLETED</code> - The calculation has completed without error.</p>
    /// <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    pub fn state(mut self, input: crate::types::CalculationExecutionState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p> <code>CREATING</code> - The calculation is in the process of being created.</p>
    /// <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>
    /// <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>
    /// <p> <code>RUNNING</code> - The calculation is running.</p>
    /// <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>
    /// <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>
    /// <p> <code>COMPLETED</code> - The calculation has completed without error.</p>
    /// <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::CalculationExecutionState>,
    ) -> Self {
        self.state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartCalculationExecutionOutput`](crate::operation::start_calculation_execution::StartCalculationExecutionOutput).
    pub fn build(
        self,
    ) -> crate::operation::start_calculation_execution::StartCalculationExecutionOutput {
        crate::operation::start_calculation_execution::StartCalculationExecutionOutput {
            calculation_execution_id: self.calculation_execution_id,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
