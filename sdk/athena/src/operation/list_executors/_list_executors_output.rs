// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExecutorsOutput {
    /// <p>The session ID.</p>
    pub session_id: ::std::string::String,
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Contains summary information about the executor.</p>
    pub executors_summary: ::std::option::Option<::std::vec::Vec<crate::types::ExecutorsSummary>>,
    _request_id: Option<String>,
}
impl ListExecutorsOutput {
    /// <p>The session ID.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Contains summary information about the executor.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.executors_summary.is_none()`.
    pub fn executors_summary(&self) -> &[crate::types::ExecutorsSummary] {
        self.executors_summary.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListExecutorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExecutorsOutput {
    /// Creates a new builder-style object to manufacture [`ListExecutorsOutput`](crate::operation::list_executors::ListExecutorsOutput).
    pub fn builder() -> crate::operation::list_executors::builders::ListExecutorsOutputBuilder {
        crate::operation::list_executors::builders::ListExecutorsOutputBuilder::default()
    }
}

/// A builder for [`ListExecutorsOutput`](crate::operation::list_executors::ListExecutorsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListExecutorsOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) executors_summary: ::std::option::Option<::std::vec::Vec<crate::types::ExecutorsSummary>>,
    _request_id: Option<String>,
}
impl ListExecutorsOutputBuilder {
    /// <p>The session ID.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session ID.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The session ID.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `executors_summary`.
    ///
    /// To override the contents of this collection use [`set_executors_summary`](Self::set_executors_summary).
    ///
    /// <p>Contains summary information about the executor.</p>
    pub fn executors_summary(mut self, input: crate::types::ExecutorsSummary) -> Self {
        let mut v = self.executors_summary.unwrap_or_default();
        v.push(input);
        self.executors_summary = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains summary information about the executor.</p>
    pub fn set_executors_summary(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExecutorsSummary>>) -> Self {
        self.executors_summary = input;
        self
    }
    /// <p>Contains summary information about the executor.</p>
    pub fn get_executors_summary(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExecutorsSummary>> {
        &self.executors_summary
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListExecutorsOutput`](crate::operation::list_executors::ListExecutorsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::operation::list_executors::builders::ListExecutorsOutputBuilder::session_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_executors::ListExecutorsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_executors::ListExecutorsOutput {
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building ListExecutorsOutput",
                )
            })?,
            next_token: self.next_token,
            executors_summary: self.executors_summary,
            _request_id: self._request_id,
        })
    }
}
