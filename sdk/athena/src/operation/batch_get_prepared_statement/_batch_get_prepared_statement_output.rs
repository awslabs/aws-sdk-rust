// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetPreparedStatementOutput {
    /// <p>The list of prepared statements returned.</p>
    #[doc(hidden)]
    pub prepared_statements: std::option::Option<std::vec::Vec<crate::types::PreparedStatement>>,
    /// <p>A list of one or more prepared statements that were requested but could not be returned.</p>
    #[doc(hidden)]
    pub unprocessed_prepared_statement_names:
        std::option::Option<std::vec::Vec<crate::types::UnprocessedPreparedStatementName>>,
    _request_id: Option<String>,
}
impl BatchGetPreparedStatementOutput {
    /// <p>The list of prepared statements returned.</p>
    pub fn prepared_statements(&self) -> std::option::Option<&[crate::types::PreparedStatement]> {
        self.prepared_statements.as_deref()
    }
    /// <p>A list of one or more prepared statements that were requested but could not be returned.</p>
    pub fn unprocessed_prepared_statement_names(
        &self,
    ) -> std::option::Option<&[crate::types::UnprocessedPreparedStatementName]> {
        self.unprocessed_prepared_statement_names.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetPreparedStatementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetPreparedStatementOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetPreparedStatementOutput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput).
    pub fn builder() -> crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementOutputBuilder{
        crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementOutputBuilder::default()
    }
}

/// A builder for [`BatchGetPreparedStatementOutput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetPreparedStatementOutputBuilder {
    pub(crate) prepared_statements:
        std::option::Option<std::vec::Vec<crate::types::PreparedStatement>>,
    pub(crate) unprocessed_prepared_statement_names:
        std::option::Option<std::vec::Vec<crate::types::UnprocessedPreparedStatementName>>,
    _request_id: Option<String>,
}
impl BatchGetPreparedStatementOutputBuilder {
    /// Appends an item to `prepared_statements`.
    ///
    /// To override the contents of this collection use [`set_prepared_statements`](Self::set_prepared_statements).
    ///
    /// <p>The list of prepared statements returned.</p>
    pub fn prepared_statements(mut self, input: crate::types::PreparedStatement) -> Self {
        let mut v = self.prepared_statements.unwrap_or_default();
        v.push(input);
        self.prepared_statements = Some(v);
        self
    }
    /// <p>The list of prepared statements returned.</p>
    pub fn set_prepared_statements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PreparedStatement>>,
    ) -> Self {
        self.prepared_statements = input;
        self
    }
    /// Appends an item to `unprocessed_prepared_statement_names`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_prepared_statement_names`](Self::set_unprocessed_prepared_statement_names).
    ///
    /// <p>A list of one or more prepared statements that were requested but could not be returned.</p>
    pub fn unprocessed_prepared_statement_names(
        mut self,
        input: crate::types::UnprocessedPreparedStatementName,
    ) -> Self {
        let mut v = self
            .unprocessed_prepared_statement_names
            .unwrap_or_default();
        v.push(input);
        self.unprocessed_prepared_statement_names = Some(v);
        self
    }
    /// <p>A list of one or more prepared statements that were requested but could not be returned.</p>
    pub fn set_unprocessed_prepared_statement_names(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnprocessedPreparedStatementName>>,
    ) -> Self {
        self.unprocessed_prepared_statement_names = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetPreparedStatementOutput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput {
        crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput {
            prepared_statements: self.prepared_statements,
            unprocessed_prepared_statement_names: self.unprocessed_prepared_statement_names,
            _request_id: self._request_id,
        }
    }
}
