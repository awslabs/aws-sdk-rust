// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetPreparedStatementInput {
    /// <p>A list of prepared statement names to return.</p>
    #[doc(hidden)]
    pub prepared_statement_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    #[doc(hidden)]
    pub work_group: std::option::Option<std::string::String>,
}
impl BatchGetPreparedStatementInput {
    /// <p>A list of prepared statement names to return.</p>
    pub fn prepared_statement_names(&self) -> std::option::Option<&[std::string::String]> {
        self.prepared_statement_names.as_deref()
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn work_group(&self) -> std::option::Option<&str> {
        self.work_group.as_deref()
    }
}
impl BatchGetPreparedStatementInput {
    /// Creates a new builder-style object to manufacture [`BatchGetPreparedStatementInput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementInput).
    pub fn builder() -> crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementInputBuilder{
        crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementInputBuilder::default()
    }
}

/// A builder for [`BatchGetPreparedStatementInput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetPreparedStatementInputBuilder {
    pub(crate) prepared_statement_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) work_group: std::option::Option<std::string::String>,
}
impl BatchGetPreparedStatementInputBuilder {
    /// Appends an item to `prepared_statement_names`.
    ///
    /// To override the contents of this collection use [`set_prepared_statement_names`](Self::set_prepared_statement_names).
    ///
    /// <p>A list of prepared statement names to return.</p>
    pub fn prepared_statement_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.prepared_statement_names.unwrap_or_default();
        v.push(input.into());
        self.prepared_statement_names = Some(v);
        self
    }
    /// <p>A list of prepared statement names to return.</p>
    pub fn set_prepared_statement_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.prepared_statement_names = input;
        self
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn work_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_group = Some(input.into());
        self
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn set_work_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetPreparedStatementInput`](crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementInput {
                prepared_statement_names: self.prepared_statement_names,
                work_group: self.work_group,
            },
        )
    }
}
