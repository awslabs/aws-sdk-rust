// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_notebook::_update_notebook_output::UpdateNotebookOutputBuilder;

pub use crate::operation::update_notebook::_update_notebook_input::UpdateNotebookInputBuilder;

impl crate::operation::update_notebook::builders::UpdateNotebookInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_notebook::UpdateNotebookOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notebook::UpdateNotebookError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_notebook();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateNotebook`.
///
/// <p>Updates the contents of a Spark notebook.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateNotebookFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_notebook::builders::UpdateNotebookInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_notebook::UpdateNotebookOutput,
        crate::operation::update_notebook::UpdateNotebookError,
    > for UpdateNotebookFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_notebook::UpdateNotebookOutput,
            crate::operation::update_notebook::UpdateNotebookError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateNotebookFluentBuilder {
    /// Creates a new `UpdateNotebook`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateNotebook as a reference.
    pub fn as_input(&self) -> &crate::operation::update_notebook::builders::UpdateNotebookInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_notebook::UpdateNotebookOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notebook::UpdateNotebookError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_notebook::UpdateNotebook::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_notebook::UpdateNotebook::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_notebook::UpdateNotebookOutput,
        crate::operation::update_notebook::UpdateNotebookError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the notebook to update.</p>
    pub fn notebook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notebook_id(input.into());
        self
    }
    /// <p>The ID of the notebook to update.</p>
    pub fn set_notebook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notebook_id(input);
        self
    }
    /// <p>The ID of the notebook to update.</p>
    pub fn get_notebook_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notebook_id()
    }
    /// <p>The updated content for the notebook.</p>
    pub fn payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.payload(input.into());
        self
    }
    /// <p>The updated content for the notebook.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_payload(input);
        self
    }
    /// <p>The updated content for the notebook.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_payload()
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn r#type(mut self, input: crate::types::NotebookType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotebookType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotebookType> {
        self.inner.get_type()
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_id()
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p><important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p><important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p><important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
}
