// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateNotebookInput {
    /// <p>The ID of the notebook to update.</p>
    pub notebook_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated content for the notebook.</p>
    pub payload: ::std::option::Option<::std::string::String>,
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub r#type: ::std::option::Option<crate::types::NotebookType>,
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl UpdateNotebookInput {
    /// <p>The ID of the notebook to update.</p>
    pub fn notebook_id(&self) -> ::std::option::Option<&str> {
        self.notebook_id.as_deref()
    }
    /// <p>The updated content for the notebook.</p>
    pub fn payload(&self) -> ::std::option::Option<&str> {
        self.payload.as_deref()
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NotebookType> {
        self.r#type.as_ref()
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl UpdateNotebookInput {
    /// Creates a new builder-style object to manufacture [`UpdateNotebookInput`](crate::operation::update_notebook::UpdateNotebookInput).
    pub fn builder() -> crate::operation::update_notebook::builders::UpdateNotebookInputBuilder {
        crate::operation::update_notebook::builders::UpdateNotebookInputBuilder::default()
    }
}

/// A builder for [`UpdateNotebookInput`](crate::operation::update_notebook::UpdateNotebookInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateNotebookInputBuilder {
    pub(crate) notebook_id: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::NotebookType>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl UpdateNotebookInputBuilder {
    /// <p>The ID of the notebook to update.</p>
    /// This field is required.
    pub fn notebook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notebook_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the notebook to update.</p>
    pub fn set_notebook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notebook_id = input;
        self
    }
    /// <p>The ID of the notebook to update.</p>
    pub fn get_notebook_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.notebook_id
    }
    /// <p>The updated content for the notebook.</p>
    /// This field is required.
    pub fn payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated content for the notebook.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The updated content for the notebook.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NotebookType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotebookType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotebookType> {
        &self.r#type
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The active notebook session ID. Required if the notebook has an active session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important>
    /// <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>
    /// </important>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`UpdateNotebookInput`](crate::operation::update_notebook::UpdateNotebookInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_notebook::UpdateNotebookInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_notebook::UpdateNotebookInput {
            notebook_id: self.notebook_id,
            payload: self.payload,
            r#type: self.r#type,
            session_id: self.session_id,
            client_request_token: self.client_request_token,
        })
    }
}
