// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCalculationExecutionOutput {
    /// <p>The calculation execution UUID.</p>
    #[doc(hidden)]
    pub calculation_execution_id: std::option::Option<std::string::String>,
    /// <p>The session ID that the calculation ran in.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
    /// <p>The description of the calculation execution.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 location in which calculation results are stored.</p>
    #[doc(hidden)]
    pub working_directory: std::option::Option<std::string::String>,
    /// <p>Contains information about the status of the calculation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CalculationStatus>,
    /// <p>Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::types::CalculationStatistics>,
    /// <p>Contains result information. This field is populated only if the calculation is completed.</p>
    #[doc(hidden)]
    pub result: std::option::Option<crate::types::CalculationResult>,
    _request_id: Option<String>,
}
impl GetCalculationExecutionOutput {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(&self) -> std::option::Option<&str> {
        self.calculation_execution_id.as_deref()
    }
    /// <p>The session ID that the calculation ran in.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The description of the calculation execution.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon S3 location in which calculation results are stored.</p>
    pub fn working_directory(&self) -> std::option::Option<&str> {
        self.working_directory.as_deref()
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CalculationStatus> {
        self.status.as_ref()
    }
    /// <p>Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::types::CalculationStatistics> {
        self.statistics.as_ref()
    }
    /// <p>Contains result information. This field is populated only if the calculation is completed.</p>
    pub fn result(&self) -> std::option::Option<&crate::types::CalculationResult> {
        self.result.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCalculationExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCalculationExecutionOutput {
    /// Creates a new builder-style object to manufacture [`GetCalculationExecutionOutput`](crate::operation::get_calculation_execution::GetCalculationExecutionOutput).
    pub fn builder(
    ) -> crate::operation::get_calculation_execution::builders::GetCalculationExecutionOutputBuilder
    {
        crate::operation::get_calculation_execution::builders::GetCalculationExecutionOutputBuilder::default()
    }
}

/// A builder for [`GetCalculationExecutionOutput`](crate::operation::get_calculation_execution::GetCalculationExecutionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCalculationExecutionOutputBuilder {
    pub(crate) calculation_execution_id: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) working_directory: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::CalculationStatus>,
    pub(crate) statistics: std::option::Option<crate::types::CalculationStatistics>,
    pub(crate) result: std::option::Option<crate::types::CalculationResult>,
    _request_id: Option<String>,
}
impl GetCalculationExecutionOutputBuilder {
    /// <p>The calculation execution UUID.</p>
    pub fn calculation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.calculation_execution_id = Some(input.into());
        self
    }
    /// <p>The calculation execution UUID.</p>
    pub fn set_calculation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.calculation_execution_id = input;
        self
    }
    /// <p>The session ID that the calculation ran in.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The session ID that the calculation ran in.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The description of the calculation execution.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the calculation execution.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon S3 location in which calculation results are stored.</p>
    pub fn working_directory(mut self, input: impl Into<std::string::String>) -> Self {
        self.working_directory = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location in which calculation results are stored.</p>
    pub fn set_working_directory(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.working_directory = input;
        self
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn status(mut self, input: crate::types::CalculationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Contains information about the status of the calculation.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CalculationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.</p>
    pub fn statistics(mut self, input: crate::types::CalculationStatistics) -> Self {
        self.statistics = Some(input);
        self
    }
    /// <p>Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available.</p>
    pub fn set_statistics(
        mut self,
        input: std::option::Option<crate::types::CalculationStatistics>,
    ) -> Self {
        self.statistics = input;
        self
    }
    /// <p>Contains result information. This field is populated only if the calculation is completed.</p>
    pub fn result(mut self, input: crate::types::CalculationResult) -> Self {
        self.result = Some(input);
        self
    }
    /// <p>Contains result information. This field is populated only if the calculation is completed.</p>
    pub fn set_result(
        mut self,
        input: std::option::Option<crate::types::CalculationResult>,
    ) -> Self {
        self.result = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCalculationExecutionOutput`](crate::operation::get_calculation_execution::GetCalculationExecutionOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_calculation_execution::GetCalculationExecutionOutput {
        crate::operation::get_calculation_execution::GetCalculationExecutionOutput {
            calculation_execution_id: self.calculation_execution_id,
            session_id: self.session_id,
            description: self.description,
            working_directory: self.working_directory,
            status: self.status,
            statistics: self.statistics,
            result: self.result,
            _request_id: self._request_id,
        }
    }
}
