// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSessionOutput {
    /// <p>The session ID.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
    /// <p>The session description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The workgroup to which the session belongs.</p>
    #[doc(hidden)]
    pub work_group: std::option::Option<std::string::String>,
    /// <p>The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <code>ListEngineVersions</code>.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>Contains engine configuration information like DPU usage.</p>
    #[doc(hidden)]
    pub engine_configuration: std::option::Option<crate::types::EngineConfiguration>,
    /// <p>The notebook version.</p>
    #[doc(hidden)]
    pub notebook_version: std::option::Option<std::string::String>,
    /// <p>Contains the workgroup configuration information used by the session.</p>
    #[doc(hidden)]
    pub session_configuration: std::option::Option<crate::types::SessionConfiguration>,
    /// <p>Contains information about the status of the session.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SessionStatus>,
    /// <p>Contains the DPU execution time.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::types::SessionStatistics>,
    _request_id: Option<String>,
}
impl GetSessionOutput {
    /// <p>The session ID.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The session description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The workgroup to which the session belongs.</p>
    pub fn work_group(&self) -> std::option::Option<&str> {
        self.work_group.as_deref()
    }
    /// <p>The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <code>ListEngineVersions</code>.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Contains engine configuration information like DPU usage.</p>
    pub fn engine_configuration(&self) -> std::option::Option<&crate::types::EngineConfiguration> {
        self.engine_configuration.as_ref()
    }
    /// <p>The notebook version.</p>
    pub fn notebook_version(&self) -> std::option::Option<&str> {
        self.notebook_version.as_deref()
    }
    /// <p>Contains the workgroup configuration information used by the session.</p>
    pub fn session_configuration(
        &self,
    ) -> std::option::Option<&crate::types::SessionConfiguration> {
        self.session_configuration.as_ref()
    }
    /// <p>Contains information about the status of the session.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SessionStatus> {
        self.status.as_ref()
    }
    /// <p>Contains the DPU execution time.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::types::SessionStatistics> {
        self.statistics.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetSessionOutput`](crate::operation::get_session::GetSessionOutput).
    pub fn builder() -> crate::operation::get_session::builders::GetSessionOutputBuilder {
        crate::operation::get_session::builders::GetSessionOutputBuilder::default()
    }
}

/// A builder for [`GetSessionOutput`](crate::operation::get_session::GetSessionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSessionOutputBuilder {
    pub(crate) session_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) work_group: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) engine_configuration: std::option::Option<crate::types::EngineConfiguration>,
    pub(crate) notebook_version: std::option::Option<std::string::String>,
    pub(crate) session_configuration: std::option::Option<crate::types::SessionConfiguration>,
    pub(crate) status: std::option::Option<crate::types::SessionStatus>,
    pub(crate) statistics: std::option::Option<crate::types::SessionStatistics>,
    _request_id: Option<String>,
}
impl GetSessionOutputBuilder {
    /// <p>The session ID.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The session ID.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The session description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The session description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The workgroup to which the session belongs.</p>
    pub fn work_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_group = Some(input.into());
        self
    }
    /// <p>The workgroup to which the session belongs.</p>
    pub fn set_work_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// <p>The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <code>ListEngineVersions</code>.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <code>ListEngineVersions</code>.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Contains engine configuration information like DPU usage.</p>
    pub fn engine_configuration(mut self, input: crate::types::EngineConfiguration) -> Self {
        self.engine_configuration = Some(input);
        self
    }
    /// <p>Contains engine configuration information like DPU usage.</p>
    pub fn set_engine_configuration(
        mut self,
        input: std::option::Option<crate::types::EngineConfiguration>,
    ) -> Self {
        self.engine_configuration = input;
        self
    }
    /// <p>The notebook version.</p>
    pub fn notebook_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.notebook_version = Some(input.into());
        self
    }
    /// <p>The notebook version.</p>
    pub fn set_notebook_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.notebook_version = input;
        self
    }
    /// <p>Contains the workgroup configuration information used by the session.</p>
    pub fn session_configuration(mut self, input: crate::types::SessionConfiguration) -> Self {
        self.session_configuration = Some(input);
        self
    }
    /// <p>Contains the workgroup configuration information used by the session.</p>
    pub fn set_session_configuration(
        mut self,
        input: std::option::Option<crate::types::SessionConfiguration>,
    ) -> Self {
        self.session_configuration = input;
        self
    }
    /// <p>Contains information about the status of the session.</p>
    pub fn status(mut self, input: crate::types::SessionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Contains information about the status of the session.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Contains the DPU execution time.</p>
    pub fn statistics(mut self, input: crate::types::SessionStatistics) -> Self {
        self.statistics = Some(input);
        self
    }
    /// <p>Contains the DPU execution time.</p>
    pub fn set_statistics(
        mut self,
        input: std::option::Option<crate::types::SessionStatistics>,
    ) -> Self {
        self.statistics = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSessionOutput`](crate::operation::get_session::GetSessionOutput).
    pub fn build(self) -> crate::operation::get_session::GetSessionOutput {
        crate::operation::get_session::GetSessionOutput {
            session_id: self.session_id,
            description: self.description,
            work_group: self.work_group,
            engine_version: self.engine_version,
            engine_configuration: self.engine_configuration,
            notebook_version: self.notebook_version,
            session_configuration: self.session_configuration,
            status: self.status,
            statistics: self.statistics,
            _request_id: self._request_id,
        }
    }
}
