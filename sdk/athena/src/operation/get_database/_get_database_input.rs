// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDatabaseInput {
    /// <p>The name of the data catalog that contains the database to return.</p>
    pub catalog_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database to return.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
}
impl GetDatabaseInput {
    /// <p>The name of the data catalog that contains the database to return.</p>
    pub fn catalog_name(&self) -> ::std::option::Option<&str> {
        self.catalog_name.as_deref()
    }
    /// <p>The name of the database to return.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
}
impl GetDatabaseInput {
    /// Creates a new builder-style object to manufacture [`GetDatabaseInput`](crate::operation::get_database::GetDatabaseInput).
    pub fn builder() -> crate::operation::get_database::builders::GetDatabaseInputBuilder {
        crate::operation::get_database::builders::GetDatabaseInputBuilder::default()
    }
}

/// A builder for [`GetDatabaseInput`](crate::operation::get_database::GetDatabaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDatabaseInputBuilder {
    pub(crate) catalog_name: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
}
impl GetDatabaseInputBuilder {
    /// <p>The name of the data catalog that contains the database to return.</p>
    /// This field is required.
    pub fn catalog_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data catalog that contains the database to return.</p>
    pub fn set_catalog_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_name = input;
        self
    }
    /// <p>The name of the data catalog that contains the database to return.</p>
    pub fn get_catalog_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_name
    }
    /// <p>The name of the database to return.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to return.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database to return.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// Consumes the builder and constructs a [`GetDatabaseInput`](crate::operation::get_database::GetDatabaseInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_database::GetDatabaseInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_database::GetDatabaseInput {
            catalog_name: self.catalog_name,
            database_name: self.database_name,
        })
    }
}
