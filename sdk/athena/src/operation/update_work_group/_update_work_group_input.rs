// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkGroupInput {
    /// <p>The specified workgroup that will be updated.</p>
    #[doc(hidden)]
    pub work_group: std::option::Option<std::string::String>,
    /// <p>The workgroup description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Contains configuration updates for an Athena SQL workgroup.</p>
    #[doc(hidden)]
    pub configuration_updates: std::option::Option<crate::types::WorkGroupConfigurationUpdates>,
    /// <p>The workgroup state that will be updated for the given workgroup.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::WorkGroupState>,
}
impl UpdateWorkGroupInput {
    /// <p>The specified workgroup that will be updated.</p>
    pub fn work_group(&self) -> std::option::Option<&str> {
        self.work_group.as_deref()
    }
    /// <p>The workgroup description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Contains configuration updates for an Athena SQL workgroup.</p>
    pub fn configuration_updates(
        &self,
    ) -> std::option::Option<&crate::types::WorkGroupConfigurationUpdates> {
        self.configuration_updates.as_ref()
    }
    /// <p>The workgroup state that will be updated for the given workgroup.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::WorkGroupState> {
        self.state.as_ref()
    }
}
impl UpdateWorkGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkGroupInput`](crate::operation::update_work_group::UpdateWorkGroupInput).
    pub fn builder() -> crate::operation::update_work_group::builders::UpdateWorkGroupInputBuilder {
        crate::operation::update_work_group::builders::UpdateWorkGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkGroupInput`](crate::operation::update_work_group::UpdateWorkGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkGroupInputBuilder {
    pub(crate) work_group: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) configuration_updates:
        std::option::Option<crate::types::WorkGroupConfigurationUpdates>,
    pub(crate) state: std::option::Option<crate::types::WorkGroupState>,
}
impl UpdateWorkGroupInputBuilder {
    /// <p>The specified workgroup that will be updated.</p>
    pub fn work_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_group = Some(input.into());
        self
    }
    /// <p>The specified workgroup that will be updated.</p>
    pub fn set_work_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_group = input;
        self
    }
    /// <p>The workgroup description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The workgroup description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Contains configuration updates for an Athena SQL workgroup.</p>
    pub fn configuration_updates(
        mut self,
        input: crate::types::WorkGroupConfigurationUpdates,
    ) -> Self {
        self.configuration_updates = Some(input);
        self
    }
    /// <p>Contains configuration updates for an Athena SQL workgroup.</p>
    pub fn set_configuration_updates(
        mut self,
        input: std::option::Option<crate::types::WorkGroupConfigurationUpdates>,
    ) -> Self {
        self.configuration_updates = input;
        self
    }
    /// <p>The workgroup state that will be updated for the given workgroup.</p>
    pub fn state(mut self, input: crate::types::WorkGroupState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The workgroup state that will be updated for the given workgroup.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::WorkGroupState>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkGroupInput`](crate::operation::update_work_group::UpdateWorkGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_work_group::UpdateWorkGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_work_group::UpdateWorkGroupInput {
            work_group: self.work_group,
            description: self.description,
            configuration_updates: self.configuration_updates,
            state: self.state,
        })
    }
}
