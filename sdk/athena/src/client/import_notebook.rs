// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportNotebook`](crate::client::fluent_builders::ImportNotebook) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`work_group(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::work_group) / [`set_work_group(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_work_group): <p>The name of the Spark enabled workgroup to import the notebook to.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_name): <p>The name of the notebook to import.</p>
    ///   - [`payload(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::payload) / [`set_payload(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_payload): <p>The notebook content to be imported.</p>
    ///   - [`r#type(NotebookType)`](crate::client::fluent_builders::ImportNotebook::type) / [`set_type(Option<NotebookType>)`](crate::client::fluent_builders::ImportNotebook::set_type): <p>The notebook content type. Currently, the only valid type is <code>IPYNB</code>.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::ImportNotebook::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::ImportNotebook::set_client_request_token): <p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important>   <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p>  </important>
    /// - On success, responds with [`ImportNotebookOutput`](crate::output::ImportNotebookOutput) with field(s):
    ///   - [`notebook_id(Option<String>)`](crate::output::ImportNotebookOutput::notebook_id): <p>The ID of the notebook to import.</p>
    /// - On failure, responds with [`SdkError<ImportNotebookError>`](crate::error::ImportNotebookError)
    pub fn import_notebook(&self) -> crate::client::fluent_builders::ImportNotebook {
        crate::client::fluent_builders::ImportNotebook::new(self.handle.clone())
    }
}
