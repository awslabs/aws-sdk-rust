// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListApplicationDPUSizes`](crate::client::fluent_builders::ListApplicationDPUSizes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApplicationDPUSizes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApplicationDPUSizes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApplicationDPUSizes::set_max_results): <p>Specifies the maximum number of results to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplicationDPUSizes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplicationDPUSizes::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.</p>
    /// - On success, responds with [`ListApplicationDpuSizesOutput`](crate::output::ListApplicationDpuSizesOutput) with field(s):
    ///   - [`application_dpu_sizes(Option<Vec<ApplicationDpuSizes>>)`](crate::output::ListApplicationDpuSizesOutput::application_dpu_sizes): <p>A list of the supported DPU sizes that the application runtime supports.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationDpuSizesOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On failure, responds with [`SdkError<ListApplicationDPUSizesError>`](crate::error::ListApplicationDPUSizesError)
    pub fn list_application_dpu_sizes(
        &self,
    ) -> crate::client::fluent_builders::ListApplicationDPUSizes {
        crate::client::fluent_builders::ListApplicationDPUSizes::new(self.handle.clone())
    }
}
