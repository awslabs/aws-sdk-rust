// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListCalculationExecutions`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::session_id) / [`set_session_id(Option<String>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::set_session_id): <p>The session ID.</p>
    ///   - [`state_filter(CalculationExecutionState)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::state_filter) / [`set_state_filter(Option<CalculationExecutionState>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::set_state_filter): <p>A filter for a specific calculation execution state. A description of each state follows.</p>  <p> <code>CREATING</code> - The calculation is in the process of being created.</p>  <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p>  <p> <code>QUEUED</code> - The calculation has been queued for processing.</p>  <p> <code>RUNNING</code> - The calculation is running.</p>  <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p>  <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p>  <p> <code>COMPLETED</code> - The calculation has completed without error.</p>  <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>
    ///   - [`max_results(i32)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::set_max_results): <p>The maximum number of calculation executions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::set_next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    /// - On success, responds with [`ListCalculationExecutionsOutput`](crate::operation::list_calculation_executions::ListCalculationExecutionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_calculation_executions::ListCalculationExecutionsOutput::next_token): <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    ///   - [`calculations(Option<Vec<CalculationSummary>>)`](crate::operation::list_calculation_executions::ListCalculationExecutionsOutput::calculations): <p>A list of <code>CalculationSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListCalculationExecutionsError>`](crate::operation::list_calculation_executions::ListCalculationExecutionsError)
    pub fn list_calculation_executions(&self) -> crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder{
        crate::operation::list_calculation_executions::builders::ListCalculationExecutionsFluentBuilder::new(self.handle.clone())
    }
}
