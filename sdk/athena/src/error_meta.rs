// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Indicates a platform issue, which may be due to a transient condition or outage.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Indicates that something is wrong with the input to the request. For example, a required parameter may be missing or out of range.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>An exception that Athena received when it called a custom metastore. Occurs if the error is not caused by user input (<code>InvalidRequestException</code>) or from the Athena platform (<code>InternalServerException</code>). For example, if a user-created Lambda function is missing permissions, the Lambda <code>4XX</code> exception is returned in a <code>MetadataException</code>.</p>
    MetadataException(crate::types::error::MetadataException),
    /// <p>A resource, such as a workgroup, was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The specified session already exists.</p>
    SessionAlreadyExistsException(crate::types::error::SessionAlreadyExistsException),
    /// <p>Indicates that the request was throttled.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::MetadataException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::SessionAlreadyExistsException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_named_query::BatchGetNamedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_named_query::BatchGetNamedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_named_query::BatchGetNamedQueryError> for Error {
    fn from(err: crate::operation::batch_get_named_query::BatchGetNamedQueryError) -> Self {
        match err {
            crate::operation::batch_get_named_query::BatchGetNamedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_get_named_query::BatchGetNamedQueryError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_get_named_query::BatchGetNamedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError> for Error {
    fn from(err: crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError) -> Self {
        match err {
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_query_execution::BatchGetQueryExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_query_execution::BatchGetQueryExecutionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_query_execution::BatchGetQueryExecutionError> for Error {
    fn from(err: crate::operation::batch_get_query_execution::BatchGetQueryExecutionError) -> Self {
        match err {
            crate::operation::batch_get_query_execution::BatchGetQueryExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_query_execution::BatchGetQueryExecutionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_get_query_execution::BatchGetQueryExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_capacity_reservation::CancelCapacityReservationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_capacity_reservation::CancelCapacityReservationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_capacity_reservation::CancelCapacityReservationError> for Error {
    fn from(err: crate::operation::cancel_capacity_reservation::CancelCapacityReservationError) -> Self {
        match err {
            crate::operation::cancel_capacity_reservation::CancelCapacityReservationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_capacity_reservation::CancelCapacityReservationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::cancel_capacity_reservation::CancelCapacityReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_capacity_reservation::CreateCapacityReservationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_capacity_reservation::CreateCapacityReservationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_capacity_reservation::CreateCapacityReservationError> for Error {
    fn from(err: crate::operation::create_capacity_reservation::CreateCapacityReservationError) -> Self {
        match err {
            crate::operation::create_capacity_reservation::CreateCapacityReservationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_capacity_reservation::CreateCapacityReservationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_capacity_reservation::CreateCapacityReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_catalog::CreateDataCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_catalog::CreateDataCatalogError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_catalog::CreateDataCatalogError> for Error {
    fn from(err: crate::operation::create_data_catalog::CreateDataCatalogError) -> Self {
        match err {
            crate::operation::create_data_catalog::CreateDataCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_catalog::CreateDataCatalogError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_data_catalog::CreateDataCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_named_query::CreateNamedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_named_query::CreateNamedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_named_query::CreateNamedQueryError> for Error {
    fn from(err: crate::operation::create_named_query::CreateNamedQueryError) -> Self {
        match err {
            crate::operation::create_named_query::CreateNamedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_named_query::CreateNamedQueryError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_named_query::CreateNamedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_notebook::CreateNotebookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_notebook::CreateNotebookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_notebook::CreateNotebookError> for Error {
    fn from(err: crate::operation::create_notebook::CreateNotebookError) -> Self {
        match err {
            crate::operation::create_notebook::CreateNotebookError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_notebook::CreateNotebookError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_notebook::CreateNotebookError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_notebook::CreateNotebookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_prepared_statement::CreatePreparedStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_prepared_statement::CreatePreparedStatementError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_prepared_statement::CreatePreparedStatementError> for Error {
    fn from(err: crate::operation::create_prepared_statement::CreatePreparedStatementError) -> Self {
        match err {
            crate::operation::create_prepared_statement::CreatePreparedStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_prepared_statement::CreatePreparedStatementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_prepared_statement::CreatePreparedStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError> for Error {
    fn from(err: crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError) -> Self {
        match err {
            crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_presigned_notebook_url::CreatePresignedNotebookUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_work_group::CreateWorkGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_work_group::CreateWorkGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_work_group::CreateWorkGroupError> for Error {
    fn from(err: crate::operation::create_work_group::CreateWorkGroupError) -> Self {
        match err {
            crate::operation::create_work_group::CreateWorkGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_work_group::CreateWorkGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_work_group::CreateWorkGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_capacity_reservation::DeleteCapacityReservationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_capacity_reservation::DeleteCapacityReservationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_capacity_reservation::DeleteCapacityReservationError> for Error {
    fn from(err: crate::operation::delete_capacity_reservation::DeleteCapacityReservationError) -> Self {
        match err {
            crate::operation::delete_capacity_reservation::DeleteCapacityReservationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_capacity_reservation::DeleteCapacityReservationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_capacity_reservation::DeleteCapacityReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_catalog::DeleteDataCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_catalog::DeleteDataCatalogError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_catalog::DeleteDataCatalogError> for Error {
    fn from(err: crate::operation::delete_data_catalog::DeleteDataCatalogError) -> Self {
        match err {
            crate::operation::delete_data_catalog::DeleteDataCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_catalog::DeleteDataCatalogError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_data_catalog::DeleteDataCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_named_query::DeleteNamedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_named_query::DeleteNamedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_named_query::DeleteNamedQueryError> for Error {
    fn from(err: crate::operation::delete_named_query::DeleteNamedQueryError) -> Self {
        match err {
            crate::operation::delete_named_query::DeleteNamedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_named_query::DeleteNamedQueryError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_named_query::DeleteNamedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_notebook::DeleteNotebookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_notebook::DeleteNotebookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_notebook::DeleteNotebookError> for Error {
    fn from(err: crate::operation::delete_notebook::DeleteNotebookError) -> Self {
        match err {
            crate::operation::delete_notebook::DeleteNotebookError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_notebook::DeleteNotebookError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_notebook::DeleteNotebookError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_notebook::DeleteNotebookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_prepared_statement::DeletePreparedStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_prepared_statement::DeletePreparedStatementError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_prepared_statement::DeletePreparedStatementError> for Error {
    fn from(err: crate::operation::delete_prepared_statement::DeletePreparedStatementError) -> Self {
        match err {
            crate::operation::delete_prepared_statement::DeletePreparedStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_prepared_statement::DeletePreparedStatementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_prepared_statement::DeletePreparedStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_prepared_statement::DeletePreparedStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_work_group::DeleteWorkGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_work_group::DeleteWorkGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_work_group::DeleteWorkGroupError> for Error {
    fn from(err: crate::operation::delete_work_group::DeleteWorkGroupError) -> Self {
        match err {
            crate::operation::delete_work_group::DeleteWorkGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_work_group::DeleteWorkGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_work_group::DeleteWorkGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_notebook::ExportNotebookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_notebook::ExportNotebookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::export_notebook::ExportNotebookError> for Error {
    fn from(err: crate::operation::export_notebook::ExportNotebookError) -> Self {
        match err {
            crate::operation::export_notebook::ExportNotebookError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::export_notebook::ExportNotebookError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::export_notebook::ExportNotebookError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::export_notebook::ExportNotebookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_calculation_execution::GetCalculationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_calculation_execution::GetCalculationExecutionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_calculation_execution::GetCalculationExecutionError> for Error {
    fn from(err: crate::operation::get_calculation_execution::GetCalculationExecutionError) -> Self {
        match err {
            crate::operation::get_calculation_execution::GetCalculationExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_calculation_execution::GetCalculationExecutionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_calculation_execution::GetCalculationExecutionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_calculation_execution::GetCalculationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError> for Error {
    fn from(err: crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError) -> Self {
        match err {
            crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_calculation_execution_code::GetCalculationExecutionCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError> for Error {
    fn from(err: crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError) -> Self {
        match err {
            crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_calculation_execution_status::GetCalculationExecutionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError> for Error {
    fn from(err: crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError) -> Self {
        match err {
            crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_capacity_assignment_configuration::GetCapacityAssignmentConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_capacity_reservation::GetCapacityReservationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_capacity_reservation::GetCapacityReservationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_capacity_reservation::GetCapacityReservationError> for Error {
    fn from(err: crate::operation::get_capacity_reservation::GetCapacityReservationError) -> Self {
        match err {
            crate::operation::get_capacity_reservation::GetCapacityReservationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_capacity_reservation::GetCapacityReservationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_capacity_reservation::GetCapacityReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_database::GetDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_database::GetDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_database::GetDatabaseError> for Error {
    fn from(err: crate::operation::get_database::GetDatabaseError) -> Self {
        match err {
            crate::operation::get_database::GetDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_database::GetDatabaseError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_database::GetDatabaseError::MetadataException(inner) => Error::MetadataException(inner),
            crate::operation::get_database::GetDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_catalog::GetDataCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_catalog::GetDataCatalogError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_catalog::GetDataCatalogError> for Error {
    fn from(err: crate::operation::get_data_catalog::GetDataCatalogError) -> Self {
        match err {
            crate::operation::get_data_catalog::GetDataCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_catalog::GetDataCatalogError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_data_catalog::GetDataCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_named_query::GetNamedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_named_query::GetNamedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_named_query::GetNamedQueryError> for Error {
    fn from(err: crate::operation::get_named_query::GetNamedQueryError) -> Self {
        match err {
            crate::operation::get_named_query::GetNamedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_named_query::GetNamedQueryError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_named_query::GetNamedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notebook_metadata::GetNotebookMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notebook_metadata::GetNotebookMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_notebook_metadata::GetNotebookMetadataError> for Error {
    fn from(err: crate::operation::get_notebook_metadata::GetNotebookMetadataError) -> Self {
        match err {
            crate::operation::get_notebook_metadata::GetNotebookMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_notebook_metadata::GetNotebookMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_notebook_metadata::GetNotebookMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_notebook_metadata::GetNotebookMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_prepared_statement::GetPreparedStatementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_prepared_statement::GetPreparedStatementError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_prepared_statement::GetPreparedStatementError> for Error {
    fn from(err: crate::operation::get_prepared_statement::GetPreparedStatementError) -> Self {
        match err {
            crate::operation::get_prepared_statement::GetPreparedStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_prepared_statement::GetPreparedStatementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_prepared_statement::GetPreparedStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_prepared_statement::GetPreparedStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_execution::GetQueryExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_execution::GetQueryExecutionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_query_execution::GetQueryExecutionError> for Error {
    fn from(err: crate::operation::get_query_execution::GetQueryExecutionError) -> Self {
        match err {
            crate::operation::get_query_execution::GetQueryExecutionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_execution::GetQueryExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_query_execution::GetQueryExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_results::GetQueryResultsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_results::GetQueryResultsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_query_results::GetQueryResultsError> for Error {
    fn from(err: crate::operation::get_query_results::GetQueryResultsError) -> Self {
        match err {
            crate::operation::get_query_results::GetQueryResultsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_results::GetQueryResultsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_query_results::GetQueryResultsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_query_results::GetQueryResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError> for Error {
    fn from(err: crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError) -> Self {
        match err {
            crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_query_runtime_statistics::GetQueryRuntimeStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_session::GetSessionError> for Error {
    fn from(err: crate::operation::get_session::GetSessionError) -> Self {
        match err {
            crate::operation::get_session::GetSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_session::GetSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_session::GetSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_session::GetSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session_status::GetSessionStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session_status::GetSessionStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_session_status::GetSessionStatusError> for Error {
    fn from(err: crate::operation::get_session_status::GetSessionStatusError) -> Self {
        match err {
            crate::operation::get_session_status::GetSessionStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_session_status::GetSessionStatusError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_session_status::GetSessionStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_session_status::GetSessionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_metadata::GetTableMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_metadata::GetTableMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_table_metadata::GetTableMetadataError> for Error {
    fn from(err: crate::operation::get_table_metadata::GetTableMetadataError) -> Self {
        match err {
            crate::operation::get_table_metadata::GetTableMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_table_metadata::GetTableMetadataError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_table_metadata::GetTableMetadataError::MetadataException(inner) => Error::MetadataException(inner),
            crate::operation::get_table_metadata::GetTableMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_work_group::GetWorkGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_work_group::GetWorkGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_work_group::GetWorkGroupError> for Error {
    fn from(err: crate::operation::get_work_group::GetWorkGroupError) -> Self {
        match err {
            crate::operation::get_work_group::GetWorkGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_work_group::GetWorkGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_work_group::GetWorkGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_notebook::ImportNotebookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_notebook::ImportNotebookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_notebook::ImportNotebookError> for Error {
    fn from(err: crate::operation::import_notebook::ImportNotebookError) -> Self {
        match err {
            crate::operation::import_notebook::ImportNotebookError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::import_notebook::ImportNotebookError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::import_notebook::ImportNotebookError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::import_notebook::ImportNotebookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError> for Error {
    fn from(err: crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError) -> Self {
        match err {
            crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_application_dpu_sizes::ListApplicationDPUSizesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_calculation_executions::ListCalculationExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_calculation_executions::ListCalculationExecutionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_calculation_executions::ListCalculationExecutionsError> for Error {
    fn from(err: crate::operation::list_calculation_executions::ListCalculationExecutionsError) -> Self {
        match err {
            crate::operation::list_calculation_executions::ListCalculationExecutionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_calculation_executions::ListCalculationExecutionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_calculation_executions::ListCalculationExecutionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_calculation_executions::ListCalculationExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_capacity_reservations::ListCapacityReservationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_capacity_reservations::ListCapacityReservationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_capacity_reservations::ListCapacityReservationsError> for Error {
    fn from(err: crate::operation::list_capacity_reservations::ListCapacityReservationsError) -> Self {
        match err {
            crate::operation::list_capacity_reservations::ListCapacityReservationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_capacity_reservations::ListCapacityReservationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_capacity_reservations::ListCapacityReservationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_databases::ListDatabasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_databases::ListDatabasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_databases::ListDatabasesError> for Error {
    fn from(err: crate::operation::list_databases::ListDatabasesError) -> Self {
        match err {
            crate::operation::list_databases::ListDatabasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_databases::ListDatabasesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_databases::ListDatabasesError::MetadataException(inner) => Error::MetadataException(inner),
            crate::operation::list_databases::ListDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_catalogs::ListDataCatalogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_catalogs::ListDataCatalogsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_catalogs::ListDataCatalogsError> for Error {
    fn from(err: crate::operation::list_data_catalogs::ListDataCatalogsError) -> Self {
        match err {
            crate::operation::list_data_catalogs::ListDataCatalogsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_catalogs::ListDataCatalogsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_data_catalogs::ListDataCatalogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_engine_versions::ListEngineVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_engine_versions::ListEngineVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_engine_versions::ListEngineVersionsError> for Error {
    fn from(err: crate::operation::list_engine_versions::ListEngineVersionsError) -> Self {
        match err {
            crate::operation::list_engine_versions::ListEngineVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_engine_versions::ListEngineVersionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_engine_versions::ListEngineVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_executors::ListExecutorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_executors::ListExecutorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_executors::ListExecutorsError> for Error {
    fn from(err: crate::operation::list_executors::ListExecutorsError) -> Self {
        match err {
            crate::operation::list_executors::ListExecutorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_executors::ListExecutorsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_executors::ListExecutorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_executors::ListExecutorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_named_queries::ListNamedQueriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_named_queries::ListNamedQueriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_named_queries::ListNamedQueriesError> for Error {
    fn from(err: crate::operation::list_named_queries::ListNamedQueriesError) -> Self {
        match err {
            crate::operation::list_named_queries::ListNamedQueriesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_named_queries::ListNamedQueriesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_named_queries::ListNamedQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notebook_metadata::ListNotebookMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notebook_metadata::ListNotebookMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notebook_metadata::ListNotebookMetadataError> for Error {
    fn from(err: crate::operation::list_notebook_metadata::ListNotebookMetadataError) -> Self {
        match err {
            crate::operation::list_notebook_metadata::ListNotebookMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notebook_metadata::ListNotebookMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_notebook_metadata::ListNotebookMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_notebook_metadata::ListNotebookMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notebook_sessions::ListNotebookSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notebook_sessions::ListNotebookSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notebook_sessions::ListNotebookSessionsError> for Error {
    fn from(err: crate::operation::list_notebook_sessions::ListNotebookSessionsError) -> Self {
        match err {
            crate::operation::list_notebook_sessions::ListNotebookSessionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notebook_sessions::ListNotebookSessionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_notebook_sessions::ListNotebookSessionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_notebook_sessions::ListNotebookSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_prepared_statements::ListPreparedStatementsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_prepared_statements::ListPreparedStatementsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_prepared_statements::ListPreparedStatementsError> for Error {
    fn from(err: crate::operation::list_prepared_statements::ListPreparedStatementsError) -> Self {
        match err {
            crate::operation::list_prepared_statements::ListPreparedStatementsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_prepared_statements::ListPreparedStatementsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_prepared_statements::ListPreparedStatementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_query_executions::ListQueryExecutionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_query_executions::ListQueryExecutionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_query_executions::ListQueryExecutionsError> for Error {
    fn from(err: crate::operation::list_query_executions::ListQueryExecutionsError) -> Self {
        match err {
            crate::operation::list_query_executions::ListQueryExecutionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_query_executions::ListQueryExecutionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_query_executions::ListQueryExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sessions::ListSessionsError> for Error {
    fn from(err: crate::operation::list_sessions::ListSessionsError) -> Self {
        match err {
            crate::operation::list_sessions::ListSessionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sessions::ListSessionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_sessions::ListSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_sessions::ListSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_metadata::ListTableMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_metadata::ListTableMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_table_metadata::ListTableMetadataError> for Error {
    fn from(err: crate::operation::list_table_metadata::ListTableMetadataError) -> Self {
        match err {
            crate::operation::list_table_metadata::ListTableMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_table_metadata::ListTableMetadataError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_table_metadata::ListTableMetadataError::MetadataException(inner) => Error::MetadataException(inner),
            crate::operation::list_table_metadata::ListTableMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_work_groups::ListWorkGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_work_groups::ListWorkGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_work_groups::ListWorkGroupsError> for Error {
    fn from(err: crate::operation::list_work_groups::ListWorkGroupsError) -> Self {
        match err {
            crate::operation::list_work_groups::ListWorkGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_work_groups::ListWorkGroupsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_work_groups::ListWorkGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError> for Error {
    fn from(err: crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError) -> Self {
        match err {
            crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::put_capacity_assignment_configuration::PutCapacityAssignmentConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_calculation_execution::StartCalculationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_calculation_execution::StartCalculationExecutionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_calculation_execution::StartCalculationExecutionError> for Error {
    fn from(err: crate::operation::start_calculation_execution::StartCalculationExecutionError) -> Self {
        match err {
            crate::operation::start_calculation_execution::StartCalculationExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_calculation_execution::StartCalculationExecutionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::start_calculation_execution::StartCalculationExecutionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_calculation_execution::StartCalculationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_query_execution::StartQueryExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_query_execution::StartQueryExecutionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_query_execution::StartQueryExecutionError> for Error {
    fn from(err: crate::operation::start_query_execution::StartQueryExecutionError) -> Self {
        match err {
            crate::operation::start_query_execution::StartQueryExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_query_execution::StartQueryExecutionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::start_query_execution::StartQueryExecutionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_query_execution::StartQueryExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_session::StartSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_session::StartSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_session::StartSessionError> for Error {
    fn from(err: crate::operation::start_session::StartSessionError) -> Self {
        match err {
            crate::operation::start_session::StartSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_session::StartSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_session::StartSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_session::StartSessionError::SessionAlreadyExistsException(inner) => Error::SessionAlreadyExistsException(inner),
            crate::operation::start_session::StartSessionError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::start_session::StartSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_calculation_execution::StopCalculationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_calculation_execution::StopCalculationExecutionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_calculation_execution::StopCalculationExecutionError> for Error {
    fn from(err: crate::operation::stop_calculation_execution::StopCalculationExecutionError) -> Self {
        match err {
            crate::operation::stop_calculation_execution::StopCalculationExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_calculation_execution::StopCalculationExecutionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::stop_calculation_execution::StopCalculationExecutionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_calculation_execution::StopCalculationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_query_execution::StopQueryExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_query_execution::StopQueryExecutionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_query_execution::StopQueryExecutionError> for Error {
    fn from(err: crate::operation::stop_query_execution::StopQueryExecutionError) -> Self {
        match err {
            crate::operation::stop_query_execution::StopQueryExecutionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_query_execution::StopQueryExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_query_execution::StopQueryExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_session::TerminateSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_session::TerminateSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::terminate_session::TerminateSessionError> for Error {
    fn from(err: crate::operation::terminate_session::TerminateSessionError) -> Self {
        match err {
            crate::operation::terminate_session::TerminateSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::terminate_session::TerminateSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::terminate_session::TerminateSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::terminate_session::TerminateSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_capacity_reservation::UpdateCapacityReservationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_capacity_reservation::UpdateCapacityReservationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_capacity_reservation::UpdateCapacityReservationError> for Error {
    fn from(err: crate::operation::update_capacity_reservation::UpdateCapacityReservationError) -> Self {
        match err {
            crate::operation::update_capacity_reservation::UpdateCapacityReservationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_capacity_reservation::UpdateCapacityReservationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_capacity_reservation::UpdateCapacityReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_catalog::UpdateDataCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_catalog::UpdateDataCatalogError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_catalog::UpdateDataCatalogError> for Error {
    fn from(err: crate::operation::update_data_catalog::UpdateDataCatalogError) -> Self {
        match err {
            crate::operation::update_data_catalog::UpdateDataCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_catalog::UpdateDataCatalogError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_data_catalog::UpdateDataCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_named_query::UpdateNamedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_named_query::UpdateNamedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_named_query::UpdateNamedQueryError> for Error {
    fn from(err: crate::operation::update_named_query::UpdateNamedQueryError) -> Self {
        match err {
            crate::operation::update_named_query::UpdateNamedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_named_query::UpdateNamedQueryError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_named_query::UpdateNamedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_notebook::UpdateNotebookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_notebook::UpdateNotebookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_notebook::UpdateNotebookError> for Error {
    fn from(err: crate::operation::update_notebook::UpdateNotebookError) -> Self {
        match err {
            crate::operation::update_notebook::UpdateNotebookError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_notebook::UpdateNotebookError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_notebook::UpdateNotebookError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_notebook::UpdateNotebookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_notebook_metadata::UpdateNotebookMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_notebook_metadata::UpdateNotebookMetadataError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_notebook_metadata::UpdateNotebookMetadataError> for Error {
    fn from(err: crate::operation::update_notebook_metadata::UpdateNotebookMetadataError) -> Self {
        match err {
            crate::operation::update_notebook_metadata::UpdateNotebookMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_notebook_metadata::UpdateNotebookMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_notebook_metadata::UpdateNotebookMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_notebook_metadata::UpdateNotebookMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_prepared_statement::UpdatePreparedStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_prepared_statement::UpdatePreparedStatementError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_prepared_statement::UpdatePreparedStatementError> for Error {
    fn from(err: crate::operation::update_prepared_statement::UpdatePreparedStatementError) -> Self {
        match err {
            crate::operation::update_prepared_statement::UpdatePreparedStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_prepared_statement::UpdatePreparedStatementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_prepared_statement::UpdatePreparedStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_prepared_statement::UpdatePreparedStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_work_group::UpdateWorkGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_work_group::UpdateWorkGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_work_group::UpdateWorkGroupError> for Error {
    fn from(err: crate::operation::update_work_group::UpdateWorkGroupError) -> Self {
        match err {
            crate::operation::update_work_group::UpdateWorkGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_work_group::UpdateWorkGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_work_group::UpdateWorkGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::MetadataException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::SessionAlreadyExistsException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::MetadataException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::SessionAlreadyExistsException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
