// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Returns the details of a single named query or a list of up to 50 queries, which you
/// provide as an array of query ID strings. Requires you to have access to the workgroup in
/// which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the
/// list of named query IDs in the specified workgroup. If information could not be
/// retrieved for a submitted query ID, information about the query ID submitted is listed
/// under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed
/// queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each
/// unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of
/// query execution IDs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetNamedQuery {
    _private: (),
}
impl BatchGetNamedQuery {
    /// Creates a new builder-style object to manufacture [`BatchGetNamedQueryInput`](crate::input::BatchGetNamedQueryInput)
    pub fn builder() -> crate::input::batch_get_named_query_input::Builder {
        crate::input::batch_get_named_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchGetNamedQuery {
    type Output = std::result::Result<
        crate::output::BatchGetNamedQueryOutput,
        crate::error::BatchGetNamedQueryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_get_named_query_error(response)
        } else {
            crate::operation_deser::parse_batch_get_named_query_response(response)
        }
    }
}

/// <p>Returns the details of a single query execution or a list of up to 50 query
/// executions, which you provide as an array of query execution ID strings. Requires you to
/// have access to the workgroup in which the queries ran. To get a list of query execution
/// IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ
/// from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details
/// about named queries.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetQueryExecution {
    _private: (),
}
impl BatchGetQueryExecution {
    /// Creates a new builder-style object to manufacture [`BatchGetQueryExecutionInput`](crate::input::BatchGetQueryExecutionInput)
    pub fn builder() -> crate::input::batch_get_query_execution_input::Builder {
        crate::input::batch_get_query_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchGetQueryExecution {
    type Output = std::result::Result<
        crate::output::BatchGetQueryExecutionOutput,
        crate::error::BatchGetQueryExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_get_query_execution_error(response)
        } else {
            crate::operation_deser::parse_batch_get_query_execution_response(response)
        }
    }
}

/// <p>Creates (registers) a data catalog with the specified name and properties. Catalogs
/// created are visible to all users of the same Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataCatalog {
    _private: (),
}
impl CreateDataCatalog {
    /// Creates a new builder-style object to manufacture [`CreateDataCatalogInput`](crate::input::CreateDataCatalogInput)
    pub fn builder() -> crate::input::create_data_catalog_input::Builder {
        crate::input::create_data_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDataCatalog {
    type Output = std::result::Result<
        crate::output::CreateDataCatalogOutput,
        crate::error::CreateDataCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_data_catalog_error(response)
        } else {
            crate::operation_deser::parse_create_data_catalog_response(response)
        }
    }
}

/// <p>Creates a named query in the specified workgroup. Requires that you have access to the
/// workgroup.</p>
/// <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNamedQuery {
    _private: (),
}
impl CreateNamedQuery {
    /// Creates a new builder-style object to manufacture [`CreateNamedQueryInput`](crate::input::CreateNamedQueryInput)
    pub fn builder() -> crate::input::create_named_query_input::Builder {
        crate::input::create_named_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNamedQuery {
    type Output = std::result::Result<
        crate::output::CreateNamedQueryOutput,
        crate::error::CreateNamedQueryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_named_query_error(response)
        } else {
            crate::operation_deser::parse_create_named_query_response(response)
        }
    }
}

/// <p>Creates a prepared statement for use with SQL queries in Athena.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePreparedStatement {
    _private: (),
}
impl CreatePreparedStatement {
    /// Creates a new builder-style object to manufacture [`CreatePreparedStatementInput`](crate::input::CreatePreparedStatementInput)
    pub fn builder() -> crate::input::create_prepared_statement_input::Builder {
        crate::input::create_prepared_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePreparedStatement {
    type Output = std::result::Result<
        crate::output::CreatePreparedStatementOutput,
        crate::error::CreatePreparedStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_prepared_statement_error(response)
        } else {
            crate::operation_deser::parse_create_prepared_statement_response(response)
        }
    }
}

/// <p>Creates a workgroup with the specified name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkGroup {
    _private: (),
}
impl CreateWorkGroup {
    /// Creates a new builder-style object to manufacture [`CreateWorkGroupInput`](crate::input::CreateWorkGroupInput)
    pub fn builder() -> crate::input::create_work_group_input::Builder {
        crate::input::create_work_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWorkGroup {
    type Output = std::result::Result<
        crate::output::CreateWorkGroupOutput,
        crate::error::CreateWorkGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_work_group_error(response)
        } else {
            crate::operation_deser::parse_create_work_group_response(response)
        }
    }
}

/// <p>Deletes a data catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataCatalog {
    _private: (),
}
impl DeleteDataCatalog {
    /// Creates a new builder-style object to manufacture [`DeleteDataCatalogInput`](crate::input::DeleteDataCatalogInput)
    pub fn builder() -> crate::input::delete_data_catalog_input::Builder {
        crate::input::delete_data_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataCatalog {
    type Output = std::result::Result<
        crate::output::DeleteDataCatalogOutput,
        crate::error::DeleteDataCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_data_catalog_error(response)
        } else {
            crate::operation_deser::parse_delete_data_catalog_response(response)
        }
    }
}

/// <p>Deletes the named query if you have access to the workgroup in which the query was
/// saved.</p>
/// <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNamedQuery {
    _private: (),
}
impl DeleteNamedQuery {
    /// Creates a new builder-style object to manufacture [`DeleteNamedQueryInput`](crate::input::DeleteNamedQueryInput)
    pub fn builder() -> crate::input::delete_named_query_input::Builder {
        crate::input::delete_named_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNamedQuery {
    type Output = std::result::Result<
        crate::output::DeleteNamedQueryOutput,
        crate::error::DeleteNamedQueryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_named_query_error(response)
        } else {
            crate::operation_deser::parse_delete_named_query_response(response)
        }
    }
}

/// <p>Deletes the prepared statement with the specified name from the specified
/// workgroup.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePreparedStatement {
    _private: (),
}
impl DeletePreparedStatement {
    /// Creates a new builder-style object to manufacture [`DeletePreparedStatementInput`](crate::input::DeletePreparedStatementInput)
    pub fn builder() -> crate::input::delete_prepared_statement_input::Builder {
        crate::input::delete_prepared_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePreparedStatement {
    type Output = std::result::Result<
        crate::output::DeletePreparedStatementOutput,
        crate::error::DeletePreparedStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_prepared_statement_error(response)
        } else {
            crate::operation_deser::parse_delete_prepared_statement_response(response)
        }
    }
}

/// <p>Deletes the workgroup with the specified name. The primary workgroup cannot be
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkGroup {
    _private: (),
}
impl DeleteWorkGroup {
    /// Creates a new builder-style object to manufacture [`DeleteWorkGroupInput`](crate::input::DeleteWorkGroupInput)
    pub fn builder() -> crate::input::delete_work_group_input::Builder {
        crate::input::delete_work_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWorkGroup {
    type Output = std::result::Result<
        crate::output::DeleteWorkGroupOutput,
        crate::error::DeleteWorkGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_work_group_error(response)
        } else {
            crate::operation_deser::parse_delete_work_group_response(response)
        }
    }
}

/// <p>Returns a database object for the specified database and data catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDatabase {
    _private: (),
}
impl GetDatabase {
    /// Creates a new builder-style object to manufacture [`GetDatabaseInput`](crate::input::GetDatabaseInput)
    pub fn builder() -> crate::input::get_database_input::Builder {
        crate::input::get_database_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDatabase {
    type Output =
        std::result::Result<crate::output::GetDatabaseOutput, crate::error::GetDatabaseError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_database_error(response)
        } else {
            crate::operation_deser::parse_get_database_response(response)
        }
    }
}

/// <p>Returns the specified data catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDataCatalog {
    _private: (),
}
impl GetDataCatalog {
    /// Creates a new builder-style object to manufacture [`GetDataCatalogInput`](crate::input::GetDataCatalogInput)
    pub fn builder() -> crate::input::get_data_catalog_input::Builder {
        crate::input::get_data_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDataCatalog {
    type Output =
        std::result::Result<crate::output::GetDataCatalogOutput, crate::error::GetDataCatalogError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_data_catalog_error(response)
        } else {
            crate::operation_deser::parse_get_data_catalog_response(response)
        }
    }
}

/// <p>Returns information about a single query. Requires that you have access to the
/// workgroup in which the query was saved.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetNamedQuery {
    _private: (),
}
impl GetNamedQuery {
    /// Creates a new builder-style object to manufacture [`GetNamedQueryInput`](crate::input::GetNamedQueryInput)
    pub fn builder() -> crate::input::get_named_query_input::Builder {
        crate::input::get_named_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetNamedQuery {
    type Output =
        std::result::Result<crate::output::GetNamedQueryOutput, crate::error::GetNamedQueryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_named_query_error(response)
        } else {
            crate::operation_deser::parse_get_named_query_response(response)
        }
    }
}

/// <p>Retrieves the prepared statement with the specified name from the specified
/// workgroup.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPreparedStatement {
    _private: (),
}
impl GetPreparedStatement {
    /// Creates a new builder-style object to manufacture [`GetPreparedStatementInput`](crate::input::GetPreparedStatementInput)
    pub fn builder() -> crate::input::get_prepared_statement_input::Builder {
        crate::input::get_prepared_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPreparedStatement {
    type Output = std::result::Result<
        crate::output::GetPreparedStatementOutput,
        crate::error::GetPreparedStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_prepared_statement_error(response)
        } else {
            crate::operation_deser::parse_get_prepared_statement_response(response)
        }
    }
}

/// <p>Returns information about a single execution of a query if you have access to the
/// workgroup in which the query ran. Each time a query executes, information about the
/// query execution is saved with a unique ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetQueryExecution {
    _private: (),
}
impl GetQueryExecution {
    /// Creates a new builder-style object to manufacture [`GetQueryExecutionInput`](crate::input::GetQueryExecutionInput)
    pub fn builder() -> crate::input::get_query_execution_input::Builder {
        crate::input::get_query_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetQueryExecution {
    type Output = std::result::Result<
        crate::output::GetQueryExecutionOutput,
        crate::error::GetQueryExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_query_execution_error(response)
        } else {
            crate::operation_deser::parse_get_query_execution_response(response)
        }
    }
}

/// <p>Streams the results of a single query execution specified by
/// <code>QueryExecutionId</code> from the Athena query results location in
/// Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query
/// but returns results. Use <a>StartQueryExecution</a> to run a query.</p>
/// <p>To stream query results successfully, the IAM principal with permission to call
/// <code>GetQueryResults</code> also must have permissions to the Amazon S3
/// <code>GetObject</code> action for the Athena query results location.</p>
/// <important>
/// <p>IAM principals with permission to the Amazon S3
/// <code>GetObject</code> action for the query results location are able to retrieve
/// query results from Amazon S3 even if permission to the
/// <code>GetQueryResults</code> action is denied. To restrict user or role access,
/// ensure that Amazon S3 permissions to the Athena query location
/// are denied.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetQueryResults {
    _private: (),
}
impl GetQueryResults {
    /// Creates a new builder-style object to manufacture [`GetQueryResultsInput`](crate::input::GetQueryResultsInput)
    pub fn builder() -> crate::input::get_query_results_input::Builder {
        crate::input::get_query_results_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetQueryResults {
    type Output = std::result::Result<
        crate::output::GetQueryResultsOutput,
        crate::error::GetQueryResultsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_query_results_error(response)
        } else {
            crate::operation_deser::parse_get_query_results_response(response)
        }
    }
}

/// <p>Returns table metadata for the specified catalog, database, and table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTableMetadata {
    _private: (),
}
impl GetTableMetadata {
    /// Creates a new builder-style object to manufacture [`GetTableMetadataInput`](crate::input::GetTableMetadataInput)
    pub fn builder() -> crate::input::get_table_metadata_input::Builder {
        crate::input::get_table_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTableMetadata {
    type Output = std::result::Result<
        crate::output::GetTableMetadataOutput,
        crate::error::GetTableMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_table_metadata_error(response)
        } else {
            crate::operation_deser::parse_get_table_metadata_response(response)
        }
    }
}

/// <p>Returns information about the workgroup with the specified name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWorkGroup {
    _private: (),
}
impl GetWorkGroup {
    /// Creates a new builder-style object to manufacture [`GetWorkGroupInput`](crate::input::GetWorkGroupInput)
    pub fn builder() -> crate::input::get_work_group_input::Builder {
        crate::input::get_work_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWorkGroup {
    type Output =
        std::result::Result<crate::output::GetWorkGroupOutput, crate::error::GetWorkGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_work_group_error(response)
        } else {
            crate::operation_deser::parse_get_work_group_response(response)
        }
    }
}

/// <p>Lists the databases in the specified data catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDatabases {
    _private: (),
}
impl ListDatabases {
    /// Creates a new builder-style object to manufacture [`ListDatabasesInput`](crate::input::ListDatabasesInput)
    pub fn builder() -> crate::input::list_databases_input::Builder {
        crate::input::list_databases_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDatabases {
    type Output =
        std::result::Result<crate::output::ListDatabasesOutput, crate::error::ListDatabasesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_databases_error(response)
        } else {
            crate::operation_deser::parse_list_databases_response(response)
        }
    }
}

/// <p>Lists the data catalogs in the current Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataCatalogs {
    _private: (),
}
impl ListDataCatalogs {
    /// Creates a new builder-style object to manufacture [`ListDataCatalogsInput`](crate::input::ListDataCatalogsInput)
    pub fn builder() -> crate::input::list_data_catalogs_input::Builder {
        crate::input::list_data_catalogs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDataCatalogs {
    type Output = std::result::Result<
        crate::output::ListDataCatalogsOutput,
        crate::error::ListDataCatalogsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_data_catalogs_error(response)
        } else {
            crate::operation_deser::parse_list_data_catalogs_response(response)
        }
    }
}

/// <p>Returns a list of engine versions that are available to choose from, including the
/// Auto option.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEngineVersions {
    _private: (),
}
impl ListEngineVersions {
    /// Creates a new builder-style object to manufacture [`ListEngineVersionsInput`](crate::input::ListEngineVersionsInput)
    pub fn builder() -> crate::input::list_engine_versions_input::Builder {
        crate::input::list_engine_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEngineVersions {
    type Output = std::result::Result<
        crate::output::ListEngineVersionsOutput,
        crate::error::ListEngineVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_engine_versions_error(response)
        } else {
            crate::operation_deser::parse_list_engine_versions_response(response)
        }
    }
}

/// <p>Provides a list of available query IDs only for queries saved in the specified
/// workgroup. Requires that you have access to the specified workgroup. If a workgroup is
/// not specified, lists the saved queries for the primary workgroup.</p>
/// <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNamedQueries {
    _private: (),
}
impl ListNamedQueries {
    /// Creates a new builder-style object to manufacture [`ListNamedQueriesInput`](crate::input::ListNamedQueriesInput)
    pub fn builder() -> crate::input::list_named_queries_input::Builder {
        crate::input::list_named_queries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNamedQueries {
    type Output = std::result::Result<
        crate::output::ListNamedQueriesOutput,
        crate::error::ListNamedQueriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_named_queries_error(response)
        } else {
            crate::operation_deser::parse_list_named_queries_response(response)
        }
    }
}

/// <p>Lists the prepared statements in the specfied workgroup.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPreparedStatements {
    _private: (),
}
impl ListPreparedStatements {
    /// Creates a new builder-style object to manufacture [`ListPreparedStatementsInput`](crate::input::ListPreparedStatementsInput)
    pub fn builder() -> crate::input::list_prepared_statements_input::Builder {
        crate::input::list_prepared_statements_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPreparedStatements {
    type Output = std::result::Result<
        crate::output::ListPreparedStatementsOutput,
        crate::error::ListPreparedStatementsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_prepared_statements_error(response)
        } else {
            crate::operation_deser::parse_list_prepared_statements_response(response)
        }
    }
}

/// <p>Provides a list of available query execution IDs for the queries in the specified
/// workgroup. If a workgroup is not specified, returns a list of query execution IDs for
/// the primary workgroup. Requires you to have access to the workgroup in which the queries
/// ran.</p>
/// <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListQueryExecutions {
    _private: (),
}
impl ListQueryExecutions {
    /// Creates a new builder-style object to manufacture [`ListQueryExecutionsInput`](crate::input::ListQueryExecutionsInput)
    pub fn builder() -> crate::input::list_query_executions_input::Builder {
        crate::input::list_query_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListQueryExecutions {
    type Output = std::result::Result<
        crate::output::ListQueryExecutionsOutput,
        crate::error::ListQueryExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_query_executions_error(response)
        } else {
            crate::operation_deser::parse_list_query_executions_response(response)
        }
    }
}

/// <p>Lists the metadata for the tables in the specified data catalog database.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTableMetadata {
    _private: (),
}
impl ListTableMetadata {
    /// Creates a new builder-style object to manufacture [`ListTableMetadataInput`](crate::input::ListTableMetadataInput)
    pub fn builder() -> crate::input::list_table_metadata_input::Builder {
        crate::input::list_table_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTableMetadata {
    type Output = std::result::Result<
        crate::output::ListTableMetadataOutput,
        crate::error::ListTableMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_table_metadata_error(response)
        } else {
            crate::operation_deser::parse_list_table_metadata_response(response)
        }
    }
}

/// <p>Lists the tags associated with an Athena workgroup or data catalog
/// resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Lists available workgroups for the account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkGroups {
    _private: (),
}
impl ListWorkGroups {
    /// Creates a new builder-style object to manufacture [`ListWorkGroupsInput`](crate::input::ListWorkGroupsInput)
    pub fn builder() -> crate::input::list_work_groups_input::Builder {
        crate::input::list_work_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWorkGroups {
    type Output =
        std::result::Result<crate::output::ListWorkGroupsOutput, crate::error::ListWorkGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_work_groups_error(response)
        } else {
            crate::operation_deser::parse_list_work_groups_response(response)
        }
    }
}

/// <p>Runs the SQL query statements contained in the <code>Query</code>. Requires you to
/// have access to the workgroup in which the query ran. Running queries against an external
/// catalog requires <a>GetDataCatalog</a> permission to the catalog. For code
/// samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartQueryExecution {
    _private: (),
}
impl StartQueryExecution {
    /// Creates a new builder-style object to manufacture [`StartQueryExecutionInput`](crate::input::StartQueryExecutionInput)
    pub fn builder() -> crate::input::start_query_execution_input::Builder {
        crate::input::start_query_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartQueryExecution {
    type Output = std::result::Result<
        crate::output::StartQueryExecutionOutput,
        crate::error::StartQueryExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_query_execution_error(response)
        } else {
            crate::operation_deser::parse_start_query_execution_response(response)
        }
    }
}

/// <p>Stops a query execution. Requires you to have access to the workgroup in which the
/// query ran.</p>
/// <p>For code samples using the Amazon Web Services SDK for Java, see <a href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples and
/// Code Samples</a> in the <i>Amazon Athena User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopQueryExecution {
    _private: (),
}
impl StopQueryExecution {
    /// Creates a new builder-style object to manufacture [`StopQueryExecutionInput`](crate::input::StopQueryExecutionInput)
    pub fn builder() -> crate::input::stop_query_execution_input::Builder {
        crate::input::stop_query_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopQueryExecution {
    type Output = std::result::Result<
        crate::output::StopQueryExecutionOutput,
        crate::error::StopQueryExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_query_execution_error(response)
        } else {
            crate::operation_deser::parse_stop_query_execution_response(response)
        }
    }
}

/// <p>Adds one or more tags to an Athena resource. A tag is a label that you
/// assign to a resource. In Athena, a resource can be a workgroup or data
/// catalog. Each tag consists of a key and an optional value, both of which you define. For
/// example, you can use tags to categorize Athena workgroups or data catalogs
/// by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to
/// search and filter workgroups or data catalogs in your account. For best practices, see
/// <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode
/// characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use
/// letters and numbers representable in UTF-8, and the following characters: + - = . _ : /
/// @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you
/// specify more than one tag, separate them by commas.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from a data catalog or workgroup resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the data catalog that has the specified name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDataCatalog {
    _private: (),
}
impl UpdateDataCatalog {
    /// Creates a new builder-style object to manufacture [`UpdateDataCatalogInput`](crate::input::UpdateDataCatalogInput)
    pub fn builder() -> crate::input::update_data_catalog_input::Builder {
        crate::input::update_data_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDataCatalog {
    type Output = std::result::Result<
        crate::output::UpdateDataCatalogOutput,
        crate::error::UpdateDataCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_data_catalog_error(response)
        } else {
            crate::operation_deser::parse_update_data_catalog_response(response)
        }
    }
}

/// <p>Updates a prepared statement.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePreparedStatement {
    _private: (),
}
impl UpdatePreparedStatement {
    /// Creates a new builder-style object to manufacture [`UpdatePreparedStatementInput`](crate::input::UpdatePreparedStatementInput)
    pub fn builder() -> crate::input::update_prepared_statement_input::Builder {
        crate::input::update_prepared_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePreparedStatement {
    type Output = std::result::Result<
        crate::output::UpdatePreparedStatementOutput,
        crate::error::UpdatePreparedStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_prepared_statement_error(response)
        } else {
            crate::operation_deser::parse_update_prepared_statement_response(response)
        }
    }
}

/// <p>Updates the workgroup with the specified name. The workgroup's name cannot be
/// changed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkGroup {
    _private: (),
}
impl UpdateWorkGroup {
    /// Creates a new builder-style object to manufacture [`UpdateWorkGroupInput`](crate::input::UpdateWorkGroupInput)
    pub fn builder() -> crate::input::update_work_group_input::Builder {
        crate::input::update_work_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWorkGroup {
    type Output = std::result::Result<
        crate::output::UpdateWorkGroupOutput,
        crate::error::UpdateWorkGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_work_group_error(response)
        } else {
            crate::operation_deser::parse_update_work_group_response(response)
        }
    }
}
