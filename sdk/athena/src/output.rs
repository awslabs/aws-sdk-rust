// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateWorkGroupOutput {}
impl std::fmt::Debug for UpdateWorkGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWorkGroupOutput");
        formatter.finish()
    }
}
/// See [`UpdateWorkGroupOutput`](crate::output::UpdateWorkGroupOutput)
pub mod update_work_group_output {
    /// A builder for [`UpdateWorkGroupOutput`](crate::output::UpdateWorkGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateWorkGroupOutput`](crate::output::UpdateWorkGroupOutput)
        pub fn build(self) -> crate::output::UpdateWorkGroupOutput {
            crate::output::UpdateWorkGroupOutput {}
        }
    }
}
impl UpdateWorkGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkGroupOutput`](crate::output::UpdateWorkGroupOutput)
    pub fn builder() -> crate::output::update_work_group_output::Builder {
        crate::output::update_work_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePreparedStatementOutput {}
impl std::fmt::Debug for UpdatePreparedStatementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePreparedStatementOutput");
        formatter.finish()
    }
}
/// See [`UpdatePreparedStatementOutput`](crate::output::UpdatePreparedStatementOutput)
pub mod update_prepared_statement_output {
    /// A builder for [`UpdatePreparedStatementOutput`](crate::output::UpdatePreparedStatementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdatePreparedStatementOutput`](crate::output::UpdatePreparedStatementOutput)
        pub fn build(self) -> crate::output::UpdatePreparedStatementOutput {
            crate::output::UpdatePreparedStatementOutput {}
        }
    }
}
impl UpdatePreparedStatementOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePreparedStatementOutput`](crate::output::UpdatePreparedStatementOutput)
    pub fn builder() -> crate::output::update_prepared_statement_output::Builder {
        crate::output::update_prepared_statement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDataCatalogOutput {}
impl std::fmt::Debug for UpdateDataCatalogOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDataCatalogOutput");
        formatter.finish()
    }
}
/// See [`UpdateDataCatalogOutput`](crate::output::UpdateDataCatalogOutput)
pub mod update_data_catalog_output {
    /// A builder for [`UpdateDataCatalogOutput`](crate::output::UpdateDataCatalogOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDataCatalogOutput`](crate::output::UpdateDataCatalogOutput)
        pub fn build(self) -> crate::output::UpdateDataCatalogOutput {
            crate::output::UpdateDataCatalogOutput {}
        }
    }
}
impl UpdateDataCatalogOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataCatalogOutput`](crate::output::UpdateDataCatalogOutput)
    pub fn builder() -> crate::output::update_data_catalog_output::Builder {
        crate::output::update_data_catalog_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopQueryExecutionOutput {}
impl std::fmt::Debug for StopQueryExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopQueryExecutionOutput");
        formatter.finish()
    }
}
/// See [`StopQueryExecutionOutput`](crate::output::StopQueryExecutionOutput)
pub mod stop_query_execution_output {
    /// A builder for [`StopQueryExecutionOutput`](crate::output::StopQueryExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopQueryExecutionOutput`](crate::output::StopQueryExecutionOutput)
        pub fn build(self) -> crate::output::StopQueryExecutionOutput {
            crate::output::StopQueryExecutionOutput {}
        }
    }
}
impl StopQueryExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StopQueryExecutionOutput`](crate::output::StopQueryExecutionOutput)
    pub fn builder() -> crate::output::stop_query_execution_output::Builder {
        crate::output::stop_query_execution_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartQueryExecutionOutput {
    /// <p>The unique ID of the query that ran as a result of this request.</p>
    pub query_execution_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartQueryExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartQueryExecutionOutput");
        formatter.field("query_execution_id", &self.query_execution_id);
        formatter.finish()
    }
}
/// See [`StartQueryExecutionOutput`](crate::output::StartQueryExecutionOutput)
pub mod start_query_execution_output {
    /// A builder for [`StartQueryExecutionOutput`](crate::output::StartQueryExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_execution_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique ID of the query that ran as a result of this request.</p>
        pub fn query_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.query_execution_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the query that ran as a result of this request.</p>
        pub fn set_query_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.query_execution_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartQueryExecutionOutput`](crate::output::StartQueryExecutionOutput)
        pub fn build(self) -> crate::output::StartQueryExecutionOutput {
            crate::output::StartQueryExecutionOutput {
                query_execution_id: self.query_execution_id,
            }
        }
    }
}
impl StartQueryExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StartQueryExecutionOutput`](crate::output::StartQueryExecutionOutput)
    pub fn builder() -> crate::output::start_query_execution_output::Builder {
        crate::output::start_query_execution_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListWorkGroupsOutput {
    /// <p>A list of <a>WorkGroupSummary</a> objects that include the names,
    /// descriptions, creation times, and states for each workgroup.</p>
    pub work_groups: std::option::Option<std::vec::Vec<crate::model::WorkGroupSummary>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListWorkGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListWorkGroupsOutput");
        formatter.field("work_groups", &self.work_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListWorkGroupsOutput`](crate::output::ListWorkGroupsOutput)
pub mod list_work_groups_output {
    /// A builder for [`ListWorkGroupsOutput`](crate::output::ListWorkGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) work_groups: std::option::Option<std::vec::Vec<crate::model::WorkGroupSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `work_groups`.
        ///
        /// To override the contents of this collection use [`set_work_groups`](Self::set_work_groups).
        ///
        /// <p>A list of <a>WorkGroupSummary</a> objects that include the names,
        /// descriptions, creation times, and states for each workgroup.</p>
        pub fn work_groups(mut self, input: impl Into<crate::model::WorkGroupSummary>) -> Self {
            let mut v = self.work_groups.unwrap_or_default();
            v.push(input.into());
            self.work_groups = Some(v);
            self
        }
        /// <p>A list of <a>WorkGroupSummary</a> objects that include the names,
        /// descriptions, creation times, and states for each workgroup.</p>
        pub fn set_work_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkGroupSummary>>,
        ) -> Self {
            self.work_groups = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkGroupsOutput`](crate::output::ListWorkGroupsOutput)
        pub fn build(self) -> crate::output::ListWorkGroupsOutput {
            crate::output::ListWorkGroupsOutput {
                work_groups: self.work_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListWorkGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkGroupsOutput`](crate::output::ListWorkGroupsOutput)
    pub fn builder() -> crate::output::list_work_groups_output::Builder {
        crate::output::list_work_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tags associated with the specified resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>A token to be used by the next request if this request is truncated.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tags associated with the specified resource.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>The list of tags associated with the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A token to be used by the next request if this request is truncated.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to be used by the next request if this request is truncated.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTableMetadataOutput {
    /// <p>A list of table metadata.</p>
    pub table_metadata_list: std::option::Option<std::vec::Vec<crate::model::TableMetadata>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the NextToken from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTableMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTableMetadataOutput");
        formatter.field("table_metadata_list", &self.table_metadata_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTableMetadataOutput`](crate::output::ListTableMetadataOutput)
pub mod list_table_metadata_output {
    /// A builder for [`ListTableMetadataOutput`](crate::output::ListTableMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) table_metadata_list:
            std::option::Option<std::vec::Vec<crate::model::TableMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `table_metadata_list`.
        ///
        /// To override the contents of this collection use [`set_table_metadata_list`](Self::set_table_metadata_list).
        ///
        /// <p>A list of table metadata.</p>
        pub fn table_metadata_list(
            mut self,
            input: impl Into<crate::model::TableMetadata>,
        ) -> Self {
            let mut v = self.table_metadata_list.unwrap_or_default();
            v.push(input.into());
            self.table_metadata_list = Some(v);
            self
        }
        /// <p>A list of table metadata.</p>
        pub fn set_table_metadata_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TableMetadata>>,
        ) -> Self {
            self.table_metadata_list = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTableMetadataOutput`](crate::output::ListTableMetadataOutput)
        pub fn build(self) -> crate::output::ListTableMetadataOutput {
            crate::output::ListTableMetadataOutput {
                table_metadata_list: self.table_metadata_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTableMetadataOutput {
    /// Creates a new builder-style object to manufacture [`ListTableMetadataOutput`](crate::output::ListTableMetadataOutput)
    pub fn builder() -> crate::output::list_table_metadata_output::Builder {
        crate::output::list_table_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListQueryExecutionsOutput {
    /// <p>The unique IDs of each query execution as an array of strings.</p>
    pub query_execution_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A token to be used by the next request if this request is truncated.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListQueryExecutionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListQueryExecutionsOutput");
        formatter.field("query_execution_ids", &self.query_execution_ids);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListQueryExecutionsOutput`](crate::output::ListQueryExecutionsOutput)
pub mod list_query_executions_output {
    /// A builder for [`ListQueryExecutionsOutput`](crate::output::ListQueryExecutionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_execution_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `query_execution_ids`.
        ///
        /// To override the contents of this collection use [`set_query_execution_ids`](Self::set_query_execution_ids).
        ///
        /// <p>The unique IDs of each query execution as an array of strings.</p>
        pub fn query_execution_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.query_execution_ids.unwrap_or_default();
            v.push(input.into());
            self.query_execution_ids = Some(v);
            self
        }
        /// <p>The unique IDs of each query execution as an array of strings.</p>
        pub fn set_query_execution_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.query_execution_ids = input;
            self
        }
        /// <p>A token to be used by the next request if this request is truncated.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to be used by the next request if this request is truncated.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListQueryExecutionsOutput`](crate::output::ListQueryExecutionsOutput)
        pub fn build(self) -> crate::output::ListQueryExecutionsOutput {
            crate::output::ListQueryExecutionsOutput {
                query_execution_ids: self.query_execution_ids,
                next_token: self.next_token,
            }
        }
    }
}
impl ListQueryExecutionsOutput {
    /// Creates a new builder-style object to manufacture [`ListQueryExecutionsOutput`](crate::output::ListQueryExecutionsOutput)
    pub fn builder() -> crate::output::list_query_executions_output::Builder {
        crate::output::list_query_executions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPreparedStatementsOutput {
    /// <p>The list of prepared statements for the workgroup.</p>
    pub prepared_statements:
        std::option::Option<std::vec::Vec<crate::model::PreparedStatementSummary>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListPreparedStatementsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPreparedStatementsOutput");
        formatter.field("prepared_statements", &self.prepared_statements);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPreparedStatementsOutput`](crate::output::ListPreparedStatementsOutput)
pub mod list_prepared_statements_output {
    /// A builder for [`ListPreparedStatementsOutput`](crate::output::ListPreparedStatementsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prepared_statements:
            std::option::Option<std::vec::Vec<crate::model::PreparedStatementSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `prepared_statements`.
        ///
        /// To override the contents of this collection use [`set_prepared_statements`](Self::set_prepared_statements).
        ///
        /// <p>The list of prepared statements for the workgroup.</p>
        pub fn prepared_statements(
            mut self,
            input: impl Into<crate::model::PreparedStatementSummary>,
        ) -> Self {
            let mut v = self.prepared_statements.unwrap_or_default();
            v.push(input.into());
            self.prepared_statements = Some(v);
            self
        }
        /// <p>The list of prepared statements for the workgroup.</p>
        pub fn set_prepared_statements(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PreparedStatementSummary>>,
        ) -> Self {
            self.prepared_statements = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPreparedStatementsOutput`](crate::output::ListPreparedStatementsOutput)
        pub fn build(self) -> crate::output::ListPreparedStatementsOutput {
            crate::output::ListPreparedStatementsOutput {
                prepared_statements: self.prepared_statements,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPreparedStatementsOutput {
    /// Creates a new builder-style object to manufacture [`ListPreparedStatementsOutput`](crate::output::ListPreparedStatementsOutput)
    pub fn builder() -> crate::output::list_prepared_statements_output::Builder {
        crate::output::list_prepared_statements_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNamedQueriesOutput {
    /// <p>The list of unique query IDs.</p>
    pub named_query_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListNamedQueriesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListNamedQueriesOutput");
        formatter.field("named_query_ids", &self.named_query_ids);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListNamedQueriesOutput`](crate::output::ListNamedQueriesOutput)
pub mod list_named_queries_output {
    /// A builder for [`ListNamedQueriesOutput`](crate::output::ListNamedQueriesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) named_query_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `named_query_ids`.
        ///
        /// To override the contents of this collection use [`set_named_query_ids`](Self::set_named_query_ids).
        ///
        /// <p>The list of unique query IDs.</p>
        pub fn named_query_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.named_query_ids.unwrap_or_default();
            v.push(input.into());
            self.named_query_ids = Some(v);
            self
        }
        /// <p>The list of unique query IDs.</p>
        pub fn set_named_query_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.named_query_ids = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNamedQueriesOutput`](crate::output::ListNamedQueriesOutput)
        pub fn build(self) -> crate::output::ListNamedQueriesOutput {
            crate::output::ListNamedQueriesOutput {
                named_query_ids: self.named_query_ids,
                next_token: self.next_token,
            }
        }
    }
}
impl ListNamedQueriesOutput {
    /// Creates a new builder-style object to manufacture [`ListNamedQueriesOutput`](crate::output::ListNamedQueriesOutput)
    pub fn builder() -> crate::output::list_named_queries_output::Builder {
        crate::output::list_named_queries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEngineVersionsOutput {
    /// <p>A list of engine versions that are available to choose from.</p>
    pub engine_versions: std::option::Option<std::vec::Vec<crate::model::EngineVersion>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListEngineVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEngineVersionsOutput");
        formatter.field("engine_versions", &self.engine_versions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEngineVersionsOutput`](crate::output::ListEngineVersionsOutput)
pub mod list_engine_versions_output {
    /// A builder for [`ListEngineVersionsOutput`](crate::output::ListEngineVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine_versions: std::option::Option<std::vec::Vec<crate::model::EngineVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `engine_versions`.
        ///
        /// To override the contents of this collection use [`set_engine_versions`](Self::set_engine_versions).
        ///
        /// <p>A list of engine versions that are available to choose from.</p>
        pub fn engine_versions(mut self, input: impl Into<crate::model::EngineVersion>) -> Self {
            let mut v = self.engine_versions.unwrap_or_default();
            v.push(input.into());
            self.engine_versions = Some(v);
            self
        }
        /// <p>A list of engine versions that are available to choose from.</p>
        pub fn set_engine_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineVersion>>,
        ) -> Self {
            self.engine_versions = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEngineVersionsOutput`](crate::output::ListEngineVersionsOutput)
        pub fn build(self) -> crate::output::ListEngineVersionsOutput {
            crate::output::ListEngineVersionsOutput {
                engine_versions: self.engine_versions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEngineVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListEngineVersionsOutput`](crate::output::ListEngineVersionsOutput)
    pub fn builder() -> crate::output::list_engine_versions_output::Builder {
        crate::output::list_engine_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDataCatalogsOutput {
    /// <p>A summary list of data catalogs.</p>
    pub data_catalogs_summary: std::option::Option<std::vec::Vec<crate::model::DataCatalogSummary>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the NextToken from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListDataCatalogsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDataCatalogsOutput");
        formatter.field("data_catalogs_summary", &self.data_catalogs_summary);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDataCatalogsOutput`](crate::output::ListDataCatalogsOutput)
pub mod list_data_catalogs_output {
    /// A builder for [`ListDataCatalogsOutput`](crate::output::ListDataCatalogsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_catalogs_summary:
            std::option::Option<std::vec::Vec<crate::model::DataCatalogSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `data_catalogs_summary`.
        ///
        /// To override the contents of this collection use [`set_data_catalogs_summary`](Self::set_data_catalogs_summary).
        ///
        /// <p>A summary list of data catalogs.</p>
        pub fn data_catalogs_summary(
            mut self,
            input: impl Into<crate::model::DataCatalogSummary>,
        ) -> Self {
            let mut v = self.data_catalogs_summary.unwrap_or_default();
            v.push(input.into());
            self.data_catalogs_summary = Some(v);
            self
        }
        /// <p>A summary list of data catalogs.</p>
        pub fn set_data_catalogs_summary(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataCatalogSummary>>,
        ) -> Self {
            self.data_catalogs_summary = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDataCatalogsOutput`](crate::output::ListDataCatalogsOutput)
        pub fn build(self) -> crate::output::ListDataCatalogsOutput {
            crate::output::ListDataCatalogsOutput {
                data_catalogs_summary: self.data_catalogs_summary,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDataCatalogsOutput {
    /// Creates a new builder-style object to manufacture [`ListDataCatalogsOutput`](crate::output::ListDataCatalogsOutput)
    pub fn builder() -> crate::output::list_data_catalogs_output::Builder {
        crate::output::list_data_catalogs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDatabasesOutput {
    /// <p>A list of databases from a data catalog.</p>
    pub database_list: std::option::Option<std::vec::Vec<crate::model::Database>>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the NextToken from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListDatabasesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDatabasesOutput");
        formatter.field("database_list", &self.database_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDatabasesOutput`](crate::output::ListDatabasesOutput)
pub mod list_databases_output {
    /// A builder for [`ListDatabasesOutput`](crate::output::ListDatabasesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) database_list: std::option::Option<std::vec::Vec<crate::model::Database>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `database_list`.
        ///
        /// To override the contents of this collection use [`set_database_list`](Self::set_database_list).
        ///
        /// <p>A list of databases from a data catalog.</p>
        pub fn database_list(mut self, input: impl Into<crate::model::Database>) -> Self {
            let mut v = self.database_list.unwrap_or_default();
            v.push(input.into());
            self.database_list = Some(v);
            self
        }
        /// <p>A list of databases from a data catalog.</p>
        pub fn set_database_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Database>>,
        ) -> Self {
            self.database_list = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the NextToken from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDatabasesOutput`](crate::output::ListDatabasesOutput)
        pub fn build(self) -> crate::output::ListDatabasesOutput {
            crate::output::ListDatabasesOutput {
                database_list: self.database_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDatabasesOutput {
    /// Creates a new builder-style object to manufacture [`ListDatabasesOutput`](crate::output::ListDatabasesOutput)
    pub fn builder() -> crate::output::list_databases_output::Builder {
        crate::output::list_databases_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWorkGroupOutput {
    /// <p>Information about the workgroup.</p>
    pub work_group: std::option::Option<crate::model::WorkGroup>,
}
impl std::fmt::Debug for GetWorkGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWorkGroupOutput");
        formatter.field("work_group", &self.work_group);
        formatter.finish()
    }
}
/// See [`GetWorkGroupOutput`](crate::output::GetWorkGroupOutput)
pub mod get_work_group_output {
    /// A builder for [`GetWorkGroupOutput`](crate::output::GetWorkGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) work_group: std::option::Option<crate::model::WorkGroup>,
    }
    impl Builder {
        /// <p>Information about the workgroup.</p>
        pub fn work_group(mut self, input: crate::model::WorkGroup) -> Self {
            self.work_group = Some(input);
            self
        }
        /// <p>Information about the workgroup.</p>
        pub fn set_work_group(
            mut self,
            input: std::option::Option<crate::model::WorkGroup>,
        ) -> Self {
            self.work_group = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkGroupOutput`](crate::output::GetWorkGroupOutput)
        pub fn build(self) -> crate::output::GetWorkGroupOutput {
            crate::output::GetWorkGroupOutput {
                work_group: self.work_group,
            }
        }
    }
}
impl GetWorkGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkGroupOutput`](crate::output::GetWorkGroupOutput)
    pub fn builder() -> crate::output::get_work_group_output::Builder {
        crate::output::get_work_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTableMetadataOutput {
    /// <p>An object that contains table metadata.</p>
    pub table_metadata: std::option::Option<crate::model::TableMetadata>,
}
impl std::fmt::Debug for GetTableMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTableMetadataOutput");
        formatter.field("table_metadata", &self.table_metadata);
        formatter.finish()
    }
}
/// See [`GetTableMetadataOutput`](crate::output::GetTableMetadataOutput)
pub mod get_table_metadata_output {
    /// A builder for [`GetTableMetadataOutput`](crate::output::GetTableMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) table_metadata: std::option::Option<crate::model::TableMetadata>,
    }
    impl Builder {
        /// <p>An object that contains table metadata.</p>
        pub fn table_metadata(mut self, input: crate::model::TableMetadata) -> Self {
            self.table_metadata = Some(input);
            self
        }
        /// <p>An object that contains table metadata.</p>
        pub fn set_table_metadata(
            mut self,
            input: std::option::Option<crate::model::TableMetadata>,
        ) -> Self {
            self.table_metadata = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTableMetadataOutput`](crate::output::GetTableMetadataOutput)
        pub fn build(self) -> crate::output::GetTableMetadataOutput {
            crate::output::GetTableMetadataOutput {
                table_metadata: self.table_metadata,
            }
        }
    }
}
impl GetTableMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetTableMetadataOutput`](crate::output::GetTableMetadataOutput)
    pub fn builder() -> crate::output::get_table_metadata_output::Builder {
        crate::output::get_table_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetQueryResultsOutput {
    /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement.
    /// </p>
    pub update_count: std::option::Option<i64>,
    /// <p>The results of the query execution.</p>
    pub result_set: std::option::Option<crate::model::ResultSet>,
    /// <p>A token generated by the Athena service that specifies where to continue
    /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
    /// the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetQueryResultsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetQueryResultsOutput");
        formatter.field("update_count", &self.update_count);
        formatter.field("result_set", &self.result_set);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetQueryResultsOutput`](crate::output::GetQueryResultsOutput)
pub mod get_query_results_output {
    /// A builder for [`GetQueryResultsOutput`](crate::output::GetQueryResultsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_count: std::option::Option<i64>,
        pub(crate) result_set: std::option::Option<crate::model::ResultSet>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement.
        /// </p>
        pub fn update_count(mut self, input: i64) -> Self {
            self.update_count = Some(input);
            self
        }
        /// <p>The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement.
        /// </p>
        pub fn set_update_count(mut self, input: std::option::Option<i64>) -> Self {
            self.update_count = input;
            self
        }
        /// <p>The results of the query execution.</p>
        pub fn result_set(mut self, input: crate::model::ResultSet) -> Self {
            self.result_set = Some(input);
            self
        }
        /// <p>The results of the query execution.</p>
        pub fn set_result_set(
            mut self,
            input: std::option::Option<crate::model::ResultSet>,
        ) -> Self {
            self.result_set = input;
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token generated by the Athena service that specifies where to continue
        /// pagination if a previous request was truncated. To obtain the next set of pages, pass in
        /// the <code>NextToken</code> from the response object of the previous page call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetQueryResultsOutput`](crate::output::GetQueryResultsOutput)
        pub fn build(self) -> crate::output::GetQueryResultsOutput {
            crate::output::GetQueryResultsOutput {
                update_count: self.update_count,
                result_set: self.result_set,
                next_token: self.next_token,
            }
        }
    }
}
impl GetQueryResultsOutput {
    /// Creates a new builder-style object to manufacture [`GetQueryResultsOutput`](crate::output::GetQueryResultsOutput)
    pub fn builder() -> crate::output::get_query_results_output::Builder {
        crate::output::get_query_results_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetQueryExecutionOutput {
    /// <p>Information about the query execution.</p>
    pub query_execution: std::option::Option<crate::model::QueryExecution>,
}
impl std::fmt::Debug for GetQueryExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetQueryExecutionOutput");
        formatter.field("query_execution", &self.query_execution);
        formatter.finish()
    }
}
/// See [`GetQueryExecutionOutput`](crate::output::GetQueryExecutionOutput)
pub mod get_query_execution_output {
    /// A builder for [`GetQueryExecutionOutput`](crate::output::GetQueryExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_execution: std::option::Option<crate::model::QueryExecution>,
    }
    impl Builder {
        /// <p>Information about the query execution.</p>
        pub fn query_execution(mut self, input: crate::model::QueryExecution) -> Self {
            self.query_execution = Some(input);
            self
        }
        /// <p>Information about the query execution.</p>
        pub fn set_query_execution(
            mut self,
            input: std::option::Option<crate::model::QueryExecution>,
        ) -> Self {
            self.query_execution = input;
            self
        }
        /// Consumes the builder and constructs a [`GetQueryExecutionOutput`](crate::output::GetQueryExecutionOutput)
        pub fn build(self) -> crate::output::GetQueryExecutionOutput {
            crate::output::GetQueryExecutionOutput {
                query_execution: self.query_execution,
            }
        }
    }
}
impl GetQueryExecutionOutput {
    /// Creates a new builder-style object to manufacture [`GetQueryExecutionOutput`](crate::output::GetQueryExecutionOutput)
    pub fn builder() -> crate::output::get_query_execution_output::Builder {
        crate::output::get_query_execution_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPreparedStatementOutput {
    /// <p>The name of the prepared statement that was retrieved.</p>
    pub prepared_statement: std::option::Option<crate::model::PreparedStatement>,
}
impl std::fmt::Debug for GetPreparedStatementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPreparedStatementOutput");
        formatter.field("prepared_statement", &self.prepared_statement);
        formatter.finish()
    }
}
/// See [`GetPreparedStatementOutput`](crate::output::GetPreparedStatementOutput)
pub mod get_prepared_statement_output {
    /// A builder for [`GetPreparedStatementOutput`](crate::output::GetPreparedStatementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prepared_statement: std::option::Option<crate::model::PreparedStatement>,
    }
    impl Builder {
        /// <p>The name of the prepared statement that was retrieved.</p>
        pub fn prepared_statement(mut self, input: crate::model::PreparedStatement) -> Self {
            self.prepared_statement = Some(input);
            self
        }
        /// <p>The name of the prepared statement that was retrieved.</p>
        pub fn set_prepared_statement(
            mut self,
            input: std::option::Option<crate::model::PreparedStatement>,
        ) -> Self {
            self.prepared_statement = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPreparedStatementOutput`](crate::output::GetPreparedStatementOutput)
        pub fn build(self) -> crate::output::GetPreparedStatementOutput {
            crate::output::GetPreparedStatementOutput {
                prepared_statement: self.prepared_statement,
            }
        }
    }
}
impl GetPreparedStatementOutput {
    /// Creates a new builder-style object to manufacture [`GetPreparedStatementOutput`](crate::output::GetPreparedStatementOutput)
    pub fn builder() -> crate::output::get_prepared_statement_output::Builder {
        crate::output::get_prepared_statement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNamedQueryOutput {
    /// <p>Information about the query.</p>
    pub named_query: std::option::Option<crate::model::NamedQuery>,
}
impl std::fmt::Debug for GetNamedQueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNamedQueryOutput");
        formatter.field("named_query", &self.named_query);
        formatter.finish()
    }
}
/// See [`GetNamedQueryOutput`](crate::output::GetNamedQueryOutput)
pub mod get_named_query_output {
    /// A builder for [`GetNamedQueryOutput`](crate::output::GetNamedQueryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) named_query: std::option::Option<crate::model::NamedQuery>,
    }
    impl Builder {
        /// <p>Information about the query.</p>
        pub fn named_query(mut self, input: crate::model::NamedQuery) -> Self {
            self.named_query = Some(input);
            self
        }
        /// <p>Information about the query.</p>
        pub fn set_named_query(
            mut self,
            input: std::option::Option<crate::model::NamedQuery>,
        ) -> Self {
            self.named_query = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNamedQueryOutput`](crate::output::GetNamedQueryOutput)
        pub fn build(self) -> crate::output::GetNamedQueryOutput {
            crate::output::GetNamedQueryOutput {
                named_query: self.named_query,
            }
        }
    }
}
impl GetNamedQueryOutput {
    /// Creates a new builder-style object to manufacture [`GetNamedQueryOutput`](crate::output::GetNamedQueryOutput)
    pub fn builder() -> crate::output::get_named_query_output::Builder {
        crate::output::get_named_query_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDataCatalogOutput {
    /// <p>The data catalog returned.</p>
    pub data_catalog: std::option::Option<crate::model::DataCatalog>,
}
impl std::fmt::Debug for GetDataCatalogOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataCatalogOutput");
        formatter.field("data_catalog", &self.data_catalog);
        formatter.finish()
    }
}
/// See [`GetDataCatalogOutput`](crate::output::GetDataCatalogOutput)
pub mod get_data_catalog_output {
    /// A builder for [`GetDataCatalogOutput`](crate::output::GetDataCatalogOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_catalog: std::option::Option<crate::model::DataCatalog>,
    }
    impl Builder {
        /// <p>The data catalog returned.</p>
        pub fn data_catalog(mut self, input: crate::model::DataCatalog) -> Self {
            self.data_catalog = Some(input);
            self
        }
        /// <p>The data catalog returned.</p>
        pub fn set_data_catalog(
            mut self,
            input: std::option::Option<crate::model::DataCatalog>,
        ) -> Self {
            self.data_catalog = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDataCatalogOutput`](crate::output::GetDataCatalogOutput)
        pub fn build(self) -> crate::output::GetDataCatalogOutput {
            crate::output::GetDataCatalogOutput {
                data_catalog: self.data_catalog,
            }
        }
    }
}
impl GetDataCatalogOutput {
    /// Creates a new builder-style object to manufacture [`GetDataCatalogOutput`](crate::output::GetDataCatalogOutput)
    pub fn builder() -> crate::output::get_data_catalog_output::Builder {
        crate::output::get_data_catalog_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDatabaseOutput {
    /// <p>The database returned.</p>
    pub database: std::option::Option<crate::model::Database>,
}
impl std::fmt::Debug for GetDatabaseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDatabaseOutput");
        formatter.field("database", &self.database);
        formatter.finish()
    }
}
/// See [`GetDatabaseOutput`](crate::output::GetDatabaseOutput)
pub mod get_database_output {
    /// A builder for [`GetDatabaseOutput`](crate::output::GetDatabaseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) database: std::option::Option<crate::model::Database>,
    }
    impl Builder {
        /// <p>The database returned.</p>
        pub fn database(mut self, input: crate::model::Database) -> Self {
            self.database = Some(input);
            self
        }
        /// <p>The database returned.</p>
        pub fn set_database(mut self, input: std::option::Option<crate::model::Database>) -> Self {
            self.database = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDatabaseOutput`](crate::output::GetDatabaseOutput)
        pub fn build(self) -> crate::output::GetDatabaseOutput {
            crate::output::GetDatabaseOutput {
                database: self.database,
            }
        }
    }
}
impl GetDatabaseOutput {
    /// Creates a new builder-style object to manufacture [`GetDatabaseOutput`](crate::output::GetDatabaseOutput)
    pub fn builder() -> crate::output::get_database_output::Builder {
        crate::output::get_database_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteWorkGroupOutput {}
impl std::fmt::Debug for DeleteWorkGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteWorkGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteWorkGroupOutput`](crate::output::DeleteWorkGroupOutput)
pub mod delete_work_group_output {
    /// A builder for [`DeleteWorkGroupOutput`](crate::output::DeleteWorkGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteWorkGroupOutput`](crate::output::DeleteWorkGroupOutput)
        pub fn build(self) -> crate::output::DeleteWorkGroupOutput {
            crate::output::DeleteWorkGroupOutput {}
        }
    }
}
impl DeleteWorkGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkGroupOutput`](crate::output::DeleteWorkGroupOutput)
    pub fn builder() -> crate::output::delete_work_group_output::Builder {
        crate::output::delete_work_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePreparedStatementOutput {}
impl std::fmt::Debug for DeletePreparedStatementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePreparedStatementOutput");
        formatter.finish()
    }
}
/// See [`DeletePreparedStatementOutput`](crate::output::DeletePreparedStatementOutput)
pub mod delete_prepared_statement_output {
    /// A builder for [`DeletePreparedStatementOutput`](crate::output::DeletePreparedStatementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePreparedStatementOutput`](crate::output::DeletePreparedStatementOutput)
        pub fn build(self) -> crate::output::DeletePreparedStatementOutput {
            crate::output::DeletePreparedStatementOutput {}
        }
    }
}
impl DeletePreparedStatementOutput {
    /// Creates a new builder-style object to manufacture [`DeletePreparedStatementOutput`](crate::output::DeletePreparedStatementOutput)
    pub fn builder() -> crate::output::delete_prepared_statement_output::Builder {
        crate::output::delete_prepared_statement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNamedQueryOutput {}
impl std::fmt::Debug for DeleteNamedQueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNamedQueryOutput");
        formatter.finish()
    }
}
/// See [`DeleteNamedQueryOutput`](crate::output::DeleteNamedQueryOutput)
pub mod delete_named_query_output {
    /// A builder for [`DeleteNamedQueryOutput`](crate::output::DeleteNamedQueryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNamedQueryOutput`](crate::output::DeleteNamedQueryOutput)
        pub fn build(self) -> crate::output::DeleteNamedQueryOutput {
            crate::output::DeleteNamedQueryOutput {}
        }
    }
}
impl DeleteNamedQueryOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNamedQueryOutput`](crate::output::DeleteNamedQueryOutput)
    pub fn builder() -> crate::output::delete_named_query_output::Builder {
        crate::output::delete_named_query_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDataCatalogOutput {}
impl std::fmt::Debug for DeleteDataCatalogOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDataCatalogOutput");
        formatter.finish()
    }
}
/// See [`DeleteDataCatalogOutput`](crate::output::DeleteDataCatalogOutput)
pub mod delete_data_catalog_output {
    /// A builder for [`DeleteDataCatalogOutput`](crate::output::DeleteDataCatalogOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDataCatalogOutput`](crate::output::DeleteDataCatalogOutput)
        pub fn build(self) -> crate::output::DeleteDataCatalogOutput {
            crate::output::DeleteDataCatalogOutput {}
        }
    }
}
impl DeleteDataCatalogOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDataCatalogOutput`](crate::output::DeleteDataCatalogOutput)
    pub fn builder() -> crate::output::delete_data_catalog_output::Builder {
        crate::output::delete_data_catalog_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWorkGroupOutput {}
impl std::fmt::Debug for CreateWorkGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkGroupOutput");
        formatter.finish()
    }
}
/// See [`CreateWorkGroupOutput`](crate::output::CreateWorkGroupOutput)
pub mod create_work_group_output {
    /// A builder for [`CreateWorkGroupOutput`](crate::output::CreateWorkGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateWorkGroupOutput`](crate::output::CreateWorkGroupOutput)
        pub fn build(self) -> crate::output::CreateWorkGroupOutput {
            crate::output::CreateWorkGroupOutput {}
        }
    }
}
impl CreateWorkGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkGroupOutput`](crate::output::CreateWorkGroupOutput)
    pub fn builder() -> crate::output::create_work_group_output::Builder {
        crate::output::create_work_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePreparedStatementOutput {}
impl std::fmt::Debug for CreatePreparedStatementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePreparedStatementOutput");
        formatter.finish()
    }
}
/// See [`CreatePreparedStatementOutput`](crate::output::CreatePreparedStatementOutput)
pub mod create_prepared_statement_output {
    /// A builder for [`CreatePreparedStatementOutput`](crate::output::CreatePreparedStatementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreatePreparedStatementOutput`](crate::output::CreatePreparedStatementOutput)
        pub fn build(self) -> crate::output::CreatePreparedStatementOutput {
            crate::output::CreatePreparedStatementOutput {}
        }
    }
}
impl CreatePreparedStatementOutput {
    /// Creates a new builder-style object to manufacture [`CreatePreparedStatementOutput`](crate::output::CreatePreparedStatementOutput)
    pub fn builder() -> crate::output::create_prepared_statement_output::Builder {
        crate::output::create_prepared_statement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNamedQueryOutput {
    /// <p>The unique ID of the query.</p>
    pub named_query_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateNamedQueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNamedQueryOutput");
        formatter.field("named_query_id", &self.named_query_id);
        formatter.finish()
    }
}
/// See [`CreateNamedQueryOutput`](crate::output::CreateNamedQueryOutput)
pub mod create_named_query_output {
    /// A builder for [`CreateNamedQueryOutput`](crate::output::CreateNamedQueryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) named_query_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique ID of the query.</p>
        pub fn named_query_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.named_query_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the query.</p>
        pub fn set_named_query_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.named_query_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateNamedQueryOutput`](crate::output::CreateNamedQueryOutput)
        pub fn build(self) -> crate::output::CreateNamedQueryOutput {
            crate::output::CreateNamedQueryOutput {
                named_query_id: self.named_query_id,
            }
        }
    }
}
impl CreateNamedQueryOutput {
    /// Creates a new builder-style object to manufacture [`CreateNamedQueryOutput`](crate::output::CreateNamedQueryOutput)
    pub fn builder() -> crate::output::create_named_query_output::Builder {
        crate::output::create_named_query_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDataCatalogOutput {}
impl std::fmt::Debug for CreateDataCatalogOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataCatalogOutput");
        formatter.finish()
    }
}
/// See [`CreateDataCatalogOutput`](crate::output::CreateDataCatalogOutput)
pub mod create_data_catalog_output {
    /// A builder for [`CreateDataCatalogOutput`](crate::output::CreateDataCatalogOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateDataCatalogOutput`](crate::output::CreateDataCatalogOutput)
        pub fn build(self) -> crate::output::CreateDataCatalogOutput {
            crate::output::CreateDataCatalogOutput {}
        }
    }
}
impl CreateDataCatalogOutput {
    /// Creates a new builder-style object to manufacture [`CreateDataCatalogOutput`](crate::output::CreateDataCatalogOutput)
    pub fn builder() -> crate::output::create_data_catalog_output::Builder {
        crate::output::create_data_catalog_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGetQueryExecutionOutput {
    /// <p>Information about a query execution.</p>
    pub query_executions: std::option::Option<std::vec::Vec<crate::model::QueryExecution>>,
    /// <p>Information about the query executions that failed to run.</p>
    pub unprocessed_query_execution_ids:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedQueryExecutionId>>,
}
impl std::fmt::Debug for BatchGetQueryExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetQueryExecutionOutput");
        formatter.field("query_executions", &self.query_executions);
        formatter.field(
            "unprocessed_query_execution_ids",
            &self.unprocessed_query_execution_ids,
        );
        formatter.finish()
    }
}
/// See [`BatchGetQueryExecutionOutput`](crate::output::BatchGetQueryExecutionOutput)
pub mod batch_get_query_execution_output {
    /// A builder for [`BatchGetQueryExecutionOutput`](crate::output::BatchGetQueryExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_executions:
            std::option::Option<std::vec::Vec<crate::model::QueryExecution>>,
        pub(crate) unprocessed_query_execution_ids:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedQueryExecutionId>>,
    }
    impl Builder {
        /// Appends an item to `query_executions`.
        ///
        /// To override the contents of this collection use [`set_query_executions`](Self::set_query_executions).
        ///
        /// <p>Information about a query execution.</p>
        pub fn query_executions(mut self, input: impl Into<crate::model::QueryExecution>) -> Self {
            let mut v = self.query_executions.unwrap_or_default();
            v.push(input.into());
            self.query_executions = Some(v);
            self
        }
        /// <p>Information about a query execution.</p>
        pub fn set_query_executions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QueryExecution>>,
        ) -> Self {
            self.query_executions = input;
            self
        }
        /// Appends an item to `unprocessed_query_execution_ids`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_query_execution_ids`](Self::set_unprocessed_query_execution_ids).
        ///
        /// <p>Information about the query executions that failed to run.</p>
        pub fn unprocessed_query_execution_ids(
            mut self,
            input: impl Into<crate::model::UnprocessedQueryExecutionId>,
        ) -> Self {
            let mut v = self.unprocessed_query_execution_ids.unwrap_or_default();
            v.push(input.into());
            self.unprocessed_query_execution_ids = Some(v);
            self
        }
        /// <p>Information about the query executions that failed to run.</p>
        pub fn set_unprocessed_query_execution_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedQueryExecutionId>>,
        ) -> Self {
            self.unprocessed_query_execution_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetQueryExecutionOutput`](crate::output::BatchGetQueryExecutionOutput)
        pub fn build(self) -> crate::output::BatchGetQueryExecutionOutput {
            crate::output::BatchGetQueryExecutionOutput {
                query_executions: self.query_executions,
                unprocessed_query_execution_ids: self.unprocessed_query_execution_ids,
            }
        }
    }
}
impl BatchGetQueryExecutionOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetQueryExecutionOutput`](crate::output::BatchGetQueryExecutionOutput)
    pub fn builder() -> crate::output::batch_get_query_execution_output::Builder {
        crate::output::batch_get_query_execution_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGetNamedQueryOutput {
    /// <p>Information about the named query IDs submitted.</p>
    pub named_queries: std::option::Option<std::vec::Vec<crate::model::NamedQuery>>,
    /// <p>Information about provided query IDs.</p>
    pub unprocessed_named_query_ids:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedNamedQueryId>>,
}
impl std::fmt::Debug for BatchGetNamedQueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetNamedQueryOutput");
        formatter.field("named_queries", &self.named_queries);
        formatter.field(
            "unprocessed_named_query_ids",
            &self.unprocessed_named_query_ids,
        );
        formatter.finish()
    }
}
/// See [`BatchGetNamedQueryOutput`](crate::output::BatchGetNamedQueryOutput)
pub mod batch_get_named_query_output {
    /// A builder for [`BatchGetNamedQueryOutput`](crate::output::BatchGetNamedQueryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) named_queries: std::option::Option<std::vec::Vec<crate::model::NamedQuery>>,
        pub(crate) unprocessed_named_query_ids:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedNamedQueryId>>,
    }
    impl Builder {
        /// Appends an item to `named_queries`.
        ///
        /// To override the contents of this collection use [`set_named_queries`](Self::set_named_queries).
        ///
        /// <p>Information about the named query IDs submitted.</p>
        pub fn named_queries(mut self, input: impl Into<crate::model::NamedQuery>) -> Self {
            let mut v = self.named_queries.unwrap_or_default();
            v.push(input.into());
            self.named_queries = Some(v);
            self
        }
        /// <p>Information about the named query IDs submitted.</p>
        pub fn set_named_queries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NamedQuery>>,
        ) -> Self {
            self.named_queries = input;
            self
        }
        /// Appends an item to `unprocessed_named_query_ids`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_named_query_ids`](Self::set_unprocessed_named_query_ids).
        ///
        /// <p>Information about provided query IDs.</p>
        pub fn unprocessed_named_query_ids(
            mut self,
            input: impl Into<crate::model::UnprocessedNamedQueryId>,
        ) -> Self {
            let mut v = self.unprocessed_named_query_ids.unwrap_or_default();
            v.push(input.into());
            self.unprocessed_named_query_ids = Some(v);
            self
        }
        /// <p>Information about provided query IDs.</p>
        pub fn set_unprocessed_named_query_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedNamedQueryId>>,
        ) -> Self {
            self.unprocessed_named_query_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetNamedQueryOutput`](crate::output::BatchGetNamedQueryOutput)
        pub fn build(self) -> crate::output::BatchGetNamedQueryOutput {
            crate::output::BatchGetNamedQueryOutput {
                named_queries: self.named_queries,
                unprocessed_named_query_ids: self.unprocessed_named_query_ids,
            }
        }
    }
}
impl BatchGetNamedQueryOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetNamedQueryOutput`](crate::output::BatchGetNamedQueryOutput)
    pub fn builder() -> crate::output::batch_get_named_query_output::Builder {
        crate::output::batch_get_named_query_output::Builder::default()
    }
}
