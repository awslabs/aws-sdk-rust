// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Access is denied.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There was an internal service exception.</p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>The resource is currently in use.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The specified resource wasn't found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Currently, the specified resource is not supported.</p>
    ResourceNotSupportedException(crate::types::error::ResourceNotSupportedException),
    /// <p>The maximum number of open requests per account has been exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Too many requests.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>An error occurred during validation.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotSupportedException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_change_set::CancelChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_change_set::CancelChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_change_set::CancelChangeSetError> for Error {
    fn from(err: crate::operation::cancel_change_set::CancelChangeSetError) -> Self {
        match err {
            crate::operation::cancel_change_set::CancelChangeSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_change_set::CancelChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set::DescribeChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_change_set::DescribeChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_change_set::DescribeChangeSetError> for Error {
    fn from(err: crate::operation::describe_change_set::DescribeChangeSetError) -> Self {
        match err {
            crate::operation::describe_change_set::DescribeChangeSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_change_set::DescribeChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_entity::DescribeEntityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_entity::DescribeEntityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_entity::DescribeEntityError> for Error {
    fn from(err: crate::operation::describe_entity::DescribeEntityError) -> Self {
        match err {
            crate::operation::describe_entity::DescribeEntityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_entity::DescribeEntityError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_entity::DescribeEntityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_entity::DescribeEntityError::ResourceNotSupportedException(inner) => Error::ResourceNotSupportedException(inner),
            crate::operation::describe_entity::DescribeEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_entity::DescribeEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_entity::DescribeEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_change_sets::ListChangeSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_change_sets::ListChangeSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_change_sets::ListChangeSetsError> for Error {
    fn from(err: crate::operation::list_change_sets::ListChangeSetsError) -> Self {
        match err {
            crate::operation::list_change_sets::ListChangeSetsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_change_sets::ListChangeSetsError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::list_change_sets::ListChangeSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_change_sets::ListChangeSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_change_sets::ListChangeSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_entities::ListEntitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_entities::ListEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_entities::ListEntitiesError> for Error {
    fn from(err: crate::operation::list_entities::ListEntitiesError) -> Self {
        match err {
            crate::operation::list_entities::ListEntitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_entities::ListEntitiesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_entities::ListEntitiesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_entities::ListEntitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_entities::ListEntitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_entities::ListEntitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_change_set::StartChangeSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_change_set::StartChangeSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_change_set::StartChangeSetError> for Error {
    fn from(err: crate::operation::start_change_set::StartChangeSetError) -> Self {
        match err {
            crate::operation::start_change_set::StartChangeSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_change_set::StartChangeSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::start_change_set::StartChangeSetError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_change_set::StartChangeSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_change_set::StartChangeSetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_change_set::StartChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_change_set::StartChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_change_set::StartChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceNotSupportedException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
