// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Used to cancel an open change request. Must be sent before the status of the request
/// changes to <code>APPLYING</code>, the final stage of completing your change request. You
/// can describe a change during the 60-day request history retention period for API
/// calls.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelChangeSet {
    _private: (),
}
impl CancelChangeSet {
    /// Creates a new builder-style object to manufacture [`CancelChangeSetInput`](crate::input::CancelChangeSetInput)
    pub fn builder() -> crate::input::cancel_change_set_input::Builder {
        crate::input::cancel_change_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelChangeSet {
    type Output = std::result::Result<
        crate::output::CancelChangeSetOutput,
        crate::error::CancelChangeSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_change_set_error(response)
        } else {
            crate::operation_deser::parse_cancel_change_set_response(response)
        }
    }
}

/// <p>Provides information about a given change set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChangeSet {
    _private: (),
}
impl DescribeChangeSet {
    /// Creates a new builder-style object to manufacture [`DescribeChangeSetInput`](crate::input::DescribeChangeSetInput)
    pub fn builder() -> crate::input::describe_change_set_input::Builder {
        crate::input::describe_change_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChangeSet {
    type Output = std::result::Result<
        crate::output::DescribeChangeSetOutput,
        crate::error::DescribeChangeSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_change_set_error(response)
        } else {
            crate::operation_deser::parse_describe_change_set_response(response)
        }
    }
}

/// <p>Returns the metadata and content of the entity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEntity {
    _private: (),
}
impl DescribeEntity {
    /// Creates a new builder-style object to manufacture [`DescribeEntityInput`](crate::input::DescribeEntityInput)
    pub fn builder() -> crate::input::describe_entity_input::Builder {
        crate::input::describe_entity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEntity {
    type Output =
        std::result::Result<crate::output::DescribeEntityOutput, crate::error::DescribeEntityError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_entity_error(response)
        } else {
            crate::operation_deser::parse_describe_entity_response(response)
        }
    }
}

/// <p>Returns the list of change sets owned by the account being used to make the call. You
/// can filter this list by providing any combination of <code>entityId</code>,
/// <code>ChangeSetName</code>, and status. If you provide more than one filter, the API
/// operation applies a logical AND between the filters.</p>
/// <p>You can describe a change during the 60-day request history retention period for API
/// calls.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChangeSets {
    _private: (),
}
impl ListChangeSets {
    /// Creates a new builder-style object to manufacture [`ListChangeSetsInput`](crate::input::ListChangeSetsInput)
    pub fn builder() -> crate::input::list_change_sets_input::Builder {
        crate::input::list_change_sets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChangeSets {
    type Output =
        std::result::Result<crate::output::ListChangeSetsOutput, crate::error::ListChangeSetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_change_sets_error(response)
        } else {
            crate::operation_deser::parse_list_change_sets_response(response)
        }
    }
}

/// <p>Provides the list of entities of a given type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEntities {
    _private: (),
}
impl ListEntities {
    /// Creates a new builder-style object to manufacture [`ListEntitiesInput`](crate::input::ListEntitiesInput)
    pub fn builder() -> crate::input::list_entities_input::Builder {
        crate::input::list_entities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEntities {
    type Output =
        std::result::Result<crate::output::ListEntitiesOutput, crate::error::ListEntitiesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_entities_error(response)
        } else {
            crate::operation_deser::parse_list_entities_response(response)
        }
    }
}

/// <p>This operation allows you to request changes for your entities. Within a single
/// ChangeSet, you cannot start the same change type against the same entity multiple times.
/// Additionally, when a ChangeSet is running, all the entities targeted by the different
/// changes are locked until the ChangeSet has completed (either succeeded, cancelled, or failed). If
/// you try to start a ChangeSet containing a change against an entity that is already
/// locked, you will receive a <code>ResourceInUseException</code>.</p>
/// <p>For example, you cannot start the ChangeSet described in the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_StartChangeSet.html#API_StartChangeSet_Examples">example</a> later in this topic, because it contains two changes to execute the same change
/// type (<code>AddRevisions</code>) against the same entity
/// (<code>entity-id@1)</code>.</p>
/// <p>For more information about working with change sets, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets">
/// Working with change sets</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartChangeSet {
    _private: (),
}
impl StartChangeSet {
    /// Creates a new builder-style object to manufacture [`StartChangeSetInput`](crate::input::StartChangeSetInput)
    pub fn builder() -> crate::input::start_change_set_input::Builder {
        crate::input::start_change_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartChangeSet {
    type Output =
        std::result::Result<crate::output::StartChangeSetOutput, crate::error::StartChangeSetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_change_set_error(response)
        } else {
            crate::operation_deser::parse_start_change_set_response(response)
        }
    }
}
