// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEntitiesInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    #[doc(hidden)]
    pub catalog: std::option::Option<std::string::String>,
    /// <p>The type of entities to retrieve.</p>
    #[doc(hidden)]
    pub entity_type: std::option::Option<std::string::String>,
    /// <p>An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.</p>
    #[doc(hidden)]
    pub filter_list: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    #[doc(hidden)]
    pub sort: std::option::Option<crate::types::Sort>,
    /// <p>The value of the next token, if it exists. Null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListEntitiesInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn catalog(&self) -> std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The type of entities to retrieve.</p>
    pub fn entity_type(&self) -> std::option::Option<&str> {
        self.entity_type.as_deref()
    }
    /// <p>An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.</p>
    pub fn filter_list(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filter_list.as_deref()
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn sort(&self) -> std::option::Option<&crate::types::Sort> {
        self.sort.as_ref()
    }
    /// <p>The value of the next token, if it exists. Null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListEntitiesInput {
    /// Creates a new builder-style object to manufacture [`ListEntitiesInput`](crate::operation::list_entities::ListEntitiesInput).
    pub fn builder() -> crate::operation::list_entities::builders::ListEntitiesInputBuilder {
        crate::operation::list_entities::builders::ListEntitiesInputBuilder::default()
    }
}

/// A builder for [`ListEntitiesInput`](crate::operation::list_entities::ListEntitiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListEntitiesInputBuilder {
    pub(crate) catalog: std::option::Option<std::string::String>,
    pub(crate) entity_type: std::option::Option<std::string::String>,
    pub(crate) filter_list: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) sort: std::option::Option<crate::types::Sort>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListEntitiesInputBuilder {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn catalog(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog = Some(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn set_catalog(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The type of entities to retrieve.</p>
    pub fn entity_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_type = Some(input.into());
        self
    }
    /// <p>The type of entities to retrieve.</p>
    pub fn set_entity_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_type = input;
        self
    }
    /// Appends an item to `filter_list`.
    ///
    /// To override the contents of this collection use [`set_filter_list`](Self::set_filter_list).
    ///
    /// <p>An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.</p>
    pub fn filter_list(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filter_list.unwrap_or_default();
        v.push(input);
        self.filter_list = Some(v);
        self
    }
    /// <p>An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.</p>
    pub fn set_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filter_list = input;
        self
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn sort(mut self, input: crate::types::Sort) -> Self {
        self.sort = Some(input);
        self
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn set_sort(mut self, input: std::option::Option<crate::types::Sort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The value of the next token, if it exists. Null if there are no more results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The value of the next token, if it exists. Null if there are no more results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListEntitiesInput`](crate::operation::list_entities::ListEntitiesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_entities::ListEntitiesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_entities::ListEntitiesInput {
            catalog: self.catalog,
            entity_type: self.entity_type,
            filter_list: self.filter_list,
            sort: self.sort,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
