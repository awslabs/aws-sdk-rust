// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartChangeSetInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>Array of <code>change</code> object.</p>
    pub change_set: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub change_set_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub change_set_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StartChangeSetInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>Array of <code>change</code> object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.change_set.is_none()`.
    pub fn change_set(&self) -> &[crate::types::Change] {
        self.change_set.as_deref().unwrap_or_default()
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn change_set_name(&self) -> ::std::option::Option<&str> {
        self.change_set_name.as_deref()
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.change_set_tags.is_none()`.
    pub fn change_set_tags(&self) -> &[crate::types::Tag] {
        self.change_set_tags.as_deref().unwrap_or_default()
    }
}
impl StartChangeSetInput {
    /// Creates a new builder-style object to manufacture [`StartChangeSetInput`](crate::operation::start_change_set::StartChangeSetInput).
    pub fn builder() -> crate::operation::start_change_set::builders::StartChangeSetInputBuilder {
        crate::operation::start_change_set::builders::StartChangeSetInputBuilder::default()
    }
}

/// A builder for [`StartChangeSetInput`](crate::operation::start_change_set::StartChangeSetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartChangeSetInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) change_set: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
    pub(crate) change_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) change_set_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StartChangeSetInputBuilder {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// Appends an item to `change_set`.
    ///
    /// To override the contents of this collection use [`set_change_set`](Self::set_change_set).
    ///
    /// <p>Array of <code>change</code> object.</p>
    pub fn change_set(mut self, input: crate::types::Change) -> Self {
        let mut v = self.change_set.unwrap_or_default();
        v.push(input);
        self.change_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Array of <code>change</code> object.</p>
    pub fn set_change_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Change>>) -> Self {
        self.change_set = input;
        self
    }
    /// <p>Array of <code>change</code> object.</p>
    pub fn get_change_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Change>> {
        &self.change_set
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn change_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn set_change_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_set_name = input;
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn get_change_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_set_name
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Appends an item to `change_set_tags`.
    ///
    /// To override the contents of this collection use [`set_change_set_tags`](Self::set_change_set_tags).
    ///
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn change_set_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.change_set_tags.unwrap_or_default();
        v.push(input);
        self.change_set_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn set_change_set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.change_set_tags = input;
        self
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn get_change_set_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.change_set_tags
    }
    /// Consumes the builder and constructs a [`StartChangeSetInput`](crate::operation::start_change_set::StartChangeSetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_change_set::StartChangeSetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_change_set::StartChangeSetInput {
            catalog: self.catalog,
            change_set: self.change_set,
            change_set_name: self.change_set_name,
            client_request_token: self.client_request_token,
            change_set_tags: self.change_set_tags,
        })
    }
}
