// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_change_set::_start_change_set_output::StartChangeSetOutputBuilder;

pub use crate::operation::start_change_set::_start_change_set_input::StartChangeSetInputBuilder;

impl crate::operation::start_change_set::builders::StartChangeSetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_change_set::StartChangeSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_change_set::StartChangeSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_change_set();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartChangeSet`.
///
/// <p>Allows you to request changes for your entities. Within a single <code>ChangeSet</code>, you can't start the same change type against the same entity multiple times. Additionally, when a <code>ChangeSet</code> is running, all the entities targeted by the different changes are locked until the change set has completed (either succeeded, cancelled, or failed). If you try to start a change set containing a change against an entity that is already locked, you will receive a <code>ResourceInUseException</code> error.</p>
/// <p>For example, you can't start the <code>ChangeSet</code> described in the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_StartChangeSet.html#API_StartChangeSet_Examples">example</a> later in this topic because it contains two changes to run the same change type (<code>AddRevisions</code>) against the same entity (<code>entity-id@1</code>).</p>
/// <p>For more information about working with change sets, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets"> Working with change sets</a>. For information about change types for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information about change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartChangeSetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_change_set::builders::StartChangeSetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_change_set::StartChangeSetOutput,
        crate::operation::start_change_set::StartChangeSetError,
    > for StartChangeSetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_change_set::StartChangeSetOutput,
            crate::operation::start_change_set::StartChangeSetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartChangeSetFluentBuilder {
    /// Creates a new `StartChangeSet`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartChangeSet as a reference.
    pub fn as_input(&self) -> &crate::operation::start_change_set::builders::StartChangeSetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_change_set::StartChangeSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_change_set::StartChangeSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_change_set::StartChangeSet::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_change_set::StartChangeSet::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_change_set::StartChangeSetOutput,
        crate::operation::start_change_set::StartChangeSetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code></p>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code></p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code></p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog()
    }
    ///
    /// Appends an item to `ChangeSet`.
    ///
    /// To override the contents of this collection use [`set_change_set`](Self::set_change_set).
    ///
    /// <p>Array of <code>change</code> object.</p>
    pub fn change_set(mut self, input: crate::types::Change) -> Self {
        self.inner = self.inner.change_set(input);
        self
    }
    /// <p>Array of <code>change</code> object.</p>
    pub fn set_change_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Change>>) -> Self {
        self.inner = self.inner.set_change_set(input);
        self
    }
    /// <p>Array of <code>change</code> object.</p>
    pub fn get_change_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Change>> {
        self.inner.get_change_set()
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets.</p>
    pub fn change_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.change_set_name(input.into());
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets.</p>
    pub fn set_change_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_change_set_name(input);
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets.</p>
    pub fn get_change_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_change_set_name()
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    ///
    /// Appends an item to `ChangeSetTags`.
    ///
    /// To override the contents of this collection use [`set_change_set_tags`](Self::set_change_set_tags).
    ///
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn change_set_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.change_set_tags(input);
        self
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn set_change_set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_change_set_tags(input);
        self
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn get_change_set_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_change_set_tags()
    }
    /// <p>The intent related to the request. The default is <code>APPLY</code>. To test your request before applying changes to your entities, use <code>VALIDATE</code>. This feature is currently available for adding versions to single-AMI products. For more information, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#ami-add-version">Add a new version</a>.</p>
    pub fn intent(mut self, input: crate::types::Intent) -> Self {
        self.inner = self.inner.intent(input);
        self
    }
    /// <p>The intent related to the request. The default is <code>APPLY</code>. To test your request before applying changes to your entities, use <code>VALIDATE</code>. This feature is currently available for adding versions to single-AMI products. For more information, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#ami-add-version">Add a new version</a>.</p>
    pub fn set_intent(mut self, input: ::std::option::Option<crate::types::Intent>) -> Self {
        self.inner = self.inner.set_intent(input);
        self
    }
    /// <p>The intent related to the request. The default is <code>APPLY</code>. To test your request before applying changes to your entities, use <code>VALIDATE</code>. This feature is currently available for adding versions to single-AMI products. For more information, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#ami-add-version">Add a new version</a>.</p>
    pub fn get_intent(&self) -> &::std::option::Option<crate::types::Intent> {
        self.inner.get_intent()
    }
}
