// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_change_set::_start_change_set_output::StartChangeSetOutputBuilder;

pub use crate::operation::start_change_set::_start_change_set_input::StartChangeSetInputBuilder;

/// Fluent builder constructing a request to `StartChangeSet`.
///
/// <p>Allows you to request changes for your entities. Within a single <code>ChangeSet</code>, you can't start the same change type against the same entity multiple times. Additionally, when a <code>ChangeSet</code> is running, all the entities targeted by the different changes are locked until the change set has completed (either succeeded, cancelled, or failed). If you try to start a change set containing a change against an entity that is already locked, you will receive a <code>ResourceInUseException</code> error.</p>
/// <p>For example, you can't start the <code>ChangeSet</code> described in the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_StartChangeSet.html#API_StartChangeSet_Examples">example</a> later in this topic because it contains two changes to run the same change type (<code>AddRevisions</code>) against the same entity (<code>entity-id@1</code>).</p>
/// <p>For more information about working with change sets, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets"> Working with change sets</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartChangeSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_change_set::builders::StartChangeSetInputBuilder,
}
impl StartChangeSetFluentBuilder {
    /// Creates a new `StartChangeSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_change_set::StartChangeSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::start_change_set::StartChangeSetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_change_set::StartChangeSetOutput,
        aws_smithy_http::result::SdkError<crate::operation::start_change_set::StartChangeSetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn catalog(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn set_catalog(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// Appends an item to `ChangeSet`.
    ///
    /// To override the contents of this collection use [`set_change_set`](Self::set_change_set).
    ///
    /// <p>Array of <code>change</code> object.</p>
    pub fn change_set(mut self, input: crate::types::Change) -> Self {
        self.inner = self.inner.change_set(input);
        self
    }
    /// <p>Array of <code>change</code> object.</p>
    pub fn set_change_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Change>>,
    ) -> Self {
        self.inner = self.inner.set_change_set(input);
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn change_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.change_set_name(input.into());
        self
    }
    /// <p>Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. </p>
    pub fn set_change_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_change_set_name(input);
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique token to identify the request to ensure idempotency.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// Appends an item to `ChangeSetTags`.
    ///
    /// To override the contents of this collection use [`set_change_set_tags`](Self::set_change_set_tags).
    ///
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn change_set_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.change_set_tags(input);
        self
    }
    /// <p>A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.</p>
    pub fn set_change_set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_change_set_tags(input);
        self
    }
}
