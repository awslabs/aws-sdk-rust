// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListChangeSetsInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>An array of filter objects.</p>
    pub filter_list: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub sort: ::std::option::Option<crate::types::Sort>,
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListChangeSetsInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>An array of filter objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_list.is_none()`.
    pub fn filter_list(&self) -> &[crate::types::Filter] {
        self.filter_list.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::Sort> {
        self.sort.as_ref()
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListChangeSetsInput {
    /// Creates a new builder-style object to manufacture [`ListChangeSetsInput`](crate::operation::list_change_sets::ListChangeSetsInput).
    pub fn builder() -> crate::operation::list_change_sets::builders::ListChangeSetsInputBuilder {
        crate::operation::list_change_sets::builders::ListChangeSetsInputBuilder::default()
    }
}

/// A builder for [`ListChangeSetsInput`](crate::operation::list_change_sets::ListChangeSetsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListChangeSetsInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) filter_list: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) sort: ::std::option::Option<crate::types::Sort>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListChangeSetsInputBuilder {
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWSMarketplace</code> </p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// Appends an item to `filter_list`.
    ///
    /// To override the contents of this collection use [`set_filter_list`](Self::set_filter_list).
    ///
    /// <p>An array of filter objects.</p>
    pub fn filter_list(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filter_list.unwrap_or_default();
        v.push(input);
        self.filter_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of filter objects.</p>
    pub fn set_filter_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filter_list = input;
        self
    }
    /// <p>An array of filter objects.</p>
    pub fn get_filter_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filter_list
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn sort(mut self, input: crate::types::Sort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::Sort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>An object that contains two attributes, <code>SortBy</code> and <code>SortOrder</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::Sort> {
        &self.sort
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListChangeSetsInput`](crate::operation::list_change_sets::ListChangeSetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_change_sets::ListChangeSetsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_change_sets::ListChangeSetsInput {
            catalog: self.catalog,
            filter_list: self.filter_list,
            sort: self.sort,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
