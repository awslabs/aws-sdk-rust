// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filters that you can use with the ListEntities operation to filter machine learning products. You can filter by <code>EntityId</code>, <code>astModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MachineLearningProductFilters {
    /// <p>Filter machine learning products by their entity IDs.</p>
    pub entity_id: ::std::option::Option<crate::types::MachineLearningProductEntityIdFilter>,
    /// <p>Filter machine learning products by their last modified date.</p>
    pub last_modified_date: ::std::option::Option<crate::types::MachineLearningProductLastModifiedDateFilter>,
    /// <p>Filter machine learning products by their product titles.</p>
    pub product_title: ::std::option::Option<crate::types::MachineLearningProductTitleFilter>,
    /// <p>Filter machine learning products by their visibility status.</p>
    pub visibility: ::std::option::Option<crate::types::MachineLearningProductVisibilityFilter>,
}
impl MachineLearningProductFilters {
    /// <p>Filter machine learning products by their entity IDs.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&crate::types::MachineLearningProductEntityIdFilter> {
        self.entity_id.as_ref()
    }
    /// <p>Filter machine learning products by their last modified date.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&crate::types::MachineLearningProductLastModifiedDateFilter> {
        self.last_modified_date.as_ref()
    }
    /// <p>Filter machine learning products by their product titles.</p>
    pub fn product_title(&self) -> ::std::option::Option<&crate::types::MachineLearningProductTitleFilter> {
        self.product_title.as_ref()
    }
    /// <p>Filter machine learning products by their visibility status.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::MachineLearningProductVisibilityFilter> {
        self.visibility.as_ref()
    }
}
impl MachineLearningProductFilters {
    /// Creates a new builder-style object to manufacture [`MachineLearningProductFilters`](crate::types::MachineLearningProductFilters).
    pub fn builder() -> crate::types::builders::MachineLearningProductFiltersBuilder {
        crate::types::builders::MachineLearningProductFiltersBuilder::default()
    }
}

/// A builder for [`MachineLearningProductFilters`](crate::types::MachineLearningProductFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MachineLearningProductFiltersBuilder {
    pub(crate) entity_id: ::std::option::Option<crate::types::MachineLearningProductEntityIdFilter>,
    pub(crate) last_modified_date: ::std::option::Option<crate::types::MachineLearningProductLastModifiedDateFilter>,
    pub(crate) product_title: ::std::option::Option<crate::types::MachineLearningProductTitleFilter>,
    pub(crate) visibility: ::std::option::Option<crate::types::MachineLearningProductVisibilityFilter>,
}
impl MachineLearningProductFiltersBuilder {
    /// <p>Filter machine learning products by their entity IDs.</p>
    pub fn entity_id(mut self, input: crate::types::MachineLearningProductEntityIdFilter) -> Self {
        self.entity_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter machine learning products by their entity IDs.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<crate::types::MachineLearningProductEntityIdFilter>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>Filter machine learning products by their entity IDs.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<crate::types::MachineLearningProductEntityIdFilter> {
        &self.entity_id
    }
    /// <p>Filter machine learning products by their last modified date.</p>
    pub fn last_modified_date(mut self, input: crate::types::MachineLearningProductLastModifiedDateFilter) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter machine learning products by their last modified date.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<crate::types::MachineLearningProductLastModifiedDateFilter>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>Filter machine learning products by their last modified date.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<crate::types::MachineLearningProductLastModifiedDateFilter> {
        &self.last_modified_date
    }
    /// <p>Filter machine learning products by their product titles.</p>
    pub fn product_title(mut self, input: crate::types::MachineLearningProductTitleFilter) -> Self {
        self.product_title = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter machine learning products by their product titles.</p>
    pub fn set_product_title(mut self, input: ::std::option::Option<crate::types::MachineLearningProductTitleFilter>) -> Self {
        self.product_title = input;
        self
    }
    /// <p>Filter machine learning products by their product titles.</p>
    pub fn get_product_title(&self) -> &::std::option::Option<crate::types::MachineLearningProductTitleFilter> {
        &self.product_title
    }
    /// <p>Filter machine learning products by their visibility status.</p>
    pub fn visibility(mut self, input: crate::types::MachineLearningProductVisibilityFilter) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter machine learning products by their visibility status.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::MachineLearningProductVisibilityFilter>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Filter machine learning products by their visibility status.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::MachineLearningProductVisibilityFilter> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`MachineLearningProductFilters`](crate::types::MachineLearningProductFilters).
    pub fn build(self) -> crate::types::MachineLearningProductFilters {
        crate::types::MachineLearningProductFilters {
            entity_id: self.entity_id,
            last_modified_date: self.last_modified_date,
            product_title: self.product_title,
            visibility: self.visibility,
        }
    }
}
