// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object containing all the filter fields per entity type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EntityTypeFilters {
    /// <p>A filter for AMI products.</p>
    AmiProductFilters(crate::types::AmiProductFilters),
    /// <p>A filter for container products.</p>
    ContainerProductFilters(crate::types::ContainerProductFilters),
    /// <p>A filter for data products.</p>
    DataProductFilters(crate::types::DataProductFilters),
    /// <p>The filters that you can use with the ListEntities operation to filter machine learning products. You can filter by <code>EntityId</code>, <code>astModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    MachineLearningProductFilters(crate::types::MachineLearningProductFilters),
    /// <p>A filter for offers.</p>
    OfferFilters(crate::types::OfferFilters),
    /// <p>A filter for Resale Authorizations.</p>
    ResaleAuthorizationFilters(crate::types::ResaleAuthorizationFilters),
    /// <p>A filter for SaaS products.</p>
    SaaSProductFilters(crate::types::SaaSProductFilters),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EntityTypeFilters {
    /// Tries to convert the enum instance into [`AmiProductFilters`](crate::types::EntityTypeFilters::AmiProductFilters), extracting the inner [`AmiProductFilters`](crate::types::AmiProductFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ami_product_filters(&self) -> ::std::result::Result<&crate::types::AmiProductFilters, &Self> {
        if let EntityTypeFilters::AmiProductFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AmiProductFilters`](crate::types::EntityTypeFilters::AmiProductFilters).
    pub fn is_ami_product_filters(&self) -> bool {
        self.as_ami_product_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`ContainerProductFilters`](crate::types::EntityTypeFilters::ContainerProductFilters), extracting the inner [`ContainerProductFilters`](crate::types::ContainerProductFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_container_product_filters(&self) -> ::std::result::Result<&crate::types::ContainerProductFilters, &Self> {
        if let EntityTypeFilters::ContainerProductFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ContainerProductFilters`](crate::types::EntityTypeFilters::ContainerProductFilters).
    pub fn is_container_product_filters(&self) -> bool {
        self.as_container_product_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`DataProductFilters`](crate::types::EntityTypeFilters::DataProductFilters), extracting the inner [`DataProductFilters`](crate::types::DataProductFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_data_product_filters(&self) -> ::std::result::Result<&crate::types::DataProductFilters, &Self> {
        if let EntityTypeFilters::DataProductFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DataProductFilters`](crate::types::EntityTypeFilters::DataProductFilters).
    pub fn is_data_product_filters(&self) -> bool {
        self.as_data_product_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`MachineLearningProductFilters`](crate::types::EntityTypeFilters::MachineLearningProductFilters), extracting the inner [`MachineLearningProductFilters`](crate::types::MachineLearningProductFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_machine_learning_product_filters(&self) -> ::std::result::Result<&crate::types::MachineLearningProductFilters, &Self> {
        if let EntityTypeFilters::MachineLearningProductFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MachineLearningProductFilters`](crate::types::EntityTypeFilters::MachineLearningProductFilters).
    pub fn is_machine_learning_product_filters(&self) -> bool {
        self.as_machine_learning_product_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`OfferFilters`](crate::types::EntityTypeFilters::OfferFilters), extracting the inner [`OfferFilters`](crate::types::OfferFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_offer_filters(&self) -> ::std::result::Result<&crate::types::OfferFilters, &Self> {
        if let EntityTypeFilters::OfferFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OfferFilters`](crate::types::EntityTypeFilters::OfferFilters).
    pub fn is_offer_filters(&self) -> bool {
        self.as_offer_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`ResaleAuthorizationFilters`](crate::types::EntityTypeFilters::ResaleAuthorizationFilters), extracting the inner [`ResaleAuthorizationFilters`](crate::types::ResaleAuthorizationFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_resale_authorization_filters(&self) -> ::std::result::Result<&crate::types::ResaleAuthorizationFilters, &Self> {
        if let EntityTypeFilters::ResaleAuthorizationFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ResaleAuthorizationFilters`](crate::types::EntityTypeFilters::ResaleAuthorizationFilters).
    pub fn is_resale_authorization_filters(&self) -> bool {
        self.as_resale_authorization_filters().is_ok()
    }
    /// Tries to convert the enum instance into [`SaaSProductFilters`](crate::types::EntityTypeFilters::SaaSProductFilters), extracting the inner [`SaaSProductFilters`](crate::types::SaaSProductFilters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_saa_s_product_filters(&self) -> ::std::result::Result<&crate::types::SaaSProductFilters, &Self> {
        if let EntityTypeFilters::SaaSProductFilters(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SaaSProductFilters`](crate::types::EntityTypeFilters::SaaSProductFilters).
    pub fn is_saa_s_product_filters(&self) -> bool {
        self.as_saa_s_product_filters().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
