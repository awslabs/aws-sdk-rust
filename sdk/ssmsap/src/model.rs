// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The credentials of your SAP application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplicationCredential {
    /// <p>The name of the SAP HANA database.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The type of the application credentials. </p>
    #[doc(hidden)]
    pub credential_type: std::option::Option<crate::model::CredentialType>,
    /// <p>The secret ID created in AWS Secrets Manager to store the credentials of the SAP application. </p>
    #[doc(hidden)]
    pub secret_id: std::option::Option<std::string::String>,
}
impl ApplicationCredential {
    /// <p>The name of the SAP HANA database.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The type of the application credentials. </p>
    pub fn credential_type(&self) -> std::option::Option<&crate::model::CredentialType> {
        self.credential_type.as_ref()
    }
    /// <p>The secret ID created in AWS Secrets Manager to store the credentials of the SAP application. </p>
    pub fn secret_id(&self) -> std::option::Option<&str> {
        self.secret_id.as_deref()
    }
}
impl std::fmt::Debug for ApplicationCredential {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplicationCredential");
        formatter.field("database_name", &self.database_name);
        formatter.field("credential_type", &self.credential_type);
        formatter.field("secret_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ApplicationCredential {
    /// Creates a new builder-style object to manufacture [`ApplicationCredential`](crate::model::ApplicationCredential).
    pub fn builder() -> crate::model::application_credential::Builder {
        crate::model::application_credential::Builder::default()
    }
}

/// See [`ApplicationCredential`](crate::model::ApplicationCredential).
pub mod application_credential {

    /// A builder for [`ApplicationCredential`](crate::model::ApplicationCredential).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) credential_type: std::option::Option<crate::model::CredentialType>,
        pub(crate) secret_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the SAP HANA database.</p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        /// <p>The name of the SAP HANA database.</p>
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>The type of the application credentials. </p>
        pub fn credential_type(mut self, input: crate::model::CredentialType) -> Self {
            self.credential_type = Some(input);
            self
        }
        /// <p>The type of the application credentials. </p>
        pub fn set_credential_type(
            mut self,
            input: std::option::Option<crate::model::CredentialType>,
        ) -> Self {
            self.credential_type = input;
            self
        }
        /// <p>The secret ID created in AWS Secrets Manager to store the credentials of the SAP application. </p>
        pub fn secret_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.secret_id = Some(input.into());
            self
        }
        /// <p>The secret ID created in AWS Secrets Manager to store the credentials of the SAP application. </p>
        pub fn set_secret_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.secret_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplicationCredential`](crate::model::ApplicationCredential).
        pub fn build(self) -> crate::model::ApplicationCredential {
            crate::model::ApplicationCredential {
                database_name: self.database_name,
                credential_type: self.credential_type,
                secret_id: self.secret_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("database_name", &self.database_name);
            formatter.field("credential_type", &self.credential_type);
            formatter.field("secret_id", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}

/// When writing a match expression against `CredentialType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let credentialtype = unimplemented!();
/// match credentialtype {
///     CredentialType::Admin => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `credentialtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CredentialType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CredentialType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CredentialType::NewFeature` is defined.
/// Specifically, when `credentialtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CredentialType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CredentialType {
    #[allow(missing_docs)] // documentation missing in model
    Admin,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for CredentialType {
    fn from(s: &str) -> Self {
        match s {
            "ADMIN" => CredentialType::Admin,
            other => CredentialType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for CredentialType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CredentialType::from(s))
    }
}
impl CredentialType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CredentialType::Admin => "ADMIN",
            CredentialType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ADMIN"]
    }
}
impl AsRef<str> for CredentialType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>An SAP application registered with AWS Systems Manager for SAP.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Application {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of the application.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::ApplicationType>,
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Application Registry.</p>
    #[doc(hidden)]
    pub app_registry_arn: std::option::Option<std::string::String>,
    /// <p>The status of the application.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ApplicationStatus>,
    /// <p>The components of the application.</p>
    #[doc(hidden)]
    pub components: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time at which the application was last updated.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl Application {
    /// <p>The ID of the application.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of the application.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::ApplicationType> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Application Registry.</p>
    pub fn app_registry_arn(&self) -> std::option::Option<&str> {
        self.app_registry_arn.as_deref()
    }
    /// <p>The status of the application.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ApplicationStatus> {
        self.status.as_ref()
    }
    /// <p>The components of the application.</p>
    pub fn components(&self) -> std::option::Option<&[std::string::String]> {
        self.components.as_deref()
    }
    /// <p>The time at which the application was last updated.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>The status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl Application {
    /// Creates a new builder-style object to manufacture [`Application`](crate::model::Application).
    pub fn builder() -> crate::model::application::Builder {
        crate::model::application::Builder::default()
    }
}

/// See [`Application`](crate::model::Application).
pub mod application {

    /// A builder for [`Application`](crate::model::Application).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::ApplicationType>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) app_registry_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ApplicationStatus>,
        pub(crate) components: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the application.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The type of the application.</p>
        pub fn r#type(mut self, input: crate::model::ApplicationType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of the application.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::ApplicationType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Application Registry.</p>
        pub fn app_registry_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.app_registry_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Application Registry.</p>
        pub fn set_app_registry_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.app_registry_arn = input;
            self
        }
        /// <p>The status of the application.</p>
        pub fn status(mut self, input: crate::model::ApplicationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the application.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ApplicationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `components`.
        ///
        /// To override the contents of this collection use [`set_components`](Self::set_components).
        ///
        /// <p>The components of the application.</p>
        pub fn components(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.components.unwrap_or_default();
            v.push(input.into());
            self.components = Some(v);
            self
        }
        /// <p>The components of the application.</p>
        pub fn set_components(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.components = input;
            self
        }
        /// <p>The time at which the application was last updated.</p>
        pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated = Some(input);
            self
        }
        /// <p>The time at which the application was last updated.</p>
        pub fn set_last_updated(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated = input;
            self
        }
        /// <p>The status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Consumes the builder and constructs a [`Application`](crate::model::Application).
        pub fn build(self) -> crate::model::Application {
            crate::model::Application {
                id: self.id,
                r#type: self.r#type,
                arn: self.arn,
                app_registry_arn: self.app_registry_arn,
                status: self.status,
                components: self.components,
                last_updated: self.last_updated,
                status_message: self.status_message,
            }
        }
    }
}

/// When writing a match expression against `ApplicationStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let applicationstatus = unimplemented!();
/// match applicationstatus {
///     ApplicationStatus::Activated => { /* ... */ },
///     ApplicationStatus::Deleting => { /* ... */ },
///     ApplicationStatus::Failed => { /* ... */ },
///     ApplicationStatus::Registering => { /* ... */ },
///     ApplicationStatus::Starting => { /* ... */ },
///     ApplicationStatus::Stopped => { /* ... */ },
///     ApplicationStatus::Stopping => { /* ... */ },
///     ApplicationStatus::UnknownValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `applicationstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ApplicationStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ApplicationStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ApplicationStatus::NewFeature` is defined.
/// Specifically, when `applicationstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ApplicationStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `ApplicationStatus::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ApplicationStatus {
    #[allow(missing_docs)] // documentation missing in model
    Activated,
    #[allow(missing_docs)] // documentation missing in model
    Deleting,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Registering,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ApplicationStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVATED" => ApplicationStatus::Activated,
            "DELETING" => ApplicationStatus::Deleting,
            "FAILED" => ApplicationStatus::Failed,
            "REGISTERING" => ApplicationStatus::Registering,
            "STARTING" => ApplicationStatus::Starting,
            "STOPPED" => ApplicationStatus::Stopped,
            "STOPPING" => ApplicationStatus::Stopping,
            "UNKNOWN" => ApplicationStatus::UnknownValue,
            other => {
                ApplicationStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ApplicationStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ApplicationStatus::from(s))
    }
}
impl ApplicationStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ApplicationStatus::Activated => "ACTIVATED",
            ApplicationStatus::Deleting => "DELETING",
            ApplicationStatus::Failed => "FAILED",
            ApplicationStatus::Registering => "REGISTERING",
            ApplicationStatus::Starting => "STARTING",
            ApplicationStatus::Stopped => "STOPPED",
            ApplicationStatus::Stopping => "STOPPING",
            ApplicationStatus::UnknownValue => "UNKNOWN",
            ApplicationStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACTIVATED",
            "DELETING",
            "FAILED",
            "REGISTERING",
            "STARTING",
            "STOPPED",
            "STOPPING",
            "UNKNOWN",
        ]
    }
}
impl AsRef<str> for ApplicationStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ApplicationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let applicationtype = unimplemented!();
/// match applicationtype {
///     ApplicationType::Hana => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `applicationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ApplicationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ApplicationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ApplicationType::NewFeature` is defined.
/// Specifically, when `applicationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ApplicationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ApplicationType {
    #[allow(missing_docs)] // documentation missing in model
    Hana,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ApplicationType {
    fn from(s: &str) -> Self {
        match s {
            "HANA" => ApplicationType::Hana,
            other => ApplicationType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ApplicationType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ApplicationType::from(s))
    }
}
impl ApplicationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ApplicationType::Hana => "HANA",
            ApplicationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["HANA"]
    }
}
impl AsRef<str> for ApplicationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `PermissionActionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let permissionactiontype = unimplemented!();
/// match permissionactiontype {
///     PermissionActionType::Restore => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `permissionactiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `PermissionActionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `PermissionActionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `PermissionActionType::NewFeature` is defined.
/// Specifically, when `permissionactiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `PermissionActionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum PermissionActionType {
    #[allow(missing_docs)] // documentation missing in model
    Restore,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for PermissionActionType {
    fn from(s: &str) -> Self {
        match s {
            "RESTORE" => PermissionActionType::Restore,
            other => {
                PermissionActionType::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for PermissionActionType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(PermissionActionType::from(s))
    }
}
impl PermissionActionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            PermissionActionType::Restore => "RESTORE",
            PermissionActionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["RESTORE"]
    }
}
impl AsRef<str> for PermissionActionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The operations performed by AWS Systems Manager for SAP.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Operation {
    /// <p>The ID of the operation.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of the operation.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The status of the operation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::OperationStatus>,
    /// <p>The status message of the operation.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The properties of the operation.</p>
    #[doc(hidden)]
    pub properties: std::option::Option<
        std::collections::HashMap<std::string::String, std::option::Option<std::string::String>>,
    >,
    /// <p>The resource type of the operation.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The resource ID of the operation.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the operation.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The start time of the operation.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end time of the operation.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the operation was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Operation {
    /// <p>The ID of the operation.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of the operation.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The status of the operation.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>The status message of the operation.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The properties of the operation.</p>
    pub fn properties(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::option::Option<std::string::String>>,
    > {
        self.properties.as_ref()
    }
    /// <p>The resource type of the operation.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The resource ID of the operation.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the operation.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The start time of the operation.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the operation.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The time at which the operation was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl Operation {
    /// Creates a new builder-style object to manufacture [`Operation`](crate::model::Operation).
    pub fn builder() -> crate::model::operation::Builder {
        crate::model::operation::Builder::default()
    }
}

/// See [`Operation`](crate::model::Operation).
pub mod operation {

    /// A builder for [`Operation`](crate::model::Operation).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::OperationStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) properties: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::option::Option<std::string::String>,
            >,
        >,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) resource_id: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The ID of the operation.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The ID of the operation.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The type of the operation.</p>
        pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
            self.r#type = Some(input.into());
            self
        }
        /// <p>The type of the operation.</p>
        pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The status of the operation.</p>
        pub fn status(mut self, input: crate::model::OperationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the operation.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::OperationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message of the operation.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message of the operation.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Adds a key-value pair to `properties`.
        ///
        /// To override the contents of this collection use [`set_properties`](Self::set_properties).
        ///
        /// <p>The properties of the operation.</p>
        pub fn properties(
            mut self,
            k: impl Into<std::string::String>,
            v: std::option::Option<std::string::String>,
        ) -> Self {
            let mut hash_map = self.properties.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.properties = Some(hash_map);
            self
        }
        /// <p>The properties of the operation.</p>
        pub fn set_properties(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    std::string::String,
                    std::option::Option<std::string::String>,
                >,
            >,
        ) -> Self {
            self.properties = input;
            self
        }
        /// <p>The resource type of the operation.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        /// <p>The resource type of the operation.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The resource ID of the operation.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_id = Some(input.into());
            self
        }
        /// <p>The resource ID of the operation.</p>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the operation.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the operation.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The start time of the operation.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The start time of the operation.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The end time of the operation.</p>
        pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.end_time = Some(input);
            self
        }
        /// <p>The end time of the operation.</p>
        pub fn set_end_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.end_time = input;
            self
        }
        /// <p>The time at which the operation was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The time at which the operation was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// Consumes the builder and constructs a [`Operation`](crate::model::Operation).
        pub fn build(self) -> crate::model::Operation {
            crate::model::Operation {
                id: self.id,
                r#type: self.r#type,
                status: self.status,
                status_message: self.status_message,
                properties: self.properties,
                resource_type: self.resource_type,
                resource_id: self.resource_id,
                resource_arn: self.resource_arn,
                start_time: self.start_time,
                end_time: self.end_time,
                last_updated_time: self.last_updated_time,
            }
        }
    }
}

/// When writing a match expression against `OperationStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let operationstatus = unimplemented!();
/// match operationstatus {
///     OperationStatus::Error => { /* ... */ },
///     OperationStatus::Inprogress => { /* ... */ },
///     OperationStatus::Success => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `operationstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `OperationStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `OperationStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `OperationStatus::NewFeature` is defined.
/// Specifically, when `operationstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `OperationStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum OperationStatus {
    #[allow(missing_docs)] // documentation missing in model
    Error,
    #[allow(missing_docs)] // documentation missing in model
    Inprogress,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for OperationStatus {
    fn from(s: &str) -> Self {
        match s {
            "ERROR" => OperationStatus::Error,
            "INPROGRESS" => OperationStatus::Inprogress,
            "SUCCESS" => OperationStatus::Success,
            other => OperationStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for OperationStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(OperationStatus::from(s))
    }
}
impl OperationStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            OperationStatus::Error => "ERROR",
            OperationStatus::Inprogress => "INPROGRESS",
            OperationStatus::Success => "SUCCESS",
            OperationStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ERROR", "INPROGRESS", "SUCCESS"]
    }
}
impl AsRef<str> for OperationStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A specific result obtained by specifying the name, value, and operator. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Filter {
    /// <p>The name of the filter. Filter names are case-sensitive. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The operator for the filter. </p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::model::FilterOperator>,
}
impl Filter {
    /// <p>The name of the filter. Filter names are case-sensitive. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The operator for the filter. </p>
    pub fn operator(&self) -> std::option::Option<&crate::model::FilterOperator> {
        self.operator.as_ref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::model::Filter).
    pub fn builder() -> crate::model::filter::Builder {
        crate::model::filter::Builder::default()
    }
}

/// See [`Filter`](crate::model::Filter).
pub mod filter {

    /// A builder for [`Filter`](crate::model::Filter).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
        pub(crate) operator: std::option::Option<crate::model::FilterOperator>,
    }
    impl Builder {
        /// <p>The name of the filter. Filter names are case-sensitive. </p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the filter. Filter names are case-sensitive. </p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// <p>The operator for the filter. </p>
        pub fn operator(mut self, input: crate::model::FilterOperator) -> Self {
            self.operator = Some(input);
            self
        }
        /// <p>The operator for the filter. </p>
        pub fn set_operator(
            mut self,
            input: std::option::Option<crate::model::FilterOperator>,
        ) -> Self {
            self.operator = input;
            self
        }
        /// Consumes the builder and constructs a [`Filter`](crate::model::Filter).
        pub fn build(self) -> crate::model::Filter {
            crate::model::Filter {
                name: self.name,
                value: self.value,
                operator: self.operator,
            }
        }
    }
}

/// When writing a match expression against `FilterOperator`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let filteroperator = unimplemented!();
/// match filteroperator {
///     FilterOperator::Equals => { /* ... */ },
///     FilterOperator::GreaterThanOrEquals => { /* ... */ },
///     FilterOperator::LessThanOrEquals => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `filteroperator` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FilterOperator::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FilterOperator::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FilterOperator::NewFeature` is defined.
/// Specifically, when `filteroperator` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FilterOperator::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum FilterOperator {
    #[allow(missing_docs)] // documentation missing in model
    Equals,
    #[allow(missing_docs)] // documentation missing in model
    GreaterThanOrEquals,
    #[allow(missing_docs)] // documentation missing in model
    LessThanOrEquals,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for FilterOperator {
    fn from(s: &str) -> Self {
        match s {
            "Equals" => FilterOperator::Equals,
            "GreaterThanOrEquals" => FilterOperator::GreaterThanOrEquals,
            "LessThanOrEquals" => FilterOperator::LessThanOrEquals,
            other => FilterOperator::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for FilterOperator {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(FilterOperator::from(s))
    }
}
impl FilterOperator {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FilterOperator::Equals => "Equals",
            FilterOperator::GreaterThanOrEquals => "GreaterThanOrEquals",
            FilterOperator::LessThanOrEquals => "LessThanOrEquals",
            FilterOperator::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["Equals", "GreaterThanOrEquals", "LessThanOrEquals"]
    }
}
impl AsRef<str> for FilterOperator {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The summary of the database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatabaseSummary {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the component.</p>
    #[doc(hidden)]
    pub component_id: std::option::Option<std::string::String>,
    /// <p>The ID of the database.</p>
    #[doc(hidden)]
    pub database_id: std::option::Option<std::string::String>,
    /// <p>The type of the database.</p>
    #[doc(hidden)]
    pub database_type: std::option::Option<crate::model::DatabaseType>,
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The tags of the database.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DatabaseSummary {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the component.</p>
    pub fn component_id(&self) -> std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The ID of the database.</p>
    pub fn database_id(&self) -> std::option::Option<&str> {
        self.database_id.as_deref()
    }
    /// <p>The type of the database.</p>
    pub fn database_type(&self) -> std::option::Option<&crate::model::DatabaseType> {
        self.database_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The tags of the database.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl DatabaseSummary {
    /// Creates a new builder-style object to manufacture [`DatabaseSummary`](crate::model::DatabaseSummary).
    pub fn builder() -> crate::model::database_summary::Builder {
        crate::model::database_summary::Builder::default()
    }
}

/// See [`DatabaseSummary`](crate::model::DatabaseSummary).
pub mod database_summary {

    /// A builder for [`DatabaseSummary`](crate::model::DatabaseSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_id: std::option::Option<std::string::String>,
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) database_id: std::option::Option<std::string::String>,
        pub(crate) database_type: std::option::Option<crate::model::DatabaseType>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The ID of the application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_id = input;
            self
        }
        /// <p>The ID of the component.</p>
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        /// <p>The ID of the component.</p>
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// <p>The ID of the database.</p>
        pub fn database_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_id = Some(input.into());
            self
        }
        /// <p>The ID of the database.</p>
        pub fn set_database_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.database_id = input;
            self
        }
        /// <p>The type of the database.</p>
        pub fn database_type(mut self, input: crate::model::DatabaseType) -> Self {
            self.database_type = Some(input);
            self
        }
        /// <p>The type of the database.</p>
        pub fn set_database_type(
            mut self,
            input: std::option::Option<crate::model::DatabaseType>,
        ) -> Self {
            self.database_type = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the database.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the database.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the database.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the database.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`DatabaseSummary`](crate::model::DatabaseSummary).
        pub fn build(self) -> crate::model::DatabaseSummary {
            crate::model::DatabaseSummary {
                application_id: self.application_id,
                component_id: self.component_id,
                database_id: self.database_id,
                database_type: self.database_type,
                arn: self.arn,
                tags: self.tags,
            }
        }
    }
}

/// When writing a match expression against `DatabaseType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let databasetype = unimplemented!();
/// match databasetype {
///     DatabaseType::System => { /* ... */ },
///     DatabaseType::Tenant => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `databasetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DatabaseType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DatabaseType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DatabaseType::NewFeature` is defined.
/// Specifically, when `databasetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DatabaseType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DatabaseType {
    #[allow(missing_docs)] // documentation missing in model
    System,
    #[allow(missing_docs)] // documentation missing in model
    Tenant,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for DatabaseType {
    fn from(s: &str) -> Self {
        match s {
            "SYSTEM" => DatabaseType::System,
            "TENANT" => DatabaseType::Tenant,
            other => DatabaseType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for DatabaseType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DatabaseType::from(s))
    }
}
impl DatabaseType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DatabaseType::System => "SYSTEM",
            DatabaseType::Tenant => "TENANT",
            DatabaseType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["SYSTEM", "TENANT"]
    }
}
impl AsRef<str> for DatabaseType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The summary of the component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentSummary {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the component.</p>
    #[doc(hidden)]
    pub component_id: std::option::Option<std::string::String>,
    /// <p>The type of the component.</p>
    #[doc(hidden)]
    pub component_type: std::option::Option<crate::model::ComponentType>,
    /// <p>The tags of the component.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ComponentSummary {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the component.</p>
    pub fn component_id(&self) -> std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The type of the component.</p>
    pub fn component_type(&self) -> std::option::Option<&crate::model::ComponentType> {
        self.component_type.as_ref()
    }
    /// <p>The tags of the component.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ComponentSummary {
    /// Creates a new builder-style object to manufacture [`ComponentSummary`](crate::model::ComponentSummary).
    pub fn builder() -> crate::model::component_summary::Builder {
        crate::model::component_summary::Builder::default()
    }
}

/// See [`ComponentSummary`](crate::model::ComponentSummary).
pub mod component_summary {

    /// A builder for [`ComponentSummary`](crate::model::ComponentSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_id: std::option::Option<std::string::String>,
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) component_type: std::option::Option<crate::model::ComponentType>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The ID of the application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_id = input;
            self
        }
        /// <p>The ID of the component.</p>
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        /// <p>The ID of the component.</p>
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// <p>The type of the component.</p>
        pub fn component_type(mut self, input: crate::model::ComponentType) -> Self {
            self.component_type = Some(input);
            self
        }
        /// <p>The type of the component.</p>
        pub fn set_component_type(
            mut self,
            input: std::option::Option<crate::model::ComponentType>,
        ) -> Self {
            self.component_type = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the component.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the component.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ComponentSummary`](crate::model::ComponentSummary).
        pub fn build(self) -> crate::model::ComponentSummary {
            crate::model::ComponentSummary {
                application_id: self.application_id,
                component_id: self.component_id,
                component_type: self.component_type,
                tags: self.tags,
            }
        }
    }
}

/// When writing a match expression against `ComponentType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let componenttype = unimplemented!();
/// match componenttype {
///     ComponentType::Hana => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `componenttype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ComponentType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ComponentType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ComponentType::NewFeature` is defined.
/// Specifically, when `componenttype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ComponentType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ComponentType {
    #[allow(missing_docs)] // documentation missing in model
    Hana,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ComponentType {
    fn from(s: &str) -> Self {
        match s {
            "HANA" => ComponentType::Hana,
            other => ComponentType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ComponentType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ComponentType::from(s))
    }
}
impl ComponentType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ComponentType::Hana => "HANA",
            ComponentType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["HANA"]
    }
}
impl AsRef<str> for ComponentType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The summary of the SAP application registered with AWS Systems Manager for SAP. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of the application.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::ApplicationType>,
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The tags on the application.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ApplicationSummary {
    /// <p>The ID of the application.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of the application.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::ApplicationType> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The tags on the application.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::model::ApplicationSummary).
    pub fn builder() -> crate::model::application_summary::Builder {
        crate::model::application_summary::Builder::default()
    }
}

/// See [`ApplicationSummary`](crate::model::ApplicationSummary).
pub mod application_summary {

    /// A builder for [`ApplicationSummary`](crate::model::ApplicationSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::ApplicationType>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The ID of the application.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The type of the application.</p>
        pub fn r#type(mut self, input: crate::model::ApplicationType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of the application.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::ApplicationType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags on the application.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags on the application.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplicationSummary`](crate::model::ApplicationSummary).
        pub fn build(self) -> crate::model::ApplicationSummary {
            crate::model::ApplicationSummary {
                id: self.id,
                r#type: self.r#type,
                arn: self.arn,
                tags: self.tags,
            }
        }
    }
}

/// <p>The SAP HANA database of the application registered with AWS Systems Manager for SAP.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Database {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the component.</p>
    #[doc(hidden)]
    pub component_id: std::option::Option<std::string::String>,
    /// <p>The credentials of the database.</p>
    #[doc(hidden)]
    pub credentials: std::option::Option<std::vec::Vec<crate::model::ApplicationCredential>>,
    /// <p>The ID of the SAP HANA database.</p>
    #[doc(hidden)]
    pub database_id: std::option::Option<std::string::String>,
    /// <p>The name of the database.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The type of the database.</p>
    #[doc(hidden)]
    pub database_type: std::option::Option<crate::model::DatabaseType>,
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The status of the database.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::DatabaseStatus>,
    /// <p>The primary host of the database.</p>
    #[doc(hidden)]
    pub primary_host: std::option::Option<std::string::String>,
    /// <p>The SQL port of the database.</p>
    #[doc(hidden)]
    pub sql_port: std::option::Option<i32>,
    /// <p>The time at which the database was last updated.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
}
impl Database {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the component.</p>
    pub fn component_id(&self) -> std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The credentials of the database.</p>
    pub fn credentials(&self) -> std::option::Option<&[crate::model::ApplicationCredential]> {
        self.credentials.as_deref()
    }
    /// <p>The ID of the SAP HANA database.</p>
    pub fn database_id(&self) -> std::option::Option<&str> {
        self.database_id.as_deref()
    }
    /// <p>The name of the database.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The type of the database.</p>
    pub fn database_type(&self) -> std::option::Option<&crate::model::DatabaseType> {
        self.database_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the database.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::DatabaseStatus> {
        self.status.as_ref()
    }
    /// <p>The primary host of the database.</p>
    pub fn primary_host(&self) -> std::option::Option<&str> {
        self.primary_host.as_deref()
    }
    /// <p>The SQL port of the database.</p>
    pub fn sql_port(&self) -> std::option::Option<i32> {
        self.sql_port
    }
    /// <p>The time at which the database was last updated.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
}
impl Database {
    /// Creates a new builder-style object to manufacture [`Database`](crate::model::Database).
    pub fn builder() -> crate::model::database::Builder {
        crate::model::database::Builder::default()
    }
}

/// See [`Database`](crate::model::Database).
pub mod database {

    /// A builder for [`Database`](crate::model::Database).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_id: std::option::Option<std::string::String>,
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) credentials:
            std::option::Option<std::vec::Vec<crate::model::ApplicationCredential>>,
        pub(crate) database_id: std::option::Option<std::string::String>,
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) database_type: std::option::Option<crate::model::DatabaseType>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::DatabaseStatus>,
        pub(crate) primary_host: std::option::Option<std::string::String>,
        pub(crate) sql_port: std::option::Option<i32>,
        pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The ID of the application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_id = input;
            self
        }
        /// <p>The ID of the component.</p>
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        /// <p>The ID of the component.</p>
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// Appends an item to `credentials`.
        ///
        /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
        ///
        /// <p>The credentials of the database.</p>
        pub fn credentials(mut self, input: crate::model::ApplicationCredential) -> Self {
            let mut v = self.credentials.unwrap_or_default();
            v.push(input);
            self.credentials = Some(v);
            self
        }
        /// <p>The credentials of the database.</p>
        pub fn set_credentials(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ApplicationCredential>>,
        ) -> Self {
            self.credentials = input;
            self
        }
        /// <p>The ID of the SAP HANA database.</p>
        pub fn database_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_id = Some(input.into());
            self
        }
        /// <p>The ID of the SAP HANA database.</p>
        pub fn set_database_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.database_id = input;
            self
        }
        /// <p>The name of the database.</p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        /// <p>The name of the database.</p>
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>The type of the database.</p>
        pub fn database_type(mut self, input: crate::model::DatabaseType) -> Self {
            self.database_type = Some(input);
            self
        }
        /// <p>The type of the database.</p>
        pub fn set_database_type(
            mut self,
            input: std::option::Option<crate::model::DatabaseType>,
        ) -> Self {
            self.database_type = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the database.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the database.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The status of the database.</p>
        pub fn status(mut self, input: crate::model::DatabaseStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the database.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DatabaseStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The primary host of the database.</p>
        pub fn primary_host(mut self, input: impl Into<std::string::String>) -> Self {
            self.primary_host = Some(input.into());
            self
        }
        /// <p>The primary host of the database.</p>
        pub fn set_primary_host(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.primary_host = input;
            self
        }
        /// <p>The SQL port of the database.</p>
        pub fn sql_port(mut self, input: i32) -> Self {
            self.sql_port = Some(input);
            self
        }
        /// <p>The SQL port of the database.</p>
        pub fn set_sql_port(mut self, input: std::option::Option<i32>) -> Self {
            self.sql_port = input;
            self
        }
        /// <p>The time at which the database was last updated.</p>
        pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated = Some(input);
            self
        }
        /// <p>The time at which the database was last updated.</p>
        pub fn set_last_updated(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated = input;
            self
        }
        /// Consumes the builder and constructs a [`Database`](crate::model::Database).
        pub fn build(self) -> crate::model::Database {
            crate::model::Database {
                application_id: self.application_id,
                component_id: self.component_id,
                credentials: self.credentials,
                database_id: self.database_id,
                database_name: self.database_name,
                database_type: self.database_type,
                arn: self.arn,
                status: self.status,
                primary_host: self.primary_host,
                sql_port: self.sql_port,
                last_updated: self.last_updated,
            }
        }
    }
}

/// When writing a match expression against `DatabaseStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let databasestatus = unimplemented!();
/// match databasestatus {
///     DatabaseStatus::Running => { /* ... */ },
///     DatabaseStatus::Starting => { /* ... */ },
///     DatabaseStatus::Stopped => { /* ... */ },
///     DatabaseStatus::UnknownValue => { /* ... */ },
///     DatabaseStatus::Warning => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `databasestatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DatabaseStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DatabaseStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DatabaseStatus::NewFeature` is defined.
/// Specifically, when `databasestatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DatabaseStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `DatabaseStatus::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DatabaseStatus {
    #[allow(missing_docs)] // documentation missing in model
    Running,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    Warning,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for DatabaseStatus {
    fn from(s: &str) -> Self {
        match s {
            "RUNNING" => DatabaseStatus::Running,
            "STARTING" => DatabaseStatus::Starting,
            "STOPPED" => DatabaseStatus::Stopped,
            "UNKNOWN" => DatabaseStatus::UnknownValue,
            "WARNING" => DatabaseStatus::Warning,
            other => DatabaseStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for DatabaseStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DatabaseStatus::from(s))
    }
}
impl DatabaseStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DatabaseStatus::Running => "RUNNING",
            DatabaseStatus::Starting => "STARTING",
            DatabaseStatus::Stopped => "STOPPED",
            DatabaseStatus::UnknownValue => "UNKNOWN",
            DatabaseStatus::Warning => "WARNING",
            DatabaseStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["RUNNING", "STARTING", "STOPPED", "UNKNOWN", "WARNING"]
    }
}
impl AsRef<str> for DatabaseStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The SAP component of your application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Component {
    /// <p>The ID of the component.</p>
    #[doc(hidden)]
    pub component_id: std::option::Option<std::string::String>,
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The type of the component.</p>
    #[doc(hidden)]
    pub component_type: std::option::Option<crate::model::ComponentType>,
    /// <p>The status of the component.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ComponentStatus>,
    /// <p>The SAP HANA databases of the component.</p>
    #[doc(hidden)]
    pub databases: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The hosts of the component.</p>
    #[doc(hidden)]
    pub hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
    /// <p>The primary host of the component.</p>
    #[doc(hidden)]
    pub primary_host: std::option::Option<std::string::String>,
    /// <p>The time at which the component was last updated.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
}
impl Component {
    /// <p>The ID of the component.</p>
    pub fn component_id(&self) -> std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The type of the component.</p>
    pub fn component_type(&self) -> std::option::Option<&crate::model::ComponentType> {
        self.component_type.as_ref()
    }
    /// <p>The status of the component.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ComponentStatus> {
        self.status.as_ref()
    }
    /// <p>The SAP HANA databases of the component.</p>
    pub fn databases(&self) -> std::option::Option<&[std::string::String]> {
        self.databases.as_deref()
    }
    /// <p>The hosts of the component.</p>
    pub fn hosts(&self) -> std::option::Option<&[crate::model::Host]> {
        self.hosts.as_deref()
    }
    /// <p>The primary host of the component.</p>
    pub fn primary_host(&self) -> std::option::Option<&str> {
        self.primary_host.as_deref()
    }
    /// <p>The time at which the component was last updated.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
}
impl Component {
    /// Creates a new builder-style object to manufacture [`Component`](crate::model::Component).
    pub fn builder() -> crate::model::component::Builder {
        crate::model::component::Builder::default()
    }
}

/// See [`Component`](crate::model::Component).
pub mod component {

    /// A builder for [`Component`](crate::model::Component).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) component_id: std::option::Option<std::string::String>,
        pub(crate) application_id: std::option::Option<std::string::String>,
        pub(crate) component_type: std::option::Option<crate::model::ComponentType>,
        pub(crate) status: std::option::Option<crate::model::ComponentStatus>,
        pub(crate) databases: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
        pub(crate) primary_host: std::option::Option<std::string::String>,
        pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The ID of the component.</p>
        pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_id = Some(input.into());
            self
        }
        /// <p>The ID of the component.</p>
        pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.component_id = input;
            self
        }
        /// <p>The ID of the application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_id = Some(input.into());
            self
        }
        /// <p>The ID of the application.</p>
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_id = input;
            self
        }
        /// <p>The type of the component.</p>
        pub fn component_type(mut self, input: crate::model::ComponentType) -> Self {
            self.component_type = Some(input);
            self
        }
        /// <p>The type of the component.</p>
        pub fn set_component_type(
            mut self,
            input: std::option::Option<crate::model::ComponentType>,
        ) -> Self {
            self.component_type = input;
            self
        }
        /// <p>The status of the component.</p>
        pub fn status(mut self, input: crate::model::ComponentStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the component.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ComponentStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `databases`.
        ///
        /// To override the contents of this collection use [`set_databases`](Self::set_databases).
        ///
        /// <p>The SAP HANA databases of the component.</p>
        pub fn databases(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.databases.unwrap_or_default();
            v.push(input.into());
            self.databases = Some(v);
            self
        }
        /// <p>The SAP HANA databases of the component.</p>
        pub fn set_databases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.databases = input;
            self
        }
        /// Appends an item to `hosts`.
        ///
        /// To override the contents of this collection use [`set_hosts`](Self::set_hosts).
        ///
        /// <p>The hosts of the component.</p>
        pub fn hosts(mut self, input: crate::model::Host) -> Self {
            let mut v = self.hosts.unwrap_or_default();
            v.push(input);
            self.hosts = Some(v);
            self
        }
        /// <p>The hosts of the component.</p>
        pub fn set_hosts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Host>>,
        ) -> Self {
            self.hosts = input;
            self
        }
        /// <p>The primary host of the component.</p>
        pub fn primary_host(mut self, input: impl Into<std::string::String>) -> Self {
            self.primary_host = Some(input.into());
            self
        }
        /// <p>The primary host of the component.</p>
        pub fn set_primary_host(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.primary_host = input;
            self
        }
        /// <p>The time at which the component was last updated.</p>
        pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated = Some(input);
            self
        }
        /// <p>The time at which the component was last updated.</p>
        pub fn set_last_updated(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated = input;
            self
        }
        /// Consumes the builder and constructs a [`Component`](crate::model::Component).
        pub fn build(self) -> crate::model::Component {
            crate::model::Component {
                component_id: self.component_id,
                application_id: self.application_id,
                component_type: self.component_type,
                status: self.status,
                databases: self.databases,
                hosts: self.hosts,
                primary_host: self.primary_host,
                last_updated: self.last_updated,
            }
        }
    }
}

/// <p>Describes the properties of the Dedicated Host. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Host {
    /// <p>The name of the Dedicated Host.</p>
    #[doc(hidden)]
    pub host_name: std::option::Option<std::string::String>,
    /// <p>The role of the Dedicated Host.</p>
    #[doc(hidden)]
    pub host_role: std::option::Option<crate::model::HostRole>,
    /// <p>The IP address of the Dedicated Host. </p>
    #[doc(hidden)]
    pub host_ip: std::option::Option<std::string::String>,
    /// <p>The instance ID of the instance on the Dedicated Host.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
}
impl Host {
    /// <p>The name of the Dedicated Host.</p>
    pub fn host_name(&self) -> std::option::Option<&str> {
        self.host_name.as_deref()
    }
    /// <p>The role of the Dedicated Host.</p>
    pub fn host_role(&self) -> std::option::Option<&crate::model::HostRole> {
        self.host_role.as_ref()
    }
    /// <p>The IP address of the Dedicated Host. </p>
    pub fn host_ip(&self) -> std::option::Option<&str> {
        self.host_ip.as_deref()
    }
    /// <p>The instance ID of the instance on the Dedicated Host.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
}
impl Host {
    /// Creates a new builder-style object to manufacture [`Host`](crate::model::Host).
    pub fn builder() -> crate::model::host::Builder {
        crate::model::host::Builder::default()
    }
}

/// See [`Host`](crate::model::Host).
pub mod host {

    /// A builder for [`Host`](crate::model::Host).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_name: std::option::Option<std::string::String>,
        pub(crate) host_role: std::option::Option<crate::model::HostRole>,
        pub(crate) host_ip: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the Dedicated Host.</p>
        pub fn host_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.host_name = Some(input.into());
            self
        }
        /// <p>The name of the Dedicated Host.</p>
        pub fn set_host_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.host_name = input;
            self
        }
        /// <p>The role of the Dedicated Host.</p>
        pub fn host_role(mut self, input: crate::model::HostRole) -> Self {
            self.host_role = Some(input);
            self
        }
        /// <p>The role of the Dedicated Host.</p>
        pub fn set_host_role(mut self, input: std::option::Option<crate::model::HostRole>) -> Self {
            self.host_role = input;
            self
        }
        /// <p>The IP address of the Dedicated Host. </p>
        pub fn host_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.host_ip = Some(input.into());
            self
        }
        /// <p>The IP address of the Dedicated Host. </p>
        pub fn set_host_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.host_ip = input;
            self
        }
        /// <p>The instance ID of the instance on the Dedicated Host.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The instance ID of the instance on the Dedicated Host.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// Consumes the builder and constructs a [`Host`](crate::model::Host).
        pub fn build(self) -> crate::model::Host {
            crate::model::Host {
                host_name: self.host_name,
                host_role: self.host_role,
                host_ip: self.host_ip,
                instance_id: self.instance_id,
            }
        }
    }
}

/// When writing a match expression against `HostRole`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let hostrole = unimplemented!();
/// match hostrole {
///     HostRole::Leader => { /* ... */ },
///     HostRole::Standby => { /* ... */ },
///     HostRole::UnknownValue => { /* ... */ },
///     HostRole::Worker => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `hostrole` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `HostRole::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `HostRole::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `HostRole::NewFeature` is defined.
/// Specifically, when `hostrole` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `HostRole::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `HostRole::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum HostRole {
    #[allow(missing_docs)] // documentation missing in model
    Leader,
    #[allow(missing_docs)] // documentation missing in model
    Standby,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    Worker,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for HostRole {
    fn from(s: &str) -> Self {
        match s {
            "LEADER" => HostRole::Leader,
            "STANDBY" => HostRole::Standby,
            "UNKNOWN" => HostRole::UnknownValue,
            "WORKER" => HostRole::Worker,
            other => HostRole::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for HostRole {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(HostRole::from(s))
    }
}
impl HostRole {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            HostRole::Leader => "LEADER",
            HostRole::Standby => "STANDBY",
            HostRole::UnknownValue => "UNKNOWN",
            HostRole::Worker => "WORKER",
            HostRole::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["LEADER", "STANDBY", "UNKNOWN", "WORKER"]
    }
}
impl AsRef<str> for HostRole {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ComponentStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let componentstatus = unimplemented!();
/// match componentstatus {
///     ComponentStatus::Activated => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `componentstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ComponentStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ComponentStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ComponentStatus::NewFeature` is defined.
/// Specifically, when `componentstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ComponentStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ComponentStatus {
    #[allow(missing_docs)] // documentation missing in model
    Activated,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ComponentStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVATED" => ComponentStatus::Activated,
            other => ComponentStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ComponentStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ComponentStatus::from(s))
    }
}
impl ComponentStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ComponentStatus::Activated => "ACTIVATED",
            ComponentStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ACTIVATED"]
    }
}
impl AsRef<str> for ComponentStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
