// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_application::_register_application_output::RegisterApplicationOutputBuilder;

pub use crate::operation::register_application::_register_application_input::RegisterApplicationInputBuilder;

impl crate::operation::register_application::builders::RegisterApplicationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::register_application::RegisterApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_application::RegisterApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.register_application();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RegisterApplication`.
///
/// <p>Register an SAP application with AWS Systems Manager for SAP. You must meet the following requirements before registering.</p>
/// <p>The SAP application you want to register with AWS Systems Manager for SAP is running on Amazon EC2.</p>
/// <p>AWS Systems Manager Agent must be setup on an Amazon EC2 instance along with the required IAM permissions.</p>
/// <p>Amazon EC2 instance(s) must have access to the secrets created in AWS Secrets Manager to manage SAP applications and components.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterApplicationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_application::builders::RegisterApplicationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::register_application::RegisterApplicationOutput,
        crate::operation::register_application::RegisterApplicationError,
    > for RegisterApplicationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::register_application::RegisterApplicationOutput,
            crate::operation::register_application::RegisterApplicationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RegisterApplicationFluentBuilder {
    /// Creates a new `RegisterApplication`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RegisterApplication as a reference.
    pub fn as_input(&self) -> &crate::operation::register_application::builders::RegisterApplicationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_application::RegisterApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_application::RegisterApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::register_application::RegisterApplication::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::register_application::RegisterApplication::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::register_application::RegisterApplicationOutput,
        crate::operation::register_application::RegisterApplicationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// <p>The type of the application.</p>
    pub fn application_type(mut self, input: crate::types::ApplicationType) -> Self {
        self.inner = self.inner.application_type(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn set_application_type(mut self, input: ::std::option::Option<crate::types::ApplicationType>) -> Self {
        self.inner = self.inner.set_application_type(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn get_application_type(&self) -> &::std::option::Option<crate::types::ApplicationType> {
        self.inner.get_application_type()
    }
    ///
    /// Appends an item to `Instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn instances(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instances(input.into());
        self
    }
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn set_instances(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_instances(input);
        self
    }
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn get_instances(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_instances()
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn sap_instance_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sap_instance_number(input.into());
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn set_sap_instance_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_sap_instance_number(input);
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn get_sap_instance_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_sap_instance_number()
    }
    /// <p>The System ID of the application.</p>
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sid(input.into());
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_sid(input);
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_sid()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    ///
    /// Appends an item to `Credentials`.
    ///
    /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
    ///
    /// <p>The credentials of the SAP application.</p>
    pub fn credentials(mut self, input: crate::types::ApplicationCredential) -> Self {
        self.inner = self.inner.credentials(input);
        self
    }
    /// <p>The credentials of the SAP application.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>>) -> Self {
        self.inner = self.inner.set_credentials(input);
        self
    }
    /// <p>The credentials of the SAP application.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>> {
        self.inner.get_credentials()
    }
    /// <p>The Amazon Resource Name of the SAP HANA database.</p>
    pub fn database_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.database_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the SAP HANA database.</p>
    pub fn set_database_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_database_arn(input);
        self
    }
    /// <p>The Amazon Resource Name of the SAP HANA database.</p>
    pub fn get_database_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_database_arn()
    }
}
