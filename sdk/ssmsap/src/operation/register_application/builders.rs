// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_application::_register_application_output::RegisterApplicationOutputBuilder;

pub use crate::operation::register_application::_register_application_input::RegisterApplicationInputBuilder;

/// Fluent builder constructing a request to `RegisterApplication`.
///
/// <p>Register an SAP application with AWS Systems Manager for SAP. You must meet the following requirements before registering. </p>
/// <p>The SAP application you want to register with AWS Systems Manager for SAP is running on Amazon EC2.</p>
/// <p>AWS Systems Manager Agent must be setup on an Amazon EC2 instance along with the required IAM permissions.</p>
/// <p>Amazon EC2 instance(s) must have access to the secrets created in AWS Secrets Manager to manage SAP applications and components.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterApplicationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_application::builders::RegisterApplicationInputBuilder,
}
impl RegisterApplicationFluentBuilder {
    /// Creates a new `RegisterApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::register_application::RegisterApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::register_application::RegisterApplicationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::register_application::RegisterApplicationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::register_application::RegisterApplicationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn application_type(mut self, input: crate::types::ApplicationType) -> Self {
        self.inner = self.inner.application_type(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn set_application_type(
        mut self,
        input: std::option::Option<crate::types::ApplicationType>,
    ) -> Self {
        self.inner = self.inner.set_application_type(input);
        self
    }
    /// Appends an item to `Instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn instances(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instances(input.into());
        self
    }
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn set_instances(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_instances(input);
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn sap_instance_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sap_instance_number(input.into());
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn set_sap_instance_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sap_instance_number(input);
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn sid(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sid(input.into());
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn set_sid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sid(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `Credentials`.
    ///
    /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
    ///
    /// <p>The credentials of the SAP application.</p>
    pub fn credentials(mut self, input: crate::types::ApplicationCredential) -> Self {
        self.inner = self.inner.credentials(input);
        self
    }
    /// <p>The credentials of the SAP application.</p>
    pub fn set_credentials(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ApplicationCredential>>,
    ) -> Self {
        self.inner = self.inner.set_credentials(input);
        self
    }
}
