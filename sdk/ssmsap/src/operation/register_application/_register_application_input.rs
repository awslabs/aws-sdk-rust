// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterApplicationInput {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The type of the application.</p>
    #[doc(hidden)]
    pub application_type: std::option::Option<crate::types::ApplicationType>,
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The SAP instance number of the application.</p>
    #[doc(hidden)]
    pub sap_instance_number: std::option::Option<std::string::String>,
    /// <p>The System ID of the application.</p>
    #[doc(hidden)]
    pub sid: std::option::Option<std::string::String>,
    /// <p>The tags to be attached to the SAP application.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The credentials of the SAP application.</p>
    #[doc(hidden)]
    pub credentials: std::option::Option<std::vec::Vec<crate::types::ApplicationCredential>>,
}
impl RegisterApplicationInput {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The type of the application.</p>
    pub fn application_type(&self) -> std::option::Option<&crate::types::ApplicationType> {
        self.application_type.as_ref()
    }
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn instances(&self) -> std::option::Option<&[std::string::String]> {
        self.instances.as_deref()
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn sap_instance_number(&self) -> std::option::Option<&str> {
        self.sap_instance_number.as_deref()
    }
    /// <p>The System ID of the application.</p>
    pub fn sid(&self) -> std::option::Option<&str> {
        self.sid.as_deref()
    }
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The credentials of the SAP application.</p>
    pub fn credentials(&self) -> std::option::Option<&[crate::types::ApplicationCredential]> {
        self.credentials.as_deref()
    }
}
impl RegisterApplicationInput {
    /// Creates a new builder-style object to manufacture [`RegisterApplicationInput`](crate::operation::register_application::RegisterApplicationInput).
    pub fn builder(
    ) -> crate::operation::register_application::builders::RegisterApplicationInputBuilder {
        crate::operation::register_application::builders::RegisterApplicationInputBuilder::default()
    }
}

/// A builder for [`RegisterApplicationInput`](crate::operation::register_application::RegisterApplicationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterApplicationInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) application_type: std::option::Option<crate::types::ApplicationType>,
    pub(crate) instances: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) sap_instance_number: std::option::Option<std::string::String>,
    pub(crate) sid: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) credentials: std::option::Option<std::vec::Vec<crate::types::ApplicationCredential>>,
}
impl RegisterApplicationInputBuilder {
    /// <p>The ID of the application.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The type of the application.</p>
    pub fn application_type(mut self, input: crate::types::ApplicationType) -> Self {
        self.application_type = Some(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn set_application_type(
        mut self,
        input: std::option::Option<crate::types::ApplicationType>,
    ) -> Self {
        self.application_type = input;
        self
    }
    /// Appends an item to `instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn instances(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.instances.unwrap_or_default();
        v.push(input.into());
        self.instances = Some(v);
        self
    }
    /// <p>The Amazon EC2 instances on which your SAP application is running.</p>
    pub fn set_instances(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.instances = input;
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn sap_instance_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.sap_instance_number = Some(input.into());
        self
    }
    /// <p>The SAP instance number of the application.</p>
    pub fn set_sap_instance_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sap_instance_number = input;
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn sid(mut self, input: impl Into<std::string::String>) -> Self {
        self.sid = Some(input.into());
        self
    }
    /// <p>The System ID of the application.</p>
    pub fn set_sid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to be attached to the SAP application.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `credentials`.
    ///
    /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
    ///
    /// <p>The credentials of the SAP application.</p>
    pub fn credentials(mut self, input: crate::types::ApplicationCredential) -> Self {
        let mut v = self.credentials.unwrap_or_default();
        v.push(input);
        self.credentials = Some(v);
        self
    }
    /// <p>The credentials of the SAP application.</p>
    pub fn set_credentials(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ApplicationCredential>>,
    ) -> Self {
        self.credentials = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisterApplicationInput`](crate::operation::register_application::RegisterApplicationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::register_application::RegisterApplicationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::register_application::RegisterApplicationInput {
                application_id: self.application_id,
                application_type: self.application_type,
                instances: self.instances,
                sap_instance_number: self.sap_instance_number,
                sid: self.sid,
                tags: self.tags,
                credentials: self.credentials,
            },
        )
    }
}
