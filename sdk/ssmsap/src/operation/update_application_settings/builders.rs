// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_application_settings::_update_application_settings_output::UpdateApplicationSettingsOutputBuilder;

pub use crate::operation::update_application_settings::_update_application_settings_input::UpdateApplicationSettingsInputBuilder;

impl UpdateApplicationSettingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_application_settings::UpdateApplicationSettingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_settings::UpdateApplicationSettingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_application_settings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateApplicationSettings`.
///
/// <p>Updates the settings of an application registered with AWS Systems Manager for SAP.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateApplicationSettingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_application_settings::builders::UpdateApplicationSettingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_application_settings::UpdateApplicationSettingsOutput,
        crate::operation::update_application_settings::UpdateApplicationSettingsError,
    > for UpdateApplicationSettingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_application_settings::UpdateApplicationSettingsOutput,
            crate::operation::update_application_settings::UpdateApplicationSettingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateApplicationSettingsFluentBuilder {
    /// Creates a new `UpdateApplicationSettings`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateApplicationSettings as a reference.
    pub fn as_input(&self) -> &crate::operation::update_application_settings::builders::UpdateApplicationSettingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_application_settings::UpdateApplicationSettingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_settings::UpdateApplicationSettingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_application_settings::UpdateApplicationSettings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_application_settings::UpdateApplicationSettings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_application_settings::UpdateApplicationSettingsOutput,
        crate::operation::update_application_settings::UpdateApplicationSettingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// Appends an item to `CredentialsToAddOrUpdate`.
    ///
    /// To override the contents of this collection use [`set_credentials_to_add_or_update`](Self::set_credentials_to_add_or_update).
    ///
    /// <p>The credentials to be added or updated.</p>
    pub fn credentials_to_add_or_update(mut self, input: crate::types::ApplicationCredential) -> Self {
        self.inner = self.inner.credentials_to_add_or_update(input);
        self
    }
    /// <p>The credentials to be added or updated.</p>
    pub fn set_credentials_to_add_or_update(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>>) -> Self {
        self.inner = self.inner.set_credentials_to_add_or_update(input);
        self
    }
    /// <p>The credentials to be added or updated.</p>
    pub fn get_credentials_to_add_or_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>> {
        self.inner.get_credentials_to_add_or_update()
    }
    /// Appends an item to `CredentialsToRemove`.
    ///
    /// To override the contents of this collection use [`set_credentials_to_remove`](Self::set_credentials_to_remove).
    ///
    /// <p>The credentials to be removed.</p>
    pub fn credentials_to_remove(mut self, input: crate::types::ApplicationCredential) -> Self {
        self.inner = self.inner.credentials_to_remove(input);
        self
    }
    /// <p>The credentials to be removed.</p>
    pub fn set_credentials_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>>) -> Self {
        self.inner = self.inner.set_credentials_to_remove(input);
        self
    }
    /// <p>The credentials to be removed.</p>
    pub fn get_credentials_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationCredential>> {
        self.inner.get_credentials_to_remove()
    }
    /// <p>Installation of AWS Backint Agent for SAP HANA.</p>
    pub fn backint(mut self, input: crate::types::BackintConfig) -> Self {
        self.inner = self.inner.backint(input);
        self
    }
    /// <p>Installation of AWS Backint Agent for SAP HANA.</p>
    pub fn set_backint(mut self, input: ::std::option::Option<crate::types::BackintConfig>) -> Self {
        self.inner = self.inner.set_backint(input);
        self
    }
    /// <p>Installation of AWS Backint Agent for SAP HANA.</p>
    pub fn get_backint(&self) -> &::std::option::Option<crate::types::BackintConfig> {
        self.inner.get_backint()
    }
    /// <p>The Amazon Resource Name of the SAP HANA database that replaces the current SAP HANA connection with the SAP_ABAP application.</p>
    pub fn database_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.database_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the SAP HANA database that replaces the current SAP HANA connection with the SAP_ABAP application.</p>
    pub fn set_database_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_database_arn(input);
        self
    }
    /// <p>The Amazon Resource Name of the SAP HANA database that replaces the current SAP HANA connection with the SAP_ABAP application.</p>
    pub fn get_database_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_database_arn()
    }
}
