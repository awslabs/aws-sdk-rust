// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information of the IP address.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpAddressMember {
    /// <p>The IP address.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The primary IP address.</p>
    pub primary: ::std::option::Option<bool>,
    /// <p>The type of allocation for the IP address.</p>
    pub allocation_type: ::std::option::Option<crate::types::AllocationType>,
}
impl IpAddressMember {
    /// <p>The IP address.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The primary IP address.</p>
    pub fn primary(&self) -> ::std::option::Option<bool> {
        self.primary
    }
    /// <p>The type of allocation for the IP address.</p>
    pub fn allocation_type(&self) -> ::std::option::Option<&crate::types::AllocationType> {
        self.allocation_type.as_ref()
    }
}
impl IpAddressMember {
    /// Creates a new builder-style object to manufacture [`IpAddressMember`](crate::types::IpAddressMember).
    pub fn builder() -> crate::types::builders::IpAddressMemberBuilder {
        crate::types::builders::IpAddressMemberBuilder::default()
    }
}

/// A builder for [`IpAddressMember`](crate::types::IpAddressMember).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpAddressMemberBuilder {
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) primary: ::std::option::Option<bool>,
    pub(crate) allocation_type: ::std::option::Option<crate::types::AllocationType>,
}
impl IpAddressMemberBuilder {
    /// <p>The IP address.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The primary IP address.</p>
    pub fn primary(mut self, input: bool) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary IP address.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<bool>) -> Self {
        self.primary = input;
        self
    }
    /// <p>The primary IP address.</p>
    pub fn get_primary(&self) -> &::std::option::Option<bool> {
        &self.primary
    }
    /// <p>The type of allocation for the IP address.</p>
    pub fn allocation_type(mut self, input: crate::types::AllocationType) -> Self {
        self.allocation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of allocation for the IP address.</p>
    pub fn set_allocation_type(mut self, input: ::std::option::Option<crate::types::AllocationType>) -> Self {
        self.allocation_type = input;
        self
    }
    /// <p>The type of allocation for the IP address.</p>
    pub fn get_allocation_type(&self) -> &::std::option::Option<crate::types::AllocationType> {
        &self.allocation_type
    }
    /// Consumes the builder and constructs a [`IpAddressMember`](crate::types::IpAddressMember).
    pub fn build(self) -> crate::types::IpAddressMember {
        crate::types::IpAddressMember {
            ip_address: self.ip_address,
            primary: self.primary,
            allocation_type: self.allocation_type,
        }
    }
}
