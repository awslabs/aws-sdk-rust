// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the SAP application registered with AWS Systems Manager for SAP. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>The ID of the application.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the latest discovery.</p>
    pub discovery_status: ::std::option::Option<crate::types::ApplicationDiscoveryStatus>,
    /// <p>The type of the application.</p>
    pub r#type: ::std::option::Option<crate::types::ApplicationType>,
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags on the application.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ApplicationSummary {
    /// <p>The ID of the application.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The status of the latest discovery.</p>
    pub fn discovery_status(&self) -> ::std::option::Option<&crate::types::ApplicationDiscoveryStatus> {
        self.discovery_status.as_ref()
    }
    /// <p>The type of the application.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ApplicationType> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The tags on the application.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn builder() -> crate::types::builders::ApplicationSummaryBuilder {
        crate::types::builders::ApplicationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationSummary`](crate::types::ApplicationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) discovery_status: ::std::option::Option<crate::types::ApplicationDiscoveryStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::ApplicationType>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ApplicationSummaryBuilder {
    /// <p>The ID of the application.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of the latest discovery.</p>
    pub fn discovery_status(mut self, input: crate::types::ApplicationDiscoveryStatus) -> Self {
        self.discovery_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the latest discovery.</p>
    pub fn set_discovery_status(mut self, input: ::std::option::Option<crate::types::ApplicationDiscoveryStatus>) -> Self {
        self.discovery_status = input;
        self
    }
    /// <p>The status of the latest discovery.</p>
    pub fn get_discovery_status(&self) -> &::std::option::Option<crate::types::ApplicationDiscoveryStatus> {
        &self.discovery_status
    }
    /// <p>The type of the application.</p>
    pub fn r#type(mut self, input: crate::types::ApplicationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the application.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ApplicationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the application.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ApplicationType> {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags on the application.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags on the application.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags on the application.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn build(self) -> crate::types::ApplicationSummary {
        crate::types::ApplicationSummary {
            id: self.id,
            discovery_status: self.discovery_status,
            r#type: self.r#type,
            arn: self.arn,
            tags: self.tags,
        }
    }
}
