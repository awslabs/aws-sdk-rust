// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connection specifications for the database.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseConnection {
    /// <p>The method of connection.</p>
    pub database_connection_method: ::std::option::Option<crate::types::DatabaseConnectionMethod>,
    /// <p>The Amazon Resource Name of the connected SAP HANA database.</p>
    pub database_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IP address for connection.</p>
    pub connection_ip: ::std::option::Option<::std::string::String>,
}
impl DatabaseConnection {
    /// <p>The method of connection.</p>
    pub fn database_connection_method(&self) -> ::std::option::Option<&crate::types::DatabaseConnectionMethod> {
        self.database_connection_method.as_ref()
    }
    /// <p>The Amazon Resource Name of the connected SAP HANA database.</p>
    pub fn database_arn(&self) -> ::std::option::Option<&str> {
        self.database_arn.as_deref()
    }
    /// <p>The IP address for connection.</p>
    pub fn connection_ip(&self) -> ::std::option::Option<&str> {
        self.connection_ip.as_deref()
    }
}
impl DatabaseConnection {
    /// Creates a new builder-style object to manufacture [`DatabaseConnection`](crate::types::DatabaseConnection).
    pub fn builder() -> crate::types::builders::DatabaseConnectionBuilder {
        crate::types::builders::DatabaseConnectionBuilder::default()
    }
}

/// A builder for [`DatabaseConnection`](crate::types::DatabaseConnection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatabaseConnectionBuilder {
    pub(crate) database_connection_method: ::std::option::Option<crate::types::DatabaseConnectionMethod>,
    pub(crate) database_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connection_ip: ::std::option::Option<::std::string::String>,
}
impl DatabaseConnectionBuilder {
    /// <p>The method of connection.</p>
    pub fn database_connection_method(mut self, input: crate::types::DatabaseConnectionMethod) -> Self {
        self.database_connection_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method of connection.</p>
    pub fn set_database_connection_method(mut self, input: ::std::option::Option<crate::types::DatabaseConnectionMethod>) -> Self {
        self.database_connection_method = input;
        self
    }
    /// <p>The method of connection.</p>
    pub fn get_database_connection_method(&self) -> &::std::option::Option<crate::types::DatabaseConnectionMethod> {
        &self.database_connection_method
    }
    /// <p>The Amazon Resource Name of the connected SAP HANA database.</p>
    pub fn database_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the connected SAP HANA database.</p>
    pub fn set_database_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_arn = input;
        self
    }
    /// <p>The Amazon Resource Name of the connected SAP HANA database.</p>
    pub fn get_database_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_arn
    }
    /// <p>The IP address for connection.</p>
    pub fn connection_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address for connection.</p>
    pub fn set_connection_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_ip = input;
        self
    }
    /// <p>The IP address for connection.</p>
    pub fn get_connection_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_ip
    }
    /// Consumes the builder and constructs a [`DatabaseConnection`](crate::types::DatabaseConnection).
    pub fn build(self) -> crate::types::DatabaseConnection {
        crate::types::DatabaseConnection {
            database_connection_method: self.database_connection_method,
            database_arn: self.database_arn,
            connection_ip: self.connection_ip,
        }
    }
}
