// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHubOutput {
    /// <p>The ARN of the Hub resource that was retrieved.</p>
    #[doc(hidden)]
    pub hub_arn: std::option::Option<std::string::String>,
    /// <p>The date and time when Security Hub was enabled in the account.</p>
    #[doc(hidden)]
    pub subscribed_at: std::option::Option<std::string::String>,
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>If set to <code>true</code>, then new controls for enabled standards are enabled automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    #[doc(hidden)]
    pub auto_enable_controls: bool,
    _request_id: Option<String>,
}
impl DescribeHubOutput {
    /// <p>The ARN of the Hub resource that was retrieved.</p>
    pub fn hub_arn(&self) -> std::option::Option<&str> {
        self.hub_arn.as_deref()
    }
    /// <p>The date and time when Security Hub was enabled in the account.</p>
    pub fn subscribed_at(&self) -> std::option::Option<&str> {
        self.subscribed_at.as_deref()
    }
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>If set to <code>true</code>, then new controls for enabled standards are enabled automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    pub fn auto_enable_controls(&self) -> bool {
        self.auto_enable_controls
    }
}
impl aws_http::request_id::RequestId for DescribeHubOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeHubOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
    pub fn builder() -> crate::operation::describe_hub::builders::DescribeHubOutputBuilder {
        crate::operation::describe_hub::builders::DescribeHubOutputBuilder::default()
    }
}

/// A builder for [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeHubOutputBuilder {
    pub(crate) hub_arn: std::option::Option<std::string::String>,
    pub(crate) subscribed_at: std::option::Option<std::string::String>,
    pub(crate) auto_enable_controls: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DescribeHubOutputBuilder {
    /// <p>The ARN of the Hub resource that was retrieved.</p>
    pub fn hub_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.hub_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Hub resource that was retrieved.</p>
    pub fn set_hub_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hub_arn = input;
        self
    }
    /// <p>The date and time when Security Hub was enabled in the account.</p>
    pub fn subscribed_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.subscribed_at = Some(input.into());
        self
    }
    /// <p>The date and time when Security Hub was enabled in the account.</p>
    pub fn set_subscribed_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subscribed_at = input;
        self
    }
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>If set to <code>true</code>, then new controls for enabled standards are enabled automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    pub fn auto_enable_controls(mut self, input: bool) -> Self {
        self.auto_enable_controls = Some(input);
        self
    }
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>If set to <code>true</code>, then new controls for enabled standards are enabled automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    pub fn set_auto_enable_controls(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_enable_controls = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeHubOutput`](crate::operation::describe_hub::DescribeHubOutput).
    pub fn build(self) -> crate::operation::describe_hub::DescribeHubOutput {
        crate::operation::describe_hub::DescribeHubOutput {
            hub_arn: self.hub_arn,
            subscribed_at: self.subscribed_at,
            auto_enable_controls: self.auto_enable_controls.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
