// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEnabledStandardsInput {
    /// <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    #[doc(hidden)]
    pub standards_subscription_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token that is required for pagination. On your first call to the <code>GetEnabledStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>
    /// <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in the response.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl GetEnabledStandardsInput {
    /// <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    pub fn standards_subscription_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.standards_subscription_arns.as_deref()
    }
    /// <p>The token that is required for pagination. On your first call to the <code>GetEnabledStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>
    /// <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl GetEnabledStandardsInput {
    /// Creates a new builder-style object to manufacture [`GetEnabledStandardsInput`](crate::operation::get_enabled_standards::GetEnabledStandardsInput).
    pub fn builder(
    ) -> crate::operation::get_enabled_standards::builders::GetEnabledStandardsInputBuilder {
        crate::operation::get_enabled_standards::builders::GetEnabledStandardsInputBuilder::default(
        )
    }
}

/// A builder for [`GetEnabledStandardsInput`](crate::operation::get_enabled_standards::GetEnabledStandardsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEnabledStandardsInputBuilder {
    pub(crate) standards_subscription_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl GetEnabledStandardsInputBuilder {
    /// Appends an item to `standards_subscription_arns`.
    ///
    /// To override the contents of this collection use [`set_standards_subscription_arns`](Self::set_standards_subscription_arns).
    ///
    /// <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    pub fn standards_subscription_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.standards_subscription_arns.unwrap_or_default();
        v.push(input.into());
        self.standards_subscription_arns = Some(v);
        self
    }
    /// <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    pub fn set_standards_subscription_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.standards_subscription_arns = input;
        self
    }
    /// <p>The token that is required for pagination. On your first call to the <code>GetEnabledStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>
    /// <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that is required for pagination. On your first call to the <code>GetEnabledStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>
    /// <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEnabledStandardsInput`](crate::operation::get_enabled_standards::GetEnabledStandardsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_enabled_standards::GetEnabledStandardsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_enabled_standards::GetEnabledStandardsInput {
                standards_subscription_arns: self.standards_subscription_arns,
                next_token: self.next_token,
                max_results: self.max_results.unwrap_or_default(),
            },
        )
    }
}
