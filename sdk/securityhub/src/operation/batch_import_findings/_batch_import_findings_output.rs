// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchImportFindingsOutput {
    /// <p>The number of findings that failed to import.</p>
    pub failed_count: ::std::option::Option<i32>,
    /// <p>The number of findings that were successfully imported.</p>
    pub success_count: ::std::option::Option<i32>,
    /// <p>The list of findings that failed to import.</p>
    pub failed_findings: ::std::option::Option<::std::vec::Vec<crate::types::ImportFindingsError>>,
    _request_id: Option<String>,
}
impl BatchImportFindingsOutput {
    /// <p>The number of findings that failed to import.</p>
    pub fn failed_count(&self) -> ::std::option::Option<i32> {
        self.failed_count
    }
    /// <p>The number of findings that were successfully imported.</p>
    pub fn success_count(&self) -> ::std::option::Option<i32> {
        self.success_count
    }
    /// <p>The list of findings that failed to import.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_findings.is_none()`.
    pub fn failed_findings(&self) -> &[crate::types::ImportFindingsError] {
        self.failed_findings.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchImportFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchImportFindingsOutput {
    /// Creates a new builder-style object to manufacture [`BatchImportFindingsOutput`](crate::operation::batch_import_findings::BatchImportFindingsOutput).
    pub fn builder() -> crate::operation::batch_import_findings::builders::BatchImportFindingsOutputBuilder {
        crate::operation::batch_import_findings::builders::BatchImportFindingsOutputBuilder::default()
    }
}

/// A builder for [`BatchImportFindingsOutput`](crate::operation::batch_import_findings::BatchImportFindingsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchImportFindingsOutputBuilder {
    pub(crate) failed_count: ::std::option::Option<i32>,
    pub(crate) success_count: ::std::option::Option<i32>,
    pub(crate) failed_findings: ::std::option::Option<::std::vec::Vec<crate::types::ImportFindingsError>>,
    _request_id: Option<String>,
}
impl BatchImportFindingsOutputBuilder {
    /// <p>The number of findings that failed to import.</p>
    /// This field is required.
    pub fn failed_count(mut self, input: i32) -> Self {
        self.failed_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings that failed to import.</p>
    pub fn set_failed_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed_count = input;
        self
    }
    /// <p>The number of findings that failed to import.</p>
    pub fn get_failed_count(&self) -> &::std::option::Option<i32> {
        &self.failed_count
    }
    /// <p>The number of findings that were successfully imported.</p>
    /// This field is required.
    pub fn success_count(mut self, input: i32) -> Self {
        self.success_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings that were successfully imported.</p>
    pub fn set_success_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.success_count = input;
        self
    }
    /// <p>The number of findings that were successfully imported.</p>
    pub fn get_success_count(&self) -> &::std::option::Option<i32> {
        &self.success_count
    }
    /// Appends an item to `failed_findings`.
    ///
    /// To override the contents of this collection use [`set_failed_findings`](Self::set_failed_findings).
    ///
    /// <p>The list of findings that failed to import.</p>
    pub fn failed_findings(mut self, input: crate::types::ImportFindingsError) -> Self {
        let mut v = self.failed_findings.unwrap_or_default();
        v.push(input);
        self.failed_findings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of findings that failed to import.</p>
    pub fn set_failed_findings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImportFindingsError>>) -> Self {
        self.failed_findings = input;
        self
    }
    /// <p>The list of findings that failed to import.</p>
    pub fn get_failed_findings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImportFindingsError>> {
        &self.failed_findings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchImportFindingsOutput`](crate::operation::batch_import_findings::BatchImportFindingsOutput).
    pub fn build(self) -> crate::operation::batch_import_findings::BatchImportFindingsOutput {
        crate::operation::batch_import_findings::BatchImportFindingsOutput {
            failed_count: self.failed_count,
            success_count: self.success_count,
            failed_findings: self.failed_findings,
            _request_id: self._request_id,
        }
    }
}
