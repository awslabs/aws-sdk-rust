// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_import_findings::_batch_import_findings_output::BatchImportFindingsOutputBuilder;

pub use crate::operation::batch_import_findings::_batch_import_findings_input::BatchImportFindingsInputBuilder;

impl crate::operation::batch_import_findings::builders::BatchImportFindingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_import_findings::BatchImportFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_findings::BatchImportFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_import_findings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchImportFindings`.
///
/// <p>Imports security findings generated by a finding provider into Security Hub. This action is requested by the finding provider to import its findings into Security Hub.</p>
/// <p><code>BatchImportFindings</code> must be called by one of the following:</p>
/// <ul>
/// <li>
/// <p>The Amazon Web Services account that is associated with a finding if you are using the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-custom-providers.html#securityhub-custom-providers-bfi-reqs">default product ARN</a> or are a partner sending findings from within a customer's Amazon Web Services account. In these cases, the identifier of the account that you are calling <code>BatchImportFindings</code> from needs to be the same as the <code>AwsAccountId</code> attribute for the finding.</p></li>
/// <li>
/// <p>An Amazon Web Services account that Security Hub has allow-listed for an official partner integration. In this case, you can call <code>BatchImportFindings</code> from the allow-listed account and send findings from different customer accounts in the same batch.</p></li>
/// </ul>
/// <p>The maximum allowed size for a finding is 240 Kb. An error is returned for any finding larger than 240 Kb.</p>
/// <p>After a finding is created, <code>BatchImportFindings</code> cannot be used to update the following finding fields and objects, which Security Hub customers use to manage their investigation workflow.</p>
/// <ul>
/// <li>
/// <p><code>Note</code></p></li>
/// <li>
/// <p><code>UserDefinedFields</code></p></li>
/// <li>
/// <p><code>VerificationState</code></p></li>
/// <li>
/// <p><code>Workflow</code></p></li>
/// </ul>
/// <p>Finding providers also should not use <code>BatchImportFindings</code> to update the following attributes.</p>
/// <ul>
/// <li>
/// <p><code>Confidence</code></p></li>
/// <li>
/// <p><code>Criticality</code></p></li>
/// <li>
/// <p><code>RelatedFindings</code></p></li>
/// <li>
/// <p><code>Severity</code></p></li>
/// <li>
/// <p><code>Types</code></p></li>
/// </ul>
/// <p>Instead, finding providers use <code>FindingProviderFields</code> to provide values for these attributes.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchImportFindingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_import_findings::builders::BatchImportFindingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_import_findings::BatchImportFindingsOutput,
        crate::operation::batch_import_findings::BatchImportFindingsError,
    > for BatchImportFindingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_import_findings::BatchImportFindingsOutput,
            crate::operation::batch_import_findings::BatchImportFindingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchImportFindingsFluentBuilder {
    /// Creates a new `BatchImportFindings`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchImportFindings as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_import_findings::builders::BatchImportFindingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_import_findings::BatchImportFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_findings::BatchImportFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_import_findings::BatchImportFindings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_import_findings::BatchImportFindings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_import_findings::BatchImportFindingsOutput,
        crate::operation::batch_import_findings::BatchImportFindingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `Findings`.
    ///
    /// To override the contents of this collection use [`set_findings`](Self::set_findings).
    ///
    /// <p>A list of findings to import. To successfully import a finding, it must follow the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">Amazon Web Services Security Finding Format</a>. Maximum of 100 findings per request.</p>
    pub fn findings(mut self, input: crate::types::AwsSecurityFinding) -> Self {
        self.inner = self.inner.findings(input);
        self
    }
    /// <p>A list of findings to import. To successfully import a finding, it must follow the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">Amazon Web Services Security Finding Format</a>. Maximum of 100 findings per request.</p>
    pub fn set_findings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsSecurityFinding>>) -> Self {
        self.inner = self.inner.set_findings(input);
        self
    }
    /// <p>A list of findings to import. To successfully import a finding, it must follow the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">Amazon Web Services Security Finding Format</a>. Maximum of 100 findings per request.</p>
    pub fn get_findings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsSecurityFinding>> {
        self.inner.get_findings()
    }
}
