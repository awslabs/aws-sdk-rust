// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetSecurityControlsOutput {
    /// <p> An array that returns the identifier, Amazon Resource Name (ARN), and other details about a security control. The same information is returned whether the request includes <code>SecurityControlId</code> or <code>SecurityControlArn</code>. </p>
    pub security_controls: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControl>>,
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) for which details cannot be returned. </p>
    pub unprocessed_ids: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedSecurityControl>>,
    _request_id: Option<String>,
}
impl BatchGetSecurityControlsOutput {
    /// <p> An array that returns the identifier, Amazon Resource Name (ARN), and other details about a security control. The same information is returned whether the request includes <code>SecurityControlId</code> or <code>SecurityControlArn</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_controls.is_none()`.
    pub fn security_controls(&self) -> &[crate::types::SecurityControl] {
        self.security_controls.as_deref().unwrap_or_default()
    }
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) for which details cannot be returned. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_ids.is_none()`.
    pub fn unprocessed_ids(&self) -> &[crate::types::UnprocessedSecurityControl] {
        self.unprocessed_ids.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchGetSecurityControlsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetSecurityControlsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetSecurityControlsOutput`](crate::operation::batch_get_security_controls::BatchGetSecurityControlsOutput).
    pub fn builder() -> crate::operation::batch_get_security_controls::builders::BatchGetSecurityControlsOutputBuilder {
        crate::operation::batch_get_security_controls::builders::BatchGetSecurityControlsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetSecurityControlsOutput`](crate::operation::batch_get_security_controls::BatchGetSecurityControlsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetSecurityControlsOutputBuilder {
    pub(crate) security_controls: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControl>>,
    pub(crate) unprocessed_ids: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedSecurityControl>>,
    _request_id: Option<String>,
}
impl BatchGetSecurityControlsOutputBuilder {
    /// Appends an item to `security_controls`.
    ///
    /// To override the contents of this collection use [`set_security_controls`](Self::set_security_controls).
    ///
    /// <p> An array that returns the identifier, Amazon Resource Name (ARN), and other details about a security control. The same information is returned whether the request includes <code>SecurityControlId</code> or <code>SecurityControlArn</code>. </p>
    pub fn security_controls(mut self, input: crate::types::SecurityControl) -> Self {
        let mut v = self.security_controls.unwrap_or_default();
        v.push(input);
        self.security_controls = ::std::option::Option::Some(v);
        self
    }
    /// <p> An array that returns the identifier, Amazon Resource Name (ARN), and other details about a security control. The same information is returned whether the request includes <code>SecurityControlId</code> or <code>SecurityControlArn</code>. </p>
    pub fn set_security_controls(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControl>>) -> Self {
        self.security_controls = input;
        self
    }
    /// <p> An array that returns the identifier, Amazon Resource Name (ARN), and other details about a security control. The same information is returned whether the request includes <code>SecurityControlId</code> or <code>SecurityControlArn</code>. </p>
    pub fn get_security_controls(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SecurityControl>> {
        &self.security_controls
    }
    /// Appends an item to `unprocessed_ids`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_ids`](Self::set_unprocessed_ids).
    ///
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) for which details cannot be returned. </p>
    pub fn unprocessed_ids(mut self, input: crate::types::UnprocessedSecurityControl) -> Self {
        let mut v = self.unprocessed_ids.unwrap_or_default();
        v.push(input);
        self.unprocessed_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) for which details cannot be returned. </p>
    pub fn set_unprocessed_ids(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedSecurityControl>>) -> Self {
        self.unprocessed_ids = input;
        self
    }
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) for which details cannot be returned. </p>
    pub fn get_unprocessed_ids(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UnprocessedSecurityControl>> {
        &self.unprocessed_ids
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetSecurityControlsOutput`](crate::operation::batch_get_security_controls::BatchGetSecurityControlsOutput).
    pub fn build(self) -> crate::operation::batch_get_security_controls::BatchGetSecurityControlsOutput {
        crate::operation::batch_get_security_controls::BatchGetSecurityControlsOutput {
            security_controls: self.security_controls,
            unprocessed_ids: self.unprocessed_ids,
            _request_id: self._request_id,
        }
    }
}
