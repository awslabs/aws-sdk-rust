// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFindingsInput {
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    pub filters: ::std::option::Option<crate::types::AwsSecurityFindingFilters>,
    /// <p>The updated note for the finding.</p>
    pub note: ::std::option::Option<crate::types::NoteUpdate>,
    /// <p>The updated record state for the finding.</p>
    pub record_state: ::std::option::Option<crate::types::RecordState>,
}
impl UpdateFindingsInput {
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::AwsSecurityFindingFilters> {
        self.filters.as_ref()
    }
    /// <p>The updated note for the finding.</p>
    pub fn note(&self) -> ::std::option::Option<&crate::types::NoteUpdate> {
        self.note.as_ref()
    }
    /// <p>The updated record state for the finding.</p>
    pub fn record_state(&self) -> ::std::option::Option<&crate::types::RecordState> {
        self.record_state.as_ref()
    }
}
impl UpdateFindingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
    pub fn builder() -> crate::operation::update_findings::builders::UpdateFindingsInputBuilder {
        crate::operation::update_findings::builders::UpdateFindingsInputBuilder::default()
    }
}

/// A builder for [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFindingsInputBuilder {
    pub(crate) filters: ::std::option::Option<crate::types::AwsSecurityFindingFilters>,
    pub(crate) note: ::std::option::Option<crate::types::NoteUpdate>,
    pub(crate) record_state: ::std::option::Option<crate::types::RecordState>,
}
impl UpdateFindingsInputBuilder {
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    /// This field is required.
    pub fn filters(mut self, input: crate::types::AwsSecurityFindingFilters) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::AwsSecurityFindingFilters>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::AwsSecurityFindingFilters> {
        &self.filters
    }
    /// <p>The updated note for the finding.</p>
    pub fn note(mut self, input: crate::types::NoteUpdate) -> Self {
        self.note = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated note for the finding.</p>
    pub fn set_note(mut self, input: ::std::option::Option<crate::types::NoteUpdate>) -> Self {
        self.note = input;
        self
    }
    /// <p>The updated note for the finding.</p>
    pub fn get_note(&self) -> &::std::option::Option<crate::types::NoteUpdate> {
        &self.note
    }
    /// <p>The updated record state for the finding.</p>
    pub fn record_state(mut self, input: crate::types::RecordState) -> Self {
        self.record_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated record state for the finding.</p>
    pub fn set_record_state(mut self, input: ::std::option::Option<crate::types::RecordState>) -> Self {
        self.record_state = input;
        self
    }
    /// <p>The updated record state for the finding.</p>
    pub fn get_record_state(&self) -> &::std::option::Option<crate::types::RecordState> {
        &self.record_state
    }
    /// Consumes the builder and constructs a [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_findings::UpdateFindingsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_findings::UpdateFindingsInput {
            filters: self.filters,
            note: self.note,
            record_state: self.record_state,
        })
    }
}
