// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInsightInput {
    /// <p>The ARN of the insight that you want to update.</p>
    #[doc(hidden)]
    pub insight_arn: std::option::Option<std::string::String>,
    /// <p>The updated name for the insight.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated filters that define this insight.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    /// <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    #[doc(hidden)]
    pub group_by_attribute: std::option::Option<std::string::String>,
}
impl UpdateInsightInput {
    /// <p>The ARN of the insight that you want to update.</p>
    pub fn insight_arn(&self) -> std::option::Option<&str> {
        self.insight_arn.as_deref()
    }
    /// <p>The updated name for the insight.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated filters that define this insight.</p>
    pub fn filters(&self) -> std::option::Option<&crate::types::AwsSecurityFindingFilters> {
        self.filters.as_ref()
    }
    /// <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    pub fn group_by_attribute(&self) -> std::option::Option<&str> {
        self.group_by_attribute.as_deref()
    }
}
impl UpdateInsightInput {
    /// Creates a new builder-style object to manufacture [`UpdateInsightInput`](crate::operation::update_insight::UpdateInsightInput).
    pub fn builder() -> crate::operation::update_insight::builders::UpdateInsightInputBuilder {
        crate::operation::update_insight::builders::UpdateInsightInputBuilder::default()
    }
}

/// A builder for [`UpdateInsightInput`](crate::operation::update_insight::UpdateInsightInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInsightInputBuilder {
    pub(crate) insight_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    pub(crate) group_by_attribute: std::option::Option<std::string::String>,
}
impl UpdateInsightInputBuilder {
    /// <p>The ARN of the insight that you want to update.</p>
    pub fn insight_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.insight_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the insight that you want to update.</p>
    pub fn set_insight_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.insight_arn = input;
        self
    }
    /// <p>The updated name for the insight.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated name for the insight.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated filters that define this insight.</p>
    pub fn filters(mut self, input: crate::types::AwsSecurityFindingFilters) -> Self {
        self.filters = Some(input);
        self
    }
    /// <p>The updated filters that define this insight.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    pub fn group_by_attribute(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_by_attribute = Some(input.into());
        self
    }
    /// <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    pub fn set_group_by_attribute(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.group_by_attribute = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInsightInput`](crate::operation::update_insight::UpdateInsightInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_insight::UpdateInsightInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_insight::UpdateInsightInput {
            insight_arn: self.insight_arn,
            name: self.name,
            filters: self.filters,
            group_by_attribute: self.group_by_attribute,
        })
    }
}
