// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateStandardsControlAssociationsOutput {
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) whose enablement status in a specified standard couldn't be updated. </p>
    pub unprocessed_association_updates: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedStandardsControlAssociationUpdate>>,
    _request_id: Option<String>,
}
impl BatchUpdateStandardsControlAssociationsOutput {
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) whose enablement status in a specified standard couldn't be updated. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_association_updates.is_none()`.
    pub fn unprocessed_association_updates(&self) -> &[crate::types::UnprocessedStandardsControlAssociationUpdate] {
        self.unprocessed_association_updates.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchUpdateStandardsControlAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpdateStandardsControlAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateStandardsControlAssociationsOutput`](crate::operation::batch_update_standards_control_associations::BatchUpdateStandardsControlAssociationsOutput).
    pub fn builder() -> crate::operation::batch_update_standards_control_associations::builders::BatchUpdateStandardsControlAssociationsOutputBuilder
    {
        crate::operation::batch_update_standards_control_associations::builders::BatchUpdateStandardsControlAssociationsOutputBuilder::default()
    }
}

/// A builder for [`BatchUpdateStandardsControlAssociationsOutput`](crate::operation::batch_update_standards_control_associations::BatchUpdateStandardsControlAssociationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchUpdateStandardsControlAssociationsOutputBuilder {
    pub(crate) unprocessed_association_updates: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedStandardsControlAssociationUpdate>>,
    _request_id: Option<String>,
}
impl BatchUpdateStandardsControlAssociationsOutputBuilder {
    /// Appends an item to `unprocessed_association_updates`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_association_updates`](Self::set_unprocessed_association_updates).
    ///
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) whose enablement status in a specified standard couldn't be updated. </p>
    pub fn unprocessed_association_updates(mut self, input: crate::types::UnprocessedStandardsControlAssociationUpdate) -> Self {
        let mut v = self.unprocessed_association_updates.unwrap_or_default();
        v.push(input);
        self.unprocessed_association_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) whose enablement status in a specified standard couldn't be updated. </p>
    pub fn set_unprocessed_association_updates(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedStandardsControlAssociationUpdate>>,
    ) -> Self {
        self.unprocessed_association_updates = input;
        self
    }
    /// <p> A security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) whose enablement status in a specified standard couldn't be updated. </p>
    pub fn get_unprocessed_association_updates(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::UnprocessedStandardsControlAssociationUpdate>> {
        &self.unprocessed_association_updates
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchUpdateStandardsControlAssociationsOutput`](crate::operation::batch_update_standards_control_associations::BatchUpdateStandardsControlAssociationsOutput).
    pub fn build(self) -> crate::operation::batch_update_standards_control_associations::BatchUpdateStandardsControlAssociationsOutput {
        crate::operation::batch_update_standards_control_associations::BatchUpdateStandardsControlAssociationsOutput {
            unprocessed_association_updates: self.unprocessed_association_updates,
            _request_id: self._request_id,
        }
    }
}
