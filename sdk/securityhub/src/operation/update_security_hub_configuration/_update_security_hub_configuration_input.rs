// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSecurityHubConfigurationInput {
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    pub auto_enable_controls: ::std::option::Option<bool>,
    /// <p>Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to <code>SECURITY_CONTROL</code>, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.</p>
    /// <p>If the value for this field is set to <code>STANDARD_CONTROL</code>, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.</p>
    /// <p>For accounts that are part of an organization, this value can only be updated in the administrator account.</p>
    pub control_finding_generator: ::std::option::Option<crate::types::ControlFindingGenerator>,
}
impl UpdateSecurityHubConfigurationInput {
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    pub fn auto_enable_controls(&self) -> ::std::option::Option<bool> {
        self.auto_enable_controls
    }
    /// <p>Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to <code>SECURITY_CONTROL</code>, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.</p>
    /// <p>If the value for this field is set to <code>STANDARD_CONTROL</code>, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.</p>
    /// <p>For accounts that are part of an organization, this value can only be updated in the administrator account.</p>
    pub fn control_finding_generator(&self) -> ::std::option::Option<&crate::types::ControlFindingGenerator> {
        self.control_finding_generator.as_ref()
    }
}
impl UpdateSecurityHubConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityHubConfigurationInput`](crate::operation::update_security_hub_configuration::UpdateSecurityHubConfigurationInput).
    pub fn builder() -> crate::operation::update_security_hub_configuration::builders::UpdateSecurityHubConfigurationInputBuilder {
        crate::operation::update_security_hub_configuration::builders::UpdateSecurityHubConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateSecurityHubConfigurationInput`](crate::operation::update_security_hub_configuration::UpdateSecurityHubConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSecurityHubConfigurationInputBuilder {
    pub(crate) auto_enable_controls: ::std::option::Option<bool>,
    pub(crate) control_finding_generator: ::std::option::Option<crate::types::ControlFindingGenerator>,
}
impl UpdateSecurityHubConfigurationInputBuilder {
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    pub fn auto_enable_controls(mut self, input: bool) -> Self {
        self.auto_enable_controls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    pub fn set_auto_enable_controls(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_enable_controls = input;
        self
    }
    /// <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>
    /// <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    pub fn get_auto_enable_controls(&self) -> &::std::option::Option<bool> {
        &self.auto_enable_controls
    }
    /// <p>Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to <code>SECURITY_CONTROL</code>, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.</p>
    /// <p>If the value for this field is set to <code>STANDARD_CONTROL</code>, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.</p>
    /// <p>For accounts that are part of an organization, this value can only be updated in the administrator account.</p>
    pub fn control_finding_generator(mut self, input: crate::types::ControlFindingGenerator) -> Self {
        self.control_finding_generator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to <code>SECURITY_CONTROL</code>, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.</p>
    /// <p>If the value for this field is set to <code>STANDARD_CONTROL</code>, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.</p>
    /// <p>For accounts that are part of an organization, this value can only be updated in the administrator account.</p>
    pub fn set_control_finding_generator(mut self, input: ::std::option::Option<crate::types::ControlFindingGenerator>) -> Self {
        self.control_finding_generator = input;
        self
    }
    /// <p>Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to <code>SECURITY_CONTROL</code>, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.</p>
    /// <p>If the value for this field is set to <code>STANDARD_CONTROL</code>, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.</p>
    /// <p>For accounts that are part of an organization, this value can only be updated in the administrator account.</p>
    pub fn get_control_finding_generator(&self) -> &::std::option::Option<crate::types::ControlFindingGenerator> {
        &self.control_finding_generator
    }
    /// Consumes the builder and constructs a [`UpdateSecurityHubConfigurationInput`](crate::operation::update_security_hub_configuration::UpdateSecurityHubConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_security_hub_configuration::UpdateSecurityHubConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_security_hub_configuration::UpdateSecurityHubConfigurationInput {
            auto_enable_controls: self.auto_enable_controls,
            control_finding_generator: self.control_finding_generator,
        })
    }
}
