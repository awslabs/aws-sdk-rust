// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_members::_create_members_output::CreateMembersOutputBuilder;

pub use crate::operation::create_members::_create_members_input::CreateMembersInputBuilder;

impl crate::operation::create_members::builders::CreateMembersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_members::CreateMembersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_members::CreateMembersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_members();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMembers`.
///
/// <p>Creates a member association in Security Hub between the specified accounts and the account used to make the request, which is the administrator account. If you are integrated with Organizations, then the administrator account is designated by the organization management account.</p>
/// <p><code>CreateMembers</code> is always used to add accounts that are not organization members.</p>
/// <p>For accounts that are managed using Organizations, <code>CreateMembers</code> is only used in the following cases:</p>
/// <ul>
/// <li>
/// <p>Security Hub is not configured to automatically add new organization accounts.</p></li>
/// <li>
/// <p>The account was disassociated or deleted in Security Hub.</p></li>
/// </ul>
/// <p>This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you can use the <code>EnableSecurityHub</code> operation.</p>
/// <p>For accounts that are not organization members, you create the account association and then send an invitation to the member account. To send the invitation, you use the <code>InviteMembers</code> operation. If the account owner accepts the invitation, the account becomes a member account in Security Hub.</p>
/// <p>Accounts that are managed using Organizations do not receive an invitation. They automatically become a member account in Security Hub.</p>
/// <ul>
/// <li>
/// <p>If the organization account does not have Security Hub enabled, then Security Hub and the default standards are automatically enabled. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.</p></li>
/// <li>
/// <p>For organization accounts that already have Security Hub enabled, Security Hub does not make any other changes to those accounts. It does not change their enabled standards or controls.</p></li>
/// </ul>
/// <p>A permissions policy is added that permits the administrator account to view the findings generated in the member account.</p>
/// <p>To remove the association between the administrator and member accounts, use the <code>DisassociateFromMasterAccount</code> or <code>DisassociateMembers</code> operation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMembersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_members::builders::CreateMembersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_members::CreateMembersOutput,
        crate::operation::create_members::CreateMembersError,
    > for CreateMembersFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_members::CreateMembersOutput,
            crate::operation::create_members::CreateMembersError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMembersFluentBuilder {
    /// Creates a new `CreateMembers`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMembers as a reference.
    pub fn as_input(&self) -> &crate::operation::create_members::builders::CreateMembersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_members::CreateMembersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_members::CreateMembersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_members::CreateMembers::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_members::CreateMembers::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_members::CreateMembersOutput,
        crate::operation::create_members::CreateMembersError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `AccountDetails`.
    ///
    /// To override the contents of this collection use [`set_account_details`](Self::set_account_details).
    ///
    /// <p>The list of accounts to associate with the Security Hub administrator account. For each account, the list includes the account ID and optionally the email address.</p>
    pub fn account_details(mut self, input: crate::types::AccountDetails) -> Self {
        self.inner = self.inner.account_details(input);
        self
    }
    /// <p>The list of accounts to associate with the Security Hub administrator account. For each account, the list includes the account ID and optionally the email address.</p>
    pub fn set_account_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccountDetails>>) -> Self {
        self.inner = self.inner.set_account_details(input);
        self
    }
    /// <p>The list of accounts to associate with the Security Hub administrator account. For each account, the list includes the account ID and optionally the email address.</p>
    pub fn get_account_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccountDetails>> {
        self.inner.get_account_details()
    }
}
