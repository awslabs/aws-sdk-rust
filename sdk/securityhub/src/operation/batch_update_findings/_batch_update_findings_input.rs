// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdateFindingsInput {
    /// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p>
    /// <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
    #[doc(hidden)]
    pub finding_identifiers:
        std::option::Option<std::vec::Vec<crate::types::AwsSecurityFindingIdentifier>>,
    /// <p>The updated note.</p>
    #[doc(hidden)]
    pub note: std::option::Option<crate::types::NoteUpdate>,
    /// <p>Used to update the finding severity.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::SeverityUpdate>,
    /// <p>Indicates the veracity of a finding.</p>
    /// <p>The available values for <code>VerificationState</code> are as follows.</p>
    /// <ul>
    /// <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li>
    /// <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li>
    /// <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li>
    /// <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub verification_state: std::option::Option<crate::types::VerificationState>,
    /// <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    #[doc(hidden)]
    pub confidence: i32,
    /// <p>The updated value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    #[doc(hidden)]
    pub criticality: i32,
    /// <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p>
    /// <p>Valid namespace values are as follows.</p>
    /// <ul>
    /// <li> <p>Software and Configuration Checks</p> </li>
    /// <li> <p>TTPs</p> </li>
    /// <li> <p>Effects</p> </li>
    /// <li> <p>Unusual Behaviors</p> </li>
    /// <li> <p>Sensitive Data Identifications </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.</p>
    #[doc(hidden)]
    pub user_defined_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Used to update the workflow status of a finding.</p>
    /// <p>The workflow status indicates the progress of the investigation into the finding. </p>
    #[doc(hidden)]
    pub workflow: std::option::Option<crate::types::WorkflowUpdate>,
    /// <p>A list of findings that are related to the updated findings.</p>
    #[doc(hidden)]
    pub related_findings: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
}
impl BatchUpdateFindingsInput {
    /// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p>
    /// <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
    pub fn finding_identifiers(
        &self,
    ) -> std::option::Option<&[crate::types::AwsSecurityFindingIdentifier]> {
        self.finding_identifiers.as_deref()
    }
    /// <p>The updated note.</p>
    pub fn note(&self) -> std::option::Option<&crate::types::NoteUpdate> {
        self.note.as_ref()
    }
    /// <p>Used to update the finding severity.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::SeverityUpdate> {
        self.severity.as_ref()
    }
    /// <p>Indicates the veracity of a finding.</p>
    /// <p>The available values for <code>VerificationState</code> are as follows.</p>
    /// <ul>
    /// <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li>
    /// <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li>
    /// <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li>
    /// <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li>
    /// </ul>
    pub fn verification_state(&self) -> std::option::Option<&crate::types::VerificationState> {
        self.verification_state.as_ref()
    }
    /// <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn confidence(&self) -> i32 {
        self.confidence
    }
    /// <p>The updated value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn criticality(&self) -> i32 {
        self.criticality
    }
    /// <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p>
    /// <p>Valid namespace values are as follows.</p>
    /// <ul>
    /// <li> <p>Software and Configuration Checks</p> </li>
    /// <li> <p>TTPs</p> </li>
    /// <li> <p>Effects</p> </li>
    /// <li> <p>Unusual Behaviors</p> </li>
    /// <li> <p>Sensitive Data Identifications </p> </li>
    /// </ul>
    pub fn types(&self) -> std::option::Option<&[std::string::String]> {
        self.types.as_deref()
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.</p>
    pub fn user_defined_fields(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.user_defined_fields.as_ref()
    }
    /// <p>Used to update the workflow status of a finding.</p>
    /// <p>The workflow status indicates the progress of the investigation into the finding. </p>
    pub fn workflow(&self) -> std::option::Option<&crate::types::WorkflowUpdate> {
        self.workflow.as_ref()
    }
    /// <p>A list of findings that are related to the updated findings.</p>
    pub fn related_findings(&self) -> std::option::Option<&[crate::types::RelatedFinding]> {
        self.related_findings.as_deref()
    }
}
impl BatchUpdateFindingsInput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateFindingsInput`](crate::operation::batch_update_findings::BatchUpdateFindingsInput).
    pub fn builder(
    ) -> crate::operation::batch_update_findings::builders::BatchUpdateFindingsInputBuilder {
        crate::operation::batch_update_findings::builders::BatchUpdateFindingsInputBuilder::default(
        )
    }
}

/// A builder for [`BatchUpdateFindingsInput`](crate::operation::batch_update_findings::BatchUpdateFindingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchUpdateFindingsInputBuilder {
    pub(crate) finding_identifiers:
        std::option::Option<std::vec::Vec<crate::types::AwsSecurityFindingIdentifier>>,
    pub(crate) note: std::option::Option<crate::types::NoteUpdate>,
    pub(crate) severity: std::option::Option<crate::types::SeverityUpdate>,
    pub(crate) verification_state: std::option::Option<crate::types::VerificationState>,
    pub(crate) confidence: std::option::Option<i32>,
    pub(crate) criticality: std::option::Option<i32>,
    pub(crate) types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) user_defined_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) workflow: std::option::Option<crate::types::WorkflowUpdate>,
    pub(crate) related_findings: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
}
impl BatchUpdateFindingsInputBuilder {
    /// Appends an item to `finding_identifiers`.
    ///
    /// To override the contents of this collection use [`set_finding_identifiers`](Self::set_finding_identifiers).
    ///
    /// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p>
    /// <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
    pub fn finding_identifiers(
        mut self,
        input: crate::types::AwsSecurityFindingIdentifier,
    ) -> Self {
        let mut v = self.finding_identifiers.unwrap_or_default();
        v.push(input);
        self.finding_identifiers = Some(v);
        self
    }
    /// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p>
    /// <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
    pub fn set_finding_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsSecurityFindingIdentifier>>,
    ) -> Self {
        self.finding_identifiers = input;
        self
    }
    /// <p>The updated note.</p>
    pub fn note(mut self, input: crate::types::NoteUpdate) -> Self {
        self.note = Some(input);
        self
    }
    /// <p>The updated note.</p>
    pub fn set_note(mut self, input: std::option::Option<crate::types::NoteUpdate>) -> Self {
        self.note = input;
        self
    }
    /// <p>Used to update the finding severity.</p>
    pub fn severity(mut self, input: crate::types::SeverityUpdate) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>Used to update the finding severity.</p>
    pub fn set_severity(
        mut self,
        input: std::option::Option<crate::types::SeverityUpdate>,
    ) -> Self {
        self.severity = input;
        self
    }
    /// <p>Indicates the veracity of a finding.</p>
    /// <p>The available values for <code>VerificationState</code> are as follows.</p>
    /// <ul>
    /// <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li>
    /// <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li>
    /// <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li>
    /// <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li>
    /// </ul>
    pub fn verification_state(mut self, input: crate::types::VerificationState) -> Self {
        self.verification_state = Some(input);
        self
    }
    /// <p>Indicates the veracity of a finding.</p>
    /// <p>The available values for <code>VerificationState</code> are as follows.</p>
    /// <ul>
    /// <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li>
    /// <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li>
    /// <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li>
    /// <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li>
    /// </ul>
    pub fn set_verification_state(
        mut self,
        input: std::option::Option<crate::types::VerificationState>,
    ) -> Self {
        self.verification_state = input;
        self
    }
    /// <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn confidence(mut self, input: i32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn set_confidence(mut self, input: std::option::Option<i32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The updated value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn criticality(mut self, input: i32) -> Self {
        self.criticality = Some(input);
        self
    }
    /// <p>The updated value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn set_criticality(mut self, input: std::option::Option<i32>) -> Self {
        self.criticality = input;
        self
    }
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p>
    /// <p>Valid namespace values are as follows.</p>
    /// <ul>
    /// <li> <p>Software and Configuration Checks</p> </li>
    /// <li> <p>TTPs</p> </li>
    /// <li> <p>Effects</p> </li>
    /// <li> <p>Unusual Behaviors</p> </li>
    /// <li> <p>Sensitive Data Identifications </p> </li>
    /// </ul>
    pub fn types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = Some(v);
        self
    }
    /// <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p>
    /// <p>Valid namespace values are as follows.</p>
    /// <ul>
    /// <li> <p>Software and Configuration Checks</p> </li>
    /// <li> <p>TTPs</p> </li>
    /// <li> <p>Effects</p> </li>
    /// <li> <p>Unusual Behaviors</p> </li>
    /// <li> <p>Sensitive Data Identifications </p> </li>
    /// </ul>
    pub fn set_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.types = input;
        self
    }
    /// Adds a key-value pair to `user_defined_fields`.
    ///
    /// To override the contents of this collection use [`set_user_defined_fields`](Self::set_user_defined_fields).
    ///
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.</p>
    pub fn user_defined_fields(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.user_defined_fields.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.user_defined_fields = Some(hash_map);
        self
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.</p>
    pub fn set_user_defined_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.user_defined_fields = input;
        self
    }
    /// <p>Used to update the workflow status of a finding.</p>
    /// <p>The workflow status indicates the progress of the investigation into the finding. </p>
    pub fn workflow(mut self, input: crate::types::WorkflowUpdate) -> Self {
        self.workflow = Some(input);
        self
    }
    /// <p>Used to update the workflow status of a finding.</p>
    /// <p>The workflow status indicates the progress of the investigation into the finding. </p>
    pub fn set_workflow(
        mut self,
        input: std::option::Option<crate::types::WorkflowUpdate>,
    ) -> Self {
        self.workflow = input;
        self
    }
    /// Appends an item to `related_findings`.
    ///
    /// To override the contents of this collection use [`set_related_findings`](Self::set_related_findings).
    ///
    /// <p>A list of findings that are related to the updated findings.</p>
    pub fn related_findings(mut self, input: crate::types::RelatedFinding) -> Self {
        let mut v = self.related_findings.unwrap_or_default();
        v.push(input);
        self.related_findings = Some(v);
        self
    }
    /// <p>A list of findings that are related to the updated findings.</p>
    pub fn set_related_findings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
    ) -> Self {
        self.related_findings = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchUpdateFindingsInput`](crate::operation::batch_update_findings::BatchUpdateFindingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::batch_update_findings::BatchUpdateFindingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::batch_update_findings::BatchUpdateFindingsInput {
                finding_identifiers: self.finding_identifiers,
                note: self.note,
                severity: self.severity,
                verification_state: self.verification_state,
                confidence: self.confidence.unwrap_or_default(),
                criticality: self.criticality.unwrap_or_default(),
                types: self.types,
                user_defined_fields: self.user_defined_fields,
                workflow: self.workflow,
                related_findings: self.related_findings,
            },
        )
    }
}
