// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFindingAggregatorOutput {
    /// <p>The ARN of the finding aggregator.</p>
    #[doc(hidden)]
    pub finding_aggregator_arn: std::option::Option<std::string::String>,
    /// <p>The aggregation Region.</p>
    #[doc(hidden)]
    pub finding_aggregation_region: std::option::Option<std::string::String>,
    /// <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    #[doc(hidden)]
    pub region_linking_mode: std::option::Option<std::string::String>,
    /// <p>The list of excluded Regions or included Regions.</p>
    #[doc(hidden)]
    pub regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateFindingAggregatorOutput {
    /// <p>The ARN of the finding aggregator.</p>
    pub fn finding_aggregator_arn(&self) -> std::option::Option<&str> {
        self.finding_aggregator_arn.as_deref()
    }
    /// <p>The aggregation Region.</p>
    pub fn finding_aggregation_region(&self) -> std::option::Option<&str> {
        self.finding_aggregation_region.as_deref()
    }
    /// <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    pub fn region_linking_mode(&self) -> std::option::Option<&str> {
        self.region_linking_mode.as_deref()
    }
    /// <p>The list of excluded Regions or included Regions.</p>
    pub fn regions(&self) -> std::option::Option<&[std::string::String]> {
        self.regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateFindingAggregatorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateFindingAggregatorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingAggregatorOutput`](crate::operation::update_finding_aggregator::UpdateFindingAggregatorOutput).
    pub fn builder(
    ) -> crate::operation::update_finding_aggregator::builders::UpdateFindingAggregatorOutputBuilder
    {
        crate::operation::update_finding_aggregator::builders::UpdateFindingAggregatorOutputBuilder::default()
    }
}

/// A builder for [`UpdateFindingAggregatorOutput`](crate::operation::update_finding_aggregator::UpdateFindingAggregatorOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFindingAggregatorOutputBuilder {
    pub(crate) finding_aggregator_arn: std::option::Option<std::string::String>,
    pub(crate) finding_aggregation_region: std::option::Option<std::string::String>,
    pub(crate) region_linking_mode: std::option::Option<std::string::String>,
    pub(crate) regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateFindingAggregatorOutputBuilder {
    /// <p>The ARN of the finding aggregator.</p>
    pub fn finding_aggregator_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.finding_aggregator_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the finding aggregator.</p>
    pub fn set_finding_aggregator_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.finding_aggregator_arn = input;
        self
    }
    /// <p>The aggregation Region.</p>
    pub fn finding_aggregation_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.finding_aggregation_region = Some(input.into());
        self
    }
    /// <p>The aggregation Region.</p>
    pub fn set_finding_aggregation_region(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.finding_aggregation_region = input;
        self
    }
    /// <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    pub fn region_linking_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_linking_mode = Some(input.into());
        self
    }
    /// <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    pub fn set_region_linking_mode(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.region_linking_mode = input;
        self
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The list of excluded Regions or included Regions.</p>
    pub fn regions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = Some(v);
        self
    }
    /// <p>The list of excluded Regions or included Regions.</p>
    pub fn set_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.regions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFindingAggregatorOutput`](crate::operation::update_finding_aggregator::UpdateFindingAggregatorOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_finding_aggregator::UpdateFindingAggregatorOutput {
        crate::operation::update_finding_aggregator::UpdateFindingAggregatorOutput {
            finding_aggregator_arn: self.finding_aggregator_arn,
            finding_aggregation_region: self.finding_aggregation_region,
            region_linking_mode: self.region_linking_mode,
            regions: self.regions,
            _request_id: self._request_id,
        }
    }
}
