// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_administrator_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.administrator_id {
        object.key("AdministratorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("InvitationId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_accept_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.invitation_id {
        object.key("InvitationId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.master_id {
        object.key("MasterId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.standards_subscription_arns {
        let mut array_6 = object.key("StandardsSubscriptionArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_enable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchEnableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.standards_subscription_requests {
        let mut array_9 = object.key("StandardsSubscriptionRequests").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_standards_subscription_request(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_import_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchImportFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.findings {
        let mut array_13 = object.key("Findings").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_16) = &input.finding_identifiers {
        let mut array_17 = object.key("FindingIdentifiers").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding_identifier(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.note {
        let mut object_21 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.related_findings {
        let mut array_23 = object.key("RelatedFindings").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.severity {
        let mut object_27 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity_update(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.types {
        let mut array_29 = object.key("Types").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.user_defined_fields {
        let mut object_32 = object.key("UserDefinedFields").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34.as_str());
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.verification_state {
        object.key("VerificationState").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workflow {
        let mut object_37 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_update(&mut object_37, var_36)?;
        object_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.id {
        object.key("Id").string(var_39.as_str());
    }
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_41.as_str());
    }
    if let Some(var_42) = &input.regions {
        let mut array_43 = object.key("Regions").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.filters {
        let mut object_46 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_47.as_str());
    }
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.account_details {
        let mut array_50 = object.key("AccountDetails").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_details(
                    &mut object_52,
                    item_51,
                )?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.account_ids {
        let mut array_54 = object.key("AccountIds").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.account_ids {
        let mut array_57 = object.key("AccountIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.account_ids {
        let mut array_60 = object.key("AccountIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.action_target_arns {
        let mut array_63 = object.key("ActionTargetArns").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64.as_str());
            }
        }
        array_63.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_65) = &input.next_token {
        object.key("NextToken").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.account_ids {
        let mut array_68 = object.key("AccountIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_import_findings_for_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableImportFindingsForProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.product_arn {
        object.key("ProductArn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_security_hub_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSecurityHubInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_default_standards {
        object
            .key("EnableDefaultStandards")
            .boolean(input.enable_default_standards);
    }
    if let Some(var_72) = &input.tags {
        let mut object_73 = object.key("Tags").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75.as_str());
            }
        }
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_enabled_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnabledStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    if let Some(var_77) = &input.standards_subscription_arns {
        let mut array_78 = object.key("StandardsSubscriptionArns").start_array();
        for item_79 in var_77 {
            {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.filters {
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.sort_criteria {
        let mut array_84 = object.key("SortCriteria").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.insight_arns {
        let mut array_88 = object.key("InsightArns").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.account_ids {
        let mut array_92 = object.key("AccountIds").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_invite_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.account_ids {
        let mut array_95 = object.key("AccountIds").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.description {
        object.key("Description").string(var_101.as_str());
    }
    if let Some(var_102) = &input.name {
        object.key("Name").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.finding_aggregator_arn {
        object.key("FindingAggregatorArn").string(var_103.as_str());
    }
    if let Some(var_104) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_104.as_str());
    }
    if let Some(var_105) = &input.regions {
        let mut array_106 = object.key("Regions").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.filters {
        let mut object_109 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.note {
        let mut object_111 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.record_state {
        object.key("RecordState").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.filters {
        let mut object_114 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_115.as_str());
    }
    if let Some(var_116) = &input.name {
        object.key("Name").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("AutoEnable").boolean(input.auto_enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_hub_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityHubConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_enable_controls {
        object
            .key("AutoEnableControls")
            .boolean(input.auto_enable_controls);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_standards_control_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStandardsControlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.control_status {
        object.key("ControlStatus").string(var_117.as_str());
    }
    if let Some(var_118) = &input.disabled_reason {
        object.key("DisabledReason").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_standards_subscription_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardsSubscriptionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.standards_arn {
        object.key("StandardsArn").string(var_119.as_str());
    }
    if let Some(var_120) = &input.standards_input {
        let mut object_121 = object.key("StandardsInput").start_object();
        for (key_122, value_123) in var_120 {
            {
                object_121.key(key_122).string(value_123.as_str());
            }
        }
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.schema_version {
        object.key("SchemaVersion").string(var_124.as_str());
    }
    if let Some(var_125) = &input.id {
        object.key("Id").string(var_125.as_str());
    }
    if let Some(var_126) = &input.product_arn {
        object.key("ProductArn").string(var_126.as_str());
    }
    if let Some(var_127) = &input.product_name {
        object.key("ProductName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.company_name {
        object.key("CompanyName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.region {
        object.key("Region").string(var_129.as_str());
    }
    if let Some(var_130) = &input.generator_id {
        object.key("GeneratorId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.types {
        let mut array_133 = object.key("Types").start_array();
        for item_134 in var_132 {
            {
                array_133.value().string(item_134.as_str());
            }
        }
        array_133.finish();
    }
    if let Some(var_135) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_135.as_str());
    }
    if let Some(var_136) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_136.as_str());
    }
    if let Some(var_137) = &input.created_at {
        object.key("CreatedAt").string(var_137.as_str());
    }
    if let Some(var_138) = &input.updated_at {
        object.key("UpdatedAt").string(var_138.as_str());
    }
    if let Some(var_139) = &input.severity {
        let mut object_140 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity(&mut object_140, var_139)?;
        object_140.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_141) = &input.title {
        object.key("Title").string(var_141.as_str());
    }
    if let Some(var_142) = &input.description {
        object.key("Description").string(var_142.as_str());
    }
    if let Some(var_143) = &input.remediation {
        let mut object_144 = object.key("Remediation").start_object();
        crate::json_ser::serialize_structure_crate_model_remediation(&mut object_144, var_143)?;
        object_144.finish();
    }
    if let Some(var_145) = &input.source_url {
        object.key("SourceUrl").string(var_145.as_str());
    }
    if let Some(var_146) = &input.product_fields {
        let mut object_147 = object.key("ProductFields").start_object();
        for (key_148, value_149) in var_146 {
            {
                object_147.key(key_148).string(value_149.as_str());
            }
        }
        object_147.finish();
    }
    if let Some(var_150) = &input.user_defined_fields {
        let mut object_151 = object.key("UserDefinedFields").start_object();
        for (key_152, value_153) in var_150 {
            {
                object_151.key(key_152).string(value_153.as_str());
            }
        }
        object_151.finish();
    }
    if let Some(var_154) = &input.malware {
        let mut array_155 = object.key("Malware").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_crate_model_malware(
                    &mut object_157,
                    item_156,
                )?;
                object_157.finish();
            }
        }
        array_155.finish();
    }
    if let Some(var_158) = &input.network {
        let mut object_159 = object.key("Network").start_object();
        crate::json_ser::serialize_structure_crate_model_network(&mut object_159, var_158)?;
        object_159.finish();
    }
    if let Some(var_160) = &input.network_path {
        let mut array_161 = object.key("NetworkPath").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_network_path_component(
                    &mut object_163,
                    item_162,
                )?;
                object_163.finish();
            }
        }
        array_161.finish();
    }
    if let Some(var_164) = &input.process {
        let mut object_165 = object.key("Process").start_object();
        crate::json_ser::serialize_structure_crate_model_process_details(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.threat_intel_indicators {
        let mut array_167 = object.key("ThreatIntelIndicators").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_threat_intel_indicator(
                    &mut object_169,
                    item_168,
                )?;
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if let Some(var_170) = &input.resources {
        let mut array_171 = object.key("Resources").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource(
                    &mut object_173,
                    item_172,
                )?;
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.compliance {
        let mut object_175 = object.key("Compliance").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance(&mut object_175, var_174)?;
        object_175.finish();
    }
    if let Some(var_176) = &input.verification_state {
        object.key("VerificationState").string(var_176.as_str());
    }
    if let Some(var_177) = &input.workflow_state {
        object.key("WorkflowState").string(var_177.as_str());
    }
    if let Some(var_178) = &input.workflow {
        let mut object_179 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow(&mut object_179, var_178)?;
        object_179.finish();
    }
    if let Some(var_180) = &input.record_state {
        object.key("RecordState").string(var_180.as_str());
    }
    if let Some(var_181) = &input.related_findings {
        let mut array_182 = object.key("RelatedFindings").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.note {
        let mut object_186 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note(&mut object_186, var_185)?;
        object_186.finish();
    }
    if let Some(var_187) = &input.vulnerabilities {
        let mut array_188 = object.key("Vulnerabilities").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_vulnerability(
                    &mut object_190,
                    item_189,
                )?;
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.patch_summary {
        let mut object_192 = object.key("PatchSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_summary(&mut object_192, var_191)?;
        object_192.finish();
    }
    if let Some(var_193) = &input.action {
        let mut object_194 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_194, var_193)?;
        object_194.finish();
    }
    if let Some(var_195) = &input.finding_provider_fields {
        let mut object_196 = object.key("FindingProviderFields").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_fields(
            &mut object_196,
            var_195,
        )?;
        object_196.finish();
    }
    if input.sample {
        object.key("Sample").boolean(input.sample);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.id {
        object.key("Id").string(var_197.as_str());
    }
    if let Some(var_198) = &input.product_arn {
        object.key("ProductArn").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoteUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.text {
        object.key("Text").string(var_199.as_str());
    }
    if let Some(var_200) = &input.updated_by {
        object.key("UpdatedBy").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.product_arn {
        object.key("ProductArn").string(var_201.as_str());
    }
    if let Some(var_202) = &input.id {
        object.key("Id").string(var_202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_203) = &input.label {
        object.key("Label").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.status {
        object.key("Status").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.product_arn {
        let mut array_206 = object.key("ProductArn").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.aws_account_id {
        let mut array_210 = object.key("AwsAccountId").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.id {
        let mut array_214 = object.key("Id").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_216,
                    item_215,
                )?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.generator_id {
        let mut array_218 = object.key("GeneratorId").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_220,
                    item_219,
                )?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.region {
        let mut array_222 = object.key("Region").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.r#type {
        let mut array_226 = object.key("Type").start_array();
        for item_227 in var_225 {
            {
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_228,
                    item_227,
                )?;
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.first_observed_at {
        let mut array_230 = object.key("FirstObservedAt").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_232,
                    item_231,
                )?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.last_observed_at {
        let mut array_234 = object.key("LastObservedAt").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_236,
                    item_235,
                )?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.created_at {
        let mut array_238 = object.key("CreatedAt").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.updated_at {
        let mut array_242 = object.key("UpdatedAt").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.severity_product {
        let mut array_246 = object.key("SeverityProduct").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.severity_normalized {
        let mut array_250 = object.key("SeverityNormalized").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_252,
                    item_251,
                )?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.severity_label {
        let mut array_254 = object.key("SeverityLabel").start_array();
        for item_255 in var_253 {
            {
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_256,
                    item_255,
                )?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.confidence {
        let mut array_258 = object.key("Confidence").start_array();
        for item_259 in var_257 {
            {
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_260,
                    item_259,
                )?;
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.criticality {
        let mut array_262 = object.key("Criticality").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_264,
                    item_263,
                )?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.title {
        let mut array_266 = object.key("Title").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_268,
                    item_267,
                )?;
                object_268.finish();
            }
        }
        array_266.finish();
    }
    if let Some(var_269) = &input.description {
        let mut array_270 = object.key("Description").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_272,
                    item_271,
                )?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.recommendation_text {
        let mut array_274 = object.key("RecommendationText").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_276,
                    item_275,
                )?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    if let Some(var_277) = &input.source_url {
        let mut array_278 = object.key("SourceUrl").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.product_fields {
        let mut array_282 = object.key("ProductFields").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_284,
                    item_283,
                )?;
                object_284.finish();
            }
        }
        array_282.finish();
    }
    if let Some(var_285) = &input.product_name {
        let mut array_286 = object.key("ProductName").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    if let Some(var_289) = &input.company_name {
        let mut array_290 = object.key("CompanyName").start_array();
        for item_291 in var_289 {
            {
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_292,
                    item_291,
                )?;
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.user_defined_fields {
        let mut array_294 = object.key("UserDefinedFields").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.malware_name {
        let mut array_298 = object.key("MalwareName").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_300,
                    item_299,
                )?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.malware_type {
        let mut array_302 = object.key("MalwareType").start_array();
        for item_303 in var_301 {
            {
                let mut object_304 = array_302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_304,
                    item_303,
                )?;
                object_304.finish();
            }
        }
        array_302.finish();
    }
    if let Some(var_305) = &input.malware_path {
        let mut array_306 = object.key("MalwarePath").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.malware_state {
        let mut array_310 = object.key("MalwareState").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.network_direction {
        let mut array_314 = object.key("NetworkDirection").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_316,
                    item_315,
                )?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.network_protocol {
        let mut array_318 = object.key("NetworkProtocol").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.network_source_ip_v4 {
        let mut array_322 = object.key("NetworkSourceIpV4").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_324,
                    item_323,
                )?;
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.network_source_ip_v6 {
        let mut array_326 = object.key("NetworkSourceIpV6").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.network_source_port {
        let mut array_330 = object.key("NetworkSourcePort").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.network_source_domain {
        let mut array_334 = object.key("NetworkSourceDomain").start_array();
        for item_335 in var_333 {
            {
                let mut object_336 = array_334.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_336,
                    item_335,
                )?;
                object_336.finish();
            }
        }
        array_334.finish();
    }
    if let Some(var_337) = &input.network_source_mac {
        let mut array_338 = object.key("NetworkSourceMac").start_array();
        for item_339 in var_337 {
            {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_340,
                    item_339,
                )?;
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.network_destination_ip_v4 {
        let mut array_342 = object.key("NetworkDestinationIpV4").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_344,
                    item_343,
                )?;
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.network_destination_ip_v6 {
        let mut array_346 = object.key("NetworkDestinationIpV6").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_348,
                    item_347,
                )?;
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.network_destination_port {
        let mut array_350 = object.key("NetworkDestinationPort").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_352,
                    item_351,
                )?;
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.network_destination_domain {
        let mut array_354 = object.key("NetworkDestinationDomain").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_356,
                    item_355,
                )?;
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.process_name {
        let mut array_358 = object.key("ProcessName").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.process_path {
        let mut array_362 = object.key("ProcessPath").start_array();
        for item_363 in var_361 {
            {
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_364,
                    item_363,
                )?;
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.process_pid {
        let mut array_366 = object.key("ProcessPid").start_array();
        for item_367 in var_365 {
            {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_368,
                    item_367,
                )?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.process_parent_pid {
        let mut array_370 = object.key("ProcessParentPid").start_array();
        for item_371 in var_369 {
            {
                let mut object_372 = array_370.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_372,
                    item_371,
                )?;
                object_372.finish();
            }
        }
        array_370.finish();
    }
    if let Some(var_373) = &input.process_launched_at {
        let mut array_374 = object.key("ProcessLaunchedAt").start_array();
        for item_375 in var_373 {
            {
                let mut object_376 = array_374.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_376,
                    item_375,
                )?;
                object_376.finish();
            }
        }
        array_374.finish();
    }
    if let Some(var_377) = &input.process_terminated_at {
        let mut array_378 = object.key("ProcessTerminatedAt").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_380,
                    item_379,
                )?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.threat_intel_indicator_type {
        let mut array_382 = object.key("ThreatIntelIndicatorType").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_384,
                    item_383,
                )?;
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.threat_intel_indicator_value {
        let mut array_386 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_387 in var_385 {
            {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_388,
                    item_387,
                )?;
                object_388.finish();
            }
        }
        array_386.finish();
    }
    if let Some(var_389) = &input.threat_intel_indicator_category {
        let mut array_390 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_392,
                    item_391,
                )?;
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.threat_intel_indicator_last_observed_at {
        let mut array_394 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.threat_intel_indicator_source {
        let mut array_398 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_400,
                    item_399,
                )?;
                object_400.finish();
            }
        }
        array_398.finish();
    }
    if let Some(var_401) = &input.threat_intel_indicator_source_url {
        let mut array_402 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_404,
                    item_403,
                )?;
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.resource_type {
        let mut array_406 = object.key("ResourceType").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_408,
                    item_407,
                )?;
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.resource_id {
        let mut array_410 = object.key("ResourceId").start_array();
        for item_411 in var_409 {
            {
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_412,
                    item_411,
                )?;
                object_412.finish();
            }
        }
        array_410.finish();
    }
    if let Some(var_413) = &input.resource_partition {
        let mut array_414 = object.key("ResourcePartition").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_416,
                    item_415,
                )?;
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.resource_region {
        let mut array_418 = object.key("ResourceRegion").start_array();
        for item_419 in var_417 {
            {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_420,
                    item_419,
                )?;
                object_420.finish();
            }
        }
        array_418.finish();
    }
    if let Some(var_421) = &input.resource_tags {
        let mut array_422 = object.key("ResourceTags").start_array();
        for item_423 in var_421 {
            {
                let mut object_424 = array_422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_424,
                    item_423,
                )?;
                object_424.finish();
            }
        }
        array_422.finish();
    }
    if let Some(var_425) = &input.resource_aws_ec2_instance_type {
        let mut array_426 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_428,
                    item_427,
                )?;
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.resource_aws_ec2_instance_image_id {
        let mut array_430 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_431 in var_429 {
            {
                let mut object_432 = array_430.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_432,
                    item_431,
                )?;
                object_432.finish();
            }
        }
        array_430.finish();
    }
    if let Some(var_433) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_434 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_436,
                    item_435,
                )?;
                object_436.finish();
            }
        }
        array_434.finish();
    }
    if let Some(var_437) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_438 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_440,
                    item_439,
                )?;
                object_440.finish();
            }
        }
        array_438.finish();
    }
    if let Some(var_441) = &input.resource_aws_ec2_instance_key_name {
        let mut array_442 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_444,
                    item_443,
                )?;
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_446 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_450 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_451 in var_449 {
            {
                let mut object_452 = array_450.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_452,
                    item_451,
                )?;
                object_452.finish();
            }
        }
        array_450.finish();
    }
    if let Some(var_453) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_454 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_455 in var_453 {
            {
                let mut object_456 = array_454.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_456,
                    item_455,
                )?;
                object_456.finish();
            }
        }
        array_454.finish();
    }
    if let Some(var_457) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_458 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_459 in var_457 {
            {
                let mut object_460 = array_458.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_460,
                    item_459,
                )?;
                object_460.finish();
            }
        }
        array_458.finish();
    }
    if let Some(var_461) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_462 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_463 in var_461 {
            {
                let mut object_464 = array_462.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_464,
                    item_463,
                )?;
                object_464.finish();
            }
        }
        array_462.finish();
    }
    if let Some(var_465) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_466 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_467 in var_465 {
            {
                let mut object_468 = array_466.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_468,
                    item_467,
                )?;
                object_468.finish();
            }
        }
        array_466.finish();
    }
    if let Some(var_469) = &input.resource_aws_iam_access_key_user_name {
        let mut array_470 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_471 in var_469 {
            {
                let mut object_472 = array_470.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_472,
                    item_471,
                )?;
                object_472.finish();
            }
        }
        array_470.finish();
    }
    if let Some(var_473) = &input.resource_aws_iam_access_key_principal_name {
        let mut array_474 = object
            .key("ResourceAwsIamAccessKeyPrincipalName")
            .start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_476,
                    item_475,
                )?;
                object_476.finish();
            }
        }
        array_474.finish();
    }
    if let Some(var_477) = &input.resource_aws_iam_access_key_status {
        let mut array_478 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_479 in var_477 {
            {
                let mut object_480 = array_478.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_480,
                    item_479,
                )?;
                object_480.finish();
            }
        }
        array_478.finish();
    }
    if let Some(var_481) = &input.resource_aws_iam_access_key_created_at {
        let mut array_482 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_483 in var_481 {
            {
                let mut object_484 = array_482.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_484,
                    item_483,
                )?;
                object_484.finish();
            }
        }
        array_482.finish();
    }
    if let Some(var_485) = &input.resource_aws_iam_user_user_name {
        let mut array_486 = object.key("ResourceAwsIamUserUserName").start_array();
        for item_487 in var_485 {
            {
                let mut object_488 = array_486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_488,
                    item_487,
                )?;
                object_488.finish();
            }
        }
        array_486.finish();
    }
    if let Some(var_489) = &input.resource_container_name {
        let mut array_490 = object.key("ResourceContainerName").start_array();
        for item_491 in var_489 {
            {
                let mut object_492 = array_490.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_492,
                    item_491,
                )?;
                object_492.finish();
            }
        }
        array_490.finish();
    }
    if let Some(var_493) = &input.resource_container_image_id {
        let mut array_494 = object.key("ResourceContainerImageId").start_array();
        for item_495 in var_493 {
            {
                let mut object_496 = array_494.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_496,
                    item_495,
                )?;
                object_496.finish();
            }
        }
        array_494.finish();
    }
    if let Some(var_497) = &input.resource_container_image_name {
        let mut array_498 = object.key("ResourceContainerImageName").start_array();
        for item_499 in var_497 {
            {
                let mut object_500 = array_498.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_500,
                    item_499,
                )?;
                object_500.finish();
            }
        }
        array_498.finish();
    }
    if let Some(var_501) = &input.resource_container_launched_at {
        let mut array_502 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_503 in var_501 {
            {
                let mut object_504 = array_502.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_504,
                    item_503,
                )?;
                object_504.finish();
            }
        }
        array_502.finish();
    }
    if let Some(var_505) = &input.resource_details_other {
        let mut array_506 = object.key("ResourceDetailsOther").start_array();
        for item_507 in var_505 {
            {
                let mut object_508 = array_506.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_508,
                    item_507,
                )?;
                object_508.finish();
            }
        }
        array_506.finish();
    }
    if let Some(var_509) = &input.compliance_status {
        let mut array_510 = object.key("ComplianceStatus").start_array();
        for item_511 in var_509 {
            {
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_512,
                    item_511,
                )?;
                object_512.finish();
            }
        }
        array_510.finish();
    }
    if let Some(var_513) = &input.verification_state {
        let mut array_514 = object.key("VerificationState").start_array();
        for item_515 in var_513 {
            {
                let mut object_516 = array_514.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_516,
                    item_515,
                )?;
                object_516.finish();
            }
        }
        array_514.finish();
    }
    if let Some(var_517) = &input.workflow_state {
        let mut array_518 = object.key("WorkflowState").start_array();
        for item_519 in var_517 {
            {
                let mut object_520 = array_518.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_520,
                    item_519,
                )?;
                object_520.finish();
            }
        }
        array_518.finish();
    }
    if let Some(var_521) = &input.workflow_status {
        let mut array_522 = object.key("WorkflowStatus").start_array();
        for item_523 in var_521 {
            {
                let mut object_524 = array_522.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_524,
                    item_523,
                )?;
                object_524.finish();
            }
        }
        array_522.finish();
    }
    if let Some(var_525) = &input.record_state {
        let mut array_526 = object.key("RecordState").start_array();
        for item_527 in var_525 {
            {
                let mut object_528 = array_526.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_528,
                    item_527,
                )?;
                object_528.finish();
            }
        }
        array_526.finish();
    }
    if let Some(var_529) = &input.related_findings_product_arn {
        let mut array_530 = object.key("RelatedFindingsProductArn").start_array();
        for item_531 in var_529 {
            {
                let mut object_532 = array_530.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_532,
                    item_531,
                )?;
                object_532.finish();
            }
        }
        array_530.finish();
    }
    if let Some(var_533) = &input.related_findings_id {
        let mut array_534 = object.key("RelatedFindingsId").start_array();
        for item_535 in var_533 {
            {
                let mut object_536 = array_534.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_536,
                    item_535,
                )?;
                object_536.finish();
            }
        }
        array_534.finish();
    }
    if let Some(var_537) = &input.note_text {
        let mut array_538 = object.key("NoteText").start_array();
        for item_539 in var_537 {
            {
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_540,
                    item_539,
                )?;
                object_540.finish();
            }
        }
        array_538.finish();
    }
    if let Some(var_541) = &input.note_updated_at {
        let mut array_542 = object.key("NoteUpdatedAt").start_array();
        for item_543 in var_541 {
            {
                let mut object_544 = array_542.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_544,
                    item_543,
                )?;
                object_544.finish();
            }
        }
        array_542.finish();
    }
    if let Some(var_545) = &input.note_updated_by {
        let mut array_546 = object.key("NoteUpdatedBy").start_array();
        for item_547 in var_545 {
            {
                let mut object_548 = array_546.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_548,
                    item_547,
                )?;
                object_548.finish();
            }
        }
        array_546.finish();
    }
    if let Some(var_549) = &input.keyword {
        let mut array_550 = object.key("Keyword").start_array();
        for item_551 in var_549 {
            {
                let mut object_552 = array_550.value().start_object();
                crate::json_ser::serialize_structure_crate_model_keyword_filter(
                    &mut object_552,
                    item_551,
                )?;
                object_552.finish();
            }
        }
        array_550.finish();
    }
    if let Some(var_553) = &input.finding_provider_fields_confidence {
        let mut array_554 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_555 in var_553 {
            {
                let mut object_556 = array_554.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_556,
                    item_555,
                )?;
                object_556.finish();
            }
        }
        array_554.finish();
    }
    if let Some(var_557) = &input.finding_provider_fields_criticality {
        let mut array_558 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_559 in var_557 {
            {
                let mut object_560 = array_558.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_560,
                    item_559,
                )?;
                object_560.finish();
            }
        }
        array_558.finish();
    }
    if let Some(var_561) = &input.finding_provider_fields_related_findings_id {
        let mut array_562 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_563 in var_561 {
            {
                let mut object_564 = array_562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_564,
                    item_563,
                )?;
                object_564.finish();
            }
        }
        array_562.finish();
    }
    if let Some(var_565) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_566 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_567 in var_565 {
            {
                let mut object_568 = array_566.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_568,
                    item_567,
                )?;
                object_568.finish();
            }
        }
        array_566.finish();
    }
    if let Some(var_569) = &input.finding_provider_fields_severity_label {
        let mut array_570 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_571 in var_569 {
            {
                let mut object_572 = array_570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_572,
                    item_571,
                )?;
                object_572.finish();
            }
        }
        array_570.finish();
    }
    if let Some(var_573) = &input.finding_provider_fields_severity_original {
        let mut array_574 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_575 in var_573 {
            {
                let mut object_576 = array_574.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_576,
                    item_575,
                )?;
                object_576.finish();
            }
        }
        array_574.finish();
    }
    if let Some(var_577) = &input.finding_provider_fields_types {
        let mut array_578 = object.key("FindingProviderFieldsTypes").start_array();
        for item_579 in var_577 {
            {
                let mut object_580 = array_578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_580,
                    item_579,
                )?;
                object_580.finish();
            }
        }
        array_578.finish();
    }
    if let Some(var_581) = &input.sample {
        let mut array_582 = object.key("Sample").start_array();
        for item_583 in var_581 {
            {
                let mut object_584 = array_582.value().start_object();
                crate::json_ser::serialize_structure_crate_model_boolean_filter(
                    &mut object_584,
                    item_583,
                )?;
                object_584.finish();
            }
        }
        array_582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.account_id {
        object.key("AccountId").string(var_585.as_str());
    }
    if let Some(var_586) = &input.email {
        object.key("Email").string(var_586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.field {
        object.key("Field").string(var_587.as_str());
    }
    if let Some(var_588) = &input.sort_order {
        object.key("SortOrder").string(var_588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Severity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_589) = &input.label {
        object.key("Label").string(var_589.as_str());
    }
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if let Some(var_590) = &input.original {
        object.key("Original").string(var_590.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Remediation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.recommendation {
        let mut object_592 = object.key("Recommendation").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation(&mut object_592, var_591)?;
        object_592.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_malware(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Malware,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_593) = &input.name {
        object.key("Name").string(var_593.as_str());
    }
    if let Some(var_594) = &input.r#type {
        object.key("Type").string(var_594.as_str());
    }
    if let Some(var_595) = &input.path {
        object.key("Path").string(var_595.as_str());
    }
    if let Some(var_596) = &input.state {
        object.key("State").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Network,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.direction {
        object.key("Direction").string(var_597.as_str());
    }
    if let Some(var_598) = &input.protocol {
        object.key("Protocol").string(var_598.as_str());
    }
    if let Some(var_599) = &input.open_port_range {
        let mut object_600 = object.key("OpenPortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range(&mut object_600, var_599)?;
        object_600.finish();
    }
    if let Some(var_601) = &input.source_ip_v4 {
        object.key("SourceIpV4").string(var_601.as_str());
    }
    if let Some(var_602) = &input.source_ip_v6 {
        object.key("SourceIpV6").string(var_602.as_str());
    }
    if input.source_port != 0 {
        object.key("SourcePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.source_port).into()),
        );
    }
    if let Some(var_603) = &input.source_domain {
        object.key("SourceDomain").string(var_603.as_str());
    }
    if let Some(var_604) = &input.source_mac {
        object.key("SourceMac").string(var_604.as_str());
    }
    if let Some(var_605) = &input.destination_ip_v4 {
        object.key("DestinationIpV4").string(var_605.as_str());
    }
    if let Some(var_606) = &input.destination_ip_v6 {
        object.key("DestinationIpV6").string(var_606.as_str());
    }
    if input.destination_port != 0 {
        object.key("DestinationPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_607) = &input.destination_domain {
        object.key("DestinationDomain").string(var_607.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_608) = &input.component_id {
        object.key("ComponentId").string(var_608.as_str());
    }
    if let Some(var_609) = &input.component_type {
        object.key("ComponentType").string(var_609.as_str());
    }
    if let Some(var_610) = &input.egress {
        let mut object_611 = object.key("Egress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_611, var_610)?;
        object_611.finish();
    }
    if let Some(var_612) = &input.ingress {
        let mut object_613 = object.key("Ingress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_613, var_612)?;
        object_613.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_process_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.name {
        object.key("Name").string(var_614.as_str());
    }
    if let Some(var_615) = &input.path {
        object.key("Path").string(var_615.as_str());
    }
    if input.pid != 0 {
        object.key("Pid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if input.parent_pid != 0 {
        object.key("ParentPid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.parent_pid).into()),
        );
    }
    if let Some(var_616) = &input.launched_at {
        object.key("LaunchedAt").string(var_616.as_str());
    }
    if let Some(var_617) = &input.terminated_at {
        object.key("TerminatedAt").string(var_617.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threat_intel_indicator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThreatIntelIndicator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.r#type {
        object.key("Type").string(var_618.as_str());
    }
    if let Some(var_619) = &input.value {
        object.key("Value").string(var_619.as_str());
    }
    if let Some(var_620) = &input.category {
        object.key("Category").string(var_620.as_str());
    }
    if let Some(var_621) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_621.as_str());
    }
    if let Some(var_622) = &input.source {
        object.key("Source").string(var_622.as_str());
    }
    if let Some(var_623) = &input.source_url {
        object.key("SourceUrl").string(var_623.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.r#type {
        object.key("Type").string(var_624.as_str());
    }
    if let Some(var_625) = &input.id {
        object.key("Id").string(var_625.as_str());
    }
    if let Some(var_626) = &input.partition {
        object.key("Partition").string(var_626.as_str());
    }
    if let Some(var_627) = &input.region {
        object.key("Region").string(var_627.as_str());
    }
    if let Some(var_628) = &input.resource_role {
        object.key("ResourceRole").string(var_628.as_str());
    }
    if let Some(var_629) = &input.tags {
        let mut object_630 = object.key("Tags").start_object();
        for (key_631, value_632) in var_629 {
            {
                object_630.key(key_631).string(value_632.as_str());
            }
        }
        object_630.finish();
    }
    if let Some(var_633) = &input.data_classification {
        let mut object_634 = object.key("DataClassification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_classification_details(
            &mut object_634,
            var_633,
        )?;
        object_634.finish();
    }
    if let Some(var_635) = &input.details {
        let mut object_636 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_details(
            &mut object_636,
            var_635,
        )?;
        object_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compliance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.status {
        object.key("Status").string(var_637.as_str());
    }
    if let Some(var_638) = &input.related_requirements {
        let mut array_639 = object.key("RelatedRequirements").start_array();
        for item_640 in var_638 {
            {
                array_639.value().string(item_640.as_str());
            }
        }
        array_639.finish();
    }
    if let Some(var_641) = &input.status_reasons {
        let mut array_642 = object.key("StatusReasons").start_array();
        for item_643 in var_641 {
            {
                let mut object_644 = array_642.value().start_object();
                crate::json_ser::serialize_structure_crate_model_status_reason(
                    &mut object_644,
                    item_643,
                )?;
                object_644.finish();
            }
        }
        array_642.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Workflow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.status {
        object.key("Status").string(var_645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Note,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.text {
        object.key("Text").string(var_646.as_str());
    }
    if let Some(var_647) = &input.updated_by {
        object.key("UpdatedBy").string(var_647.as_str());
    }
    if let Some(var_648) = &input.updated_at {
        object.key("UpdatedAt").string(var_648.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Vulnerability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_649) = &input.id {
        object.key("Id").string(var_649.as_str());
    }
    if let Some(var_650) = &input.vulnerable_packages {
        let mut array_651 = object.key("VulnerablePackages").start_array();
        for item_652 in var_650 {
            {
                let mut object_653 = array_651.value().start_object();
                crate::json_ser::serialize_structure_crate_model_software_package(
                    &mut object_653,
                    item_652,
                )?;
                object_653.finish();
            }
        }
        array_651.finish();
    }
    if let Some(var_654) = &input.cvss {
        let mut array_655 = object.key("Cvss").start_array();
        for item_656 in var_654 {
            {
                let mut object_657 = array_655.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cvss(&mut object_657, item_656)?;
                object_657.finish();
            }
        }
        array_655.finish();
    }
    if let Some(var_658) = &input.related_vulnerabilities {
        let mut array_659 = object.key("RelatedVulnerabilities").start_array();
        for item_660 in var_658 {
            {
                array_659.value().string(item_660.as_str());
            }
        }
        array_659.finish();
    }
    if let Some(var_661) = &input.vendor {
        let mut object_662 = object.key("Vendor").start_object();
        crate::json_ser::serialize_structure_crate_model_vulnerability_vendor(
            &mut object_662,
            var_661,
        )?;
        object_662.finish();
    }
    if let Some(var_663) = &input.reference_urls {
        let mut array_664 = object.key("ReferenceUrls").start_array();
        for item_665 in var_663 {
            {
                array_664.value().string(item_665.as_str());
            }
        }
        array_664.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_666) = &input.id {
        object.key("Id").string(var_666.as_str());
    }
    if input.installed_count != 0 {
        object.key("InstalledCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_count).into()),
        );
    }
    if input.missing_count != 0 {
        object.key("MissingCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.missing_count).into()),
        );
    }
    if input.failed_count != 0 {
        object.key("FailedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.failed_count).into()),
        );
    }
    if input.installed_other_count != 0 {
        object.key("InstalledOtherCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_other_count).into()),
        );
    }
    if input.installed_rejected_count != 0 {
        object.key("InstalledRejectedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_rejected_count).into()),
        );
    }
    if input.installed_pending_reboot != 0 {
        object.key("InstalledPendingReboot").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_pending_reboot).into()),
        );
    }
    if let Some(var_667) = &input.operation_start_time {
        object.key("OperationStartTime").string(var_667.as_str());
    }
    if let Some(var_668) = &input.operation_end_time {
        object.key("OperationEndTime").string(var_668.as_str());
    }
    if let Some(var_669) = &input.reboot_option {
        object.key("RebootOption").string(var_669.as_str());
    }
    if let Some(var_670) = &input.operation {
        object.key("Operation").string(var_670.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_671) = &input.action_type {
        object.key("ActionType").string(var_671.as_str());
    }
    if let Some(var_672) = &input.network_connection_action {
        let mut object_673 = object.key("NetworkConnectionAction").start_object();
        crate::json_ser::serialize_structure_crate_model_network_connection_action(
            &mut object_673,
            var_672,
        )?;
        object_673.finish();
    }
    if let Some(var_674) = &input.aws_api_call_action {
        let mut object_675 = object.key("AwsApiCallAction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action(
            &mut object_675,
            var_674,
        )?;
        object_675.finish();
    }
    if let Some(var_676) = &input.dns_request_action {
        let mut object_677 = object.key("DnsRequestAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dns_request_action(
            &mut object_677,
            var_676,
        )?;
        object_677.finish();
    }
    if let Some(var_678) = &input.port_probe_action {
        let mut object_679 = object.key("PortProbeAction").start_object();
        crate::json_ser::serialize_structure_crate_model_port_probe_action(
            &mut object_679,
            var_678,
        )?;
        object_679.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_680) = &input.related_findings {
        let mut array_681 = object.key("RelatedFindings").start_array();
        for item_682 in var_680 {
            {
                let mut object_683 = array_681.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_683,
                    item_682,
                )?;
                object_683.finish();
            }
        }
        array_681.finish();
    }
    if let Some(var_684) = &input.severity {
        let mut object_685 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_severity(
            &mut object_685,
            var_684,
        )?;
        object_685.finish();
    }
    if let Some(var_686) = &input.types {
        let mut array_687 = object.key("Types").start_array();
        for item_688 in var_686 {
            {
                array_687.value().string(item_688.as_str());
            }
        }
        array_687.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.value {
        object.key("Value").string(var_689.as_str());
    }
    if let Some(var_690) = &input.comparison {
        object.key("Comparison").string(var_690.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_691) = &input.start {
        object.key("Start").string(var_691.as_str());
    }
    if let Some(var_692) = &input.end {
        object.key("End").string(var_692.as_str());
    }
    if let Some(var_693) = &input.date_range {
        let mut object_694 = object.key("DateRange").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range(&mut object_694, var_693)?;
        object_694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.gte != 0.0 {
        object.key("Gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gte).into()),
        );
    }
    if input.lte != 0.0 {
        object.key("Lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lte).into()),
        );
    }
    if input.eq != 0.0 {
        object.key("Eq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.eq).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.key {
        object.key("Key").string(var_695.as_str());
    }
    if let Some(var_696) = &input.value {
        object.key("Value").string(var_696.as_str());
    }
    if let Some(var_697) = &input.comparison {
        object.key("Comparison").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.cidr {
        object.key("Cidr").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_keyword_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.value {
        object.key("Value").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value {
        object.key("Value").boolean(input.value);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Recommendation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.text {
        object.key("Text").string(var_700.as_str());
    }
    if let Some(var_701) = &input.url {
        object.key("Url").string(var_701.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.begin != 0 {
        object.key("Begin").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.begin).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.protocol {
        object.key("Protocol").string(var_702.as_str());
    }
    if let Some(var_703) = &input.destination {
        let mut object_704 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_704,
            var_703,
        )?;
        object_704.finish();
    }
    if let Some(var_705) = &input.source {
        let mut object_706 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_706,
            var_705,
        )?;
        object_706.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_classification_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataClassificationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.detailed_results_location {
        object
            .key("DetailedResultsLocation")
            .string(var_707.as_str());
    }
    if let Some(var_708) = &input.result {
        let mut object_709 = object.key("Result").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_result(
            &mut object_709,
            var_708,
        )?;
        object_709.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.aws_auto_scaling_auto_scaling_group {
        let mut object_711 = object.key("AwsAutoScalingAutoScalingGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(&mut object_711, var_710)?;
        object_711.finish();
    }
    if let Some(var_712) = &input.aws_code_build_project {
        let mut object_713 = object.key("AwsCodeBuildProject").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_details(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    if let Some(var_714) = &input.aws_cloud_front_distribution {
        let mut object_715 = object.key("AwsCloudFrontDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_details(
            &mut object_715,
            var_714,
        )?;
        object_715.finish();
    }
    if let Some(var_716) = &input.aws_ec2_instance {
        let mut object_717 = object.key("AwsEc2Instance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_details(
            &mut object_717,
            var_716,
        )?;
        object_717.finish();
    }
    if let Some(var_718) = &input.aws_ec2_network_interface {
        let mut object_719 = object.key("AwsEc2NetworkInterface").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_details(
            &mut object_719,
            var_718,
        )?;
        object_719.finish();
    }
    if let Some(var_720) = &input.aws_ec2_security_group {
        let mut object_721 = object.key("AwsEc2SecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_details(
            &mut object_721,
            var_720,
        )?;
        object_721.finish();
    }
    if let Some(var_722) = &input.aws_ec2_volume {
        let mut object_723 = object.key("AwsEc2Volume").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_details(
            &mut object_723,
            var_722,
        )?;
        object_723.finish();
    }
    if let Some(var_724) = &input.aws_ec2_vpc {
        let mut object_725 = object.key("AwsEc2Vpc").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_details(
            &mut object_725,
            var_724,
        )?;
        object_725.finish();
    }
    if let Some(var_726) = &input.aws_ec2_eip {
        let mut object_727 = object.key("AwsEc2Eip").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_eip_details(
            &mut object_727,
            var_726,
        )?;
        object_727.finish();
    }
    if let Some(var_728) = &input.aws_ec2_subnet {
        let mut object_729 = object.key("AwsEc2Subnet").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_subnet_details(
            &mut object_729,
            var_728,
        )?;
        object_729.finish();
    }
    if let Some(var_730) = &input.aws_ec2_network_acl {
        let mut object_731 = object.key("AwsEc2NetworkAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_details(
            &mut object_731,
            var_730,
        )?;
        object_731.finish();
    }
    if let Some(var_732) = &input.aws_elbv2_load_balancer {
        let mut object_733 = object.key("AwsElbv2LoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_details(
            &mut object_733,
            var_732,
        )?;
        object_733.finish();
    }
    if let Some(var_734) = &input.aws_elastic_beanstalk_environment {
        let mut object_735 = object.key("AwsElasticBeanstalkEnvironment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
            &mut object_735,
            var_734,
        )?;
        object_735.finish();
    }
    if let Some(var_736) = &input.aws_elasticsearch_domain {
        let mut object_737 = object.key("AwsElasticsearchDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_details(
            &mut object_737,
            var_736,
        )?;
        object_737.finish();
    }
    if let Some(var_738) = &input.aws_s3_bucket {
        let mut object_739 = object.key("AwsS3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_details(
            &mut object_739,
            var_738,
        )?;
        object_739.finish();
    }
    if let Some(var_740) = &input.aws_s3_account_public_access_block {
        let mut object_741 = object.key("AwsS3AccountPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_741, var_740)?;
        object_741.finish();
    }
    if let Some(var_742) = &input.aws_s3_object {
        let mut object_743 = object.key("AwsS3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_object_details(
            &mut object_743,
            var_742,
        )?;
        object_743.finish();
    }
    if let Some(var_744) = &input.aws_secrets_manager_secret {
        let mut object_745 = object.key("AwsSecretsManagerSecret").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_details(
            &mut object_745,
            var_744,
        )?;
        object_745.finish();
    }
    if let Some(var_746) = &input.aws_iam_access_key {
        let mut object_747 = object.key("AwsIamAccessKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_details(
            &mut object_747,
            var_746,
        )?;
        object_747.finish();
    }
    if let Some(var_748) = &input.aws_iam_user {
        let mut object_749 = object.key("AwsIamUser").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_user_details(
            &mut object_749,
            var_748,
        )?;
        object_749.finish();
    }
    if let Some(var_750) = &input.aws_iam_policy {
        let mut object_751 = object.key("AwsIamPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_policy_details(
            &mut object_751,
            var_750,
        )?;
        object_751.finish();
    }
    if let Some(var_752) = &input.aws_api_gateway_v2_stage {
        let mut object_753 = object.key("AwsApiGatewayV2Stage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
            &mut object_753,
            var_752,
        )?;
        object_753.finish();
    }
    if let Some(var_754) = &input.aws_api_gateway_v2_api {
        let mut object_755 = object.key("AwsApiGatewayV2Api").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_api_details(
            &mut object_755,
            var_754,
        )?;
        object_755.finish();
    }
    if let Some(var_756) = &input.aws_dynamo_db_table {
        let mut object_757 = object.key("AwsDynamoDbTable").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_details(
            &mut object_757,
            var_756,
        )?;
        object_757.finish();
    }
    if let Some(var_758) = &input.aws_api_gateway_stage {
        let mut object_759 = object.key("AwsApiGatewayStage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_stage_details(
            &mut object_759,
            var_758,
        )?;
        object_759.finish();
    }
    if let Some(var_760) = &input.aws_api_gateway_rest_api {
        let mut object_761 = object.key("AwsApiGatewayRestApi").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_rest_api_details(
            &mut object_761,
            var_760,
        )?;
        object_761.finish();
    }
    if let Some(var_762) = &input.aws_cloud_trail_trail {
        let mut object_763 = object.key("AwsCloudTrailTrail").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_trail_trail_details(
            &mut object_763,
            var_762,
        )?;
        object_763.finish();
    }
    if let Some(var_764) = &input.aws_ssm_patch_compliance {
        let mut object_765 = object.key("AwsSsmPatchCompliance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch_compliance_details(
            &mut object_765,
            var_764,
        )?;
        object_765.finish();
    }
    if let Some(var_766) = &input.aws_certificate_manager_certificate {
        let mut object_767 = object
            .key("AwsCertificateManagerCertificate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_details(&mut object_767, var_766)?;
        object_767.finish();
    }
    if let Some(var_768) = &input.aws_redshift_cluster {
        let mut object_769 = object.key("AwsRedshiftCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_details(
            &mut object_769,
            var_768,
        )?;
        object_769.finish();
    }
    if let Some(var_770) = &input.aws_elb_load_balancer {
        let mut object_771 = object.key("AwsElbLoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_details(
            &mut object_771,
            var_770,
        )?;
        object_771.finish();
    }
    if let Some(var_772) = &input.aws_iam_group {
        let mut object_773 = object.key("AwsIamGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_group_details(
            &mut object_773,
            var_772,
        )?;
        object_773.finish();
    }
    if let Some(var_774) = &input.aws_iam_role {
        let mut object_775 = object.key("AwsIamRole").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_role_details(
            &mut object_775,
            var_774,
        )?;
        object_775.finish();
    }
    if let Some(var_776) = &input.aws_kms_key {
        let mut object_777 = object.key("AwsKmsKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_kms_key_details(
            &mut object_777,
            var_776,
        )?;
        object_777.finish();
    }
    if let Some(var_778) = &input.aws_lambda_function {
        let mut object_779 = object.key("AwsLambdaFunction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_details(
            &mut object_779,
            var_778,
        )?;
        object_779.finish();
    }
    if let Some(var_780) = &input.aws_lambda_layer_version {
        let mut object_781 = object.key("AwsLambdaLayerVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_layer_version_details(
            &mut object_781,
            var_780,
        )?;
        object_781.finish();
    }
    if let Some(var_782) = &input.aws_rds_db_instance {
        let mut object_783 = object.key("AwsRdsDbInstance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_details(
            &mut object_783,
            var_782,
        )?;
        object_783.finish();
    }
    if let Some(var_784) = &input.aws_sns_topic {
        let mut object_785 = object.key("AwsSnsTopic").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sns_topic_details(
            &mut object_785,
            var_784,
        )?;
        object_785.finish();
    }
    if let Some(var_786) = &input.aws_sqs_queue {
        let mut object_787 = object.key("AwsSqsQueue").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sqs_queue_details(
            &mut object_787,
            var_786,
        )?;
        object_787.finish();
    }
    if let Some(var_788) = &input.aws_waf_web_acl {
        let mut object_789 = object.key("AwsWafWebAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_details(
            &mut object_789,
            var_788,
        )?;
        object_789.finish();
    }
    if let Some(var_790) = &input.aws_rds_db_snapshot {
        let mut object_791 = object.key("AwsRdsDbSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_snapshot_details(
            &mut object_791,
            var_790,
        )?;
        object_791.finish();
    }
    if let Some(var_792) = &input.aws_rds_db_cluster_snapshot {
        let mut object_793 = object.key("AwsRdsDbClusterSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
            &mut object_793,
            var_792,
        )?;
        object_793.finish();
    }
    if let Some(var_794) = &input.aws_rds_db_cluster {
        let mut object_795 = object.key("AwsRdsDbCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_details(
            &mut object_795,
            var_794,
        )?;
        object_795.finish();
    }
    if let Some(var_796) = &input.aws_ecs_cluster {
        let mut object_797 = object.key("AwsEcsCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_details(
            &mut object_797,
            var_796,
        )?;
        object_797.finish();
    }
    if let Some(var_798) = &input.aws_ecs_task_definition {
        let mut object_799 = object.key("AwsEcsTaskDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_details(
            &mut object_799,
            var_798,
        )?;
        object_799.finish();
    }
    if let Some(var_800) = &input.container {
        let mut object_801 = object.key("Container").start_object();
        crate::json_ser::serialize_structure_crate_model_container_details(
            &mut object_801,
            var_800,
        )?;
        object_801.finish();
    }
    if let Some(var_802) = &input.other {
        let mut object_803 = object.key("Other").start_object();
        for (key_804, value_805) in var_802 {
            {
                object_803.key(key_804).string(value_805.as_str());
            }
        }
        object_803.finish();
    }
    if let Some(var_806) = &input.aws_rds_event_subscription {
        let mut object_807 = object.key("AwsRdsEventSubscription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_event_subscription_details(
            &mut object_807,
            var_806,
        )?;
        object_807.finish();
    }
    if let Some(var_808) = &input.aws_ecs_service {
        let mut object_809 = object.key("AwsEcsService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_details(
            &mut object_809,
            var_808,
        )?;
        object_809.finish();
    }
    if let Some(var_810) = &input.aws_auto_scaling_launch_configuration {
        let mut object_811 = object
            .key("AwsAutoScalingLaunchConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(&mut object_811, var_810)?;
        object_811.finish();
    }
    if let Some(var_812) = &input.aws_ec2_vpn_connection {
        let mut object_813 = object.key("AwsEc2VpnConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_details(
            &mut object_813,
            var_812,
        )?;
        object_813.finish();
    }
    if let Some(var_814) = &input.aws_ecr_container_image {
        let mut object_815 = object.key("AwsEcrContainerImage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_container_image_details(
            &mut object_815,
            var_814,
        )?;
        object_815.finish();
    }
    if let Some(var_816) = &input.aws_open_search_service_domain {
        let mut object_817 = object.key("AwsOpenSearchServiceDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_details(
            &mut object_817,
            var_816,
        )?;
        object_817.finish();
    }
    if let Some(var_818) = &input.aws_ec2_vpc_endpoint_service {
        let mut object_819 = object.key("AwsEc2VpcEndpointService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
            &mut object_819,
            var_818,
        )?;
        object_819.finish();
    }
    if let Some(var_820) = &input.aws_xray_encryption_config {
        let mut object_821 = object.key("AwsXrayEncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_xray_encryption_config_details(
            &mut object_821,
            var_820,
        )?;
        object_821.finish();
    }
    if let Some(var_822) = &input.aws_waf_rate_based_rule {
        let mut object_823 = object.key("AwsWafRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_details(
            &mut object_823,
            var_822,
        )?;
        object_823.finish();
    }
    if let Some(var_824) = &input.aws_waf_regional_rate_based_rule {
        let mut object_825 = object.key("AwsWafRegionalRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
            &mut object_825,
            var_824,
        )?;
        object_825.finish();
    }
    if let Some(var_826) = &input.aws_ecr_repository {
        let mut object_827 = object.key("AwsEcrRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_details(
            &mut object_827,
            var_826,
        )?;
        object_827.finish();
    }
    if let Some(var_828) = &input.aws_eks_cluster {
        let mut object_829 = object.key("AwsEksCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_details(
            &mut object_829,
            var_828,
        )?;
        object_829.finish();
    }
    if let Some(var_830) = &input.aws_network_firewall_firewall_policy {
        let mut object_831 = object
            .key("AwsNetworkFirewallFirewallPolicy")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(&mut object_831, var_830)?;
        object_831.finish();
    }
    if let Some(var_832) = &input.aws_network_firewall_firewall {
        let mut object_833 = object.key("AwsNetworkFirewallFirewall").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_details(
            &mut object_833,
            var_832,
        )?;
        object_833.finish();
    }
    if let Some(var_834) = &input.aws_network_firewall_rule_group {
        let mut object_835 = object.key("AwsNetworkFirewallRuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_rule_group_details(
            &mut object_835,
            var_834,
        )?;
        object_835.finish();
    }
    if let Some(var_836) = &input.aws_rds_db_security_group {
        let mut object_837 = object.key("AwsRdsDbSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_details(
            &mut object_837,
            var_836,
        )?;
        object_837.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_status_reason(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusReason,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_838) = &input.reason_code {
        object.key("ReasonCode").string(var_838.as_str());
    }
    if let Some(var_839) = &input.description {
        object.key("Description").string(var_839.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwarePackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_840) = &input.name {
        object.key("Name").string(var_840.as_str());
    }
    if let Some(var_841) = &input.version {
        object.key("Version").string(var_841.as_str());
    }
    if let Some(var_842) = &input.epoch {
        object.key("Epoch").string(var_842.as_str());
    }
    if let Some(var_843) = &input.release {
        object.key("Release").string(var_843.as_str());
    }
    if let Some(var_844) = &input.architecture {
        object.key("Architecture").string(var_844.as_str());
    }
    if let Some(var_845) = &input.package_manager {
        object.key("PackageManager").string(var_845.as_str());
    }
    if let Some(var_846) = &input.file_path {
        object.key("FilePath").string(var_846.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cvss(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cvss,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_847) = &input.version {
        object.key("Version").string(var_847.as_str());
    }
    if input.base_score != 0.0 {
        object.key("BaseScore").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.base_score).into()),
        );
    }
    if let Some(var_848) = &input.base_vector {
        object.key("BaseVector").string(var_848.as_str());
    }
    if let Some(var_849) = &input.source {
        object.key("Source").string(var_849.as_str());
    }
    if let Some(var_850) = &input.adjustments {
        let mut array_851 = object.key("Adjustments").start_array();
        for item_852 in var_850 {
            {
                let mut object_853 = array_851.value().start_object();
                crate::json_ser::serialize_structure_crate_model_adjustment(
                    &mut object_853,
                    item_852,
                )?;
                object_853.finish();
            }
        }
        array_851.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability_vendor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VulnerabilityVendor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_854) = &input.name {
        object.key("Name").string(var_854.as_str());
    }
    if let Some(var_855) = &input.url {
        object.key("Url").string(var_855.as_str());
    }
    if let Some(var_856) = &input.vendor_severity {
        object.key("VendorSeverity").string(var_856.as_str());
    }
    if let Some(var_857) = &input.vendor_created_at {
        object.key("VendorCreatedAt").string(var_857.as_str());
    }
    if let Some(var_858) = &input.vendor_updated_at {
        object.key("VendorUpdatedAt").string(var_858.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_connection_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConnectionAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_859) = &input.connection_direction {
        object.key("ConnectionDirection").string(var_859.as_str());
    }
    if let Some(var_860) = &input.remote_ip_details {
        let mut object_861 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_861,
            var_860,
        )?;
        object_861.finish();
    }
    if let Some(var_862) = &input.remote_port_details {
        let mut object_863 = object.key("RemotePortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_port_details(
            &mut object_863,
            var_862,
        )?;
        object_863.finish();
    }
    if let Some(var_864) = &input.local_port_details {
        let mut object_865 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_865,
            var_864,
        )?;
        object_865.finish();
    }
    if let Some(var_866) = &input.protocol {
        object.key("Protocol").string(var_866.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_867) = &input.api {
        object.key("Api").string(var_867.as_str());
    }
    if let Some(var_868) = &input.service_name {
        object.key("ServiceName").string(var_868.as_str());
    }
    if let Some(var_869) = &input.caller_type {
        object.key("CallerType").string(var_869.as_str());
    }
    if let Some(var_870) = &input.remote_ip_details {
        let mut object_871 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_871,
            var_870,
        )?;
        object_871.finish();
    }
    if let Some(var_872) = &input.domain_details {
        let mut object_873 = object.key("DomainDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action_domain_details(
            &mut object_873,
            var_872,
        )?;
        object_873.finish();
    }
    if let Some(var_874) = &input.affected_resources {
        let mut object_875 = object.key("AffectedResources").start_object();
        for (key_876, value_877) in var_874 {
            {
                object_875.key(key_876).string(value_877.as_str());
            }
        }
        object_875.finish();
    }
    if let Some(var_878) = &input.first_seen {
        object.key("FirstSeen").string(var_878.as_str());
    }
    if let Some(var_879) = &input.last_seen {
        object.key("LastSeen").string(var_879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dns_request_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsRequestAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.domain {
        object.key("Domain").string(var_880.as_str());
    }
    if let Some(var_881) = &input.protocol {
        object.key("Protocol").string(var_881.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_882) = &input.port_probe_details {
        let mut array_883 = object.key("PortProbeDetails").start_array();
        for item_884 in var_882 {
            {
                let mut object_885 = array_883.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_probe_detail(
                    &mut object_885,
                    item_884,
                )?;
                object_885.finish();
            }
        }
        array_883.finish();
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderSeverity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_886) = &input.label {
        object.key("Label").string(var_886.as_str());
    }
    if let Some(var_887) = &input.original {
        object.key("Original").string(var_887.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value != 0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value).into()),
        );
    }
    if let Some(var_888) = &input.unit {
        object.key("Unit").string(var_888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_889) = &input.address {
        let mut array_890 = object.key("Address").start_array();
        for item_891 in var_889 {
            {
                array_890.value().string(item_891.as_str());
            }
        }
        array_890.finish();
    }
    if let Some(var_892) = &input.port_ranges {
        let mut array_893 = object.key("PortRanges").start_array();
        for item_894 in var_892 {
            {
                let mut object_895 = array_893.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_895,
                    item_894,
                )?;
                object_895.finish();
            }
        }
        array_893.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.mime_type {
        object.key("MimeType").string(var_896.as_str());
    }
    if input.size_classified != 0 {
        object.key("SizeClassified").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size_classified).into()),
        );
    }
    if input.additional_occurrences {
        object
            .key("AdditionalOccurrences")
            .boolean(input.additional_occurrences);
    }
    if let Some(var_897) = &input.status {
        let mut object_898 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_status(
            &mut object_898,
            var_897,
        )?;
        object_898.finish();
    }
    if let Some(var_899) = &input.sensitive_data {
        let mut array_900 = object.key("SensitiveData").start_array();
        for item_901 in var_899 {
            {
                let mut object_902 = array_900.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_result(
                    &mut object_902,
                    item_901,
                )?;
                object_902.finish();
            }
        }
        array_900.finish();
    }
    if let Some(var_903) = &input.custom_data_identifiers {
        let mut object_904 = object.key("CustomDataIdentifiers").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_result(
            &mut object_904,
            var_903,
        )?;
        object_904.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_905) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_905.as_str());
    }
    if let Some(var_906) = &input.load_balancer_names {
        let mut array_907 = object.key("LoadBalancerNames").start_array();
        for item_908 in var_906 {
            {
                array_907.value().string(item_908.as_str());
            }
        }
        array_907.finish();
    }
    if let Some(var_909) = &input.health_check_type {
        object.key("HealthCheckType").string(var_909.as_str());
    }
    if input.health_check_grace_period != 0 {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period).into()),
        );
    }
    if let Some(var_910) = &input.created_time {
        object.key("CreatedTime").string(var_910.as_str());
    }
    if let Some(var_911) = &input.mixed_instances_policy {
        let mut object_912 = object.key("MixedInstancesPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(&mut object_912, var_911)?;
        object_912.finish();
    }
    if let Some(var_913) = &input.availability_zones {
        let mut array_914 = object.key("AvailabilityZones").start_array();
        for item_915 in var_913 {
            {
                let mut object_916 = array_914.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(&mut object_916, item_915)?;
                object_916.finish();
            }
        }
        array_914.finish();
    }
    if let Some(var_917) = &input.launch_template {
        let mut object_918 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(&mut object_918, var_917)?;
        object_918.finish();
    }
    if input.capacity_rebalance {
        object
            .key("CapacityRebalance")
            .boolean(input.capacity_rebalance);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.encryption_key {
        object.key("EncryptionKey").string(var_919.as_str());
    }
    if let Some(var_920) = &input.artifacts {
        let mut array_921 = object.key("Artifacts").start_array();
        for item_922 in var_920 {
            {
                let mut object_923 = array_921.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_923, item_922)?;
                object_923.finish();
            }
        }
        array_921.finish();
    }
    if let Some(var_924) = &input.environment {
        let mut object_925 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment(
            &mut object_925,
            var_924,
        )?;
        object_925.finish();
    }
    if let Some(var_926) = &input.name {
        object.key("Name").string(var_926.as_str());
    }
    if let Some(var_927) = &input.source {
        let mut object_928 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_source(
            &mut object_928,
            var_927,
        )?;
        object_928.finish();
    }
    if let Some(var_929) = &input.service_role {
        object.key("ServiceRole").string(var_929.as_str());
    }
    if let Some(var_930) = &input.logs_config {
        let mut object_931 = object.key("LogsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_details(&mut object_931, var_930)?;
        object_931.finish();
    }
    if let Some(var_932) = &input.vpc_config {
        let mut object_933 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_vpc_config(
            &mut object_933,
            var_932,
        )?;
        object_933.finish();
    }
    if let Some(var_934) = &input.secondary_artifacts {
        let mut array_935 = object.key("SecondaryArtifacts").start_array();
        for item_936 in var_934 {
            {
                let mut object_937 = array_935.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_937, item_936)?;
                object_937.finish();
            }
        }
        array_935.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_938) = &input.cache_behaviors {
        let mut object_939 = object.key("CacheBehaviors").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(&mut object_939, var_938)?;
        object_939.finish();
    }
    if let Some(var_940) = &input.default_cache_behavior {
        let mut object_941 = object.key("DefaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(&mut object_941, var_940)?;
        object_941.finish();
    }
    if let Some(var_942) = &input.default_root_object {
        object.key("DefaultRootObject").string(var_942.as_str());
    }
    if let Some(var_943) = &input.domain_name {
        object.key("DomainName").string(var_943.as_str());
    }
    if let Some(var_944) = &input.e_tag {
        object.key("ETag").string(var_944.as_str());
    }
    if let Some(var_945) = &input.last_modified_time {
        object.key("LastModifiedTime").string(var_945.as_str());
    }
    if let Some(var_946) = &input.logging {
        let mut object_947 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_logging(
            &mut object_947,
            var_946,
        )?;
        object_947.finish();
    }
    if let Some(var_948) = &input.origins {
        let mut object_949 = object.key("Origins").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origins(
            &mut object_949,
            var_948,
        )?;
        object_949.finish();
    }
    if let Some(var_950) = &input.origin_groups {
        let mut object_951 = object.key("OriginGroups").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(&mut object_951, var_950)?;
        object_951.finish();
    }
    if let Some(var_952) = &input.viewer_certificate {
        let mut object_953 = object.key("ViewerCertificate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(&mut object_953, var_952)?;
        object_953.finish();
    }
    if let Some(var_954) = &input.status {
        object.key("Status").string(var_954.as_str());
    }
    if let Some(var_955) = &input.web_acl_id {
        object.key("WebAclId").string(var_955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_956) = &input.r#type {
        object.key("Type").string(var_956.as_str());
    }
    if let Some(var_957) = &input.image_id {
        object.key("ImageId").string(var_957.as_str());
    }
    if let Some(var_958) = &input.ip_v4_addresses {
        let mut array_959 = object.key("IpV4Addresses").start_array();
        for item_960 in var_958 {
            {
                array_959.value().string(item_960.as_str());
            }
        }
        array_959.finish();
    }
    if let Some(var_961) = &input.ip_v6_addresses {
        let mut array_962 = object.key("IpV6Addresses").start_array();
        for item_963 in var_961 {
            {
                array_962.value().string(item_963.as_str());
            }
        }
        array_962.finish();
    }
    if let Some(var_964) = &input.key_name {
        object.key("KeyName").string(var_964.as_str());
    }
    if let Some(var_965) = &input.iam_instance_profile_arn {
        object.key("IamInstanceProfileArn").string(var_965.as_str());
    }
    if let Some(var_966) = &input.vpc_id {
        object.key("VpcId").string(var_966.as_str());
    }
    if let Some(var_967) = &input.subnet_id {
        object.key("SubnetId").string(var_967.as_str());
    }
    if let Some(var_968) = &input.launched_at {
        object.key("LaunchedAt").string(var_968.as_str());
    }
    if let Some(var_969) = &input.network_interfaces {
        let mut array_970 = object.key("NetworkInterfaces").start_array();
        for item_971 in var_969 {
            {
                let mut object_972 = array_970.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(&mut object_972, item_971)?;
                object_972.finish();
            }
        }
        array_970.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_973) = &input.attachment {
        let mut object_974 = object.key("Attachment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_attachment(
            &mut object_974,
            var_973,
        )?;
        object_974.finish();
    }
    if let Some(var_975) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_975.as_str());
    }
    if let Some(var_976) = &input.security_groups {
        let mut array_977 = object.key("SecurityGroups").start_array();
        for item_978 in var_976 {
            {
                let mut object_979 = array_977.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_security_group(&mut object_979, item_978)?;
                object_979.finish();
            }
        }
        array_977.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_980) = &input.ip_v6_addresses {
        let mut array_981 = object.key("IpV6Addresses").start_array();
        for item_982 in var_980 {
            {
                let mut object_983 = array_981.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(&mut object_983, item_982)?;
                object_983.finish();
            }
        }
        array_981.finish();
    }
    if let Some(var_984) = &input.private_ip_addresses {
        let mut array_985 = object.key("PrivateIpAddresses").start_array();
        for item_986 in var_984 {
            {
                let mut object_987 = array_985.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(&mut object_987, item_986)?;
                object_987.finish();
            }
        }
        array_985.finish();
    }
    if let Some(var_988) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_988.as_str());
    }
    if let Some(var_989) = &input.public_ip {
        object.key("PublicIp").string(var_989.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_990) = &input.group_name {
        object.key("GroupName").string(var_990.as_str());
    }
    if let Some(var_991) = &input.group_id {
        object.key("GroupId").string(var_991.as_str());
    }
    if let Some(var_992) = &input.owner_id {
        object.key("OwnerId").string(var_992.as_str());
    }
    if let Some(var_993) = &input.vpc_id {
        object.key("VpcId").string(var_993.as_str());
    }
    if let Some(var_994) = &input.ip_permissions {
        let mut array_995 = object.key("IpPermissions").start_array();
        for item_996 in var_994 {
            {
                let mut object_997 = array_995.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_997, item_996)?;
                object_997.finish();
            }
        }
        array_995.finish();
    }
    if let Some(var_998) = &input.ip_permissions_egress {
        let mut array_999 = object.key("IpPermissionsEgress").start_array();
        for item_1000 in var_998 {
            {
                let mut object_1001 = array_999.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_1001, item_1000)?;
                object_1001.finish();
            }
        }
        array_999.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1002) = &input.create_time {
        object.key("CreateTime").string(var_1002.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_1003) = &input.snapshot_id {
        object.key("SnapshotId").string(var_1003.as_str());
    }
    if let Some(var_1004) = &input.status {
        object.key("Status").string(var_1004.as_str());
    }
    if let Some(var_1005) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.attachments {
        let mut array_1007 = object.key("Attachments").start_array();
        for item_1008 in var_1006 {
            {
                let mut object_1009 = array_1007.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_attachment(
                    &mut object_1009,
                    item_1008,
                )?;
                object_1009.finish();
            }
        }
        array_1007.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1010) = &input.cidr_block_association_set {
        let mut array_1011 = object.key("CidrBlockAssociationSet").start_array();
        for item_1012 in var_1010 {
            {
                let mut object_1013 = array_1011.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cidr_block_association(
                    &mut object_1013,
                    item_1012,
                )?;
                object_1013.finish();
            }
        }
        array_1011.finish();
    }
    if let Some(var_1014) = &input.ipv6_cidr_block_association_set {
        let mut array_1015 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1016 in var_1014 {
            {
                let mut object_1017 = array_1015.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1017,
                    item_1016,
                )?;
                object_1017.finish();
            }
        }
        array_1015.finish();
    }
    if let Some(var_1018) = &input.dhcp_options_id {
        object.key("DhcpOptionsId").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.state {
        object.key("State").string(var_1019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_eip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2EipDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.instance_id {
        object.key("InstanceId").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.public_ip {
        object.key("PublicIp").string(var_1021.as_str());
    }
    if let Some(var_1022) = &input.allocation_id {
        object.key("AllocationId").string(var_1022.as_str());
    }
    if let Some(var_1023) = &input.association_id {
        object.key("AssociationId").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.domain {
        object.key("Domain").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.public_ipv4_pool {
        object.key("PublicIpv4Pool").string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.network_border_group {
        object.key("NetworkBorderGroup").string(var_1026.as_str());
    }
    if let Some(var_1027) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.network_interface_owner_id {
        object
            .key("NetworkInterfaceOwnerId")
            .string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1029.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_subnet_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SubnetDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.assign_ipv6_address_on_creation {
        object
            .key("AssignIpv6AddressOnCreation")
            .boolean(input.assign_ipv6_address_on_creation);
    }
    if let Some(var_1030) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_1031.as_str());
    }
    if input.available_ip_address_count != 0 {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.available_ip_address_count).into()),
        );
    }
    if let Some(var_1032) = &input.cidr_block {
        object.key("CidrBlock").string(var_1032.as_str());
    }
    if input.default_for_az {
        object.key("DefaultForAz").boolean(input.default_for_az);
    }
    if input.map_public_ip_on_launch {
        object
            .key("MapPublicIpOnLaunch")
            .boolean(input.map_public_ip_on_launch);
    }
    if let Some(var_1033) = &input.owner_id {
        object.key("OwnerId").string(var_1033.as_str());
    }
    if let Some(var_1034) = &input.state {
        object.key("State").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.subnet_arn {
        object.key("SubnetArn").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.subnet_id {
        object.key("SubnetId").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.vpc_id {
        object.key("VpcId").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.ipv6_cidr_block_association_set {
        let mut array_1039 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1040 in var_1038 {
            {
                let mut object_1041 = array_1039.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1041,
                    item_1040,
                )?;
                object_1041.finish();
            }
        }
        array_1039.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_default {
        object.key("IsDefault").boolean(input.is_default);
    }
    if let Some(var_1042) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.owner_id {
        object.key("OwnerId").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.vpc_id {
        object.key("VpcId").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.associations {
        let mut array_1046 = object.key("Associations").start_array();
        for item_1047 in var_1045 {
            {
                let mut object_1048 = array_1046.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_association(
                    &mut object_1048,
                    item_1047,
                )?;
                object_1048.finish();
            }
        }
        array_1046.finish();
    }
    if let Some(var_1049) = &input.entries {
        let mut array_1050 = object.key("Entries").start_array();
        for item_1051 in var_1049 {
            {
                let mut object_1052 = array_1050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_entry(
                    &mut object_1052,
                    item_1051,
                )?;
                object_1052.finish();
            }
        }
        array_1050.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1053) = &input.availability_zones {
        let mut array_1054 = object.key("AvailabilityZones").start_array();
        for item_1055 in var_1053 {
            {
                let mut object_1056 = array_1054.value().start_object();
                crate::json_ser::serialize_structure_crate_model_availability_zone(
                    &mut object_1056,
                    item_1055,
                )?;
                object_1056.finish();
            }
        }
        array_1054.finish();
    }
    if let Some(var_1057) = &input.canonical_hosted_zone_id {
        object
            .key("CanonicalHostedZoneId")
            .string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.created_time {
        object.key("CreatedTime").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.dns_name {
        object.key("DNSName").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.ip_address_type {
        object.key("IpAddressType").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.scheme {
        object.key("Scheme").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.security_groups {
        let mut array_1063 = object.key("SecurityGroups").start_array();
        for item_1064 in var_1062 {
            {
                array_1063.value().string(item_1064.as_str());
            }
        }
        array_1063.finish();
    }
    if let Some(var_1065) = &input.state {
        let mut object_1066 = object.key("State").start_object();
        crate::json_ser::serialize_structure_crate_model_load_balancer_state(
            &mut object_1066,
            var_1065,
        )?;
        object_1066.finish();
    }
    if let Some(var_1067) = &input.r#type {
        object.key("Type").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.vpc_id {
        object.key("VpcId").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.load_balancer_attributes {
        let mut array_1070 = object.key("LoadBalancerAttributes").start_array();
        for item_1071 in var_1069 {
            {
                let mut object_1072 = array_1070.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
                    &mut object_1072,
                    item_1071,
                )?;
                object_1072.finish();
            }
        }
        array_1070.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1073) = &input.application_name {
        object.key("ApplicationName").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.cname {
        object.key("Cname").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.date_created {
        object.key("DateCreated").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.date_updated {
        object.key("DateUpdated").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.description {
        object.key("Description").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.environment_arn {
        object.key("EnvironmentArn").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.environment_id {
        object.key("EnvironmentId").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.environment_links {
        let mut array_1082 = object.key("EnvironmentLinks").start_array();
        for item_1083 in var_1081 {
            {
                let mut object_1084 = array_1082.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(&mut object_1084, item_1083)?;
                object_1084.finish();
            }
        }
        array_1082.finish();
    }
    if let Some(var_1085) = &input.environment_name {
        object.key("EnvironmentName").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.option_settings {
        let mut array_1087 = object.key("OptionSettings").start_array();
        for item_1088 in var_1086 {
            {
                let mut object_1089 = array_1087.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(&mut object_1089, item_1088)?;
                object_1089.finish();
            }
        }
        array_1087.finish();
    }
    if let Some(var_1090) = &input.platform_arn {
        object.key("PlatformArn").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.solution_stack_name {
        object.key("SolutionStackName").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.status {
        object.key("Status").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.tier {
        let mut object_1094 = object.key("Tier").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
            &mut object_1094,
            var_1093,
        )?;
        object_1094.finish();
    }
    if let Some(var_1095) = &input.version_label {
        object.key("VersionLabel").string(var_1095.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1096) = &input.access_policies {
        object.key("AccessPolicies").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.domain_endpoint_options {
        let mut object_1098 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(&mut object_1098, var_1097)?;
        object_1098.finish();
    }
    if let Some(var_1099) = &input.domain_id {
        object.key("DomainId").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.domain_name {
        object.key("DomainName").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.endpoint {
        object.key("Endpoint").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.endpoints {
        let mut object_1103 = object.key("Endpoints").start_object();
        for (key_1104, value_1105) in var_1102 {
            {
                object_1103.key(key_1104).string(value_1105.as_str());
            }
        }
        object_1103.finish();
    }
    if let Some(var_1106) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_1106.as_str());
    }
    if let Some(var_1107) = &input.elasticsearch_cluster_config {
        let mut object_1108 = object.key("ElasticsearchClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(&mut object_1108, var_1107)?;
        object_1108.finish();
    }
    if let Some(var_1109) = &input.encryption_at_rest_options {
        let mut object_1110 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(&mut object_1110, var_1109)?;
        object_1110.finish();
    }
    if let Some(var_1111) = &input.log_publishing_options {
        let mut object_1112 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(&mut object_1112, var_1111)?;
        object_1112.finish();
    }
    if let Some(var_1113) = &input.node_to_node_encryption_options {
        let mut object_1114 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_1114, var_1113)?;
        object_1114.finish();
    }
    if let Some(var_1115) = &input.service_software_options {
        let mut object_1116 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(&mut object_1116, var_1115)?;
        object_1116.finish();
    }
    if let Some(var_1117) = &input.vpc_options {
        let mut object_1118 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
            &mut object_1118,
            var_1117,
        )?;
        object_1118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1119) = &input.owner_id {
        object.key("OwnerId").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.owner_name {
        object.key("OwnerName").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.owner_account_id {
        object.key("OwnerAccountId").string(var_1121.as_str());
    }
    if let Some(var_1122) = &input.created_at {
        object.key("CreatedAt").string(var_1122.as_str());
    }
    if let Some(var_1123) = &input.server_side_encryption_configuration {
        let mut object_1124 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(&mut object_1124, var_1123)?;
        object_1124.finish();
    }
    if let Some(var_1125) = &input.bucket_lifecycle_configuration {
        let mut object_1126 = object.key("BucketLifecycleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(&mut object_1126, var_1125)?;
        object_1126.finish();
    }
    if let Some(var_1127) = &input.public_access_block_configuration {
        let mut object_1128 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_1128, var_1127)?;
        object_1128.finish();
    }
    if let Some(var_1129) = &input.access_control_list {
        object.key("AccessControlList").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.bucket_logging_configuration {
        let mut object_1131 = object.key("BucketLoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
            &mut object_1131,
            var_1130,
        )?;
        object_1131.finish();
    }
    if let Some(var_1132) = &input.bucket_website_configuration {
        let mut object_1133 = object.key("BucketWebsiteConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration(
            &mut object_1133,
            var_1132,
        )?;
        object_1133.finish();
    }
    if let Some(var_1134) = &input.bucket_notification_configuration {
        let mut object_1135 = object.key("BucketNotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
            &mut object_1135,
            var_1134,
        )?;
        object_1135.finish();
    }
    if let Some(var_1136) = &input.bucket_versioning_configuration {
        let mut object_1137 = object.key("BucketVersioningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(&mut object_1137, var_1136)?;
        object_1137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_account_public_access_block_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3AccountPublicAccessBlockDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.block_public_acls {
        object
            .key("BlockPublicAcls")
            .boolean(input.block_public_acls);
    }
    if input.block_public_policy {
        object
            .key("BlockPublicPolicy")
            .boolean(input.block_public_policy);
    }
    if input.ignore_public_acls {
        object
            .key("IgnorePublicAcls")
            .boolean(input.ignore_public_acls);
    }
    if input.restrict_public_buckets {
        object
            .key("RestrictPublicBuckets")
            .boolean(input.restrict_public_buckets);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_object_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3ObjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1138) = &input.last_modified {
        object.key("LastModified").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.e_tag {
        object.key("ETag").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.version_id {
        object.key("VersionId").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.content_type {
        object.key("ContentType").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.server_side_encryption {
        object.key("ServerSideEncryption").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.ssekms_key_id {
        object.key("SSEKMSKeyId").string(var_1143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1144) = &input.rotation_rules {
        let mut object_1145 = object.key("RotationRules").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
            &mut object_1145,
            var_1144,
        )?;
        object_1145.finish();
    }
    if input.rotation_occurred_within_frequency {
        object
            .key("RotationOccurredWithinFrequency")
            .boolean(input.rotation_occurred_within_frequency);
    }
    if let Some(var_1146) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1146.as_str());
    }
    if input.rotation_enabled {
        object
            .key("RotationEnabled")
            .boolean(input.rotation_enabled);
    }
    if let Some(var_1147) = &input.rotation_lambda_arn {
        object.key("RotationLambdaArn").string(var_1147.as_str());
    }
    if input.deleted {
        object.key("Deleted").boolean(input.deleted);
    }
    if let Some(var_1148) = &input.name {
        object.key("Name").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.description {
        object.key("Description").string(var_1149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1150) = &input.user_name {
        object.key("UserName").string(var_1150.as_str());
    }
    if let Some(var_1151) = &input.status {
        object.key("Status").string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.created_at {
        object.key("CreatedAt").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.principal_id {
        object.key("PrincipalId").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.principal_type {
        object.key("PrincipalType").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.principal_name {
        object.key("PrincipalName").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.account_id {
        object.key("AccountId").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.access_key_id {
        object.key("AccessKeyId").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.session_context {
        let mut object_1159 = object.key("SessionContext").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context(
            &mut object_1159,
            var_1158,
        )?;
        object_1159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1160) = &input.attached_managed_policies {
        let mut array_1161 = object.key("AttachedManagedPolicies").start_array();
        for item_1162 in var_1160 {
            {
                let mut object_1163 = array_1161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1163,
                    item_1162,
                )?;
                object_1163.finish();
            }
        }
        array_1161.finish();
    }
    if let Some(var_1164) = &input.create_date {
        object.key("CreateDate").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.group_list {
        let mut array_1166 = object.key("GroupList").start_array();
        for item_1167 in var_1165 {
            {
                array_1166.value().string(item_1167.as_str());
            }
        }
        array_1166.finish();
    }
    if let Some(var_1168) = &input.path {
        object.key("Path").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.permissions_boundary {
        let mut object_1170 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1170,
            var_1169,
        )?;
        object_1170.finish();
    }
    if let Some(var_1171) = &input.user_id {
        object.key("UserId").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.user_name {
        object.key("UserName").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.user_policy_list {
        let mut array_1174 = object.key("UserPolicyList").start_array();
        for item_1175 in var_1173 {
            {
                let mut object_1176 = array_1174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_user_policy(
                    &mut object_1176,
                    item_1175,
                )?;
                object_1176.finish();
            }
        }
        array_1174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attachment_count != 0 {
        object.key("AttachmentCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attachment_count).into()),
        );
    }
    if let Some(var_1177) = &input.create_date {
        object.key("CreateDate").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.default_version_id {
        object.key("DefaultVersionId").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.description {
        object.key("Description").string(var_1179.as_str());
    }
    if input.is_attachable {
        object.key("IsAttachable").boolean(input.is_attachable);
    }
    if let Some(var_1180) = &input.path {
        object.key("Path").string(var_1180.as_str());
    }
    if input.permissions_boundary_usage_count != 0 {
        object.key("PermissionsBoundaryUsageCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.permissions_boundary_usage_count).into()),
        );
    }
    if let Some(var_1181) = &input.policy_id {
        object.key("PolicyId").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.policy_name {
        object.key("PolicyName").string(var_1182.as_str());
    }
    if let Some(var_1183) = &input.policy_version_list {
        let mut array_1184 = object.key("PolicyVersionList").start_array();
        for item_1185 in var_1183 {
            {
                let mut object_1186 = array_1184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_policy_version(
                    &mut object_1186,
                    item_1185,
                )?;
                object_1186.finish();
            }
        }
        array_1184.finish();
    }
    if let Some(var_1187) = &input.update_date {
        object.key("UpdateDate").string(var_1187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2StageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1188) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1188.as_str());
    }
    if let Some(var_1189) = &input.created_date {
        object.key("CreatedDate").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.description {
        object.key("Description").string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.default_route_settings {
        let mut object_1192 = object.key("DefaultRouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1192,
            var_1191,
        )?;
        object_1192.finish();
    }
    if let Some(var_1193) = &input.deployment_id {
        object.key("DeploymentId").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.route_settings {
        let mut object_1196 = object.key("RouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1196,
            var_1195,
        )?;
        object_1196.finish();
    }
    if let Some(var_1197) = &input.stage_name {
        object.key("StageName").string(var_1197.as_str());
    }
    if let Some(var_1198) = &input.stage_variables {
        let mut object_1199 = object.key("StageVariables").start_object();
        for (key_1200, value_1201) in var_1198 {
            {
                object_1199.key(key_1200).string(value_1201.as_str());
            }
        }
        object_1199.finish();
    }
    if let Some(var_1202) = &input.access_log_settings {
        let mut object_1203 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1203,
            var_1202,
        )?;
        object_1203.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_1204) = &input.last_deployment_status_message {
        object
            .key("LastDeploymentStatusMessage")
            .string(var_1204.as_str());
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2ApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1205) = &input.api_endpoint {
        object.key("ApiEndpoint").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.api_id {
        object.key("ApiId").string(var_1206.as_str());
    }
    if let Some(var_1207) = &input.api_key_selection_expression {
        object
            .key("ApiKeySelectionExpression")
            .string(var_1207.as_str());
    }
    if let Some(var_1208) = &input.created_date {
        object.key("CreatedDate").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.description {
        object.key("Description").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.version {
        object.key("Version").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.name {
        object.key("Name").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.protocol_type {
        object.key("ProtocolType").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.route_selection_expression {
        object
            .key("RouteSelectionExpression")
            .string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.cors_configuration {
        let mut object_1215 = object.key("CorsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cors_configuration(
            &mut object_1215,
            var_1214,
        )?;
        object_1215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1216) = &input.attribute_definitions {
        let mut array_1217 = object.key("AttributeDefinitions").start_array();
        for item_1218 in var_1216 {
            {
                let mut object_1219 = array_1217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(&mut object_1219, item_1218)?;
                object_1219.finish();
            }
        }
        array_1217.finish();
    }
    if let Some(var_1220) = &input.billing_mode_summary {
        let mut object_1221 = object.key("BillingModeSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
            &mut object_1221,
            var_1220,
        )?;
        object_1221.finish();
    }
    if let Some(var_1222) = &input.creation_date_time {
        object.key("CreationDateTime").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.global_secondary_indexes {
        let mut array_1224 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1225 in var_1223 {
            {
                let mut object_1226 = array_1224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(&mut object_1226, item_1225)?;
                object_1226.finish();
            }
        }
        array_1224.finish();
    }
    if let Some(var_1227) = &input.global_table_version {
        object.key("GlobalTableVersion").string(var_1227.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1228) = &input.key_schema {
        let mut array_1229 = object.key("KeySchema").start_array();
        for item_1230 in var_1228 {
            {
                let mut object_1231 = array_1229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_1231,
                    item_1230,
                )?;
                object_1231.finish();
            }
        }
        array_1229.finish();
    }
    if let Some(var_1232) = &input.latest_stream_arn {
        object.key("LatestStreamArn").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.latest_stream_label {
        object.key("LatestStreamLabel").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.local_secondary_indexes {
        let mut array_1235 = object.key("LocalSecondaryIndexes").start_array();
        for item_1236 in var_1234 {
            {
                let mut object_1237 = array_1235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(&mut object_1237, item_1236)?;
                object_1237.finish();
            }
        }
        array_1235.finish();
    }
    if let Some(var_1238) = &input.provisioned_throughput {
        let mut object_1239 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_1239, var_1238)?;
        object_1239.finish();
    }
    if let Some(var_1240) = &input.replicas {
        let mut array_1241 = object.key("Replicas").start_array();
        for item_1242 in var_1240 {
            {
                let mut object_1243 = array_1241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica(
                    &mut object_1243,
                    item_1242,
                )?;
                object_1243.finish();
            }
        }
        array_1241.finish();
    }
    if let Some(var_1244) = &input.restore_summary {
        let mut object_1245 = object.key("RestoreSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
            &mut object_1245,
            var_1244,
        )?;
        object_1245.finish();
    }
    if let Some(var_1246) = &input.sse_description {
        let mut object_1247 = object.key("SseDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
            &mut object_1247,
            var_1246,
        )?;
        object_1247.finish();
    }
    if let Some(var_1248) = &input.stream_specification {
        let mut object_1249 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
            &mut object_1249,
            var_1248,
        )?;
        object_1249.finish();
    }
    if let Some(var_1250) = &input.table_id {
        object.key("TableId").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.table_name {
        object.key("TableName").string(var_1251.as_str());
    }
    if input.table_size_bytes != 0 {
        object.key("TableSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.table_size_bytes).into()),
        );
    }
    if let Some(var_1252) = &input.table_status {
        object.key("TableStatus").string(var_1252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayStageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1253) = &input.deployment_id {
        object.key("DeploymentId").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.stage_name {
        object.key("StageName").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.description {
        object.key("Description").string(var_1256.as_str());
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1257) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.method_settings {
        let mut array_1260 = object.key("MethodSettings").start_array();
        for item_1261 in var_1259 {
            {
                let mut object_1262 = array_1260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_api_gateway_method_settings(
                    &mut object_1262,
                    item_1261,
                )?;
                object_1262.finish();
            }
        }
        array_1260.finish();
    }
    if let Some(var_1263) = &input.variables {
        let mut object_1264 = object.key("Variables").start_object();
        for (key_1265, value_1266) in var_1263 {
            {
                object_1264.key(key_1265).string(value_1266.as_str());
            }
        }
        object_1264.finish();
    }
    if let Some(var_1267) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_1267.as_str());
    }
    if let Some(var_1268) = &input.access_log_settings {
        let mut object_1269 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1269,
            var_1268,
        )?;
        object_1269.finish();
    }
    if let Some(var_1270) = &input.canary_settings {
        let mut object_1271 = object.key("CanarySettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_canary_settings(
            &mut object_1271,
            var_1270,
        )?;
        object_1271.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_1272) = &input.created_date {
        object.key("CreatedDate").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_1274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_rest_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayRestApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1275) = &input.id {
        object.key("Id").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.name {
        object.key("Name").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.description {
        object.key("Description").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.created_date {
        object.key("CreatedDate").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.version {
        object.key("Version").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.binary_media_types {
        let mut array_1281 = object.key("BinaryMediaTypes").start_array();
        for item_1282 in var_1280 {
            {
                array_1281.value().string(item_1282.as_str());
            }
        }
        array_1281.finish();
    }
    if input.minimum_compression_size != 0 {
        object.key("MinimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_compression_size).into()),
        );
    }
    if let Some(var_1283) = &input.api_key_source {
        object.key("ApiKeySource").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.endpoint_configuration {
        let mut object_1285 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
            &mut object_1285,
            var_1284,
        )?;
        object_1285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_trail_trail_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudTrailTrailDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1286) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_1286.as_str());
    }
    if let Some(var_1287) = &input.cloud_watch_logs_role_arn {
        object
            .key("CloudWatchLogsRoleArn")
            .string(var_1287.as_str());
    }
    if input.has_custom_event_selectors {
        object
            .key("HasCustomEventSelectors")
            .boolean(input.has_custom_event_selectors);
    }
    if let Some(var_1288) = &input.home_region {
        object.key("HomeRegion").string(var_1288.as_str());
    }
    if input.include_global_service_events {
        object
            .key("IncludeGlobalServiceEvents")
            .boolean(input.include_global_service_events);
    }
    if input.is_multi_region_trail {
        object
            .key("IsMultiRegionTrail")
            .boolean(input.is_multi_region_trail);
    }
    if input.is_organization_trail {
        object
            .key("IsOrganizationTrail")
            .boolean(input.is_organization_trail);
    }
    if let Some(var_1289) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1289.as_str());
    }
    if input.log_file_validation_enabled {
        object
            .key("LogFileValidationEnabled")
            .boolean(input.log_file_validation_enabled);
    }
    if let Some(var_1290) = &input.name {
        object.key("Name").string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1291.as_str());
    }
    if let Some(var_1292) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.sns_topic_name {
        object.key("SnsTopicName").string(var_1294.as_str());
    }
    if let Some(var_1295) = &input.trail_arn {
        object.key("TrailArn").string(var_1295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch_compliance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatchComplianceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1296) = &input.patch {
        let mut object_1297 = object.key("Patch").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch(&mut object_1297, var_1296)?;
        object_1297.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1298) = &input.certificate_authority_arn {
        object
            .key("CertificateAuthorityArn")
            .string(var_1298.as_str());
    }
    if let Some(var_1299) = &input.created_at {
        object.key("CreatedAt").string(var_1299.as_str());
    }
    if let Some(var_1300) = &input.domain_name {
        object.key("DomainName").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.domain_validation_options {
        let mut array_1302 = object.key("DomainValidationOptions").start_array();
        for item_1303 in var_1301 {
            {
                let mut object_1304 = array_1302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_1304, item_1303)?;
                object_1304.finish();
            }
        }
        array_1302.finish();
    }
    if let Some(var_1305) = &input.extended_key_usages {
        let mut array_1306 = object.key("ExtendedKeyUsages").start_array();
        for item_1307 in var_1305 {
            {
                let mut object_1308 = array_1306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(&mut object_1308, item_1307)?;
                object_1308.finish();
            }
        }
        array_1306.finish();
    }
    if let Some(var_1309) = &input.failure_reason {
        object.key("FailureReason").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.imported_at {
        object.key("ImportedAt").string(var_1310.as_str());
    }
    if let Some(var_1311) = &input.in_use_by {
        let mut array_1312 = object.key("InUseBy").start_array();
        for item_1313 in var_1311 {
            {
                array_1312.value().string(item_1313.as_str());
            }
        }
        array_1312.finish();
    }
    if let Some(var_1314) = &input.issued_at {
        object.key("IssuedAt").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.issuer {
        object.key("Issuer").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.key_usages {
        let mut array_1318 = object.key("KeyUsages").start_array();
        for item_1319 in var_1317 {
            {
                let mut object_1320 = array_1318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(&mut object_1320, item_1319)?;
                object_1320.finish();
            }
        }
        array_1318.finish();
    }
    if let Some(var_1321) = &input.not_after {
        object.key("NotAfter").string(var_1321.as_str());
    }
    if let Some(var_1322) = &input.not_before {
        object.key("NotBefore").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.options {
        let mut object_1324 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_options(&mut object_1324, var_1323)?;
        object_1324.finish();
    }
    if let Some(var_1325) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_1325.as_str());
    }
    if let Some(var_1326) = &input.renewal_summary {
        let mut object_1327 = object.key("RenewalSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(&mut object_1327, var_1326)?;
        object_1327.finish();
    }
    if let Some(var_1328) = &input.serial {
        object.key("Serial").string(var_1328.as_str());
    }
    if let Some(var_1329) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.status {
        object.key("Status").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.subject {
        object.key("Subject").string(var_1331.as_str());
    }
    if let Some(var_1332) = &input.subject_alternative_names {
        let mut array_1333 = object.key("SubjectAlternativeNames").start_array();
        for item_1334 in var_1332 {
            {
                array_1333.value().string(item_1334.as_str());
            }
        }
        array_1333.finish();
    }
    if let Some(var_1335) = &input.r#type {
        object.key("Type").string(var_1335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_version_upgrade {
        object
            .key("AllowVersionUpgrade")
            .boolean(input.allow_version_upgrade);
    }
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1336) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1336.as_str());
    }
    if let Some(var_1337) = &input.cluster_availability_status {
        object
            .key("ClusterAvailabilityStatus")
            .string(var_1337.as_str());
    }
    if let Some(var_1338) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1339.as_str());
    }
    if let Some(var_1340) = &input.cluster_nodes {
        let mut array_1341 = object.key("ClusterNodes").start_array();
        for item_1342 in var_1340 {
            {
                let mut object_1343 = array_1341.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
                    &mut object_1343,
                    item_1342,
                )?;
                object_1343.finish();
            }
        }
        array_1341.finish();
    }
    if let Some(var_1344) = &input.cluster_parameter_groups {
        let mut array_1345 = object.key("ClusterParameterGroups").start_array();
        for item_1346 in var_1344 {
            {
                let mut object_1347 = array_1345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(&mut object_1347, item_1346)?;
                object_1347.finish();
            }
        }
        array_1345.finish();
    }
    if let Some(var_1348) = &input.cluster_public_key {
        object.key("ClusterPublicKey").string(var_1348.as_str());
    }
    if let Some(var_1349) = &input.cluster_revision_number {
        object
            .key("ClusterRevisionNumber")
            .string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.cluster_security_groups {
        let mut array_1351 = object.key("ClusterSecurityGroups").start_array();
        for item_1352 in var_1350 {
            {
                let mut object_1353 = array_1351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(&mut object_1353, item_1352)?;
                object_1353.finish();
            }
        }
        array_1351.finish();
    }
    if let Some(var_1354) = &input.cluster_snapshot_copy_status {
        let mut object_1355 = object.key("ClusterSnapshotCopyStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(&mut object_1355, var_1354)?;
        object_1355.finish();
    }
    if let Some(var_1356) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1356.as_str());
    }
    if let Some(var_1357) = &input.cluster_subnet_group_name {
        object
            .key("ClusterSubnetGroupName")
            .string(var_1357.as_str());
    }
    if let Some(var_1358) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1358.as_str());
    }
    if let Some(var_1359) = &input.db_name {
        object.key("DBName").string(var_1359.as_str());
    }
    if let Some(var_1360) = &input.deferred_maintenance_windows {
        let mut array_1361 = object.key("DeferredMaintenanceWindows").start_array();
        for item_1362 in var_1360 {
            {
                let mut object_1363 = array_1361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(&mut object_1363, item_1362)?;
                object_1363.finish();
            }
        }
        array_1361.finish();
    }
    if let Some(var_1364) = &input.elastic_ip_status {
        let mut object_1365 = object.key("ElasticIpStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
            &mut object_1365,
            var_1364,
        )?;
        object_1365.finish();
    }
    if let Some(var_1366) = &input.elastic_resize_number_of_node_options {
        object
            .key("ElasticResizeNumberOfNodeOptions")
            .string(var_1366.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1367) = &input.endpoint {
        let mut object_1368 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_endpoint(
            &mut object_1368,
            var_1367,
        )?;
        object_1368.finish();
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1369) = &input.expected_next_snapshot_schedule_time {
        object
            .key("ExpectedNextSnapshotScheduleTime")
            .string(var_1369.as_str());
    }
    if let Some(var_1370) = &input.expected_next_snapshot_schedule_time_status {
        object
            .key("ExpectedNextSnapshotScheduleTimeStatus")
            .string(var_1370.as_str());
    }
    if let Some(var_1371) = &input.hsm_status {
        let mut object_1372 = object.key("HsmStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
            &mut object_1372,
            var_1371,
        )?;
        object_1372.finish();
    }
    if let Some(var_1373) = &input.iam_roles {
        let mut array_1374 = object.key("IamRoles").start_array();
        for item_1375 in var_1373 {
            {
                let mut object_1376 = array_1374.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_iam_role(
                    &mut object_1376,
                    item_1375,
                )?;
                object_1376.finish();
            }
        }
        array_1374.finish();
    }
    if let Some(var_1377) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1377.as_str());
    }
    if let Some(var_1378) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1378.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1379) = &input.master_username {
        object.key("MasterUsername").string(var_1379.as_str());
    }
    if let Some(var_1380) = &input.next_maintenance_window_start_time {
        object
            .key("NextMaintenanceWindowStartTime")
            .string(var_1380.as_str());
    }
    if let Some(var_1381) = &input.node_type {
        object.key("NodeType").string(var_1381.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_1382) = &input.pending_actions {
        let mut array_1383 = object.key("PendingActions").start_array();
        for item_1384 in var_1382 {
            {
                array_1383.value().string(item_1384.as_str());
            }
        }
        array_1383.finish();
    }
    if let Some(var_1385) = &input.pending_modified_values {
        let mut object_1386 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(&mut object_1386, var_1385)?;
        object_1386.finish();
    }
    if let Some(var_1387) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1387.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_1388) = &input.resize_info {
        let mut object_1389 = object.key("ResizeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_resize_info(
            &mut object_1389,
            var_1388,
        )?;
        object_1389.finish();
    }
    if let Some(var_1390) = &input.restore_status {
        let mut object_1391 = object.key("RestoreStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_restore_status(
            &mut object_1391,
            var_1390,
        )?;
        object_1391.finish();
    }
    if let Some(var_1392) = &input.snapshot_schedule_identifier {
        object
            .key("SnapshotScheduleIdentifier")
            .string(var_1392.as_str());
    }
    if let Some(var_1393) = &input.snapshot_schedule_state {
        object
            .key("SnapshotScheduleState")
            .string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.vpc_id {
        object.key("VpcId").string(var_1394.as_str());
    }
    if let Some(var_1395) = &input.vpc_security_groups {
        let mut array_1396 = object.key("VpcSecurityGroups").start_array();
        for item_1397 in var_1395 {
            {
                let mut object_1398 = array_1396.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(&mut object_1398, item_1397)?;
                object_1398.finish();
            }
        }
        array_1396.finish();
    }
    if let Some(var_1399) = &input.logging_status {
        let mut object_1400 = object.key("LoggingStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_logging_status(
            &mut object_1400,
            var_1399,
        )?;
        object_1400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1401) = &input.availability_zones {
        let mut array_1402 = object.key("AvailabilityZones").start_array();
        for item_1403 in var_1401 {
            {
                array_1402.value().string(item_1403.as_str());
            }
        }
        array_1402.finish();
    }
    if let Some(var_1404) = &input.backend_server_descriptions {
        let mut array_1405 = object.key("BackendServerDescriptions").start_array();
        for item_1406 in var_1404 {
            {
                let mut object_1407 = array_1405.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(&mut object_1407, item_1406)?;
                object_1407.finish();
            }
        }
        array_1405.finish();
    }
    if let Some(var_1408) = &input.canonical_hosted_zone_name {
        object
            .key("CanonicalHostedZoneName")
            .string(var_1408.as_str());
    }
    if let Some(var_1409) = &input.canonical_hosted_zone_name_id {
        object
            .key("CanonicalHostedZoneNameID")
            .string(var_1409.as_str());
    }
    if let Some(var_1410) = &input.created_time {
        object.key("CreatedTime").string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.dns_name {
        object.key("DnsName").string(var_1411.as_str());
    }
    if let Some(var_1412) = &input.health_check {
        let mut object_1413 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_health_check(
            &mut object_1413,
            var_1412,
        )?;
        object_1413.finish();
    }
    if let Some(var_1414) = &input.instances {
        let mut array_1415 = object.key("Instances").start_array();
        for item_1416 in var_1414 {
            {
                let mut object_1417 = array_1415.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_instance(
                    &mut object_1417,
                    item_1416,
                )?;
                object_1417.finish();
            }
        }
        array_1415.finish();
    }
    if let Some(var_1418) = &input.listener_descriptions {
        let mut array_1419 = object.key("ListenerDescriptions").start_array();
        for item_1420 in var_1418 {
            {
                let mut object_1421 = array_1419.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener_description(&mut object_1421, item_1420)?;
                object_1421.finish();
            }
        }
        array_1419.finish();
    }
    if let Some(var_1422) = &input.load_balancer_attributes {
        let mut object_1423 = object.key("LoadBalancerAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_attributes(
            &mut object_1423,
            var_1422,
        )?;
        object_1423.finish();
    }
    if let Some(var_1424) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_1424.as_str());
    }
    if let Some(var_1425) = &input.policies {
        let mut object_1426 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_policies(
            &mut object_1426,
            var_1425,
        )?;
        object_1426.finish();
    }
    if let Some(var_1427) = &input.scheme {
        object.key("Scheme").string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.security_groups {
        let mut array_1429 = object.key("SecurityGroups").start_array();
        for item_1430 in var_1428 {
            {
                array_1429.value().string(item_1430.as_str());
            }
        }
        array_1429.finish();
    }
    if let Some(var_1431) = &input.source_security_group {
        let mut object_1432 = object.key("SourceSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(&mut object_1432, var_1431)?;
        object_1432.finish();
    }
    if let Some(var_1433) = &input.subnets {
        let mut array_1434 = object.key("Subnets").start_array();
        for item_1435 in var_1433 {
            {
                array_1434.value().string(item_1435.as_str());
            }
        }
        array_1434.finish();
    }
    if let Some(var_1436) = &input.vpc_id {
        object.key("VpcId").string(var_1436.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1437) = &input.attached_managed_policies {
        let mut array_1438 = object.key("AttachedManagedPolicies").start_array();
        for item_1439 in var_1437 {
            {
                let mut object_1440 = array_1438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1440,
                    item_1439,
                )?;
                object_1440.finish();
            }
        }
        array_1438.finish();
    }
    if let Some(var_1441) = &input.create_date {
        object.key("CreateDate").string(var_1441.as_str());
    }
    if let Some(var_1442) = &input.group_id {
        object.key("GroupId").string(var_1442.as_str());
    }
    if let Some(var_1443) = &input.group_name {
        object.key("GroupName").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.group_policy_list {
        let mut array_1445 = object.key("GroupPolicyList").start_array();
        for item_1446 in var_1444 {
            {
                let mut object_1447 = array_1445.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_group_policy(
                    &mut object_1447,
                    item_1446,
                )?;
                object_1447.finish();
            }
        }
        array_1445.finish();
    }
    if let Some(var_1448) = &input.path {
        object.key("Path").string(var_1448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRoleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1449) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.attached_managed_policies {
        let mut array_1451 = object.key("AttachedManagedPolicies").start_array();
        for item_1452 in var_1450 {
            {
                let mut object_1453 = array_1451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1453,
                    item_1452,
                )?;
                object_1453.finish();
            }
        }
        array_1451.finish();
    }
    if let Some(var_1454) = &input.create_date {
        object.key("CreateDate").string(var_1454.as_str());
    }
    if let Some(var_1455) = &input.instance_profile_list {
        let mut array_1456 = object.key("InstanceProfileList").start_array();
        for item_1457 in var_1455 {
            {
                let mut object_1458 = array_1456.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile(
                    &mut object_1458,
                    item_1457,
                )?;
                object_1458.finish();
            }
        }
        array_1456.finish();
    }
    if let Some(var_1459) = &input.permissions_boundary {
        let mut object_1460 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1460,
            var_1459,
        )?;
        object_1460.finish();
    }
    if let Some(var_1461) = &input.role_id {
        object.key("RoleId").string(var_1461.as_str());
    }
    if let Some(var_1462) = &input.role_name {
        object.key("RoleName").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.role_policy_list {
        let mut array_1464 = object.key("RolePolicyList").start_array();
        for item_1465 in var_1463 {
            {
                let mut object_1466 = array_1464.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_role_policy(
                    &mut object_1466,
                    item_1465,
                )?;
                object_1466.finish();
            }
        }
        array_1464.finish();
    }
    if input.max_session_duration != 0 {
        object.key("MaxSessionDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_session_duration).into()),
        );
    }
    if let Some(var_1467) = &input.path {
        object.key("Path").string(var_1467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_kms_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKmsKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1468) = &input.aws_account_id {
        object.key("AWSAccountId").string(var_1468.as_str());
    }
    if input.creation_date != 0.0 {
        object.key("CreationDate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.creation_date).into()),
        );
    }
    if let Some(var_1469) = &input.key_id {
        object.key("KeyId").string(var_1469.as_str());
    }
    if let Some(var_1470) = &input.key_manager {
        object.key("KeyManager").string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.key_state {
        object.key("KeyState").string(var_1471.as_str());
    }
    if let Some(var_1472) = &input.origin {
        object.key("Origin").string(var_1472.as_str());
    }
    if let Some(var_1473) = &input.description {
        object.key("Description").string(var_1473.as_str());
    }
    if input.key_rotation_status {
        object
            .key("KeyRotationStatus")
            .boolean(input.key_rotation_status);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1474) = &input.code {
        let mut object_1475 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_code(
            &mut object_1475,
            var_1474,
        )?;
        object_1475.finish();
    }
    if let Some(var_1476) = &input.code_sha256 {
        object.key("CodeSha256").string(var_1476.as_str());
    }
    if let Some(var_1477) = &input.dead_letter_config {
        let mut object_1478 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
            &mut object_1478,
            var_1477,
        )?;
        object_1478.finish();
    }
    if let Some(var_1479) = &input.environment {
        let mut object_1480 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment(
            &mut object_1480,
            var_1479,
        )?;
        object_1480.finish();
    }
    if let Some(var_1481) = &input.function_name {
        object.key("FunctionName").string(var_1481.as_str());
    }
    if let Some(var_1482) = &input.handler {
        object.key("Handler").string(var_1482.as_str());
    }
    if let Some(var_1483) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1483.as_str());
    }
    if let Some(var_1484) = &input.last_modified {
        object.key("LastModified").string(var_1484.as_str());
    }
    if let Some(var_1485) = &input.layers {
        let mut array_1486 = object.key("Layers").start_array();
        for item_1487 in var_1485 {
            {
                let mut object_1488 = array_1486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_lambda_function_layer(
                    &mut object_1488,
                    item_1487,
                )?;
                object_1488.finish();
            }
        }
        array_1486.finish();
    }
    if let Some(var_1489) = &input.master_arn {
        object.key("MasterArn").string(var_1489.as_str());
    }
    if input.memory_size != 0 {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_size).into()),
        );
    }
    if let Some(var_1490) = &input.revision_id {
        object.key("RevisionId").string(var_1490.as_str());
    }
    if let Some(var_1491) = &input.role {
        object.key("Role").string(var_1491.as_str());
    }
    if let Some(var_1492) = &input.runtime {
        object.key("Runtime").string(var_1492.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_1493) = &input.tracing_config {
        let mut object_1494 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_tracing_config(
            &mut object_1494,
            var_1493,
        )?;
        object_1494.finish();
    }
    if let Some(var_1495) = &input.vpc_config {
        let mut object_1496 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_vpc_config(
            &mut object_1496,
            var_1495,
        )?;
        object_1496.finish();
    }
    if let Some(var_1497) = &input.version {
        object.key("Version").string(var_1497.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_layer_version_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaLayerVersionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version).into()),
        );
    }
    if let Some(var_1498) = &input.compatible_runtimes {
        let mut array_1499 = object.key("CompatibleRuntimes").start_array();
        for item_1500 in var_1498 {
            {
                array_1499.value().string(item_1500.as_str());
            }
        }
        array_1499.finish();
    }
    if let Some(var_1501) = &input.created_date {
        object.key("CreatedDate").string(var_1501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1502) = &input.associated_roles {
        let mut array_1503 = object.key("AssociatedRoles").start_array();
        for item_1504 in var_1502 {
            {
                let mut object_1505 = array_1503.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_associated_role(&mut object_1505, item_1504)?;
                object_1505.finish();
            }
        }
        array_1503.finish();
    }
    if let Some(var_1506) = &input.ca_certificate_identifier {
        object
            .key("CACertificateIdentifier")
            .string(var_1506.as_str());
    }
    if let Some(var_1507) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_1507.as_str());
    }
    if let Some(var_1508) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_1509.as_str());
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_1510) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1510.as_str());
    }
    if let Some(var_1511) = &input.db_name {
        object.key("DBName").string(var_1511.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_1512) = &input.endpoint {
        let mut object_1513 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1513,
            var_1512,
        )?;
        object_1513.finish();
    }
    if let Some(var_1514) = &input.engine {
        object.key("Engine").string(var_1514.as_str());
    }
    if let Some(var_1515) = &input.engine_version {
        object.key("EngineVersion").string(var_1515.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1516) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1516.as_str());
    }
    if let Some(var_1517) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1517.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1518) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1518.as_str());
    }
    if let Some(var_1519) = &input.vpc_security_groups {
        let mut array_1520 = object.key("VpcSecurityGroups").start_array();
        for item_1521 in var_1519 {
            {
                let mut object_1522 = array_1520.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1522, item_1521)?;
                object_1522.finish();
            }
        }
        array_1520.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1523) = &input.enhanced_monitoring_resource_arn {
        object
            .key("EnhancedMonitoringResourceArn")
            .string(var_1523.as_str());
    }
    if let Some(var_1524) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_1524.as_str());
    }
    if let Some(var_1525) = &input.master_username {
        object.key("MasterUsername").string(var_1525.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1526) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1526.as_str());
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1527) = &input.db_security_groups {
        let mut array_1528 = object.key("DbSecurityGroups").start_array();
        for item_1529 in var_1527 {
            {
                array_1528.value().string(item_1529.as_str());
            }
        }
        array_1528.finish();
    }
    if let Some(var_1530) = &input.db_parameter_groups {
        let mut array_1531 = object.key("DbParameterGroups").start_array();
        for item_1532 in var_1530 {
            {
                let mut object_1533 = array_1531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_parameter_group(
                    &mut object_1533,
                    item_1532,
                )?;
                object_1533.finish();
            }
        }
        array_1531.finish();
    }
    if let Some(var_1534) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1534.as_str());
    }
    if let Some(var_1535) = &input.db_subnet_group {
        let mut object_1536 = object.key("DbSubnetGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group(
            &mut object_1536,
            var_1535,
        )?;
        object_1536.finish();
    }
    if let Some(var_1537) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1537.as_str());
    }
    if let Some(var_1538) = &input.pending_modified_values {
        let mut object_1539 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_pending_modified_values(
            &mut object_1539,
            var_1538,
        )?;
        object_1539.finish();
    }
    if let Some(var_1540) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_1540.as_str());
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1541) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_1541.as_str());
    }
    if let Some(var_1542) = &input.read_replica_db_instance_identifiers {
        let mut array_1543 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_1544 in var_1542 {
            {
                array_1543.value().string(item_1544.as_str());
            }
        }
        array_1543.finish();
    }
    if let Some(var_1545) = &input.read_replica_db_cluster_identifiers {
        let mut array_1546 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_1547 in var_1545 {
            {
                array_1546.value().string(item_1547.as_str());
            }
        }
        array_1546.finish();
    }
    if let Some(var_1548) = &input.license_model {
        object.key("LicenseModel").string(var_1548.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1549) = &input.option_group_memberships {
        let mut array_1550 = object.key("OptionGroupMemberships").start_array();
        for item_1551 in var_1549 {
            {
                let mut object_1552 = array_1550.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_option_group_membership(&mut object_1552, item_1551)?;
                object_1552.finish();
            }
        }
        array_1550.finish();
    }
    if let Some(var_1553) = &input.character_set_name {
        object.key("CharacterSetName").string(var_1553.as_str());
    }
    if let Some(var_1554) = &input.secondary_availability_zone {
        object
            .key("SecondaryAvailabilityZone")
            .string(var_1554.as_str());
    }
    if let Some(var_1555) = &input.status_infos {
        let mut array_1556 = object.key("StatusInfos").start_array();
        for item_1557 in var_1555 {
            {
                let mut object_1558 = array_1556.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_status_info(
                    &mut object_1558,
                    item_1557,
                )?;
                object_1558.finish();
            }
        }
        array_1556.finish();
    }
    if let Some(var_1559) = &input.storage_type {
        object.key("StorageType").string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.domain_memberships {
        let mut array_1561 = object.key("DomainMemberships").start_array();
        for item_1562 in var_1560 {
            {
                let mut object_1563 = array_1561.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1563,
                    item_1562,
                )?;
                object_1563.finish();
            }
        }
        array_1561.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_1564) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_1564.as_str());
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_1565) = &input.timezone {
        object.key("Timezone").string(var_1565.as_str());
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_1566) = &input.performance_insights_kms_key_id {
        object
            .key("PerformanceInsightsKmsKeyId")
            .string(var_1566.as_str());
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_1567) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1568 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1569 in var_1567 {
            {
                array_1568.value().string(item_1569.as_str());
            }
        }
        array_1568.finish();
    }
    if let Some(var_1570) = &input.processor_features {
        let mut array_1571 = object.key("ProcessorFeatures").start_array();
        for item_1572 in var_1570 {
            {
                let mut object_1573 = array_1571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1573,
                    item_1572,
                )?;
                object_1573.finish();
            }
        }
        array_1571.finish();
    }
    if let Some(var_1574) = &input.listener_endpoint {
        let mut object_1575 = object.key("ListenerEndpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1575,
            var_1574,
        )?;
        object_1575.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1576) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1576.as_str());
    }
    if let Some(var_1577) = &input.subscription {
        let mut array_1578 = object.key("Subscription").start_array();
        for item_1579 in var_1577 {
            {
                let mut object_1580 = array_1578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_sns_topic_subscription(
                    &mut object_1580,
                    item_1579,
                )?;
                object_1580.finish();
            }
        }
        array_1578.finish();
    }
    if let Some(var_1581) = &input.topic_name {
        object.key("TopicName").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.owner {
        object.key("Owner").string(var_1582.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sqs_queue_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSqsQueueDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.kms_data_key_reuse_period_seconds != 0 {
        object.key("KmsDataKeyReusePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.kms_data_key_reuse_period_seconds).into()),
        );
    }
    if let Some(var_1583) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1583.as_str());
    }
    if let Some(var_1584) = &input.queue_name {
        object.key("QueueName").string(var_1584.as_str());
    }
    if let Some(var_1585) = &input.dead_letter_target_arn {
        object.key("DeadLetterTargetArn").string(var_1585.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1586) = &input.name {
        object.key("Name").string(var_1586.as_str());
    }
    if let Some(var_1587) = &input.default_action {
        object.key("DefaultAction").string(var_1587.as_str());
    }
    if let Some(var_1588) = &input.rules {
        let mut array_1589 = object.key("Rules").start_array();
        for item_1590 in var_1588 {
            {
                let mut object_1591 = array_1589.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_rule(
                    &mut object_1591,
                    item_1590,
                )?;
                object_1591.finish();
            }
        }
        array_1589.finish();
    }
    if let Some(var_1592) = &input.web_acl_id {
        object.key("WebAclId").string(var_1592.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1593) = &input.db_snapshot_identifier {
        object.key("DbSnapshotIdentifier").string(var_1593.as_str());
    }
    if let Some(var_1594) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1594.as_str());
    }
    if let Some(var_1595) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.engine {
        object.key("Engine").string(var_1596.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1597) = &input.status {
        object.key("Status").string(var_1597.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1598) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1598.as_str());
    }
    if let Some(var_1599) = &input.vpc_id {
        object.key("VpcId").string(var_1599.as_str());
    }
    if let Some(var_1600) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1600.as_str());
    }
    if let Some(var_1601) = &input.master_username {
        object.key("MasterUsername").string(var_1601.as_str());
    }
    if let Some(var_1602) = &input.engine_version {
        object.key("EngineVersion").string(var_1602.as_str());
    }
    if let Some(var_1603) = &input.license_model {
        object.key("LicenseModel").string(var_1603.as_str());
    }
    if let Some(var_1604) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1604.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1605) = &input.option_group_name {
        object.key("OptionGroupName").string(var_1605.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if let Some(var_1606) = &input.source_region {
        object.key("SourceRegion").string(var_1606.as_str());
    }
    if let Some(var_1607) = &input.source_db_snapshot_identifier {
        object
            .key("SourceDbSnapshotIdentifier")
            .string(var_1607.as_str());
    }
    if let Some(var_1608) = &input.storage_type {
        object.key("StorageType").string(var_1608.as_str());
    }
    if let Some(var_1609) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1609.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1610) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1610.as_str());
    }
    if let Some(var_1611) = &input.timezone {
        object.key("Timezone").string(var_1611.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1612) = &input.processor_features {
        let mut array_1613 = object.key("ProcessorFeatures").start_array();
        for item_1614 in var_1612 {
            {
                let mut object_1615 = array_1613.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1615,
                    item_1614,
                )?;
                object_1615.finish();
            }
        }
        array_1613.finish();
    }
    if let Some(var_1616) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1616.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1617) = &input.availability_zones {
        let mut array_1618 = object.key("AvailabilityZones").start_array();
        for item_1619 in var_1617 {
            {
                array_1618.value().string(item_1619.as_str());
            }
        }
        array_1618.finish();
    }
    if let Some(var_1620) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1620.as_str());
    }
    if let Some(var_1621) = &input.engine {
        object.key("Engine").string(var_1621.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1622) = &input.status {
        object.key("Status").string(var_1622.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1623) = &input.vpc_id {
        object.key("VpcId").string(var_1623.as_str());
    }
    if let Some(var_1624) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1624.as_str());
    }
    if let Some(var_1625) = &input.master_username {
        object.key("MasterUsername").string(var_1625.as_str());
    }
    if let Some(var_1626) = &input.engine_version {
        object.key("EngineVersion").string(var_1626.as_str());
    }
    if let Some(var_1627) = &input.license_model {
        object.key("LicenseModel").string(var_1627.as_str());
    }
    if let Some(var_1628) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1628.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1629) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1629.as_str());
    }
    if let Some(var_1630) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1630.as_str());
    }
    if let Some(var_1631) = &input.db_cluster_snapshot_identifier {
        object
            .key("DbClusterSnapshotIdentifier")
            .string(var_1631.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1632) = &input.availability_zones {
        let mut array_1633 = object.key("AvailabilityZones").start_array();
        for item_1634 in var_1632 {
            {
                array_1633.value().string(item_1634.as_str());
            }
        }
        array_1633.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1635) = &input.database_name {
        object.key("DatabaseName").string(var_1635.as_str());
    }
    if let Some(var_1636) = &input.status {
        object.key("Status").string(var_1636.as_str());
    }
    if let Some(var_1637) = &input.endpoint {
        object.key("Endpoint").string(var_1637.as_str());
    }
    if let Some(var_1638) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.custom_endpoints {
        let mut array_1640 = object.key("CustomEndpoints").start_array();
        for item_1641 in var_1639 {
            {
                array_1640.value().string(item_1641.as_str());
            }
        }
        array_1640.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1642) = &input.engine {
        object.key("Engine").string(var_1642.as_str());
    }
    if let Some(var_1643) = &input.engine_version {
        object.key("EngineVersion").string(var_1643.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1644) = &input.master_username {
        object.key("MasterUsername").string(var_1644.as_str());
    }
    if let Some(var_1645) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1645.as_str());
    }
    if let Some(var_1646) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1646.as_str());
    }
    if let Some(var_1647) = &input.read_replica_identifiers {
        let mut array_1648 = object.key("ReadReplicaIdentifiers").start_array();
        for item_1649 in var_1647 {
            {
                array_1648.value().string(item_1649.as_str());
            }
        }
        array_1648.finish();
    }
    if let Some(var_1650) = &input.vpc_security_groups {
        let mut array_1651 = object.key("VpcSecurityGroups").start_array();
        for item_1652 in var_1650 {
            {
                let mut object_1653 = array_1651.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1653, item_1652)?;
                object_1653.finish();
            }
        }
        array_1651.finish();
    }
    if let Some(var_1654) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1654.as_str());
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1655) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1655.as_str());
    }
    if let Some(var_1656) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_1656.as_str());
    }
    if let Some(var_1657) = &input.associated_roles {
        let mut array_1658 = object.key("AssociatedRoles").start_array();
        for item_1659 in var_1657 {
            {
                let mut object_1660 = array_1658.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_associated_role(&mut object_1660, item_1659)?;
                object_1660.finish();
            }
        }
        array_1658.finish();
    }
    if let Some(var_1661) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1661.as_str());
    }
    if let Some(var_1662) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1663 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1664 in var_1662 {
            {
                array_1663.value().string(item_1664.as_str());
            }
        }
        array_1663.finish();
    }
    if let Some(var_1665) = &input.engine_mode {
        object.key("EngineMode").string(var_1665.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_1666) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_1666.as_str());
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_1667) = &input.domain_memberships {
        let mut array_1668 = object.key("DomainMemberships").start_array();
        for item_1669 in var_1667 {
            {
                let mut object_1670 = array_1668.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1670,
                    item_1669,
                )?;
                object_1670.finish();
            }
        }
        array_1668.finish();
    }
    if let Some(var_1671) = &input.db_cluster_parameter_group {
        object
            .key("DbClusterParameterGroup")
            .string(var_1671.as_str());
    }
    if let Some(var_1672) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_1672.as_str());
    }
    if let Some(var_1673) = &input.db_cluster_option_group_memberships {
        let mut array_1674 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_1675 in var_1673 {
            {
                let mut object_1676 = array_1674.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(&mut object_1676, item_1675)?;
                object_1676.finish();
            }
        }
        array_1674.finish();
    }
    if let Some(var_1677) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1677.as_str());
    }
    if let Some(var_1678) = &input.db_cluster_members {
        let mut array_1679 = object.key("DbClusterMembers").start_array();
        for item_1680 in var_1678 {
            {
                let mut object_1681 = array_1679.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_member(
                    &mut object_1681,
                    item_1680,
                )?;
                object_1681.finish();
            }
        }
        array_1679.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1682) = &input.capacity_providers {
        let mut array_1683 = object.key("CapacityProviders").start_array();
        for item_1684 in var_1682 {
            {
                array_1683.value().string(item_1684.as_str());
            }
        }
        array_1683.finish();
    }
    if let Some(var_1685) = &input.cluster_settings {
        let mut array_1686 = object.key("ClusterSettings").start_array();
        for item_1687 in var_1685 {
            {
                let mut object_1688 = array_1686.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(&mut object_1688, item_1687)?;
                object_1688.finish();
            }
        }
        array_1686.finish();
    }
    if let Some(var_1689) = &input.configuration {
        let mut object_1690 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
            &mut object_1690,
            var_1689,
        )?;
        object_1690.finish();
    }
    if let Some(var_1691) = &input.default_capacity_provider_strategy {
        let mut array_1692 = object.key("DefaultCapacityProviderStrategy").start_array();
        for item_1693 in var_1691 {
            {
                let mut object_1694 = array_1692.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(&mut object_1694, item_1693)?;
                object_1694.finish();
            }
        }
        array_1692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1695) = &input.container_definitions {
        let mut array_1696 = object.key("ContainerDefinitions").start_array();
        for item_1697 in var_1695 {
            {
                let mut object_1698 = array_1696.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(&mut object_1698, item_1697)?;
                object_1698.finish();
            }
        }
        array_1696.finish();
    }
    if let Some(var_1699) = &input.cpu {
        object.key("Cpu").string(var_1699.as_str());
    }
    if let Some(var_1700) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_1700.as_str());
    }
    if let Some(var_1701) = &input.family {
        object.key("Family").string(var_1701.as_str());
    }
    if let Some(var_1702) = &input.inference_accelerators {
        let mut array_1703 = object.key("InferenceAccelerators").start_array();
        for item_1704 in var_1702 {
            {
                let mut object_1705 = array_1703.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(&mut object_1705, item_1704)?;
                object_1705.finish();
            }
        }
        array_1703.finish();
    }
    if let Some(var_1706) = &input.ipc_mode {
        object.key("IpcMode").string(var_1706.as_str());
    }
    if let Some(var_1707) = &input.memory {
        object.key("Memory").string(var_1707.as_str());
    }
    if let Some(var_1708) = &input.network_mode {
        object.key("NetworkMode").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.pid_mode {
        object.key("PidMode").string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.placement_constraints {
        let mut array_1711 = object.key("PlacementConstraints").start_array();
        for item_1712 in var_1710 {
            {
                let mut object_1713 = array_1711.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(&mut object_1713, item_1712)?;
                object_1713.finish();
            }
        }
        array_1711.finish();
    }
    if let Some(var_1714) = &input.proxy_configuration {
        let mut object_1715 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(&mut object_1715, var_1714)?;
        object_1715.finish();
    }
    if let Some(var_1716) = &input.requires_compatibilities {
        let mut array_1717 = object.key("RequiresCompatibilities").start_array();
        for item_1718 in var_1716 {
            {
                array_1717.value().string(item_1718.as_str());
            }
        }
        array_1717.finish();
    }
    if let Some(var_1719) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_1719.as_str());
    }
    if let Some(var_1720) = &input.volumes {
        let mut array_1721 = object.key("Volumes").start_array();
        for item_1722 in var_1720 {
            {
                let mut object_1723 = array_1721.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(&mut object_1723, item_1722)?;
                object_1723.finish();
            }
        }
        array_1721.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1724) = &input.name {
        object.key("Name").string(var_1724.as_str());
    }
    if let Some(var_1725) = &input.image_id {
        object.key("ImageId").string(var_1725.as_str());
    }
    if let Some(var_1726) = &input.image_name {
        object.key("ImageName").string(var_1726.as_str());
    }
    if let Some(var_1727) = &input.launched_at {
        object.key("LaunchedAt").string(var_1727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_event_subscription_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsEventSubscriptionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1728) = &input.cust_subscription_id {
        object.key("CustSubscriptionId").string(var_1728.as_str());
    }
    if let Some(var_1729) = &input.customer_aws_id {
        object.key("CustomerAwsId").string(var_1729.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1730) = &input.event_categories_list {
        let mut array_1731 = object.key("EventCategoriesList").start_array();
        for item_1732 in var_1730 {
            {
                array_1731.value().string(item_1732.as_str());
            }
        }
        array_1731.finish();
    }
    if let Some(var_1733) = &input.event_subscription_arn {
        object.key("EventSubscriptionArn").string(var_1733.as_str());
    }
    if let Some(var_1734) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1734.as_str());
    }
    if let Some(var_1735) = &input.source_ids_list {
        let mut array_1736 = object.key("SourceIdsList").start_array();
        for item_1737 in var_1735 {
            {
                array_1736.value().string(item_1737.as_str());
            }
        }
        array_1736.finish();
    }
    if let Some(var_1738) = &input.source_type {
        object.key("SourceType").string(var_1738.as_str());
    }
    if let Some(var_1739) = &input.status {
        object.key("Status").string(var_1739.as_str());
    }
    if let Some(var_1740) = &input.subscription_creation_time {
        object
            .key("SubscriptionCreationTime")
            .string(var_1740.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1741) = &input.capacity_provider_strategy {
        let mut array_1742 = object.key("CapacityProviderStrategy").start_array();
        for item_1743 in var_1741 {
            {
                let mut object_1744 = array_1742.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(&mut object_1744, item_1743)?;
                object_1744.finish();
            }
        }
        array_1742.finish();
    }
    if let Some(var_1745) = &input.cluster {
        object.key("Cluster").string(var_1745.as_str());
    }
    if let Some(var_1746) = &input.deployment_configuration {
        let mut object_1747 = object.key("DeploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(&mut object_1747, var_1746)?;
        object_1747.finish();
    }
    if let Some(var_1748) = &input.deployment_controller {
        let mut object_1749 = object.key("DeploymentController").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(&mut object_1749, var_1748)?;
        object_1749.finish();
    }
    if input.desired_count != 0 {
        object.key("DesiredCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.desired_count).into()),
        );
    }
    if input.enable_ecs_managed_tags {
        object
            .key("EnableEcsManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("EnableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if input.health_check_grace_period_seconds != 0 {
        object.key("HealthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period_seconds).into()),
        );
    }
    if let Some(var_1750) = &input.launch_type {
        object.key("LaunchType").string(var_1750.as_str());
    }
    if let Some(var_1751) = &input.load_balancers {
        let mut array_1752 = object.key("LoadBalancers").start_array();
        for item_1753 in var_1751 {
            {
                let mut object_1754 = array_1752.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_load_balancers_details(&mut object_1754, item_1753)?;
                object_1754.finish();
            }
        }
        array_1752.finish();
    }
    if let Some(var_1755) = &input.name {
        object.key("Name").string(var_1755.as_str());
    }
    if let Some(var_1756) = &input.network_configuration {
        let mut object_1757 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_details(&mut object_1757, var_1756)?;
        object_1757.finish();
    }
    if let Some(var_1758) = &input.placement_constraints {
        let mut array_1759 = object.key("PlacementConstraints").start_array();
        for item_1760 in var_1758 {
            {
                let mut object_1761 = array_1759.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(&mut object_1761, item_1760)?;
                object_1761.finish();
            }
        }
        array_1759.finish();
    }
    if let Some(var_1762) = &input.placement_strategies {
        let mut array_1763 = object.key("PlacementStrategies").start_array();
        for item_1764 in var_1762 {
            {
                let mut object_1765 = array_1763.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(&mut object_1765, item_1764)?;
                object_1765.finish();
            }
        }
        array_1763.finish();
    }
    if let Some(var_1766) = &input.platform_version {
        object.key("PlatformVersion").string(var_1766.as_str());
    }
    if let Some(var_1767) = &input.propagate_tags {
        object.key("PropagateTags").string(var_1767.as_str());
    }
    if let Some(var_1768) = &input.role {
        object.key("Role").string(var_1768.as_str());
    }
    if let Some(var_1769) = &input.scheduling_strategy {
        object.key("SchedulingStrategy").string(var_1769.as_str());
    }
    if let Some(var_1770) = &input.service_arn {
        object.key("ServiceArn").string(var_1770.as_str());
    }
    if let Some(var_1771) = &input.service_name {
        object.key("ServiceName").string(var_1771.as_str());
    }
    if let Some(var_1772) = &input.service_registries {
        let mut array_1773 = object.key("ServiceRegistries").start_array();
        for item_1774 in var_1772 {
            {
                let mut object_1775 = array_1773.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_service_registries_details(&mut object_1775, item_1774)?;
                object_1775.finish();
            }
        }
        array_1773.finish();
    }
    if let Some(var_1776) = &input.task_definition {
        object.key("TaskDefinition").string(var_1776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.associate_public_ip_address {
        object
            .key("AssociatePublicIpAddress")
            .boolean(input.associate_public_ip_address);
    }
    if let Some(var_1777) = &input.block_device_mappings {
        let mut array_1778 = object.key("BlockDeviceMappings").start_array();
        for item_1779 in var_1777 {
            {
                let mut object_1780 = array_1778.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(&mut object_1780, item_1779)?;
                object_1780.finish();
            }
        }
        array_1778.finish();
    }
    if let Some(var_1781) = &input.classic_link_vpc_id {
        object.key("ClassicLinkVpcId").string(var_1781.as_str());
    }
    if let Some(var_1782) = &input.classic_link_vpc_security_groups {
        let mut array_1783 = object.key("ClassicLinkVpcSecurityGroups").start_array();
        for item_1784 in var_1782 {
            {
                array_1783.value().string(item_1784.as_str());
            }
        }
        array_1783.finish();
    }
    if let Some(var_1785) = &input.created_time {
        object.key("CreatedTime").string(var_1785.as_str());
    }
    if input.ebs_optimized {
        object.key("EbsOptimized").boolean(input.ebs_optimized);
    }
    if let Some(var_1786) = &input.iam_instance_profile {
        object.key("IamInstanceProfile").string(var_1786.as_str());
    }
    if let Some(var_1787) = &input.image_id {
        object.key("ImageId").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.instance_monitoring {
        let mut object_1789 = object.key("InstanceMonitoring").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(&mut object_1789, var_1788)?;
        object_1789.finish();
    }
    if let Some(var_1790) = &input.instance_type {
        object.key("InstanceType").string(var_1790.as_str());
    }
    if let Some(var_1791) = &input.kernel_id {
        object.key("KernelId").string(var_1791.as_str());
    }
    if let Some(var_1792) = &input.key_name {
        object.key("KeyName").string(var_1792.as_str());
    }
    if let Some(var_1793) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_1793.as_str());
    }
    if let Some(var_1794) = &input.placement_tenancy {
        object.key("PlacementTenancy").string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.ramdisk_id {
        object.key("RamdiskId").string(var_1795.as_str());
    }
    if let Some(var_1796) = &input.security_groups {
        let mut array_1797 = object.key("SecurityGroups").start_array();
        for item_1798 in var_1796 {
            {
                array_1797.value().string(item_1798.as_str());
            }
        }
        array_1797.finish();
    }
    if let Some(var_1799) = &input.spot_price {
        object.key("SpotPrice").string(var_1799.as_str());
    }
    if let Some(var_1800) = &input.user_data {
        object.key("UserData").string(var_1800.as_str());
    }
    if let Some(var_1801) = &input.metadata_options {
        let mut object_1802 = object.key("MetadataOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(&mut object_1802, var_1801)?;
        object_1802.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1803) = &input.vpn_connection_id {
        object.key("VpnConnectionId").string(var_1803.as_str());
    }
    if let Some(var_1804) = &input.state {
        object.key("State").string(var_1804.as_str());
    }
    if let Some(var_1805) = &input.customer_gateway_id {
        object.key("CustomerGatewayId").string(var_1805.as_str());
    }
    if let Some(var_1806) = &input.customer_gateway_configuration {
        object
            .key("CustomerGatewayConfiguration")
            .string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.r#type {
        object.key("Type").string(var_1807.as_str());
    }
    if let Some(var_1808) = &input.vpn_gateway_id {
        object.key("VpnGatewayId").string(var_1808.as_str());
    }
    if let Some(var_1809) = &input.category {
        object.key("Category").string(var_1809.as_str());
    }
    if let Some(var_1810) = &input.vgw_telemetry {
        let mut array_1811 = object.key("VgwTelemetry").start_array();
        for item_1812 in var_1810 {
            {
                let mut object_1813 = array_1811.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(&mut object_1813, item_1812)?;
                object_1813.finish();
            }
        }
        array_1811.finish();
    }
    if let Some(var_1814) = &input.options {
        let mut object_1815 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
            &mut object_1815,
            var_1814,
        )?;
        object_1815.finish();
    }
    if let Some(var_1816) = &input.routes {
        let mut array_1817 = object.key("Routes").start_array();
        for item_1818 in var_1816 {
            {
                let mut object_1819 = array_1817.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(&mut object_1819, item_1818)?;
                object_1819.finish();
            }
        }
        array_1817.finish();
    }
    if let Some(var_1820) = &input.transit_gateway_id {
        object.key("TransitGatewayId").string(var_1820.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_image_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrContainerImageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1821) = &input.registry_id {
        object.key("RegistryId").string(var_1821.as_str());
    }
    if let Some(var_1822) = &input.repository_name {
        object.key("RepositoryName").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.architecture {
        object.key("Architecture").string(var_1823.as_str());
    }
    if let Some(var_1824) = &input.image_digest {
        object.key("ImageDigest").string(var_1824.as_str());
    }
    if let Some(var_1825) = &input.image_tags {
        let mut array_1826 = object.key("ImageTags").start_array();
        for item_1827 in var_1825 {
            {
                array_1826.value().string(item_1827.as_str());
            }
        }
        array_1826.finish();
    }
    if let Some(var_1828) = &input.image_published_at {
        object.key("ImagePublishedAt").string(var_1828.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1829) = &input.arn {
        object.key("Arn").string(var_1829.as_str());
    }
    if let Some(var_1830) = &input.access_policies {
        object.key("AccessPolicies").string(var_1830.as_str());
    }
    if let Some(var_1831) = &input.domain_name {
        object.key("DomainName").string(var_1831.as_str());
    }
    if let Some(var_1832) = &input.id {
        object.key("Id").string(var_1832.as_str());
    }
    if let Some(var_1833) = &input.domain_endpoint {
        object.key("DomainEndpoint").string(var_1833.as_str());
    }
    if let Some(var_1834) = &input.engine_version {
        object.key("EngineVersion").string(var_1834.as_str());
    }
    if let Some(var_1835) = &input.encryption_at_rest_options {
        let mut object_1836 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(&mut object_1836, var_1835)?;
        object_1836.finish();
    }
    if let Some(var_1837) = &input.node_to_node_encryption_options {
        let mut object_1838 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(&mut object_1838, var_1837)?;
        object_1838.finish();
    }
    if let Some(var_1839) = &input.service_software_options {
        let mut object_1840 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(&mut object_1840, var_1839)?;
        object_1840.finish();
    }
    if let Some(var_1841) = &input.cluster_config {
        let mut object_1842 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(&mut object_1842, var_1841)?;
        object_1842.finish();
    }
    if let Some(var_1843) = &input.domain_endpoint_options {
        let mut object_1844 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(&mut object_1844, var_1843)?;
        object_1844.finish();
    }
    if let Some(var_1845) = &input.vpc_options {
        let mut object_1846 = object.key("VpcOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(&mut object_1846, var_1845)?;
        object_1846.finish();
    }
    if let Some(var_1847) = &input.log_publishing_options {
        let mut object_1848 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(&mut object_1848, var_1847)?;
        object_1848.finish();
    }
    if let Some(var_1849) = &input.domain_endpoints {
        let mut object_1850 = object.key("DomainEndpoints").start_object();
        for (key_1851, value_1852) in var_1849 {
            {
                object_1850.key(key_1851).string(value_1852.as_str());
            }
        }
        object_1850.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.acceptance_required {
        object
            .key("AcceptanceRequired")
            .boolean(input.acceptance_required);
    }
    if let Some(var_1853) = &input.availability_zones {
        let mut array_1854 = object.key("AvailabilityZones").start_array();
        for item_1855 in var_1853 {
            {
                array_1854.value().string(item_1855.as_str());
            }
        }
        array_1854.finish();
    }
    if let Some(var_1856) = &input.base_endpoint_dns_names {
        let mut array_1857 = object.key("BaseEndpointDnsNames").start_array();
        for item_1858 in var_1856 {
            {
                array_1857.value().string(item_1858.as_str());
            }
        }
        array_1857.finish();
    }
    if input.manages_vpc_endpoints {
        object
            .key("ManagesVpcEndpoints")
            .boolean(input.manages_vpc_endpoints);
    }
    if let Some(var_1859) = &input.gateway_load_balancer_arns {
        let mut array_1860 = object.key("GatewayLoadBalancerArns").start_array();
        for item_1861 in var_1859 {
            {
                array_1860.value().string(item_1861.as_str());
            }
        }
        array_1860.finish();
    }
    if let Some(var_1862) = &input.network_load_balancer_arns {
        let mut array_1863 = object.key("NetworkLoadBalancerArns").start_array();
        for item_1864 in var_1862 {
            {
                array_1863.value().string(item_1864.as_str());
            }
        }
        array_1863.finish();
    }
    if let Some(var_1865) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.service_id {
        object.key("ServiceId").string(var_1866.as_str());
    }
    if let Some(var_1867) = &input.service_name {
        object.key("ServiceName").string(var_1867.as_str());
    }
    if let Some(var_1868) = &input.service_state {
        object.key("ServiceState").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.service_type {
        let mut array_1870 = object.key("ServiceType").start_array();
        for item_1871 in var_1869 {
            {
                let mut object_1872 = array_1870.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(&mut object_1872, item_1871)?;
                object_1872.finish();
            }
        }
        array_1870.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_xray_encryption_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsXrayEncryptionConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1873) = &input.key_id {
        object.key("KeyId").string(var_1873.as_str());
    }
    if let Some(var_1874) = &input.status {
        object.key("Status").string(var_1874.as_str());
    }
    if let Some(var_1875) = &input.r#type {
        object.key("Type").string(var_1875.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1876) = &input.metric_name {
        object.key("MetricName").string(var_1876.as_str());
    }
    if let Some(var_1877) = &input.name {
        object.key("Name").string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.rate_key {
        object.key("RateKey").string(var_1878.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1879) = &input.rule_id {
        object.key("RuleId").string(var_1879.as_str());
    }
    if let Some(var_1880) = &input.match_predicates {
        let mut array_1881 = object.key("MatchPredicates").start_array();
        for item_1882 in var_1880 {
            {
                let mut object_1883 = array_1881.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(&mut object_1883, item_1882)?;
                object_1883.finish();
            }
        }
        array_1881.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1884) = &input.metric_name {
        object.key("MetricName").string(var_1884.as_str());
    }
    if let Some(var_1885) = &input.name {
        object.key("Name").string(var_1885.as_str());
    }
    if let Some(var_1886) = &input.rate_key {
        object.key("RateKey").string(var_1886.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1887) = &input.rule_id {
        object.key("RuleId").string(var_1887.as_str());
    }
    if let Some(var_1888) = &input.match_predicates {
        let mut array_1889 = object.key("MatchPredicates").start_array();
        for item_1890 in var_1888 {
            {
                let mut object_1891 = array_1889.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(&mut object_1891, item_1890)?;
                object_1891.finish();
            }
        }
        array_1889.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1892) = &input.arn {
        object.key("Arn").string(var_1892.as_str());
    }
    if let Some(var_1893) = &input.image_scanning_configuration {
        let mut object_1894 = object.key("ImageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(&mut object_1894, var_1893)?;
        object_1894.finish();
    }
    if let Some(var_1895) = &input.image_tag_mutability {
        object.key("ImageTagMutability").string(var_1895.as_str());
    }
    if let Some(var_1896) = &input.lifecycle_policy {
        let mut object_1897 = object.key("LifecyclePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(&mut object_1897, var_1896)?;
        object_1897.finish();
    }
    if let Some(var_1898) = &input.repository_name {
        object.key("RepositoryName").string(var_1898.as_str());
    }
    if let Some(var_1899) = &input.repository_policy_text {
        object.key("RepositoryPolicyText").string(var_1899.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1900) = &input.arn {
        object.key("Arn").string(var_1900.as_str());
    }
    if let Some(var_1901) = &input.certificate_authority_data {
        object
            .key("CertificateAuthorityData")
            .string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.endpoint {
        object.key("Endpoint").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.name {
        object.key("Name").string(var_1904.as_str());
    }
    if let Some(var_1905) = &input.resources_vpc_config {
        let mut object_1906 = object.key("ResourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(&mut object_1906, var_1905)?;
        object_1906.finish();
    }
    if let Some(var_1907) = &input.role_arn {
        object.key("RoleArn").string(var_1907.as_str());
    }
    if let Some(var_1908) = &input.version {
        object.key("Version").string(var_1908.as_str());
    }
    if let Some(var_1909) = &input.logging {
        let mut object_1910 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_details(
            &mut object_1910,
            var_1909,
        )?;
        object_1910.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1911) = &input.firewall_policy {
        let mut object_1912 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy_details(
            &mut object_1912,
            var_1911,
        )?;
        object_1912.finish();
    }
    if let Some(var_1913) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_1913.as_str());
    }
    if let Some(var_1914) = &input.firewall_policy_id {
        object.key("FirewallPolicyId").string(var_1914.as_str());
    }
    if let Some(var_1915) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_1915.as_str());
    }
    if let Some(var_1916) = &input.description {
        object.key("Description").string(var_1916.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_protection {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    if let Some(var_1917) = &input.description {
        object.key("Description").string(var_1917.as_str());
    }
    if let Some(var_1918) = &input.firewall_arn {
        object.key("FirewallArn").string(var_1918.as_str());
    }
    if let Some(var_1919) = &input.firewall_id {
        object.key("FirewallId").string(var_1919.as_str());
    }
    if let Some(var_1920) = &input.firewall_name {
        object.key("FirewallName").string(var_1920.as_str());
    }
    if let Some(var_1921) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_1921.as_str());
    }
    if input.firewall_policy_change_protection {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    if input.subnet_change_protection {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    if let Some(var_1922) = &input.subnet_mappings {
        let mut array_1923 = object.key("SubnetMappings").start_array();
        for item_1924 in var_1922 {
            {
                let mut object_1925 = array_1923.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(&mut object_1925, item_1924)?;
                object_1925.finish();
            }
        }
        array_1923.finish();
    }
    if let Some(var_1926) = &input.vpc_id {
        object.key("VpcId").string(var_1926.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallRuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.capacity != 0 {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_1927) = &input.description {
        object.key("Description").string(var_1927.as_str());
    }
    if let Some(var_1928) = &input.rule_group {
        let mut object_1929 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_details(
            &mut object_1929,
            var_1928,
        )?;
        object_1929.finish();
    }
    if let Some(var_1930) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_1930.as_str());
    }
    if let Some(var_1931) = &input.rule_group_id {
        object.key("RuleGroupId").string(var_1931.as_str());
    }
    if let Some(var_1932) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.r#type {
        object.key("Type").string(var_1933.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1934) = &input.db_security_group_arn {
        object.key("DbSecurityGroupArn").string(var_1934.as_str());
    }
    if let Some(var_1935) = &input.db_security_group_description {
        object
            .key("DbSecurityGroupDescription")
            .string(var_1935.as_str());
    }
    if let Some(var_1936) = &input.db_security_group_name {
        object.key("DbSecurityGroupName").string(var_1936.as_str());
    }
    if let Some(var_1937) = &input.ec2_security_groups {
        let mut array_1938 = object.key("Ec2SecurityGroups").start_array();
        for item_1939 in var_1937 {
            {
                let mut object_1940 = array_1938.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(&mut object_1940, item_1939)?;
                object_1940.finish();
            }
        }
        array_1938.finish();
    }
    if let Some(var_1941) = &input.ip_ranges {
        let mut array_1942 = object.key("IpRanges").start_array();
        for item_1943 in var_1941 {
            {
                let mut object_1944 = array_1942.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ip_range(&mut object_1944, item_1943)?;
                object_1944.finish();
            }
        }
        array_1942.finish();
    }
    if let Some(var_1945) = &input.owner_id {
        object.key("OwnerId").string(var_1945.as_str());
    }
    if let Some(var_1946) = &input.vpc_id {
        object.key("VpcId").string(var_1946.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_adjustment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Adjustment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1947) = &input.metric {
        object.key("Metric").string(var_1947.as_str());
    }
    if let Some(var_1948) = &input.reason {
        object.key("Reason").string(var_1948.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemoteIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1949) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_1949.as_str());
    }
    if let Some(var_1950) = &input.organization {
        let mut object_1951 = object.key("Organization").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_organization_details(
            &mut object_1951,
            var_1950,
        )?;
        object_1951.finish();
    }
    if let Some(var_1952) = &input.country {
        let mut object_1953 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_crate_model_country(&mut object_1953, var_1952)?;
        object_1953.finish();
    }
    if let Some(var_1954) = &input.city {
        let mut object_1955 = object.key("City").start_object();
        crate::json_ser::serialize_structure_crate_model_city(&mut object_1955, var_1954)?;
        object_1955.finish();
    }
    if let Some(var_1956) = &input.geo_location {
        let mut object_1957 = object.key("GeoLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_location(&mut object_1957, var_1956)?;
        object_1957.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemotePortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1958) = &input.port_name {
        object.key("PortName").string(var_1958.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalPortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1959) = &input.port_name {
        object.key("PortName").string(var_1959.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallActionDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1960) = &input.domain {
        object.key("Domain").string(var_1960.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1961) = &input.local_port_details {
        let mut object_1962 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_1962,
            var_1961,
        )?;
        object_1962.finish();
    }
    if let Some(var_1963) = &input.local_ip_details {
        let mut object_1964 = object.key("LocalIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_ip_details(
            &mut object_1964,
            var_1963,
        )?;
        object_1964.finish();
    }
    if let Some(var_1965) = &input.remote_ip_details {
        let mut object_1966 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_1966,
            var_1965,
        )?;
        object_1966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1967) = &input.code {
        object.key("Code").string(var_1967.as_str());
    }
    if let Some(var_1968) = &input.reason {
        object.key("Reason").string(var_1968.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1969) = &input.category {
        object.key("Category").string(var_1969.as_str());
    }
    if let Some(var_1970) = &input.detections {
        let mut array_1971 = object.key("Detections").start_array();
        for item_1972 in var_1970 {
            {
                let mut object_1973 = array_1971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_detections(
                    &mut object_1973,
                    item_1972,
                )?;
                object_1973.finish();
            }
        }
        array_1971.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1974) = &input.detections {
        let mut array_1975 = object.key("Detections").start_array();
        for item_1976 in var_1974 {
            {
                let mut object_1977 = array_1975.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_detections(&mut object_1977, item_1976)?;
                object_1977.finish();
            }
        }
        array_1975.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1978) = &input.instances_distribution {
        let mut object_1979 = object.key("InstancesDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(&mut object_1979, var_1978)?;
        object_1979.finish();
    }
    if let Some(var_1980) = &input.launch_template {
        let mut object_1981 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(&mut object_1981, var_1980)?;
        object_1981.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1982) = &input.value {
        object.key("Value").string(var_1982.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1983) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_1983.as_str());
    }
    if let Some(var_1984) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_1984.as_str());
    }
    if let Some(var_1985) = &input.version {
        object.key("Version").string(var_1985.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_artifacts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectArtifactsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1986) = &input.artifact_identifier {
        object.key("ArtifactIdentifier").string(var_1986.as_str());
    }
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_1987) = &input.location {
        object.key("Location").string(var_1987.as_str());
    }
    if let Some(var_1988) = &input.name {
        object.key("Name").string(var_1988.as_str());
    }
    if let Some(var_1989) = &input.namespace_type {
        object.key("NamespaceType").string(var_1989.as_str());
    }
    if input.override_artifact_name {
        object
            .key("OverrideArtifactName")
            .boolean(input.override_artifact_name);
    }
    if let Some(var_1990) = &input.packaging {
        object.key("Packaging").string(var_1990.as_str());
    }
    if let Some(var_1991) = &input.path {
        object.key("Path").string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.r#type {
        object.key("Type").string(var_1992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1993) = &input.certificate {
        object.key("Certificate").string(var_1993.as_str());
    }
    if let Some(var_1994) = &input.environment_variables {
        let mut array_1995 = object.key("EnvironmentVariables").start_array();
        for item_1996 in var_1994 {
            {
                let mut object_1997 = array_1995.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(&mut object_1997, item_1996)?;
                object_1997.finish();
            }
        }
        array_1995.finish();
    }
    if input.privileged_mode {
        object.key("PrivilegedMode").boolean(input.privileged_mode);
    }
    if let Some(var_1998) = &input.image_pull_credentials_type {
        object
            .key("ImagePullCredentialsType")
            .string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.registry_credential {
        let mut object_2000 = object.key("RegistryCredential").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(&mut object_2000, var_1999)?;
        object_2000.finish();
    }
    if let Some(var_2001) = &input.r#type {
        object.key("Type").string(var_2001.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2002) = &input.r#type {
        object.key("Type").string(var_2002.as_str());
    }
    if let Some(var_2003) = &input.location {
        object.key("Location").string(var_2003.as_str());
    }
    if input.git_clone_depth != 0 {
        object.key("GitCloneDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.git_clone_depth).into()),
        );
    }
    if input.insecure_ssl {
        object.key("InsecureSsl").boolean(input.insecure_ssl);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2004) = &input.cloud_watch_logs {
        let mut object_2005 = object.key("CloudWatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(&mut object_2005, var_2004)?;
        object_2005.finish();
    }
    if let Some(var_2006) = &input.s3_logs {
        let mut object_2007 = object.key("S3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(&mut object_2007, var_2006)?;
        object_2007.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2008) = &input.vpc_id {
        object.key("VpcId").string(var_2008.as_str());
    }
    if let Some(var_2009) = &input.subnets {
        let mut array_2010 = object.key("Subnets").start_array();
        for item_2011 in var_2009 {
            {
                array_2010.value().string(item_2011.as_str());
            }
        }
        array_2010.finish();
    }
    if let Some(var_2012) = &input.security_group_ids {
        let mut array_2013 = object.key("SecurityGroupIds").start_array();
        for item_2014 in var_2012 {
            {
                array_2013.value().string(item_2014.as_str());
            }
        }
        array_2013.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehaviors,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2015) = &input.items {
        let mut array_2016 = object.key("Items").start_array();
        for item_2017 in var_2015 {
            {
                let mut object_2018 = array_2016.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(&mut object_2018, item_2017)?;
                object_2018.finish();
            }
        }
        array_2016.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDefaultCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2019) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_logging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionLogging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2020) = &input.bucket {
        object.key("Bucket").string(var_2020.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.include_cookies {
        object.key("IncludeCookies").boolean(input.include_cookies);
    }
    if let Some(var_2021) = &input.prefix {
        object.key("Prefix").string(var_2021.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origins(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOrigins,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2022) = &input.items {
        let mut array_2023 = object.key("Items").start_array();
        for item_2024 in var_2022 {
            {
                let mut object_2025 = array_2023.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(&mut object_2025, item_2024)?;
                object_2025.finish();
            }
        }
        array_2023.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroups,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2026) = &input.items {
        let mut array_2027 = object.key("Items").start_array();
        for item_2028 in var_2026 {
            {
                let mut object_2029 = array_2027.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(&mut object_2029, item_2028)?;
                object_2029.finish();
            }
        }
        array_2027.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionViewerCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2030) = &input.acm_certificate_arn {
        object.key("AcmCertificateArn").string(var_2030.as_str());
    }
    if let Some(var_2031) = &input.certificate {
        object.key("Certificate").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.certificate_source {
        object.key("CertificateSource").string(var_2032.as_str());
    }
    if input.cloud_front_default_certificate {
        object
            .key("CloudFrontDefaultCertificate")
            .boolean(input.cloud_front_default_certificate);
    }
    if let Some(var_2033) = &input.iam_certificate_id {
        object.key("IamCertificateId").string(var_2033.as_str());
    }
    if let Some(var_2034) = &input.minimum_protocol_version {
        object
            .key("MinimumProtocolVersion")
            .string(var_2034.as_str());
    }
    if let Some(var_2035) = &input.ssl_support_method {
        object.key("SslSupportMethod").string(var_2035.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceNetworkInterfacesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2036) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_2036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2037) = &input.attach_time {
        object.key("AttachTime").string(var_2037.as_str());
    }
    if let Some(var_2038) = &input.attachment_id {
        object.key("AttachmentId").string(var_2038.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_2039) = &input.instance_id {
        object.key("InstanceId").string(var_2039.as_str());
    }
    if let Some(var_2040) = &input.instance_owner_id {
        object.key("InstanceOwnerId").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.status {
        object.key("Status").string(var_2041.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2042) = &input.group_name {
        object.key("GroupName").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.group_id {
        object.key("GroupId").string(var_2043.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceIpV6AddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2044) = &input.ip_v6_address {
        object.key("IpV6Address").string(var_2044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfacePrivateIpAddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2045) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2045.as_str());
    }
    if let Some(var_2046) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_2046.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2047) = &input.ip_protocol {
        object.key("IpProtocol").string(var_2047.as_str());
    }
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_2048) = &input.user_id_group_pairs {
        let mut array_2049 = object.key("UserIdGroupPairs").start_array();
        for item_2050 in var_2048 {
            {
                let mut object_2051 = array_2049.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(&mut object_2051, item_2050)?;
                object_2051.finish();
            }
        }
        array_2049.finish();
    }
    if let Some(var_2052) = &input.ip_ranges {
        let mut array_2053 = object.key("IpRanges").start_array();
        for item_2054 in var_2052 {
            {
                let mut object_2055 = array_2053.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_range(
                    &mut object_2055,
                    item_2054,
                )?;
                object_2055.finish();
            }
        }
        array_2053.finish();
    }
    if let Some(var_2056) = &input.ipv6_ranges {
        let mut array_2057 = object.key("Ipv6Ranges").start_array();
        for item_2058 in var_2056 {
            {
                let mut object_2059 = array_2057.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
                    &mut object_2059,
                    item_2058,
                )?;
                object_2059.finish();
            }
        }
        array_2057.finish();
    }
    if let Some(var_2060) = &input.prefix_list_ids {
        let mut array_2061 = object.key("PrefixListIds").start_array();
        for item_2062 in var_2060 {
            {
                let mut object_2063 = array_2061.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(&mut object_2063, item_2062)?;
                object_2063.finish();
            }
        }
        array_2061.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2064) = &input.attach_time {
        object.key("AttachTime").string(var_2064.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_2065) = &input.instance_id {
        object.key("InstanceId").string(var_2065.as_str());
    }
    if let Some(var_2066) = &input.status {
        object.key("Status").string(var_2066.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2067) = &input.association_id {
        object.key("AssociationId").string(var_2067.as_str());
    }
    if let Some(var_2068) = &input.cidr_block {
        object.key("CidrBlock").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2069.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ipv6_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ipv6CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2070) = &input.association_id {
        object.key("AssociationId").string(var_2070.as_str());
    }
    if let Some(var_2071) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2071.as_str());
    }
    if let Some(var_2072) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2072.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2073) = &input.network_acl_association_id {
        object
            .key("NetworkAclAssociationId")
            .string(var_2073.as_str());
    }
    if let Some(var_2074) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_2074.as_str());
    }
    if let Some(var_2075) = &input.subnet_id {
        object.key("SubnetId").string(var_2075.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2076) = &input.cidr_block {
        object.key("CidrBlock").string(var_2076.as_str());
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_2077) = &input.icmp_type_code {
        let mut object_2078 = object.key("IcmpTypeCode").start_object();
        crate::json_ser::serialize_structure_crate_model_icmp_type_code(
            &mut object_2078,
            var_2077,
        )?;
        object_2078.finish();
    }
    if let Some(var_2079) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2079.as_str());
    }
    if let Some(var_2080) = &input.port_range {
        let mut object_2081 = object.key("PortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range_from_to(
            &mut object_2081,
            var_2080,
        )?;
        object_2081.finish();
    }
    if let Some(var_2082) = &input.protocol {
        object.key("Protocol").string(var_2082.as_str());
    }
    if let Some(var_2083) = &input.rule_action {
        object.key("RuleAction").string(var_2083.as_str());
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2084) = &input.zone_name {
        object.key("ZoneName").string(var_2084.as_str());
    }
    if let Some(var_2085) = &input.subnet_id {
        object.key("SubnetId").string(var_2085.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_load_balancer_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancerState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2086) = &input.code {
        object.key("Code").string(var_2086.as_str());
    }
    if let Some(var_2087) = &input.reason {
        object.key("Reason").string(var_2087.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2088) = &input.key {
        object.key("Key").string(var_2088.as_str());
    }
    if let Some(var_2089) = &input.value {
        object.key("Value").string(var_2089.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentEnvironmentLink,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2090) = &input.environment_name {
        object.key("EnvironmentName").string(var_2090.as_str());
    }
    if let Some(var_2091) = &input.link_name {
        object.key("LinkName").string(var_2091.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentOptionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2092) = &input.namespace {
        object.key("Namespace").string(var_2092.as_str());
    }
    if let Some(var_2093) = &input.option_name {
        object.key("OptionName").string(var_2093.as_str());
    }
    if let Some(var_2094) = &input.resource_name {
        object.key("ResourceName").string(var_2094.as_str());
    }
    if let Some(var_2095) = &input.value {
        object.key("Value").string(var_2095.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentTier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2096) = &input.name {
        object.key("Name").string(var_2096.as_str());
    }
    if let Some(var_2097) = &input.r#type {
        object.key("Type").string(var_2097.as_str());
    }
    if let Some(var_2098) = &input.version {
        object.key("Version").string(var_2098.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDomainEndpointOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2099) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2099.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2100) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2100.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_2101) = &input.instance_type {
        object.key("InstanceType").string(var_2101.as_str());
    }
    if let Some(var_2102) = &input.zone_awareness_config {
        let mut object_2103 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(&mut object_2103, var_2102)?;
        object_2103.finish();
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainEncryptionAtRestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2104) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2105) = &input.index_slow_logs {
        let mut object_2106 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2106, var_2105)?;
        object_2106.finish();
    }
    if let Some(var_2107) = &input.search_slow_logs {
        let mut object_2108 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2108, var_2107)?;
        object_2108.finish();
    }
    if let Some(var_2109) = &input.audit_logs {
        let mut object_2110 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2110, var_2109)?;
        object_2110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainNodeToNodeEncryptionOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainServiceSoftwareOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2111) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2111.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2112) = &input.current_version {
        object.key("CurrentVersion").string(var_2112.as_str());
    }
    if let Some(var_2113) = &input.description {
        object.key("Description").string(var_2113.as_str());
    }
    if let Some(var_2114) = &input.new_version {
        object.key("NewVersion").string(var_2114.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2115) = &input.update_status {
        object.key("UpdateStatus").string(var_2115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainVpcOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2116) = &input.availability_zones {
        let mut array_2117 = object.key("AvailabilityZones").start_array();
        for item_2118 in var_2116 {
            {
                array_2117.value().string(item_2118.as_str());
            }
        }
        array_2117.finish();
    }
    if let Some(var_2119) = &input.security_group_ids {
        let mut array_2120 = object.key("SecurityGroupIds").start_array();
        for item_2121 in var_2119 {
            {
                array_2120.value().string(item_2121.as_str());
            }
        }
        array_2120.finish();
    }
    if let Some(var_2122) = &input.subnet_ids {
        let mut array_2123 = object.key("SubnetIds").start_array();
        for item_2124 in var_2122 {
            {
                array_2123.value().string(item_2124.as_str());
            }
        }
        array_2123.finish();
    }
    if let Some(var_2125) = &input.vpc_id {
        object.key("VPCId").string(var_2125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2126) = &input.rules {
        let mut array_2127 = object.key("Rules").start_array();
        for item_2128 in var_2126 {
            {
                let mut object_2129 = array_2127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(&mut object_2129, item_2128)?;
                object_2129.finish();
            }
        }
        array_2127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2130) = &input.rules {
        let mut array_2131 = object.key("Rules").start_array();
        for item_2132 in var_2130 {
            {
                let mut object_2133 = array_2131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(&mut object_2133, item_2132)?;
                object_2133.finish();
            }
        }
        array_2131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketLoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2134) = &input.destination_bucket_name {
        object
            .key("DestinationBucketName")
            .string(var_2134.as_str());
    }
    if let Some(var_2135) = &input.log_file_prefix {
        object.key("LogFilePrefix").string(var_2135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2136) = &input.error_document {
        object.key("ErrorDocument").string(var_2136.as_str());
    }
    if let Some(var_2137) = &input.index_document_suffix {
        object.key("IndexDocumentSuffix").string(var_2137.as_str());
    }
    if let Some(var_2138) = &input.redirect_all_requests_to {
        let mut object_2139 = object.key("RedirectAllRequestsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(&mut object_2139, var_2138)?;
        object_2139.finish();
    }
    if let Some(var_2140) = &input.routing_rules {
        let mut array_2141 = object.key("RoutingRules").start_array();
        for item_2142 in var_2140 {
            {
                let mut object_2143 = array_2141.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(&mut object_2143, item_2142)?;
                object_2143.finish();
            }
        }
        array_2141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2144) = &input.configurations {
        let mut array_2145 = object.key("Configurations").start_array();
        for item_2146 in var_2144 {
            {
                let mut object_2147 = array_2145.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(&mut object_2147, item_2146)?;
                object_2147.finish();
            }
        }
        array_2145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketVersioningConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_mfa_delete_enabled {
        object
            .key("IsMfaDeleteEnabled")
            .boolean(input.is_mfa_delete_enabled);
    }
    if let Some(var_2148) = &input.status {
        object.key("Status").string(var_2148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretRotationRules,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automatically_after_days != 0 {
        object.key("AutomaticallyAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automatically_after_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2149) = &input.attributes {
        let mut object_2150 = object.key("Attributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(&mut object_2150, var_2149)?;
        object_2150.finish();
    }
    if let Some(var_2151) = &input.session_issuer {
        let mut object_2152 = object.key("SessionIssuer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(&mut object_2152, var_2151)?;
        object_2152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_attached_managed_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAttachedManagedPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2153) = &input.policy_name {
        object.key("PolicyName").string(var_2153.as_str());
    }
    if let Some(var_2154) = &input.policy_arn {
        object.key("PolicyArn").string(var_2154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_permissions_boundary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPermissionsBoundary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2155) = &input.permissions_boundary_arn {
        object
            .key("PermissionsBoundaryArn")
            .string(var_2155.as_str());
    }
    if let Some(var_2156) = &input.permissions_boundary_type {
        object
            .key("PermissionsBoundaryType")
            .string(var_2156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2157) = &input.policy_name {
        object.key("PolicyName").string(var_2157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2158) = &input.version_id {
        object.key("VersionId").string(var_2158.as_str());
    }
    if input.is_default_version {
        object
            .key("IsDefaultVersion")
            .boolean(input.is_default_version);
    }
    if let Some(var_2159) = &input.create_date {
        object.key("CreateDate").string(var_2159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2RouteSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.detailed_metrics_enabled {
        object
            .key("DetailedMetricsEnabled")
            .boolean(input.detailed_metrics_enabled);
    }
    if let Some(var_2160) = &input.logging_level {
        object.key("LoggingLevel").string(var_2160.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_access_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayAccessLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2161) = &input.format {
        object.key("Format").string(var_2161.as_str());
    }
    if let Some(var_2162) = &input.destination_arn {
        object.key("DestinationArn").string(var_2162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cors_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCorsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2163) = &input.allow_origins {
        let mut array_2164 = object.key("AllowOrigins").start_array();
        for item_2165 in var_2163 {
            {
                array_2164.value().string(item_2165.as_str());
            }
        }
        array_2164.finish();
    }
    if input.allow_credentials {
        object
            .key("AllowCredentials")
            .boolean(input.allow_credentials);
    }
    if let Some(var_2166) = &input.expose_headers {
        let mut array_2167 = object.key("ExposeHeaders").start_array();
        for item_2168 in var_2166 {
            {
                array_2167.value().string(item_2168.as_str());
            }
        }
        array_2167.finish();
    }
    if input.max_age != 0 {
        object.key("MaxAge").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_age).into()),
        );
    }
    if let Some(var_2169) = &input.allow_methods {
        let mut array_2170 = object.key("AllowMethods").start_array();
        for item_2171 in var_2169 {
            {
                array_2170.value().string(item_2171.as_str());
            }
        }
        array_2170.finish();
    }
    if let Some(var_2172) = &input.allow_headers {
        let mut array_2173 = object.key("AllowHeaders").start_array();
        for item_2174 in var_2172 {
            {
                array_2173.value().string(item_2174.as_str());
            }
        }
        array_2173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableAttributeDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2175) = &input.attribute_name {
        object.key("AttributeName").string(var_2175.as_str());
    }
    if let Some(var_2176) = &input.attribute_type {
        object.key("AttributeType").string(var_2176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableBillingModeSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2177) = &input.billing_mode {
        object.key("BillingMode").string(var_2177.as_str());
    }
    if let Some(var_2178) = &input.last_update_to_pay_per_request_date_time {
        object
            .key("LastUpdateToPayPerRequestDateTime")
            .string(var_2178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.backfilling {
        object.key("Backfilling").boolean(input.backfilling);
    }
    if let Some(var_2179) = &input.index_arn {
        object.key("IndexArn").string(var_2179.as_str());
    }
    if let Some(var_2180) = &input.index_name {
        object.key("IndexName").string(var_2180.as_str());
    }
    if input.index_size_bytes != 0 {
        object.key("IndexSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.index_size_bytes).into()),
        );
    }
    if let Some(var_2181) = &input.index_status {
        object.key("IndexStatus").string(var_2181.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_2182) = &input.key_schema {
        let mut array_2183 = object.key("KeySchema").start_array();
        for item_2184 in var_2182 {
            {
                let mut object_2185 = array_2183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2185,
                    item_2184,
                )?;
                object_2185.finish();
            }
        }
        array_2183.finish();
    }
    if let Some(var_2186) = &input.projection {
        let mut object_2187 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2187,
            var_2186,
        )?;
        object_2187.finish();
    }
    if let Some(var_2188) = &input.provisioned_throughput {
        let mut object_2189 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_2189, var_2188)?;
        object_2189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableKeySchema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2190) = &input.attribute_name {
        object.key("AttributeName").string(var_2190.as_str());
    }
    if let Some(var_2191) = &input.key_type {
        object.key("KeyType").string(var_2191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableLocalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2192) = &input.index_arn {
        object.key("IndexArn").string(var_2192.as_str());
    }
    if let Some(var_2193) = &input.index_name {
        object.key("IndexName").string(var_2193.as_str());
    }
    if let Some(var_2194) = &input.key_schema {
        let mut array_2195 = object.key("KeySchema").start_array();
        for item_2196 in var_2194 {
            {
                let mut object_2197 = array_2195.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2197,
                    item_2196,
                )?;
                object_2197.finish();
            }
        }
        array_2195.finish();
    }
    if let Some(var_2198) = &input.projection {
        let mut object_2199 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2199,
            var_2198,
        )?;
        object_2199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2200) = &input.last_decrease_date_time {
        object.key("LastDecreaseDateTime").string(var_2200.as_str());
    }
    if let Some(var_2201) = &input.last_increase_date_time {
        object.key("LastIncreaseDateTime").string(var_2201.as_str());
    }
    if input.number_of_decreases_today != 0 {
        object.key("NumberOfDecreasesToday").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_decreases_today).into()),
        );
    }
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    if input.write_capacity_units != 0 {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.write_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplica,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2202) = &input.global_secondary_indexes {
        let mut array_2203 = object.key("GlobalSecondaryIndexes").start_array();
        for item_2204 in var_2202 {
            {
                let mut object_2205 = array_2203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(&mut object_2205, item_2204)?;
                object_2205.finish();
            }
        }
        array_2203.finish();
    }
    if let Some(var_2206) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_2206.as_str());
    }
    if let Some(var_2207) = &input.provisioned_throughput_override {
        let mut object_2208 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_2208, var_2207)?;
        object_2208.finish();
    }
    if let Some(var_2209) = &input.region_name {
        object.key("RegionName").string(var_2209.as_str());
    }
    if let Some(var_2210) = &input.replica_status {
        object.key("ReplicaStatus").string(var_2210.as_str());
    }
    if let Some(var_2211) = &input.replica_status_description {
        object
            .key("ReplicaStatusDescription")
            .string(var_2211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableRestoreSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2212) = &input.source_backup_arn {
        object.key("SourceBackupArn").string(var_2212.as_str());
    }
    if let Some(var_2213) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_2213.as_str());
    }
    if let Some(var_2214) = &input.restore_date_time {
        object.key("RestoreDateTime").string(var_2214.as_str());
    }
    if input.restore_in_progress {
        object
            .key("RestoreInProgress")
            .boolean(input.restore_in_progress);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableSseDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2215) = &input.inaccessible_encryption_date_time {
        object
            .key("InaccessibleEncryptionDateTime")
            .string(var_2215.as_str());
    }
    if let Some(var_2216) = &input.status {
        object.key("Status").string(var_2216.as_str());
    }
    if let Some(var_2217) = &input.sse_type {
        object.key("SseType").string(var_2217.as_str());
    }
    if let Some(var_2218) = &input.kms_master_key_arn {
        object.key("KmsMasterKeyArn").string(var_2218.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableStreamSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.stream_enabled {
        object.key("StreamEnabled").boolean(input.stream_enabled);
    }
    if let Some(var_2219) = &input.stream_view_type {
        object.key("StreamViewType").string(var_2219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_method_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayMethodSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.metrics_enabled {
        object.key("MetricsEnabled").boolean(input.metrics_enabled);
    }
    if let Some(var_2220) = &input.logging_level {
        object.key("LoggingLevel").string(var_2220.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    if input.caching_enabled {
        object.key("CachingEnabled").boolean(input.caching_enabled);
    }
    if input.cache_ttl_in_seconds != 0 {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cache_ttl_in_seconds).into()),
        );
    }
    if input.cache_data_encrypted {
        object
            .key("CacheDataEncrypted")
            .boolean(input.cache_data_encrypted);
    }
    if input.require_authorization_for_cache_control {
        object
            .key("RequireAuthorizationForCacheControl")
            .boolean(input.require_authorization_for_cache_control);
    }
    if let Some(var_2221) = &input.unauthorized_cache_control_header_strategy {
        object
            .key("UnauthorizedCacheControlHeaderStrategy")
            .string(var_2221.as_str());
    }
    if let Some(var_2222) = &input.http_method {
        object.key("HttpMethod").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.resource_path {
        object.key("ResourcePath").string(var_2223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_canary_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayCanarySettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.percent_traffic != 0.0 {
        object.key("PercentTraffic").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.percent_traffic).into()),
        );
    }
    if let Some(var_2224) = &input.deployment_id {
        object.key("DeploymentId").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.stage_variable_overrides {
        let mut object_2226 = object.key("StageVariableOverrides").start_object();
        for (key_2227, value_2228) in var_2225 {
            {
                object_2226.key(key_2227).string(value_2228.as_str());
            }
        }
        object_2226.finish();
    }
    if input.use_stage_cache {
        object.key("UseStageCache").boolean(input.use_stage_cache);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayEndpointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2229) = &input.types {
        let mut array_2230 = object.key("Types").start_array();
        for item_2231 in var_2229 {
            {
                array_2230.value().string(item_2231.as_str());
            }
        }
        array_2230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2232) = &input.compliance_summary {
        let mut object_2233 = object.key("ComplianceSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_compliance_summary(
            &mut object_2233,
            var_2232,
        )?;
        object_2233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDomainValidationOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2234) = &input.domain_name {
        object.key("DomainName").string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.resource_record {
        let mut object_2236 = object.key("ResourceRecord").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(&mut object_2236, var_2235)?;
        object_2236.finish();
    }
    if let Some(var_2237) = &input.validation_domain {
        object.key("ValidationDomain").string(var_2237.as_str());
    }
    if let Some(var_2238) = &input.validation_emails {
        let mut array_2239 = object.key("ValidationEmails").start_array();
        for item_2240 in var_2238 {
            {
                array_2239.value().string(item_2240.as_str());
            }
        }
        array_2239.finish();
    }
    if let Some(var_2241) = &input.validation_method {
        object.key("ValidationMethod").string(var_2241.as_str());
    }
    if let Some(var_2242) = &input.validation_status {
        object.key("ValidationStatus").string(var_2242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateExtendedKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2243) = &input.name {
        object.key("Name").string(var_2243.as_str());
    }
    if let Some(var_2244) = &input.o_id {
        object.key("OId").string(var_2244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2245) = &input.name {
        object.key("Name").string(var_2245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2246) = &input.certificate_transparency_logging_preference {
        object
            .key("CertificateTransparencyLoggingPreference")
            .string(var_2246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateRenewalSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2247) = &input.domain_validation_options {
        let mut array_2248 = object.key("DomainValidationOptions").start_array();
        for item_2249 in var_2247 {
            {
                let mut object_2250 = array_2248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_2250, item_2249)?;
                object_2250.finish();
            }
        }
        array_2248.finish();
    }
    if let Some(var_2251) = &input.renewal_status {
        object.key("RenewalStatus").string(var_2251.as_str());
    }
    if let Some(var_2252) = &input.renewal_status_reason {
        object.key("RenewalStatusReason").string(var_2252.as_str());
    }
    if let Some(var_2253) = &input.updated_at {
        object.key("UpdatedAt").string(var_2253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2254) = &input.node_role {
        object.key("NodeRole").string(var_2254.as_str());
    }
    if let Some(var_2255) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2255.as_str());
    }
    if let Some(var_2256) = &input.public_ip_address {
        object.key("PublicIpAddress").string(var_2256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2257) = &input.cluster_parameter_status_list {
        let mut array_2258 = object.key("ClusterParameterStatusList").start_array();
        for item_2259 in var_2257 {
            {
                let mut object_2260 = array_2258.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(&mut object_2260, item_2259)?;
                object_2260.finish();
            }
        }
        array_2258.finish();
    }
    if let Some(var_2261) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2261.as_str());
    }
    if let Some(var_2262) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_2262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2263) = &input.cluster_security_group_name {
        object
            .key("ClusterSecurityGroupName")
            .string(var_2263.as_str());
    }
    if let Some(var_2264) = &input.status {
        object.key("Status").string(var_2264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSnapshotCopyStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2265) = &input.destination_region {
        object.key("DestinationRegion").string(var_2265.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if input.retention_period != 0 {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    if let Some(var_2266) = &input.snapshot_copy_grant_name {
        object
            .key("SnapshotCopyGrantName")
            .string(var_2266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDeferredMaintenanceWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2267) = &input.defer_maintenance_end_time {
        object
            .key("DeferMaintenanceEndTime")
            .string(var_2267.as_str());
    }
    if let Some(var_2268) = &input.defer_maintenance_identifier {
        object
            .key("DeferMaintenanceIdentifier")
            .string(var_2268.as_str());
    }
    if let Some(var_2269) = &input.defer_maintenance_start_time {
        object
            .key("DeferMaintenanceStartTime")
            .string(var_2269.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterElasticIpStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2270) = &input.elastic_ip {
        object.key("ElasticIp").string(var_2270.as_str());
    }
    if let Some(var_2271) = &input.status {
        object.key("Status").string(var_2271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2272) = &input.address {
        object.key("Address").string(var_2272.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterHsmStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2273) = &input.hsm_client_certificate_identifier {
        object
            .key("HsmClientCertificateIdentifier")
            .string(var_2273.as_str());
    }
    if let Some(var_2274) = &input.hsm_configuration_identifier {
        object
            .key("HsmConfigurationIdentifier")
            .string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.status {
        object.key("Status").string(var_2275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_iam_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterIamRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2276) = &input.apply_status {
        object.key("ApplyStatus").string(var_2276.as_str());
    }
    if let Some(var_2277) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_2277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_2278) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_2278.as_str());
    }
    if let Some(var_2279) = &input.cluster_type {
        object.key("ClusterType").string(var_2279.as_str());
    }
    if let Some(var_2280) = &input.cluster_version {
        object.key("ClusterVersion").string(var_2280.as_str());
    }
    if let Some(var_2281) = &input.encryption_type {
        object.key("EncryptionType").string(var_2281.as_str());
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_2282) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_2282.as_str());
    }
    if let Some(var_2283) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2283.as_str());
    }
    if let Some(var_2284) = &input.node_type {
        object.key("NodeType").string(var_2284.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_resize_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterResizeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_cancel_resize {
        object
            .key("AllowCancelResize")
            .boolean(input.allow_cancel_resize);
    }
    if let Some(var_2285) = &input.resize_type {
        object.key("ResizeType").string(var_2285.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_restore_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterRestoreStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.current_restore_rate_in_mega_bytes_per_second != 0.0 {
        object.key("CurrentRestoreRateInMegaBytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float(
                (input.current_restore_rate_in_mega_bytes_per_second).into(),
            ),
        );
    }
    if input.elapsed_time_in_seconds != 0 {
        object.key("ElapsedTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.elapsed_time_in_seconds).into()),
        );
    }
    if input.estimated_time_to_completion_in_seconds != 0 {
        object.key("EstimatedTimeToCompletionInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.estimated_time_to_completion_in_seconds).into(),
            ),
        );
    }
    if input.progress_in_mega_bytes != 0 {
        object.key("ProgressInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.progress_in_mega_bytes).into()),
        );
    }
    if input.snapshot_size_in_mega_bytes != 0 {
        object.key("SnapshotSizeInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.snapshot_size_in_mega_bytes).into()),
        );
    }
    if let Some(var_2286) = &input.status {
        object.key("Status").string(var_2286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2287) = &input.status {
        object.key("Status").string(var_2287.as_str());
    }
    if let Some(var_2288) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_logging_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterLoggingStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2289) = &input.bucket_name {
        object.key("BucketName").string(var_2289.as_str());
    }
    if let Some(var_2290) = &input.last_failure_message {
        object.key("LastFailureMessage").string(var_2290.as_str());
    }
    if let Some(var_2291) = &input.last_failure_time {
        object.key("LastFailureTime").string(var_2291.as_str());
    }
    if let Some(var_2292) = &input.last_successful_delivery_time {
        object
            .key("LastSuccessfulDeliveryTime")
            .string(var_2292.as_str());
    }
    if input.logging_enabled {
        object.key("LoggingEnabled").boolean(input.logging_enabled);
    }
    if let Some(var_2293) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2293.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerBackendServerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2294) = &input.policy_names {
        let mut array_2295 = object.key("PolicyNames").start_array();
        for item_2296 in var_2294 {
            {
                array_2295.value().string(item_2296.as_str());
            }
        }
        array_2295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_health_check(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerHealthCheck,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.healthy_threshold != 0 {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if let Some(var_2297) = &input.target {
        object.key("Target").string(var_2297.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if input.unhealthy_threshold != 0 {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_instance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerInstance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2298) = &input.instance_id {
        object.key("InstanceId").string(var_2298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListenerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2299) = &input.listener {
        let mut object_2300 = object.key("Listener").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener(
            &mut object_2300,
            var_2299,
        )?;
        object_2300.finish();
    }
    if let Some(var_2301) = &input.policy_names {
        let mut array_2302 = object.key("PolicyNames").start_array();
        for item_2303 in var_2301 {
            {
                array_2302.value().string(item_2303.as_str());
            }
        }
        array_2302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2304) = &input.access_log {
        let mut object_2305 = object.key("AccessLog").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_access_log(
            &mut object_2305,
            var_2304,
        )?;
        object_2305.finish();
    }
    if let Some(var_2306) = &input.connection_draining {
        let mut object_2307 = object.key("ConnectionDraining").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
            &mut object_2307,
            var_2306,
        )?;
        object_2307.finish();
    }
    if let Some(var_2308) = &input.connection_settings {
        let mut object_2309 = object.key("ConnectionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
            &mut object_2309,
            var_2308,
        )?;
        object_2309.finish();
    }
    if let Some(var_2310) = &input.cross_zone_load_balancing {
        let mut object_2311 = object.key("CrossZoneLoadBalancing").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(&mut object_2311, var_2310)?;
        object_2311.finish();
    }
    if let Some(var_2312) = &input.additional_attributes {
        let mut array_2313 = object.key("AdditionalAttributes").start_array();
        for item_2314 in var_2312 {
            {
                let mut object_2315 = array_2313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(&mut object_2315, item_2314)?;
                object_2315.finish();
            }
        }
        array_2313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_policies(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerPolicies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2316) = &input.app_cookie_stickiness_policies {
        let mut array_2317 = object.key("AppCookieStickinessPolicies").start_array();
        for item_2318 in var_2316 {
            {
                let mut object_2319 = array_2317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(&mut object_2319, item_2318)?;
                object_2319.finish();
            }
        }
        array_2317.finish();
    }
    if let Some(var_2320) = &input.lb_cookie_stickiness_policies {
        let mut array_2321 = object.key("LbCookieStickinessPolicies").start_array();
        for item_2322 in var_2320 {
            {
                let mut object_2323 = array_2321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(&mut object_2323, item_2322)?;
                object_2323.finish();
            }
        }
        array_2321.finish();
    }
    if let Some(var_2324) = &input.other_policies {
        let mut array_2325 = object.key("OtherPolicies").start_array();
        for item_2326 in var_2324 {
            {
                array_2325.value().string(item_2326.as_str());
            }
        }
        array_2325.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerSourceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2327) = &input.group_name {
        object.key("GroupName").string(var_2327.as_str());
    }
    if let Some(var_2328) = &input.owner_alias {
        object.key("OwnerAlias").string(var_2328.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2329) = &input.policy_name {
        object.key("PolicyName").string(var_2329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2330) = &input.arn {
        object.key("Arn").string(var_2330.as_str());
    }
    if let Some(var_2331) = &input.create_date {
        object.key("CreateDate").string(var_2331.as_str());
    }
    if let Some(var_2332) = &input.instance_profile_id {
        object.key("InstanceProfileId").string(var_2332.as_str());
    }
    if let Some(var_2333) = &input.instance_profile_name {
        object.key("InstanceProfileName").string(var_2333.as_str());
    }
    if let Some(var_2334) = &input.path {
        object.key("Path").string(var_2334.as_str());
    }
    if let Some(var_2335) = &input.roles {
        let mut array_2336 = object.key("Roles").start_array();
        for item_2337 in var_2335 {
            {
                let mut object_2338 = array_2336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile_role(
                    &mut object_2338,
                    item_2337,
                )?;
                object_2338.finish();
            }
        }
        array_2336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRolePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2339) = &input.policy_name {
        object.key("PolicyName").string(var_2339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2340) = &input.s3_bucket {
        object.key("S3Bucket").string(var_2340.as_str());
    }
    if let Some(var_2341) = &input.s3_key {
        object.key("S3Key").string(var_2341.as_str());
    }
    if let Some(var_2342) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_2342.as_str());
    }
    if let Some(var_2343) = &input.zip_file {
        object.key("ZipFile").string(var_2343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDeadLetterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2344) = &input.target_arn {
        object.key("TargetArn").string(var_2344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2345) = &input.variables {
        let mut object_2346 = object.key("Variables").start_object();
        for (key_2347, value_2348) in var_2345 {
            {
                object_2346.key(key_2347).string(value_2348.as_str());
            }
        }
        object_2346.finish();
    }
    if let Some(var_2349) = &input.error {
        let mut object_2350 = object.key("Error").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment_error(
            &mut object_2350,
            var_2349,
        )?;
        object_2350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_layer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionLayer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2351) = &input.arn {
        object.key("Arn").string(var_2351.as_str());
    }
    if input.code_size != 0 {
        object.key("CodeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_tracing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionTracingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2352) = &input.mode {
        object.key("Mode").string(var_2352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2353) = &input.security_group_ids {
        let mut array_2354 = object.key("SecurityGroupIds").start_array();
        for item_2355 in var_2353 {
            {
                array_2354.value().string(item_2355.as_str());
            }
        }
        array_2354.finish();
    }
    if let Some(var_2356) = &input.subnet_ids {
        let mut array_2357 = object.key("SubnetIds").start_array();
        for item_2358 in var_2356 {
            {
                array_2357.value().string(item_2358.as_str());
            }
        }
        array_2357.finish();
    }
    if let Some(var_2359) = &input.vpc_id {
        object.key("VpcId").string(var_2359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2360) = &input.role_arn {
        object.key("RoleArn").string(var_2360.as_str());
    }
    if let Some(var_2361) = &input.feature_name {
        object.key("FeatureName").string(var_2361.as_str());
    }
    if let Some(var_2362) = &input.status {
        object.key("Status").string(var_2362.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2363) = &input.address {
        object.key("Address").string(var_2363.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2364) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_2364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2365) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2365.as_str());
    }
    if let Some(var_2366) = &input.status {
        object.key("Status").string(var_2366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2367) = &input.db_parameter_group_name {
        object.key("DbParameterGroupName").string(var_2367.as_str());
    }
    if let Some(var_2368) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2369) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2369.as_str());
    }
    if let Some(var_2370) = &input.db_subnet_group_description {
        object
            .key("DbSubnetGroupDescription")
            .string(var_2370.as_str());
    }
    if let Some(var_2371) = &input.vpc_id {
        object.key("VpcId").string(var_2371.as_str());
    }
    if let Some(var_2372) = &input.subnet_group_status {
        object.key("SubnetGroupStatus").string(var_2372.as_str());
    }
    if let Some(var_2373) = &input.subnets {
        let mut array_2374 = object.key("Subnets").start_array();
        for item_2375 in var_2373 {
            {
                let mut object_2376 = array_2374.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
                    &mut object_2376,
                    item_2375,
                )?;
                object_2376.finish();
            }
        }
        array_2374.finish();
    }
    if let Some(var_2377) = &input.db_subnet_group_arn {
        object.key("DbSubnetGroupArn").string(var_2377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2378) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_2378.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_2379) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2379.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_2380) = &input.engine_version {
        object.key("EngineVersion").string(var_2380.as_str());
    }
    if let Some(var_2381) = &input.license_model {
        object.key("LicenseModel").string(var_2381.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2382) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2382.as_str());
    }
    if let Some(var_2383) = &input.storage_type {
        object.key("StorageType").string(var_2383.as_str());
    }
    if let Some(var_2384) = &input.ca_certificate_identifier {
        object
            .key("CaCertificateIdentifier")
            .string(var_2384.as_str());
    }
    if let Some(var_2385) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2385.as_str());
    }
    if let Some(var_2386) = &input.pending_cloud_watch_logs_exports {
        let mut object_2387 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
            &mut object_2387,
            var_2386,
        )?;
        object_2387.finish();
    }
    if let Some(var_2388) = &input.processor_features {
        let mut array_2389 = object.key("ProcessorFeatures").start_array();
        for item_2390 in var_2388 {
            {
                let mut object_2391 = array_2389.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_2391,
                    item_2390,
                )?;
                object_2391.finish();
            }
        }
        array_2389.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2392) = &input.option_group_name {
        object.key("OptionGroupName").string(var_2392.as_str());
    }
    if let Some(var_2393) = &input.status {
        object.key("Status").string(var_2393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_status_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbStatusInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2394) = &input.status_type {
        object.key("StatusType").string(var_2394.as_str());
    }
    if input.normal {
        object.key("Normal").boolean(input.normal);
    }
    if let Some(var_2395) = &input.status {
        object.key("Status").string(var_2395.as_str());
    }
    if let Some(var_2396) = &input.message {
        object.key("Message").string(var_2396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_domain_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbDomainMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2397) = &input.domain {
        object.key("Domain").string(var_2397.as_str());
    }
    if let Some(var_2398) = &input.status {
        object.key("Status").string(var_2398.as_str());
    }
    if let Some(var_2399) = &input.fqdn {
        object.key("Fqdn").string(var_2399.as_str());
    }
    if let Some(var_2400) = &input.iam_role_name {
        object.key("IamRoleName").string(var_2400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_processor_feature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbProcessorFeature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2401) = &input.name {
        object.key("Name").string(var_2401.as_str());
    }
    if let Some(var_2402) = &input.value {
        object.key("Value").string(var_2402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_subscription(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicSubscription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2403) = &input.endpoint {
        object.key("Endpoint").string(var_2403.as_str());
    }
    if let Some(var_2404) = &input.protocol {
        object.key("Protocol").string(var_2404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2405) = &input.action {
        let mut object_2406 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_action(&mut object_2406, var_2405)?;
        object_2406.finish();
    }
    if let Some(var_2407) = &input.excluded_rules {
        let mut array_2408 = object.key("ExcludedRules").start_array();
        for item_2409 in var_2407 {
            {
                let mut object_2410 = array_2408.value().start_object();
                crate::json_ser::serialize_structure_crate_model_waf_excluded_rule(
                    &mut object_2410,
                    item_2409,
                )?;
                object_2410.finish();
            }
        }
        array_2408.finish();
    }
    if let Some(var_2411) = &input.override_action {
        let mut object_2412 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_override_action(
            &mut object_2412,
            var_2411,
        )?;
        object_2412.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2413) = &input.rule_id {
        object.key("RuleId").string(var_2413.as_str());
    }
    if let Some(var_2414) = &input.r#type {
        object.key("Type").string(var_2414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2415) = &input.role_arn {
        object.key("RoleArn").string(var_2415.as_str());
    }
    if let Some(var_2416) = &input.status {
        object.key("Status").string(var_2416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2417) = &input.db_cluster_option_group_name {
        object
            .key("DbClusterOptionGroupName")
            .string(var_2417.as_str());
    }
    if let Some(var_2418) = &input.status {
        object.key("Status").string(var_2418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_member(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterMember,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_cluster_writer {
        object
            .key("IsClusterWriter")
            .boolean(input.is_cluster_writer);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_2419) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2419.as_str());
    }
    if let Some(var_2420) = &input.db_cluster_parameter_group_status {
        object
            .key("DbClusterParameterGroupStatus")
            .string(var_2420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterClusterSettingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2421) = &input.name {
        object.key("Name").string(var_2421.as_str());
    }
    if let Some(var_2422) = &input.value {
        object.key("Value").string(var_2422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2423) = &input.execute_command_configuration {
        let mut object_2424 = object.key("ExecuteCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(&mut object_2424, var_2423)?;
        object_2424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDefaultCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2425) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2425.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2426) = &input.command {
        let mut array_2427 = object.key("Command").start_array();
        for item_2428 in var_2426 {
            {
                array_2427.value().string(item_2428.as_str());
            }
        }
        array_2427.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_2429) = &input.depends_on {
        let mut array_2430 = object.key("DependsOn").start_array();
        for item_2431 in var_2429 {
            {
                let mut object_2432 = array_2430.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_2432, item_2431)?;
                object_2432.finish();
            }
        }
        array_2430.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_2433) = &input.dns_search_domains {
        let mut array_2434 = object.key("DnsSearchDomains").start_array();
        for item_2435 in var_2433 {
            {
                array_2434.value().string(item_2435.as_str());
            }
        }
        array_2434.finish();
    }
    if let Some(var_2436) = &input.dns_servers {
        let mut array_2437 = object.key("DnsServers").start_array();
        for item_2438 in var_2436 {
            {
                array_2437.value().string(item_2438.as_str());
            }
        }
        array_2437.finish();
    }
    if let Some(var_2439) = &input.docker_labels {
        let mut object_2440 = object.key("DockerLabels").start_object();
        for (key_2441, value_2442) in var_2439 {
            {
                object_2440.key(key_2441).string(value_2442.as_str());
            }
        }
        object_2440.finish();
    }
    if let Some(var_2443) = &input.docker_security_options {
        let mut array_2444 = object.key("DockerSecurityOptions").start_array();
        for item_2445 in var_2443 {
            {
                array_2444.value().string(item_2445.as_str());
            }
        }
        array_2444.finish();
    }
    if let Some(var_2446) = &input.entry_point {
        let mut array_2447 = object.key("EntryPoint").start_array();
        for item_2448 in var_2446 {
            {
                array_2447.value().string(item_2448.as_str());
            }
        }
        array_2447.finish();
    }
    if let Some(var_2449) = &input.environment {
        let mut array_2450 = object.key("Environment").start_array();
        for item_2451 in var_2449 {
            {
                let mut object_2452 = array_2450.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(&mut object_2452, item_2451)?;
                object_2452.finish();
            }
        }
        array_2450.finish();
    }
    if let Some(var_2453) = &input.environment_files {
        let mut array_2454 = object.key("EnvironmentFiles").start_array();
        for item_2455 in var_2453 {
            {
                let mut object_2456 = array_2454.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_2456, item_2455)?;
                object_2456.finish();
            }
        }
        array_2454.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_2457) = &input.extra_hosts {
        let mut array_2458 = object.key("ExtraHosts").start_array();
        for item_2459 in var_2457 {
            {
                let mut object_2460 = array_2458.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_2460, item_2459)?;
                object_2460.finish();
            }
        }
        array_2458.finish();
    }
    if let Some(var_2461) = &input.firelens_configuration {
        let mut object_2462 = object.key("FirelensConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_2462, var_2461)?;
        object_2462.finish();
    }
    if let Some(var_2463) = &input.health_check {
        let mut object_2464 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_2464, var_2463)?;
        object_2464.finish();
    }
    if let Some(var_2465) = &input.hostname {
        object.key("Hostname").string(var_2465.as_str());
    }
    if let Some(var_2466) = &input.image {
        object.key("Image").string(var_2466.as_str());
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_2467) = &input.links {
        let mut array_2468 = object.key("Links").start_array();
        for item_2469 in var_2467 {
            {
                array_2468.value().string(item_2469.as_str());
            }
        }
        array_2468.finish();
    }
    if let Some(var_2470) = &input.linux_parameters {
        let mut object_2471 = object.key("LinuxParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_2471, var_2470)?;
        object_2471.finish();
    }
    if let Some(var_2472) = &input.log_configuration {
        let mut object_2473 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_2473, var_2472)?;
        object_2473.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_2474) = &input.mount_points {
        let mut array_2475 = object.key("MountPoints").start_array();
        for item_2476 in var_2474 {
            {
                let mut object_2477 = array_2475.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_2477, item_2476)?;
                object_2477.finish();
            }
        }
        array_2475.finish();
    }
    if let Some(var_2478) = &input.name {
        object.key("Name").string(var_2478.as_str());
    }
    if let Some(var_2479) = &input.port_mappings {
        let mut array_2480 = object.key("PortMappings").start_array();
        for item_2481 in var_2479 {
            {
                let mut object_2482 = array_2480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_2482, item_2481)?;
                object_2482.finish();
            }
        }
        array_2480.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_2483) = &input.repository_credentials {
        let mut object_2484 = object.key("RepositoryCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_2484, var_2483)?;
        object_2484.finish();
    }
    if let Some(var_2485) = &input.resource_requirements {
        let mut array_2486 = object.key("ResourceRequirements").start_array();
        for item_2487 in var_2485 {
            {
                let mut object_2488 = array_2486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_2488, item_2487)?;
                object_2488.finish();
            }
        }
        array_2486.finish();
    }
    if let Some(var_2489) = &input.secrets {
        let mut array_2490 = object.key("Secrets").start_array();
        for item_2491 in var_2489 {
            {
                let mut object_2492 = array_2490.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_2492, item_2491)?;
                object_2492.finish();
            }
        }
        array_2490.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_2493) = &input.system_controls {
        let mut array_2494 = object.key("SystemControls").start_array();
        for item_2495 in var_2493 {
            {
                let mut object_2496 = array_2494.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_2496, item_2495)?;
                object_2496.finish();
            }
        }
        array_2494.finish();
    }
    if let Some(var_2497) = &input.ulimits {
        let mut array_2498 = object.key("Ulimits").start_array();
        for item_2499 in var_2497 {
            {
                let mut object_2500 = array_2498.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_2500, item_2499)?;
                object_2500.finish();
            }
        }
        array_2498.finish();
    }
    if let Some(var_2501) = &input.user {
        object.key("User").string(var_2501.as_str());
    }
    if let Some(var_2502) = &input.volumes_from {
        let mut array_2503 = object.key("VolumesFrom").start_array();
        for item_2504 in var_2502 {
            {
                let mut object_2505 = array_2503.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_2505, item_2504)?;
                object_2505.finish();
            }
        }
        array_2503.finish();
    }
    if let Some(var_2506) = &input.working_directory {
        object.key("WorkingDirectory").string(var_2506.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionInferenceAcceleratorsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2507) = &input.device_name {
        object.key("DeviceName").string(var_2507.as_str());
    }
    if let Some(var_2508) = &input.device_type {
        object.key("DeviceType").string(var_2508.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionPlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2509) = &input.expression {
        object.key("Expression").string(var_2509.as_str());
    }
    if let Some(var_2510) = &input.r#type {
        object.key("Type").string(var_2510.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2511) = &input.container_name {
        object.key("ContainerName").string(var_2511.as_str());
    }
    if let Some(var_2512) = &input.proxy_configuration_properties {
        let mut array_2513 = object.key("ProxyConfigurationProperties").start_array();
        for item_2514 in var_2512 {
            {
                let mut object_2515 = array_2513.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(&mut object_2515, item_2514)?;
                object_2515.finish();
            }
        }
        array_2513.finish();
    }
    if let Some(var_2516) = &input.r#type {
        object.key("Type").string(var_2516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2517) = &input.docker_volume_configuration {
        let mut object_2518 = object.key("DockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(&mut object_2518, var_2517)?;
        object_2518.finish();
    }
    if let Some(var_2519) = &input.efs_volume_configuration {
        let mut object_2520 = object.key("EfsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(&mut object_2520, var_2519)?;
        object_2520.finish();
    }
    if let Some(var_2521) = &input.host {
        let mut object_2522 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(&mut object_2522, var_2521)?;
        object_2522.finish();
    }
    if let Some(var_2523) = &input.name {
        object.key("Name").string(var_2523.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2524) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2524.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2525) = &input.deployment_circuit_breaker {
        let mut object_2526 = object.key("DeploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(&mut object_2526, var_2525)?;
        object_2526.finish();
    }
    if input.maximum_percent != 0 {
        object.key("MaximumPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_percent).into()),
        );
    }
    if input.minimum_healthy_percent != 0 {
        object.key("MinimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_healthy_percent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentControllerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2527) = &input.r#type {
        object.key("Type").string(var_2527.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_load_balancers_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceLoadBalancersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2528) = &input.container_name {
        object.key("ContainerName").string(var_2528.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if let Some(var_2529) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_2529.as_str());
    }
    if let Some(var_2530) = &input.target_group_arn {
        object.key("TargetGroupArn").string(var_2530.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2531) = &input.aws_vpc_configuration {
        let mut object_2532 = object.key("AwsVpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(&mut object_2532, var_2531)?;
        object_2532.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2533) = &input.expression {
        object.key("Expression").string(var_2533.as_str());
    }
    if let Some(var_2534) = &input.r#type {
        object.key("Type").string(var_2534.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementStrategiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2535) = &input.field {
        object.key("Field").string(var_2535.as_str());
    }
    if let Some(var_2536) = &input.r#type {
        object.key("Type").string(var_2536.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_service_registries_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceServiceRegistriesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2537) = &input.container_name {
        object.key("ContainerName").string(var_2537.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2538) = &input.registry_arn {
        object.key("RegistryArn").string(var_2538.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2539) = &input.device_name {
        object.key("DeviceName").string(var_2539.as_str());
    }
    if let Some(var_2540) = &input.ebs {
        let mut object_2541 = object.key("Ebs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(&mut object_2541, var_2540)?;
        object_2541.finish();
    }
    if input.no_device {
        object.key("NoDevice").boolean(input.no_device);
    }
    if let Some(var_2542) = &input.virtual_name {
        object.key("VirtualName").string(var_2542.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationMetadataOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2543) = &input.http_endpoint {
        object.key("HttpEndpoint").string(var_2543.as_str());
    }
    if input.http_put_response_hop_limit != 0 {
        object.key("HttpPutResponseHopLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.http_put_response_hop_limit).into()),
        );
    }
    if let Some(var_2544) = &input.http_tokens {
        object.key("HttpTokens").string(var_2544.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionVgwTelemetryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.accepted_route_count != 0 {
        object.key("AcceptedRouteCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.accepted_route_count).into()),
        );
    }
    if let Some(var_2545) = &input.certificate_arn {
        object.key("CertificateArn").string(var_2545.as_str());
    }
    if let Some(var_2546) = &input.last_status_change {
        object.key("LastStatusChange").string(var_2546.as_str());
    }
    if let Some(var_2547) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_2547.as_str());
    }
    if let Some(var_2548) = &input.status {
        object.key("Status").string(var_2548.as_str());
    }
    if let Some(var_2549) = &input.status_message {
        object.key("StatusMessage").string(var_2549.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.static_routes_only {
        object
            .key("StaticRoutesOnly")
            .boolean(input.static_routes_only);
    }
    if let Some(var_2550) = &input.tunnel_options {
        let mut array_2551 = object.key("TunnelOptions").start_array();
        for item_2552 in var_2550 {
            {
                let mut object_2553 = array_2551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(&mut object_2553, item_2552)?;
                object_2553.finish();
            }
        }
        array_2551.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionRoutesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2554) = &input.destination_cidr_block {
        object.key("DestinationCidrBlock").string(var_2554.as_str());
    }
    if let Some(var_2555) = &input.state {
        object.key("State").string(var_2555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2556) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2556.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2557) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2557.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2558) = &input.current_version {
        object.key("CurrentVersion").string(var_2558.as_str());
    }
    if let Some(var_2559) = &input.description {
        object.key("Description").string(var_2559.as_str());
    }
    if let Some(var_2560) = &input.new_version {
        object.key("NewVersion").string(var_2560.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2561) = &input.update_status {
        object.key("UpdateStatus").string(var_2561.as_str());
    }
    if input.optional_deployment {
        object
            .key("OptionalDeployment")
            .boolean(input.optional_deployment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if input.warm_enabled {
        object.key("WarmEnabled").boolean(input.warm_enabled);
    }
    if input.warm_count != 0 {
        object.key("WarmCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.warm_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2562) = &input.zone_awareness_config {
        let mut object_2563 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(&mut object_2563, var_2562)?;
        object_2563.finish();
    }
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if let Some(var_2564) = &input.instance_type {
        object.key("InstanceType").string(var_2564.as_str());
    }
    if let Some(var_2565) = &input.warm_type {
        object.key("WarmType").string(var_2565.as_str());
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    if let Some(var_2566) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2566.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDomainEndpointOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2567) = &input.custom_endpoint_certificate_arn {
        object
            .key("CustomEndpointCertificateArn")
            .string(var_2567.as_str());
    }
    if input.custom_endpoint_enabled {
        object
            .key("CustomEndpointEnabled")
            .boolean(input.custom_endpoint_enabled);
    }
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2568) = &input.custom_endpoint {
        object.key("CustomEndpoint").string(var_2568.as_str());
    }
    if let Some(var_2569) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2569.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainVpcOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2570) = &input.security_group_ids {
        let mut array_2571 = object.key("SecurityGroupIds").start_array();
        for item_2572 in var_2570 {
            {
                array_2571.value().string(item_2572.as_str());
            }
        }
        array_2571.finish();
    }
    if let Some(var_2573) = &input.subnet_ids {
        let mut array_2574 = object.key("SubnetIds").start_array();
        for item_2575 in var_2573 {
            {
                array_2574.value().string(item_2575.as_str());
            }
        }
        array_2574.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2576) = &input.index_slow_logs {
        let mut object_2577 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2577, var_2576)?;
        object_2577.finish();
    }
    if let Some(var_2578) = &input.search_slow_logs {
        let mut object_2579 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2579, var_2578)?;
        object_2579.finish();
    }
    if let Some(var_2580) = &input.audit_logs {
        let mut object_2581 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2581, var_2580)?;
        object_2581.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceServiceTypeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2582) = &input.service_type {
        object.key("ServiceType").string(var_2582.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2583) = &input.data_id {
        object.key("DataId").string(var_2583.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2584) = &input.r#type {
        object.key("Type").string(var_2584.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2585) = &input.data_id {
        object.key("DataId").string(var_2585.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2586) = &input.r#type {
        object.key("Type").string(var_2586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryImageScanningConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.scan_on_push {
        object.key("ScanOnPush").boolean(input.scan_on_push);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryLifecyclePolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2587) = &input.lifecycle_policy_text {
        object.key("LifecyclePolicyText").string(var_2587.as_str());
    }
    if let Some(var_2588) = &input.registry_id {
        object.key("RegistryId").string(var_2588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterResourcesVpcConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2589) = &input.security_group_ids {
        let mut array_2590 = object.key("SecurityGroupIds").start_array();
        for item_2591 in var_2589 {
            {
                array_2590.value().string(item_2591.as_str());
            }
        }
        array_2590.finish();
    }
    if let Some(var_2592) = &input.subnet_ids {
        let mut array_2593 = object.key("SubnetIds").start_array();
        for item_2594 in var_2592 {
            {
                array_2593.value().string(item_2594.as_str());
            }
        }
        array_2593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2595) = &input.cluster_logging {
        let mut array_2596 = object.key("ClusterLogging").start_array();
        for item_2597 in var_2595 {
            {
                let mut object_2598 = array_2596.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(&mut object_2598, item_2597)?;
                object_2598.finish();
            }
        }
        array_2596.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2599) = &input.stateful_rule_group_references {
        let mut array_2600 = object.key("StatefulRuleGroupReferences").start_array();
        for item_2601 in var_2599 {
            {
                let mut object_2602 = array_2600.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(&mut object_2602, item_2601)?;
                object_2602.finish();
            }
        }
        array_2600.finish();
    }
    if let Some(var_2603) = &input.stateless_custom_actions {
        let mut array_2604 = object.key("StatelessCustomActions").start_array();
        for item_2605 in var_2603 {
            {
                let mut object_2606 = array_2604.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(&mut object_2606, item_2605)?;
                object_2606.finish();
            }
        }
        array_2604.finish();
    }
    if let Some(var_2607) = &input.stateless_default_actions {
        let mut array_2608 = object.key("StatelessDefaultActions").start_array();
        for item_2609 in var_2607 {
            {
                array_2608.value().string(item_2609.as_str());
            }
        }
        array_2608.finish();
    }
    if let Some(var_2610) = &input.stateless_fragment_default_actions {
        let mut array_2611 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_2612 in var_2610 {
            {
                array_2611.value().string(item_2612.as_str());
            }
        }
        array_2611.finish();
    }
    if let Some(var_2613) = &input.stateless_rule_group_references {
        let mut array_2614 = object.key("StatelessRuleGroupReferences").start_array();
        for item_2615 in var_2613 {
            {
                let mut object_2616 = array_2614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(&mut object_2616, item_2615)?;
                object_2616.finish();
            }
        }
        array_2614.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallSubnetMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2617) = &input.subnet_id {
        object.key("SubnetId").string(var_2617.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2618) = &input.rule_variables {
        let mut object_2619 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables(
            &mut object_2619,
            var_2618,
        )?;
        object_2619.finish();
    }
    if let Some(var_2620) = &input.rules_source {
        let mut object_2621 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source(
            &mut object_2621,
            var_2620,
        )?;
        object_2621.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupEc2SecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2622) = &input.ec2_security_group_id {
        object.key("Ec2SecurityGroupId").string(var_2622.as_str());
    }
    if let Some(var_2623) = &input.ec2_security_group_name {
        object.key("Ec2SecurityGroupName").string(var_2623.as_str());
    }
    if let Some(var_2624) = &input.ec2_security_group_owner_id {
        object
            .key("Ec2SecurityGroupOwnerId")
            .string(var_2624.as_str());
    }
    if let Some(var_2625) = &input.status {
        object.key("Status").string(var_2625.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2626) = &input.cidr_ip {
        object.key("CidrIp").string(var_2626.as_str());
    }
    if let Some(var_2627) = &input.status {
        object.key("Status").string(var_2627.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_organization_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpOrganizationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.asn != 0 {
        object.key("Asn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2628) = &input.asn_org {
        object.key("AsnOrg").string(var_2628.as_str());
    }
    if let Some(var_2629) = &input.isp {
        object.key("Isp").string(var_2629.as_str());
    }
    if let Some(var_2630) = &input.org {
        object.key("Org").string(var_2630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_country(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Country,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2631) = &input.country_code {
        object.key("CountryCode").string(var_2631.as_str());
    }
    if let Some(var_2632) = &input.country_name {
        object.key("CountryName").string(var_2632.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_city(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::City,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2633) = &input.city_name {
        object.key("CityName").string(var_2633.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.lon != 0.0 {
        object.key("Lon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lon).into()),
        );
    }
    if input.lat != 0.0 {
        object.key("Lat").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lat).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2634) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2635) = &input.r#type {
        object.key("Type").string(var_2635.as_str());
    }
    if let Some(var_2636) = &input.occurrences {
        let mut object_2637 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2637, var_2636)?;
        object_2637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2638) = &input.arn {
        object.key("Arn").string(var_2638.as_str());
    }
    if let Some(var_2639) = &input.name {
        object.key("Name").string(var_2639.as_str());
    }
    if let Some(var_2640) = &input.occurrences {
        let mut object_2641 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2641, var_2640)?;
        object_2641.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2642) = &input.on_demand_allocation_strategy {
        object
            .key("OnDemandAllocationStrategy")
            .string(var_2642.as_str());
    }
    if input.on_demand_base_capacity != 0 {
        object.key("OnDemandBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.on_demand_base_capacity).into()),
        );
    }
    if input.on_demand_percentage_above_base_capacity != 0 {
        object.key("OnDemandPercentageAboveBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.on_demand_percentage_above_base_capacity).into(),
            ),
        );
    }
    if let Some(var_2643) = &input.spot_allocation_strategy {
        object
            .key("SpotAllocationStrategy")
            .string(var_2643.as_str());
    }
    if input.spot_instance_pools != 0 {
        object.key("SpotInstancePools").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.spot_instance_pools).into()),
        );
    }
    if let Some(var_2644) = &input.spot_max_price {
        object.key("SpotMaxPrice").string(var_2644.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2645) = &input.launch_template_specification {
        let mut object_2646 = object.key("LaunchTemplateSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(&mut object_2646, var_2645)?;
        object_2646.finish();
    }
    if let Some(var_2647) = &input.overrides {
        let mut array_2648 = object.key("Overrides").start_array();
        for item_2649 in var_2647 {
            {
                let mut object_2650 = array_2648.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(&mut object_2650, item_2649)?;
                object_2650.finish();
            }
        }
        array_2648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2651) = &input.name {
        object.key("Name").string(var_2651.as_str());
    }
    if let Some(var_2652) = &input.r#type {
        object.key("Type").string(var_2652.as_str());
    }
    if let Some(var_2653) = &input.value {
        object.key("Value").string(var_2653.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentRegistryCredential,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2654) = &input.credential {
        object.key("Credential").string(var_2654.as_str());
    }
    if let Some(var_2655) = &input.credential_provider {
        object.key("CredentialProvider").string(var_2655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2656) = &input.group_name {
        object.key("GroupName").string(var_2656.as_str());
    }
    if let Some(var_2657) = &input.status {
        object.key("Status").string(var_2657.as_str());
    }
    if let Some(var_2658) = &input.stream_name {
        object.key("StreamName").string(var_2658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigS3LogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_2659) = &input.location {
        object.key("Location").string(var_2659.as_str());
    }
    if let Some(var_2660) = &input.status {
        object.key("Status").string(var_2660.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2661) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2661.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2662) = &input.domain_name {
        object.key("DomainName").string(var_2662.as_str());
    }
    if let Some(var_2663) = &input.id {
        object.key("Id").string(var_2663.as_str());
    }
    if let Some(var_2664) = &input.origin_path {
        object.key("OriginPath").string(var_2664.as_str());
    }
    if let Some(var_2665) = &input.s3_origin_config {
        let mut object_2666 = object.key("S3OriginConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(&mut object_2666, var_2665)?;
        object_2666.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2667) = &input.failover_criteria {
        let mut object_2668 = object.key("FailoverCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(&mut object_2668, var_2667)?;
        object_2668.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupUserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2669) = &input.group_id {
        object.key("GroupId").string(var_2669.as_str());
    }
    if let Some(var_2670) = &input.group_name {
        object.key("GroupName").string(var_2670.as_str());
    }
    if let Some(var_2671) = &input.peering_status {
        object.key("PeeringStatus").string(var_2671.as_str());
    }
    if let Some(var_2672) = &input.user_id {
        object.key("UserId").string(var_2672.as_str());
    }
    if let Some(var_2673) = &input.vpc_id {
        object.key("VpcId").string(var_2673.as_str());
    }
    if let Some(var_2674) = &input.vpc_peering_connection_id {
        object
            .key("VpcPeeringConnectionId")
            .string(var_2674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2675) = &input.cidr_ip {
        object.key("CidrIp").string(var_2675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2676) = &input.cidr_ipv6 {
        object.key("CidrIpv6").string(var_2676.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupPrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2677) = &input.prefix_list_id {
        object.key("PrefixListId").string(var_2677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_icmp_type_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.code != 0 {
        object.key("Code").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code).into()),
        );
    }
    if input.r#type != 0 {
        object.key("Type").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.r#type).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_from_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFromTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from != 0 {
        object.key("From").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from).into()),
        );
    }
    if input.to != 0 {
        object.key("To").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptionsLogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2678) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_2678.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2679) = &input.apply_server_side_encryption_by_default {
        let mut object_2680 = object
            .key("ApplyServerSideEncryptionByDefault")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(&mut object_2680, var_2679)?;
        object_2680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2681) = &input.abort_incomplete_multipart_upload {
        let mut object_2682 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_2682, var_2681)?;
        object_2682.finish();
    }
    if let Some(var_2683) = &input.expiration_date {
        object.key("ExpirationDate").string(var_2683.as_str());
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_2684) = &input.filter {
        let mut object_2685 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_2685, var_2684)?;
        object_2685.finish();
    }
    if let Some(var_2686) = &input.id {
        object.key("ID").string(var_2686.as_str());
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_2687) = &input.noncurrent_version_transitions {
        let mut array_2688 = object.key("NoncurrentVersionTransitions").start_array();
        for item_2689 in var_2687 {
            {
                let mut object_2690 = array_2688.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_2690, item_2689)?;
                object_2690.finish();
            }
        }
        array_2688.finish();
    }
    if let Some(var_2691) = &input.prefix {
        object.key("Prefix").string(var_2691.as_str());
    }
    if let Some(var_2692) = &input.status {
        object.key("Status").string(var_2692.as_str());
    }
    if let Some(var_2693) = &input.transitions {
        let mut array_2694 = object.key("Transitions").start_array();
        for item_2695 in var_2693 {
            {
                let mut object_2696 = array_2694.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_2696, item_2695)?;
                object_2696.finish();
            }
        }
        array_2694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRedirectTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2697) = &input.hostname {
        object.key("Hostname").string(var_2697.as_str());
    }
    if let Some(var_2698) = &input.protocol {
        object.key("Protocol").string(var_2698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2699) = &input.condition {
        let mut object_2700 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(&mut object_2700, var_2699)?;
        object_2700.finish();
    }
    if let Some(var_2701) = &input.redirect {
        let mut object_2702 = object.key("Redirect").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(&mut object_2702, var_2701)?;
        object_2702.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2703) = &input.events {
        let mut array_2704 = object.key("Events").start_array();
        for item_2705 in var_2703 {
            {
                array_2704.value().string(item_2705.as_str());
            }
        }
        array_2704.finish();
    }
    if let Some(var_2706) = &input.filter {
        let mut object_2707 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(&mut object_2707, var_2706)?;
        object_2707.finish();
    }
    if let Some(var_2708) = &input.destination {
        object.key("Destination").string(var_2708.as_str());
    }
    if let Some(var_2709) = &input.r#type {
        object.key("Type").string(var_2709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.mfa_authenticated {
        object
            .key("MfaAuthenticated")
            .boolean(input.mfa_authenticated);
    }
    if let Some(var_2710) = &input.creation_date {
        object.key("CreationDate").string(var_2710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextSessionIssuer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2711) = &input.r#type {
        object.key("Type").string(var_2711.as_str());
    }
    if let Some(var_2712) = &input.principal_id {
        object.key("PrincipalId").string(var_2712.as_str());
    }
    if let Some(var_2713) = &input.arn {
        object.key("Arn").string(var_2713.as_str());
    }
    if let Some(var_2714) = &input.account_id {
        object.key("AccountId").string(var_2714.as_str());
    }
    if let Some(var_2715) = &input.user_name {
        object.key("UserName").string(var_2715.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_projection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProjection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2716) = &input.non_key_attributes {
        let mut array_2717 = object.key("NonKeyAttributes").start_array();
        for item_2718 in var_2716 {
            {
                array_2717.value().string(item_2718.as_str());
            }
        }
        array_2717.finish();
    }
    if let Some(var_2719) = &input.projection_type {
        object.key("ProjectionType").string(var_2719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2720) = &input.index_name {
        object.key("IndexName").string(var_2720.as_str());
    }
    if let Some(var_2721) = &input.provisioned_throughput_override {
        let mut object_2722 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_2722, var_2721)?;
        object_2722.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughputOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_compliance_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmComplianceSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2723) = &input.status {
        object.key("Status").string(var_2723.as_str());
    }
    if input.compliant_critical_count != 0 {
        object.key("CompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_critical_count).into()),
        );
    }
    if input.compliant_high_count != 0 {
        object.key("CompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_high_count).into()),
        );
    }
    if input.compliant_medium_count != 0 {
        object.key("CompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_medium_count).into()),
        );
    }
    if let Some(var_2724) = &input.execution_type {
        object.key("ExecutionType").string(var_2724.as_str());
    }
    if input.non_compliant_critical_count != 0 {
        object.key("NonCompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_critical_count).into()),
        );
    }
    if input.compliant_informational_count != 0 {
        object.key("CompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_informational_count).into()),
        );
    }
    if input.non_compliant_informational_count != 0 {
        object.key("NonCompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_informational_count).into()),
        );
    }
    if input.compliant_unspecified_count != 0 {
        object.key("CompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_unspecified_count).into()),
        );
    }
    if input.non_compliant_low_count != 0 {
        object.key("NonCompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_low_count).into()),
        );
    }
    if input.non_compliant_high_count != 0 {
        object.key("NonCompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_high_count).into()),
        );
    }
    if input.compliant_low_count != 0 {
        object.key("CompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_low_count).into()),
        );
    }
    if let Some(var_2725) = &input.compliance_type {
        object.key("ComplianceType").string(var_2725.as_str());
    }
    if let Some(var_2726) = &input.patch_baseline_id {
        object.key("PatchBaselineId").string(var_2726.as_str());
    }
    if let Some(var_2727) = &input.overall_severity {
        object.key("OverallSeverity").string(var_2727.as_str());
    }
    if input.non_compliant_medium_count != 0 {
        object.key("NonCompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_medium_count).into()),
        );
    }
    if input.non_compliant_unspecified_count != 0 {
        object.key("NonCompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_unspecified_count).into()),
        );
    }
    if let Some(var_2728) = &input.patch_group {
        object.key("PatchGroup").string(var_2728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateResourceRecord,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2729) = &input.name {
        object.key("Name").string(var_2729.as_str());
    }
    if let Some(var_2730) = &input.r#type {
        object.key("Type").string(var_2730.as_str());
    }
    if let Some(var_2731) = &input.value {
        object.key("Value").string(var_2731.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2732) = &input.parameter_name {
        object.key("ParameterName").string(var_2732.as_str());
    }
    if let Some(var_2733) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2733.as_str());
    }
    if let Some(var_2734) = &input.parameter_apply_error_description {
        object
            .key("ParameterApplyErrorDescription")
            .string(var_2734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2735) = &input.instance_protocol {
        object.key("InstanceProtocol").string(var_2735.as_str());
    }
    if input.load_balancer_port != 0 {
        object.key("LoadBalancerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.load_balancer_port).into()),
        );
    }
    if let Some(var_2736) = &input.protocol {
        object.key("Protocol").string(var_2736.as_str());
    }
    if let Some(var_2737) = &input.ssl_certificate_id {
        object.key("SslCertificateId").string(var_2737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_access_log(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.emit_interval != 0 {
        object.key("EmitInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.emit_interval).into()),
        );
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2738) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2738.as_str());
    }
    if let Some(var_2739) = &input.s3_bucket_prefix {
        object.key("S3BucketPrefix").string(var_2739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionDraining,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerCrossZoneLoadBalancing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAdditionalAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2740) = &input.key {
        object.key("Key").string(var_2740.as_str());
    }
    if let Some(var_2741) = &input.value {
        object.key("Value").string(var_2741.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbAppCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2742) = &input.cookie_name {
        object.key("CookieName").string(var_2742.as_str());
    }
    if let Some(var_2743) = &input.policy_name {
        object.key("PolicyName").string(var_2743.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLbCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cookie_expiration_period != 0 {
        object.key("CookieExpirationPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cookie_expiration_period).into()),
        );
    }
    if let Some(var_2744) = &input.policy_name {
        object.key("PolicyName").string(var_2744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfileRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2745) = &input.arn {
        object.key("Arn").string(var_2745.as_str());
    }
    if let Some(var_2746) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_2746.as_str());
    }
    if let Some(var_2747) = &input.create_date {
        object.key("CreateDate").string(var_2747.as_str());
    }
    if let Some(var_2748) = &input.path {
        object.key("Path").string(var_2748.as_str());
    }
    if let Some(var_2749) = &input.role_id {
        object.key("RoleId").string(var_2749.as_str());
    }
    if let Some(var_2750) = &input.role_name {
        object.key("RoleName").string(var_2750.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironmentError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2751) = &input.error_code {
        object.key("ErrorCode").string(var_2751.as_str());
    }
    if let Some(var_2752) = &input.message {
        object.key("Message").string(var_2752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2753) = &input.subnet_identifier {
        object.key("SubnetIdentifier").string(var_2753.as_str());
    }
    if let Some(var_2754) = &input.subnet_availability_zone {
        let mut object_2755 = object.key("SubnetAvailabilityZone").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(&mut object_2755, var_2754)?;
        object_2755.finish();
    }
    if let Some(var_2756) = &input.subnet_status {
        object.key("SubnetStatus").string(var_2756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsPendingCloudWatchLogsExports,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2757) = &input.log_types_to_enable {
        let mut array_2758 = object.key("LogTypesToEnable").start_array();
        for item_2759 in var_2757 {
            {
                array_2758.value().string(item_2759.as_str());
            }
        }
        array_2758.finish();
    }
    if let Some(var_2760) = &input.log_types_to_disable {
        let mut array_2761 = object.key("LogTypesToDisable").start_array();
        for item_2762 in var_2760 {
            {
                array_2761.value().string(item_2762.as_str());
            }
        }
        array_2761.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2763) = &input.r#type {
        object.key("Type").string(var_2763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_excluded_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafExcludedRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2764) = &input.rule_id {
        object.key("RuleId").string(var_2764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_override_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafOverrideAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2765) = &input.r#type {
        object.key("Type").string(var_2765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2766) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2766.as_str());
    }
    if let Some(var_2767) = &input.log_configuration {
        let mut object_2768 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(&mut object_2768, var_2767)?;
        object_2768.finish();
    }
    if let Some(var_2769) = &input.logging {
        object.key("Logging").string(var_2769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2770) = &input.condition {
        object.key("Condition").string(var_2770.as_str());
    }
    if let Some(var_2771) = &input.container_name {
        object.key("ContainerName").string(var_2771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2772) = &input.name {
        object.key("Name").string(var_2772.as_str());
    }
    if let Some(var_2773) = &input.value {
        object.key("Value").string(var_2773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2774) = &input.r#type {
        object.key("Type").string(var_2774.as_str());
    }
    if let Some(var_2775) = &input.value {
        object.key("Value").string(var_2775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2776) = &input.hostname {
        object.key("Hostname").string(var_2776.as_str());
    }
    if let Some(var_2777) = &input.ip_address {
        object.key("IpAddress").string(var_2777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2778) = &input.options {
        let mut object_2779 = object.key("Options").start_object();
        for (key_2780, value_2781) in var_2778 {
            {
                object_2779.key(key_2780).string(value_2781.as_str());
            }
        }
        object_2779.finish();
    }
    if let Some(var_2782) = &input.r#type {
        object.key("Type").string(var_2782.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2783) = &input.command {
        let mut array_2784 = object.key("Command").start_array();
        for item_2785 in var_2783 {
            {
                array_2784.value().string(item_2785.as_str());
            }
        }
        array_2784.finish();
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if input.retries != 0 {
        object.key("Retries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.start_period != 0 {
        object.key("StartPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_period).into()),
        );
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2786) = &input.capabilities {
        let mut object_2787 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(&mut object_2787, var_2786)?;
        object_2787.finish();
    }
    if let Some(var_2788) = &input.devices {
        let mut array_2789 = object.key("Devices").start_array();
        for item_2790 in var_2788 {
            {
                let mut object_2791 = array_2789.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(&mut object_2791, item_2790)?;
                object_2791.finish();
            }
        }
        array_2789.finish();
    }
    if input.init_process_enabled {
        object
            .key("InitProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.max_swap != 0 {
        object.key("MaxSwap").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.shared_memory_size != 0 {
        object.key("SharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("Swappiness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    if let Some(var_2792) = &input.tmpfs {
        let mut array_2793 = object.key("Tmpfs").start_array();
        for item_2794 in var_2792 {
            {
                let mut object_2795 = array_2793.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(&mut object_2795, item_2794)?;
                object_2795.finish();
            }
        }
        array_2793.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2796) = &input.log_driver {
        object.key("LogDriver").string(var_2796.as_str());
    }
    if let Some(var_2797) = &input.options {
        let mut object_2798 = object.key("Options").start_object();
        for (key_2799, value_2800) in var_2797 {
            {
                object_2798.key(key_2799).string(value_2800.as_str());
            }
        }
        object_2798.finish();
    }
    if let Some(var_2801) = &input.secret_options {
        let mut array_2802 = object.key("SecretOptions").start_array();
        for item_2803 in var_2801 {
            {
                let mut object_2804 = array_2802.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(&mut object_2804, item_2803)?;
                object_2804.finish();
            }
        }
        array_2802.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2805) = &input.container_path {
        object.key("ContainerPath").string(var_2805.as_str());
    }
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2806) = &input.source_volume {
        object.key("SourceVolume").string(var_2806.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.host_port != 0 {
        object.key("HostPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.host_port).into()),
        );
    }
    if let Some(var_2807) = &input.protocol {
        object.key("Protocol").string(var_2807.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2808) = &input.credentials_parameter {
        object.key("CredentialsParameter").string(var_2808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2809) = &input.r#type {
        object.key("Type").string(var_2809.as_str());
    }
    if let Some(var_2810) = &input.value {
        object.key("Value").string(var_2810.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2811) = &input.name {
        object.key("Name").string(var_2811.as_str());
    }
    if let Some(var_2812) = &input.value_from {
        object.key("ValueFrom").string(var_2812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2813) = &input.namespace {
        object.key("Namespace").string(var_2813.as_str());
    }
    if let Some(var_2814) = &input.value {
        object.key("Value").string(var_2814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.hard_limit != 0 {
        object.key("HardLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_2815) = &input.name {
        object.key("Name").string(var_2815.as_str());
    }
    if input.soft_limit != 0 {
        object.key("SoftLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2816) = &input.source_container {
        object.key("SourceContainer").string(var_2816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2817) = &input.name {
        object.key("Name").string(var_2817.as_str());
    }
    if let Some(var_2818) = &input.value {
        object.key("Value").string(var_2818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_2819) = &input.driver {
        object.key("Driver").string(var_2819.as_str());
    }
    if let Some(var_2820) = &input.driver_opts {
        let mut object_2821 = object.key("DriverOpts").start_object();
        for (key_2822, value_2823) in var_2820 {
            {
                object_2821.key(key_2822).string(value_2823.as_str());
            }
        }
        object_2821.finish();
    }
    if let Some(var_2824) = &input.labels {
        let mut object_2825 = object.key("Labels").start_object();
        for (key_2826, value_2827) in var_2824 {
            {
                object_2825.key(key_2826).string(value_2827.as_str());
            }
        }
        object_2825.finish();
    }
    if let Some(var_2828) = &input.scope {
        object.key("Scope").string(var_2828.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2829) = &input.authorization_config {
        let mut object_2830 = object.key("AuthorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(&mut object_2830, var_2829)?;
        object_2830.finish();
    }
    if let Some(var_2831) = &input.filesystem_id {
        object.key("FilesystemId").string(var_2831.as_str());
    }
    if let Some(var_2832) = &input.root_directory {
        object.key("RootDirectory").string(var_2832.as_str());
    }
    if let Some(var_2833) = &input.transit_encryption {
        object.key("TransitEncryption").string(var_2833.as_str());
    }
    if input.transit_encryption_port != 0 {
        object.key("TransitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesHostDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2834) = &input.source_path {
        object.key("SourcePath").string(var_2834.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable {
        object.key("Enable").boolean(input.enable);
    }
    if input.rollback {
        object.key("Rollback").boolean(input.rollback);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2835) = &input.assign_public_ip {
        object.key("AssignPublicIp").string(var_2835.as_str());
    }
    if let Some(var_2836) = &input.security_groups {
        let mut array_2837 = object.key("SecurityGroups").start_array();
        for item_2838 in var_2836 {
            {
                array_2837.value().string(item_2838.as_str());
            }
        }
        array_2837.finish();
    }
    if let Some(var_2839) = &input.subnets {
        let mut array_2840 = object.key("Subnets").start_array();
        for item_2841 in var_2839 {
            {
                array_2840.value().string(item_2841.as_str());
            }
        }
        array_2840.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2842) = &input.snapshot_id {
        object.key("SnapshotId").string(var_2842.as_str());
    }
    if input.volume_size != 0 {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size).into()),
        );
    }
    if let Some(var_2843) = &input.volume_type {
        object.key("VolumeType").string(var_2843.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsTunnelOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dpd_timeout_seconds != 0 {
        object.key("DpdTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dpd_timeout_seconds).into()),
        );
    }
    if let Some(var_2844) = &input.ike_versions {
        let mut array_2845 = object.key("IkeVersions").start_array();
        for item_2846 in var_2844 {
            {
                array_2845.value().string(item_2846.as_str());
            }
        }
        array_2845.finish();
    }
    if let Some(var_2847) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_2847.as_str());
    }
    if let Some(var_2848) = &input.phase1_dh_group_numbers {
        let mut array_2849 = object.key("Phase1DhGroupNumbers").start_array();
        for item_2850 in var_2848 {
            {
                array_2849.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2850).into()),
                );
            }
        }
        array_2849.finish();
    }
    if let Some(var_2851) = &input.phase1_encryption_algorithms {
        let mut array_2852 = object.key("Phase1EncryptionAlgorithms").start_array();
        for item_2853 in var_2851 {
            {
                array_2852.value().string(item_2853.as_str());
            }
        }
        array_2852.finish();
    }
    if let Some(var_2854) = &input.phase1_integrity_algorithms {
        let mut array_2855 = object.key("Phase1IntegrityAlgorithms").start_array();
        for item_2856 in var_2854 {
            {
                array_2855.value().string(item_2856.as_str());
            }
        }
        array_2855.finish();
    }
    if input.phase1_lifetime_seconds != 0 {
        object.key("Phase1LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase1_lifetime_seconds).into()),
        );
    }
    if let Some(var_2857) = &input.phase2_dh_group_numbers {
        let mut array_2858 = object.key("Phase2DhGroupNumbers").start_array();
        for item_2859 in var_2857 {
            {
                array_2858.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2859).into()),
                );
            }
        }
        array_2858.finish();
    }
    if let Some(var_2860) = &input.phase2_encryption_algorithms {
        let mut array_2861 = object.key("Phase2EncryptionAlgorithms").start_array();
        for item_2862 in var_2860 {
            {
                array_2861.value().string(item_2862.as_str());
            }
        }
        array_2861.finish();
    }
    if let Some(var_2863) = &input.phase2_integrity_algorithms {
        let mut array_2864 = object.key("Phase2IntegrityAlgorithms").start_array();
        for item_2865 in var_2863 {
            {
                array_2864.value().string(item_2865.as_str());
            }
        }
        array_2864.finish();
    }
    if input.phase2_lifetime_seconds != 0 {
        object.key("Phase2LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase2_lifetime_seconds).into()),
        );
    }
    if let Some(var_2866) = &input.pre_shared_key {
        object.key("PreSharedKey").string(var_2866.as_str());
    }
    if input.rekey_fuzz_percentage != 0 {
        object.key("RekeyFuzzPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_fuzz_percentage).into()),
        );
    }
    if input.rekey_margin_time_seconds != 0 {
        object.key("RekeyMarginTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_margin_time_seconds).into()),
        );
    }
    if input.replay_window_size != 0 {
        object.key("ReplayWindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.replay_window_size).into()),
        );
    }
    if let Some(var_2867) = &input.tunnel_inside_cidr {
        object.key("TunnelInsideCidr").string(var_2867.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2868) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_2868.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2869) = &input.types {
        let mut array_2870 = object.key("Types").start_array();
        for item_2871 in var_2869 {
            {
                array_2870.value().string(item_2871.as_str());
            }
        }
        array_2870.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatefulRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2872) = &input.resource_arn {
        object.key("ResourceArn").string(var_2872.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2873) = &input.action_definition {
        let mut object_2874 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_2874,
            var_2873,
        )?;
        object_2874.finish();
    }
    if let Some(var_2875) = &input.action_name {
        object.key("ActionName").string(var_2875.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2876) = &input.resource_arn {
        object.key("ResourceArn").string(var_2876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariables,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2877) = &input.ip_sets {
        let mut object_2878 = object.key("IpSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_ip_sets_details(
            &mut object_2878,
            var_2877,
        )?;
        object_2878.finish();
    }
    if let Some(var_2879) = &input.port_sets {
        let mut object_2880 = object.key("PortSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_port_sets_details(
            &mut object_2880,
            var_2879,
        )?;
        object_2880.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2881) = &input.rules_source_list {
        let mut object_2882 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_list_details(
            &mut object_2882,
            var_2881,
        )?;
        object_2882.finish();
    }
    if let Some(var_2883) = &input.rules_string {
        object.key("RulesString").string(var_2883.as_str());
    }
    if let Some(var_2884) = &input.stateful_rules {
        let mut array_2885 = object.key("StatefulRules").start_array();
        for item_2886 in var_2884 {
            {
                let mut object_2887 = array_2885.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_details(&mut object_2887, item_2886)?;
                object_2887.finish();
            }
        }
        array_2885.finish();
    }
    if let Some(var_2888) = &input.stateless_rules_and_custom_actions {
        let mut object_2889 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(&mut object_2889, var_2888)?;
        object_2889.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_occurrences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Occurrences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2890) = &input.line_ranges {
        let mut array_2891 = object.key("LineRanges").start_array();
        for item_2892 in var_2890 {
            {
                let mut object_2893 = array_2891.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_2893,
                    item_2892,
                )?;
                object_2893.finish();
            }
        }
        array_2891.finish();
    }
    if let Some(var_2894) = &input.offset_ranges {
        let mut array_2895 = object.key("OffsetRanges").start_array();
        for item_2896 in var_2894 {
            {
                let mut object_2897 = array_2895.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_2897,
                    item_2896,
                )?;
                object_2897.finish();
            }
        }
        array_2895.finish();
    }
    if let Some(var_2898) = &input.pages {
        let mut array_2899 = object.key("Pages").start_array();
        for item_2900 in var_2898 {
            {
                let mut object_2901 = array_2899.value().start_object();
                crate::json_ser::serialize_structure_crate_model_page(&mut object_2901, item_2900)?;
                object_2901.finish();
            }
        }
        array_2899.finish();
    }
    if let Some(var_2902) = &input.records {
        let mut array_2903 = object.key("Records").start_array();
        for item_2904 in var_2902 {
            {
                let mut object_2905 = array_2903.value().start_object();
                crate::json_ser::serialize_structure_crate_model_record(
                    &mut object_2905,
                    item_2904,
                )?;
                object_2905.finish();
            }
        }
        array_2903.finish();
    }
    if let Some(var_2906) = &input.cells {
        let mut array_2907 = object.key("Cells").start_array();
        for item_2908 in var_2906 {
            {
                let mut object_2909 = array_2907.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cell(&mut object_2909, item_2908)?;
                object_2909.finish();
            }
        }
        array_2907.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2910) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_2910.as_str());
    }
    if let Some(var_2911) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_2911.as_str());
    }
    if let Some(var_2912) = &input.version {
        object.key("Version").string(var_2912.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2913) = &input.instance_type {
        object.key("InstanceType").string(var_2913.as_str());
    }
    if let Some(var_2914) = &input.weighted_capacity {
        object.key("WeightedCapacity").string(var_2914.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginS3OriginConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2915) = &input.origin_access_identity {
        object.key("OriginAccessIdentity").string(var_2915.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailover,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2916) = &input.status_codes {
        let mut object_2917 = object.key("StatusCodes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(&mut object_2917, var_2916)?;
        object_2917.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionByDefault,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2918) = &input.sse_algorithm {
        object.key("SSEAlgorithm").string(var_2918.as_str());
    }
    if let Some(var_2919) = &input.kms_master_key_id {
        object.key("KMSMasterKeyID").string(var_2919.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days_after_initiation != 0 {
        object.key("DaysAfterInitiation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days_after_initiation).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2920) = &input.predicate {
        let mut object_2921 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(&mut object_2921, var_2920)?;
        object_2921.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2922) = &input.storage_class {
        object.key("StorageClass").string(var_2922.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2923) = &input.date {
        object.key("Date").string(var_2923.as_str());
    }
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2924) = &input.storage_class {
        object.key("StorageClass").string(var_2924.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2925) = &input.http_error_code_returned_equals {
        object
            .key("HttpErrorCodeReturnedEquals")
            .string(var_2925.as_str());
    }
    if let Some(var_2926) = &input.key_prefix_equals {
        object.key("KeyPrefixEquals").string(var_2926.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleRedirect,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2927) = &input.hostname {
        object.key("Hostname").string(var_2927.as_str());
    }
    if let Some(var_2928) = &input.http_redirect_code {
        object.key("HttpRedirectCode").string(var_2928.as_str());
    }
    if let Some(var_2929) = &input.protocol {
        object.key("Protocol").string(var_2929.as_str());
    }
    if let Some(var_2930) = &input.replace_key_prefix_with {
        object.key("ReplaceKeyPrefixWith").string(var_2930.as_str());
    }
    if let Some(var_2931) = &input.replace_key_with {
        object.key("ReplaceKeyWith").string(var_2931.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2932) = &input.s3_key_filter {
        let mut object_2933 = object.key("S3KeyFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(&mut object_2933, var_2932)?;
        object_2933.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnetAvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2934) = &input.name {
        object.key("Name").string(var_2934.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cloud_watch_encryption_enabled {
        object
            .key("CloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_2935) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_2935.as_str());
    }
    if let Some(var_2936) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2936.as_str());
    }
    if input.s3_encryption_enabled {
        object
            .key("S3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_2937) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2937.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2938) = &input.add {
        let mut array_2939 = object.key("Add").start_array();
        for item_2940 in var_2938 {
            {
                array_2939.value().string(item_2940.as_str());
            }
        }
        array_2939.finish();
    }
    if let Some(var_2941) = &input.drop {
        let mut array_2942 = object.key("Drop").start_array();
        for item_2943 in var_2941 {
            {
                array_2942.value().string(item_2943.as_str());
            }
        }
        array_2942.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2944) = &input.container_path {
        object.key("ContainerPath").string(var_2944.as_str());
    }
    if let Some(var_2945) = &input.host_path {
        object.key("HostPath").string(var_2945.as_str());
    }
    if let Some(var_2946) = &input.permissions {
        let mut array_2947 = object.key("Permissions").start_array();
        for item_2948 in var_2946 {
            {
                array_2947.value().string(item_2948.as_str());
            }
        }
        array_2947.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2949) = &input.container_path {
        object.key("ContainerPath").string(var_2949.as_str());
    }
    if let Some(var_2950) = &input.mount_options {
        let mut array_2951 = object.key("MountOptions").start_array();
        for item_2952 in var_2950 {
            {
                array_2951.value().string(item_2952.as_str());
            }
        }
        array_2951.finish();
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2953) = &input.name {
        object.key("Name").string(var_2953.as_str());
    }
    if let Some(var_2954) = &input.value_from {
        object.key("ValueFrom").string(var_2954.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2955) = &input.access_point_id {
        object.key("AccessPointId").string(var_2955.as_str());
    }
    if let Some(var_2956) = &input.iam {
        object.key("Iam").string(var_2956.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_action_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomActionDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2957) = &input.publish_metric_action {
        let mut object_2958 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action(
            &mut object_2958,
            var_2957,
        )?;
        object_2958.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_ip_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesIpSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2959) = &input.definition {
        let mut array_2960 = object.key("Definition").start_array();
        for item_2961 in var_2959 {
            {
                array_2960.value().string(item_2961.as_str());
            }
        }
        array_2960.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_port_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesPortSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2962) = &input.definition {
        let mut array_2963 = object.key("Definition").start_array();
        for item_2964 in var_2962 {
            {
                array_2963.value().string(item_2964.as_str());
            }
        }
        array_2963.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2965) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_2965.as_str());
    }
    if let Some(var_2966) = &input.target_types {
        let mut array_2967 = object.key("TargetTypes").start_array();
        for item_2968 in var_2966 {
            {
                array_2967.value().string(item_2968.as_str());
            }
        }
        array_2967.finish();
    }
    if let Some(var_2969) = &input.targets {
        let mut array_2970 = object.key("Targets").start_array();
        for item_2971 in var_2969 {
            {
                array_2970.value().string(item_2971.as_str());
            }
        }
        array_2970.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2972) = &input.action {
        object.key("Action").string(var_2972.as_str());
    }
    if let Some(var_2973) = &input.header {
        let mut object_2974 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(&mut object_2974, var_2973)?;
        object_2974.finish();
    }
    if let Some(var_2975) = &input.rule_options {
        let mut array_2976 = object.key("RuleOptions").start_array();
        for item_2977 in var_2975 {
            {
                let mut object_2978 = array_2976.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(&mut object_2978, item_2977)?;
                object_2978.finish();
            }
        }
        array_2976.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesAndCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2979) = &input.custom_actions {
        let mut array_2980 = object.key("CustomActions").start_array();
        for item_2981 in var_2979 {
            {
                let mut object_2982 = array_2980.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_custom_actions_details(&mut object_2982, item_2981)?;
                object_2982.finish();
            }
        }
        array_2980.finish();
    }
    if let Some(var_2983) = &input.stateless_rules {
        let mut array_2984 = object.key("StatelessRules").start_array();
        for item_2985 in var_2983 {
            {
                let mut object_2986 = array_2984.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_details(&mut object_2986, item_2985)?;
                object_2986.finish();
            }
        }
        array_2984.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.start != 0 {
        object.key("Start").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    if input.start_column != 0 {
        object.key("StartColumn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_column).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_page(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Page,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.page_number != 0 {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_number).into()),
        );
    }
    if let Some(var_2987) = &input.line_range {
        let mut object_2988 = object.key("LineRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_2988, var_2987)?;
        object_2988.finish();
    }
    if let Some(var_2989) = &input.offset_range {
        let mut object_2990 = object.key("OffsetRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_2990, var_2989)?;
        object_2990.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2991) = &input.json_path {
        object.key("JsonPath").string(var_2991.as_str());
    }
    if input.record_index != 0 {
        object.key("RecordIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.record_index).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cell(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cell,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.column != 0 {
        object.key("Column").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.column).into()),
        );
    }
    if input.row != 0 {
        object.key("Row").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.row).into()),
        );
    }
    if let Some(var_2992) = &input.column_name {
        object.key("ColumnName").string(var_2992.as_str());
    }
    if let Some(var_2993) = &input.cell_reference {
        object.key("CellReference").string(var_2993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailoverStatusCodes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2994) = &input.items {
        let mut array_2995 = object.key("Items").start_array();
        for item_2996 in var_2994 {
            {
                array_2995.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2996).into()),
                );
            }
        }
        array_2995.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2997) = &input.operands {
        let mut array_2998 = object.key("Operands").start_array();
        for item_2999 in var_2997 {
            {
                let mut object_3000 = array_2998.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(&mut object_3000, item_2999)?;
                object_3000.finish();
            }
        }
        array_2998.finish();
    }
    if let Some(var_3001) = &input.prefix {
        object.key("Prefix").string(var_3001.as_str());
    }
    if let Some(var_3002) = &input.tag {
        let mut object_3003 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(&mut object_3003, var_3002)?;
        object_3003.finish();
    }
    if let Some(var_3004) = &input.r#type {
        object.key("Type").string(var_3004.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3005) = &input.filter_rules {
        let mut array_3006 = object.key("FilterRules").start_array();
        for item_3007 in var_3005 {
            {
                let mut object_3008 = array_3006.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(&mut object_3008, item_3007)?;
                object_3008.finish();
            }
        }
        array_3006.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3009) = &input.dimensions {
        let mut array_3010 = object.key("Dimensions").start_array();
        for item_3011 in var_3009 {
            {
                let mut object_3012 = array_3010.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(&mut object_3012, item_3011)?;
                object_3012.finish();
            }
        }
        array_3010.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesHeaderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3013) = &input.destination {
        object.key("Destination").string(var_3013.as_str());
    }
    if let Some(var_3014) = &input.destination_port {
        object.key("DestinationPort").string(var_3014.as_str());
    }
    if let Some(var_3015) = &input.direction {
        object.key("Direction").string(var_3015.as_str());
    }
    if let Some(var_3016) = &input.protocol {
        object.key("Protocol").string(var_3016.as_str());
    }
    if let Some(var_3017) = &input.source {
        object.key("Source").string(var_3017.as_str());
    }
    if let Some(var_3018) = &input.source_port {
        object.key("SourcePort").string(var_3018.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3019) = &input.keyword {
        object.key("Keyword").string(var_3019.as_str());
    }
    if let Some(var_3020) = &input.settings {
        let mut array_3021 = object.key("Settings").start_array();
        for item_3022 in var_3020 {
            {
                array_3021.value().string(item_3022.as_str());
            }
        }
        array_3021.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3023) = &input.action_definition {
        let mut object_3024 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_3024,
            var_3023,
        )?;
        object_3024.finish();
    }
    if let Some(var_3025) = &input.action_name {
        object.key("ActionName").string(var_3025.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_3026) = &input.rule_definition {
        let mut object_3027 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_definition(&mut object_3027, var_3026)?;
        object_3027.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3028) = &input.prefix {
        object.key("Prefix").string(var_3028.as_str());
    }
    if let Some(var_3029) = &input.tag {
        let mut object_3030 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(&mut object_3030, var_3029)?;
        object_3030.finish();
    }
    if let Some(var_3031) = &input.r#type {
        object.key("Type").string(var_3031.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3032) = &input.key {
        object.key("Key").string(var_3032.as_str());
    }
    if let Some(var_3033) = &input.value {
        object.key("Value").string(var_3033.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilterRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3034) = &input.name {
        object.key("Name").string(var_3034.as_str());
    }
    if let Some(var_3035) = &input.value {
        object.key("Value").string(var_3035.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricActionDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3036) = &input.value {
        object.key("Value").string(var_3036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3037) = &input.actions {
        let mut array_3038 = object.key("Actions").start_array();
        for item_3039 in var_3037 {
            {
                array_3038.value().string(item_3039.as_str());
            }
        }
        array_3038.finish();
    }
    if let Some(var_3040) = &input.match_attributes {
        let mut object_3041 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(&mut object_3041, var_3040)?;
        object_3041.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3042) = &input.key {
        object.key("Key").string(var_3042.as_str());
    }
    if let Some(var_3043) = &input.value {
        object.key("Value").string(var_3043.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3044) = &input.destination_ports {
        let mut array_3045 = object.key("DestinationPorts").start_array();
        for item_3046 in var_3044 {
            {
                let mut object_3047 = array_3045.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(&mut object_3047, item_3046)?;
                object_3047.finish();
            }
        }
        array_3045.finish();
    }
    if let Some(var_3048) = &input.destinations {
        let mut array_3049 = object.key("Destinations").start_array();
        for item_3050 in var_3048 {
            {
                let mut object_3051 = array_3049.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(&mut object_3051, item_3050)?;
                object_3051.finish();
            }
        }
        array_3049.finish();
    }
    if let Some(var_3052) = &input.protocols {
        let mut array_3053 = object.key("Protocols").start_array();
        for item_3054 in var_3052 {
            {
                array_3053.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3054).into()),
                );
            }
        }
        array_3053.finish();
    }
    if let Some(var_3055) = &input.source_ports {
        let mut array_3056 = object.key("SourcePorts").start_array();
        for item_3057 in var_3055 {
            {
                let mut object_3058 = array_3056.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(&mut object_3058, item_3057)?;
                object_3058.finish();
            }
        }
        array_3056.finish();
    }
    if let Some(var_3059) = &input.sources {
        let mut array_3060 = object.key("Sources").start_array();
        for item_3061 in var_3059 {
            {
                let mut object_3062 = array_3060.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(&mut object_3062, item_3061)?;
                object_3062.finish();
            }
        }
        array_3060.finish();
    }
    if let Some(var_3063) = &input.tcp_flags {
        let mut array_3064 = object.key("TcpFlags").start_array();
        for item_3065 in var_3063 {
            {
                let mut object_3066 = array_3064.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(&mut object_3066, item_3065)?;
                object_3066.finish();
            }
        }
        array_3064.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3067) = &input.address_definition {
        object.key("AddressDefinition").string(var_3067.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSourcePorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3068) = &input.address_definition {
        object.key("AddressDefinition").string(var_3068.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesTcpFlags,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3069) = &input.flags {
        let mut array_3070 = object.key("Flags").start_array();
        for item_3071 in var_3069 {
            {
                array_3070.value().string(item_3071.as_str());
            }
        }
        array_3070.finish();
    }
    if let Some(var_3072) = &input.masks {
        let mut array_3073 = object.key("Masks").start_array();
        for item_3074 in var_3072 {
            {
                array_3073.value().string(item_3074.as_str());
            }
        }
        array_3073.finish();
    }
    Ok(())
}
