// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_accept_administrator_invitation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) {
    if let Some(var_1) = &input.administrator_id {
        object.key("AdministratorId").string(var_1);
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("InvitationId").string(var_2);
    }
}

pub fn serialize_structure_accept_invitation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) {
    if let Some(var_3) = &input.invitation_id {
        object.key("InvitationId").string(var_3);
    }
    if let Some(var_4) = &input.master_id {
        object.key("MasterId").string(var_4);
    }
}

pub fn serialize_structure_batch_disable_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisableStandardsInput,
) {
    if let Some(var_5) = &input.standards_subscription_arns {
        let mut array_6 = object.key("StandardsSubscriptionArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7);
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_batch_enable_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchEnableStandardsInput,
) {
    if let Some(var_8) = &input.standards_subscription_requests {
        let mut array_9 = object.key("StandardsSubscriptionRequests").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_standards_subscription_request(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_batch_import_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchImportFindingsInput,
) {
    if let Some(var_12) = &input.findings {
        let mut array_13 = object.key("Findings").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_aws_security_finding(&mut object_15, item_14);
                object_15.finish();
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_batch_update_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateFindingsInput,
) {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_16) = &input.finding_identifiers {
        let mut array_17 = object.key("FindingIdentifiers").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_aws_security_finding_identifier(
                    &mut object_19,
                    item_18,
                );
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.note {
        let mut object_21 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note_update(&mut object_21, var_20);
        object_21.finish();
    }
    if let Some(var_22) = &input.related_findings {
        let mut array_23 = object.key("RelatedFindings").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.severity {
        let mut object_27 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_severity_update(&mut object_27, var_26);
        object_27.finish();
    }
    if let Some(var_28) = &input.types {
        let mut array_29 = object.key("Types").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30);
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.user_defined_fields {
        let mut object_32 = object.key("UserDefinedFields").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34);
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.verification_state {
        object.key("VerificationState").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workflow {
        let mut object_37 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_workflow_update(&mut object_37, var_36);
        object_37.finish();
    }
}

pub fn serialize_structure_create_action_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionTargetInput,
) {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38);
    }
    if let Some(var_39) = &input.id {
        object.key("Id").string(var_39);
    }
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40);
    }
}

pub fn serialize_structure_create_insight_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInsightInput,
) {
    if let Some(var_41) = &input.filters {
        let mut object_42 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_42, var_41);
        object_42.finish();
    }
    if let Some(var_43) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_43);
    }
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
}

pub fn serialize_structure_create_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) {
    if let Some(var_45) = &input.account_details {
        let mut array_46 = object.key("AccountDetails").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_account_details(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
}

pub fn serialize_structure_decline_invitations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) {
    if let Some(var_49) = &input.account_ids {
        let mut array_50 = object.key("AccountIds").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51);
            }
        }
        array_50.finish();
    }
}

pub fn serialize_structure_delete_invitations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) {
    if let Some(var_52) = &input.account_ids {
        let mut array_53 = object.key("AccountIds").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
}

pub fn serialize_structure_delete_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) {
    if let Some(var_55) = &input.account_ids {
        let mut array_56 = object.key("AccountIds").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
}

pub fn serialize_structure_describe_action_targets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionTargetsInput,
) {
    if let Some(var_58) = &input.action_target_arns {
        let mut array_59 = object.key("ActionTargetArns").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_61) = &input.next_token {
        object.key("NextToken").string(var_61);
    }
}

pub fn serialize_structure_disable_organization_admin_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) {
    if let Some(var_62) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_62);
    }
}

pub fn serialize_structure_disassociate_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) {
    if let Some(var_63) = &input.account_ids {
        let mut array_64 = object.key("AccountIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65);
            }
        }
        array_64.finish();
    }
}

pub fn serialize_structure_enable_import_findings_for_product_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableImportFindingsForProductInput,
) {
    if let Some(var_66) = &input.product_arn {
        object.key("ProductArn").string(var_66);
    }
}

pub fn serialize_structure_enable_organization_admin_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) {
    if let Some(var_67) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_67);
    }
}

pub fn serialize_structure_enable_security_hub_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSecurityHubInput,
) {
    if input.enable_default_standards {
        object
            .key("EnableDefaultStandards")
            .boolean(input.enable_default_standards);
    }
    if let Some(var_68) = &input.tags {
        let mut object_69 = object.key("Tags").start_object();
        for (key_70, value_71) in var_68 {
            {
                object_69.key(key_70).string(value_71);
            }
        }
        object_69.finish();
    }
}

pub fn serialize_structure_get_enabled_standards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnabledStandardsInput,
) {
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
    if let Some(var_73) = &input.standards_subscription_arns {
        let mut array_74 = object.key("StandardsSubscriptionArns").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_get_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) {
    if let Some(var_76) = &input.filters {
        let mut object_77 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_77, var_76);
        object_77.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_78) = &input.next_token {
        object.key("NextToken").string(var_78);
    }
    if let Some(var_79) = &input.sort_criteria {
        let mut array_80 = object.key("SortCriteria").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_sort_criterion(&mut object_82, item_81);
                object_82.finish();
            }
        }
        array_80.finish();
    }
}

pub fn serialize_structure_get_insights_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInsightsInput,
) {
    if let Some(var_83) = &input.insight_arns {
        let mut array_84 = object.key("InsightArns").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85);
            }
        }
        array_84.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86);
    }
}

pub fn serialize_structure_get_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) {
    if let Some(var_87) = &input.account_ids {
        let mut array_88 = object.key("AccountIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89);
            }
        }
        array_88.finish();
    }
}

pub fn serialize_structure_invite_members_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) {
    if let Some(var_90) = &input.account_ids {
        let mut array_91 = object.key("AccountIds").start_array();
        for item_92 in var_90 {
            {
                array_91.value().string(item_92);
            }
        }
        array_91.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_93) = &input.tags {
        let mut object_94 = object.key("Tags").start_object();
        for (key_95, value_96) in var_93 {
            {
                object_94.key(key_95).string(value_96);
            }
        }
        object_94.finish();
    }
}

pub fn serialize_structure_update_action_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionTargetInput,
) {
    if let Some(var_97) = &input.description {
        object.key("Description").string(var_97);
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98);
    }
}

pub fn serialize_structure_update_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsInput,
) {
    if let Some(var_99) = &input.filters {
        let mut object_100 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.note {
        let mut object_102 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note_update(&mut object_102, var_101);
        object_102.finish();
    }
    if let Some(var_103) = &input.record_state {
        object.key("RecordState").string(var_103.as_str());
    }
}

pub fn serialize_structure_update_insight_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInsightInput,
) {
    if let Some(var_104) = &input.filters {
        let mut object_105 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_aws_security_finding_filters(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_106);
    }
    if let Some(var_107) = &input.name {
        object.key("Name").string(var_107);
    }
}

pub fn serialize_structure_update_organization_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) {
    {
        object.key("AutoEnable").boolean(input.auto_enable);
    }
}

pub fn serialize_structure_update_security_hub_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityHubConfigurationInput,
) {
    if input.auto_enable_controls {
        object
            .key("AutoEnableControls")
            .boolean(input.auto_enable_controls);
    }
}

pub fn serialize_structure_update_standards_control_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStandardsControlInput,
) {
    if let Some(var_108) = &input.control_status {
        object.key("ControlStatus").string(var_108.as_str());
    }
    if let Some(var_109) = &input.disabled_reason {
        object.key("DisabledReason").string(var_109);
    }
}

pub fn serialize_structure_standards_subscription_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardsSubscriptionRequest,
) {
    if let Some(var_110) = &input.standards_arn {
        object.key("StandardsArn").string(var_110);
    }
    if let Some(var_111) = &input.standards_input {
        let mut object_112 = object.key("StandardsInput").start_object();
        for (key_113, value_114) in var_111 {
            {
                object_112.key(key_113).string(value_114);
            }
        }
        object_112.finish();
    }
}

pub fn serialize_structure_aws_security_finding(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFinding,
) {
    if let Some(var_115) = &input.schema_version {
        object.key("SchemaVersion").string(var_115);
    }
    if let Some(var_116) = &input.id {
        object.key("Id").string(var_116);
    }
    if let Some(var_117) = &input.product_arn {
        object.key("ProductArn").string(var_117);
    }
    if let Some(var_118) = &input.generator_id {
        object.key("GeneratorId").string(var_118);
    }
    if let Some(var_119) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_119);
    }
    if let Some(var_120) = &input.types {
        let mut array_121 = object.key("Types").start_array();
        for item_122 in var_120 {
            {
                array_121.value().string(item_122);
            }
        }
        array_121.finish();
    }
    if let Some(var_123) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_123);
    }
    if let Some(var_124) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_124);
    }
    if let Some(var_125) = &input.created_at {
        object.key("CreatedAt").string(var_125);
    }
    if let Some(var_126) = &input.updated_at {
        object.key("UpdatedAt").string(var_126);
    }
    if let Some(var_127) = &input.severity {
        let mut object_128 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_severity(&mut object_128, var_127);
        object_128.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_129) = &input.title {
        object.key("Title").string(var_129);
    }
    if let Some(var_130) = &input.description {
        object.key("Description").string(var_130);
    }
    if let Some(var_131) = &input.remediation {
        let mut object_132 = object.key("Remediation").start_object();
        crate::json_ser::serialize_structure_remediation(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.source_url {
        object.key("SourceUrl").string(var_133);
    }
    if let Some(var_134) = &input.product_fields {
        let mut object_135 = object.key("ProductFields").start_object();
        for (key_136, value_137) in var_134 {
            {
                object_135.key(key_136).string(value_137);
            }
        }
        object_135.finish();
    }
    if let Some(var_138) = &input.user_defined_fields {
        let mut object_139 = object.key("UserDefinedFields").start_object();
        for (key_140, value_141) in var_138 {
            {
                object_139.key(key_140).string(value_141);
            }
        }
        object_139.finish();
    }
    if let Some(var_142) = &input.malware {
        let mut array_143 = object.key("Malware").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_malware(&mut object_145, item_144);
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.network {
        let mut object_147 = object.key("Network").start_object();
        crate::json_ser::serialize_structure_network(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.network_path {
        let mut array_149 = object.key("NetworkPath").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_network_path_component(
                    &mut object_151,
                    item_150,
                );
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.process {
        let mut object_153 = object.key("Process").start_object();
        crate::json_ser::serialize_structure_process_details(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.threat_intel_indicators {
        let mut array_155 = object.key("ThreatIntelIndicators").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_threat_intel_indicator(
                    &mut object_157,
                    item_156,
                );
                object_157.finish();
            }
        }
        array_155.finish();
    }
    if let Some(var_158) = &input.resources {
        let mut array_159 = object.key("Resources").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_resource(&mut object_161, item_160);
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.compliance {
        let mut object_163 = object.key("Compliance").start_object();
        crate::json_ser::serialize_structure_compliance(&mut object_163, var_162);
        object_163.finish();
    }
    if let Some(var_164) = &input.verification_state {
        object.key("VerificationState").string(var_164.as_str());
    }
    if let Some(var_165) = &input.workflow_state {
        object.key("WorkflowState").string(var_165.as_str());
    }
    if let Some(var_166) = &input.workflow {
        let mut object_167 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_workflow(&mut object_167, var_166);
        object_167.finish();
    }
    if let Some(var_168) = &input.record_state {
        object.key("RecordState").string(var_168.as_str());
    }
    if let Some(var_169) = &input.related_findings {
        let mut array_170 = object.key("RelatedFindings").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_172, item_171);
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.note {
        let mut object_174 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_note(&mut object_174, var_173);
        object_174.finish();
    }
    if let Some(var_175) = &input.vulnerabilities {
        let mut array_176 = object.key("Vulnerabilities").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_vulnerability(&mut object_178, item_177);
                object_178.finish();
            }
        }
        array_176.finish();
    }
    if let Some(var_179) = &input.patch_summary {
        let mut object_180 = object.key("PatchSummary").start_object();
        crate::json_ser::serialize_structure_patch_summary(&mut object_180, var_179);
        object_180.finish();
    }
    if let Some(var_181) = &input.action {
        let mut object_182 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_action(&mut object_182, var_181);
        object_182.finish();
    }
    if let Some(var_183) = &input.finding_provider_fields {
        let mut object_184 = object.key("FindingProviderFields").start_object();
        crate::json_ser::serialize_structure_finding_provider_fields(&mut object_184, var_183);
        object_184.finish();
    }
}

pub fn serialize_structure_aws_security_finding_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingIdentifier,
) {
    if let Some(var_185) = &input.id {
        object.key("Id").string(var_185);
    }
    if let Some(var_186) = &input.product_arn {
        object.key("ProductArn").string(var_186);
    }
}

pub fn serialize_structure_note_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoteUpdate,
) {
    if let Some(var_187) = &input.text {
        object.key("Text").string(var_187);
    }
    if let Some(var_188) = &input.updated_by {
        object.key("UpdatedBy").string(var_188);
    }
}

pub fn serialize_structure_related_finding(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedFinding,
) {
    if let Some(var_189) = &input.product_arn {
        object.key("ProductArn").string(var_189);
    }
    if let Some(var_190) = &input.id {
        object.key("Id").string(var_190);
    }
}

pub fn serialize_structure_severity_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityUpdate,
) {
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_191) = &input.label {
        object.key("Label").string(var_191.as_str());
    }
}

pub fn serialize_structure_workflow_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowUpdate,
) {
    if let Some(var_192) = &input.status {
        object.key("Status").string(var_192.as_str());
    }
}

pub fn serialize_structure_aws_security_finding_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingFilters,
) {
    if let Some(var_193) = &input.product_arn {
        let mut array_194 = object.key("ProductArn").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.aws_account_id {
        let mut array_198 = object.key("AwsAccountId").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_200, item_199);
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.id {
        let mut array_202 = object.key("Id").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_204, item_203);
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.generator_id {
        let mut array_206 = object.key("GeneratorId").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_208, item_207);
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.r#type {
        let mut array_210 = object.key("Type").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_212, item_211);
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.first_observed_at {
        let mut array_214 = object.key("FirstObservedAt").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_216, item_215);
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.last_observed_at {
        let mut array_218 = object.key("LastObservedAt").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_220, item_219);
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.created_at {
        let mut array_222 = object.key("CreatedAt").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.updated_at {
        let mut array_226 = object.key("UpdatedAt").start_array();
        for item_227 in var_225 {
            {
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_228, item_227);
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.severity_product {
        let mut array_230 = object.key("SeverityProduct").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_232, item_231);
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.severity_normalized {
        let mut array_234 = object.key("SeverityNormalized").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_236, item_235);
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.severity_label {
        let mut array_238 = object.key("SeverityLabel").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_240, item_239);
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.confidence {
        let mut array_242 = object.key("Confidence").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_244, item_243);
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.criticality {
        let mut array_246 = object.key("Criticality").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_248, item_247);
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.title {
        let mut array_250 = object.key("Title").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_252, item_251);
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.description {
        let mut array_254 = object.key("Description").start_array();
        for item_255 in var_253 {
            {
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_256, item_255);
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.recommendation_text {
        let mut array_258 = object.key("RecommendationText").start_array();
        for item_259 in var_257 {
            {
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_260, item_259);
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.source_url {
        let mut array_262 = object.key("SourceUrl").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_264, item_263);
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.product_fields {
        let mut array_266 = object.key("ProductFields").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_268, item_267);
                object_268.finish();
            }
        }
        array_266.finish();
    }
    if let Some(var_269) = &input.product_name {
        let mut array_270 = object.key("ProductName").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_272, item_271);
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.company_name {
        let mut array_274 = object.key("CompanyName").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_276, item_275);
                object_276.finish();
            }
        }
        array_274.finish();
    }
    if let Some(var_277) = &input.user_defined_fields {
        let mut array_278 = object.key("UserDefinedFields").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_280, item_279);
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.malware_name {
        let mut array_282 = object.key("MalwareName").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_284, item_283);
                object_284.finish();
            }
        }
        array_282.finish();
    }
    if let Some(var_285) = &input.malware_type {
        let mut array_286 = object.key("MalwareType").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_288, item_287);
                object_288.finish();
            }
        }
        array_286.finish();
    }
    if let Some(var_289) = &input.malware_path {
        let mut array_290 = object.key("MalwarePath").start_array();
        for item_291 in var_289 {
            {
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_292, item_291);
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.malware_state {
        let mut array_294 = object.key("MalwareState").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_296, item_295);
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.network_direction {
        let mut array_298 = object.key("NetworkDirection").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_300, item_299);
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.network_protocol {
        let mut array_302 = object.key("NetworkProtocol").start_array();
        for item_303 in var_301 {
            {
                let mut object_304 = array_302.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_304, item_303);
                object_304.finish();
            }
        }
        array_302.finish();
    }
    if let Some(var_305) = &input.network_source_ip_v4 {
        let mut array_306 = object.key("NetworkSourceIpV4").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_308, item_307);
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.network_source_ip_v6 {
        let mut array_310 = object.key("NetworkSourceIpV6").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_312, item_311);
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.network_source_port {
        let mut array_314 = object.key("NetworkSourcePort").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_316, item_315);
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.network_source_domain {
        let mut array_318 = object.key("NetworkSourceDomain").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_320, item_319);
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.network_source_mac {
        let mut array_322 = object.key("NetworkSourceMac").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_324, item_323);
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.network_destination_ip_v4 {
        let mut array_326 = object.key("NetworkDestinationIpV4").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_328, item_327);
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.network_destination_ip_v6 {
        let mut array_330 = object.key("NetworkDestinationIpV6").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_332, item_331);
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.network_destination_port {
        let mut array_334 = object.key("NetworkDestinationPort").start_array();
        for item_335 in var_333 {
            {
                let mut object_336 = array_334.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_336, item_335);
                object_336.finish();
            }
        }
        array_334.finish();
    }
    if let Some(var_337) = &input.network_destination_domain {
        let mut array_338 = object.key("NetworkDestinationDomain").start_array();
        for item_339 in var_337 {
            {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_340, item_339);
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.process_name {
        let mut array_342 = object.key("ProcessName").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_344, item_343);
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.process_path {
        let mut array_346 = object.key("ProcessPath").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_348, item_347);
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.process_pid {
        let mut array_350 = object.key("ProcessPid").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_352, item_351);
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.process_parent_pid {
        let mut array_354 = object.key("ProcessParentPid").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_356, item_355);
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.process_launched_at {
        let mut array_358 = object.key("ProcessLaunchedAt").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_360, item_359);
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.process_terminated_at {
        let mut array_362 = object.key("ProcessTerminatedAt").start_array();
        for item_363 in var_361 {
            {
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_364, item_363);
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.threat_intel_indicator_type {
        let mut array_366 = object.key("ThreatIntelIndicatorType").start_array();
        for item_367 in var_365 {
            {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_368, item_367);
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.threat_intel_indicator_value {
        let mut array_370 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_371 in var_369 {
            {
                let mut object_372 = array_370.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_372, item_371);
                object_372.finish();
            }
        }
        array_370.finish();
    }
    if let Some(var_373) = &input.threat_intel_indicator_category {
        let mut array_374 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_375 in var_373 {
            {
                let mut object_376 = array_374.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_376, item_375);
                object_376.finish();
            }
        }
        array_374.finish();
    }
    if let Some(var_377) = &input.threat_intel_indicator_last_observed_at {
        let mut array_378 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_380, item_379);
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.threat_intel_indicator_source {
        let mut array_382 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_384, item_383);
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.threat_intel_indicator_source_url {
        let mut array_386 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_387 in var_385 {
            {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_388, item_387);
                object_388.finish();
            }
        }
        array_386.finish();
    }
    if let Some(var_389) = &input.resource_type {
        let mut array_390 = object.key("ResourceType").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_392, item_391);
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.resource_id {
        let mut array_394 = object.key("ResourceId").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_396, item_395);
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.resource_partition {
        let mut array_398 = object.key("ResourcePartition").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_400, item_399);
                object_400.finish();
            }
        }
        array_398.finish();
    }
    if let Some(var_401) = &input.resource_region {
        let mut array_402 = object.key("ResourceRegion").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_404, item_403);
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.resource_tags {
        let mut array_406 = object.key("ResourceTags").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_408, item_407);
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.resource_aws_ec2_instance_type {
        let mut array_410 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_411 in var_409 {
            {
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_412, item_411);
                object_412.finish();
            }
        }
        array_410.finish();
    }
    if let Some(var_413) = &input.resource_aws_ec2_instance_image_id {
        let mut array_414 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_416, item_415);
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_418 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_419 in var_417 {
            {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_420, item_419);
                object_420.finish();
            }
        }
        array_418.finish();
    }
    if let Some(var_421) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_422 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_423 in var_421 {
            {
                let mut object_424 = array_422.value().start_object();
                crate::json_ser::serialize_structure_ip_filter(&mut object_424, item_423);
                object_424.finish();
            }
        }
        array_422.finish();
    }
    if let Some(var_425) = &input.resource_aws_ec2_instance_key_name {
        let mut array_426 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_428, item_427);
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_430 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_431 in var_429 {
            {
                let mut object_432 = array_430.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_432, item_431);
                object_432.finish();
            }
        }
        array_430.finish();
    }
    if let Some(var_433) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_434 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_436, item_435);
                object_436.finish();
            }
        }
        array_434.finish();
    }
    if let Some(var_437) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_438 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_440, item_439);
                object_440.finish();
            }
        }
        array_438.finish();
    }
    if let Some(var_441) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_442 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_444, item_443);
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_446 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_448, item_447);
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_450 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_451 in var_449 {
            {
                let mut object_452 = array_450.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_452, item_451);
                object_452.finish();
            }
        }
        array_450.finish();
    }
    if let Some(var_453) = &input.resource_aws_iam_access_key_user_name {
        let mut array_454 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_455 in var_453 {
            {
                let mut object_456 = array_454.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_456, item_455);
                object_456.finish();
            }
        }
        array_454.finish();
    }
    if let Some(var_457) = &input.resource_aws_iam_access_key_status {
        let mut array_458 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_459 in var_457 {
            {
                let mut object_460 = array_458.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_460, item_459);
                object_460.finish();
            }
        }
        array_458.finish();
    }
    if let Some(var_461) = &input.resource_aws_iam_access_key_created_at {
        let mut array_462 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_463 in var_461 {
            {
                let mut object_464 = array_462.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_464, item_463);
                object_464.finish();
            }
        }
        array_462.finish();
    }
    if let Some(var_465) = &input.resource_container_name {
        let mut array_466 = object.key("ResourceContainerName").start_array();
        for item_467 in var_465 {
            {
                let mut object_468 = array_466.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_468, item_467);
                object_468.finish();
            }
        }
        array_466.finish();
    }
    if let Some(var_469) = &input.resource_container_image_id {
        let mut array_470 = object.key("ResourceContainerImageId").start_array();
        for item_471 in var_469 {
            {
                let mut object_472 = array_470.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_472, item_471);
                object_472.finish();
            }
        }
        array_470.finish();
    }
    if let Some(var_473) = &input.resource_container_image_name {
        let mut array_474 = object.key("ResourceContainerImageName").start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_476, item_475);
                object_476.finish();
            }
        }
        array_474.finish();
    }
    if let Some(var_477) = &input.resource_container_launched_at {
        let mut array_478 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_479 in var_477 {
            {
                let mut object_480 = array_478.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_480, item_479);
                object_480.finish();
            }
        }
        array_478.finish();
    }
    if let Some(var_481) = &input.resource_details_other {
        let mut array_482 = object.key("ResourceDetailsOther").start_array();
        for item_483 in var_481 {
            {
                let mut object_484 = array_482.value().start_object();
                crate::json_ser::serialize_structure_map_filter(&mut object_484, item_483);
                object_484.finish();
            }
        }
        array_482.finish();
    }
    if let Some(var_485) = &input.compliance_status {
        let mut array_486 = object.key("ComplianceStatus").start_array();
        for item_487 in var_485 {
            {
                let mut object_488 = array_486.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_488, item_487);
                object_488.finish();
            }
        }
        array_486.finish();
    }
    if let Some(var_489) = &input.verification_state {
        let mut array_490 = object.key("VerificationState").start_array();
        for item_491 in var_489 {
            {
                let mut object_492 = array_490.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_492, item_491);
                object_492.finish();
            }
        }
        array_490.finish();
    }
    if let Some(var_493) = &input.workflow_state {
        let mut array_494 = object.key("WorkflowState").start_array();
        for item_495 in var_493 {
            {
                let mut object_496 = array_494.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_496, item_495);
                object_496.finish();
            }
        }
        array_494.finish();
    }
    if let Some(var_497) = &input.workflow_status {
        let mut array_498 = object.key("WorkflowStatus").start_array();
        for item_499 in var_497 {
            {
                let mut object_500 = array_498.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_500, item_499);
                object_500.finish();
            }
        }
        array_498.finish();
    }
    if let Some(var_501) = &input.record_state {
        let mut array_502 = object.key("RecordState").start_array();
        for item_503 in var_501 {
            {
                let mut object_504 = array_502.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_504, item_503);
                object_504.finish();
            }
        }
        array_502.finish();
    }
    if let Some(var_505) = &input.related_findings_product_arn {
        let mut array_506 = object.key("RelatedFindingsProductArn").start_array();
        for item_507 in var_505 {
            {
                let mut object_508 = array_506.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_508, item_507);
                object_508.finish();
            }
        }
        array_506.finish();
    }
    if let Some(var_509) = &input.related_findings_id {
        let mut array_510 = object.key("RelatedFindingsId").start_array();
        for item_511 in var_509 {
            {
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_512, item_511);
                object_512.finish();
            }
        }
        array_510.finish();
    }
    if let Some(var_513) = &input.note_text {
        let mut array_514 = object.key("NoteText").start_array();
        for item_515 in var_513 {
            {
                let mut object_516 = array_514.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_516, item_515);
                object_516.finish();
            }
        }
        array_514.finish();
    }
    if let Some(var_517) = &input.note_updated_at {
        let mut array_518 = object.key("NoteUpdatedAt").start_array();
        for item_519 in var_517 {
            {
                let mut object_520 = array_518.value().start_object();
                crate::json_ser::serialize_structure_date_filter(&mut object_520, item_519);
                object_520.finish();
            }
        }
        array_518.finish();
    }
    if let Some(var_521) = &input.note_updated_by {
        let mut array_522 = object.key("NoteUpdatedBy").start_array();
        for item_523 in var_521 {
            {
                let mut object_524 = array_522.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_524, item_523);
                object_524.finish();
            }
        }
        array_522.finish();
    }
    if let Some(var_525) = &input.keyword {
        let mut array_526 = object.key("Keyword").start_array();
        for item_527 in var_525 {
            {
                let mut object_528 = array_526.value().start_object();
                crate::json_ser::serialize_structure_keyword_filter(&mut object_528, item_527);
                object_528.finish();
            }
        }
        array_526.finish();
    }
    if let Some(var_529) = &input.finding_provider_fields_confidence {
        let mut array_530 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_531 in var_529 {
            {
                let mut object_532 = array_530.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_532, item_531);
                object_532.finish();
            }
        }
        array_530.finish();
    }
    if let Some(var_533) = &input.finding_provider_fields_criticality {
        let mut array_534 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_535 in var_533 {
            {
                let mut object_536 = array_534.value().start_object();
                crate::json_ser::serialize_structure_number_filter(&mut object_536, item_535);
                object_536.finish();
            }
        }
        array_534.finish();
    }
    if let Some(var_537) = &input.finding_provider_fields_related_findings_id {
        let mut array_538 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_539 in var_537 {
            {
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_540, item_539);
                object_540.finish();
            }
        }
        array_538.finish();
    }
    if let Some(var_541) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_542 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_543 in var_541 {
            {
                let mut object_544 = array_542.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_544, item_543);
                object_544.finish();
            }
        }
        array_542.finish();
    }
    if let Some(var_545) = &input.finding_provider_fields_severity_label {
        let mut array_546 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_547 in var_545 {
            {
                let mut object_548 = array_546.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_548, item_547);
                object_548.finish();
            }
        }
        array_546.finish();
    }
    if let Some(var_549) = &input.finding_provider_fields_severity_original {
        let mut array_550 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_551 in var_549 {
            {
                let mut object_552 = array_550.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_552, item_551);
                object_552.finish();
            }
        }
        array_550.finish();
    }
    if let Some(var_553) = &input.finding_provider_fields_types {
        let mut array_554 = object.key("FindingProviderFieldsTypes").start_array();
        for item_555 in var_553 {
            {
                let mut object_556 = array_554.value().start_object();
                crate::json_ser::serialize_structure_string_filter(&mut object_556, item_555);
                object_556.finish();
            }
        }
        array_554.finish();
    }
}

pub fn serialize_structure_account_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetails,
) {
    if let Some(var_557) = &input.account_id {
        object.key("AccountId").string(var_557);
    }
    if let Some(var_558) = &input.email {
        object.key("Email").string(var_558);
    }
}

pub fn serialize_structure_sort_criterion(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) {
    if let Some(var_559) = &input.field {
        object.key("Field").string(var_559);
    }
    if let Some(var_560) = &input.sort_order {
        object.key("SortOrder").string(var_560.as_str());
    }
}

pub fn serialize_structure_severity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Severity,
) {
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_561) = &input.label {
        object.key("Label").string(var_561.as_str());
    }
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if let Some(var_562) = &input.original {
        object.key("Original").string(var_562);
    }
}

pub fn serialize_structure_remediation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Remediation,
) {
    if let Some(var_563) = &input.recommendation {
        let mut object_564 = object.key("Recommendation").start_object();
        crate::json_ser::serialize_structure_recommendation(&mut object_564, var_563);
        object_564.finish();
    }
}

pub fn serialize_structure_malware(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Malware,
) {
    if let Some(var_565) = &input.name {
        object.key("Name").string(var_565);
    }
    if let Some(var_566) = &input.r#type {
        object.key("Type").string(var_566.as_str());
    }
    if let Some(var_567) = &input.path {
        object.key("Path").string(var_567);
    }
    if let Some(var_568) = &input.state {
        object.key("State").string(var_568.as_str());
    }
}

pub fn serialize_structure_network(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Network,
) {
    if let Some(var_569) = &input.direction {
        object.key("Direction").string(var_569.as_str());
    }
    if let Some(var_570) = &input.protocol {
        object.key("Protocol").string(var_570);
    }
    if let Some(var_571) = &input.open_port_range {
        let mut object_572 = object.key("OpenPortRange").start_object();
        crate::json_ser::serialize_structure_port_range(&mut object_572, var_571);
        object_572.finish();
    }
    if let Some(var_573) = &input.source_ip_v4 {
        object.key("SourceIpV4").string(var_573);
    }
    if let Some(var_574) = &input.source_ip_v6 {
        object.key("SourceIpV6").string(var_574);
    }
    if input.source_port != 0 {
        object.key("SourcePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source_port).into()),
        );
    }
    if let Some(var_575) = &input.source_domain {
        object.key("SourceDomain").string(var_575);
    }
    if let Some(var_576) = &input.source_mac {
        object.key("SourceMac").string(var_576);
    }
    if let Some(var_577) = &input.destination_ip_v4 {
        object.key("DestinationIpV4").string(var_577);
    }
    if let Some(var_578) = &input.destination_ip_v6 {
        object.key("DestinationIpV6").string(var_578);
    }
    if input.destination_port != 0 {
        object.key("DestinationPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_579) = &input.destination_domain {
        object.key("DestinationDomain").string(var_579);
    }
}

pub fn serialize_structure_network_path_component(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponent,
) {
    if let Some(var_580) = &input.component_id {
        object.key("ComponentId").string(var_580);
    }
    if let Some(var_581) = &input.component_type {
        object.key("ComponentType").string(var_581);
    }
    if let Some(var_582) = &input.egress {
        let mut object_583 = object.key("Egress").start_object();
        crate::json_ser::serialize_structure_network_header(&mut object_583, var_582);
        object_583.finish();
    }
    if let Some(var_584) = &input.ingress {
        let mut object_585 = object.key("Ingress").start_object();
        crate::json_ser::serialize_structure_network_header(&mut object_585, var_584);
        object_585.finish();
    }
}

pub fn serialize_structure_process_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessDetails,
) {
    if let Some(var_586) = &input.name {
        object.key("Name").string(var_586);
    }
    if let Some(var_587) = &input.path {
        object.key("Path").string(var_587);
    }
    if input.pid != 0 {
        object.key("Pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if input.parent_pid != 0 {
        object.key("ParentPid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.parent_pid).into()),
        );
    }
    if let Some(var_588) = &input.launched_at {
        object.key("LaunchedAt").string(var_588);
    }
    if let Some(var_589) = &input.terminated_at {
        object.key("TerminatedAt").string(var_589);
    }
}

pub fn serialize_structure_threat_intel_indicator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThreatIntelIndicator,
) {
    if let Some(var_590) = &input.r#type {
        object.key("Type").string(var_590.as_str());
    }
    if let Some(var_591) = &input.value {
        object.key("Value").string(var_591);
    }
    if let Some(var_592) = &input.category {
        object.key("Category").string(var_592.as_str());
    }
    if let Some(var_593) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_593);
    }
    if let Some(var_594) = &input.source {
        object.key("Source").string(var_594);
    }
    if let Some(var_595) = &input.source_url {
        object.key("SourceUrl").string(var_595);
    }
}

pub fn serialize_structure_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) {
    if let Some(var_596) = &input.r#type {
        object.key("Type").string(var_596);
    }
    if let Some(var_597) = &input.id {
        object.key("Id").string(var_597);
    }
    if let Some(var_598) = &input.partition {
        object.key("Partition").string(var_598.as_str());
    }
    if let Some(var_599) = &input.region {
        object.key("Region").string(var_599);
    }
    if let Some(var_600) = &input.resource_role {
        object.key("ResourceRole").string(var_600);
    }
    if let Some(var_601) = &input.tags {
        let mut object_602 = object.key("Tags").start_object();
        for (key_603, value_604) in var_601 {
            {
                object_602.key(key_603).string(value_604);
            }
        }
        object_602.finish();
    }
    if let Some(var_605) = &input.data_classification {
        let mut object_606 = object.key("DataClassification").start_object();
        crate::json_ser::serialize_structure_data_classification_details(&mut object_606, var_605);
        object_606.finish();
    }
    if let Some(var_607) = &input.details {
        let mut object_608 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_resource_details(&mut object_608, var_607);
        object_608.finish();
    }
}

pub fn serialize_structure_compliance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compliance,
) {
    if let Some(var_609) = &input.status {
        object.key("Status").string(var_609.as_str());
    }
    if let Some(var_610) = &input.related_requirements {
        let mut array_611 = object.key("RelatedRequirements").start_array();
        for item_612 in var_610 {
            {
                array_611.value().string(item_612);
            }
        }
        array_611.finish();
    }
    if let Some(var_613) = &input.status_reasons {
        let mut array_614 = object.key("StatusReasons").start_array();
        for item_615 in var_613 {
            {
                let mut object_616 = array_614.value().start_object();
                crate::json_ser::serialize_structure_status_reason(&mut object_616, item_615);
                object_616.finish();
            }
        }
        array_614.finish();
    }
}

pub fn serialize_structure_workflow(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Workflow,
) {
    if let Some(var_617) = &input.status {
        object.key("Status").string(var_617.as_str());
    }
}

pub fn serialize_structure_note(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Note,
) {
    if let Some(var_618) = &input.text {
        object.key("Text").string(var_618);
    }
    if let Some(var_619) = &input.updated_by {
        object.key("UpdatedBy").string(var_619);
    }
    if let Some(var_620) = &input.updated_at {
        object.key("UpdatedAt").string(var_620);
    }
}

pub fn serialize_structure_vulnerability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Vulnerability,
) {
    if let Some(var_621) = &input.id {
        object.key("Id").string(var_621);
    }
    if let Some(var_622) = &input.vulnerable_packages {
        let mut array_623 = object.key("VulnerablePackages").start_array();
        for item_624 in var_622 {
            {
                let mut object_625 = array_623.value().start_object();
                crate::json_ser::serialize_structure_software_package(&mut object_625, item_624);
                object_625.finish();
            }
        }
        array_623.finish();
    }
    if let Some(var_626) = &input.cvss {
        let mut array_627 = object.key("Cvss").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_cvss(&mut object_629, item_628);
                object_629.finish();
            }
        }
        array_627.finish();
    }
    if let Some(var_630) = &input.related_vulnerabilities {
        let mut array_631 = object.key("RelatedVulnerabilities").start_array();
        for item_632 in var_630 {
            {
                array_631.value().string(item_632);
            }
        }
        array_631.finish();
    }
    if let Some(var_633) = &input.vendor {
        let mut object_634 = object.key("Vendor").start_object();
        crate::json_ser::serialize_structure_vulnerability_vendor(&mut object_634, var_633);
        object_634.finish();
    }
    if let Some(var_635) = &input.reference_urls {
        let mut array_636 = object.key("ReferenceUrls").start_array();
        for item_637 in var_635 {
            {
                array_636.value().string(item_637);
            }
        }
        array_636.finish();
    }
}

pub fn serialize_structure_patch_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSummary,
) {
    if let Some(var_638) = &input.id {
        object.key("Id").string(var_638);
    }
    if input.installed_count != 0 {
        object.key("InstalledCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_count).into()),
        );
    }
    if input.missing_count != 0 {
        object.key("MissingCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.missing_count).into()),
        );
    }
    if input.failed_count != 0 {
        object.key("FailedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.failed_count).into()),
        );
    }
    if input.installed_other_count != 0 {
        object.key("InstalledOtherCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_other_count).into()),
        );
    }
    if input.installed_rejected_count != 0 {
        object.key("InstalledRejectedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_rejected_count).into()),
        );
    }
    if input.installed_pending_reboot != 0 {
        object.key("InstalledPendingReboot").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.installed_pending_reboot).into()),
        );
    }
    if let Some(var_639) = &input.operation_start_time {
        object.key("OperationStartTime").string(var_639);
    }
    if let Some(var_640) = &input.operation_end_time {
        object.key("OperationEndTime").string(var_640);
    }
    if let Some(var_641) = &input.reboot_option {
        object.key("RebootOption").string(var_641);
    }
    if let Some(var_642) = &input.operation {
        object.key("Operation").string(var_642);
    }
}

pub fn serialize_structure_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) {
    if let Some(var_643) = &input.action_type {
        object.key("ActionType").string(var_643);
    }
    if let Some(var_644) = &input.network_connection_action {
        let mut object_645 = object.key("NetworkConnectionAction").start_object();
        crate::json_ser::serialize_structure_network_connection_action(&mut object_645, var_644);
        object_645.finish();
    }
    if let Some(var_646) = &input.aws_api_call_action {
        let mut object_647 = object.key("AwsApiCallAction").start_object();
        crate::json_ser::serialize_structure_aws_api_call_action(&mut object_647, var_646);
        object_647.finish();
    }
    if let Some(var_648) = &input.dns_request_action {
        let mut object_649 = object.key("DnsRequestAction").start_object();
        crate::json_ser::serialize_structure_dns_request_action(&mut object_649, var_648);
        object_649.finish();
    }
    if let Some(var_650) = &input.port_probe_action {
        let mut object_651 = object.key("PortProbeAction").start_object();
        crate::json_ser::serialize_structure_port_probe_action(&mut object_651, var_650);
        object_651.finish();
    }
}

pub fn serialize_structure_finding_provider_fields(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderFields,
) {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_652) = &input.related_findings {
        let mut array_653 = object.key("RelatedFindings").start_array();
        for item_654 in var_652 {
            {
                let mut object_655 = array_653.value().start_object();
                crate::json_ser::serialize_structure_related_finding(&mut object_655, item_654);
                object_655.finish();
            }
        }
        array_653.finish();
    }
    if let Some(var_656) = &input.severity {
        let mut object_657 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_finding_provider_severity(&mut object_657, var_656);
        object_657.finish();
    }
    if let Some(var_658) = &input.types {
        let mut array_659 = object.key("Types").start_array();
        for item_660 in var_658 {
            {
                array_659.value().string(item_660);
            }
        }
        array_659.finish();
    }
}

pub fn serialize_structure_string_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) {
    if let Some(var_661) = &input.value {
        object.key("Value").string(var_661);
    }
    if let Some(var_662) = &input.comparison {
        object.key("Comparison").string(var_662.as_str());
    }
}

pub fn serialize_structure_date_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) {
    if let Some(var_663) = &input.start {
        object.key("Start").string(var_663);
    }
    if let Some(var_664) = &input.end {
        object.key("End").string(var_664);
    }
    if let Some(var_665) = &input.date_range {
        let mut object_666 = object.key("DateRange").start_object();
        crate::json_ser::serialize_structure_date_range(&mut object_666, var_665);
        object_666.finish();
    }
}

pub fn serialize_structure_number_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) {
    if input.gte != 0.0 {
        object.key("Gte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.gte).into()),
        );
    }
    if input.lte != 0.0 {
        object.key("Lte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lte).into()),
        );
    }
    if input.eq != 0.0 {
        object.key("Eq").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.eq).into()),
        );
    }
}

pub fn serialize_structure_map_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) {
    if let Some(var_667) = &input.key {
        object.key("Key").string(var_667);
    }
    if let Some(var_668) = &input.value {
        object.key("Value").string(var_668);
    }
    if let Some(var_669) = &input.comparison {
        object.key("Comparison").string(var_669.as_str());
    }
}

pub fn serialize_structure_ip_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpFilter,
) {
    if let Some(var_670) = &input.cidr {
        object.key("Cidr").string(var_670);
    }
}

pub fn serialize_structure_keyword_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) {
    if let Some(var_671) = &input.value {
        object.key("Value").string(var_671);
    }
}

pub fn serialize_structure_recommendation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Recommendation,
) {
    if let Some(var_672) = &input.text {
        object.key("Text").string(var_672);
    }
    if let Some(var_673) = &input.url {
        object.key("Url").string(var_673);
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    if input.begin != 0 {
        object.key("Begin").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.begin).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.end).into()),
        );
    }
}

pub fn serialize_structure_network_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkHeader,
) {
    if let Some(var_674) = &input.protocol {
        object.key("Protocol").string(var_674);
    }
    if let Some(var_675) = &input.destination {
        let mut object_676 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_network_path_component_details(
            &mut object_676,
            var_675,
        );
        object_676.finish();
    }
    if let Some(var_677) = &input.source {
        let mut object_678 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_network_path_component_details(
            &mut object_678,
            var_677,
        );
        object_678.finish();
    }
}

pub fn serialize_structure_data_classification_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataClassificationDetails,
) {
    if let Some(var_679) = &input.detailed_results_location {
        object.key("DetailedResultsLocation").string(var_679);
    }
    if let Some(var_680) = &input.result {
        let mut object_681 = object.key("Result").start_object();
        crate::json_ser::serialize_structure_classification_result(&mut object_681, var_680);
        object_681.finish();
    }
}

pub fn serialize_structure_resource_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDetails,
) {
    if let Some(var_682) = &input.aws_auto_scaling_auto_scaling_group {
        let mut object_683 = object.key("AwsAutoScalingAutoScalingGroup").start_object();
        crate::json_ser::serialize_structure_aws_auto_scaling_auto_scaling_group_details(
            &mut object_683,
            var_682,
        );
        object_683.finish();
    }
    if let Some(var_684) = &input.aws_code_build_project {
        let mut object_685 = object.key("AwsCodeBuildProject").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_details(
            &mut object_685,
            var_684,
        );
        object_685.finish();
    }
    if let Some(var_686) = &input.aws_cloud_front_distribution {
        let mut object_687 = object.key("AwsCloudFrontDistribution").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_details(
            &mut object_687,
            var_686,
        );
        object_687.finish();
    }
    if let Some(var_688) = &input.aws_ec2_instance {
        let mut object_689 = object.key("AwsEc2Instance").start_object();
        crate::json_ser::serialize_structure_aws_ec2_instance_details(&mut object_689, var_688);
        object_689.finish();
    }
    if let Some(var_690) = &input.aws_ec2_network_interface {
        let mut object_691 = object.key("AwsEc2NetworkInterface").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_interface_details(
            &mut object_691,
            var_690,
        );
        object_691.finish();
    }
    if let Some(var_692) = &input.aws_ec2_security_group {
        let mut object_693 = object.key("AwsEc2SecurityGroup").start_object();
        crate::json_ser::serialize_structure_aws_ec2_security_group_details(
            &mut object_693,
            var_692,
        );
        object_693.finish();
    }
    if let Some(var_694) = &input.aws_ec2_volume {
        let mut object_695 = object.key("AwsEc2Volume").start_object();
        crate::json_ser::serialize_structure_aws_ec2_volume_details(&mut object_695, var_694);
        object_695.finish();
    }
    if let Some(var_696) = &input.aws_ec2_vpc {
        let mut object_697 = object.key("AwsEc2Vpc").start_object();
        crate::json_ser::serialize_structure_aws_ec2_vpc_details(&mut object_697, var_696);
        object_697.finish();
    }
    if let Some(var_698) = &input.aws_ec2_eip {
        let mut object_699 = object.key("AwsEc2Eip").start_object();
        crate::json_ser::serialize_structure_aws_ec2_eip_details(&mut object_699, var_698);
        object_699.finish();
    }
    if let Some(var_700) = &input.aws_ec2_subnet {
        let mut object_701 = object.key("AwsEc2Subnet").start_object();
        crate::json_ser::serialize_structure_aws_ec2_subnet_details(&mut object_701, var_700);
        object_701.finish();
    }
    if let Some(var_702) = &input.aws_ec2_network_acl {
        let mut object_703 = object.key("AwsEc2NetworkAcl").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_acl_details(&mut object_703, var_702);
        object_703.finish();
    }
    if let Some(var_704) = &input.aws_elbv2_load_balancer {
        let mut object_705 = object.key("AwsElbv2LoadBalancer").start_object();
        crate::json_ser::serialize_structure_aws_elbv2_load_balancer_details(
            &mut object_705,
            var_704,
        );
        object_705.finish();
    }
    if let Some(var_706) = &input.aws_elastic_beanstalk_environment {
        let mut object_707 = object.key("AwsElasticBeanstalkEnvironment").start_object();
        crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_details(
            &mut object_707,
            var_706,
        );
        object_707.finish();
    }
    if let Some(var_708) = &input.aws_elasticsearch_domain {
        let mut object_709 = object.key("AwsElasticsearchDomain").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_details(
            &mut object_709,
            var_708,
        );
        object_709.finish();
    }
    if let Some(var_710) = &input.aws_s3_bucket {
        let mut object_711 = object.key("AwsS3Bucket").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_details(&mut object_711, var_710);
        object_711.finish();
    }
    if let Some(var_712) = &input.aws_s3_account_public_access_block {
        let mut object_713 = object.key("AwsS3AccountPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_aws_s3_account_public_access_block_details(
            &mut object_713,
            var_712,
        );
        object_713.finish();
    }
    if let Some(var_714) = &input.aws_s3_object {
        let mut object_715 = object.key("AwsS3Object").start_object();
        crate::json_ser::serialize_structure_aws_s3_object_details(&mut object_715, var_714);
        object_715.finish();
    }
    if let Some(var_716) = &input.aws_secrets_manager_secret {
        let mut object_717 = object.key("AwsSecretsManagerSecret").start_object();
        crate::json_ser::serialize_structure_aws_secrets_manager_secret_details(
            &mut object_717,
            var_716,
        );
        object_717.finish();
    }
    if let Some(var_718) = &input.aws_iam_access_key {
        let mut object_719 = object.key("AwsIamAccessKey").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_details(&mut object_719, var_718);
        object_719.finish();
    }
    if let Some(var_720) = &input.aws_iam_user {
        let mut object_721 = object.key("AwsIamUser").start_object();
        crate::json_ser::serialize_structure_aws_iam_user_details(&mut object_721, var_720);
        object_721.finish();
    }
    if let Some(var_722) = &input.aws_iam_policy {
        let mut object_723 = object.key("AwsIamPolicy").start_object();
        crate::json_ser::serialize_structure_aws_iam_policy_details(&mut object_723, var_722);
        object_723.finish();
    }
    if let Some(var_724) = &input.aws_api_gateway_v2_stage {
        let mut object_725 = object.key("AwsApiGatewayV2Stage").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_stage_details(
            &mut object_725,
            var_724,
        );
        object_725.finish();
    }
    if let Some(var_726) = &input.aws_api_gateway_v2_api {
        let mut object_727 = object.key("AwsApiGatewayV2Api").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_api_details(
            &mut object_727,
            var_726,
        );
        object_727.finish();
    }
    if let Some(var_728) = &input.aws_dynamo_db_table {
        let mut object_729 = object.key("AwsDynamoDbTable").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_details(&mut object_729, var_728);
        object_729.finish();
    }
    if let Some(var_730) = &input.aws_api_gateway_stage {
        let mut object_731 = object.key("AwsApiGatewayStage").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_stage_details(
            &mut object_731,
            var_730,
        );
        object_731.finish();
    }
    if let Some(var_732) = &input.aws_api_gateway_rest_api {
        let mut object_733 = object.key("AwsApiGatewayRestApi").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_rest_api_details(
            &mut object_733,
            var_732,
        );
        object_733.finish();
    }
    if let Some(var_734) = &input.aws_cloud_trail_trail {
        let mut object_735 = object.key("AwsCloudTrailTrail").start_object();
        crate::json_ser::serialize_structure_aws_cloud_trail_trail_details(
            &mut object_735,
            var_734,
        );
        object_735.finish();
    }
    if let Some(var_736) = &input.aws_ssm_patch_compliance {
        let mut object_737 = object.key("AwsSsmPatchCompliance").start_object();
        crate::json_ser::serialize_structure_aws_ssm_patch_compliance_details(
            &mut object_737,
            var_736,
        );
        object_737.finish();
    }
    if let Some(var_738) = &input.aws_certificate_manager_certificate {
        let mut object_739 = object
            .key("AwsCertificateManagerCertificate")
            .start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_details(
            &mut object_739,
            var_738,
        );
        object_739.finish();
    }
    if let Some(var_740) = &input.aws_redshift_cluster {
        let mut object_741 = object.key("AwsRedshiftCluster").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_details(&mut object_741, var_740);
        object_741.finish();
    }
    if let Some(var_742) = &input.aws_elb_load_balancer {
        let mut object_743 = object.key("AwsElbLoadBalancer").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_details(
            &mut object_743,
            var_742,
        );
        object_743.finish();
    }
    if let Some(var_744) = &input.aws_iam_group {
        let mut object_745 = object.key("AwsIamGroup").start_object();
        crate::json_ser::serialize_structure_aws_iam_group_details(&mut object_745, var_744);
        object_745.finish();
    }
    if let Some(var_746) = &input.aws_iam_role {
        let mut object_747 = object.key("AwsIamRole").start_object();
        crate::json_ser::serialize_structure_aws_iam_role_details(&mut object_747, var_746);
        object_747.finish();
    }
    if let Some(var_748) = &input.aws_kms_key {
        let mut object_749 = object.key("AwsKmsKey").start_object();
        crate::json_ser::serialize_structure_aws_kms_key_details(&mut object_749, var_748);
        object_749.finish();
    }
    if let Some(var_750) = &input.aws_lambda_function {
        let mut object_751 = object.key("AwsLambdaFunction").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_details(&mut object_751, var_750);
        object_751.finish();
    }
    if let Some(var_752) = &input.aws_lambda_layer_version {
        let mut object_753 = object.key("AwsLambdaLayerVersion").start_object();
        crate::json_ser::serialize_structure_aws_lambda_layer_version_details(
            &mut object_753,
            var_752,
        );
        object_753.finish();
    }
    if let Some(var_754) = &input.aws_rds_db_instance {
        let mut object_755 = object.key("AwsRdsDbInstance").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_details(&mut object_755, var_754);
        object_755.finish();
    }
    if let Some(var_756) = &input.aws_sns_topic {
        let mut object_757 = object.key("AwsSnsTopic").start_object();
        crate::json_ser::serialize_structure_aws_sns_topic_details(&mut object_757, var_756);
        object_757.finish();
    }
    if let Some(var_758) = &input.aws_sqs_queue {
        let mut object_759 = object.key("AwsSqsQueue").start_object();
        crate::json_ser::serialize_structure_aws_sqs_queue_details(&mut object_759, var_758);
        object_759.finish();
    }
    if let Some(var_760) = &input.aws_waf_web_acl {
        let mut object_761 = object.key("AwsWafWebAcl").start_object();
        crate::json_ser::serialize_structure_aws_waf_web_acl_details(&mut object_761, var_760);
        object_761.finish();
    }
    if let Some(var_762) = &input.aws_rds_db_snapshot {
        let mut object_763 = object.key("AwsRdsDbSnapshot").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_snapshot_details(&mut object_763, var_762);
        object_763.finish();
    }
    if let Some(var_764) = &input.aws_rds_db_cluster_snapshot {
        let mut object_765 = object.key("AwsRdsDbClusterSnapshot").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_cluster_snapshot_details(
            &mut object_765,
            var_764,
        );
        object_765.finish();
    }
    if let Some(var_766) = &input.aws_rds_db_cluster {
        let mut object_767 = object.key("AwsRdsDbCluster").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_cluster_details(&mut object_767, var_766);
        object_767.finish();
    }
    if let Some(var_768) = &input.aws_ecs_cluster {
        let mut object_769 = object.key("AwsEcsCluster").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_details(&mut object_769, var_768);
        object_769.finish();
    }
    if let Some(var_770) = &input.aws_ecs_task_definition {
        let mut object_771 = object.key("AwsEcsTaskDefinition").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_details(
            &mut object_771,
            var_770,
        );
        object_771.finish();
    }
    if let Some(var_772) = &input.container {
        let mut object_773 = object.key("Container").start_object();
        crate::json_ser::serialize_structure_container_details(&mut object_773, var_772);
        object_773.finish();
    }
    if let Some(var_774) = &input.other {
        let mut object_775 = object.key("Other").start_object();
        for (key_776, value_777) in var_774 {
            {
                object_775.key(key_776).string(value_777);
            }
        }
        object_775.finish();
    }
}

pub fn serialize_structure_status_reason(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusReason,
) {
    if let Some(var_778) = &input.reason_code {
        object.key("ReasonCode").string(var_778);
    }
    if let Some(var_779) = &input.description {
        object.key("Description").string(var_779);
    }
}

pub fn serialize_structure_software_package(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwarePackage,
) {
    if let Some(var_780) = &input.name {
        object.key("Name").string(var_780);
    }
    if let Some(var_781) = &input.version {
        object.key("Version").string(var_781);
    }
    if let Some(var_782) = &input.epoch {
        object.key("Epoch").string(var_782);
    }
    if let Some(var_783) = &input.release {
        object.key("Release").string(var_783);
    }
    if let Some(var_784) = &input.architecture {
        object.key("Architecture").string(var_784);
    }
}

pub fn serialize_structure_cvss(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cvss,
) {
    if let Some(var_785) = &input.version {
        object.key("Version").string(var_785);
    }
    if input.base_score != 0.0 {
        object.key("BaseScore").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.base_score).into()),
        );
    }
    if let Some(var_786) = &input.base_vector {
        object.key("BaseVector").string(var_786);
    }
}

pub fn serialize_structure_vulnerability_vendor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VulnerabilityVendor,
) {
    if let Some(var_787) = &input.name {
        object.key("Name").string(var_787);
    }
    if let Some(var_788) = &input.url {
        object.key("Url").string(var_788);
    }
    if let Some(var_789) = &input.vendor_severity {
        object.key("VendorSeverity").string(var_789);
    }
    if let Some(var_790) = &input.vendor_created_at {
        object.key("VendorCreatedAt").string(var_790);
    }
    if let Some(var_791) = &input.vendor_updated_at {
        object.key("VendorUpdatedAt").string(var_791);
    }
}

pub fn serialize_structure_network_connection_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConnectionAction,
) {
    if let Some(var_792) = &input.connection_direction {
        object.key("ConnectionDirection").string(var_792);
    }
    if let Some(var_793) = &input.remote_ip_details {
        let mut object_794 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_794, var_793);
        object_794.finish();
    }
    if let Some(var_795) = &input.remote_port_details {
        let mut object_796 = object.key("RemotePortDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_port_details(&mut object_796, var_795);
        object_796.finish();
    }
    if let Some(var_797) = &input.local_port_details {
        let mut object_798 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_action_local_port_details(&mut object_798, var_797);
        object_798.finish();
    }
    if let Some(var_799) = &input.protocol {
        object.key("Protocol").string(var_799);
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_aws_api_call_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallAction,
) {
    if let Some(var_800) = &input.api {
        object.key("Api").string(var_800);
    }
    if let Some(var_801) = &input.service_name {
        object.key("ServiceName").string(var_801);
    }
    if let Some(var_802) = &input.caller_type {
        object.key("CallerType").string(var_802);
    }
    if let Some(var_803) = &input.remote_ip_details {
        let mut object_804 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_804, var_803);
        object_804.finish();
    }
    if let Some(var_805) = &input.domain_details {
        let mut object_806 = object.key("DomainDetails").start_object();
        crate::json_ser::serialize_structure_aws_api_call_action_domain_details(
            &mut object_806,
            var_805,
        );
        object_806.finish();
    }
    if let Some(var_807) = &input.affected_resources {
        let mut object_808 = object.key("AffectedResources").start_object();
        for (key_809, value_810) in var_807 {
            {
                object_808.key(key_809).string(value_810);
            }
        }
        object_808.finish();
    }
    if let Some(var_811) = &input.first_seen {
        object.key("FirstSeen").string(var_811);
    }
    if let Some(var_812) = &input.last_seen {
        object.key("LastSeen").string(var_812);
    }
}

pub fn serialize_structure_dns_request_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsRequestAction,
) {
    if let Some(var_813) = &input.domain {
        object.key("Domain").string(var_813);
    }
    if let Some(var_814) = &input.protocol {
        object.key("Protocol").string(var_814);
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_port_probe_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeAction,
) {
    if let Some(var_815) = &input.port_probe_details {
        let mut array_816 = object.key("PortProbeDetails").start_array();
        for item_817 in var_815 {
            {
                let mut object_818 = array_816.value().start_object();
                crate::json_ser::serialize_structure_port_probe_detail(&mut object_818, item_817);
                object_818.finish();
            }
        }
        array_816.finish();
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
}

pub fn serialize_structure_finding_provider_severity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderSeverity,
) {
    if let Some(var_819) = &input.label {
        object.key("Label").string(var_819.as_str());
    }
    if let Some(var_820) = &input.original {
        object.key("Original").string(var_820);
    }
}

pub fn serialize_structure_date_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRange,
) {
    if input.value != 0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.value).into()),
        );
    }
    if let Some(var_821) = &input.unit {
        object.key("Unit").string(var_821.as_str());
    }
}

pub fn serialize_structure_network_path_component_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponentDetails,
) {
    if let Some(var_822) = &input.address {
        let mut array_823 = object.key("Address").start_array();
        for item_824 in var_822 {
            {
                array_823.value().string(item_824);
            }
        }
        array_823.finish();
    }
    if let Some(var_825) = &input.port_ranges {
        let mut array_826 = object.key("PortRanges").start_array();
        for item_827 in var_825 {
            {
                let mut object_828 = array_826.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_828, item_827);
                object_828.finish();
            }
        }
        array_826.finish();
    }
}

pub fn serialize_structure_classification_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationResult,
) {
    if let Some(var_829) = &input.mime_type {
        object.key("MimeType").string(var_829);
    }
    if input.size_classified != 0 {
        object.key("SizeClassified").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size_classified).into()),
        );
    }
    if input.additional_occurrences {
        object
            .key("AdditionalOccurrences")
            .boolean(input.additional_occurrences);
    }
    if let Some(var_830) = &input.status {
        let mut object_831 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_classification_status(&mut object_831, var_830);
        object_831.finish();
    }
    if let Some(var_832) = &input.sensitive_data {
        let mut array_833 = object.key("SensitiveData").start_array();
        for item_834 in var_832 {
            {
                let mut object_835 = array_833.value().start_object();
                crate::json_ser::serialize_structure_sensitive_data_result(
                    &mut object_835,
                    item_834,
                );
                object_835.finish();
            }
        }
        array_833.finish();
    }
    if let Some(var_836) = &input.custom_data_identifiers {
        let mut object_837 = object.key("CustomDataIdentifiers").start_object();
        crate::json_ser::serialize_structure_custom_data_identifiers_result(
            &mut object_837,
            var_836,
        );
        object_837.finish();
    }
}

pub fn serialize_structure_aws_auto_scaling_auto_scaling_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupDetails,
) {
    if let Some(var_838) = &input.launch_configuration_name {
        object.key("LaunchConfigurationName").string(var_838);
    }
    if let Some(var_839) = &input.load_balancer_names {
        let mut array_840 = object.key("LoadBalancerNames").start_array();
        for item_841 in var_839 {
            {
                array_840.value().string(item_841);
            }
        }
        array_840.finish();
    }
    if let Some(var_842) = &input.health_check_type {
        object.key("HealthCheckType").string(var_842);
    }
    if input.health_check_grace_period != 0 {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.health_check_grace_period).into()),
        );
    }
    if let Some(var_843) = &input.created_time {
        object.key("CreatedTime").string(var_843);
    }
}

pub fn serialize_structure_aws_code_build_project_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectDetails,
) {
    if let Some(var_844) = &input.encryption_key {
        object.key("EncryptionKey").string(var_844);
    }
    if let Some(var_845) = &input.environment {
        let mut object_846 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_environment(
            &mut object_846,
            var_845,
        );
        object_846.finish();
    }
    if let Some(var_847) = &input.name {
        object.key("Name").string(var_847);
    }
    if let Some(var_848) = &input.source {
        let mut object_849 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_source(
            &mut object_849,
            var_848,
        );
        object_849.finish();
    }
    if let Some(var_850) = &input.service_role {
        object.key("ServiceRole").string(var_850);
    }
    if let Some(var_851) = &input.vpc_config {
        let mut object_852 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_vpc_config(
            &mut object_852,
            var_851,
        );
        object_852.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDetails,
) {
    if let Some(var_853) = &input.cache_behaviors {
        let mut object_854 = object.key("CacheBehaviors").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_cache_behaviors(
            &mut object_854,
            var_853,
        );
        object_854.finish();
    }
    if let Some(var_855) = &input.default_cache_behavior {
        let mut object_856 = object.key("DefaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_default_cache_behavior(
            &mut object_856,
            var_855,
        );
        object_856.finish();
    }
    if let Some(var_857) = &input.default_root_object {
        object.key("DefaultRootObject").string(var_857);
    }
    if let Some(var_858) = &input.domain_name {
        object.key("DomainName").string(var_858);
    }
    if let Some(var_859) = &input.e_tag {
        object.key("ETag").string(var_859);
    }
    if let Some(var_860) = &input.last_modified_time {
        object.key("LastModifiedTime").string(var_860);
    }
    if let Some(var_861) = &input.logging {
        let mut object_862 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_logging(
            &mut object_862,
            var_861,
        );
        object_862.finish();
    }
    if let Some(var_863) = &input.origins {
        let mut object_864 = object.key("Origins").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origins(
            &mut object_864,
            var_863,
        );
        object_864.finish();
    }
    if let Some(var_865) = &input.origin_groups {
        let mut object_866 = object.key("OriginGroups").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_groups(
            &mut object_866,
            var_865,
        );
        object_866.finish();
    }
    if let Some(var_867) = &input.status {
        object.key("Status").string(var_867);
    }
    if let Some(var_868) = &input.web_acl_id {
        object.key("WebAclId").string(var_868);
    }
}

pub fn serialize_structure_aws_ec2_instance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceDetails,
) {
    if let Some(var_869) = &input.r#type {
        object.key("Type").string(var_869);
    }
    if let Some(var_870) = &input.image_id {
        object.key("ImageId").string(var_870);
    }
    if let Some(var_871) = &input.ip_v4_addresses {
        let mut array_872 = object.key("IpV4Addresses").start_array();
        for item_873 in var_871 {
            {
                array_872.value().string(item_873);
            }
        }
        array_872.finish();
    }
    if let Some(var_874) = &input.ip_v6_addresses {
        let mut array_875 = object.key("IpV6Addresses").start_array();
        for item_876 in var_874 {
            {
                array_875.value().string(item_876);
            }
        }
        array_875.finish();
    }
    if let Some(var_877) = &input.key_name {
        object.key("KeyName").string(var_877);
    }
    if let Some(var_878) = &input.iam_instance_profile_arn {
        object.key("IamInstanceProfileArn").string(var_878);
    }
    if let Some(var_879) = &input.vpc_id {
        object.key("VpcId").string(var_879);
    }
    if let Some(var_880) = &input.subnet_id {
        object.key("SubnetId").string(var_880);
    }
    if let Some(var_881) = &input.launched_at {
        object.key("LaunchedAt").string(var_881);
    }
    if let Some(var_882) = &input.network_interfaces {
        let mut array_883 = object.key("NetworkInterfaces").start_array();
        for item_884 in var_882 {
            {
                let mut object_885 = array_883.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_instance_network_interfaces_details(
                    &mut object_885,
                    item_884,
                );
                object_885.finish();
            }
        }
        array_883.finish();
    }
}

pub fn serialize_structure_aws_ec2_network_interface_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceDetails,
) {
    if let Some(var_886) = &input.attachment {
        let mut object_887 = object.key("Attachment").start_object();
        crate::json_ser::serialize_structure_aws_ec2_network_interface_attachment(
            &mut object_887,
            var_886,
        );
        object_887.finish();
    }
    if let Some(var_888) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_888);
    }
    if let Some(var_889) = &input.security_groups {
        let mut array_890 = object.key("SecurityGroups").start_array();
        for item_891 in var_889 {
            {
                let mut object_892 = array_890.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_security_group(
                    &mut object_892,
                    item_891,
                );
                object_892.finish();
            }
        }
        array_890.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_893) = &input.ip_v6_addresses {
        let mut array_894 = object.key("IpV6Addresses").start_array();
        for item_895 in var_893 {
            {
                let mut object_896 = array_894.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_ip_v6_address_detail(
                    &mut object_896,
                    item_895,
                );
                object_896.finish();
            }
        }
        array_894.finish();
    }
    if let Some(var_897) = &input.private_ip_addresses {
        let mut array_898 = object.key("PrivateIpAddresses").start_array();
        for item_899 in var_897 {
            {
                let mut object_900 = array_898.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_interface_private_ip_address_detail(&mut object_900, item_899);
                object_900.finish();
            }
        }
        array_898.finish();
    }
    if let Some(var_901) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_901);
    }
    if let Some(var_902) = &input.public_ip {
        object.key("PublicIp").string(var_902);
    }
}

pub fn serialize_structure_aws_ec2_security_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupDetails,
) {
    if let Some(var_903) = &input.group_name {
        object.key("GroupName").string(var_903);
    }
    if let Some(var_904) = &input.group_id {
        object.key("GroupId").string(var_904);
    }
    if let Some(var_905) = &input.owner_id {
        object.key("OwnerId").string(var_905);
    }
    if let Some(var_906) = &input.vpc_id {
        object.key("VpcId").string(var_906);
    }
    if let Some(var_907) = &input.ip_permissions {
        let mut array_908 = object.key("IpPermissions").start_array();
        for item_909 in var_907 {
            {
                let mut object_910 = array_908.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_permission(
                    &mut object_910,
                    item_909,
                );
                object_910.finish();
            }
        }
        array_908.finish();
    }
    if let Some(var_911) = &input.ip_permissions_egress {
        let mut array_912 = object.key("IpPermissionsEgress").start_array();
        for item_913 in var_911 {
            {
                let mut object_914 = array_912.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_permission(
                    &mut object_914,
                    item_913,
                );
                object_914.finish();
            }
        }
        array_912.finish();
    }
}

pub fn serialize_structure_aws_ec2_volume_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeDetails,
) {
    if let Some(var_915) = &input.create_time {
        object.key("CreateTime").string(var_915);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_916) = &input.snapshot_id {
        object.key("SnapshotId").string(var_916);
    }
    if let Some(var_917) = &input.status {
        object.key("Status").string(var_917);
    }
    if let Some(var_918) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_918);
    }
    if let Some(var_919) = &input.attachments {
        let mut array_920 = object.key("Attachments").start_array();
        for item_921 in var_919 {
            {
                let mut object_922 = array_920.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_volume_attachment(
                    &mut object_922,
                    item_921,
                );
                object_922.finish();
            }
        }
        array_920.finish();
    }
}

pub fn serialize_structure_aws_ec2_vpc_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcDetails,
) {
    if let Some(var_923) = &input.cidr_block_association_set {
        let mut array_924 = object.key("CidrBlockAssociationSet").start_array();
        for item_925 in var_923 {
            {
                let mut object_926 = array_924.value().start_object();
                crate::json_ser::serialize_structure_cidr_block_association(
                    &mut object_926,
                    item_925,
                );
                object_926.finish();
            }
        }
        array_924.finish();
    }
    if let Some(var_927) = &input.ipv6_cidr_block_association_set {
        let mut array_928 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_929 in var_927 {
            {
                let mut object_930 = array_928.value().start_object();
                crate::json_ser::serialize_structure_ipv6_cidr_block_association(
                    &mut object_930,
                    item_929,
                );
                object_930.finish();
            }
        }
        array_928.finish();
    }
    if let Some(var_931) = &input.dhcp_options_id {
        object.key("DhcpOptionsId").string(var_931);
    }
    if let Some(var_932) = &input.state {
        object.key("State").string(var_932);
    }
}

pub fn serialize_structure_aws_ec2_eip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2EipDetails,
) {
    if let Some(var_933) = &input.instance_id {
        object.key("InstanceId").string(var_933);
    }
    if let Some(var_934) = &input.public_ip {
        object.key("PublicIp").string(var_934);
    }
    if let Some(var_935) = &input.allocation_id {
        object.key("AllocationId").string(var_935);
    }
    if let Some(var_936) = &input.association_id {
        object.key("AssociationId").string(var_936);
    }
    if let Some(var_937) = &input.domain {
        object.key("Domain").string(var_937);
    }
    if let Some(var_938) = &input.public_ipv4_pool {
        object.key("PublicIpv4Pool").string(var_938);
    }
    if let Some(var_939) = &input.network_border_group {
        object.key("NetworkBorderGroup").string(var_939);
    }
    if let Some(var_940) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_940);
    }
    if let Some(var_941) = &input.network_interface_owner_id {
        object.key("NetworkInterfaceOwnerId").string(var_941);
    }
    if let Some(var_942) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_942);
    }
}

pub fn serialize_structure_aws_ec2_subnet_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SubnetDetails,
) {
    if input.assign_ipv6_address_on_creation {
        object
            .key("AssignIpv6AddressOnCreation")
            .boolean(input.assign_ipv6_address_on_creation);
    }
    if let Some(var_943) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_943);
    }
    if let Some(var_944) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_944);
    }
    if input.available_ip_address_count != 0 {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.available_ip_address_count).into()),
        );
    }
    if let Some(var_945) = &input.cidr_block {
        object.key("CidrBlock").string(var_945);
    }
    if input.default_for_az {
        object.key("DefaultForAz").boolean(input.default_for_az);
    }
    if input.map_public_ip_on_launch {
        object
            .key("MapPublicIpOnLaunch")
            .boolean(input.map_public_ip_on_launch);
    }
    if let Some(var_946) = &input.owner_id {
        object.key("OwnerId").string(var_946);
    }
    if let Some(var_947) = &input.state {
        object.key("State").string(var_947);
    }
    if let Some(var_948) = &input.subnet_arn {
        object.key("SubnetArn").string(var_948);
    }
    if let Some(var_949) = &input.subnet_id {
        object.key("SubnetId").string(var_949);
    }
    if let Some(var_950) = &input.vpc_id {
        object.key("VpcId").string(var_950);
    }
    if let Some(var_951) = &input.ipv6_cidr_block_association_set {
        let mut array_952 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_953 in var_951 {
            {
                let mut object_954 = array_952.value().start_object();
                crate::json_ser::serialize_structure_ipv6_cidr_block_association(
                    &mut object_954,
                    item_953,
                );
                object_954.finish();
            }
        }
        array_952.finish();
    }
}

pub fn serialize_structure_aws_ec2_network_acl_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclDetails,
) {
    if input.is_default {
        object.key("IsDefault").boolean(input.is_default);
    }
    if let Some(var_955) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_955);
    }
    if let Some(var_956) = &input.owner_id {
        object.key("OwnerId").string(var_956);
    }
    if let Some(var_957) = &input.vpc_id {
        object.key("VpcId").string(var_957);
    }
    if let Some(var_958) = &input.associations {
        let mut array_959 = object.key("Associations").start_array();
        for item_960 in var_958 {
            {
                let mut object_961 = array_959.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_acl_association(
                    &mut object_961,
                    item_960,
                );
                object_961.finish();
            }
        }
        array_959.finish();
    }
    if let Some(var_962) = &input.entries {
        let mut array_963 = object.key("Entries").start_array();
        for item_964 in var_962 {
            {
                let mut object_965 = array_963.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_network_acl_entry(
                    &mut object_965,
                    item_964,
                );
                object_965.finish();
            }
        }
        array_963.finish();
    }
}

pub fn serialize_structure_aws_elbv2_load_balancer_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerDetails,
) {
    if let Some(var_966) = &input.availability_zones {
        let mut array_967 = object.key("AvailabilityZones").start_array();
        for item_968 in var_966 {
            {
                let mut object_969 = array_967.value().start_object();
                crate::json_ser::serialize_structure_availability_zone(&mut object_969, item_968);
                object_969.finish();
            }
        }
        array_967.finish();
    }
    if let Some(var_970) = &input.canonical_hosted_zone_id {
        object.key("CanonicalHostedZoneId").string(var_970);
    }
    if let Some(var_971) = &input.created_time {
        object.key("CreatedTime").string(var_971);
    }
    if let Some(var_972) = &input.dns_name {
        object.key("DNSName").string(var_972);
    }
    if let Some(var_973) = &input.ip_address_type {
        object.key("IpAddressType").string(var_973);
    }
    if let Some(var_974) = &input.scheme {
        object.key("Scheme").string(var_974);
    }
    if let Some(var_975) = &input.security_groups {
        let mut array_976 = object.key("SecurityGroups").start_array();
        for item_977 in var_975 {
            {
                array_976.value().string(item_977);
            }
        }
        array_976.finish();
    }
    if let Some(var_978) = &input.state {
        let mut object_979 = object.key("State").start_object();
        crate::json_ser::serialize_structure_load_balancer_state(&mut object_979, var_978);
        object_979.finish();
    }
    if let Some(var_980) = &input.r#type {
        object.key("Type").string(var_980);
    }
    if let Some(var_981) = &input.vpc_id {
        object.key("VpcId").string(var_981);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentDetails,
) {
    if let Some(var_982) = &input.application_name {
        object.key("ApplicationName").string(var_982);
    }
    if let Some(var_983) = &input.cname {
        object.key("Cname").string(var_983);
    }
    if let Some(var_984) = &input.date_created {
        object.key("DateCreated").string(var_984);
    }
    if let Some(var_985) = &input.date_updated {
        object.key("DateUpdated").string(var_985);
    }
    if let Some(var_986) = &input.description {
        object.key("Description").string(var_986);
    }
    if let Some(var_987) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_987);
    }
    if let Some(var_988) = &input.environment_arn {
        object.key("EnvironmentArn").string(var_988);
    }
    if let Some(var_989) = &input.environment_id {
        object.key("EnvironmentId").string(var_989);
    }
    if let Some(var_990) = &input.environment_links {
        let mut array_991 = object.key("EnvironmentLinks").start_array();
        for item_992 in var_990 {
            {
                let mut object_993 = array_991.value().start_object();
                crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_environment_link(&mut object_993, item_992);
                object_993.finish();
            }
        }
        array_991.finish();
    }
    if let Some(var_994) = &input.environment_name {
        object.key("EnvironmentName").string(var_994);
    }
    if let Some(var_995) = &input.option_settings {
        let mut array_996 = object.key("OptionSettings").start_array();
        for item_997 in var_995 {
            {
                let mut object_998 = array_996.value().start_object();
                crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_option_setting(&mut object_998, item_997);
                object_998.finish();
            }
        }
        array_996.finish();
    }
    if let Some(var_999) = &input.platform_arn {
        object.key("PlatformArn").string(var_999);
    }
    if let Some(var_1000) = &input.solution_stack_name {
        object.key("SolutionStackName").string(var_1000);
    }
    if let Some(var_1001) = &input.status {
        object.key("Status").string(var_1001);
    }
    if let Some(var_1002) = &input.tier {
        let mut object_1003 = object.key("Tier").start_object();
        crate::json_ser::serialize_structure_aws_elastic_beanstalk_environment_tier(
            &mut object_1003,
            var_1002,
        );
        object_1003.finish();
    }
    if let Some(var_1004) = &input.version_label {
        object.key("VersionLabel").string(var_1004);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDetails,
) {
    if let Some(var_1005) = &input.access_policies {
        object.key("AccessPolicies").string(var_1005);
    }
    if let Some(var_1006) = &input.domain_endpoint_options {
        let mut object_1007 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_domain_endpoint_options(
            &mut object_1007,
            var_1006,
        );
        object_1007.finish();
    }
    if let Some(var_1008) = &input.domain_id {
        object.key("DomainId").string(var_1008);
    }
    if let Some(var_1009) = &input.domain_name {
        object.key("DomainName").string(var_1009);
    }
    if let Some(var_1010) = &input.endpoint {
        object.key("Endpoint").string(var_1010);
    }
    if let Some(var_1011) = &input.endpoints {
        let mut object_1012 = object.key("Endpoints").start_object();
        for (key_1013, value_1014) in var_1011 {
            {
                object_1012.key(key_1013).string(value_1014);
            }
        }
        object_1012.finish();
    }
    if let Some(var_1015) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_1015);
    }
    if let Some(var_1016) = &input.encryption_at_rest_options {
        let mut object_1017 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_encryption_at_rest_options(
            &mut object_1017,
            var_1016,
        );
        object_1017.finish();
    }
    if let Some(var_1018) = &input.log_publishing_options {
        let mut object_1019 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options(
            &mut object_1019,
            var_1018,
        );
        object_1019.finish();
    }
    if let Some(var_1020) = &input.node_to_node_encryption_options {
        let mut object_1021 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_1021, var_1020);
        object_1021.finish();
    }
    if let Some(var_1022) = &input.service_software_options {
        let mut object_1023 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_service_software_options(
            &mut object_1023,
            var_1022,
        );
        object_1023.finish();
    }
    if let Some(var_1024) = &input.vpc_options {
        let mut object_1025 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_vpc_options(
            &mut object_1025,
            var_1024,
        );
        object_1025.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketDetails,
) {
    if let Some(var_1026) = &input.owner_id {
        object.key("OwnerId").string(var_1026);
    }
    if let Some(var_1027) = &input.owner_name {
        object.key("OwnerName").string(var_1027);
    }
    if let Some(var_1028) = &input.created_at {
        object.key("CreatedAt").string(var_1028);
    }
    if let Some(var_1029) = &input.server_side_encryption_configuration {
        let mut object_1030 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_configuration(
            &mut object_1030,
            var_1029,
        );
        object_1030.finish();
    }
    if let Some(var_1031) = &input.bucket_lifecycle_configuration {
        let mut object_1032 = object.key("BucketLifecycleConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_details(
            &mut object_1032,
            var_1031,
        );
        object_1032.finish();
    }
    if let Some(var_1033) = &input.public_access_block_configuration {
        let mut object_1034 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_s3_account_public_access_block_details(
            &mut object_1034,
            var_1033,
        );
        object_1034.finish();
    }
}

pub fn serialize_structure_aws_s3_account_public_access_block_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3AccountPublicAccessBlockDetails,
) {
    if input.block_public_acls {
        object
            .key("BlockPublicAcls")
            .boolean(input.block_public_acls);
    }
    if input.block_public_policy {
        object
            .key("BlockPublicPolicy")
            .boolean(input.block_public_policy);
    }
    if input.ignore_public_acls {
        object
            .key("IgnorePublicAcls")
            .boolean(input.ignore_public_acls);
    }
    if input.restrict_public_buckets {
        object
            .key("RestrictPublicBuckets")
            .boolean(input.restrict_public_buckets);
    }
}

pub fn serialize_structure_aws_s3_object_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3ObjectDetails,
) {
    if let Some(var_1035) = &input.last_modified {
        object.key("LastModified").string(var_1035);
    }
    if let Some(var_1036) = &input.e_tag {
        object.key("ETag").string(var_1036);
    }
    if let Some(var_1037) = &input.version_id {
        object.key("VersionId").string(var_1037);
    }
    if let Some(var_1038) = &input.content_type {
        object.key("ContentType").string(var_1038);
    }
    if let Some(var_1039) = &input.server_side_encryption {
        object.key("ServerSideEncryption").string(var_1039);
    }
    if let Some(var_1040) = &input.ssekms_key_id {
        object.key("SSEKMSKeyId").string(var_1040);
    }
}

pub fn serialize_structure_aws_secrets_manager_secret_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretDetails,
) {
    if let Some(var_1041) = &input.rotation_rules {
        let mut object_1042 = object.key("RotationRules").start_object();
        crate::json_ser::serialize_structure_aws_secrets_manager_secret_rotation_rules(
            &mut object_1042,
            var_1041,
        );
        object_1042.finish();
    }
    if input.rotation_occurred_within_frequency {
        object
            .key("RotationOccurredWithinFrequency")
            .boolean(input.rotation_occurred_within_frequency);
    }
    if let Some(var_1043) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1043);
    }
    if input.rotation_enabled {
        object
            .key("RotationEnabled")
            .boolean(input.rotation_enabled);
    }
    if let Some(var_1044) = &input.rotation_lambda_arn {
        object.key("RotationLambdaArn").string(var_1044);
    }
    if input.deleted {
        object.key("Deleted").boolean(input.deleted);
    }
    if let Some(var_1045) = &input.name {
        object.key("Name").string(var_1045);
    }
    if let Some(var_1046) = &input.description {
        object.key("Description").string(var_1046);
    }
}

pub fn serialize_structure_aws_iam_access_key_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeyDetails,
) {
    if let Some(var_1047) = &input.user_name {
        object.key("UserName").string(var_1047);
    }
    if let Some(var_1048) = &input.status {
        object.key("Status").string(var_1048.as_str());
    }
    if let Some(var_1049) = &input.created_at {
        object.key("CreatedAt").string(var_1049);
    }
    if let Some(var_1050) = &input.principal_id {
        object.key("PrincipalId").string(var_1050);
    }
    if let Some(var_1051) = &input.principal_type {
        object.key("PrincipalType").string(var_1051);
    }
    if let Some(var_1052) = &input.principal_name {
        object.key("PrincipalName").string(var_1052);
    }
    if let Some(var_1053) = &input.account_id {
        object.key("AccountId").string(var_1053);
    }
    if let Some(var_1054) = &input.access_key_id {
        object.key("AccessKeyId").string(var_1054);
    }
    if let Some(var_1055) = &input.session_context {
        let mut object_1056 = object.key("SessionContext").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context(
            &mut object_1056,
            var_1055,
        );
        object_1056.finish();
    }
}

pub fn serialize_structure_aws_iam_user_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserDetails,
) {
    if let Some(var_1057) = &input.attached_managed_policies {
        let mut array_1058 = object.key("AttachedManagedPolicies").start_array();
        for item_1059 in var_1057 {
            {
                let mut object_1060 = array_1058.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1060,
                    item_1059,
                );
                object_1060.finish();
            }
        }
        array_1058.finish();
    }
    if let Some(var_1061) = &input.create_date {
        object.key("CreateDate").string(var_1061);
    }
    if let Some(var_1062) = &input.group_list {
        let mut array_1063 = object.key("GroupList").start_array();
        for item_1064 in var_1062 {
            {
                array_1063.value().string(item_1064);
            }
        }
        array_1063.finish();
    }
    if let Some(var_1065) = &input.path {
        object.key("Path").string(var_1065);
    }
    if let Some(var_1066) = &input.permissions_boundary {
        let mut object_1067 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_aws_iam_permissions_boundary(
            &mut object_1067,
            var_1066,
        );
        object_1067.finish();
    }
    if let Some(var_1068) = &input.user_id {
        object.key("UserId").string(var_1068);
    }
    if let Some(var_1069) = &input.user_name {
        object.key("UserName").string(var_1069);
    }
    if let Some(var_1070) = &input.user_policy_list {
        let mut array_1071 = object.key("UserPolicyList").start_array();
        for item_1072 in var_1070 {
            {
                let mut object_1073 = array_1071.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_user_policy(
                    &mut object_1073,
                    item_1072,
                );
                object_1073.finish();
            }
        }
        array_1071.finish();
    }
}

pub fn serialize_structure_aws_iam_policy_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyDetails,
) {
    if input.attachment_count != 0 {
        object.key("AttachmentCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.attachment_count).into()),
        );
    }
    if let Some(var_1074) = &input.create_date {
        object.key("CreateDate").string(var_1074);
    }
    if let Some(var_1075) = &input.default_version_id {
        object.key("DefaultVersionId").string(var_1075);
    }
    if let Some(var_1076) = &input.description {
        object.key("Description").string(var_1076);
    }
    if input.is_attachable {
        object.key("IsAttachable").boolean(input.is_attachable);
    }
    if let Some(var_1077) = &input.path {
        object.key("Path").string(var_1077);
    }
    if input.permissions_boundary_usage_count != 0 {
        object.key("PermissionsBoundaryUsageCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.permissions_boundary_usage_count).into()),
        );
    }
    if let Some(var_1078) = &input.policy_id {
        object.key("PolicyId").string(var_1078);
    }
    if let Some(var_1079) = &input.policy_name {
        object.key("PolicyName").string(var_1079);
    }
    if let Some(var_1080) = &input.policy_version_list {
        let mut array_1081 = object.key("PolicyVersionList").start_array();
        for item_1082 in var_1080 {
            {
                let mut object_1083 = array_1081.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_policy_version(
                    &mut object_1083,
                    item_1082,
                );
                object_1083.finish();
            }
        }
        array_1081.finish();
    }
    if let Some(var_1084) = &input.update_date {
        object.key("UpdateDate").string(var_1084);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_stage_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2StageDetails,
) {
    if let Some(var_1085) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1085);
    }
    if let Some(var_1086) = &input.created_date {
        object.key("CreatedDate").string(var_1086);
    }
    if let Some(var_1087) = &input.description {
        object.key("Description").string(var_1087);
    }
    if let Some(var_1088) = &input.default_route_settings {
        let mut object_1089 = object.key("DefaultRouteSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_route_settings(
            &mut object_1089,
            var_1088,
        );
        object_1089.finish();
    }
    if let Some(var_1090) = &input.deployment_id {
        object.key("DeploymentId").string(var_1090);
    }
    if let Some(var_1091) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1091);
    }
    if let Some(var_1092) = &input.route_settings {
        let mut object_1093 = object.key("RouteSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_v2_route_settings(
            &mut object_1093,
            var_1092,
        );
        object_1093.finish();
    }
    if let Some(var_1094) = &input.stage_name {
        object.key("StageName").string(var_1094);
    }
    if let Some(var_1095) = &input.stage_variables {
        let mut object_1096 = object.key("StageVariables").start_object();
        for (key_1097, value_1098) in var_1095 {
            {
                object_1096.key(key_1097).string(value_1098);
            }
        }
        object_1096.finish();
    }
    if let Some(var_1099) = &input.access_log_settings {
        let mut object_1100 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_access_log_settings(
            &mut object_1100,
            var_1099,
        );
        object_1100.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_1101) = &input.last_deployment_status_message {
        object.key("LastDeploymentStatusMessage").string(var_1101);
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_api_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2ApiDetails,
) {
    if let Some(var_1102) = &input.api_endpoint {
        object.key("ApiEndpoint").string(var_1102);
    }
    if let Some(var_1103) = &input.api_id {
        object.key("ApiId").string(var_1103);
    }
    if let Some(var_1104) = &input.api_key_selection_expression {
        object.key("ApiKeySelectionExpression").string(var_1104);
    }
    if let Some(var_1105) = &input.created_date {
        object.key("CreatedDate").string(var_1105);
    }
    if let Some(var_1106) = &input.description {
        object.key("Description").string(var_1106);
    }
    if let Some(var_1107) = &input.version {
        object.key("Version").string(var_1107);
    }
    if let Some(var_1108) = &input.name {
        object.key("Name").string(var_1108);
    }
    if let Some(var_1109) = &input.protocol_type {
        object.key("ProtocolType").string(var_1109);
    }
    if let Some(var_1110) = &input.route_selection_expression {
        object.key("RouteSelectionExpression").string(var_1110);
    }
    if let Some(var_1111) = &input.cors_configuration {
        let mut object_1112 = object.key("CorsConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_cors_configuration(&mut object_1112, var_1111);
        object_1112.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableDetails,
) {
    if let Some(var_1113) = &input.attribute_definitions {
        let mut array_1114 = object.key("AttributeDefinitions").start_array();
        for item_1115 in var_1113 {
            {
                let mut object_1116 = array_1114.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_attribute_definition(
                    &mut object_1116,
                    item_1115,
                );
                object_1116.finish();
            }
        }
        array_1114.finish();
    }
    if let Some(var_1117) = &input.billing_mode_summary {
        let mut object_1118 = object.key("BillingModeSummary").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_billing_mode_summary(
            &mut object_1118,
            var_1117,
        );
        object_1118.finish();
    }
    if let Some(var_1119) = &input.creation_date_time {
        object.key("CreationDateTime").string(var_1119);
    }
    if let Some(var_1120) = &input.global_secondary_indexes {
        let mut array_1121 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1122 in var_1120 {
            {
                let mut object_1123 = array_1121.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_global_secondary_index(
                    &mut object_1123,
                    item_1122,
                );
                object_1123.finish();
            }
        }
        array_1121.finish();
    }
    if let Some(var_1124) = &input.global_table_version {
        object.key("GlobalTableVersion").string(var_1124);
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1125) = &input.key_schema {
        let mut array_1126 = object.key("KeySchema").start_array();
        for item_1127 in var_1125 {
            {
                let mut object_1128 = array_1126.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1128,
                    item_1127,
                );
                object_1128.finish();
            }
        }
        array_1126.finish();
    }
    if let Some(var_1129) = &input.latest_stream_arn {
        object.key("LatestStreamArn").string(var_1129);
    }
    if let Some(var_1130) = &input.latest_stream_label {
        object.key("LatestStreamLabel").string(var_1130);
    }
    if let Some(var_1131) = &input.local_secondary_indexes {
        let mut array_1132 = object.key("LocalSecondaryIndexes").start_array();
        for item_1133 in var_1131 {
            {
                let mut object_1134 = array_1132.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_local_secondary_index(
                    &mut object_1134,
                    item_1133,
                );
                object_1134.finish();
            }
        }
        array_1132.finish();
    }
    if let Some(var_1135) = &input.provisioned_throughput {
        let mut object_1136 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput(
            &mut object_1136,
            var_1135,
        );
        object_1136.finish();
    }
    if let Some(var_1137) = &input.replicas {
        let mut array_1138 = object.key("Replicas").start_array();
        for item_1139 in var_1137 {
            {
                let mut object_1140 = array_1138.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_replica(
                    &mut object_1140,
                    item_1139,
                );
                object_1140.finish();
            }
        }
        array_1138.finish();
    }
    if let Some(var_1141) = &input.restore_summary {
        let mut object_1142 = object.key("RestoreSummary").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_restore_summary(
            &mut object_1142,
            var_1141,
        );
        object_1142.finish();
    }
    if let Some(var_1143) = &input.sse_description {
        let mut object_1144 = object.key("SseDescription").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_sse_description(
            &mut object_1144,
            var_1143,
        );
        object_1144.finish();
    }
    if let Some(var_1145) = &input.stream_specification {
        let mut object_1146 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_stream_specification(
            &mut object_1146,
            var_1145,
        );
        object_1146.finish();
    }
    if let Some(var_1147) = &input.table_id {
        object.key("TableId").string(var_1147);
    }
    if let Some(var_1148) = &input.table_name {
        object.key("TableName").string(var_1148);
    }
    if input.table_size_bytes != 0 {
        object.key("TableSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.table_size_bytes).into()),
        );
    }
    if let Some(var_1149) = &input.table_status {
        object.key("TableStatus").string(var_1149);
    }
}

pub fn serialize_structure_aws_api_gateway_stage_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayStageDetails,
) {
    if let Some(var_1150) = &input.deployment_id {
        object.key("DeploymentId").string(var_1150);
    }
    if let Some(var_1151) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1151);
    }
    if let Some(var_1152) = &input.stage_name {
        object.key("StageName").string(var_1152);
    }
    if let Some(var_1153) = &input.description {
        object.key("Description").string(var_1153);
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1154) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_1154);
    }
    if let Some(var_1155) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_1155);
    }
    if let Some(var_1156) = &input.method_settings {
        let mut array_1157 = object.key("MethodSettings").start_array();
        for item_1158 in var_1156 {
            {
                let mut object_1159 = array_1157.value().start_object();
                crate::json_ser::serialize_structure_aws_api_gateway_method_settings(
                    &mut object_1159,
                    item_1158,
                );
                object_1159.finish();
            }
        }
        array_1157.finish();
    }
    if let Some(var_1160) = &input.variables {
        let mut object_1161 = object.key("Variables").start_object();
        for (key_1162, value_1163) in var_1160 {
            {
                object_1161.key(key_1162).string(value_1163);
            }
        }
        object_1161.finish();
    }
    if let Some(var_1164) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_1164);
    }
    if let Some(var_1165) = &input.access_log_settings {
        let mut object_1166 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_access_log_settings(
            &mut object_1166,
            var_1165,
        );
        object_1166.finish();
    }
    if let Some(var_1167) = &input.canary_settings {
        let mut object_1168 = object.key("CanarySettings").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_canary_settings(
            &mut object_1168,
            var_1167,
        );
        object_1168.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_1169) = &input.created_date {
        object.key("CreatedDate").string(var_1169);
    }
    if let Some(var_1170) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1170);
    }
    if let Some(var_1171) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_1171);
    }
}

pub fn serialize_structure_aws_api_gateway_rest_api_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayRestApiDetails,
) {
    if let Some(var_1172) = &input.id {
        object.key("Id").string(var_1172);
    }
    if let Some(var_1173) = &input.name {
        object.key("Name").string(var_1173);
    }
    if let Some(var_1174) = &input.description {
        object.key("Description").string(var_1174);
    }
    if let Some(var_1175) = &input.created_date {
        object.key("CreatedDate").string(var_1175);
    }
    if let Some(var_1176) = &input.version {
        object.key("Version").string(var_1176);
    }
    if let Some(var_1177) = &input.binary_media_types {
        let mut array_1178 = object.key("BinaryMediaTypes").start_array();
        for item_1179 in var_1177 {
            {
                array_1178.value().string(item_1179);
            }
        }
        array_1178.finish();
    }
    if input.minimum_compression_size != 0 {
        object.key("MinimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minimum_compression_size).into()),
        );
    }
    if let Some(var_1180) = &input.api_key_source {
        object.key("ApiKeySource").string(var_1180);
    }
    if let Some(var_1181) = &input.endpoint_configuration {
        let mut object_1182 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_api_gateway_endpoint_configuration(
            &mut object_1182,
            var_1181,
        );
        object_1182.finish();
    }
}

pub fn serialize_structure_aws_cloud_trail_trail_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudTrailTrailDetails,
) {
    if let Some(var_1183) = &input.cloud_watch_logs_log_group_arn {
        object.key("CloudWatchLogsLogGroupArn").string(var_1183);
    }
    if let Some(var_1184) = &input.cloud_watch_logs_role_arn {
        object.key("CloudWatchLogsRoleArn").string(var_1184);
    }
    if input.has_custom_event_selectors {
        object
            .key("HasCustomEventSelectors")
            .boolean(input.has_custom_event_selectors);
    }
    if let Some(var_1185) = &input.home_region {
        object.key("HomeRegion").string(var_1185);
    }
    if input.include_global_service_events {
        object
            .key("IncludeGlobalServiceEvents")
            .boolean(input.include_global_service_events);
    }
    if input.is_multi_region_trail {
        object
            .key("IsMultiRegionTrail")
            .boolean(input.is_multi_region_trail);
    }
    if input.is_organization_trail {
        object
            .key("IsOrganizationTrail")
            .boolean(input.is_organization_trail);
    }
    if let Some(var_1186) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1186);
    }
    if input.log_file_validation_enabled {
        object
            .key("LogFileValidationEnabled")
            .boolean(input.log_file_validation_enabled);
    }
    if let Some(var_1187) = &input.name {
        object.key("Name").string(var_1187);
    }
    if let Some(var_1188) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1188);
    }
    if let Some(var_1189) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1189);
    }
    if let Some(var_1190) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1190);
    }
    if let Some(var_1191) = &input.sns_topic_name {
        object.key("SnsTopicName").string(var_1191);
    }
    if let Some(var_1192) = &input.trail_arn {
        object.key("TrailArn").string(var_1192);
    }
}

pub fn serialize_structure_aws_ssm_patch_compliance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatchComplianceDetails,
) {
    if let Some(var_1193) = &input.patch {
        let mut object_1194 = object.key("Patch").start_object();
        crate::json_ser::serialize_structure_aws_ssm_patch(&mut object_1194, var_1193);
        object_1194.finish();
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDetails,
) {
    if let Some(var_1195) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_1195);
    }
    if let Some(var_1196) = &input.created_at {
        object.key("CreatedAt").string(var_1196);
    }
    if let Some(var_1197) = &input.domain_name {
        object.key("DomainName").string(var_1197);
    }
    if let Some(var_1198) = &input.domain_validation_options {
        let mut array_1199 = object.key("DomainValidationOptions").start_array();
        for item_1200 in var_1198 {
            {
                let mut object_1201 = array_1199.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_domain_validation_option(&mut object_1201, item_1200);
                object_1201.finish();
            }
        }
        array_1199.finish();
    }
    if let Some(var_1202) = &input.extended_key_usages {
        let mut array_1203 = object.key("ExtendedKeyUsages").start_array();
        for item_1204 in var_1202 {
            {
                let mut object_1205 = array_1203.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_extended_key_usage(&mut object_1205, item_1204);
                object_1205.finish();
            }
        }
        array_1203.finish();
    }
    if let Some(var_1206) = &input.failure_reason {
        object.key("FailureReason").string(var_1206);
    }
    if let Some(var_1207) = &input.imported_at {
        object.key("ImportedAt").string(var_1207);
    }
    if let Some(var_1208) = &input.in_use_by {
        let mut array_1209 = object.key("InUseBy").start_array();
        for item_1210 in var_1208 {
            {
                array_1209.value().string(item_1210);
            }
        }
        array_1209.finish();
    }
    if let Some(var_1211) = &input.issued_at {
        object.key("IssuedAt").string(var_1211);
    }
    if let Some(var_1212) = &input.issuer {
        object.key("Issuer").string(var_1212);
    }
    if let Some(var_1213) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_1213);
    }
    if let Some(var_1214) = &input.key_usages {
        let mut array_1215 = object.key("KeyUsages").start_array();
        for item_1216 in var_1214 {
            {
                let mut object_1217 = array_1215.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_key_usage(
                    &mut object_1217,
                    item_1216,
                );
                object_1217.finish();
            }
        }
        array_1215.finish();
    }
    if let Some(var_1218) = &input.not_after {
        object.key("NotAfter").string(var_1218);
    }
    if let Some(var_1219) = &input.not_before {
        object.key("NotBefore").string(var_1219);
    }
    if let Some(var_1220) = &input.options {
        let mut object_1221 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_options(
            &mut object_1221,
            var_1220,
        );
        object_1221.finish();
    }
    if let Some(var_1222) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_1222);
    }
    if let Some(var_1223) = &input.renewal_summary {
        let mut object_1224 = object.key("RenewalSummary").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_renewal_summary(
            &mut object_1224,
            var_1223,
        );
        object_1224.finish();
    }
    if let Some(var_1225) = &input.serial {
        object.key("Serial").string(var_1225);
    }
    if let Some(var_1226) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_1226);
    }
    if let Some(var_1227) = &input.status {
        object.key("Status").string(var_1227);
    }
    if let Some(var_1228) = &input.subject {
        object.key("Subject").string(var_1228);
    }
    if let Some(var_1229) = &input.subject_alternative_names {
        let mut array_1230 = object.key("SubjectAlternativeNames").start_array();
        for item_1231 in var_1229 {
            {
                array_1230.value().string(item_1231);
            }
        }
        array_1230.finish();
    }
    if let Some(var_1232) = &input.r#type {
        object.key("Type").string(var_1232);
    }
}

pub fn serialize_structure_aws_redshift_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDetails,
) {
    if input.allow_version_upgrade {
        object
            .key("AllowVersionUpgrade")
            .boolean(input.allow_version_upgrade);
    }
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1233) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1233);
    }
    if let Some(var_1234) = &input.cluster_availability_status {
        object.key("ClusterAvailabilityStatus").string(var_1234);
    }
    if let Some(var_1235) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1235);
    }
    if let Some(var_1236) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1236);
    }
    if let Some(var_1237) = &input.cluster_nodes {
        let mut array_1238 = object.key("ClusterNodes").start_array();
        for item_1239 in var_1237 {
            {
                let mut object_1240 = array_1238.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_node(
                    &mut object_1240,
                    item_1239,
                );
                object_1240.finish();
            }
        }
        array_1238.finish();
    }
    if let Some(var_1241) = &input.cluster_parameter_groups {
        let mut array_1242 = object.key("ClusterParameterGroups").start_array();
        for item_1243 in var_1241 {
            {
                let mut object_1244 = array_1242.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_parameter_group(
                    &mut object_1244,
                    item_1243,
                );
                object_1244.finish();
            }
        }
        array_1242.finish();
    }
    if let Some(var_1245) = &input.cluster_public_key {
        object.key("ClusterPublicKey").string(var_1245);
    }
    if let Some(var_1246) = &input.cluster_revision_number {
        object.key("ClusterRevisionNumber").string(var_1246);
    }
    if let Some(var_1247) = &input.cluster_security_groups {
        let mut array_1248 = object.key("ClusterSecurityGroups").start_array();
        for item_1249 in var_1247 {
            {
                let mut object_1250 = array_1248.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_security_group(
                    &mut object_1250,
                    item_1249,
                );
                object_1250.finish();
            }
        }
        array_1248.finish();
    }
    if let Some(var_1251) = &input.cluster_snapshot_copy_status {
        let mut object_1252 = object.key("ClusterSnapshotCopyStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_snapshot_copy_status(
            &mut object_1252,
            var_1251,
        );
        object_1252.finish();
    }
    if let Some(var_1253) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1253);
    }
    if let Some(var_1254) = &input.cluster_subnet_group_name {
        object.key("ClusterSubnetGroupName").string(var_1254);
    }
    if let Some(var_1255) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1255);
    }
    if let Some(var_1256) = &input.db_name {
        object.key("DBName").string(var_1256);
    }
    if let Some(var_1257) = &input.deferred_maintenance_windows {
        let mut array_1258 = object.key("DeferredMaintenanceWindows").start_array();
        for item_1259 in var_1257 {
            {
                let mut object_1260 = array_1258.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_deferred_maintenance_window(&mut object_1260, item_1259);
                object_1260.finish();
            }
        }
        array_1258.finish();
    }
    if let Some(var_1261) = &input.elastic_ip_status {
        let mut object_1262 = object.key("ElasticIpStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_elastic_ip_status(
            &mut object_1262,
            var_1261,
        );
        object_1262.finish();
    }
    if let Some(var_1263) = &input.elastic_resize_number_of_node_options {
        object
            .key("ElasticResizeNumberOfNodeOptions")
            .string(var_1263);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1264) = &input.endpoint {
        let mut object_1265 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_endpoint(
            &mut object_1265,
            var_1264,
        );
        object_1265.finish();
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1266) = &input.expected_next_snapshot_schedule_time {
        object
            .key("ExpectedNextSnapshotScheduleTime")
            .string(var_1266);
    }
    if let Some(var_1267) = &input.expected_next_snapshot_schedule_time_status {
        object
            .key("ExpectedNextSnapshotScheduleTimeStatus")
            .string(var_1267);
    }
    if let Some(var_1268) = &input.hsm_status {
        let mut object_1269 = object.key("HsmStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_hsm_status(
            &mut object_1269,
            var_1268,
        );
        object_1269.finish();
    }
    if let Some(var_1270) = &input.iam_roles {
        let mut array_1271 = object.key("IamRoles").start_array();
        for item_1272 in var_1270 {
            {
                let mut object_1273 = array_1271.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_iam_role(
                    &mut object_1273,
                    item_1272,
                );
                object_1273.finish();
            }
        }
        array_1271.finish();
    }
    if let Some(var_1274) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1274);
    }
    if let Some(var_1275) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1275);
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1276) = &input.master_username {
        object.key("MasterUsername").string(var_1276);
    }
    if let Some(var_1277) = &input.next_maintenance_window_start_time {
        object
            .key("NextMaintenanceWindowStartTime")
            .string(var_1277);
    }
    if let Some(var_1278) = &input.node_type {
        object.key("NodeType").string(var_1278);
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_1279) = &input.pending_actions {
        let mut array_1280 = object.key("PendingActions").start_array();
        for item_1281 in var_1279 {
            {
                array_1280.value().string(item_1281);
            }
        }
        array_1280.finish();
    }
    if let Some(var_1282) = &input.pending_modified_values {
        let mut object_1283 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_pending_modified_values(
            &mut object_1283,
            var_1282,
        );
        object_1283.finish();
    }
    if let Some(var_1284) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1284);
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_1285) = &input.resize_info {
        let mut object_1286 = object.key("ResizeInfo").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_resize_info(
            &mut object_1286,
            var_1285,
        );
        object_1286.finish();
    }
    if let Some(var_1287) = &input.restore_status {
        let mut object_1288 = object.key("RestoreStatus").start_object();
        crate::json_ser::serialize_structure_aws_redshift_cluster_restore_status(
            &mut object_1288,
            var_1287,
        );
        object_1288.finish();
    }
    if let Some(var_1289) = &input.snapshot_schedule_identifier {
        object.key("SnapshotScheduleIdentifier").string(var_1289);
    }
    if let Some(var_1290) = &input.snapshot_schedule_state {
        object.key("SnapshotScheduleState").string(var_1290);
    }
    if let Some(var_1291) = &input.vpc_id {
        object.key("VpcId").string(var_1291);
    }
    if let Some(var_1292) = &input.vpc_security_groups {
        let mut array_1293 = object.key("VpcSecurityGroups").start_array();
        for item_1294 in var_1292 {
            {
                let mut object_1295 = array_1293.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_vpc_security_group(
                    &mut object_1295,
                    item_1294,
                );
                object_1295.finish();
            }
        }
        array_1293.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerDetails,
) {
    if let Some(var_1296) = &input.availability_zones {
        let mut array_1297 = object.key("AvailabilityZones").start_array();
        for item_1298 in var_1296 {
            {
                array_1297.value().string(item_1298);
            }
        }
        array_1297.finish();
    }
    if let Some(var_1299) = &input.backend_server_descriptions {
        let mut array_1300 = object.key("BackendServerDescriptions").start_array();
        for item_1301 in var_1299 {
            {
                let mut object_1302 = array_1300.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_backend_server_description(&mut object_1302, item_1301);
                object_1302.finish();
            }
        }
        array_1300.finish();
    }
    if let Some(var_1303) = &input.canonical_hosted_zone_name {
        object.key("CanonicalHostedZoneName").string(var_1303);
    }
    if let Some(var_1304) = &input.canonical_hosted_zone_name_id {
        object.key("CanonicalHostedZoneNameID").string(var_1304);
    }
    if let Some(var_1305) = &input.created_time {
        object.key("CreatedTime").string(var_1305);
    }
    if let Some(var_1306) = &input.dns_name {
        object.key("DnsName").string(var_1306);
    }
    if let Some(var_1307) = &input.health_check {
        let mut object_1308 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_health_check(
            &mut object_1308,
            var_1307,
        );
        object_1308.finish();
    }
    if let Some(var_1309) = &input.instances {
        let mut array_1310 = object.key("Instances").start_array();
        for item_1311 in var_1309 {
            {
                let mut object_1312 = array_1310.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_instance(
                    &mut object_1312,
                    item_1311,
                );
                object_1312.finish();
            }
        }
        array_1310.finish();
    }
    if let Some(var_1313) = &input.listener_descriptions {
        let mut array_1314 = object.key("ListenerDescriptions").start_array();
        for item_1315 in var_1313 {
            {
                let mut object_1316 = array_1314.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_load_balancer_listener_description(
                    &mut object_1316,
                    item_1315,
                );
                object_1316.finish();
            }
        }
        array_1314.finish();
    }
    if let Some(var_1317) = &input.load_balancer_attributes {
        let mut object_1318 = object.key("LoadBalancerAttributes").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_attributes(
            &mut object_1318,
            var_1317,
        );
        object_1318.finish();
    }
    if let Some(var_1319) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_1319);
    }
    if let Some(var_1320) = &input.policies {
        let mut object_1321 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_policies(
            &mut object_1321,
            var_1320,
        );
        object_1321.finish();
    }
    if let Some(var_1322) = &input.scheme {
        object.key("Scheme").string(var_1322);
    }
    if let Some(var_1323) = &input.security_groups {
        let mut array_1324 = object.key("SecurityGroups").start_array();
        for item_1325 in var_1323 {
            {
                array_1324.value().string(item_1325);
            }
        }
        array_1324.finish();
    }
    if let Some(var_1326) = &input.source_security_group {
        let mut object_1327 = object.key("SourceSecurityGroup").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_source_security_group(
            &mut object_1327,
            var_1326,
        );
        object_1327.finish();
    }
    if let Some(var_1328) = &input.subnets {
        let mut array_1329 = object.key("Subnets").start_array();
        for item_1330 in var_1328 {
            {
                array_1329.value().string(item_1330);
            }
        }
        array_1329.finish();
    }
    if let Some(var_1331) = &input.vpc_id {
        object.key("VpcId").string(var_1331);
    }
}

pub fn serialize_structure_aws_iam_group_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupDetails,
) {
    if let Some(var_1332) = &input.attached_managed_policies {
        let mut array_1333 = object.key("AttachedManagedPolicies").start_array();
        for item_1334 in var_1332 {
            {
                let mut object_1335 = array_1333.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1335,
                    item_1334,
                );
                object_1335.finish();
            }
        }
        array_1333.finish();
    }
    if let Some(var_1336) = &input.create_date {
        object.key("CreateDate").string(var_1336);
    }
    if let Some(var_1337) = &input.group_id {
        object.key("GroupId").string(var_1337);
    }
    if let Some(var_1338) = &input.group_name {
        object.key("GroupName").string(var_1338);
    }
    if let Some(var_1339) = &input.group_policy_list {
        let mut array_1340 = object.key("GroupPolicyList").start_array();
        for item_1341 in var_1339 {
            {
                let mut object_1342 = array_1340.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_group_policy(
                    &mut object_1342,
                    item_1341,
                );
                object_1342.finish();
            }
        }
        array_1340.finish();
    }
    if let Some(var_1343) = &input.path {
        object.key("Path").string(var_1343);
    }
}

pub fn serialize_structure_aws_iam_role_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRoleDetails,
) {
    if let Some(var_1344) = &input.assume_role_policy_document {
        object.key("AssumeRolePolicyDocument").string(var_1344);
    }
    if let Some(var_1345) = &input.attached_managed_policies {
        let mut array_1346 = object.key("AttachedManagedPolicies").start_array();
        for item_1347 in var_1345 {
            {
                let mut object_1348 = array_1346.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_attached_managed_policy(
                    &mut object_1348,
                    item_1347,
                );
                object_1348.finish();
            }
        }
        array_1346.finish();
    }
    if let Some(var_1349) = &input.create_date {
        object.key("CreateDate").string(var_1349);
    }
    if let Some(var_1350) = &input.instance_profile_list {
        let mut array_1351 = object.key("InstanceProfileList").start_array();
        for item_1352 in var_1350 {
            {
                let mut object_1353 = array_1351.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_instance_profile(
                    &mut object_1353,
                    item_1352,
                );
                object_1353.finish();
            }
        }
        array_1351.finish();
    }
    if let Some(var_1354) = &input.permissions_boundary {
        let mut object_1355 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_aws_iam_permissions_boundary(
            &mut object_1355,
            var_1354,
        );
        object_1355.finish();
    }
    if let Some(var_1356) = &input.role_id {
        object.key("RoleId").string(var_1356);
    }
    if let Some(var_1357) = &input.role_name {
        object.key("RoleName").string(var_1357);
    }
    if let Some(var_1358) = &input.role_policy_list {
        let mut array_1359 = object.key("RolePolicyList").start_array();
        for item_1360 in var_1358 {
            {
                let mut object_1361 = array_1359.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_role_policy(
                    &mut object_1361,
                    item_1360,
                );
                object_1361.finish();
            }
        }
        array_1359.finish();
    }
    if input.max_session_duration != 0 {
        object.key("MaxSessionDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_session_duration).into()),
        );
    }
    if let Some(var_1362) = &input.path {
        object.key("Path").string(var_1362);
    }
}

pub fn serialize_structure_aws_kms_key_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKmsKeyDetails,
) {
    if let Some(var_1363) = &input.aws_account_id {
        object.key("AWSAccountId").string(var_1363);
    }
    if input.creation_date != 0.0 {
        object.key("CreationDate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.creation_date).into()),
        );
    }
    if let Some(var_1364) = &input.key_id {
        object.key("KeyId").string(var_1364);
    }
    if let Some(var_1365) = &input.key_manager {
        object.key("KeyManager").string(var_1365);
    }
    if let Some(var_1366) = &input.key_state {
        object.key("KeyState").string(var_1366);
    }
    if let Some(var_1367) = &input.origin {
        object.key("Origin").string(var_1367);
    }
    if let Some(var_1368) = &input.description {
        object.key("Description").string(var_1368);
    }
}

pub fn serialize_structure_aws_lambda_function_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDetails,
) {
    if let Some(var_1369) = &input.code {
        let mut object_1370 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_code(&mut object_1370, var_1369);
        object_1370.finish();
    }
    if let Some(var_1371) = &input.code_sha256 {
        object.key("CodeSha256").string(var_1371);
    }
    if let Some(var_1372) = &input.dead_letter_config {
        let mut object_1373 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_dead_letter_config(
            &mut object_1373,
            var_1372,
        );
        object_1373.finish();
    }
    if let Some(var_1374) = &input.environment {
        let mut object_1375 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_environment(
            &mut object_1375,
            var_1374,
        );
        object_1375.finish();
    }
    if let Some(var_1376) = &input.function_name {
        object.key("FunctionName").string(var_1376);
    }
    if let Some(var_1377) = &input.handler {
        object.key("Handler").string(var_1377);
    }
    if let Some(var_1378) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1378);
    }
    if let Some(var_1379) = &input.last_modified {
        object.key("LastModified").string(var_1379);
    }
    if let Some(var_1380) = &input.layers {
        let mut array_1381 = object.key("Layers").start_array();
        for item_1382 in var_1380 {
            {
                let mut object_1383 = array_1381.value().start_object();
                crate::json_ser::serialize_structure_aws_lambda_function_layer(
                    &mut object_1383,
                    item_1382,
                );
                object_1383.finish();
            }
        }
        array_1381.finish();
    }
    if let Some(var_1384) = &input.master_arn {
        object.key("MasterArn").string(var_1384);
    }
    if input.memory_size != 0 {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory_size).into()),
        );
    }
    if let Some(var_1385) = &input.revision_id {
        object.key("RevisionId").string(var_1385);
    }
    if let Some(var_1386) = &input.role {
        object.key("Role").string(var_1386);
    }
    if let Some(var_1387) = &input.runtime {
        object.key("Runtime").string(var_1387);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_1388) = &input.tracing_config {
        let mut object_1389 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_tracing_config(
            &mut object_1389,
            var_1388,
        );
        object_1389.finish();
    }
    if let Some(var_1390) = &input.vpc_config {
        let mut object_1391 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_vpc_config(
            &mut object_1391,
            var_1390,
        );
        object_1391.finish();
    }
    if let Some(var_1392) = &input.version {
        object.key("Version").string(var_1392);
    }
}

pub fn serialize_structure_aws_lambda_layer_version_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaLayerVersionDetails,
) {
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.version).into()),
        );
    }
    if let Some(var_1393) = &input.compatible_runtimes {
        let mut array_1394 = object.key("CompatibleRuntimes").start_array();
        for item_1395 in var_1393 {
            {
                array_1394.value().string(item_1395);
            }
        }
        array_1394.finish();
    }
    if let Some(var_1396) = &input.created_date {
        object.key("CreatedDate").string(var_1396);
    }
}

pub fn serialize_structure_aws_rds_db_instance_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceDetails,
) {
    if let Some(var_1397) = &input.associated_roles {
        let mut array_1398 = object.key("AssociatedRoles").start_array();
        for item_1399 in var_1397 {
            {
                let mut object_1400 = array_1398.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_associated_role(
                    &mut object_1400,
                    item_1399,
                );
                object_1400.finish();
            }
        }
        array_1398.finish();
    }
    if let Some(var_1401) = &input.ca_certificate_identifier {
        object.key("CACertificateIdentifier").string(var_1401);
    }
    if let Some(var_1402) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_1402);
    }
    if let Some(var_1403) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_1403);
    }
    if let Some(var_1404) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_1404);
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_1405) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1405);
    }
    if let Some(var_1406) = &input.db_name {
        object.key("DBName").string(var_1406);
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_1407) = &input.endpoint {
        let mut object_1408 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_endpoint(
            &mut object_1408,
            var_1407,
        );
        object_1408.finish();
    }
    if let Some(var_1409) = &input.engine {
        object.key("Engine").string(var_1409);
    }
    if let Some(var_1410) = &input.engine_version {
        object.key("EngineVersion").string(var_1410);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1411) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1411);
    }
    if let Some(var_1412) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1412);
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1413) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1413);
    }
    if let Some(var_1414) = &input.vpc_security_groups {
        let mut array_1415 = object.key("VpcSecurityGroups").start_array();
        for item_1416 in var_1414 {
            {
                let mut object_1417 = array_1415.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_vpc_security_group(
                    &mut object_1417,
                    item_1416,
                );
                object_1417.finish();
            }
        }
        array_1415.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1418) = &input.enhanced_monitoring_resource_arn {
        object.key("EnhancedMonitoringResourceArn").string(var_1418);
    }
    if let Some(var_1419) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_1419);
    }
    if let Some(var_1420) = &input.master_username {
        object.key("MasterUsername").string(var_1420);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1421) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_1421);
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1422) = &input.db_security_groups {
        let mut array_1423 = object.key("DbSecurityGroups").start_array();
        for item_1424 in var_1422 {
            {
                array_1423.value().string(item_1424);
            }
        }
        array_1423.finish();
    }
    if let Some(var_1425) = &input.db_parameter_groups {
        let mut array_1426 = object.key("DbParameterGroups").start_array();
        for item_1427 in var_1425 {
            {
                let mut object_1428 = array_1426.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_parameter_group(
                    &mut object_1428,
                    item_1427,
                );
                object_1428.finish();
            }
        }
        array_1426.finish();
    }
    if let Some(var_1429) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1429);
    }
    if let Some(var_1430) = &input.db_subnet_group {
        let mut object_1431 = object.key("DbSubnetGroup").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_subnet_group(&mut object_1431, var_1430);
        object_1431.finish();
    }
    if let Some(var_1432) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1432);
    }
    if let Some(var_1433) = &input.pending_modified_values {
        let mut object_1434 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_pending_modified_values(
            &mut object_1434,
            var_1433,
        );
        object_1434.finish();
    }
    if let Some(var_1435) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_1435);
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1436) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_1436);
    }
    if let Some(var_1437) = &input.read_replica_db_instance_identifiers {
        let mut array_1438 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_1439 in var_1437 {
            {
                array_1438.value().string(item_1439);
            }
        }
        array_1438.finish();
    }
    if let Some(var_1440) = &input.read_replica_db_cluster_identifiers {
        let mut array_1441 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_1442 in var_1440 {
            {
                array_1441.value().string(item_1442);
            }
        }
        array_1441.finish();
    }
    if let Some(var_1443) = &input.license_model {
        object.key("LicenseModel").string(var_1443);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1444) = &input.option_group_memberships {
        let mut array_1445 = object.key("OptionGroupMemberships").start_array();
        for item_1446 in var_1444 {
            {
                let mut object_1447 = array_1445.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_option_group_membership(
                    &mut object_1447,
                    item_1446,
                );
                object_1447.finish();
            }
        }
        array_1445.finish();
    }
    if let Some(var_1448) = &input.character_set_name {
        object.key("CharacterSetName").string(var_1448);
    }
    if let Some(var_1449) = &input.secondary_availability_zone {
        object.key("SecondaryAvailabilityZone").string(var_1449);
    }
    if let Some(var_1450) = &input.status_infos {
        let mut array_1451 = object.key("StatusInfos").start_array();
        for item_1452 in var_1450 {
            {
                let mut object_1453 = array_1451.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_status_info(
                    &mut object_1453,
                    item_1452,
                );
                object_1453.finish();
            }
        }
        array_1451.finish();
    }
    if let Some(var_1454) = &input.storage_type {
        object.key("StorageType").string(var_1454);
    }
    if let Some(var_1455) = &input.domain_memberships {
        let mut array_1456 = object.key("DomainMemberships").start_array();
        for item_1457 in var_1455 {
            {
                let mut object_1458 = array_1456.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_domain_membership(
                    &mut object_1458,
                    item_1457,
                );
                object_1458.finish();
            }
        }
        array_1456.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_1459) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_1459);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_1460) = &input.timezone {
        object.key("Timezone").string(var_1460);
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_1461) = &input.performance_insights_kms_key_id {
        object.key("PerformanceInsightsKmsKeyId").string(var_1461);
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_1462) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1463 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1464 in var_1462 {
            {
                array_1463.value().string(item_1464);
            }
        }
        array_1463.finish();
    }
    if let Some(var_1465) = &input.processor_features {
        let mut array_1466 = object.key("ProcessorFeatures").start_array();
        for item_1467 in var_1465 {
            {
                let mut object_1468 = array_1466.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_1468,
                    item_1467,
                );
                object_1468.finish();
            }
        }
        array_1466.finish();
    }
    if let Some(var_1469) = &input.listener_endpoint {
        let mut object_1470 = object.key("ListenerEndpoint").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_instance_endpoint(
            &mut object_1470,
            var_1469,
        );
        object_1470.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
}

pub fn serialize_structure_aws_sns_topic_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicDetails,
) {
    if let Some(var_1471) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1471);
    }
    if let Some(var_1472) = &input.subscription {
        let mut array_1473 = object.key("Subscription").start_array();
        for item_1474 in var_1472 {
            {
                let mut object_1475 = array_1473.value().start_object();
                crate::json_ser::serialize_structure_aws_sns_topic_subscription(
                    &mut object_1475,
                    item_1474,
                );
                object_1475.finish();
            }
        }
        array_1473.finish();
    }
    if let Some(var_1476) = &input.topic_name {
        object.key("TopicName").string(var_1476);
    }
    if let Some(var_1477) = &input.owner {
        object.key("Owner").string(var_1477);
    }
}

pub fn serialize_structure_aws_sqs_queue_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSqsQueueDetails,
) {
    if input.kms_data_key_reuse_period_seconds != 0 {
        object.key("KmsDataKeyReusePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.kms_data_key_reuse_period_seconds).into()),
        );
    }
    if let Some(var_1478) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1478);
    }
    if let Some(var_1479) = &input.queue_name {
        object.key("QueueName").string(var_1479);
    }
    if let Some(var_1480) = &input.dead_letter_target_arn {
        object.key("DeadLetterTargetArn").string(var_1480);
    }
}

pub fn serialize_structure_aws_waf_web_acl_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclDetails,
) {
    if let Some(var_1481) = &input.name {
        object.key("Name").string(var_1481);
    }
    if let Some(var_1482) = &input.default_action {
        object.key("DefaultAction").string(var_1482);
    }
    if let Some(var_1483) = &input.rules {
        let mut array_1484 = object.key("Rules").start_array();
        for item_1485 in var_1483 {
            {
                let mut object_1486 = array_1484.value().start_object();
                crate::json_ser::serialize_structure_aws_waf_web_acl_rule(
                    &mut object_1486,
                    item_1485,
                );
                object_1486.finish();
            }
        }
        array_1484.finish();
    }
    if let Some(var_1487) = &input.web_acl_id {
        object.key("WebAclId").string(var_1487);
    }
}

pub fn serialize_structure_aws_rds_db_snapshot_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSnapshotDetails,
) {
    if let Some(var_1488) = &input.db_snapshot_identifier {
        object.key("DbSnapshotIdentifier").string(var_1488);
    }
    if let Some(var_1489) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1489);
    }
    if let Some(var_1490) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1490);
    }
    if let Some(var_1491) = &input.engine {
        object.key("Engine").string(var_1491);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1492) = &input.status {
        object.key("Status").string(var_1492);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1493) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1493);
    }
    if let Some(var_1494) = &input.vpc_id {
        object.key("VpcId").string(var_1494);
    }
    if let Some(var_1495) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1495);
    }
    if let Some(var_1496) = &input.master_username {
        object.key("MasterUsername").string(var_1496);
    }
    if let Some(var_1497) = &input.engine_version {
        object.key("EngineVersion").string(var_1497);
    }
    if let Some(var_1498) = &input.license_model {
        object.key("LicenseModel").string(var_1498);
    }
    if let Some(var_1499) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1499);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1500) = &input.option_group_name {
        object.key("OptionGroupName").string(var_1500);
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if let Some(var_1501) = &input.source_region {
        object.key("SourceRegion").string(var_1501);
    }
    if let Some(var_1502) = &input.source_db_snapshot_identifier {
        object.key("SourceDbSnapshotIdentifier").string(var_1502);
    }
    if let Some(var_1503) = &input.storage_type {
        object.key("StorageType").string(var_1503);
    }
    if let Some(var_1504) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1504);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1505) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1505);
    }
    if let Some(var_1506) = &input.timezone {
        object.key("Timezone").string(var_1506);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1507) = &input.processor_features {
        let mut array_1508 = object.key("ProcessorFeatures").start_array();
        for item_1509 in var_1507 {
            {
                let mut object_1510 = array_1508.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_1510,
                    item_1509,
                );
                object_1510.finish();
            }
        }
        array_1508.finish();
    }
    if let Some(var_1511) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1511);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_snapshot_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterSnapshotDetails,
) {
    if let Some(var_1512) = &input.availability_zones {
        let mut array_1513 = object.key("AvailabilityZones").start_array();
        for item_1514 in var_1512 {
            {
                array_1513.value().string(item_1514);
            }
        }
        array_1513.finish();
    }
    if let Some(var_1515) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1515);
    }
    if let Some(var_1516) = &input.engine {
        object.key("Engine").string(var_1516);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1517) = &input.status {
        object.key("Status").string(var_1517);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1518) = &input.vpc_id {
        object.key("VpcId").string(var_1518);
    }
    if let Some(var_1519) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1519);
    }
    if let Some(var_1520) = &input.master_username {
        object.key("MasterUsername").string(var_1520);
    }
    if let Some(var_1521) = &input.engine_version {
        object.key("EngineVersion").string(var_1521);
    }
    if let Some(var_1522) = &input.license_model {
        object.key("LicenseModel").string(var_1522);
    }
    if let Some(var_1523) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1523);
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1524) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1524);
    }
    if let Some(var_1525) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1525);
    }
    if let Some(var_1526) = &input.db_cluster_snapshot_identifier {
        object.key("DbClusterSnapshotIdentifier").string(var_1526);
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterDetails,
) {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1527) = &input.availability_zones {
        let mut array_1528 = object.key("AvailabilityZones").start_array();
        for item_1529 in var_1527 {
            {
                array_1528.value().string(item_1529);
            }
        }
        array_1528.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1530) = &input.database_name {
        object.key("DatabaseName").string(var_1530);
    }
    if let Some(var_1531) = &input.status {
        object.key("Status").string(var_1531);
    }
    if let Some(var_1532) = &input.endpoint {
        object.key("Endpoint").string(var_1532);
    }
    if let Some(var_1533) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_1533);
    }
    if let Some(var_1534) = &input.custom_endpoints {
        let mut array_1535 = object.key("CustomEndpoints").start_array();
        for item_1536 in var_1534 {
            {
                array_1535.value().string(item_1536);
            }
        }
        array_1535.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1537) = &input.engine {
        object.key("Engine").string(var_1537);
    }
    if let Some(var_1538) = &input.engine_version {
        object.key("EngineVersion").string(var_1538);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1539) = &input.master_username {
        object.key("MasterUsername").string(var_1539);
    }
    if let Some(var_1540) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_1540);
    }
    if let Some(var_1541) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_1541);
    }
    if let Some(var_1542) = &input.read_replica_identifiers {
        let mut array_1543 = object.key("ReadReplicaIdentifiers").start_array();
        for item_1544 in var_1542 {
            {
                array_1543.value().string(item_1544);
            }
        }
        array_1543.finish();
    }
    if let Some(var_1545) = &input.vpc_security_groups {
        let mut array_1546 = object.key("VpcSecurityGroups").start_array();
        for item_1547 in var_1545 {
            {
                let mut object_1548 = array_1546.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_instance_vpc_security_group(
                    &mut object_1548,
                    item_1547,
                );
                object_1548.finish();
            }
        }
        array_1546.finish();
    }
    if let Some(var_1549) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1549);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1550) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1550);
    }
    if let Some(var_1551) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_1551);
    }
    if let Some(var_1552) = &input.associated_roles {
        let mut array_1553 = object.key("AssociatedRoles").start_array();
        for item_1554 in var_1552 {
            {
                let mut object_1555 = array_1553.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_associated_role(
                    &mut object_1555,
                    item_1554,
                );
                object_1555.finish();
            }
        }
        array_1553.finish();
    }
    if let Some(var_1556) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1556);
    }
    if let Some(var_1557) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1558 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1559 in var_1557 {
            {
                array_1558.value().string(item_1559);
            }
        }
        array_1558.finish();
    }
    if let Some(var_1560) = &input.engine_mode {
        object.key("EngineMode").string(var_1560);
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_1561) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_1561);
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_1562) = &input.domain_memberships {
        let mut array_1563 = object.key("DomainMemberships").start_array();
        for item_1564 in var_1562 {
            {
                let mut object_1565 = array_1563.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_domain_membership(
                    &mut object_1565,
                    item_1564,
                );
                object_1565.finish();
            }
        }
        array_1563.finish();
    }
    if let Some(var_1566) = &input.db_cluster_parameter_group {
        object.key("DbClusterParameterGroup").string(var_1566);
    }
    if let Some(var_1567) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_1567);
    }
    if let Some(var_1568) = &input.db_cluster_option_group_memberships {
        let mut array_1569 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_1570 in var_1568 {
            {
                let mut object_1571 = array_1569.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_option_group_membership(
                    &mut object_1571,
                    item_1570,
                );
                object_1571.finish();
            }
        }
        array_1569.finish();
    }
    if let Some(var_1572) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1572);
    }
    if let Some(var_1573) = &input.db_cluster_members {
        let mut array_1574 = object.key("DbClusterMembers").start_array();
        for item_1575 in var_1573 {
            {
                let mut object_1576 = array_1574.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_cluster_member(
                    &mut object_1576,
                    item_1575,
                );
                object_1576.finish();
            }
        }
        array_1574.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
}

pub fn serialize_structure_aws_ecs_cluster_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDetails,
) {
    if let Some(var_1577) = &input.capacity_providers {
        let mut array_1578 = object.key("CapacityProviders").start_array();
        for item_1579 in var_1577 {
            {
                array_1578.value().string(item_1579);
            }
        }
        array_1578.finish();
    }
    if let Some(var_1580) = &input.cluster_settings {
        let mut array_1581 = object.key("ClusterSettings").start_array();
        for item_1582 in var_1580 {
            {
                let mut object_1583 = array_1581.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_cluster_cluster_settings_details(
                    &mut object_1583,
                    item_1582,
                );
                object_1583.finish();
            }
        }
        array_1581.finish();
    }
    if let Some(var_1584) = &input.configuration {
        let mut object_1585 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_details(
            &mut object_1585,
            var_1584,
        );
        object_1585.finish();
    }
    if let Some(var_1586) = &input.default_capacity_provider_strategy {
        let mut array_1587 = object.key("DefaultCapacityProviderStrategy").start_array();
        for item_1588 in var_1586 {
            {
                let mut object_1589 = array_1587.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_cluster_default_capacity_provider_strategy_details(&mut object_1589, item_1588);
                object_1589.finish();
            }
        }
        array_1587.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionDetails,
) {
    if let Some(var_1590) = &input.container_definitions {
        let mut array_1591 = object.key("ContainerDefinitions").start_array();
        for item_1592 in var_1590 {
            {
                let mut object_1593 = array_1591.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_details(&mut object_1593, item_1592);
                object_1593.finish();
            }
        }
        array_1591.finish();
    }
    if let Some(var_1594) = &input.cpu {
        object.key("Cpu").string(var_1594);
    }
    if let Some(var_1595) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_1595);
    }
    if let Some(var_1596) = &input.family {
        object.key("Family").string(var_1596);
    }
    if let Some(var_1597) = &input.inference_accelerators {
        let mut array_1598 = object.key("InferenceAccelerators").start_array();
        for item_1599 in var_1597 {
            {
                let mut object_1600 = array_1598.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_inference_accelerators_details(&mut object_1600, item_1599);
                object_1600.finish();
            }
        }
        array_1598.finish();
    }
    if let Some(var_1601) = &input.ipc_mode {
        object.key("IpcMode").string(var_1601);
    }
    if let Some(var_1602) = &input.memory {
        object.key("Memory").string(var_1602);
    }
    if let Some(var_1603) = &input.network_mode {
        object.key("NetworkMode").string(var_1603);
    }
    if let Some(var_1604) = &input.pid_mode {
        object.key("PidMode").string(var_1604);
    }
    if let Some(var_1605) = &input.placement_constraints {
        let mut array_1606 = object.key("PlacementConstraints").start_array();
        for item_1607 in var_1605 {
            {
                let mut object_1608 = array_1606.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_placement_constraints_details(&mut object_1608, item_1607);
                object_1608.finish();
            }
        }
        array_1606.finish();
    }
    if let Some(var_1609) = &input.proxy_configuration {
        let mut object_1610 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_proxy_configuration_details(
            &mut object_1610,
            var_1609,
        );
        object_1610.finish();
    }
    if let Some(var_1611) = &input.requires_compatibilities {
        let mut array_1612 = object.key("RequiresCompatibilities").start_array();
        for item_1613 in var_1611 {
            {
                array_1612.value().string(item_1613);
            }
        }
        array_1612.finish();
    }
    if let Some(var_1614) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_1614);
    }
    if let Some(var_1615) = &input.volumes {
        let mut array_1616 = object.key("Volumes").start_array();
        for item_1617 in var_1615 {
            {
                let mut object_1618 = array_1616.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_details(
                    &mut object_1618,
                    item_1617,
                );
                object_1618.finish();
            }
        }
        array_1616.finish();
    }
}

pub fn serialize_structure_container_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDetails,
) {
    if let Some(var_1619) = &input.name {
        object.key("Name").string(var_1619);
    }
    if let Some(var_1620) = &input.image_id {
        object.key("ImageId").string(var_1620);
    }
    if let Some(var_1621) = &input.image_name {
        object.key("ImageName").string(var_1621);
    }
    if let Some(var_1622) = &input.launched_at {
        object.key("LaunchedAt").string(var_1622);
    }
}

pub fn serialize_structure_action_remote_ip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemoteIpDetails,
) {
    if let Some(var_1623) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_1623);
    }
    if let Some(var_1624) = &input.organization {
        let mut object_1625 = object.key("Organization").start_object();
        crate::json_ser::serialize_structure_ip_organization_details(&mut object_1625, var_1624);
        object_1625.finish();
    }
    if let Some(var_1626) = &input.country {
        let mut object_1627 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_country(&mut object_1627, var_1626);
        object_1627.finish();
    }
    if let Some(var_1628) = &input.city {
        let mut object_1629 = object.key("City").start_object();
        crate::json_ser::serialize_structure_city(&mut object_1629, var_1628);
        object_1629.finish();
    }
    if let Some(var_1630) = &input.geo_location {
        let mut object_1631 = object.key("GeoLocation").start_object();
        crate::json_ser::serialize_structure_geo_location(&mut object_1631, var_1630);
        object_1631.finish();
    }
}

pub fn serialize_structure_action_remote_port_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemotePortDetails,
) {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1632) = &input.port_name {
        object.key("PortName").string(var_1632);
    }
}

pub fn serialize_structure_action_local_port_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalPortDetails,
) {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1633) = &input.port_name {
        object.key("PortName").string(var_1633);
    }
}

pub fn serialize_structure_aws_api_call_action_domain_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallActionDomainDetails,
) {
    if let Some(var_1634) = &input.domain {
        object.key("Domain").string(var_1634);
    }
}

pub fn serialize_structure_port_probe_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeDetail,
) {
    if let Some(var_1635) = &input.local_port_details {
        let mut object_1636 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_action_local_port_details(&mut object_1636, var_1635);
        object_1636.finish();
    }
    if let Some(var_1637) = &input.local_ip_details {
        let mut object_1638 = object.key("LocalIpDetails").start_object();
        crate::json_ser::serialize_structure_action_local_ip_details(&mut object_1638, var_1637);
        object_1638.finish();
    }
    if let Some(var_1639) = &input.remote_ip_details {
        let mut object_1640 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_action_remote_ip_details(&mut object_1640, var_1639);
        object_1640.finish();
    }
}

pub fn serialize_structure_classification_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationStatus,
) {
    if let Some(var_1641) = &input.code {
        object.key("Code").string(var_1641);
    }
    if let Some(var_1642) = &input.reason {
        object.key("Reason").string(var_1642);
    }
}

pub fn serialize_structure_sensitive_data_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataResult,
) {
    if let Some(var_1643) = &input.category {
        object.key("Category").string(var_1643);
    }
    if let Some(var_1644) = &input.detections {
        let mut array_1645 = object.key("Detections").start_array();
        for item_1646 in var_1644 {
            {
                let mut object_1647 = array_1645.value().start_object();
                crate::json_ser::serialize_structure_sensitive_data_detections(
                    &mut object_1647,
                    item_1646,
                );
                object_1647.finish();
            }
        }
        array_1645.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
}

pub fn serialize_structure_custom_data_identifiers_result(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersResult,
) {
    if let Some(var_1648) = &input.detections {
        let mut array_1649 = object.key("Detections").start_array();
        for item_1650 in var_1648 {
            {
                let mut object_1651 = array_1649.value().start_object();
                crate::json_ser::serialize_structure_custom_data_identifiers_detections(
                    &mut object_1651,
                    item_1650,
                );
                object_1651.finish();
            }
        }
        array_1649.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
}

pub fn serialize_structure_aws_code_build_project_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironment,
) {
    if let Some(var_1652) = &input.certificate {
        object.key("Certificate").string(var_1652);
    }
    if let Some(var_1653) = &input.image_pull_credentials_type {
        object.key("ImagePullCredentialsType").string(var_1653);
    }
    if let Some(var_1654) = &input.registry_credential {
        let mut object_1655 = object.key("RegistryCredential").start_object();
        crate::json_ser::serialize_structure_aws_code_build_project_environment_registry_credential(
            &mut object_1655,
            var_1654,
        );
        object_1655.finish();
    }
    if let Some(var_1656) = &input.r#type {
        object.key("Type").string(var_1656);
    }
}

pub fn serialize_structure_aws_code_build_project_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectSource,
) {
    if let Some(var_1657) = &input.r#type {
        object.key("Type").string(var_1657);
    }
    if let Some(var_1658) = &input.location {
        object.key("Location").string(var_1658);
    }
    if input.git_clone_depth != 0 {
        object.key("GitCloneDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.git_clone_depth).into()),
        );
    }
    if input.insecure_ssl {
        object.key("InsecureSsl").boolean(input.insecure_ssl);
    }
}

pub fn serialize_structure_aws_code_build_project_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectVpcConfig,
) {
    if let Some(var_1659) = &input.vpc_id {
        object.key("VpcId").string(var_1659);
    }
    if let Some(var_1660) = &input.subnets {
        let mut array_1661 = object.key("Subnets").start_array();
        for item_1662 in var_1660 {
            {
                array_1661.value().string(item_1662);
            }
        }
        array_1661.finish();
    }
    if let Some(var_1663) = &input.security_group_ids {
        let mut array_1664 = object.key("SecurityGroupIds").start_array();
        for item_1665 in var_1663 {
            {
                array_1664.value().string(item_1665);
            }
        }
        array_1664.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_cache_behaviors(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehaviors,
) {
    if let Some(var_1666) = &input.items {
        let mut array_1667 = object.key("Items").start_array();
        for item_1668 in var_1666 {
            {
                let mut object_1669 = array_1667.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_cache_behavior(
                    &mut object_1669,
                    item_1668,
                );
                object_1669.finish();
            }
        }
        array_1667.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_default_cache_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDefaultCacheBehavior,
) {
    if let Some(var_1670) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_1670);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_logging(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionLogging,
) {
    if let Some(var_1671) = &input.bucket {
        object.key("Bucket").string(var_1671);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.include_cookies {
        object.key("IncludeCookies").boolean(input.include_cookies);
    }
    if let Some(var_1672) = &input.prefix {
        object.key("Prefix").string(var_1672);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origins(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOrigins,
) {
    if let Some(var_1673) = &input.items {
        let mut array_1674 = object.key("Items").start_array();
        for item_1675 in var_1673 {
            {
                let mut object_1676 = array_1674.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_item(
                    &mut object_1676,
                    item_1675,
                );
                object_1676.finish();
            }
        }
        array_1674.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_groups(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroups,
) {
    if let Some(var_1677) = &input.items {
        let mut array_1678 = object.key("Items").start_array();
        for item_1679 in var_1677 {
            {
                let mut object_1680 = array_1678.value().start_object();
                crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group(
                    &mut object_1680,
                    item_1679,
                );
                object_1680.finish();
            }
        }
        array_1678.finish();
    }
}

pub fn serialize_structure_aws_ec2_instance_network_interfaces_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceNetworkInterfacesDetails,
) {
    if let Some(var_1681) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1681);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceAttachment,
) {
    if let Some(var_1682) = &input.attach_time {
        object.key("AttachTime").string(var_1682);
    }
    if let Some(var_1683) = &input.attachment_id {
        object.key("AttachmentId").string(var_1683);
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_1684) = &input.instance_id {
        object.key("InstanceId").string(var_1684);
    }
    if let Some(var_1685) = &input.instance_owner_id {
        object.key("InstanceOwnerId").string(var_1685);
    }
    if let Some(var_1686) = &input.status {
        object.key("Status").string(var_1686);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceSecurityGroup,
) {
    if let Some(var_1687) = &input.group_name {
        object.key("GroupName").string(var_1687);
    }
    if let Some(var_1688) = &input.group_id {
        object.key("GroupId").string(var_1688);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_ip_v6_address_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceIpV6AddressDetail,
) {
    if let Some(var_1689) = &input.ip_v6_address {
        object.key("IpV6Address").string(var_1689);
    }
}

pub fn serialize_structure_aws_ec2_network_interface_private_ip_address_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfacePrivateIpAddressDetail,
) {
    if let Some(var_1690) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1690);
    }
    if let Some(var_1691) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_1691);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ip_permission(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpPermission,
) {
    if let Some(var_1692) = &input.ip_protocol {
        object.key("IpProtocol").string(var_1692);
    }
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_1693) = &input.user_id_group_pairs {
        let mut array_1694 = object.key("UserIdGroupPairs").start_array();
        for item_1695 in var_1693 {
            {
                let mut object_1696 = array_1694.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_user_id_group_pair(
                    &mut object_1696,
                    item_1695,
                );
                object_1696.finish();
            }
        }
        array_1694.finish();
    }
    if let Some(var_1697) = &input.ip_ranges {
        let mut array_1698 = object.key("IpRanges").start_array();
        for item_1699 in var_1697 {
            {
                let mut object_1700 = array_1698.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ip_range(
                    &mut object_1700,
                    item_1699,
                );
                object_1700.finish();
            }
        }
        array_1698.finish();
    }
    if let Some(var_1701) = &input.ipv6_ranges {
        let mut array_1702 = object.key("Ipv6Ranges").start_array();
        for item_1703 in var_1701 {
            {
                let mut object_1704 = array_1702.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_ipv6_range(
                    &mut object_1704,
                    item_1703,
                );
                object_1704.finish();
            }
        }
        array_1702.finish();
    }
    if let Some(var_1705) = &input.prefix_list_ids {
        let mut array_1706 = object.key("PrefixListIds").start_array();
        for item_1707 in var_1705 {
            {
                let mut object_1708 = array_1706.value().start_object();
                crate::json_ser::serialize_structure_aws_ec2_security_group_prefix_list_id(
                    &mut object_1708,
                    item_1707,
                );
                object_1708.finish();
            }
        }
        array_1706.finish();
    }
}

pub fn serialize_structure_aws_ec2_volume_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeAttachment,
) {
    if let Some(var_1709) = &input.attach_time {
        object.key("AttachTime").string(var_1709);
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_1710) = &input.instance_id {
        object.key("InstanceId").string(var_1710);
    }
    if let Some(var_1711) = &input.status {
        object.key("Status").string(var_1711);
    }
}

pub fn serialize_structure_cidr_block_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CidrBlockAssociation,
) {
    if let Some(var_1712) = &input.association_id {
        object.key("AssociationId").string(var_1712);
    }
    if let Some(var_1713) = &input.cidr_block {
        object.key("CidrBlock").string(var_1713);
    }
    if let Some(var_1714) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_1714);
    }
}

pub fn serialize_structure_ipv6_cidr_block_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ipv6CidrBlockAssociation,
) {
    if let Some(var_1715) = &input.association_id {
        object.key("AssociationId").string(var_1715);
    }
    if let Some(var_1716) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_1716);
    }
    if let Some(var_1717) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_1717);
    }
}

pub fn serialize_structure_aws_ec2_network_acl_association(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclAssociation,
) {
    if let Some(var_1718) = &input.network_acl_association_id {
        object.key("NetworkAclAssociationId").string(var_1718);
    }
    if let Some(var_1719) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_1719);
    }
    if let Some(var_1720) = &input.subnet_id {
        object.key("SubnetId").string(var_1720);
    }
}

pub fn serialize_structure_aws_ec2_network_acl_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclEntry,
) {
    if let Some(var_1721) = &input.cidr_block {
        object.key("CidrBlock").string(var_1721);
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_1722) = &input.icmp_type_code {
        let mut object_1723 = object.key("IcmpTypeCode").start_object();
        crate::json_ser::serialize_structure_icmp_type_code(&mut object_1723, var_1722);
        object_1723.finish();
    }
    if let Some(var_1724) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_1724);
    }
    if let Some(var_1725) = &input.port_range {
        let mut object_1726 = object.key("PortRange").start_object();
        crate::json_ser::serialize_structure_port_range_from_to(&mut object_1726, var_1725);
        object_1726.finish();
    }
    if let Some(var_1727) = &input.protocol {
        object.key("Protocol").string(var_1727);
    }
    if let Some(var_1728) = &input.rule_action {
        object.key("RuleAction").string(var_1728);
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
}

pub fn serialize_structure_availability_zone(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailabilityZone,
) {
    if let Some(var_1729) = &input.zone_name {
        object.key("ZoneName").string(var_1729);
    }
    if let Some(var_1730) = &input.subnet_id {
        object.key("SubnetId").string(var_1730);
    }
}

pub fn serialize_structure_load_balancer_state(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancerState,
) {
    if let Some(var_1731) = &input.code {
        object.key("Code").string(var_1731);
    }
    if let Some(var_1732) = &input.reason {
        object.key("Reason").string(var_1732);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_environment_link(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentEnvironmentLink,
) {
    if let Some(var_1733) = &input.environment_name {
        object.key("EnvironmentName").string(var_1733);
    }
    if let Some(var_1734) = &input.link_name {
        object.key("LinkName").string(var_1734);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_option_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentOptionSetting,
) {
    if let Some(var_1735) = &input.namespace {
        object.key("Namespace").string(var_1735);
    }
    if let Some(var_1736) = &input.option_name {
        object.key("OptionName").string(var_1736);
    }
    if let Some(var_1737) = &input.resource_name {
        object.key("ResourceName").string(var_1737);
    }
    if let Some(var_1738) = &input.value {
        object.key("Value").string(var_1738);
    }
}

pub fn serialize_structure_aws_elastic_beanstalk_environment_tier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentTier,
) {
    if let Some(var_1739) = &input.name {
        object.key("Name").string(var_1739);
    }
    if let Some(var_1740) = &input.r#type {
        object.key("Type").string(var_1740);
    }
    if let Some(var_1741) = &input.version {
        object.key("Version").string(var_1741);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_domain_endpoint_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDomainEndpointOptions,
) {
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_1742) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_1742);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_encryption_at_rest_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainEncryptionAtRestOptions,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1743) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1743);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_log_publishing_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptions,
) {
    if let Some(var_1744) = &input.index_slow_logs {
        let mut object_1745 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_1745, var_1744);
        object_1745.finish();
    }
    if let Some(var_1746) = &input.search_slow_logs {
        let mut object_1747 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_1747, var_1746);
        object_1747.finish();
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_node_to_node_encryption_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainNodeToNodeEncryptionOptions,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_service_software_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainServiceSoftwareOptions,
) {
    if let Some(var_1748) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_1748);
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_1749) = &input.current_version {
        object.key("CurrentVersion").string(var_1749);
    }
    if let Some(var_1750) = &input.description {
        object.key("Description").string(var_1750);
    }
    if let Some(var_1751) = &input.new_version {
        object.key("NewVersion").string(var_1751);
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_1752) = &input.update_status {
        object.key("UpdateStatus").string(var_1752);
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_vpc_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainVpcOptions,
) {
    if let Some(var_1753) = &input.availability_zones {
        let mut array_1754 = object.key("AvailabilityZones").start_array();
        for item_1755 in var_1753 {
            {
                array_1754.value().string(item_1755);
            }
        }
        array_1754.finish();
    }
    if let Some(var_1756) = &input.security_group_ids {
        let mut array_1757 = object.key("SecurityGroupIds").start_array();
        for item_1758 in var_1756 {
            {
                array_1757.value().string(item_1758);
            }
        }
        array_1757.finish();
    }
    if let Some(var_1759) = &input.subnet_ids {
        let mut array_1760 = object.key("SubnetIds").start_array();
        for item_1761 in var_1759 {
            {
                array_1760.value().string(item_1761);
            }
        }
        array_1760.finish();
    }
    if let Some(var_1762) = &input.vpc_id {
        object.key("VPCId").string(var_1762);
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionConfiguration,
) {
    if let Some(var_1763) = &input.rules {
        let mut array_1764 = object.key("Rules").start_array();
        for item_1765 in var_1763 {
            {
                let mut object_1766 = array_1764.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_rule(
                    &mut object_1766,
                    item_1765,
                );
                object_1766.finish();
            }
        }
        array_1764.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationDetails,
) {
    if let Some(var_1767) = &input.rules {
        let mut array_1768 = object.key("Rules").start_array();
        for item_1769 in var_1767 {
            {
                let mut object_1770 = array_1768.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(&mut object_1770, item_1769);
                object_1770.finish();
            }
        }
        array_1768.finish();
    }
}

pub fn serialize_structure_aws_secrets_manager_secret_rotation_rules(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretRotationRules,
) {
    if input.automatically_after_days != 0 {
        object.key("AutomaticallyAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automatically_after_days).into()),
        );
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContext,
) {
    if let Some(var_1771) = &input.attributes {
        let mut object_1772 = object.key("Attributes").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context_attributes(
            &mut object_1772,
            var_1771,
        );
        object_1772.finish();
    }
    if let Some(var_1773) = &input.session_issuer {
        let mut object_1774 = object.key("SessionIssuer").start_object();
        crate::json_ser::serialize_structure_aws_iam_access_key_session_context_session_issuer(
            &mut object_1774,
            var_1773,
        );
        object_1774.finish();
    }
}

pub fn serialize_structure_aws_iam_attached_managed_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAttachedManagedPolicy,
) {
    if let Some(var_1775) = &input.policy_name {
        object.key("PolicyName").string(var_1775);
    }
    if let Some(var_1776) = &input.policy_arn {
        object.key("PolicyArn").string(var_1776);
    }
}

pub fn serialize_structure_aws_iam_permissions_boundary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPermissionsBoundary,
) {
    if let Some(var_1777) = &input.permissions_boundary_arn {
        object.key("PermissionsBoundaryArn").string(var_1777);
    }
    if let Some(var_1778) = &input.permissions_boundary_type {
        object.key("PermissionsBoundaryType").string(var_1778);
    }
}

pub fn serialize_structure_aws_iam_user_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserPolicy,
) {
    if let Some(var_1779) = &input.policy_name {
        object.key("PolicyName").string(var_1779);
    }
}

pub fn serialize_structure_aws_iam_policy_version(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyVersion,
) {
    if let Some(var_1780) = &input.version_id {
        object.key("VersionId").string(var_1780);
    }
    if input.is_default_version {
        object
            .key("IsDefaultVersion")
            .boolean(input.is_default_version);
    }
    if let Some(var_1781) = &input.create_date {
        object.key("CreateDate").string(var_1781);
    }
}

pub fn serialize_structure_aws_api_gateway_v2_route_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2RouteSettings,
) {
    if input.detailed_metrics_enabled {
        object
            .key("DetailedMetricsEnabled")
            .boolean(input.detailed_metrics_enabled);
    }
    if let Some(var_1782) = &input.logging_level {
        object.key("LoggingLevel").string(var_1782);
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
}

pub fn serialize_structure_aws_api_gateway_access_log_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayAccessLogSettings,
) {
    if let Some(var_1783) = &input.format {
        object.key("Format").string(var_1783);
    }
    if let Some(var_1784) = &input.destination_arn {
        object.key("DestinationArn").string(var_1784);
    }
}

pub fn serialize_structure_aws_cors_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCorsConfiguration,
) {
    if let Some(var_1785) = &input.allow_origins {
        let mut array_1786 = object.key("AllowOrigins").start_array();
        for item_1787 in var_1785 {
            {
                array_1786.value().string(item_1787);
            }
        }
        array_1786.finish();
    }
    if input.allow_credentials {
        object
            .key("AllowCredentials")
            .boolean(input.allow_credentials);
    }
    if let Some(var_1788) = &input.expose_headers {
        let mut array_1789 = object.key("ExposeHeaders").start_array();
        for item_1790 in var_1788 {
            {
                array_1789.value().string(item_1790);
            }
        }
        array_1789.finish();
    }
    if input.max_age != 0 {
        object.key("MaxAge").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_age).into()),
        );
    }
    if let Some(var_1791) = &input.allow_methods {
        let mut array_1792 = object.key("AllowMethods").start_array();
        for item_1793 in var_1791 {
            {
                array_1792.value().string(item_1793);
            }
        }
        array_1792.finish();
    }
    if let Some(var_1794) = &input.allow_headers {
        let mut array_1795 = object.key("AllowHeaders").start_array();
        for item_1796 in var_1794 {
            {
                array_1795.value().string(item_1796);
            }
        }
        array_1795.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_attribute_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableAttributeDefinition,
) {
    if let Some(var_1797) = &input.attribute_name {
        object.key("AttributeName").string(var_1797);
    }
    if let Some(var_1798) = &input.attribute_type {
        object.key("AttributeType").string(var_1798);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_billing_mode_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableBillingModeSummary,
) {
    if let Some(var_1799) = &input.billing_mode {
        object.key("BillingMode").string(var_1799);
    }
    if let Some(var_1800) = &input.last_update_to_pay_per_request_date_time {
        object
            .key("LastUpdateToPayPerRequestDateTime")
            .string(var_1800);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_global_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableGlobalSecondaryIndex,
) {
    if input.backfilling {
        object.key("Backfilling").boolean(input.backfilling);
    }
    if let Some(var_1801) = &input.index_arn {
        object.key("IndexArn").string(var_1801);
    }
    if let Some(var_1802) = &input.index_name {
        object.key("IndexName").string(var_1802);
    }
    if input.index_size_bytes != 0 {
        object.key("IndexSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.index_size_bytes).into()),
        );
    }
    if let Some(var_1803) = &input.index_status {
        object.key("IndexStatus").string(var_1803);
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1804) = &input.key_schema {
        let mut array_1805 = object.key("KeySchema").start_array();
        for item_1806 in var_1804 {
            {
                let mut object_1807 = array_1805.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1807,
                    item_1806,
                );
                object_1807.finish();
            }
        }
        array_1805.finish();
    }
    if let Some(var_1808) = &input.projection {
        let mut object_1809 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_projection(
            &mut object_1809,
            var_1808,
        );
        object_1809.finish();
    }
    if let Some(var_1810) = &input.provisioned_throughput {
        let mut object_1811 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput(
            &mut object_1811,
            var_1810,
        );
        object_1811.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_key_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableKeySchema,
) {
    if let Some(var_1812) = &input.attribute_name {
        object.key("AttributeName").string(var_1812);
    }
    if let Some(var_1813) = &input.key_type {
        object.key("KeyType").string(var_1813);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_local_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableLocalSecondaryIndex,
) {
    if let Some(var_1814) = &input.index_arn {
        object.key("IndexArn").string(var_1814);
    }
    if let Some(var_1815) = &input.index_name {
        object.key("IndexName").string(var_1815);
    }
    if let Some(var_1816) = &input.key_schema {
        let mut array_1817 = object.key("KeySchema").start_array();
        for item_1818 in var_1816 {
            {
                let mut object_1819 = array_1817.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_key_schema(
                    &mut object_1819,
                    item_1818,
                );
                object_1819.finish();
            }
        }
        array_1817.finish();
    }
    if let Some(var_1820) = &input.projection {
        let mut object_1821 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_projection(
            &mut object_1821,
            var_1820,
        );
        object_1821.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_provisioned_throughput(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughput,
) {
    if let Some(var_1822) = &input.last_decrease_date_time {
        object.key("LastDecreaseDateTime").string(var_1822);
    }
    if let Some(var_1823) = &input.last_increase_date_time {
        object.key("LastIncreaseDateTime").string(var_1823);
    }
    if input.number_of_decreases_today != 0 {
        object.key("NumberOfDecreasesToday").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_decreases_today).into()),
        );
    }
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    if input.write_capacity_units != 0 {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.write_capacity_units).into()),
        );
    }
}

pub fn serialize_structure_aws_dynamo_db_table_replica(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplica,
) {
    if let Some(var_1824) = &input.global_secondary_indexes {
        let mut array_1825 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1826 in var_1824 {
            {
                let mut object_1827 = array_1825.value().start_object();
                crate::json_ser::serialize_structure_aws_dynamo_db_table_replica_global_secondary_index(&mut object_1827, item_1826);
                object_1827.finish();
            }
        }
        array_1825.finish();
    }
    if let Some(var_1828) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1828);
    }
    if let Some(var_1829) = &input.provisioned_throughput_override {
        let mut object_1830 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
            &mut object_1830,
            var_1829,
        );
        object_1830.finish();
    }
    if let Some(var_1831) = &input.region_name {
        object.key("RegionName").string(var_1831);
    }
    if let Some(var_1832) = &input.replica_status {
        object.key("ReplicaStatus").string(var_1832);
    }
    if let Some(var_1833) = &input.replica_status_description {
        object.key("ReplicaStatusDescription").string(var_1833);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_restore_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableRestoreSummary,
) {
    if let Some(var_1834) = &input.source_backup_arn {
        object.key("SourceBackupArn").string(var_1834);
    }
    if let Some(var_1835) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_1835);
    }
    if let Some(var_1836) = &input.restore_date_time {
        object.key("RestoreDateTime").string(var_1836);
    }
    if input.restore_in_progress {
        object
            .key("RestoreInProgress")
            .boolean(input.restore_in_progress);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_sse_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableSseDescription,
) {
    if let Some(var_1837) = &input.inaccessible_encryption_date_time {
        object
            .key("InaccessibleEncryptionDateTime")
            .string(var_1837);
    }
    if let Some(var_1838) = &input.status {
        object.key("Status").string(var_1838);
    }
    if let Some(var_1839) = &input.sse_type {
        object.key("SseType").string(var_1839);
    }
    if let Some(var_1840) = &input.kms_master_key_arn {
        object.key("KmsMasterKeyArn").string(var_1840);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_stream_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableStreamSpecification,
) {
    if input.stream_enabled {
        object.key("StreamEnabled").boolean(input.stream_enabled);
    }
    if let Some(var_1841) = &input.stream_view_type {
        object.key("StreamViewType").string(var_1841);
    }
}

pub fn serialize_structure_aws_api_gateway_method_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayMethodSettings,
) {
    if input.metrics_enabled {
        object.key("MetricsEnabled").boolean(input.metrics_enabled);
    }
    if let Some(var_1842) = &input.logging_level {
        object.key("LoggingLevel").string(var_1842);
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    if input.caching_enabled {
        object.key("CachingEnabled").boolean(input.caching_enabled);
    }
    if input.cache_ttl_in_seconds != 0 {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cache_ttl_in_seconds).into()),
        );
    }
    if input.cache_data_encrypted {
        object
            .key("CacheDataEncrypted")
            .boolean(input.cache_data_encrypted);
    }
    if input.require_authorization_for_cache_control {
        object
            .key("RequireAuthorizationForCacheControl")
            .boolean(input.require_authorization_for_cache_control);
    }
    if let Some(var_1843) = &input.unauthorized_cache_control_header_strategy {
        object
            .key("UnauthorizedCacheControlHeaderStrategy")
            .string(var_1843);
    }
    if let Some(var_1844) = &input.http_method {
        object.key("HttpMethod").string(var_1844);
    }
    if let Some(var_1845) = &input.resource_path {
        object.key("ResourcePath").string(var_1845);
    }
}

pub fn serialize_structure_aws_api_gateway_canary_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayCanarySettings,
) {
    if input.percent_traffic != 0.0 {
        object.key("PercentTraffic").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.percent_traffic).into()),
        );
    }
    if let Some(var_1846) = &input.deployment_id {
        object.key("DeploymentId").string(var_1846);
    }
    if let Some(var_1847) = &input.stage_variable_overrides {
        let mut object_1848 = object.key("StageVariableOverrides").start_object();
        for (key_1849, value_1850) in var_1847 {
            {
                object_1848.key(key_1849).string(value_1850);
            }
        }
        object_1848.finish();
    }
    if input.use_stage_cache {
        object.key("UseStageCache").boolean(input.use_stage_cache);
    }
}

pub fn serialize_structure_aws_api_gateway_endpoint_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayEndpointConfiguration,
) {
    if let Some(var_1851) = &input.types {
        let mut array_1852 = object.key("Types").start_array();
        for item_1853 in var_1851 {
            {
                array_1852.value().string(item_1853);
            }
        }
        array_1852.finish();
    }
}

pub fn serialize_structure_aws_ssm_patch(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatch,
) {
    if let Some(var_1854) = &input.compliance_summary {
        let mut object_1855 = object.key("ComplianceSummary").start_object();
        crate::json_ser::serialize_structure_aws_ssm_compliance_summary(&mut object_1855, var_1854);
        object_1855.finish();
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_domain_validation_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDomainValidationOption,
) {
    if let Some(var_1856) = &input.domain_name {
        object.key("DomainName").string(var_1856);
    }
    if let Some(var_1857) = &input.resource_record {
        let mut object_1858 = object.key("ResourceRecord").start_object();
        crate::json_ser::serialize_structure_aws_certificate_manager_certificate_resource_record(
            &mut object_1858,
            var_1857,
        );
        object_1858.finish();
    }
    if let Some(var_1859) = &input.validation_domain {
        object.key("ValidationDomain").string(var_1859);
    }
    if let Some(var_1860) = &input.validation_emails {
        let mut array_1861 = object.key("ValidationEmails").start_array();
        for item_1862 in var_1860 {
            {
                array_1861.value().string(item_1862);
            }
        }
        array_1861.finish();
    }
    if let Some(var_1863) = &input.validation_method {
        object.key("ValidationMethod").string(var_1863);
    }
    if let Some(var_1864) = &input.validation_status {
        object.key("ValidationStatus").string(var_1864);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_extended_key_usage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateExtendedKeyUsage,
) {
    if let Some(var_1865) = &input.name {
        object.key("Name").string(var_1865);
    }
    if let Some(var_1866) = &input.o_id {
        object.key("OId").string(var_1866);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_key_usage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateKeyUsage,
) {
    if let Some(var_1867) = &input.name {
        object.key("Name").string(var_1867);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateOptions,
) {
    if let Some(var_1868) = &input.certificate_transparency_logging_preference {
        object
            .key("CertificateTransparencyLoggingPreference")
            .string(var_1868);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_renewal_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateRenewalSummary,
) {
    if let Some(var_1869) = &input.domain_validation_options {
        let mut array_1870 = object.key("DomainValidationOptions").start_array();
        for item_1871 in var_1869 {
            {
                let mut object_1872 = array_1870.value().start_object();
                crate::json_ser::serialize_structure_aws_certificate_manager_certificate_domain_validation_option(&mut object_1872, item_1871);
                object_1872.finish();
            }
        }
        array_1870.finish();
    }
    if let Some(var_1873) = &input.renewal_status {
        object.key("RenewalStatus").string(var_1873);
    }
    if let Some(var_1874) = &input.renewal_status_reason {
        object.key("RenewalStatusReason").string(var_1874);
    }
    if let Some(var_1875) = &input.updated_at {
        object.key("UpdatedAt").string(var_1875);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_node(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterNode,
) {
    if let Some(var_1876) = &input.node_role {
        object.key("NodeRole").string(var_1876);
    }
    if let Some(var_1877) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1877);
    }
    if let Some(var_1878) = &input.public_ip_address {
        object.key("PublicIpAddress").string(var_1878);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_parameter_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterGroup,
) {
    if let Some(var_1879) = &input.cluster_parameter_status_list {
        let mut array_1880 = object.key("ClusterParameterStatusList").start_array();
        for item_1881 in var_1879 {
            {
                let mut object_1882 = array_1880.value().start_object();
                crate::json_ser::serialize_structure_aws_redshift_cluster_cluster_parameter_status(
                    &mut object_1882,
                    item_1881,
                );
                object_1882.finish();
            }
        }
        array_1880.finish();
    }
    if let Some(var_1883) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_1883);
    }
    if let Some(var_1884) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_1884);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSecurityGroup,
) {
    if let Some(var_1885) = &input.cluster_security_group_name {
        object.key("ClusterSecurityGroupName").string(var_1885);
    }
    if let Some(var_1886) = &input.status {
        object.key("Status").string(var_1886);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_snapshot_copy_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSnapshotCopyStatus,
) {
    if let Some(var_1887) = &input.destination_region {
        object.key("DestinationRegion").string(var_1887);
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if input.retention_period != 0 {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    if let Some(var_1888) = &input.snapshot_copy_grant_name {
        object.key("SnapshotCopyGrantName").string(var_1888);
    }
}

pub fn serialize_structure_aws_redshift_cluster_deferred_maintenance_window(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDeferredMaintenanceWindow,
) {
    if let Some(var_1889) = &input.defer_maintenance_end_time {
        object.key("DeferMaintenanceEndTime").string(var_1889);
    }
    if let Some(var_1890) = &input.defer_maintenance_identifier {
        object.key("DeferMaintenanceIdentifier").string(var_1890);
    }
    if let Some(var_1891) = &input.defer_maintenance_start_time {
        object.key("DeferMaintenanceStartTime").string(var_1891);
    }
}

pub fn serialize_structure_aws_redshift_cluster_elastic_ip_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterElasticIpStatus,
) {
    if let Some(var_1892) = &input.elastic_ip {
        object.key("ElasticIp").string(var_1892);
    }
    if let Some(var_1893) = &input.status {
        object.key("Status").string(var_1893);
    }
}

pub fn serialize_structure_aws_redshift_cluster_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterEndpoint,
) {
    if let Some(var_1894) = &input.address {
        object.key("Address").string(var_1894);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
}

pub fn serialize_structure_aws_redshift_cluster_hsm_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterHsmStatus,
) {
    if let Some(var_1895) = &input.hsm_client_certificate_identifier {
        object
            .key("HsmClientCertificateIdentifier")
            .string(var_1895);
    }
    if let Some(var_1896) = &input.hsm_configuration_identifier {
        object.key("HsmConfigurationIdentifier").string(var_1896);
    }
    if let Some(var_1897) = &input.status {
        object.key("Status").string(var_1897);
    }
}

pub fn serialize_structure_aws_redshift_cluster_iam_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterIamRole,
) {
    if let Some(var_1898) = &input.apply_status {
        object.key("ApplyStatus").string(var_1898);
    }
    if let Some(var_1899) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_1899);
    }
}

pub fn serialize_structure_aws_redshift_cluster_pending_modified_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterPendingModifiedValues,
) {
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1900) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1900);
    }
    if let Some(var_1901) = &input.cluster_type {
        object.key("ClusterType").string(var_1901);
    }
    if let Some(var_1902) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1902);
    }
    if let Some(var_1903) = &input.encryption_type {
        object.key("EncryptionType").string(var_1903);
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1904) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1904);
    }
    if let Some(var_1905) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_1905);
    }
    if let Some(var_1906) = &input.node_type {
        object.key("NodeType").string(var_1906);
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
}

pub fn serialize_structure_aws_redshift_cluster_resize_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterResizeInfo,
) {
    if input.allow_cancel_resize {
        object
            .key("AllowCancelResize")
            .boolean(input.allow_cancel_resize);
    }
    if let Some(var_1907) = &input.resize_type {
        object.key("ResizeType").string(var_1907);
    }
}

pub fn serialize_structure_aws_redshift_cluster_restore_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterRestoreStatus,
) {
    if input.current_restore_rate_in_mega_bytes_per_second != 0.0 {
        object.key("CurrentRestoreRateInMegaBytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float(
                (input.current_restore_rate_in_mega_bytes_per_second).into(),
            ),
        );
    }
    if input.elapsed_time_in_seconds != 0 {
        object.key("ElapsedTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.elapsed_time_in_seconds).into()),
        );
    }
    if input.estimated_time_to_completion_in_seconds != 0 {
        object.key("EstimatedTimeToCompletionInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.estimated_time_to_completion_in_seconds).into()),
        );
    }
    if input.progress_in_mega_bytes != 0 {
        object.key("ProgressInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.progress_in_mega_bytes).into()),
        );
    }
    if input.snapshot_size_in_mega_bytes != 0 {
        object.key("SnapshotSizeInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.snapshot_size_in_mega_bytes).into()),
        );
    }
    if let Some(var_1908) = &input.status {
        object.key("Status").string(var_1908);
    }
}

pub fn serialize_structure_aws_redshift_cluster_vpc_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterVpcSecurityGroup,
) {
    if let Some(var_1909) = &input.status {
        object.key("Status").string(var_1909);
    }
    if let Some(var_1910) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_1910);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_backend_server_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerBackendServerDescription,
) {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_1911) = &input.policy_names {
        let mut array_1912 = object.key("PolicyNames").start_array();
        for item_1913 in var_1911 {
            {
                array_1912.value().string(item_1913);
            }
        }
        array_1912.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_health_check(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerHealthCheck,
) {
    if input.healthy_threshold != 0 {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if let Some(var_1914) = &input.target {
        object.key("Target").string(var_1914);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if input.unhealthy_threshold != 0 {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_instance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerInstance,
) {
    if let Some(var_1915) = &input.instance_id {
        object.key("InstanceId").string(var_1915);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_listener_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListenerDescription,
) {
    if let Some(var_1916) = &input.listener {
        let mut object_1917 = object.key("Listener").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_listener(
            &mut object_1917,
            var_1916,
        );
        object_1917.finish();
    }
    if let Some(var_1918) = &input.policy_names {
        let mut array_1919 = object.key("PolicyNames").start_array();
        for item_1920 in var_1918 {
            {
                array_1919.value().string(item_1920);
            }
        }
        array_1919.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAttributes,
) {
    if let Some(var_1921) = &input.access_log {
        let mut object_1922 = object.key("AccessLog").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_access_log(
            &mut object_1922,
            var_1921,
        );
        object_1922.finish();
    }
    if let Some(var_1923) = &input.connection_draining {
        let mut object_1924 = object.key("ConnectionDraining").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_connection_draining(
            &mut object_1924,
            var_1923,
        );
        object_1924.finish();
    }
    if let Some(var_1925) = &input.connection_settings {
        let mut object_1926 = object.key("ConnectionSettings").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_connection_settings(
            &mut object_1926,
            var_1925,
        );
        object_1926.finish();
    }
    if let Some(var_1927) = &input.cross_zone_load_balancing {
        let mut object_1928 = object.key("CrossZoneLoadBalancing").start_object();
        crate::json_ser::serialize_structure_aws_elb_load_balancer_cross_zone_load_balancing(
            &mut object_1928,
            var_1927,
        );
        object_1928.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_policies(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerPolicies,
) {
    if let Some(var_1929) = &input.app_cookie_stickiness_policies {
        let mut array_1930 = object.key("AppCookieStickinessPolicies").start_array();
        for item_1931 in var_1929 {
            {
                let mut object_1932 = array_1930.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_app_cookie_stickiness_policy(
                    &mut object_1932,
                    item_1931,
                );
                object_1932.finish();
            }
        }
        array_1930.finish();
    }
    if let Some(var_1933) = &input.lb_cookie_stickiness_policies {
        let mut array_1934 = object.key("LbCookieStickinessPolicies").start_array();
        for item_1935 in var_1933 {
            {
                let mut object_1936 = array_1934.value().start_object();
                crate::json_ser::serialize_structure_aws_elb_lb_cookie_stickiness_policy(
                    &mut object_1936,
                    item_1935,
                );
                object_1936.finish();
            }
        }
        array_1934.finish();
    }
    if let Some(var_1937) = &input.other_policies {
        let mut array_1938 = object.key("OtherPolicies").start_array();
        for item_1939 in var_1937 {
            {
                array_1938.value().string(item_1939);
            }
        }
        array_1938.finish();
    }
}

pub fn serialize_structure_aws_elb_load_balancer_source_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerSourceSecurityGroup,
) {
    if let Some(var_1940) = &input.group_name {
        object.key("GroupName").string(var_1940);
    }
    if let Some(var_1941) = &input.owner_alias {
        object.key("OwnerAlias").string(var_1941);
    }
}

pub fn serialize_structure_aws_iam_group_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupPolicy,
) {
    if let Some(var_1942) = &input.policy_name {
        object.key("PolicyName").string(var_1942);
    }
}

pub fn serialize_structure_aws_iam_instance_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfile,
) {
    if let Some(var_1943) = &input.arn {
        object.key("Arn").string(var_1943);
    }
    if let Some(var_1944) = &input.create_date {
        object.key("CreateDate").string(var_1944);
    }
    if let Some(var_1945) = &input.instance_profile_id {
        object.key("InstanceProfileId").string(var_1945);
    }
    if let Some(var_1946) = &input.instance_profile_name {
        object.key("InstanceProfileName").string(var_1946);
    }
    if let Some(var_1947) = &input.path {
        object.key("Path").string(var_1947);
    }
    if let Some(var_1948) = &input.roles {
        let mut array_1949 = object.key("Roles").start_array();
        for item_1950 in var_1948 {
            {
                let mut object_1951 = array_1949.value().start_object();
                crate::json_ser::serialize_structure_aws_iam_instance_profile_role(
                    &mut object_1951,
                    item_1950,
                );
                object_1951.finish();
            }
        }
        array_1949.finish();
    }
}

pub fn serialize_structure_aws_iam_role_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRolePolicy,
) {
    if let Some(var_1952) = &input.policy_name {
        object.key("PolicyName").string(var_1952);
    }
}

pub fn serialize_structure_aws_lambda_function_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionCode,
) {
    if let Some(var_1953) = &input.s3_bucket {
        object.key("S3Bucket").string(var_1953);
    }
    if let Some(var_1954) = &input.s3_key {
        object.key("S3Key").string(var_1954);
    }
    if let Some(var_1955) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_1955);
    }
    if let Some(var_1956) = &input.zip_file {
        object.key("ZipFile").string(var_1956);
    }
}

pub fn serialize_structure_aws_lambda_function_dead_letter_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDeadLetterConfig,
) {
    if let Some(var_1957) = &input.target_arn {
        object.key("TargetArn").string(var_1957);
    }
}

pub fn serialize_structure_aws_lambda_function_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironment,
) {
    if let Some(var_1958) = &input.variables {
        let mut object_1959 = object.key("Variables").start_object();
        for (key_1960, value_1961) in var_1958 {
            {
                object_1959.key(key_1960).string(value_1961);
            }
        }
        object_1959.finish();
    }
    if let Some(var_1962) = &input.error {
        let mut object_1963 = object.key("Error").start_object();
        crate::json_ser::serialize_structure_aws_lambda_function_environment_error(
            &mut object_1963,
            var_1962,
        );
        object_1963.finish();
    }
}

pub fn serialize_structure_aws_lambda_function_layer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionLayer,
) {
    if let Some(var_1964) = &input.arn {
        object.key("Arn").string(var_1964);
    }
    if input.code_size != 0 {
        object.key("CodeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.code_size).into()),
        );
    }
}

pub fn serialize_structure_aws_lambda_function_tracing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionTracingConfig,
) {
    if let Some(var_1965) = &input.mode {
        object.key("Mode").string(var_1965);
    }
}

pub fn serialize_structure_aws_lambda_function_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionVpcConfig,
) {
    if let Some(var_1966) = &input.security_group_ids {
        let mut array_1967 = object.key("SecurityGroupIds").start_array();
        for item_1968 in var_1966 {
            {
                array_1967.value().string(item_1968);
            }
        }
        array_1967.finish();
    }
    if let Some(var_1969) = &input.subnet_ids {
        let mut array_1970 = object.key("SubnetIds").start_array();
        for item_1971 in var_1969 {
            {
                array_1970.value().string(item_1971);
            }
        }
        array_1970.finish();
    }
    if let Some(var_1972) = &input.vpc_id {
        object.key("VpcId").string(var_1972);
    }
}

pub fn serialize_structure_aws_rds_db_instance_associated_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceAssociatedRole,
) {
    if let Some(var_1973) = &input.role_arn {
        object.key("RoleArn").string(var_1973);
    }
    if let Some(var_1974) = &input.feature_name {
        object.key("FeatureName").string(var_1974);
    }
    if let Some(var_1975) = &input.status {
        object.key("Status").string(var_1975);
    }
}

pub fn serialize_structure_aws_rds_db_instance_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceEndpoint,
) {
    if let Some(var_1976) = &input.address {
        object.key("Address").string(var_1976);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1977) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1977);
    }
}

pub fn serialize_structure_aws_rds_db_instance_vpc_security_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceVpcSecurityGroup,
) {
    if let Some(var_1978) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_1978);
    }
    if let Some(var_1979) = &input.status {
        object.key("Status").string(var_1979);
    }
}

pub fn serialize_structure_aws_rds_db_parameter_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbParameterGroup,
) {
    if let Some(var_1980) = &input.db_parameter_group_name {
        object.key("DbParameterGroupName").string(var_1980);
    }
    if let Some(var_1981) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_1981);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroup,
) {
    if let Some(var_1982) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_1982);
    }
    if let Some(var_1983) = &input.db_subnet_group_description {
        object.key("DbSubnetGroupDescription").string(var_1983);
    }
    if let Some(var_1984) = &input.vpc_id {
        object.key("VpcId").string(var_1984);
    }
    if let Some(var_1985) = &input.subnet_group_status {
        object.key("SubnetGroupStatus").string(var_1985);
    }
    if let Some(var_1986) = &input.subnets {
        let mut array_1987 = object.key("Subnets").start_array();
        for item_1988 in var_1986 {
            {
                let mut object_1989 = array_1987.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_subnet_group_subnet(
                    &mut object_1989,
                    item_1988,
                );
                object_1989.finish();
            }
        }
        array_1987.finish();
    }
    if let Some(var_1990) = &input.db_subnet_group_arn {
        object.key("DbSubnetGroupArn").string(var_1990);
    }
}

pub fn serialize_structure_aws_rds_db_pending_modified_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbPendingModifiedValues,
) {
    if let Some(var_1991) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_1991);
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1992) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_1992);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_1993) = &input.engine_version {
        object.key("EngineVersion").string(var_1993);
    }
    if let Some(var_1994) = &input.license_model {
        object.key("LicenseModel").string(var_1994);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1995) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1995);
    }
    if let Some(var_1996) = &input.storage_type {
        object.key("StorageType").string(var_1996);
    }
    if let Some(var_1997) = &input.ca_certificate_identifier {
        object.key("CaCertificateIdentifier").string(var_1997);
    }
    if let Some(var_1998) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_1998);
    }
    if let Some(var_1999) = &input.pending_cloud_watch_logs_exports {
        let mut object_2000 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::json_ser::serialize_structure_aws_rds_pending_cloud_watch_logs_exports(
            &mut object_2000,
            var_1999,
        );
        object_2000.finish();
    }
    if let Some(var_2001) = &input.processor_features {
        let mut array_2002 = object.key("ProcessorFeatures").start_array();
        for item_2003 in var_2001 {
            {
                let mut object_2004 = array_2002.value().start_object();
                crate::json_ser::serialize_structure_aws_rds_db_processor_feature(
                    &mut object_2004,
                    item_2003,
                );
                object_2004.finish();
            }
        }
        array_2002.finish();
    }
}

pub fn serialize_structure_aws_rds_db_option_group_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbOptionGroupMembership,
) {
    if let Some(var_2005) = &input.option_group_name {
        object.key("OptionGroupName").string(var_2005);
    }
    if let Some(var_2006) = &input.status {
        object.key("Status").string(var_2006);
    }
}

pub fn serialize_structure_aws_rds_db_status_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbStatusInfo,
) {
    if let Some(var_2007) = &input.status_type {
        object.key("StatusType").string(var_2007);
    }
    if input.normal {
        object.key("Normal").boolean(input.normal);
    }
    if let Some(var_2008) = &input.status {
        object.key("Status").string(var_2008);
    }
    if let Some(var_2009) = &input.message {
        object.key("Message").string(var_2009);
    }
}

pub fn serialize_structure_aws_rds_db_domain_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbDomainMembership,
) {
    if let Some(var_2010) = &input.domain {
        object.key("Domain").string(var_2010);
    }
    if let Some(var_2011) = &input.status {
        object.key("Status").string(var_2011);
    }
    if let Some(var_2012) = &input.fqdn {
        object.key("Fqdn").string(var_2012);
    }
    if let Some(var_2013) = &input.iam_role_name {
        object.key("IamRoleName").string(var_2013);
    }
}

pub fn serialize_structure_aws_rds_db_processor_feature(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbProcessorFeature,
) {
    if let Some(var_2014) = &input.name {
        object.key("Name").string(var_2014);
    }
    if let Some(var_2015) = &input.value {
        object.key("Value").string(var_2015);
    }
}

pub fn serialize_structure_aws_sns_topic_subscription(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicSubscription,
) {
    if let Some(var_2016) = &input.endpoint {
        object.key("Endpoint").string(var_2016);
    }
    if let Some(var_2017) = &input.protocol {
        object.key("Protocol").string(var_2017);
    }
}

pub fn serialize_structure_aws_waf_web_acl_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclRule,
) {
    if let Some(var_2018) = &input.action {
        let mut object_2019 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_waf_action(&mut object_2019, var_2018);
        object_2019.finish();
    }
    if let Some(var_2020) = &input.excluded_rules {
        let mut array_2021 = object.key("ExcludedRules").start_array();
        for item_2022 in var_2020 {
            {
                let mut object_2023 = array_2021.value().start_object();
                crate::json_ser::serialize_structure_waf_excluded_rule(&mut object_2023, item_2022);
                object_2023.finish();
            }
        }
        array_2021.finish();
    }
    if let Some(var_2024) = &input.override_action {
        let mut object_2025 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_waf_override_action(&mut object_2025, var_2024);
        object_2025.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2026) = &input.rule_id {
        object.key("RuleId").string(var_2026);
    }
    if let Some(var_2027) = &input.r#type {
        object.key("Type").string(var_2027);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_associated_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterAssociatedRole,
) {
    if let Some(var_2028) = &input.role_arn {
        object.key("RoleArn").string(var_2028);
    }
    if let Some(var_2029) = &input.status {
        object.key("Status").string(var_2029);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_option_group_membership(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterOptionGroupMembership,
) {
    if let Some(var_2030) = &input.db_cluster_option_group_name {
        object.key("DbClusterOptionGroupName").string(var_2030);
    }
    if let Some(var_2031) = &input.status {
        object.key("Status").string(var_2031);
    }
}

pub fn serialize_structure_aws_rds_db_cluster_member(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterMember,
) {
    if input.is_cluster_writer {
        object
            .key("IsClusterWriter")
            .boolean(input.is_cluster_writer);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_2032) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2032);
    }
    if let Some(var_2033) = &input.db_cluster_parameter_group_status {
        object.key("DbClusterParameterGroupStatus").string(var_2033);
    }
}

pub fn serialize_structure_aws_ecs_cluster_cluster_settings_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterClusterSettingsDetails,
) {
    if let Some(var_2034) = &input.name {
        object.key("Name").string(var_2034);
    }
    if let Some(var_2035) = &input.value {
        object.key("Value").string(var_2035);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationDetails,
) {
    if let Some(var_2036) = &input.execute_command_configuration {
        let mut object_2037 = object.key("ExecuteCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_details(&mut object_2037, var_2036);
        object_2037.finish();
    }
}

pub fn serialize_structure_aws_ecs_cluster_default_capacity_provider_strategy_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDefaultCapacityProviderStrategyDetails,
) {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2038) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2038);
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.weight).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) {
    if let Some(var_2039) = &input.command {
        let mut array_2040 = object.key("Command").start_array();
        for item_2041 in var_2039 {
            {
                array_2040.value().string(item_2041);
            }
        }
        array_2040.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_2042) = &input.depends_on {
        let mut array_2043 = object.key("DependsOn").start_array();
        for item_2044 in var_2042 {
            {
                let mut object_2045 = array_2043.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_2045, item_2044);
                object_2045.finish();
            }
        }
        array_2043.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_2046) = &input.dns_search_domains {
        let mut array_2047 = object.key("DnsSearchDomains").start_array();
        for item_2048 in var_2046 {
            {
                array_2047.value().string(item_2048);
            }
        }
        array_2047.finish();
    }
    if let Some(var_2049) = &input.dns_servers {
        let mut array_2050 = object.key("DnsServers").start_array();
        for item_2051 in var_2049 {
            {
                array_2050.value().string(item_2051);
            }
        }
        array_2050.finish();
    }
    if let Some(var_2052) = &input.docker_labels {
        let mut object_2053 = object.key("DockerLabels").start_object();
        for (key_2054, value_2055) in var_2052 {
            {
                object_2053.key(key_2054).string(value_2055);
            }
        }
        object_2053.finish();
    }
    if let Some(var_2056) = &input.docker_security_options {
        let mut array_2057 = object.key("DockerSecurityOptions").start_array();
        for item_2058 in var_2056 {
            {
                array_2057.value().string(item_2058);
            }
        }
        array_2057.finish();
    }
    if let Some(var_2059) = &input.entry_point {
        let mut array_2060 = object.key("EntryPoint").start_array();
        for item_2061 in var_2059 {
            {
                array_2060.value().string(item_2061);
            }
        }
        array_2060.finish();
    }
    if let Some(var_2062) = &input.environment {
        let mut array_2063 = object.key("Environment").start_array();
        for item_2064 in var_2062 {
            {
                let mut object_2065 = array_2063.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_environment_details(&mut object_2065, item_2064);
                object_2065.finish();
            }
        }
        array_2063.finish();
    }
    if let Some(var_2066) = &input.environment_files {
        let mut array_2067 = object.key("EnvironmentFiles").start_array();
        for item_2068 in var_2066 {
            {
                let mut object_2069 = array_2067.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_2069, item_2068);
                object_2069.finish();
            }
        }
        array_2067.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_2070) = &input.extra_hosts {
        let mut array_2071 = object.key("ExtraHosts").start_array();
        for item_2072 in var_2070 {
            {
                let mut object_2073 = array_2071.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_2073, item_2072);
                object_2073.finish();
            }
        }
        array_2071.finish();
    }
    if let Some(var_2074) = &input.firelens_configuration {
        let mut object_2075 = object.key("FirelensConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_2075, var_2074);
        object_2075.finish();
    }
    if let Some(var_2076) = &input.health_check {
        let mut object_2077 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_2077, var_2076);
        object_2077.finish();
    }
    if let Some(var_2078) = &input.hostname {
        object.key("Hostname").string(var_2078);
    }
    if let Some(var_2079) = &input.image {
        object.key("Image").string(var_2079);
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_2080) = &input.links {
        let mut array_2081 = object.key("Links").start_array();
        for item_2082 in var_2080 {
            {
                array_2081.value().string(item_2082);
            }
        }
        array_2081.finish();
    }
    if let Some(var_2083) = &input.linux_parameters {
        let mut object_2084 = object.key("LinuxParameters").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_2084, var_2083);
        object_2084.finish();
    }
    if let Some(var_2085) = &input.log_configuration {
        let mut object_2086 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_2086, var_2085);
        object_2086.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_2087) = &input.mount_points {
        let mut array_2088 = object.key("MountPoints").start_array();
        for item_2089 in var_2087 {
            {
                let mut object_2090 = array_2088.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_2090, item_2089);
                object_2090.finish();
            }
        }
        array_2088.finish();
    }
    if let Some(var_2091) = &input.name {
        object.key("Name").string(var_2091);
    }
    if let Some(var_2092) = &input.port_mappings {
        let mut array_2093 = object.key("PortMappings").start_array();
        for item_2094 in var_2092 {
            {
                let mut object_2095 = array_2093.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_2095, item_2094);
                object_2095.finish();
            }
        }
        array_2093.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_2096) = &input.repository_credentials {
        let mut object_2097 = object.key("RepositoryCredentials").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_2097, var_2096);
        object_2097.finish();
    }
    if let Some(var_2098) = &input.resource_requirements {
        let mut array_2099 = object.key("ResourceRequirements").start_array();
        for item_2100 in var_2098 {
            {
                let mut object_2101 = array_2099.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_2101, item_2100);
                object_2101.finish();
            }
        }
        array_2099.finish();
    }
    if let Some(var_2102) = &input.secrets {
        let mut array_2103 = object.key("Secrets").start_array();
        for item_2104 in var_2102 {
            {
                let mut object_2105 = array_2103.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_2105, item_2104);
                object_2105.finish();
            }
        }
        array_2103.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_2106) = &input.system_controls {
        let mut array_2107 = object.key("SystemControls").start_array();
        for item_2108 in var_2106 {
            {
                let mut object_2109 = array_2107.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_2109, item_2108);
                object_2109.finish();
            }
        }
        array_2107.finish();
    }
    if let Some(var_2110) = &input.ulimits {
        let mut array_2111 = object.key("Ulimits").start_array();
        for item_2112 in var_2110 {
            {
                let mut object_2113 = array_2111.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_2113, item_2112);
                object_2113.finish();
            }
        }
        array_2111.finish();
    }
    if let Some(var_2114) = &input.user {
        object.key("User").string(var_2114);
    }
    if let Some(var_2115) = &input.volumes_from {
        let mut array_2116 = object.key("VolumesFrom").start_array();
        for item_2117 in var_2115 {
            {
                let mut object_2118 = array_2116.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_2118, item_2117);
                object_2118.finish();
            }
        }
        array_2116.finish();
    }
    if let Some(var_2119) = &input.working_directory {
        object.key("WorkingDirectory").string(var_2119);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_inference_accelerators_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionInferenceAcceleratorsDetails,
) {
    if let Some(var_2120) = &input.device_name {
        object.key("DeviceName").string(var_2120);
    }
    if let Some(var_2121) = &input.device_type {
        object.key("DeviceType").string(var_2121);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_placement_constraints_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionPlacementConstraintsDetails,
) {
    if let Some(var_2122) = &input.expression {
        object.key("Expression").string(var_2122);
    }
    if let Some(var_2123) = &input.r#type {
        object.key("Type").string(var_2123);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_proxy_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationDetails,
) {
    if let Some(var_2124) = &input.container_name {
        object.key("ContainerName").string(var_2124);
    }
    if let Some(var_2125) = &input.proxy_configuration_properties {
        let mut array_2126 = object.key("ProxyConfigurationProperties").start_array();
        for item_2127 in var_2125 {
            {
                let mut object_2128 = array_2126.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(&mut object_2128, item_2127);
                object_2128.finish();
            }
        }
        array_2126.finish();
    }
    if let Some(var_2129) = &input.r#type {
        object.key("Type").string(var_2129);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDetails,
) {
    if let Some(var_2130) = &input.docker_volume_configuration {
        let mut object_2131 = object.key("DockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_docker_volume_configuration_details(&mut object_2131, var_2130);
        object_2131.finish();
    }
    if let Some(var_2132) = &input.efs_volume_configuration {
        let mut object_2133 = object.key("EfsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_details(&mut object_2133, var_2132);
        object_2133.finish();
    }
    if let Some(var_2134) = &input.host {
        let mut object_2135 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_host_details(
            &mut object_2135,
            var_2134,
        );
        object_2135.finish();
    }
    if let Some(var_2136) = &input.name {
        object.key("Name").string(var_2136);
    }
}

pub fn serialize_structure_ip_organization_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpOrganizationDetails,
) {
    if input.asn != 0 {
        object.key("Asn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2137) = &input.asn_org {
        object.key("AsnOrg").string(var_2137);
    }
    if let Some(var_2138) = &input.isp {
        object.key("Isp").string(var_2138);
    }
    if let Some(var_2139) = &input.org {
        object.key("Org").string(var_2139);
    }
}

pub fn serialize_structure_country(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Country,
) {
    if let Some(var_2140) = &input.country_code {
        object.key("CountryCode").string(var_2140);
    }
    if let Some(var_2141) = &input.country_name {
        object.key("CountryName").string(var_2141);
    }
}

pub fn serialize_structure_city(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::City,
) {
    if let Some(var_2142) = &input.city_name {
        object.key("CityName").string(var_2142);
    }
}

pub fn serialize_structure_geo_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoLocation,
) {
    if input.lon != 0.0 {
        object.key("Lon").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lon).into()),
        );
    }
    if input.lat != 0.0 {
        object.key("Lat").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lat).into()),
        );
    }
}

pub fn serialize_structure_action_local_ip_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalIpDetails,
) {
    if let Some(var_2143) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2143);
    }
}

pub fn serialize_structure_sensitive_data_detections(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataDetections,
) {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2144) = &input.r#type {
        object.key("Type").string(var_2144);
    }
    if let Some(var_2145) = &input.occurrences {
        let mut object_2146 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_occurrences(&mut object_2146, var_2145);
        object_2146.finish();
    }
}

pub fn serialize_structure_custom_data_identifiers_detections(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersDetections,
) {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2147) = &input.arn {
        object.key("Arn").string(var_2147);
    }
    if let Some(var_2148) = &input.name {
        object.key("Name").string(var_2148);
    }
    if let Some(var_2149) = &input.occurrences {
        let mut object_2150 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_occurrences(&mut object_2150, var_2149);
        object_2150.finish();
    }
}

pub fn serialize_structure_aws_code_build_project_environment_registry_credential(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentRegistryCredential,
) {
    if let Some(var_2151) = &input.credential {
        object.key("Credential").string(var_2151);
    }
    if let Some(var_2152) = &input.credential_provider {
        object.key("CredentialProvider").string(var_2152);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_cache_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehavior,
) {
    if let Some(var_2153) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2153);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginItem,
) {
    if let Some(var_2154) = &input.domain_name {
        object.key("DomainName").string(var_2154);
    }
    if let Some(var_2155) = &input.id {
        object.key("Id").string(var_2155);
    }
    if let Some(var_2156) = &input.origin_path {
        object.key("OriginPath").string(var_2156);
    }
    if let Some(var_2157) = &input.s3_origin_config {
        let mut object_2158 = object.key("S3OriginConfig").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_s3_origin_config(
            &mut object_2158,
            var_2157,
        );
        object_2158.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroup,
) {
    if let Some(var_2159) = &input.failover_criteria {
        let mut object_2160 = object.key("FailoverCriteria").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group_failover(
            &mut object_2160,
            var_2159,
        );
        object_2160.finish();
    }
}

pub fn serialize_structure_aws_ec2_security_group_user_id_group_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupUserIdGroupPair,
) {
    if let Some(var_2161) = &input.group_id {
        object.key("GroupId").string(var_2161);
    }
    if let Some(var_2162) = &input.group_name {
        object.key("GroupName").string(var_2162);
    }
    if let Some(var_2163) = &input.peering_status {
        object.key("PeeringStatus").string(var_2163);
    }
    if let Some(var_2164) = &input.user_id {
        object.key("UserId").string(var_2164);
    }
    if let Some(var_2165) = &input.vpc_id {
        object.key("VpcId").string(var_2165);
    }
    if let Some(var_2166) = &input.vpc_peering_connection_id {
        object.key("VpcPeeringConnectionId").string(var_2166);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ip_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpRange,
) {
    if let Some(var_2167) = &input.cidr_ip {
        object.key("CidrIp").string(var_2167);
    }
}

pub fn serialize_structure_aws_ec2_security_group_ipv6_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpv6Range,
) {
    if let Some(var_2168) = &input.cidr_ipv6 {
        object.key("CidrIpv6").string(var_2168);
    }
}

pub fn serialize_structure_aws_ec2_security_group_prefix_list_id(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupPrefixListId,
) {
    if let Some(var_2169) = &input.prefix_list_id {
        object.key("PrefixListId").string(var_2169);
    }
}

pub fn serialize_structure_icmp_type_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IcmpTypeCode,
) {
    if input.code != 0 {
        object.key("Code").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.code).into()),
        );
    }
    if input.r#type != 0 {
        object.key("Type").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.r#type).into()),
        );
    }
}

pub fn serialize_structure_port_range_from_to(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFromTo,
) {
    if input.from != 0 {
        object.key("From").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from).into()),
        );
    }
    if input.to != 0 {
        object.key("To").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to).into()),
        );
    }
}

pub fn serialize_structure_aws_elasticsearch_domain_log_publishing_options_log_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptionsLogConfig,
) {
    if let Some(var_2170) = &input.cloud_watch_logs_log_group_arn {
        object.key("CloudWatchLogsLogGroupArn").string(var_2170);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionRule,
) {
    if let Some(var_2171) = &input.apply_server_side_encryption_by_default {
        let mut object_2172 = object
            .key("ApplyServerSideEncryptionByDefault")
            .start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_server_side_encryption_by_default(
            &mut object_2172,
            var_2171,
        );
        object_2172.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) {
    if let Some(var_2173) = &input.abort_incomplete_multipart_upload {
        let mut object_2174 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_2174, var_2173);
        object_2174.finish();
    }
    if let Some(var_2175) = &input.expiration_date {
        object.key("ExpirationDate").string(var_2175);
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_2176) = &input.filter {
        let mut object_2177 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_2177, var_2176);
        object_2177.finish();
    }
    if let Some(var_2178) = &input.id {
        object.key("ID").string(var_2178);
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_2179) = &input.noncurrent_version_transitions {
        let mut array_2180 = object.key("NoncurrentVersionTransitions").start_array();
        for item_2181 in var_2179 {
            {
                let mut object_2182 = array_2180.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_2182, item_2181);
                object_2182.finish();
            }
        }
        array_2180.finish();
    }
    if let Some(var_2183) = &input.prefix {
        object.key("Prefix").string(var_2183);
    }
    if let Some(var_2184) = &input.status {
        object.key("Status").string(var_2184);
    }
    if let Some(var_2185) = &input.transitions {
        let mut array_2186 = object.key("Transitions").start_array();
        for item_2187 in var_2185 {
            {
                let mut object_2188 = array_2186.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_2188, item_2187);
                object_2188.finish();
            }
        }
        array_2186.finish();
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextAttributes,
) {
    if input.mfa_authenticated {
        object
            .key("MfaAuthenticated")
            .boolean(input.mfa_authenticated);
    }
    if let Some(var_2189) = &input.creation_date {
        object.key("CreationDate").string(var_2189);
    }
}

pub fn serialize_structure_aws_iam_access_key_session_context_session_issuer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextSessionIssuer,
) {
    if let Some(var_2190) = &input.r#type {
        object.key("Type").string(var_2190);
    }
    if let Some(var_2191) = &input.principal_id {
        object.key("PrincipalId").string(var_2191);
    }
    if let Some(var_2192) = &input.arn {
        object.key("Arn").string(var_2192);
    }
    if let Some(var_2193) = &input.account_id {
        object.key("AccountId").string(var_2193);
    }
    if let Some(var_2194) = &input.user_name {
        object.key("UserName").string(var_2194);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_projection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProjection,
) {
    if let Some(var_2195) = &input.non_key_attributes {
        let mut array_2196 = object.key("NonKeyAttributes").start_array();
        for item_2197 in var_2195 {
            {
                array_2196.value().string(item_2197);
            }
        }
        array_2196.finish();
    }
    if let Some(var_2198) = &input.projection_type {
        object.key("ProjectionType").string(var_2198);
    }
}

pub fn serialize_structure_aws_dynamo_db_table_replica_global_secondary_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
) {
    if let Some(var_2199) = &input.index_name {
        object.key("IndexName").string(var_2199);
    }
    if let Some(var_2200) = &input.provisioned_throughput_override {
        let mut object_2201 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
            &mut object_2201,
            var_2200,
        );
        object_2201.finish();
    }
}

pub fn serialize_structure_aws_dynamo_db_table_provisioned_throughput_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughputOverride,
) {
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
}

pub fn serialize_structure_aws_ssm_compliance_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmComplianceSummary,
) {
    if let Some(var_2202) = &input.status {
        object.key("Status").string(var_2202);
    }
    if input.compliant_critical_count != 0 {
        object.key("CompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_critical_count).into()),
        );
    }
    if input.compliant_high_count != 0 {
        object.key("CompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_high_count).into()),
        );
    }
    if input.compliant_medium_count != 0 {
        object.key("CompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_medium_count).into()),
        );
    }
    if let Some(var_2203) = &input.execution_type {
        object.key("ExecutionType").string(var_2203);
    }
    if input.non_compliant_critical_count != 0 {
        object.key("NonCompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_critical_count).into()),
        );
    }
    if input.compliant_informational_count != 0 {
        object.key("CompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_informational_count).into()),
        );
    }
    if input.non_compliant_informational_count != 0 {
        object.key("NonCompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_informational_count).into()),
        );
    }
    if input.compliant_unspecified_count != 0 {
        object.key("CompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_unspecified_count).into()),
        );
    }
    if input.non_compliant_low_count != 0 {
        object.key("NonCompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_low_count).into()),
        );
    }
    if input.non_compliant_high_count != 0 {
        object.key("NonCompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_high_count).into()),
        );
    }
    if input.compliant_low_count != 0 {
        object.key("CompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.compliant_low_count).into()),
        );
    }
    if let Some(var_2204) = &input.compliance_type {
        object.key("ComplianceType").string(var_2204);
    }
    if let Some(var_2205) = &input.patch_baseline_id {
        object.key("PatchBaselineId").string(var_2205);
    }
    if let Some(var_2206) = &input.overall_severity {
        object.key("OverallSeverity").string(var_2206);
    }
    if input.non_compliant_medium_count != 0 {
        object.key("NonCompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_medium_count).into()),
        );
    }
    if input.non_compliant_unspecified_count != 0 {
        object.key("NonCompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.non_compliant_unspecified_count).into()),
        );
    }
    if let Some(var_2207) = &input.patch_group {
        object.key("PatchGroup").string(var_2207);
    }
}

pub fn serialize_structure_aws_certificate_manager_certificate_resource_record(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateResourceRecord,
) {
    if let Some(var_2208) = &input.name {
        object.key("Name").string(var_2208);
    }
    if let Some(var_2209) = &input.r#type {
        object.key("Type").string(var_2209);
    }
    if let Some(var_2210) = &input.value {
        object.key("Value").string(var_2210);
    }
}

pub fn serialize_structure_aws_redshift_cluster_cluster_parameter_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterStatus,
) {
    if let Some(var_2211) = &input.parameter_name {
        object.key("ParameterName").string(var_2211);
    }
    if let Some(var_2212) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2212);
    }
    if let Some(var_2213) = &input.parameter_apply_error_description {
        object
            .key("ParameterApplyErrorDescription")
            .string(var_2213);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_listener(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListener,
) {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2214) = &input.instance_protocol {
        object.key("InstanceProtocol").string(var_2214);
    }
    if input.load_balancer_port != 0 {
        object.key("LoadBalancerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.load_balancer_port).into()),
        );
    }
    if let Some(var_2215) = &input.protocol {
        object.key("Protocol").string(var_2215);
    }
    if let Some(var_2216) = &input.ssl_certificate_id {
        object.key("SslCertificateId").string(var_2216);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_access_log(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAccessLog,
) {
    if input.emit_interval != 0 {
        object.key("EmitInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.emit_interval).into()),
        );
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2217) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2217);
    }
    if let Some(var_2218) = &input.s3_bucket_prefix {
        object.key("S3BucketPrefix").string(var_2218);
    }
}

pub fn serialize_structure_aws_elb_load_balancer_connection_draining(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionDraining,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_connection_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionSettings,
) {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_elb_load_balancer_cross_zone_load_balancing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerCrossZoneLoadBalancing,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_aws_elb_app_cookie_stickiness_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbAppCookieStickinessPolicy,
) {
    if let Some(var_2219) = &input.cookie_name {
        object.key("CookieName").string(var_2219);
    }
    if let Some(var_2220) = &input.policy_name {
        object.key("PolicyName").string(var_2220);
    }
}

pub fn serialize_structure_aws_elb_lb_cookie_stickiness_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLbCookieStickinessPolicy,
) {
    if input.cookie_expiration_period != 0 {
        object.key("CookieExpirationPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cookie_expiration_period).into()),
        );
    }
    if let Some(var_2221) = &input.policy_name {
        object.key("PolicyName").string(var_2221);
    }
}

pub fn serialize_structure_aws_iam_instance_profile_role(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfileRole,
) {
    if let Some(var_2222) = &input.arn {
        object.key("Arn").string(var_2222);
    }
    if let Some(var_2223) = &input.assume_role_policy_document {
        object.key("AssumeRolePolicyDocument").string(var_2223);
    }
    if let Some(var_2224) = &input.create_date {
        object.key("CreateDate").string(var_2224);
    }
    if let Some(var_2225) = &input.path {
        object.key("Path").string(var_2225);
    }
    if let Some(var_2226) = &input.role_id {
        object.key("RoleId").string(var_2226);
    }
    if let Some(var_2227) = &input.role_name {
        object.key("RoleName").string(var_2227);
    }
}

pub fn serialize_structure_aws_lambda_function_environment_error(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironmentError,
) {
    if let Some(var_2228) = &input.error_code {
        object.key("ErrorCode").string(var_2228);
    }
    if let Some(var_2229) = &input.message {
        object.key("Message").string(var_2229);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group_subnet(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnet,
) {
    if let Some(var_2230) = &input.subnet_identifier {
        object.key("SubnetIdentifier").string(var_2230);
    }
    if let Some(var_2231) = &input.subnet_availability_zone {
        let mut object_2232 = object.key("SubnetAvailabilityZone").start_object();
        crate::json_ser::serialize_structure_aws_rds_db_subnet_group_subnet_availability_zone(
            &mut object_2232,
            var_2231,
        );
        object_2232.finish();
    }
    if let Some(var_2233) = &input.subnet_status {
        object.key("SubnetStatus").string(var_2233);
    }
}

pub fn serialize_structure_aws_rds_pending_cloud_watch_logs_exports(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsPendingCloudWatchLogsExports,
) {
    if let Some(var_2234) = &input.log_types_to_enable {
        let mut array_2235 = object.key("LogTypesToEnable").start_array();
        for item_2236 in var_2234 {
            {
                array_2235.value().string(item_2236);
            }
        }
        array_2235.finish();
    }
    if let Some(var_2237) = &input.log_types_to_disable {
        let mut array_2238 = object.key("LogTypesToDisable").start_array();
        for item_2239 in var_2237 {
            {
                array_2238.value().string(item_2239);
            }
        }
        array_2238.finish();
    }
}

pub fn serialize_structure_waf_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafAction,
) {
    if let Some(var_2240) = &input.r#type {
        object.key("Type").string(var_2240);
    }
}

pub fn serialize_structure_waf_excluded_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafExcludedRule,
) {
    if let Some(var_2241) = &input.rule_id {
        object.key("RuleId").string(var_2241);
    }
}

pub fn serialize_structure_waf_override_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafOverrideAction,
) {
    if let Some(var_2242) = &input.r#type {
        object.key("Type").string(var_2242);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationDetails,
) {
    if let Some(var_2243) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2243);
    }
    if let Some(var_2244) = &input.log_configuration {
        let mut object_2245 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(&mut object_2245, var_2244);
        object_2245.finish();
    }
    if let Some(var_2246) = &input.logging {
        object.key("Logging").string(var_2246);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_depends_on_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails,
) {
    if let Some(var_2247) = &input.condition {
        object.key("Condition").string(var_2247);
    }
    if let Some(var_2248) = &input.container_name {
        object.key("ContainerName").string(var_2248);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_environment_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails,
) {
    if let Some(var_2249) = &input.name {
        object.key("Name").string(var_2249);
    }
    if let Some(var_2250) = &input.value {
        object.key("Value").string(var_2250);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_environment_files_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails,
) {
    if let Some(var_2251) = &input.r#type {
        object.key("Type").string(var_2251);
    }
    if let Some(var_2252) = &input.value {
        object.key("Value").string(var_2252);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_extra_hosts_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails,
) {
    if let Some(var_2253) = &input.hostname {
        object.key("Hostname").string(var_2253);
    }
    if let Some(var_2254) = &input.ip_address {
        object.key("IpAddress").string(var_2254);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_firelens_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails,
) {
    if let Some(var_2255) = &input.options {
        let mut object_2256 = object.key("Options").start_object();
        for (key_2257, value_2258) in var_2255 {
            {
                object_2256.key(key_2257).string(value_2258);
            }
        }
        object_2256.finish();
    }
    if let Some(var_2259) = &input.r#type {
        object.key("Type").string(var_2259);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_health_check_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails,
) {
    if let Some(var_2260) = &input.command {
        let mut array_2261 = object.key("Command").start_array();
        for item_2262 in var_2260 {
            {
                array_2261.value().string(item_2262);
            }
        }
        array_2261.finish();
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if input.retries != 0 {
        object.key("Retries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.start_period != 0 {
        object.key("StartPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_period).into()),
        );
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails,
) {
    if let Some(var_2263) = &input.capabilities {
        let mut object_2264 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(&mut object_2264, var_2263);
        object_2264.finish();
    }
    if let Some(var_2265) = &input.devices {
        let mut array_2266 = object.key("Devices").start_array();
        for item_2267 in var_2265 {
            {
                let mut object_2268 = array_2266.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(&mut object_2268, item_2267);
                object_2268.finish();
            }
        }
        array_2266.finish();
    }
    if input.init_process_enabled {
        object
            .key("InitProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.max_swap != 0 {
        object.key("MaxSwap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.shared_memory_size != 0 {
        object.key("SharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("Swappiness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    if let Some(var_2269) = &input.tmpfs {
        let mut array_2270 = object.key("Tmpfs").start_array();
        for item_2271 in var_2269 {
            {
                let mut object_2272 = array_2270.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(&mut object_2272, item_2271);
                object_2272.finish();
            }
        }
        array_2270.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails,
) {
    if let Some(var_2273) = &input.log_driver {
        object.key("LogDriver").string(var_2273);
    }
    if let Some(var_2274) = &input.options {
        let mut object_2275 = object.key("Options").start_object();
        for (key_2276, value_2277) in var_2274 {
            {
                object_2275.key(key_2276).string(value_2277);
            }
        }
        object_2275.finish();
    }
    if let Some(var_2278) = &input.secret_options {
        let mut array_2279 = object.key("SecretOptions").start_array();
        for item_2280 in var_2278 {
            {
                let mut object_2281 = array_2279.value().start_object();
                crate::json_ser::serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(&mut object_2281, item_2280);
                object_2281.finish();
            }
        }
        array_2279.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_mount_points_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails,
) {
    if let Some(var_2282) = &input.container_path {
        object.key("ContainerPath").string(var_2282);
    }
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2283) = &input.source_volume {
        object.key("SourceVolume").string(var_2283);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_port_mappings_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails,
) {
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.host_port != 0 {
        object.key("HostPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.host_port).into()),
        );
    }
    if let Some(var_2284) = &input.protocol {
        object.key("Protocol").string(var_2284);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_repository_credentials_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails,
) {
    if let Some(var_2285) = &input.credentials_parameter {
        object.key("CredentialsParameter").string(var_2285);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_resource_requirements_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails,
) {
    if let Some(var_2286) = &input.r#type {
        object.key("Type").string(var_2286);
    }
    if let Some(var_2287) = &input.value {
        object.key("Value").string(var_2287);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_secrets_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails,
) {
    if let Some(var_2288) = &input.name {
        object.key("Name").string(var_2288);
    }
    if let Some(var_2289) = &input.value_from {
        object.key("ValueFrom").string(var_2289);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_system_controls_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails,
) {
    if let Some(var_2290) = &input.namespace {
        object.key("Namespace").string(var_2290);
    }
    if let Some(var_2291) = &input.value {
        object.key("Value").string(var_2291);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_ulimits_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails,
) {
    if input.hard_limit != 0 {
        object.key("HardLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_2292) = &input.name {
        object.key("Name").string(var_2292);
    }
    if input.soft_limit != 0 {
        object.key("SoftLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_volumes_from_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails,
) {
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2293) = &input.source_container {
        object.key("SourceContainer").string(var_2293);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails,
) {
    if let Some(var_2294) = &input.name {
        object.key("Name").string(var_2294);
    }
    if let Some(var_2295) = &input.value {
        object.key("Value").string(var_2295);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_2296) = &input.driver {
        object.key("Driver").string(var_2296);
    }
    if let Some(var_2297) = &input.driver_opts {
        let mut object_2298 = object.key("DriverOpts").start_object();
        for (key_2299, value_2300) in var_2297 {
            {
                object_2298.key(key_2299).string(value_2300);
            }
        }
        object_2298.finish();
    }
    if let Some(var_2301) = &input.labels {
        let mut object_2302 = object.key("Labels").start_object();
        for (key_2303, value_2304) in var_2301 {
            {
                object_2302.key(key_2303).string(value_2304);
            }
        }
        object_2302.finish();
    }
    if let Some(var_2305) = &input.scope {
        object.key("Scope").string(var_2305);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
) {
    if let Some(var_2306) = &input.authorization_config {
        let mut object_2307 = object.key("AuthorizationConfig").start_object();
        crate::json_ser::serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(&mut object_2307, var_2306);
        object_2307.finish();
    }
    if let Some(var_2308) = &input.filesystem_id {
        object.key("FilesystemId").string(var_2308);
    }
    if let Some(var_2309) = &input.root_directory {
        object.key("RootDirectory").string(var_2309);
    }
    if let Some(var_2310) = &input.transit_encryption {
        object.key("TransitEncryption").string(var_2310);
    }
    if input.transit_encryption_port != 0 {
        object.key("TransitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_host_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesHostDetails,
) {
    if let Some(var_2311) = &input.source_path {
        object.key("SourcePath").string(var_2311);
    }
}

pub fn serialize_structure_occurrences(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Occurrences,
) {
    if let Some(var_2312) = &input.line_ranges {
        let mut array_2313 = object.key("LineRanges").start_array();
        for item_2314 in var_2312 {
            {
                let mut object_2315 = array_2313.value().start_object();
                crate::json_ser::serialize_structure_range(&mut object_2315, item_2314);
                object_2315.finish();
            }
        }
        array_2313.finish();
    }
    if let Some(var_2316) = &input.offset_ranges {
        let mut array_2317 = object.key("OffsetRanges").start_array();
        for item_2318 in var_2316 {
            {
                let mut object_2319 = array_2317.value().start_object();
                crate::json_ser::serialize_structure_range(&mut object_2319, item_2318);
                object_2319.finish();
            }
        }
        array_2317.finish();
    }
    if let Some(var_2320) = &input.pages {
        let mut array_2321 = object.key("Pages").start_array();
        for item_2322 in var_2320 {
            {
                let mut object_2323 = array_2321.value().start_object();
                crate::json_ser::serialize_structure_page(&mut object_2323, item_2322);
                object_2323.finish();
            }
        }
        array_2321.finish();
    }
    if let Some(var_2324) = &input.records {
        let mut array_2325 = object.key("Records").start_array();
        for item_2326 in var_2324 {
            {
                let mut object_2327 = array_2325.value().start_object();
                crate::json_ser::serialize_structure_record(&mut object_2327, item_2326);
                object_2327.finish();
            }
        }
        array_2325.finish();
    }
    if let Some(var_2328) = &input.cells {
        let mut array_2329 = object.key("Cells").start_array();
        for item_2330 in var_2328 {
            {
                let mut object_2331 = array_2329.value().start_object();
                crate::json_ser::serialize_structure_cell(&mut object_2331, item_2330);
                object_2331.finish();
            }
        }
        array_2329.finish();
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_s3_origin_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginS3OriginConfig,
) {
    if let Some(var_2332) = &input.origin_access_identity {
        object.key("OriginAccessIdentity").string(var_2332);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group_failover(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailover,
) {
    if let Some(var_2333) = &input.status_codes {
        let mut object_2334 = object.key("StatusCodes").start_object();
        crate::json_ser::serialize_structure_aws_cloud_front_distribution_origin_group_failover_status_codes(&mut object_2334, var_2333);
        object_2334.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_server_side_encryption_by_default(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionByDefault,
) {
    if let Some(var_2335) = &input.sse_algorithm {
        object.key("SSEAlgorithm").string(var_2335);
    }
    if let Some(var_2336) = &input.kms_master_key_id {
        object.key("KMSMasterKeyID").string(var_2336);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
) {
    if input.days_after_initiation != 0 {
        object.key("DaysAfterInitiation").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days_after_initiation).into()),
        );
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails,
) {
    if let Some(var_2337) = &input.predicate {
        let mut object_2338 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(&mut object_2338, var_2337);
        object_2338.finish();
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
) {
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2339) = &input.storage_class {
        object.key("StorageClass").string(var_2339);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails,
) {
    if let Some(var_2340) = &input.date {
        object.key("Date").string(var_2340);
    }
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2341) = &input.storage_class {
        object.key("StorageClass").string(var_2341);
    }
}

pub fn serialize_structure_aws_rds_db_subnet_group_subnet_availability_zone(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnetAvailabilityZone,
) {
    if let Some(var_2342) = &input.name {
        object.key("Name").string(var_2342);
    }
}

pub fn serialize_structure_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails,
) {
    if input.cloud_watch_encryption_enabled {
        object
            .key("CloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_2343) = &input.cloud_watch_log_group_name {
        object.key("CloudWatchLogGroupName").string(var_2343);
    }
    if let Some(var_2344) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2344);
    }
    if input.s3_encryption_enabled {
        object
            .key("S3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_2345) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2345);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails,
) {
    if let Some(var_2346) = &input.add {
        let mut array_2347 = object.key("Add").start_array();
        for item_2348 in var_2346 {
            {
                array_2347.value().string(item_2348);
            }
        }
        array_2347.finish();
    }
    if let Some(var_2349) = &input.drop {
        let mut array_2350 = object.key("Drop").start_array();
        for item_2351 in var_2349 {
            {
                array_2350.value().string(item_2351);
            }
        }
        array_2350.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails,
) {
    if let Some(var_2352) = &input.container_path {
        object.key("ContainerPath").string(var_2352);
    }
    if let Some(var_2353) = &input.host_path {
        object.key("HostPath").string(var_2353);
    }
    if let Some(var_2354) = &input.permissions {
        let mut array_2355 = object.key("Permissions").start_array();
        for item_2356 in var_2354 {
            {
                array_2355.value().string(item_2356);
            }
        }
        array_2355.finish();
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails,
) {
    if let Some(var_2357) = &input.container_path {
        object.key("ContainerPath").string(var_2357);
    }
    if let Some(var_2358) = &input.mount_options {
        let mut array_2359 = object.key("MountOptions").start_array();
        for item_2360 in var_2358 {
            {
                array_2359.value().string(item_2360);
            }
        }
        array_2359.finish();
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
}

pub fn serialize_structure_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
) {
    if let Some(var_2361) = &input.name {
        object.key("Name").string(var_2361);
    }
    if let Some(var_2362) = &input.value_from {
        object.key("ValueFrom").string(var_2362);
    }
}

pub fn serialize_structure_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
) {
    if let Some(var_2363) = &input.access_point_id {
        object.key("AccessPointId").string(var_2363);
    }
    if let Some(var_2364) = &input.iam {
        object.key("Iam").string(var_2364);
    }
}

pub fn serialize_structure_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Range,
) {
    if input.start != 0 {
        object.key("Start").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.end).into()),
        );
    }
    if input.start_column != 0 {
        object.key("StartColumn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.start_column).into()),
        );
    }
}

pub fn serialize_structure_page(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Page,
) {
    if input.page_number != 0 {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.page_number).into()),
        );
    }
    if let Some(var_2365) = &input.line_range {
        let mut object_2366 = object.key("LineRange").start_object();
        crate::json_ser::serialize_structure_range(&mut object_2366, var_2365);
        object_2366.finish();
    }
    if let Some(var_2367) = &input.offset_range {
        let mut object_2368 = object.key("OffsetRange").start_object();
        crate::json_ser::serialize_structure_range(&mut object_2368, var_2367);
        object_2368.finish();
    }
}

pub fn serialize_structure_record(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) {
    if let Some(var_2369) = &input.json_path {
        object.key("JsonPath").string(var_2369);
    }
    if input.record_index != 0 {
        object.key("RecordIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.record_index).into()),
        );
    }
}

pub fn serialize_structure_cell(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cell,
) {
    if input.column != 0 {
        object.key("Column").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.column).into()),
        );
    }
    if input.row != 0 {
        object.key("Row").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.row).into()),
        );
    }
    if let Some(var_2370) = &input.column_name {
        object.key("ColumnName").string(var_2370);
    }
    if let Some(var_2371) = &input.cell_reference {
        object.key("CellReference").string(var_2371);
    }
}

pub fn serialize_structure_aws_cloud_front_distribution_origin_group_failover_status_codes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailoverStatusCodes,
) {
    if let Some(var_2372) = &input.items {
        let mut array_2373 = object.key("Items").start_array();
        for item_2374 in var_2372 {
            {
                array_2373.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_2374).into()),
                );
            }
        }
        array_2373.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails,
) {
    if let Some(var_2375) = &input.operands {
        let mut array_2376 = object.key("Operands").start_array();
        for item_2377 in var_2375 {
            {
                let mut object_2378 = array_2376.value().start_object();
                crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(&mut object_2378, item_2377);
                object_2378.finish();
            }
        }
        array_2376.finish();
    }
    if let Some(var_2379) = &input.prefix {
        object.key("Prefix").string(var_2379);
    }
    if let Some(var_2380) = &input.tag {
        let mut object_2381 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(&mut object_2381, var_2380);
        object_2381.finish();
    }
    if let Some(var_2382) = &input.r#type {
        object.key("Type").string(var_2382);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails,
) {
    if let Some(var_2383) = &input.prefix {
        object.key("Prefix").string(var_2383);
    }
    if let Some(var_2384) = &input.tag {
        let mut object_2385 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(&mut object_2385, var_2384);
        object_2385.finish();
    }
    if let Some(var_2386) = &input.r#type {
        object.key("Type").string(var_2386);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails,
) {
    if let Some(var_2387) = &input.key {
        object.key("Key").string(var_2387);
    }
    if let Some(var_2388) = &input.value {
        object.key("Value").string(var_2388);
    }
}

pub fn serialize_structure_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails,
) {
    if let Some(var_2389) = &input.key {
        object.key("Key").string(var_2389);
    }
    if let Some(var_2390) = &input.value {
        object.key("Value").string(var_2390);
    }
}
