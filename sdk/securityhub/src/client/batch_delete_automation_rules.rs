// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchDeleteAutomationRules`](crate::operation::batch_delete_automation_rules::builders::BatchDeleteAutomationRulesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`automation_rules_arns(impl Into<String>)`](crate::operation::batch_delete_automation_rules::builders::BatchDeleteAutomationRulesFluentBuilder::automation_rules_arns) / [`set_automation_rules_arns(Option<Vec::<String>>)`](crate::operation::batch_delete_automation_rules::builders::BatchDeleteAutomationRulesFluentBuilder::set_automation_rules_arns):<br>required: **true**<br><p> A list of Amazon Resource Names (ARNs) for the rules that are to be deleted. </p><br>
    /// - On success, responds with [`BatchDeleteAutomationRulesOutput`](crate::operation::batch_delete_automation_rules::BatchDeleteAutomationRulesOutput) with field(s):
    ///   - [`processed_automation_rules(Option<Vec::<String>>)`](crate::operation::batch_delete_automation_rules::BatchDeleteAutomationRulesOutput::processed_automation_rules): <p> A list of properly processed rule ARNs. </p>
    ///   - [`unprocessed_automation_rules(Option<Vec::<UnprocessedAutomationRule>>)`](crate::operation::batch_delete_automation_rules::BatchDeleteAutomationRulesOutput::unprocessed_automation_rules): <p> A list of objects containing <code>RuleArn</code>, <code>ErrorCode</code>, and <code>ErrorMessage</code>. This parameter tells you which automation rules the request didn't delete and why. </p>
    /// - On failure, responds with [`SdkError<BatchDeleteAutomationRulesError>`](crate::operation::batch_delete_automation_rules::BatchDeleteAutomationRulesError)
    pub fn batch_delete_automation_rules(
        &self,
    ) -> crate::operation::batch_delete_automation_rules::builders::BatchDeleteAutomationRulesFluentBuilder {
        crate::operation::batch_delete_automation_rules::builders::BatchDeleteAutomationRulesFluentBuilder::new(self.handle.clone())
    }
}
