// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateFindingAggregator`](crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`region_linking_mode(impl Into<String>)`](crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder::region_linking_mode) / [`set_region_linking_mode(Option<String>)`](crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder::set_region_linking_mode): <p>Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.</p>  <p>The selected option also determines how to use the Regions provided in the Regions list.</p>  <p>The options are as follows:</p>  <ul>   <li> <p> <code>ALL_REGIONS</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>ALL_REGIONS_EXCEPT_SPECIFIED</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the <code>Regions</code> parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>SPECIFIED_REGIONS</code> - Indicates to aggregate findings only from the Regions listed in the <code>Regions</code> parameter. Security Hub does not automatically aggregate findings from new Regions. </p> </li>  </ul>
    ///   - [`regions(Vec<String>)`](crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder::regions) / [`set_regions(Option<Vec<String>>)`](crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder::set_regions): <p>If <code>RegionLinkingMode</code> is <code>ALL_REGIONS_EXCEPT_SPECIFIED</code>, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.</p>  <p>If <code>RegionLinkingMode</code> is <code>SPECIFIED_REGIONS</code>, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region. </p>
    /// - On success, responds with [`CreateFindingAggregatorOutput`](crate::operation::create_finding_aggregator::CreateFindingAggregatorOutput) with field(s):
    ///   - [`finding_aggregator_arn(Option<String>)`](crate::operation::create_finding_aggregator::CreateFindingAggregatorOutput::finding_aggregator_arn): <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and stop finding aggregation.</p>
    ///   - [`finding_aggregation_region(Option<String>)`](crate::operation::create_finding_aggregator::CreateFindingAggregatorOutput::finding_aggregation_region): <p>The aggregation Region.</p>
    ///   - [`region_linking_mode(Option<String>)`](crate::operation::create_finding_aggregator::CreateFindingAggregatorOutput::region_linking_mode): <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    ///   - [`regions(Option<Vec<String>>)`](crate::operation::create_finding_aggregator::CreateFindingAggregatorOutput::regions): <p>The list of excluded Regions or included Regions.</p>
    /// - On failure, responds with [`SdkError<CreateFindingAggregatorError>`](crate::operation::create_finding_aggregator::CreateFindingAggregatorError)
    pub fn create_finding_aggregator(
        &self,
    ) -> crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder
    {
        crate::operation::create_finding_aggregator::builders::CreateFindingAggregatorFluentBuilder::new(self.handle.clone())
    }
}
