// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListStandardsControlAssociations`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`security_control_id(impl Into<String>)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::security_control_id) / [`set_security_control_id(Option<String>)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::set_security_control_id):<br>required: **true**<br><p> The identifier of the control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) that you want to determine the enablement status of in each enabled standard. </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::set_next_token):<br>required: **false**<br><p> Optional pagination parameter. </p><br>
    ///   - [`max_results(i32)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::set_max_results):<br>required: **false**<br><p> An optional parameter that limits the total results of the API response to the specified number. If this parameter isn't provided in the request, the results include the first 25 standard and control associations. The results also include a <code>NextToken</code> parameter that you can use in a subsequent API call to get the next 25 associations. This repeats until all associations for the specified control are returned. The number of results is limited by the number of supported Security Hub standards that you've enabled in the calling account. </p><br>
    /// - On success, responds with [`ListStandardsControlAssociationsOutput`](crate::operation::list_standards_control_associations::ListStandardsControlAssociationsOutput) with field(s):
    ///   - [`standards_control_association_summaries(Option<Vec::<StandardsControlAssociationSummary>>)`](crate::operation::list_standards_control_associations::ListStandardsControlAssociationsOutput::standards_control_association_summaries): <p> An array that provides the enablement status and other details for each security control that applies to each enabled standard. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_standards_control_associations::ListStandardsControlAssociationsOutput::next_token): <p> A pagination parameter that's included in the response only if it was included in the request. </p>
    /// - On failure, responds with [`SdkError<ListStandardsControlAssociationsError>`](crate::operation::list_standards_control_associations::ListStandardsControlAssociationsError)
    pub fn list_standards_control_associations(
        &self,
    ) -> crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder {
        crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsFluentBuilder::new(self.handle.clone())
    }
}
