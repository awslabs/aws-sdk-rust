// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
/// account that the invitation was sent from.</p>
/// <p>This operation is only used by member accounts that are not added through
/// Organizations.</p>
/// <p>When the member account accepts the invitation, permission is granted to the administrator
/// account to view findings generated in the member account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptAdministratorInvitation {
    _private: (),
}
impl AcceptAdministratorInvitation {
    /// Creates a new builder-style object to manufacture [`AcceptAdministratorInvitationInput`](crate::input::AcceptAdministratorInvitationInput)
    pub fn builder() -> crate::input::accept_administrator_invitation_input::Builder {
        crate::input::accept_administrator_invitation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptAdministratorInvitation {
    type Output = std::result::Result<
        crate::output::AcceptAdministratorInvitationOutput,
        crate::error::AcceptAdministratorInvitationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_administrator_invitation_error(response)
        } else {
            crate::operation_deser::parse_accept_administrator_invitation_response(response)
        }
    }
}

/// <p>This method is deprecated. Instead, use <code>AcceptAdministratorInvitation</code>.</p>
/// <p>The Security Hub console continues to use <code>AcceptInvitation</code>. It will eventually change to use <code>AcceptAdministratorInvitation</code>. Any IAM policies that specifically control access to this function must continue to use <code>AcceptInvitation</code>. You should also add <code>AcceptAdministratorInvitation</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>AcceptAdministratorInvitation</code>.</p>
/// <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
/// account that the invitation was sent from.</p>
/// <p>This operation is only used by member accounts that are not added through
/// Organizations.</p>
/// <p>When the member account accepts the invitation, permission is granted to the administrator
/// account to view findings generated in the member account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptInvitation {
    _private: (),
}
impl AcceptInvitation {
    /// Creates a new builder-style object to manufacture [`AcceptInvitationInput`](crate::input::AcceptInvitationInput)
    pub fn builder() -> crate::input::accept_invitation_input::Builder {
        crate::input::accept_invitation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptInvitation {
    type Output = std::result::Result<
        crate::output::AcceptInvitationOutput,
        crate::error::AcceptInvitationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_invitation_error(response)
        } else {
            crate::operation_deser::parse_accept_invitation_response(response)
        }
    }
}

/// <p>Disables the standards specified by the provided
/// <code>StandardsSubscriptionArns</code>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a> section of the <i>Security Hub User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisableStandards {
    _private: (),
}
impl BatchDisableStandards {
    /// Creates a new builder-style object to manufacture [`BatchDisableStandardsInput`](crate::input::BatchDisableStandardsInput)
    pub fn builder() -> crate::input::batch_disable_standards_input::Builder {
        crate::input::batch_disable_standards_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDisableStandards {
    type Output = std::result::Result<
        crate::output::BatchDisableStandardsOutput,
        crate::error::BatchDisableStandardsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_disable_standards_error(response)
        } else {
            crate::operation_deser::parse_batch_disable_standards_response(response)
        }
    }
}

/// <p>Enables the standards specified by the provided <code>StandardsArn</code>. To obtain the
/// ARN for a standard, use the <code>DescribeStandards</code>
/// operation.</p>
/// <p>For more information, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a>
/// section of the <i>Security Hub User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchEnableStandards {
    _private: (),
}
impl BatchEnableStandards {
    /// Creates a new builder-style object to manufacture [`BatchEnableStandardsInput`](crate::input::BatchEnableStandardsInput)
    pub fn builder() -> crate::input::batch_enable_standards_input::Builder {
        crate::input::batch_enable_standards_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchEnableStandards {
    type Output = std::result::Result<
        crate::output::BatchEnableStandardsOutput,
        crate::error::BatchEnableStandardsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_enable_standards_error(response)
        } else {
            crate::operation_deser::parse_batch_enable_standards_response(response)
        }
    }
}

/// <p>Imports security findings generated from an integrated product into Security Hub.
/// This action is requested by the integrated product to import its findings into
/// Security Hub.</p>
/// <p>The maximum allowed size for a finding is 240 Kb. An error is returned for any finding
/// larger than 240 Kb.</p>
/// <p>After a finding is created, <code>BatchImportFindings</code> cannot be used to update
/// the following finding fields and objects, which Security Hub customers use to manage their
/// investigation workflow.</p>
/// <ul>
/// <li>
/// <p>
/// <code>Note</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>UserDefinedFields</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>VerificationState</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Workflow</code>
/// </p>
/// </li>
/// </ul>
/// <p>Finding providers also should not use <code>BatchImportFindings</code> to update the following attributes.</p>
/// <ul>
/// <li>
/// <p>
/// <code>Confidence</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Criticality</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>RelatedFindings</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Severity</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Types</code>
/// </p>
/// </li>
/// </ul>
/// <p>Instead, finding providers use <code>FindingProviderFields</code> to provide values for these attributes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchImportFindings {
    _private: (),
}
impl BatchImportFindings {
    /// Creates a new builder-style object to manufacture [`BatchImportFindingsInput`](crate::input::BatchImportFindingsInput)
    pub fn builder() -> crate::input::batch_import_findings_input::Builder {
        crate::input::batch_import_findings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchImportFindings {
    type Output = std::result::Result<
        crate::output::BatchImportFindingsOutput,
        crate::error::BatchImportFindingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_import_findings_error(response)
        } else {
            crate::operation_deser::parse_batch_import_findings_response(response)
        }
    }
}

/// <p>Used by Security Hub customers to update information about their investigation into a finding.
/// Requested by administrator accounts or member accounts. Administrator accounts can update findings for
/// their account and their member accounts. Member accounts can update findings for their
/// account.</p>
/// <p>Updates from <code>BatchUpdateFindings</code> do not affect the value of
/// <code>UpdatedAt</code> for a finding.</p>
/// <p>Administrator and member accounts can use <code>BatchUpdateFindings</code> to update the
/// following finding fields and objects.</p>
/// <ul>
/// <li>
/// <p>
/// <code>Confidence</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Criticality</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Note</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>RelatedFindings</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Severity</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Types</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>UserDefinedFields</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>VerificationState</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Workflow</code>
/// </p>
/// </li>
/// </ul>
/// <p>You can configure IAM policies to restrict access to fields and field values. For
/// example, you might not want member accounts to be able to suppress findings or change the
/// finding severity. See <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access">Configuring access to BatchUpdateFindings</a> in the
/// <i>Security Hub User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdateFindings {
    _private: (),
}
impl BatchUpdateFindings {
    /// Creates a new builder-style object to manufacture [`BatchUpdateFindingsInput`](crate::input::BatchUpdateFindingsInput)
    pub fn builder() -> crate::input::batch_update_findings_input::Builder {
        crate::input::batch_update_findings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchUpdateFindings {
    type Output = std::result::Result<
        crate::output::BatchUpdateFindingsOutput,
        crate::error::BatchUpdateFindingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_update_findings_error(response)
        } else {
            crate::operation_deser::parse_batch_update_findings_response(response)
        }
    }
}

/// <p>Creates a custom action target in Security Hub.</p>
/// <p>You can use custom actions on findings and insights in Security Hub to trigger target actions
/// in Amazon CloudWatch Events.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateActionTarget {
    _private: (),
}
impl CreateActionTarget {
    /// Creates a new builder-style object to manufacture [`CreateActionTargetInput`](crate::input::CreateActionTargetInput)
    pub fn builder() -> crate::input::create_action_target_input::Builder {
        crate::input::create_action_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateActionTarget {
    type Output = std::result::Result<
        crate::output::CreateActionTargetOutput,
        crate::error::CreateActionTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_action_target_error(response)
        } else {
            crate::operation_deser::parse_create_action_target_response(response)
        }
    }
}

/// <p>Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate
/// to a security issue that requires attention or remediation.</p>
/// <p>To group the related findings in the insight, use the
/// <code>GroupByAttribute</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInsight {
    _private: (),
}
impl CreateInsight {
    /// Creates a new builder-style object to manufacture [`CreateInsightInput`](crate::input::CreateInsightInput)
    pub fn builder() -> crate::input::create_insight_input::Builder {
        crate::input::create_insight_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInsight {
    type Output =
        std::result::Result<crate::output::CreateInsightOutput, crate::error::CreateInsightError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_insight_error(response)
        } else {
            crate::operation_deser::parse_create_insight_response(response)
        }
    }
}

/// <p>Creates a member association in Security Hub between the specified accounts and the account
/// used to make the request, which is the administrator account. If you are integrated with
/// Organizations, then the administrator account is designated by the organization management account.</p>
/// <p>
/// <code>CreateMembers</code> is always used to add accounts that are not organization
/// members.</p>
/// <p>For accounts that are managed using Organizations, <code>CreateMembers</code> is only used
/// in the following cases:</p>
/// <ul>
/// <li>
/// <p>Security Hub is not configured to automatically add new organization accounts.</p>
/// </li>
/// <li>
/// <p>The account was disassociated or deleted in Security Hub.</p>
/// </li>
/// </ul>
/// <p>This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you
/// can use the <code>EnableSecurityHub</code> operation.</p>
/// <p>For accounts that are not organization members, you create the account association and
/// then send an invitation to the member account. To send the invitation, you use the
/// <code>InviteMembers</code> operation. If the account owner accepts
/// the invitation, the account becomes a member account in Security Hub.</p>
/// <p>Accounts that are managed using Organizations do not receive an invitation. They
/// automatically become a member account in Security Hub, and Security Hub is automatically enabled for those accounts. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.</p>
/// <p>A permissions policy is added that permits the administrator account to view the findings
/// generated in the member account. When Security Hub is enabled in a member account, the member account findings are
/// also visible to the administrator account. </p>
/// <p>To remove the association between the administrator and member accounts, use the <code>DisassociateFromMasterAccount</code> or <code>DisassociateMembers</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMembers {
    _private: (),
}
impl CreateMembers {
    /// Creates a new builder-style object to manufacture [`CreateMembersInput`](crate::input::CreateMembersInput)
    pub fn builder() -> crate::input::create_members_input::Builder {
        crate::input::create_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMembers {
    type Output =
        std::result::Result<crate::output::CreateMembersOutput, crate::error::CreateMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_members_error(response)
        } else {
            crate::operation_deser::parse_create_members_response(response)
        }
    }
}

/// <p>Declines invitations to become a member account.</p>
/// <p>This operation is only used by accounts that are not part of an organization.
/// Organization accounts do not receive invitations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeclineInvitations {
    _private: (),
}
impl DeclineInvitations {
    /// Creates a new builder-style object to manufacture [`DeclineInvitationsInput`](crate::input::DeclineInvitationsInput)
    pub fn builder() -> crate::input::decline_invitations_input::Builder {
        crate::input::decline_invitations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeclineInvitations {
    type Output = std::result::Result<
        crate::output::DeclineInvitationsOutput,
        crate::error::DeclineInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_decline_invitations_error(response)
        } else {
            crate::operation_deser::parse_decline_invitations_response(response)
        }
    }
}

/// <p>Deletes a custom action target from Security Hub.</p>
/// <p>Deleting a custom action target does not affect any findings or insights that were
/// already sent to Amazon CloudWatch Events using the custom action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteActionTarget {
    _private: (),
}
impl DeleteActionTarget {
    /// Creates a new builder-style object to manufacture [`DeleteActionTargetInput`](crate::input::DeleteActionTargetInput)
    pub fn builder() -> crate::input::delete_action_target_input::Builder {
        crate::input::delete_action_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteActionTarget {
    type Output = std::result::Result<
        crate::output::DeleteActionTargetOutput,
        crate::error::DeleteActionTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_action_target_error(response)
        } else {
            crate::operation_deser::parse_delete_action_target_response(response)
        }
    }
}

/// <p>Deletes the insight specified by the <code>InsightArn</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInsight {
    _private: (),
}
impl DeleteInsight {
    /// Creates a new builder-style object to manufacture [`DeleteInsightInput`](crate::input::DeleteInsightInput)
    pub fn builder() -> crate::input::delete_insight_input::Builder {
        crate::input::delete_insight_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInsight {
    type Output =
        std::result::Result<crate::output::DeleteInsightOutput, crate::error::DeleteInsightError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_insight_error(response)
        } else {
            crate::operation_deser::parse_delete_insight_response(response)
        }
    }
}

/// <p>Deletes invitations received by the Amazon Web Services account to become a member account.</p>
/// <p>This operation is only used by accounts that are not part of an organization.
/// Organization accounts do not receive invitations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInvitations {
    _private: (),
}
impl DeleteInvitations {
    /// Creates a new builder-style object to manufacture [`DeleteInvitationsInput`](crate::input::DeleteInvitationsInput)
    pub fn builder() -> crate::input::delete_invitations_input::Builder {
        crate::input::delete_invitations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInvitations {
    type Output = std::result::Result<
        crate::output::DeleteInvitationsOutput,
        crate::error::DeleteInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_invitations_error(response)
        } else {
            crate::operation_deser::parse_delete_invitations_response(response)
        }
    }
}

/// <p>Deletes the specified member accounts from Security Hub.</p>
/// <p>Can be used to delete member accounts that belong to an organization as well as member
/// accounts that were invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMembers {
    _private: (),
}
impl DeleteMembers {
    /// Creates a new builder-style object to manufacture [`DeleteMembersInput`](crate::input::DeleteMembersInput)
    pub fn builder() -> crate::input::delete_members_input::Builder {
        crate::input::delete_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMembers {
    type Output =
        std::result::Result<crate::output::DeleteMembersOutput, crate::error::DeleteMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_members_error(response)
        } else {
            crate::operation_deser::parse_delete_members_response(response)
        }
    }
}

/// <p>Returns a list of the custom action targets in Security Hub in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeActionTargets {
    _private: (),
}
impl DescribeActionTargets {
    /// Creates a new builder-style object to manufacture [`DescribeActionTargetsInput`](crate::input::DescribeActionTargetsInput)
    pub fn builder() -> crate::input::describe_action_targets_input::Builder {
        crate::input::describe_action_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeActionTargets {
    type Output = std::result::Result<
        crate::output::DescribeActionTargetsOutput,
        crate::error::DescribeActionTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_action_targets_error(response)
        } else {
            crate::operation_deser::parse_describe_action_targets_response(response)
        }
    }
}

/// <p>Returns details about the Hub resource in your account, including the
/// <code>HubArn</code> and the time when you enabled Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHub {
    _private: (),
}
impl DescribeHub {
    /// Creates a new builder-style object to manufacture [`DescribeHubInput`](crate::input::DescribeHubInput)
    pub fn builder() -> crate::input::describe_hub_input::Builder {
        crate::input::describe_hub_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHub {
    type Output =
        std::result::Result<crate::output::DescribeHubOutput, crate::error::DescribeHubError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_hub_error(response)
        } else {
            crate::operation_deser::parse_describe_hub_response(response)
        }
    }
}

/// <p>Returns information about the Organizations configuration for Security Hub. Can only be
/// called from a Security Hub administrator account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrganizationConfiguration {
    _private: (),
}
impl DescribeOrganizationConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationInput`](crate::input::DescribeOrganizationConfigurationInput)
    pub fn builder() -> crate::input::describe_organization_configuration_input::Builder {
        crate::input::describe_organization_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrganizationConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeOrganizationConfigurationOutput,
        crate::error::DescribeOrganizationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_organization_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_organization_configuration_response(response)
        }
    }
}

/// <p>Returns information about product integrations in Security Hub.</p>
/// <p>You can optionally provide an integration ARN. If you provide an integration ARN, then
/// the results only include that integration.</p>
/// <p>If you do not provide an integration ARN, then the results include all of the available
/// product integrations. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProducts {
    _private: (),
}
impl DescribeProducts {
    /// Creates a new builder-style object to manufacture [`DescribeProductsInput`](crate::input::DescribeProductsInput)
    pub fn builder() -> crate::input::describe_products_input::Builder {
        crate::input::describe_products_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProducts {
    type Output = std::result::Result<
        crate::output::DescribeProductsOutput,
        crate::error::DescribeProductsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_products_error(response)
        } else {
            crate::operation_deser::parse_describe_products_response(response)
        }
    }
}

/// <p>Returns a list of the available standards in Security Hub.</p>
/// <p>For each standard, the results include the standard ARN, the name, and a description. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStandards {
    _private: (),
}
impl DescribeStandards {
    /// Creates a new builder-style object to manufacture [`DescribeStandardsInput`](crate::input::DescribeStandardsInput)
    pub fn builder() -> crate::input::describe_standards_input::Builder {
        crate::input::describe_standards_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStandards {
    type Output = std::result::Result<
        crate::output::DescribeStandardsOutput,
        crate::error::DescribeStandardsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_standards_error(response)
        } else {
            crate::operation_deser::parse_describe_standards_response(response)
        }
    }
}

/// <p>Returns a list of security standards controls.</p>
/// <p>For each control, the results include information about whether it is currently enabled,
/// the severity, and a link to remediation information.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStandardsControls {
    _private: (),
}
impl DescribeStandardsControls {
    /// Creates a new builder-style object to manufacture [`DescribeStandardsControlsInput`](crate::input::DescribeStandardsControlsInput)
    pub fn builder() -> crate::input::describe_standards_controls_input::Builder {
        crate::input::describe_standards_controls_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStandardsControls {
    type Output = std::result::Result<
        crate::output::DescribeStandardsControlsOutput,
        crate::error::DescribeStandardsControlsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_standards_controls_error(response)
        } else {
            crate::operation_deser::parse_describe_standards_controls_response(response)
        }
    }
}

/// <p>Disables the integration of the specified product with Security Hub. After the integration is
/// disabled, findings from that product are no longer sent to Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableImportFindingsForProduct {
    _private: (),
}
impl DisableImportFindingsForProduct {
    /// Creates a new builder-style object to manufacture [`DisableImportFindingsForProductInput`](crate::input::DisableImportFindingsForProductInput)
    pub fn builder() -> crate::input::disable_import_findings_for_product_input::Builder {
        crate::input::disable_import_findings_for_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableImportFindingsForProduct {
    type Output = std::result::Result<
        crate::output::DisableImportFindingsForProductOutput,
        crate::error::DisableImportFindingsForProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_import_findings_for_product_error(response)
        } else {
            crate::operation_deser::parse_disable_import_findings_for_product_response(response)
        }
    }
}

/// <p>Disables a Security Hub administrator account. Can only be called by the organization
/// management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableOrganizationAdminAccount {
    _private: (),
}
impl DisableOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`DisableOrganizationAdminAccountInput`](crate::input::DisableOrganizationAdminAccountInput)
    pub fn builder() -> crate::input::disable_organization_admin_account_input::Builder {
        crate::input::disable_organization_admin_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::DisableOrganizationAdminAccountOutput,
        crate::error::DisableOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_organization_admin_account_error(response)
        } else {
            crate::operation_deser::parse_disable_organization_admin_account_response(response)
        }
    }
}

/// <p>Disables Security Hub in your account only in the current Region. To disable Security Hub in all
/// Regions, you must submit one request per Region where you have enabled Security Hub.</p>
/// <p>When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated
/// member accounts.</p>
/// <p>When you disable Security Hub, your existing findings and insights and any Security Hub configuration
/// settings are deleted after 90 days and cannot be recovered. Any standards that were enabled
/// are disabled, and your administrator and member account associations are removed.</p>
/// <p>If you want to save your existing findings, you must export them before you disable
/// Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableSecurityHub {
    _private: (),
}
impl DisableSecurityHub {
    /// Creates a new builder-style object to manufacture [`DisableSecurityHubInput`](crate::input::DisableSecurityHubInput)
    pub fn builder() -> crate::input::disable_security_hub_input::Builder {
        crate::input::disable_security_hub_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableSecurityHub {
    type Output = std::result::Result<
        crate::output::DisableSecurityHubOutput,
        crate::error::DisableSecurityHubError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_security_hub_error(response)
        } else {
            crate::operation_deser::parse_disable_security_hub_response(response)
        }
    }
}

/// <p>Disassociates the current Security Hub member account from the associated administrator
/// account.</p>
/// <p>This operation is only used by accounts that are not part of an organization. For
/// organization accounts, only the administrator account can
/// disassociate a member account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateFromAdministratorAccount {
    _private: (),
}
impl DisassociateFromAdministratorAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateFromAdministratorAccountInput`](crate::input::DisassociateFromAdministratorAccountInput)
    pub fn builder() -> crate::input::disassociate_from_administrator_account_input::Builder {
        crate::input::disassociate_from_administrator_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateFromAdministratorAccount {
    type Output = std::result::Result<
        crate::output::DisassociateFromAdministratorAccountOutput,
        crate::error::DisassociateFromAdministratorAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_from_administrator_account_error(response)
        } else {
            crate::operation_deser::parse_disassociate_from_administrator_account_response(response)
        }
    }
}

/// <p>This method is deprecated. Instead, use <code>DisassociateFromAdministratorAccount</code>.</p>
/// <p>The Security Hub console continues to use <code>DisassociateFromMasterAccount</code>. It will eventually change to use <code>DisassociateFromAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>DisassociateFromMasterAccount</code>. You should also add <code>DisassociateFromAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>DisassociateFromAdministratorAccount</code>.</p>
/// <p>Disassociates the current Security Hub member account from the associated administrator
/// account.</p>
/// <p>This operation is only used by accounts that are not part of an organization. For
/// organization accounts, only the administrator account can
/// disassociate a member account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateFromMasterAccount {
    _private: (),
}
impl DisassociateFromMasterAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateFromMasterAccountInput`](crate::input::DisassociateFromMasterAccountInput)
    pub fn builder() -> crate::input::disassociate_from_master_account_input::Builder {
        crate::input::disassociate_from_master_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateFromMasterAccount {
    type Output = std::result::Result<
        crate::output::DisassociateFromMasterAccountOutput,
        crate::error::DisassociateFromMasterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_from_master_account_error(response)
        } else {
            crate::operation_deser::parse_disassociate_from_master_account_response(response)
        }
    }
}

/// <p>Disassociates the specified member accounts from the associated administrator account.</p>
/// <p>Can be used to disassociate both accounts that are managed using Organizations and accounts that
/// were invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateMembers {
    _private: (),
}
impl DisassociateMembers {
    /// Creates a new builder-style object to manufacture [`DisassociateMembersInput`](crate::input::DisassociateMembersInput)
    pub fn builder() -> crate::input::disassociate_members_input::Builder {
        crate::input::disassociate_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateMembers {
    type Output = std::result::Result<
        crate::output::DisassociateMembersOutput,
        crate::error::DisassociateMembersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_members_error(response)
        } else {
            crate::operation_deser::parse_disassociate_members_response(response)
        }
    }
}

/// <p>Enables the integration of a partner product with Security Hub. Integrated products send
/// findings to Security Hub.</p>
/// <p>When you enable a product integration, a permissions policy that grants permission for
/// the product to send findings to Security Hub is applied.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableImportFindingsForProduct {
    _private: (),
}
impl EnableImportFindingsForProduct {
    /// Creates a new builder-style object to manufacture [`EnableImportFindingsForProductInput`](crate::input::EnableImportFindingsForProductInput)
    pub fn builder() -> crate::input::enable_import_findings_for_product_input::Builder {
        crate::input::enable_import_findings_for_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableImportFindingsForProduct {
    type Output = std::result::Result<
        crate::output::EnableImportFindingsForProductOutput,
        crate::error::EnableImportFindingsForProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_import_findings_for_product_error(response)
        } else {
            crate::operation_deser::parse_enable_import_findings_for_product_response(response)
        }
    }
}

/// <p>Designates the Security Hub administrator account for an organization. Can only be called by
/// the organization management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableOrganizationAdminAccount {
    _private: (),
}
impl EnableOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationAdminAccountInput`](crate::input::EnableOrganizationAdminAccountInput)
    pub fn builder() -> crate::input::enable_organization_admin_account_input::Builder {
        crate::input::enable_organization_admin_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::EnableOrganizationAdminAccountOutput,
        crate::error::EnableOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_organization_admin_account_error(response)
        } else {
            crate::operation_deser::parse_enable_organization_admin_account_response(response)
        }
    }
}

/// <p>Enables Security Hub for your account in the current Region or the Region you specify in the
/// request.</p>
/// <p>When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings
/// from other services that are integrated with Security Hub.</p>
/// <p>When you use the <code>EnableSecurityHub</code> operation to enable Security Hub, you also
/// automatically enable the following standards.</p>
/// <ul>
/// <li>
/// <p>CIS Amazon Web Services Foundations</p>
/// </li>
/// <li>
/// <p>Amazon Web Services Foundational Security Best Practices</p>
/// </li>
/// </ul>
/// <p>You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard. </p>
/// <p>To not enable the automatically enabled standards, set
/// <code>EnableDefaultStandards</code> to <code>false</code>.</p>
/// <p>After you enable Security Hub, to enable a standard, use the <code>BatchEnableStandards</code> operation. To disable a standard, use the
/// <code>BatchDisableStandards</code> operation.</p>
/// <p>To learn more, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html">setup information</a> in the <i>Security Hub User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableSecurityHub {
    _private: (),
}
impl EnableSecurityHub {
    /// Creates a new builder-style object to manufacture [`EnableSecurityHubInput`](crate::input::EnableSecurityHubInput)
    pub fn builder() -> crate::input::enable_security_hub_input::Builder {
        crate::input::enable_security_hub_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableSecurityHub {
    type Output = std::result::Result<
        crate::output::EnableSecurityHubOutput,
        crate::error::EnableSecurityHubError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_security_hub_error(response)
        } else {
            crate::operation_deser::parse_enable_security_hub_response(response)
        }
    }
}

/// <p>Provides the details for the Security Hub administrator account for the current member account.</p>
/// <p>Can be used by both member accounts that are managed using Organizations and accounts that were
/// invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAdministratorAccount {
    _private: (),
}
impl GetAdministratorAccount {
    /// Creates a new builder-style object to manufacture [`GetAdministratorAccountInput`](crate::input::GetAdministratorAccountInput)
    pub fn builder() -> crate::input::get_administrator_account_input::Builder {
        crate::input::get_administrator_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAdministratorAccount {
    type Output = std::result::Result<
        crate::output::GetAdministratorAccountOutput,
        crate::error::GetAdministratorAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_administrator_account_error(response)
        } else {
            crate::operation_deser::parse_get_administrator_account_response(response)
        }
    }
}

/// <p>Returns a list of the standards that are currently enabled.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnabledStandards {
    _private: (),
}
impl GetEnabledStandards {
    /// Creates a new builder-style object to manufacture [`GetEnabledStandardsInput`](crate::input::GetEnabledStandardsInput)
    pub fn builder() -> crate::input::get_enabled_standards_input::Builder {
        crate::input::get_enabled_standards_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnabledStandards {
    type Output = std::result::Result<
        crate::output::GetEnabledStandardsOutput,
        crate::error::GetEnabledStandardsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_enabled_standards_error(response)
        } else {
            crate::operation_deser::parse_get_enabled_standards_response(response)
        }
    }
}

/// <p>Returns a list of findings that match the specified criteria.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFindings {
    _private: (),
}
impl GetFindings {
    /// Creates a new builder-style object to manufacture [`GetFindingsInput`](crate::input::GetFindingsInput)
    pub fn builder() -> crate::input::get_findings_input::Builder {
        crate::input::get_findings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFindings {
    type Output =
        std::result::Result<crate::output::GetFindingsOutput, crate::error::GetFindingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_findings_error(response)
        } else {
            crate::operation_deser::parse_get_findings_response(response)
        }
    }
}

/// <p>Lists the results of the Security Hub insight specified by the insight ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInsightResults {
    _private: (),
}
impl GetInsightResults {
    /// Creates a new builder-style object to manufacture [`GetInsightResultsInput`](crate::input::GetInsightResultsInput)
    pub fn builder() -> crate::input::get_insight_results_input::Builder {
        crate::input::get_insight_results_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInsightResults {
    type Output = std::result::Result<
        crate::output::GetInsightResultsOutput,
        crate::error::GetInsightResultsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_insight_results_error(response)
        } else {
            crate::operation_deser::parse_get_insight_results_response(response)
        }
    }
}

/// <p>Lists and describes insights for the specified insight ARNs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInsights {
    _private: (),
}
impl GetInsights {
    /// Creates a new builder-style object to manufacture [`GetInsightsInput`](crate::input::GetInsightsInput)
    pub fn builder() -> crate::input::get_insights_input::Builder {
        crate::input::get_insights_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInsights {
    type Output =
        std::result::Result<crate::output::GetInsightsOutput, crate::error::GetInsightsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_insights_error(response)
        } else {
            crate::operation_deser::parse_get_insights_response(response)
        }
    }
}

/// <p>Returns the count of all Security Hub membership invitations that were sent to the
/// current member account, not including the currently accepted invitation. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInvitationsCount {
    _private: (),
}
impl GetInvitationsCount {
    /// Creates a new builder-style object to manufacture [`GetInvitationsCountInput`](crate::input::GetInvitationsCountInput)
    pub fn builder() -> crate::input::get_invitations_count_input::Builder {
        crate::input::get_invitations_count_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInvitationsCount {
    type Output = std::result::Result<
        crate::output::GetInvitationsCountOutput,
        crate::error::GetInvitationsCountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_invitations_count_error(response)
        } else {
            crate::operation_deser::parse_get_invitations_count_response(response)
        }
    }
}

/// <p>This method is deprecated. Instead, use <code>GetAdministratorAccount</code>.</p>
/// <p>The Security Hub console continues to use <code>GetMasterAccount</code>. It will eventually change to use <code>GetAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>GetMasterAccount</code>. You should also add <code>GetAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>GetAdministratorAccount</code>.</p>
/// <p>Provides the details for the Security Hub administrator account for the current member account.</p>
/// <p>Can be used by both member accounts that are managed using Organizations and accounts that were
/// invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMasterAccount {
    _private: (),
}
impl GetMasterAccount {
    /// Creates a new builder-style object to manufacture [`GetMasterAccountInput`](crate::input::GetMasterAccountInput)
    pub fn builder() -> crate::input::get_master_account_input::Builder {
        crate::input::get_master_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMasterAccount {
    type Output = std::result::Result<
        crate::output::GetMasterAccountOutput,
        crate::error::GetMasterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_master_account_error(response)
        } else {
            crate::operation_deser::parse_get_master_account_response(response)
        }
    }
}

/// <p>Returns the details for the Security Hub member accounts for the specified account IDs.</p>
/// <p>An administrator account can be either the delegated Security Hub administrator account for an
/// organization or an administrator account that enabled Security Hub manually.</p>
/// <p>The results include both member accounts that are managed using Organizations and accounts that
/// were invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMembers {
    _private: (),
}
impl GetMembers {
    /// Creates a new builder-style object to manufacture [`GetMembersInput`](crate::input::GetMembersInput)
    pub fn builder() -> crate::input::get_members_input::Builder {
        crate::input::get_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMembers {
    type Output =
        std::result::Result<crate::output::GetMembersOutput, crate::error::GetMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_members_error(response)
        } else {
            crate::operation_deser::parse_get_members_response(response)
        }
    }
}

/// <p>Invites other Amazon Web Services accounts to become member accounts for the Security Hub administrator account that
/// the invitation is sent from.</p>
/// <p>This operation is only used to invite accounts that do not belong to an organization.
/// Organization accounts do not receive invitations.</p>
/// <p>Before you can use this action to invite a member, you must first use the <code>CreateMembers</code> action to create the member account in Security Hub.</p>
/// <p>When the account owner enables Security Hub and accepts the invitation to become a member
/// account, the administrator account can view the findings generated from the member account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct InviteMembers {
    _private: (),
}
impl InviteMembers {
    /// Creates a new builder-style object to manufacture [`InviteMembersInput`](crate::input::InviteMembersInput)
    pub fn builder() -> crate::input::invite_members_input::Builder {
        crate::input::invite_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for InviteMembers {
    type Output =
        std::result::Result<crate::output::InviteMembersOutput, crate::error::InviteMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_invite_members_error(response)
        } else {
            crate::operation_deser::parse_invite_members_response(response)
        }
    }
}

/// <p>Lists all findings-generating solutions (products) that you are subscribed to receive
/// findings from in Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEnabledProductsForImport {
    _private: (),
}
impl ListEnabledProductsForImport {
    /// Creates a new builder-style object to manufacture [`ListEnabledProductsForImportInput`](crate::input::ListEnabledProductsForImportInput)
    pub fn builder() -> crate::input::list_enabled_products_for_import_input::Builder {
        crate::input::list_enabled_products_for_import_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEnabledProductsForImport {
    type Output = std::result::Result<
        crate::output::ListEnabledProductsForImportOutput,
        crate::error::ListEnabledProductsForImportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_enabled_products_for_import_error(response)
        } else {
            crate::operation_deser::parse_list_enabled_products_for_import_response(response)
        }
    }
}

/// <p>Lists all Security Hub membership invitations that were sent to the current Amazon Web Services account.</p>
/// <p>This operation is only used by accounts that are managed by invitation.
/// Accounts that are managed using the integration with Organizations do not receive invitations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInvitations {
    _private: (),
}
impl ListInvitations {
    /// Creates a new builder-style object to manufacture [`ListInvitationsInput`](crate::input::ListInvitationsInput)
    pub fn builder() -> crate::input::list_invitations_input::Builder {
        crate::input::list_invitations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInvitations {
    type Output = std::result::Result<
        crate::output::ListInvitationsOutput,
        crate::error::ListInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_invitations_error(response)
        } else {
            crate::operation_deser::parse_list_invitations_response(response)
        }
    }
}

/// <p>Lists details about all member accounts for the current Security Hub administrator
/// account.</p>
/// <p>The results include both member accounts that belong to an organization and member
/// accounts that were invited manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMembers {
    _private: (),
}
impl ListMembers {
    /// Creates a new builder-style object to manufacture [`ListMembersInput`](crate::input::ListMembersInput)
    pub fn builder() -> crate::input::list_members_input::Builder {
        crate::input::list_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMembers {
    type Output =
        std::result::Result<crate::output::ListMembersOutput, crate::error::ListMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_members_error(response)
        } else {
            crate::operation_deser::parse_list_members_response(response)
        }
    }
}

/// <p>Lists the Security Hub administrator accounts. Can only be called by the organization
/// management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOrganizationAdminAccounts {
    _private: (),
}
impl ListOrganizationAdminAccounts {
    /// Creates a new builder-style object to manufacture [`ListOrganizationAdminAccountsInput`](crate::input::ListOrganizationAdminAccountsInput)
    pub fn builder() -> crate::input::list_organization_admin_accounts_input::Builder {
        crate::input::list_organization_admin_accounts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOrganizationAdminAccounts {
    type Output = std::result::Result<
        crate::output::ListOrganizationAdminAccountsOutput,
        crate::error::ListOrganizationAdminAccountsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_organization_admin_accounts_error(response)
        } else {
            crate::operation_deser::parse_list_organization_admin_accounts_response(response)
        }
    }
}

/// <p>Returns a list of tags associated with a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Adds one or more tags to a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the name and description of a custom action target in Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateActionTarget {
    _private: (),
}
impl UpdateActionTarget {
    /// Creates a new builder-style object to manufacture [`UpdateActionTargetInput`](crate::input::UpdateActionTargetInput)
    pub fn builder() -> crate::input::update_action_target_input::Builder {
        crate::input::update_action_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateActionTarget {
    type Output = std::result::Result<
        crate::output::UpdateActionTargetOutput,
        crate::error::UpdateActionTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_action_target_error(response)
        } else {
            crate::operation_deser::parse_update_action_target_response(response)
        }
    }
}

/// <p>
/// <code>UpdateFindings</code> is deprecated. Instead of <code>UpdateFindings</code>, use
/// <code>BatchUpdateFindings</code>.</p>
/// <p>Updates the <code>Note</code> and <code>RecordState</code> of the Security Hub-aggregated
/// findings that the filter attributes specify. Any member account that can view the finding
/// also sees the update to the finding.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFindings {
    _private: (),
}
impl UpdateFindings {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsInput`](crate::input::UpdateFindingsInput)
    pub fn builder() -> crate::input::update_findings_input::Builder {
        crate::input::update_findings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFindings {
    type Output =
        std::result::Result<crate::output::UpdateFindingsOutput, crate::error::UpdateFindingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_findings_error(response)
        } else {
            crate::operation_deser::parse_update_findings_response(response)
        }
    }
}

/// <p>Updates the Security Hub insight identified by the specified insight ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateInsight {
    _private: (),
}
impl UpdateInsight {
    /// Creates a new builder-style object to manufacture [`UpdateInsightInput`](crate::input::UpdateInsightInput)
    pub fn builder() -> crate::input::update_insight_input::Builder {
        crate::input::update_insight_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateInsight {
    type Output =
        std::result::Result<crate::output::UpdateInsightOutput, crate::error::UpdateInsightError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_insight_error(response)
        } else {
            crate::operation_deser::parse_update_insight_response(response)
        }
    }
}

/// <p>Used to update the configuration related to Organizations. Can only be called from a
/// Security Hub administrator account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateOrganizationConfiguration {
    _private: (),
}
impl UpdateOrganizationConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationInput`](crate::input::UpdateOrganizationConfigurationInput)
    pub fn builder() -> crate::input::update_organization_configuration_input::Builder {
        crate::input::update_organization_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateOrganizationConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateOrganizationConfigurationOutput,
        crate::error::UpdateOrganizationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_organization_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_organization_configuration_response(response)
        }
    }
}

/// <p>Updates configuration options for Security Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSecurityHubConfiguration {
    _private: (),
}
impl UpdateSecurityHubConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityHubConfigurationInput`](crate::input::UpdateSecurityHubConfigurationInput)
    pub fn builder() -> crate::input::update_security_hub_configuration_input::Builder {
        crate::input::update_security_hub_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSecurityHubConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateSecurityHubConfigurationOutput,
        crate::error::UpdateSecurityHubConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_security_hub_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_security_hub_configuration_response(response)
        }
    }
}

/// <p>Used to control whether an individual security standard control is enabled or
/// disabled.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateStandardsControl {
    _private: (),
}
impl UpdateStandardsControl {
    /// Creates a new builder-style object to manufacture [`UpdateStandardsControlInput`](crate::input::UpdateStandardsControlInput)
    pub fn builder() -> crate::input::update_standards_control_input::Builder {
        crate::input::update_standards_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateStandardsControl {
    type Output = std::result::Result<
        crate::output::UpdateStandardsControlOutput,
        crate::error::UpdateStandardsControlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_standards_control_error(response)
        } else {
            crate::operation_deser::parse_update_standards_control_response(response)
        }
    }
}
