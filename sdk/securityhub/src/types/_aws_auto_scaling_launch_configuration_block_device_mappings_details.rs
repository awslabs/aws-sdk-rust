// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A block device for the instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
    /// <p>The device name that is exposed to the EC2 instance. For example, <code>/dev/sdh</code> or <code>xvdh</code>.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>Parameters that are used to automatically set up Amazon EBS volumes when an instance is launched.</p>
    #[doc(hidden)]
    pub ebs: std::option::Option<
        crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
    >,
    /// <p>Whether to suppress the device that is included in the block device mapping of the Amazon Machine Image (AMI).</p>
    /// <p>If <code>NoDevice</code> is <code>true</code>, then you cannot specify <code>Ebs</code>.&gt;</p>
    #[doc(hidden)]
    pub no_device: bool,
    /// <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
    /// <p>You can provide either <code>VirtualName</code> or <code>Ebs</code>, but not both.</p>
    #[doc(hidden)]
    pub virtual_name: std::option::Option<std::string::String>,
}
impl AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
    /// <p>The device name that is exposed to the EC2 instance. For example, <code>/dev/sdh</code> or <code>xvdh</code>.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Parameters that are used to automatically set up Amazon EBS volumes when an instance is launched.</p>
    pub fn ebs(
        &self,
    ) -> std::option::Option<
        &crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
    > {
        self.ebs.as_ref()
    }
    /// <p>Whether to suppress the device that is included in the block device mapping of the Amazon Machine Image (AMI).</p>
    /// <p>If <code>NoDevice</code> is <code>true</code>, then you cannot specify <code>Ebs</code>.&gt;</p>
    pub fn no_device(&self) -> bool {
        self.no_device
    }
    /// <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
    /// <p>You can provide either <code>VirtualName</code> or <code>Ebs</code>, but not both.</p>
    pub fn virtual_name(&self) -> std::option::Option<&str> {
        self.virtual_name.as_deref()
    }
}
impl AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
    /// Creates a new builder-style object to manufacture [`AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails`](crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsBuilder
    {
        crate::types::builders::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsBuilder::default()
    }
}

/// A builder for [`AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails`](crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) ebs: std::option::Option<
        crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
    >,
    pub(crate) no_device: std::option::Option<bool>,
    pub(crate) virtual_name: std::option::Option<std::string::String>,
}
impl AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsBuilder {
    /// <p>The device name that is exposed to the EC2 instance. For example, <code>/dev/sdh</code> or <code>xvdh</code>.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The device name that is exposed to the EC2 instance. For example, <code>/dev/sdh</code> or <code>xvdh</code>.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>Parameters that are used to automatically set up Amazon EBS volumes when an instance is launched.</p>
    pub fn ebs(
        mut self,
        input: crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
    ) -> Self {
        self.ebs = Some(input);
        self
    }
    /// <p>Parameters that are used to automatically set up Amazon EBS volumes when an instance is launched.</p>
    pub fn set_ebs(
        mut self,
        input: std::option::Option<
            crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
        >,
    ) -> Self {
        self.ebs = input;
        self
    }
    /// <p>Whether to suppress the device that is included in the block device mapping of the Amazon Machine Image (AMI).</p>
    /// <p>If <code>NoDevice</code> is <code>true</code>, then you cannot specify <code>Ebs</code>.&gt;</p>
    pub fn no_device(mut self, input: bool) -> Self {
        self.no_device = Some(input);
        self
    }
    /// <p>Whether to suppress the device that is included in the block device mapping of the Amazon Machine Image (AMI).</p>
    /// <p>If <code>NoDevice</code> is <code>true</code>, then you cannot specify <code>Ebs</code>.&gt;</p>
    pub fn set_no_device(mut self, input: std::option::Option<bool>) -> Self {
        self.no_device = input;
        self
    }
    /// <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
    /// <p>You can provide either <code>VirtualName</code> or <code>Ebs</code>, but not both.</p>
    pub fn virtual_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_name = Some(input.into());
        self
    }
    /// <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
    /// <p>You can provide either <code>VirtualName</code> or <code>Ebs</code>, but not both.</p>
    pub fn set_virtual_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.virtual_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails`](crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
        crate::types::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
            device_name: self.device_name,
            ebs: self.ebs,
            no_device: self.no_device.unwrap_or_default(),
            virtual_name: self.virtual_name,
        }
    }
}
