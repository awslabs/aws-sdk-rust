// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of finding attributes used to sort findings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SortCriterion {
    /// <p>The finding attribute used to sort findings.</p>
    #[doc(hidden)]
    pub field: std::option::Option<std::string::String>,
    /// <p>The order used to sort findings.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortCriterion {
    /// <p>The finding attribute used to sort findings.</p>
    pub fn field(&self) -> std::option::Option<&str> {
        self.field.as_deref()
    }
    /// <p>The order used to sort findings.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl SortCriterion {
    /// Creates a new builder-style object to manufacture [`SortCriterion`](crate::types::SortCriterion).
    pub fn builder() -> crate::types::builders::SortCriterionBuilder {
        crate::types::builders::SortCriterionBuilder::default()
    }
}

/// A builder for [`SortCriterion`](crate::types::SortCriterion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SortCriterionBuilder {
    pub(crate) field: std::option::Option<std::string::String>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortCriterionBuilder {
    /// <p>The finding attribute used to sort findings.</p>
    pub fn field(mut self, input: impl Into<std::string::String>) -> Self {
        self.field = Some(input.into());
        self
    }
    /// <p>The finding attribute used to sort findings.</p>
    pub fn set_field(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The order used to sort findings.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The order used to sort findings.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// Consumes the builder and constructs a [`SortCriterion`](crate::types::SortCriterion).
    pub fn build(self) -> crate::types::SortCriterion {
        crate::types::SortCriterion {
            field: self.field,
            sort_order: self.sort_order,
        }
    }
}
