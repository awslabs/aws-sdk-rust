// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about CloudWatch Logs for the build project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
    /// <p>The group name of the logs in CloudWatch Logs.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The current status of the logs in CloudWatch Logs for a build project.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The prefix of the stream name of the CloudWatch Logs.</p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
    /// <p>The group name of the logs in CloudWatch Logs.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The current status of the logs in CloudWatch Logs for a build project.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The prefix of the stream name of the CloudWatch Logs.</p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
}
impl AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
    /// Creates a new builder-style object to manufacture [`AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails`](crate::types::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsBuilder {
        crate::types::builders::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsBuilder::default()
    }
}

/// A builder for [`AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails`](crate::types::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) stream_name: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsBuilder {
    /// <p>The group name of the logs in CloudWatch Logs.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The group name of the logs in CloudWatch Logs.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The current status of the logs in CloudWatch Logs for a build project.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The current status of the logs in CloudWatch Logs for a build project.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The prefix of the stream name of the CloudWatch Logs.</p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_name = Some(input.into());
        self
    }
    /// <p>The prefix of the stream name of the CloudWatch Logs.</p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails`](crate::types::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails).
    pub fn build(self) -> crate::types::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
        crate::types::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
            group_name: self.group_name,
            status: self.status,
            stream_name: self.stream_name,
        }
    }
}
