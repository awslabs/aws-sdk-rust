// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> One or more private IPv4 addresses. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails {
    /// <p> Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary. </p>
    #[doc(hidden)]
    pub primary: bool,
    /// <p> The private IPv4 address. </p>
    #[doc(hidden)]
    pub private_ip_address: std::option::Option<std::string::String>,
}
impl AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails {
    /// <p> Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary. </p>
    pub fn primary(&self) -> bool {
        self.primary
    }
    /// <p> The private IPv4 address. </p>
    pub fn private_ip_address(&self) -> std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
}
impl AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails`](crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails).
    pub fn builder() -> crate::types::builders::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsBuilder{
        crate::types::builders::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails`](crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsBuilder {
    pub(crate) primary: std::option::Option<bool>,
    pub(crate) private_ip_address: std::option::Option<std::string::String>,
}
impl AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsBuilder {
    /// <p> Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary. </p>
    pub fn primary(mut self, input: bool) -> Self {
        self.primary = Some(input);
        self
    }
    /// <p> Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary. </p>
    pub fn set_primary(mut self, input: std::option::Option<bool>) -> Self {
        self.primary = input;
        self
    }
    /// <p> The private IPv4 address. </p>
    pub fn private_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_ip_address = Some(input.into());
        self
    }
    /// <p> The private IPv4 address. </p>
    pub fn set_private_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_ip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails`](crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails {
        crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails {
            primary: self.primary.unwrap_or_default(),
            private_ip_address: self.private_ip_address,
        }
    }
}
