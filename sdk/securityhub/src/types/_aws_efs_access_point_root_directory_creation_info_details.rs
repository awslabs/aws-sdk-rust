// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the settings that Amazon EFS uses to create the root directory when a client connects to an access point. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEfsAccessPointRootDirectoryCreationInfoDetails {
    /// <p>Specifies the POSIX group ID to apply to the root directory. </p>
    #[doc(hidden)]
    pub owner_gid: std::option::Option<std::string::String>,
    /// <p>Specifies the POSIX user ID to apply to the root directory. </p>
    #[doc(hidden)]
    pub owner_uid: std::option::Option<std::string::String>,
    /// <p>Specifies the POSIX permissions to apply to the root directory, in the format of an octal number representing the file's mode bits. </p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::string::String>,
}
impl AwsEfsAccessPointRootDirectoryCreationInfoDetails {
    /// <p>Specifies the POSIX group ID to apply to the root directory. </p>
    pub fn owner_gid(&self) -> std::option::Option<&str> {
        self.owner_gid.as_deref()
    }
    /// <p>Specifies the POSIX user ID to apply to the root directory. </p>
    pub fn owner_uid(&self) -> std::option::Option<&str> {
        self.owner_uid.as_deref()
    }
    /// <p>Specifies the POSIX permissions to apply to the root directory, in the format of an octal number representing the file's mode bits. </p>
    pub fn permissions(&self) -> std::option::Option<&str> {
        self.permissions.as_deref()
    }
}
impl AwsEfsAccessPointRootDirectoryCreationInfoDetails {
    /// Creates a new builder-style object to manufacture [`AwsEfsAccessPointRootDirectoryCreationInfoDetails`](crate::types::AwsEfsAccessPointRootDirectoryCreationInfoDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEfsAccessPointRootDirectoryCreationInfoDetailsBuilder {
        crate::types::builders::AwsEfsAccessPointRootDirectoryCreationInfoDetailsBuilder::default()
    }
}

/// A builder for [`AwsEfsAccessPointRootDirectoryCreationInfoDetails`](crate::types::AwsEfsAccessPointRootDirectoryCreationInfoDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEfsAccessPointRootDirectoryCreationInfoDetailsBuilder {
    pub(crate) owner_gid: std::option::Option<std::string::String>,
    pub(crate) owner_uid: std::option::Option<std::string::String>,
    pub(crate) permissions: std::option::Option<std::string::String>,
}
impl AwsEfsAccessPointRootDirectoryCreationInfoDetailsBuilder {
    /// <p>Specifies the POSIX group ID to apply to the root directory. </p>
    pub fn owner_gid(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_gid = Some(input.into());
        self
    }
    /// <p>Specifies the POSIX group ID to apply to the root directory. </p>
    pub fn set_owner_gid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_gid = input;
        self
    }
    /// <p>Specifies the POSIX user ID to apply to the root directory. </p>
    pub fn owner_uid(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_uid = Some(input.into());
        self
    }
    /// <p>Specifies the POSIX user ID to apply to the root directory. </p>
    pub fn set_owner_uid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_uid = input;
        self
    }
    /// <p>Specifies the POSIX permissions to apply to the root directory, in the format of an octal number representing the file's mode bits. </p>
    pub fn permissions(mut self, input: impl Into<std::string::String>) -> Self {
        self.permissions = Some(input.into());
        self
    }
    /// <p>Specifies the POSIX permissions to apply to the root directory, in the format of an octal number representing the file's mode bits. </p>
    pub fn set_permissions(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.permissions = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEfsAccessPointRootDirectoryCreationInfoDetails`](crate::types::AwsEfsAccessPointRootDirectoryCreationInfoDetails).
    pub fn build(self) -> crate::types::AwsEfsAccessPointRootDirectoryCreationInfoDetails {
        crate::types::AwsEfsAccessPointRootDirectoryCreationInfoDetails {
            owner_gid: self.owner_gid,
            owner_uid: self.owner_uid,
            permissions: self.permissions,
        }
    }
}
