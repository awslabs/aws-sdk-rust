// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an instance profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsIamInstanceProfile {
    /// <p>The ARN of the instance profile.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Indicates when the instance profile was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<std::string::String>,
    /// <p>The identifier of the instance profile.</p>
    #[doc(hidden)]
    pub instance_profile_id: std::option::Option<std::string::String>,
    /// <p>The name of the instance profile.</p>
    #[doc(hidden)]
    pub instance_profile_name: std::option::Option<std::string::String>,
    /// <p>The path to the instance profile.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>The roles associated with the instance profile.</p>
    #[doc(hidden)]
    pub roles: std::option::Option<std::vec::Vec<crate::types::AwsIamInstanceProfileRole>>,
}
impl AwsIamInstanceProfile {
    /// <p>The ARN of the instance profile.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Indicates when the instance profile was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(&self) -> std::option::Option<&str> {
        self.create_date.as_deref()
    }
    /// <p>The identifier of the instance profile.</p>
    pub fn instance_profile_id(&self) -> std::option::Option<&str> {
        self.instance_profile_id.as_deref()
    }
    /// <p>The name of the instance profile.</p>
    pub fn instance_profile_name(&self) -> std::option::Option<&str> {
        self.instance_profile_name.as_deref()
    }
    /// <p>The path to the instance profile.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The roles associated with the instance profile.</p>
    pub fn roles(&self) -> std::option::Option<&[crate::types::AwsIamInstanceProfileRole]> {
        self.roles.as_deref()
    }
}
impl AwsIamInstanceProfile {
    /// Creates a new builder-style object to manufacture [`AwsIamInstanceProfile`](crate::types::AwsIamInstanceProfile).
    pub fn builder() -> crate::types::builders::AwsIamInstanceProfileBuilder {
        crate::types::builders::AwsIamInstanceProfileBuilder::default()
    }
}

/// A builder for [`AwsIamInstanceProfile`](crate::types::AwsIamInstanceProfile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsIamInstanceProfileBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) create_date: std::option::Option<std::string::String>,
    pub(crate) instance_profile_id: std::option::Option<std::string::String>,
    pub(crate) instance_profile_name: std::option::Option<std::string::String>,
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) roles: std::option::Option<std::vec::Vec<crate::types::AwsIamInstanceProfileRole>>,
}
impl AwsIamInstanceProfileBuilder {
    /// <p>The ARN of the instance profile.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the instance profile.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Indicates when the instance profile was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.create_date = Some(input.into());
        self
    }
    /// <p>Indicates when the instance profile was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_create_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The identifier of the instance profile.</p>
    pub fn instance_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_profile_id = Some(input.into());
        self
    }
    /// <p>The identifier of the instance profile.</p>
    pub fn set_instance_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_profile_id = input;
        self
    }
    /// <p>The name of the instance profile.</p>
    pub fn instance_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the instance profile.</p>
    pub fn set_instance_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_profile_name = input;
        self
    }
    /// <p>The path to the instance profile.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>The path to the instance profile.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// Appends an item to `roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p>The roles associated with the instance profile.</p>
    pub fn roles(mut self, input: crate::types::AwsIamInstanceProfileRole) -> Self {
        let mut v = self.roles.unwrap_or_default();
        v.push(input);
        self.roles = Some(v);
        self
    }
    /// <p>The roles associated with the instance profile.</p>
    pub fn set_roles(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsIamInstanceProfileRole>>,
    ) -> Self {
        self.roles = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsIamInstanceProfile`](crate::types::AwsIamInstanceProfile).
    pub fn build(self) -> crate::types::AwsIamInstanceProfile {
        crate::types::AwsIamInstanceProfile {
            arn: self.arn,
            create_date: self.create_date,
            instance_profile_id: self.instance_profile_id,
            instance_profile_name: self.instance_profile_name,
            path: self.path,
            roles: self.roles,
        }
    }
}
