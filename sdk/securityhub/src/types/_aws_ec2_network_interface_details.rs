// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the network interface</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2NetworkInterfaceDetails {
    /// <p>The network interface attachment.</p>
    #[doc(hidden)]
    pub attachment: std::option::Option<crate::types::AwsEc2NetworkInterfaceAttachment>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Security groups for the network interface.</p>
    #[doc(hidden)]
    pub security_groups:
        std::option::Option<std::vec::Vec<crate::types::AwsEc2NetworkInterfaceSecurityGroup>>,
    /// <p>Indicates whether traffic to or from the instance is validated.</p>
    #[doc(hidden)]
    pub source_dest_check: bool,
    /// <p>The IPv6 addresses associated with the network interface.</p>
    #[doc(hidden)]
    pub ip_v6_addresses:
        std::option::Option<std::vec::Vec<crate::types::AwsEc2NetworkInterfaceIpV6AddressDetail>>,
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    #[doc(hidden)]
    pub private_ip_addresses: std::option::Option<
        std::vec::Vec<crate::types::AwsEc2NetworkInterfacePrivateIpAddressDetail>,
    >,
    /// <p>The public DNS name of the network interface.</p>
    #[doc(hidden)]
    pub public_dns_name: std::option::Option<std::string::String>,
    /// <p>The address of the Elastic IP address bound to the network interface.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
}
impl AwsEc2NetworkInterfaceDetails {
    /// <p>The network interface attachment.</p>
    pub fn attachment(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2NetworkInterfaceAttachment> {
        self.attachment.as_ref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Security groups for the network interface.</p>
    pub fn security_groups(
        &self,
    ) -> std::option::Option<&[crate::types::AwsEc2NetworkInterfaceSecurityGroup]> {
        self.security_groups.as_deref()
    }
    /// <p>Indicates whether traffic to or from the instance is validated.</p>
    pub fn source_dest_check(&self) -> bool {
        self.source_dest_check
    }
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn ip_v6_addresses(
        &self,
    ) -> std::option::Option<&[crate::types::AwsEc2NetworkInterfaceIpV6AddressDetail]> {
        self.ip_v6_addresses.as_deref()
    }
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn private_ip_addresses(
        &self,
    ) -> std::option::Option<&[crate::types::AwsEc2NetworkInterfacePrivateIpAddressDetail]> {
        self.private_ip_addresses.as_deref()
    }
    /// <p>The public DNS name of the network interface.</p>
    pub fn public_dns_name(&self) -> std::option::Option<&str> {
        self.public_dns_name.as_deref()
    }
    /// <p>The address of the Elastic IP address bound to the network interface.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
}
impl AwsEc2NetworkInterfaceDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2NetworkInterfaceDetails`](crate::types::AwsEc2NetworkInterfaceDetails).
    pub fn builder() -> crate::types::builders::AwsEc2NetworkInterfaceDetailsBuilder {
        crate::types::builders::AwsEc2NetworkInterfaceDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2NetworkInterfaceDetails`](crate::types::AwsEc2NetworkInterfaceDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2NetworkInterfaceDetailsBuilder {
    pub(crate) attachment: std::option::Option<crate::types::AwsEc2NetworkInterfaceAttachment>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) security_groups:
        std::option::Option<std::vec::Vec<crate::types::AwsEc2NetworkInterfaceSecurityGroup>>,
    pub(crate) source_dest_check: std::option::Option<bool>,
    pub(crate) ip_v6_addresses:
        std::option::Option<std::vec::Vec<crate::types::AwsEc2NetworkInterfaceIpV6AddressDetail>>,
    pub(crate) private_ip_addresses: std::option::Option<
        std::vec::Vec<crate::types::AwsEc2NetworkInterfacePrivateIpAddressDetail>,
    >,
    pub(crate) public_dns_name: std::option::Option<std::string::String>,
    pub(crate) public_ip: std::option::Option<std::string::String>,
}
impl AwsEc2NetworkInterfaceDetailsBuilder {
    /// <p>The network interface attachment.</p>
    pub fn attachment(mut self, input: crate::types::AwsEc2NetworkInterfaceAttachment) -> Self {
        self.attachment = Some(input);
        self
    }
    /// <p>The network interface attachment.</p>
    pub fn set_attachment(
        mut self,
        input: std::option::Option<crate::types::AwsEc2NetworkInterfaceAttachment>,
    ) -> Self {
        self.attachment = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>Security groups for the network interface.</p>
    pub fn security_groups(
        mut self,
        input: crate::types::AwsEc2NetworkInterfaceSecurityGroup,
    ) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input);
        self.security_groups = Some(v);
        self
    }
    /// <p>Security groups for the network interface.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsEc2NetworkInterfaceSecurityGroup>,
        >,
    ) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>Indicates whether traffic to or from the instance is validated.</p>
    pub fn source_dest_check(mut self, input: bool) -> Self {
        self.source_dest_check = Some(input);
        self
    }
    /// <p>Indicates whether traffic to or from the instance is validated.</p>
    pub fn set_source_dest_check(mut self, input: std::option::Option<bool>) -> Self {
        self.source_dest_check = input;
        self
    }
    /// Appends an item to `ip_v6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ip_v6_addresses`](Self::set_ip_v6_addresses).
    ///
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn ip_v6_addresses(
        mut self,
        input: crate::types::AwsEc2NetworkInterfaceIpV6AddressDetail,
    ) -> Self {
        let mut v = self.ip_v6_addresses.unwrap_or_default();
        v.push(input);
        self.ip_v6_addresses = Some(v);
        self
    }
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn set_ip_v6_addresses(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsEc2NetworkInterfaceIpV6AddressDetail>,
        >,
    ) -> Self {
        self.ip_v6_addresses = input;
        self
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn private_ip_addresses(
        mut self,
        input: crate::types::AwsEc2NetworkInterfacePrivateIpAddressDetail,
    ) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input);
        self.private_ip_addresses = Some(v);
        self
    }
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn set_private_ip_addresses(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsEc2NetworkInterfacePrivateIpAddressDetail>,
        >,
    ) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// <p>The public DNS name of the network interface.</p>
    pub fn public_dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_dns_name = Some(input.into());
        self
    }
    /// <p>The public DNS name of the network interface.</p>
    pub fn set_public_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_dns_name = input;
        self
    }
    /// <p>The address of the Elastic IP address bound to the network interface.</p>
    pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_ip = Some(input.into());
        self
    }
    /// <p>The address of the Elastic IP address bound to the network interface.</p>
    pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2NetworkInterfaceDetails`](crate::types::AwsEc2NetworkInterfaceDetails).
    pub fn build(self) -> crate::types::AwsEc2NetworkInterfaceDetails {
        crate::types::AwsEc2NetworkInterfaceDetails {
            attachment: self.attachment,
            network_interface_id: self.network_interface_id,
            security_groups: self.security_groups,
            source_dest_check: self.source_dest_check.unwrap_or_default(),
            ip_v6_addresses: self.ip_v6_addresses,
            private_ip_addresses: self.private_ip_addresses,
            public_dns_name: self.public_dns_name,
            public_ip: self.public_ip,
        }
    }
}
