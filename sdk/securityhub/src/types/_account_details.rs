// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccountDetails {
    /// <p>The ID of an Amazon Web Services account.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The email of an Amazon Web Services account.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
}
impl AccountDetails {
    /// <p>The ID of an Amazon Web Services account.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The email of an Amazon Web Services account.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl AccountDetails {
    /// Creates a new builder-style object to manufacture [`AccountDetails`](crate::types::AccountDetails).
    pub fn builder() -> crate::types::builders::AccountDetailsBuilder {
        crate::types::builders::AccountDetailsBuilder::default()
    }
}

/// A builder for [`AccountDetails`](crate::types::AccountDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccountDetailsBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) email: std::option::Option<std::string::String>,
}
impl AccountDetailsBuilder {
    /// <p>The ID of an Amazon Web Services account.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The ID of an Amazon Web Services account.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The email of an Amazon Web Services account.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.email = Some(input.into());
        self
    }
    /// <p>The email of an Amazon Web Services account.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// Consumes the builder and constructs a [`AccountDetails`](crate::types::AccountDetails).
    pub fn build(self) -> crate::types::AccountDetails {
        crate::types::AccountDetails {
            account_id: self.account_id,
            email: self.email,
        }
    }
}
