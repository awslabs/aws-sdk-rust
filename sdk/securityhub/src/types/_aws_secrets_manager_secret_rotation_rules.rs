// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the rotation schedule for the secret.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsSecretsManagerSecretRotationRules {
    /// <p>The number of days after the previous rotation to rotate the secret.</p>
    #[doc(hidden)]
    pub automatically_after_days: i32,
}
impl AwsSecretsManagerSecretRotationRules {
    /// <p>The number of days after the previous rotation to rotate the secret.</p>
    pub fn automatically_after_days(&self) -> i32 {
        self.automatically_after_days
    }
}
impl AwsSecretsManagerSecretRotationRules {
    /// Creates a new builder-style object to manufacture [`AwsSecretsManagerSecretRotationRules`](crate::types::AwsSecretsManagerSecretRotationRules).
    pub fn builder() -> crate::types::builders::AwsSecretsManagerSecretRotationRulesBuilder {
        crate::types::builders::AwsSecretsManagerSecretRotationRulesBuilder::default()
    }
}

/// A builder for [`AwsSecretsManagerSecretRotationRules`](crate::types::AwsSecretsManagerSecretRotationRules).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsSecretsManagerSecretRotationRulesBuilder {
    pub(crate) automatically_after_days: std::option::Option<i32>,
}
impl AwsSecretsManagerSecretRotationRulesBuilder {
    /// <p>The number of days after the previous rotation to rotate the secret.</p>
    pub fn automatically_after_days(mut self, input: i32) -> Self {
        self.automatically_after_days = Some(input);
        self
    }
    /// <p>The number of days after the previous rotation to rotate the secret.</p>
    pub fn set_automatically_after_days(mut self, input: std::option::Option<i32>) -> Self {
        self.automatically_after_days = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsSecretsManagerSecretRotationRules`](crate::types::AwsSecretsManagerSecretRotationRules).
    pub fn build(self) -> crate::types::AwsSecretsManagerSecretRotationRules {
        crate::types::AwsSecretsManagerSecretRotationRules {
            automatically_after_days: self.automatically_after_days.unwrap_or_default(),
        }
    }
}
