// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>details about the configuration of an OpenSearch cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsElasticsearchDomainElasticsearchClusterConfigDetails {
    /// <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    #[doc(hidden)]
    pub dedicated_master_count: i32,
    /// <p>Whether to use a dedicated master node for the Elasticsearch domain. A dedicated master node performs cluster management tasks, but doesn't hold data or respond to data upload requests.</p>
    #[doc(hidden)]
    pub dedicated_master_enabled: bool,
    /// <p>The hardware configuration of the computer that hosts the dedicated master node. A sample value is <code>m3.medium.elasticsearch</code>. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    #[doc(hidden)]
    pub dedicated_master_type: std::option::Option<std::string::String>,
    /// <p>The number of data nodes to use in the Elasticsearch domain.</p>
    #[doc(hidden)]
    pub instance_count: i32,
    /// <p>The instance type for your data nodes. For example, <code>m3.medium.elasticsearch</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
    #[doc(hidden)]
    pub zone_awareness_config: std::option::Option<
        crate::types::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
    >,
    /// <p>Whether to enable zone awareness for the Elasticsearch domain. When zone awareness is enabled, OpenSearch allocates the cluster's nodes and replica index shards across Availability Zones in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
    #[doc(hidden)]
    pub zone_awareness_enabled: bool,
}
impl AwsElasticsearchDomainElasticsearchClusterConfigDetails {
    /// <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    pub fn dedicated_master_count(&self) -> i32 {
        self.dedicated_master_count
    }
    /// <p>Whether to use a dedicated master node for the Elasticsearch domain. A dedicated master node performs cluster management tasks, but doesn't hold data or respond to data upload requests.</p>
    pub fn dedicated_master_enabled(&self) -> bool {
        self.dedicated_master_enabled
    }
    /// <p>The hardware configuration of the computer that hosts the dedicated master node. A sample value is <code>m3.medium.elasticsearch</code>. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn dedicated_master_type(&self) -> std::option::Option<&str> {
        self.dedicated_master_type.as_deref()
    }
    /// <p>The number of data nodes to use in the Elasticsearch domain.</p>
    pub fn instance_count(&self) -> i32 {
        self.instance_count
    }
    /// <p>The instance type for your data nodes. For example, <code>m3.medium.elasticsearch</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
    pub fn zone_awareness_config(
        &self,
    ) -> std::option::Option<
        &crate::types::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
    > {
        self.zone_awareness_config.as_ref()
    }
    /// <p>Whether to enable zone awareness for the Elasticsearch domain. When zone awareness is enabled, OpenSearch allocates the cluster's nodes and replica index shards across Availability Zones in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
    pub fn zone_awareness_enabled(&self) -> bool {
        self.zone_awareness_enabled
    }
}
impl AwsElasticsearchDomainElasticsearchClusterConfigDetails {
    /// Creates a new builder-style object to manufacture [`AwsElasticsearchDomainElasticsearchClusterConfigDetails`](crate::types::AwsElasticsearchDomainElasticsearchClusterConfigDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsElasticsearchDomainElasticsearchClusterConfigDetailsBuilder
    {
        crate::types::builders::AwsElasticsearchDomainElasticsearchClusterConfigDetailsBuilder::default()
    }
}

/// A builder for [`AwsElasticsearchDomainElasticsearchClusterConfigDetails`](crate::types::AwsElasticsearchDomainElasticsearchClusterConfigDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsElasticsearchDomainElasticsearchClusterConfigDetailsBuilder {
    pub(crate) dedicated_master_count: std::option::Option<i32>,
    pub(crate) dedicated_master_enabled: std::option::Option<bool>,
    pub(crate) dedicated_master_type: std::option::Option<std::string::String>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) zone_awareness_config: std::option::Option<
        crate::types::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
    >,
    pub(crate) zone_awareness_enabled: std::option::Option<bool>,
}
impl AwsElasticsearchDomainElasticsearchClusterConfigDetailsBuilder {
    /// <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    pub fn dedicated_master_count(mut self, input: i32) -> Self {
        self.dedicated_master_count = Some(input);
        self
    }
    /// <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    pub fn set_dedicated_master_count(mut self, input: std::option::Option<i32>) -> Self {
        self.dedicated_master_count = input;
        self
    }
    /// <p>Whether to use a dedicated master node for the Elasticsearch domain. A dedicated master node performs cluster management tasks, but doesn't hold data or respond to data upload requests.</p>
    pub fn dedicated_master_enabled(mut self, input: bool) -> Self {
        self.dedicated_master_enabled = Some(input);
        self
    }
    /// <p>Whether to use a dedicated master node for the Elasticsearch domain. A dedicated master node performs cluster management tasks, but doesn't hold data or respond to data upload requests.</p>
    pub fn set_dedicated_master_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.dedicated_master_enabled = input;
        self
    }
    /// <p>The hardware configuration of the computer that hosts the dedicated master node. A sample value is <code>m3.medium.elasticsearch</code>. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn dedicated_master_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.dedicated_master_type = Some(input.into());
        self
    }
    /// <p>The hardware configuration of the computer that hosts the dedicated master node. A sample value is <code>m3.medium.elasticsearch</code>. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn set_dedicated_master_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dedicated_master_type = input;
        self
    }
    /// <p>The number of data nodes to use in the Elasticsearch domain.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of data nodes to use in the Elasticsearch domain.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The instance type for your data nodes. For example, <code>m3.medium.elasticsearch</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type for your data nodes. For example, <code>m3.medium.elasticsearch</code>.</p>
    /// <p>For a list of valid values, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html">Supported instance types in Amazon OpenSearch Service</a> in the <i>Amazon OpenSearch Service Developer Guide</i>.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
    pub fn zone_awareness_config(
        mut self,
        input: crate::types::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
    ) -> Self {
        self.zone_awareness_config = Some(input);
        self
    }
    /// <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
    pub fn set_zone_awareness_config(
        mut self,
        input: std::option::Option<crate::types::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails>,
    ) -> Self {
        self.zone_awareness_config = input;
        self
    }
    /// <p>Whether to enable zone awareness for the Elasticsearch domain. When zone awareness is enabled, OpenSearch allocates the cluster's nodes and replica index shards across Availability Zones in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
    pub fn zone_awareness_enabled(mut self, input: bool) -> Self {
        self.zone_awareness_enabled = Some(input);
        self
    }
    /// <p>Whether to enable zone awareness for the Elasticsearch domain. When zone awareness is enabled, OpenSearch allocates the cluster's nodes and replica index shards across Availability Zones in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
    pub fn set_zone_awareness_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.zone_awareness_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsElasticsearchDomainElasticsearchClusterConfigDetails`](crate::types::AwsElasticsearchDomainElasticsearchClusterConfigDetails).
    pub fn build(self) -> crate::types::AwsElasticsearchDomainElasticsearchClusterConfigDetails {
        crate::types::AwsElasticsearchDomainElasticsearchClusterConfigDetails {
            dedicated_master_count: self.dedicated_master_count.unwrap_or_default(),
            dedicated_master_enabled: self.dedicated_master_enabled.unwrap_or_default(),
            dedicated_master_type: self.dedicated_master_type,
            instance_count: self.instance_count.unwrap_or_default(),
            instance_type: self.instance_type,
            zone_awareness_config: self.zone_awareness_config,
            zone_awareness_enabled: self.zone_awareness_enabled.unwrap_or_default(),
        }
    }
}
