// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the connection draining configuration for the load balancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsElbLoadBalancerConnectionDraining {
    /// <p>Indicates whether connection draining is enabled for the load balancer.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    #[doc(hidden)]
    pub timeout: i32,
}
impl AwsElbLoadBalancerConnectionDraining {
    /// <p>Indicates whether connection draining is enabled for the load balancer.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn timeout(&self) -> i32 {
        self.timeout
    }
}
impl AwsElbLoadBalancerConnectionDraining {
    /// Creates a new builder-style object to manufacture [`AwsElbLoadBalancerConnectionDraining`](crate::types::AwsElbLoadBalancerConnectionDraining).
    pub fn builder() -> crate::types::builders::AwsElbLoadBalancerConnectionDrainingBuilder {
        crate::types::builders::AwsElbLoadBalancerConnectionDrainingBuilder::default()
    }
}

/// A builder for [`AwsElbLoadBalancerConnectionDraining`](crate::types::AwsElbLoadBalancerConnectionDraining).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsElbLoadBalancerConnectionDrainingBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) timeout: std::option::Option<i32>,
}
impl AwsElbLoadBalancerConnectionDrainingBuilder {
    /// <p>Indicates whether connection draining is enabled for the load balancer.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether connection draining is enabled for the load balancer.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = Some(input);
        self
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn set_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsElbLoadBalancerConnectionDraining`](crate::types::AwsElbLoadBalancerConnectionDraining).
    pub fn build(self) -> crate::types::AwsElbLoadBalancerConnectionDraining {
        crate::types::AwsElbLoadBalancerConnectionDraining {
            enabled: self.enabled.unwrap_or_default(),
            timeout: self.timeout.unwrap_or_default(),
        }
    }
}
