// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about which control's enablement status couldn't be retrieved in a specified standard when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. This parameter also provides details about why the request was unprocessed. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnprocessedStandardsControlAssociation {
    /// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. This parameter shows the specific controls for which the enablement status couldn't be retrieved in specified standards when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. </p>
    pub standards_control_association_id: ::std::option::Option<crate::types::StandardsControlAssociationId>,
    /// <p>The error code for the unprocessed standard and control association. </p>
    pub error_code: ::std::option::Option<crate::types::UnprocessedErrorCode>,
    /// <p>The reason why the standard and control association was unprocessed. </p>
    pub error_reason: ::std::option::Option<::std::string::String>,
}
impl UnprocessedStandardsControlAssociation {
    /// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. This parameter shows the specific controls for which the enablement status couldn't be retrieved in specified standards when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. </p>
    pub fn standards_control_association_id(&self) -> ::std::option::Option<&crate::types::StandardsControlAssociationId> {
        self.standards_control_association_id.as_ref()
    }
    /// <p>The error code for the unprocessed standard and control association. </p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::UnprocessedErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The reason why the standard and control association was unprocessed. </p>
    pub fn error_reason(&self) -> ::std::option::Option<&str> {
        self.error_reason.as_deref()
    }
}
impl UnprocessedStandardsControlAssociation {
    /// Creates a new builder-style object to manufacture [`UnprocessedStandardsControlAssociation`](crate::types::UnprocessedStandardsControlAssociation).
    pub fn builder() -> crate::types::builders::UnprocessedStandardsControlAssociationBuilder {
        crate::types::builders::UnprocessedStandardsControlAssociationBuilder::default()
    }
}

/// A builder for [`UnprocessedStandardsControlAssociation`](crate::types::UnprocessedStandardsControlAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UnprocessedStandardsControlAssociationBuilder {
    pub(crate) standards_control_association_id: ::std::option::Option<crate::types::StandardsControlAssociationId>,
    pub(crate) error_code: ::std::option::Option<crate::types::UnprocessedErrorCode>,
    pub(crate) error_reason: ::std::option::Option<::std::string::String>,
}
impl UnprocessedStandardsControlAssociationBuilder {
    /// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. This parameter shows the specific controls for which the enablement status couldn't be retrieved in specified standards when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. </p>
    /// This field is required.
    pub fn standards_control_association_id(mut self, input: crate::types::StandardsControlAssociationId) -> Self {
        self.standards_control_association_id = ::std::option::Option::Some(input);
        self
    }
    /// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. This parameter shows the specific controls for which the enablement status couldn't be retrieved in specified standards when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. </p>
    pub fn set_standards_control_association_id(mut self, input: ::std::option::Option<crate::types::StandardsControlAssociationId>) -> Self {
        self.standards_control_association_id = input;
        self
    }
    /// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. This parameter shows the specific controls for which the enablement status couldn't be retrieved in specified standards when calling <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html">BatchUpdateStandardsControlAssociations</a>. </p>
    pub fn get_standards_control_association_id(&self) -> &::std::option::Option<crate::types::StandardsControlAssociationId> {
        &self.standards_control_association_id
    }
    /// <p>The error code for the unprocessed standard and control association. </p>
    /// This field is required.
    pub fn error_code(mut self, input: crate::types::UnprocessedErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code for the unprocessed standard and control association. </p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::UnprocessedErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code for the unprocessed standard and control association. </p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::UnprocessedErrorCode> {
        &self.error_code
    }
    /// <p>The reason why the standard and control association was unprocessed. </p>
    pub fn error_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason why the standard and control association was unprocessed. </p>
    pub fn set_error_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_reason = input;
        self
    }
    /// <p>The reason why the standard and control association was unprocessed. </p>
    pub fn get_error_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_reason
    }
    /// Consumes the builder and constructs a [`UnprocessedStandardsControlAssociation`](crate::types::UnprocessedStandardsControlAssociation).
    pub fn build(self) -> crate::types::UnprocessedStandardsControlAssociation {
        crate::types::UnprocessedStandardsControlAssociation {
            standards_control_association_id: self.standards_control_association_id,
            error_code: self.error_code,
            error_reason: self.error_reason,
        }
    }
}
