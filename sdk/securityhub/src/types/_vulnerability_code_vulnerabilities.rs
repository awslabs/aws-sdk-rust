// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about the vulnerabilities found in your Lambda function code. This field pertains to findings that Security Hub receives from Amazon Inspector. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VulnerabilityCodeVulnerabilities {
    /// <p> The Common Weakness Enumeration (CWE) item associated with the detected code vulnerability. </p>
    pub cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
    pub file_path: ::std::option::Option<crate::types::CodeVulnerabilitiesFilePath>,
    /// <p> The Amazon Resource Name (ARN) of the Lambda layer in which the code vulnerability is located. </p>
    pub source_arn: ::std::option::Option<::std::string::String>,
}
impl VulnerabilityCodeVulnerabilities {
    /// <p> The Common Weakness Enumeration (CWE) item associated with the detected code vulnerability. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cwes.is_none()`.
    pub fn cwes(&self) -> &[::std::string::String] {
        self.cwes.as_deref().unwrap_or_default()
    }
    /// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
    pub fn file_path(&self) -> ::std::option::Option<&crate::types::CodeVulnerabilitiesFilePath> {
        self.file_path.as_ref()
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda layer in which the code vulnerability is located. </p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
}
impl VulnerabilityCodeVulnerabilities {
    /// Creates a new builder-style object to manufacture [`VulnerabilityCodeVulnerabilities`](crate::types::VulnerabilityCodeVulnerabilities).
    pub fn builder() -> crate::types::builders::VulnerabilityCodeVulnerabilitiesBuilder {
        crate::types::builders::VulnerabilityCodeVulnerabilitiesBuilder::default()
    }
}

/// A builder for [`VulnerabilityCodeVulnerabilities`](crate::types::VulnerabilityCodeVulnerabilities).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VulnerabilityCodeVulnerabilitiesBuilder {
    pub(crate) cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) file_path: ::std::option::Option<crate::types::CodeVulnerabilitiesFilePath>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
}
impl VulnerabilityCodeVulnerabilitiesBuilder {
    /// Appends an item to `cwes`.
    ///
    /// To override the contents of this collection use [`set_cwes`](Self::set_cwes).
    ///
    /// <p> The Common Weakness Enumeration (CWE) item associated with the detected code vulnerability. </p>
    pub fn cwes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cwes.unwrap_or_default();
        v.push(input.into());
        self.cwes = ::std::option::Option::Some(v);
        self
    }
    /// <p> The Common Weakness Enumeration (CWE) item associated with the detected code vulnerability. </p>
    pub fn set_cwes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cwes = input;
        self
    }
    /// <p> The Common Weakness Enumeration (CWE) item associated with the detected code vulnerability. </p>
    pub fn get_cwes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cwes
    }
    /// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
    pub fn file_path(mut self, input: crate::types::CodeVulnerabilitiesFilePath) -> Self {
        self.file_path = ::std::option::Option::Some(input);
        self
    }
    /// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
    pub fn set_file_path(mut self, input: ::std::option::Option<crate::types::CodeVulnerabilitiesFilePath>) -> Self {
        self.file_path = input;
        self
    }
    /// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
    pub fn get_file_path(&self) -> &::std::option::Option<crate::types::CodeVulnerabilitiesFilePath> {
        &self.file_path
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda layer in which the code vulnerability is located. </p>
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda layer in which the code vulnerability is located. </p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda layer in which the code vulnerability is located. </p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// Consumes the builder and constructs a [`VulnerabilityCodeVulnerabilities`](crate::types::VulnerabilityCodeVulnerabilities).
    pub fn build(self) -> crate::types::VulnerabilityCodeVulnerabilities {
        crate::types::VulnerabilityCodeVulnerabilities {
            cwes: self.cwes,
            file_path: self.file_path,
            source_arn: self.source_arn,
        }
    }
}
