// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that describes the Amazon S3 bucket, HTTP server (for example, a web server), AWS Elemental MediaStore, or other server from which CloudFront gets your files.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCloudFrontDistributionOriginItem {
    /// <p>Amazon S3 origins: The DNS name of the S3 bucket from which you want CloudFront to get objects for this origin.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the origin or origin group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.</p>
    #[doc(hidden)]
    pub origin_path: std::option::Option<std::string::String>,
    /// <p>An origin that is an S3 bucket that is not configured with static website hosting.</p>
    #[doc(hidden)]
    pub s3_origin_config:
        std::option::Option<crate::types::AwsCloudFrontDistributionOriginS3OriginConfig>,
    /// <p>An origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this attribute. If the Amazon S3 bucket is not configured with static website hosting, use the <code>S3OriginConfig</code> type instead. </p>
    #[doc(hidden)]
    pub custom_origin_config:
        std::option::Option<crate::types::AwsCloudFrontDistributionOriginCustomOriginConfig>,
}
impl AwsCloudFrontDistributionOriginItem {
    /// <p>Amazon S3 origins: The DNS name of the S3 bucket from which you want CloudFront to get objects for this origin.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A unique identifier for the origin or origin group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.</p>
    pub fn origin_path(&self) -> std::option::Option<&str> {
        self.origin_path.as_deref()
    }
    /// <p>An origin that is an S3 bucket that is not configured with static website hosting.</p>
    pub fn s3_origin_config(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionOriginS3OriginConfig> {
        self.s3_origin_config.as_ref()
    }
    /// <p>An origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this attribute. If the Amazon S3 bucket is not configured with static website hosting, use the <code>S3OriginConfig</code> type instead. </p>
    pub fn custom_origin_config(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionOriginCustomOriginConfig> {
        self.custom_origin_config.as_ref()
    }
}
impl AwsCloudFrontDistributionOriginItem {
    /// Creates a new builder-style object to manufacture [`AwsCloudFrontDistributionOriginItem`](crate::types::AwsCloudFrontDistributionOriginItem).
    pub fn builder() -> crate::types::builders::AwsCloudFrontDistributionOriginItemBuilder {
        crate::types::builders::AwsCloudFrontDistributionOriginItemBuilder::default()
    }
}

/// A builder for [`AwsCloudFrontDistributionOriginItem`](crate::types::AwsCloudFrontDistributionOriginItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCloudFrontDistributionOriginItemBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) origin_path: std::option::Option<std::string::String>,
    pub(crate) s3_origin_config:
        std::option::Option<crate::types::AwsCloudFrontDistributionOriginS3OriginConfig>,
    pub(crate) custom_origin_config:
        std::option::Option<crate::types::AwsCloudFrontDistributionOriginCustomOriginConfig>,
}
impl AwsCloudFrontDistributionOriginItemBuilder {
    /// <p>Amazon S3 origins: The DNS name of the S3 bucket from which you want CloudFront to get objects for this origin.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>Amazon S3 origins: The DNS name of the S3 bucket from which you want CloudFront to get objects for this origin.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>A unique identifier for the origin or origin group.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the origin or origin group.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.</p>
    pub fn origin_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.origin_path = Some(input.into());
        self
    }
    /// <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.</p>
    pub fn set_origin_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.origin_path = input;
        self
    }
    /// <p>An origin that is an S3 bucket that is not configured with static website hosting.</p>
    pub fn s3_origin_config(
        mut self,
        input: crate::types::AwsCloudFrontDistributionOriginS3OriginConfig,
    ) -> Self {
        self.s3_origin_config = Some(input);
        self
    }
    /// <p>An origin that is an S3 bucket that is not configured with static website hosting.</p>
    pub fn set_s3_origin_config(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionOriginS3OriginConfig>,
    ) -> Self {
        self.s3_origin_config = input;
        self
    }
    /// <p>An origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this attribute. If the Amazon S3 bucket is not configured with static website hosting, use the <code>S3OriginConfig</code> type instead. </p>
    pub fn custom_origin_config(
        mut self,
        input: crate::types::AwsCloudFrontDistributionOriginCustomOriginConfig,
    ) -> Self {
        self.custom_origin_config = Some(input);
        self
    }
    /// <p>An origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this attribute. If the Amazon S3 bucket is not configured with static website hosting, use the <code>S3OriginConfig</code> type instead. </p>
    pub fn set_custom_origin_config(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionOriginCustomOriginConfig>,
    ) -> Self {
        self.custom_origin_config = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCloudFrontDistributionOriginItem`](crate::types::AwsCloudFrontDistributionOriginItem).
    pub fn build(self) -> crate::types::AwsCloudFrontDistributionOriginItem {
        crate::types::AwsCloudFrontDistributionOriginItem {
            domain_name: self.domain_name,
            id: self.id,
            origin_path: self.origin_path,
            s3_origin_config: self.s3_origin_config,
            custom_origin_config: self.custom_origin_config,
        }
    }
}
