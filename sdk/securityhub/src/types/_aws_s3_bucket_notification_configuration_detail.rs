// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for an S3 bucket notification configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsS3BucketNotificationConfigurationDetail {
    /// <p>The list of events that trigger a notification.</p>
    pub events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The filters that determine which S3 buckets generate notifications.</p>
    pub filter: ::std::option::Option<crate::types::AwsS3BucketNotificationConfigurationFilter>,
    /// <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the notification.</p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the type of notification. Notifications can be generated using Lambda functions, Amazon SQS queues, or Amazon SNS topics, with corresponding valid values as follows:</p>
    /// <ul>
    /// <li> <p> <code>LambdaConfiguration</code> </p> </li>
    /// <li> <p> <code>QueueConfiguration</code> </p> </li>
    /// <li> <p> <code>TopicConfiguration</code> </p> </li>
    /// </ul>
    pub r#type: ::std::option::Option<::std::string::String>,
}
impl AwsS3BucketNotificationConfigurationDetail {
    /// <p>The list of events that trigger a notification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[::std::string::String] {
        self.events.as_deref().unwrap_or_default()
    }
    /// <p>The filters that determine which S3 buckets generate notifications.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::AwsS3BucketNotificationConfigurationFilter> {
        self.filter.as_ref()
    }
    /// <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the notification.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>Indicates the type of notification. Notifications can be generated using Lambda functions, Amazon SQS queues, or Amazon SNS topics, with corresponding valid values as follows:</p>
    /// <ul>
    /// <li> <p> <code>LambdaConfiguration</code> </p> </li>
    /// <li> <p> <code>QueueConfiguration</code> </p> </li>
    /// <li> <p> <code>TopicConfiguration</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsS3BucketNotificationConfigurationDetail {
    /// Creates a new builder-style object to manufacture [`AwsS3BucketNotificationConfigurationDetail`](crate::types::AwsS3BucketNotificationConfigurationDetail).
    pub fn builder() -> crate::types::builders::AwsS3BucketNotificationConfigurationDetailBuilder {
        crate::types::builders::AwsS3BucketNotificationConfigurationDetailBuilder::default()
    }
}

/// A builder for [`AwsS3BucketNotificationConfigurationDetail`](crate::types::AwsS3BucketNotificationConfigurationDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsS3BucketNotificationConfigurationDetailBuilder {
    pub(crate) events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filter: ::std::option::Option<crate::types::AwsS3BucketNotificationConfigurationFilter>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl AwsS3BucketNotificationConfigurationDetailBuilder {
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The list of events that trigger a notification.</p>
    pub fn events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input.into());
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of events that trigger a notification.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The list of events that trigger a notification.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.events
    }
    /// <p>The filters that determine which S3 buckets generate notifications.</p>
    pub fn filter(mut self, input: crate::types::AwsS3BucketNotificationConfigurationFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filters that determine which S3 buckets generate notifications.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::AwsS3BucketNotificationConfigurationFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The filters that determine which S3 buckets generate notifications.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::AwsS3BucketNotificationConfigurationFilter> {
        &self.filter
    }
    /// <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the notification.</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the notification.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the notification.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>Indicates the type of notification. Notifications can be generated using Lambda functions, Amazon SQS queues, or Amazon SNS topics, with corresponding valid values as follows:</p>
    /// <ul>
    /// <li> <p> <code>LambdaConfiguration</code> </p> </li>
    /// <li> <p> <code>QueueConfiguration</code> </p> </li>
    /// <li> <p> <code>TopicConfiguration</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the type of notification. Notifications can be generated using Lambda functions, Amazon SQS queues, or Amazon SNS topics, with corresponding valid values as follows:</p>
    /// <ul>
    /// <li> <p> <code>LambdaConfiguration</code> </p> </li>
    /// <li> <p> <code>QueueConfiguration</code> </p> </li>
    /// <li> <p> <code>TopicConfiguration</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates the type of notification. Notifications can be generated using Lambda functions, Amazon SQS queues, or Amazon SNS topics, with corresponding valid values as follows:</p>
    /// <ul>
    /// <li> <p> <code>LambdaConfiguration</code> </p> </li>
    /// <li> <p> <code>QueueConfiguration</code> </p> </li>
    /// <li> <p> <code>TopicConfiguration</code> </p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`AwsS3BucketNotificationConfigurationDetail`](crate::types::AwsS3BucketNotificationConfigurationDetail).
    pub fn build(self) -> crate::types::AwsS3BucketNotificationConfigurationDetail {
        crate::types::AwsS3BucketNotificationConfigurationDetail {
            events: self.events,
            filter: self.filter,
            destination: self.destination,
            r#type: self.r#type,
        }
    }
}
