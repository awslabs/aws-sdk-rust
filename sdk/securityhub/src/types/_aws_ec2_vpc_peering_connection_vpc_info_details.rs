// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a VPC in a VPC peering connection. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2VpcPeeringConnectionVpcInfoDetails {
    /// <p>The IPv4 CIDR block for the VPC. </p>
    #[doc(hidden)]
    pub cidr_block: std::option::Option<std::string::String>,
    /// <p>Information about the IPv4 CIDR blocks for the VPC. </p>
    #[doc(hidden)]
    pub cidr_block_set:
        std::option::Option<std::vec::Vec<crate::types::VpcInfoCidrBlockSetDetails>>,
    /// <p>The IPv6 CIDR block for the VPC. </p>
    #[doc(hidden)]
    pub ipv6_cidr_block_set:
        std::option::Option<std::vec::Vec<crate::types::VpcInfoIpv6CidrBlockSetDetails>>,
    /// <p>The ID of the Amazon Web Services account that owns the VPC. </p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC. </p>
    #[doc(hidden)]
    pub peering_options: std::option::Option<crate::types::VpcInfoPeeringOptionsDetails>,
    /// <p>The Amazon Web Services Region in which the VPC is located. </p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC. </p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
}
impl AwsEc2VpcPeeringConnectionVpcInfoDetails {
    /// <p>The IPv4 CIDR block for the VPC. </p>
    pub fn cidr_block(&self) -> std::option::Option<&str> {
        self.cidr_block.as_deref()
    }
    /// <p>Information about the IPv4 CIDR blocks for the VPC. </p>
    pub fn cidr_block_set(
        &self,
    ) -> std::option::Option<&[crate::types::VpcInfoCidrBlockSetDetails]> {
        self.cidr_block_set.as_deref()
    }
    /// <p>The IPv6 CIDR block for the VPC. </p>
    pub fn ipv6_cidr_block_set(
        &self,
    ) -> std::option::Option<&[crate::types::VpcInfoIpv6CidrBlockSetDetails]> {
        self.ipv6_cidr_block_set.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC. </p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC. </p>
    pub fn peering_options(
        &self,
    ) -> std::option::Option<&crate::types::VpcInfoPeeringOptionsDetails> {
        self.peering_options.as_ref()
    }
    /// <p>The Amazon Web Services Region in which the VPC is located. </p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The ID of the VPC. </p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl AwsEc2VpcPeeringConnectionVpcInfoDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2VpcPeeringConnectionVpcInfoDetails`](crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails).
    pub fn builder() -> crate::types::builders::AwsEc2VpcPeeringConnectionVpcInfoDetailsBuilder {
        crate::types::builders::AwsEc2VpcPeeringConnectionVpcInfoDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2VpcPeeringConnectionVpcInfoDetails`](crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2VpcPeeringConnectionVpcInfoDetailsBuilder {
    pub(crate) cidr_block: std::option::Option<std::string::String>,
    pub(crate) cidr_block_set:
        std::option::Option<std::vec::Vec<crate::types::VpcInfoCidrBlockSetDetails>>,
    pub(crate) ipv6_cidr_block_set:
        std::option::Option<std::vec::Vec<crate::types::VpcInfoIpv6CidrBlockSetDetails>>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) peering_options: std::option::Option<crate::types::VpcInfoPeeringOptionsDetails>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
}
impl AwsEc2VpcPeeringConnectionVpcInfoDetailsBuilder {
    /// <p>The IPv4 CIDR block for the VPC. </p>
    pub fn cidr_block(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr_block = Some(input.into());
        self
    }
    /// <p>The IPv4 CIDR block for the VPC. </p>
    pub fn set_cidr_block(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr_block = input;
        self
    }
    /// Appends an item to `cidr_block_set`.
    ///
    /// To override the contents of this collection use [`set_cidr_block_set`](Self::set_cidr_block_set).
    ///
    /// <p>Information about the IPv4 CIDR blocks for the VPC. </p>
    pub fn cidr_block_set(mut self, input: crate::types::VpcInfoCidrBlockSetDetails) -> Self {
        let mut v = self.cidr_block_set.unwrap_or_default();
        v.push(input);
        self.cidr_block_set = Some(v);
        self
    }
    /// <p>Information about the IPv4 CIDR blocks for the VPC. </p>
    pub fn set_cidr_block_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VpcInfoCidrBlockSetDetails>>,
    ) -> Self {
        self.cidr_block_set = input;
        self
    }
    /// Appends an item to `ipv6_cidr_block_set`.
    ///
    /// To override the contents of this collection use [`set_ipv6_cidr_block_set`](Self::set_ipv6_cidr_block_set).
    ///
    /// <p>The IPv6 CIDR block for the VPC. </p>
    pub fn ipv6_cidr_block_set(
        mut self,
        input: crate::types::VpcInfoIpv6CidrBlockSetDetails,
    ) -> Self {
        let mut v = self.ipv6_cidr_block_set.unwrap_or_default();
        v.push(input);
        self.ipv6_cidr_block_set = Some(v);
        self
    }
    /// <p>The IPv6 CIDR block for the VPC. </p>
    pub fn set_ipv6_cidr_block_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VpcInfoIpv6CidrBlockSetDetails>>,
    ) -> Self {
        self.ipv6_cidr_block_set = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC. </p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC. </p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC. </p>
    pub fn peering_options(mut self, input: crate::types::VpcInfoPeeringOptionsDetails) -> Self {
        self.peering_options = Some(input);
        self
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC. </p>
    pub fn set_peering_options(
        mut self,
        input: std::option::Option<crate::types::VpcInfoPeeringOptionsDetails>,
    ) -> Self {
        self.peering_options = input;
        self
    }
    /// <p>The Amazon Web Services Region in which the VPC is located. </p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region in which the VPC is located. </p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The ID of the VPC. </p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC. </p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2VpcPeeringConnectionVpcInfoDetails`](crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails).
    pub fn build(self) -> crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails {
        crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails {
            cidr_block: self.cidr_block,
            cidr_block_set: self.cidr_block_set,
            ipv6_cidr_block_set: self.ipv6_cidr_block_set,
            owner_id: self.owner_id,
            peering_options: self.peering_options,
            region: self.region,
            vpc_id: self.vpc_id,
        }
    }
}
