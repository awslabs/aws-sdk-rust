// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Amazon EC2 security group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2SecurityGroupDetails {
    /// <p>The name of the security group.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the security group.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The inbound rules associated with the security group.</p>
    pub ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>,
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    pub ip_permissions_egress: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>,
}
impl AwsEc2SecurityGroupDetails {
    /// <p>The name of the security group.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The ID of the security group.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The inbound rules associated with the security group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ip_permissions.is_none()`.
    pub fn ip_permissions(&self) -> &[crate::types::AwsEc2SecurityGroupIpPermission] {
        self.ip_permissions.as_deref().unwrap_or_default()
    }
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ip_permissions_egress.is_none()`.
    pub fn ip_permissions_egress(&self) -> &[crate::types::AwsEc2SecurityGroupIpPermission] {
        self.ip_permissions_egress.as_deref().unwrap_or_default()
    }
}
impl AwsEc2SecurityGroupDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2SecurityGroupDetails`](crate::types::AwsEc2SecurityGroupDetails).
    pub fn builder() -> crate::types::builders::AwsEc2SecurityGroupDetailsBuilder {
        crate::types::builders::AwsEc2SecurityGroupDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2SecurityGroupDetails`](crate::types::AwsEc2SecurityGroupDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2SecurityGroupDetailsBuilder {
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>,
    pub(crate) ip_permissions_egress: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>,
}
impl AwsEc2SecurityGroupDetailsBuilder {
    /// <p>The name of the security group.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the security group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>The ID of the security group.</p>
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the security group.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The ID of the security group.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the security group.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `ip_permissions`.
    ///
    /// To override the contents of this collection use [`set_ip_permissions`](Self::set_ip_permissions).
    ///
    /// <p>The inbound rules associated with the security group.</p>
    pub fn ip_permissions(mut self, input: crate::types::AwsEc2SecurityGroupIpPermission) -> Self {
        let mut v = self.ip_permissions.unwrap_or_default();
        v.push(input);
        self.ip_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The inbound rules associated with the security group.</p>
    pub fn set_ip_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>) -> Self {
        self.ip_permissions = input;
        self
    }
    /// <p>The inbound rules associated with the security group.</p>
    pub fn get_ip_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>> {
        &self.ip_permissions
    }
    /// Appends an item to `ip_permissions_egress`.
    ///
    /// To override the contents of this collection use [`set_ip_permissions_egress`](Self::set_ip_permissions_egress).
    ///
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    pub fn ip_permissions_egress(mut self, input: crate::types::AwsEc2SecurityGroupIpPermission) -> Self {
        let mut v = self.ip_permissions_egress.unwrap_or_default();
        v.push(input);
        self.ip_permissions_egress = ::std::option::Option::Some(v);
        self
    }
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    pub fn set_ip_permissions_egress(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>>) -> Self {
        self.ip_permissions_egress = input;
        self
    }
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    pub fn get_ip_permissions_egress(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2SecurityGroupIpPermission>> {
        &self.ip_permissions_egress
    }
    /// Consumes the builder and constructs a [`AwsEc2SecurityGroupDetails`](crate::types::AwsEc2SecurityGroupDetails).
    pub fn build(self) -> crate::types::AwsEc2SecurityGroupDetails {
        crate::types::AwsEc2SecurityGroupDetails {
            group_name: self.group_name,
            group_id: self.group_id,
            owner_id: self.owner_id,
            vpc_id: self.vpc_id,
            ip_permissions: self.ip_permissions,
            ip_permissions_egress: self.ip_permissions_egress,
        }
    }
}
