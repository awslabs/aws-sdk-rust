// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata options for the instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsAutoScalingLaunchConfigurationMetadataOptions {
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. By default, the metadata endpoint is enabled.</p>
    #[doc(hidden)]
    pub http_endpoint: std::option::Option<std::string::String>,
    /// <p>The HTTP <code>PUT</code> response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    #[doc(hidden)]
    pub http_put_response_hop_limit: i32,
    /// <p>Indicates whether token usage is <code>required</code> or <code>optional</code> for metadata requests. By default, token usage is <code>optional</code>.</p>
    #[doc(hidden)]
    pub http_tokens: std::option::Option<std::string::String>,
}
impl AwsAutoScalingLaunchConfigurationMetadataOptions {
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. By default, the metadata endpoint is enabled.</p>
    pub fn http_endpoint(&self) -> std::option::Option<&str> {
        self.http_endpoint.as_deref()
    }
    /// <p>The HTTP <code>PUT</code> response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    pub fn http_put_response_hop_limit(&self) -> i32 {
        self.http_put_response_hop_limit
    }
    /// <p>Indicates whether token usage is <code>required</code> or <code>optional</code> for metadata requests. By default, token usage is <code>optional</code>.</p>
    pub fn http_tokens(&self) -> std::option::Option<&str> {
        self.http_tokens.as_deref()
    }
}
impl AwsAutoScalingLaunchConfigurationMetadataOptions {
    /// Creates a new builder-style object to manufacture [`AwsAutoScalingLaunchConfigurationMetadataOptions`](crate::types::AwsAutoScalingLaunchConfigurationMetadataOptions).
    pub fn builder(
    ) -> crate::types::builders::AwsAutoScalingLaunchConfigurationMetadataOptionsBuilder {
        crate::types::builders::AwsAutoScalingLaunchConfigurationMetadataOptionsBuilder::default()
    }
}

/// A builder for [`AwsAutoScalingLaunchConfigurationMetadataOptions`](crate::types::AwsAutoScalingLaunchConfigurationMetadataOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsAutoScalingLaunchConfigurationMetadataOptionsBuilder {
    pub(crate) http_endpoint: std::option::Option<std::string::String>,
    pub(crate) http_put_response_hop_limit: std::option::Option<i32>,
    pub(crate) http_tokens: std::option::Option<std::string::String>,
}
impl AwsAutoScalingLaunchConfigurationMetadataOptionsBuilder {
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. By default, the metadata endpoint is enabled.</p>
    pub fn http_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_endpoint = Some(input.into());
        self
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. By default, the metadata endpoint is enabled.</p>
    pub fn set_http_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_endpoint = input;
        self
    }
    /// <p>The HTTP <code>PUT</code> response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.http_put_response_hop_limit = Some(input);
        self
    }
    /// <p>The HTTP <code>PUT</code> response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    pub fn set_http_put_response_hop_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.http_put_response_hop_limit = input;
        self
    }
    /// <p>Indicates whether token usage is <code>required</code> or <code>optional</code> for metadata requests. By default, token usage is <code>optional</code>.</p>
    pub fn http_tokens(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_tokens = Some(input.into());
        self
    }
    /// <p>Indicates whether token usage is <code>required</code> or <code>optional</code> for metadata requests. By default, token usage is <code>optional</code>.</p>
    pub fn set_http_tokens(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_tokens = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsAutoScalingLaunchConfigurationMetadataOptions`](crate::types::AwsAutoScalingLaunchConfigurationMetadataOptions).
    pub fn build(self) -> crate::types::AwsAutoScalingLaunchConfigurationMetadataOptions {
        crate::types::AwsAutoScalingLaunchConfigurationMetadataOptions {
            http_endpoint: self.http_endpoint,
            http_put_response_hop_limit: self.http_put_response_hop_limit.unwrap_or_default(),
            http_tokens: self.http_tokens,
        }
    }
}
