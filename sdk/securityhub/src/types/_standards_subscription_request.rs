// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The standard that you want to enable.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StandardsSubscriptionRequest {
    /// <p>The ARN of the standard that you want to enable. To view the list of available standards and their ARNs, use the <code>DescribeStandards</code> operation.</p>
    pub standards_arn: ::std::option::Option<::std::string::String>,
    /// <p>A key-value pair of input for the standard.</p>
    pub standards_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StandardsSubscriptionRequest {
    /// <p>The ARN of the standard that you want to enable. To view the list of available standards and their ARNs, use the <code>DescribeStandards</code> operation.</p>
    pub fn standards_arn(&self) -> ::std::option::Option<&str> {
        self.standards_arn.as_deref()
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn standards_input(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.standards_input.as_ref()
    }
}
impl StandardsSubscriptionRequest {
    /// Creates a new builder-style object to manufacture [`StandardsSubscriptionRequest`](crate::types::StandardsSubscriptionRequest).
    pub fn builder() -> crate::types::builders::StandardsSubscriptionRequestBuilder {
        crate::types::builders::StandardsSubscriptionRequestBuilder::default()
    }
}

/// A builder for [`StandardsSubscriptionRequest`](crate::types::StandardsSubscriptionRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StandardsSubscriptionRequestBuilder {
    pub(crate) standards_arn: ::std::option::Option<::std::string::String>,
    pub(crate) standards_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StandardsSubscriptionRequestBuilder {
    /// <p>The ARN of the standard that you want to enable. To view the list of available standards and their ARNs, use the <code>DescribeStandards</code> operation.</p>
    /// This field is required.
    pub fn standards_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standards_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the standard that you want to enable. To view the list of available standards and their ARNs, use the <code>DescribeStandards</code> operation.</p>
    pub fn set_standards_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standards_arn = input;
        self
    }
    /// <p>The ARN of the standard that you want to enable. To view the list of available standards and their ARNs, use the <code>DescribeStandards</code> operation.</p>
    pub fn get_standards_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.standards_arn
    }
    /// Adds a key-value pair to `standards_input`.
    ///
    /// To override the contents of this collection use [`set_standards_input`](Self::set_standards_input).
    ///
    /// <p>A key-value pair of input for the standard.</p>
    pub fn standards_input(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.standards_input.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.standards_input = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn set_standards_input(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.standards_input = input;
        self
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn get_standards_input(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.standards_input
    }
    /// Consumes the builder and constructs a [`StandardsSubscriptionRequest`](crate::types::StandardsSubscriptionRequest).
    pub fn build(self) -> crate::types::StandardsSubscriptionRequest {
        crate::types::StandardsSubscriptionRequest {
            standards_arn: self.standards_arn,
            standards_input: self.standards_input,
        }
    }
}
