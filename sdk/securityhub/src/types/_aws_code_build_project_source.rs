// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the build input source code for this build project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCodeBuildProjectSource {
    /// <p>The type of repository that contains the source code to be built. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code> - The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code> - The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code> - The source code is in a GitHub repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code> - The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code> - The source code is in an S3 input bucket. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>Information about the location of the source code to be built.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec file (for example, <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code> ).</p> </li>
    /// <li> <p>For source code in an S3 input bucket, one of the following.</p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>bucket-name/path/to/object-name.zip</code>).</p> </li>
    /// <li> <p> The path to the folder that contains the source code (for example, <code>bucket-name/path/to/source-code/folder/</code>).</p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the build spec file.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the build spec file. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>Information about the Git clone depth for the build project.</p>
    #[doc(hidden)]
    pub git_clone_depth: i32,
    /// <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
    #[doc(hidden)]
    pub insecure_ssl: bool,
}
impl AwsCodeBuildProjectSource {
    /// <p>The type of repository that contains the source code to be built. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code> - The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code> - The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code> - The source code is in a GitHub repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code> - The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code> - The source code is in an S3 input bucket. </p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Information about the location of the source code to be built.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec file (for example, <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code> ).</p> </li>
    /// <li> <p>For source code in an S3 input bucket, one of the following.</p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>bucket-name/path/to/object-name.zip</code>).</p> </li>
    /// <li> <p> The path to the folder that contains the source code (for example, <code>bucket-name/path/to/source-code/folder/</code>).</p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the build spec file.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the build spec file. </p> </li>
    /// </ul>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn git_clone_depth(&self) -> i32 {
        self.git_clone_depth
    }
    /// <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
    pub fn insecure_ssl(&self) -> bool {
        self.insecure_ssl
    }
}
impl AwsCodeBuildProjectSource {
    /// Creates a new builder-style object to manufacture [`AwsCodeBuildProjectSource`](crate::types::AwsCodeBuildProjectSource).
    pub fn builder() -> crate::types::builders::AwsCodeBuildProjectSourceBuilder {
        crate::types::builders::AwsCodeBuildProjectSourceBuilder::default()
    }
}

/// A builder for [`AwsCodeBuildProjectSource`](crate::types::AwsCodeBuildProjectSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCodeBuildProjectSourceBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) git_clone_depth: std::option::Option<i32>,
    pub(crate) insecure_ssl: std::option::Option<bool>,
}
impl AwsCodeBuildProjectSourceBuilder {
    /// <p>The type of repository that contains the source code to be built. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code> - The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code> - The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code> - The source code is in a GitHub repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code> - The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code> - The source code is in an S3 input bucket. </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of repository that contains the source code to be built. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p> </li>
    /// <li> <p> <code>CODECOMMIT</code> - The source code is in an CodeCommit repository.</p> </li>
    /// <li> <p> <code>CODEPIPELINE</code> - The source code settings are specified in the source action of a pipeline in CodePipeline.</p> </li>
    /// <li> <p> <code>GITHUB</code> - The source code is in a GitHub repository.</p> </li>
    /// <li> <p> <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise repository.</p> </li>
    /// <li> <p> <code>NO_SOURCE</code> - The project does not have input source code.</p> </li>
    /// <li> <p> <code>S3</code> - The source code is in an S3 input bucket. </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Information about the location of the source code to be built.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec file (for example, <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code> ).</p> </li>
    /// <li> <p>For source code in an S3 input bucket, one of the following.</p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>bucket-name/path/to/object-name.zip</code>).</p> </li>
    /// <li> <p> The path to the folder that contains the source code (for example, <code>bucket-name/path/to/source-code/folder/</code>).</p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the build spec file.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the build spec file. </p> </li>
    /// </ul>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>Information about the location of the source code to be built.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p>For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.</p> </li>
    /// <li> <p>For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec file (for example, <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code> ).</p> </li>
    /// <li> <p>For source code in an S3 input bucket, one of the following.</p>
    /// <ul>
    /// <li> <p>The path to the ZIP file that contains the source code (for example, <code>bucket-name/path/to/object-name.zip</code>).</p> </li>
    /// <li> <p> The path to the folder that contains the source code (for example, <code>bucket-name/path/to/source-code/folder/</code>).</p> </li>
    /// </ul> </li>
    /// <li> <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the build spec file.</p> </li>
    /// <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the build spec file. </p> </li>
    /// </ul>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn git_clone_depth(mut self, input: i32) -> Self {
        self.git_clone_depth = Some(input);
        self
    }
    /// <p>Information about the Git clone depth for the build project.</p>
    pub fn set_git_clone_depth(mut self, input: std::option::Option<i32>) -> Self {
        self.git_clone_depth = input;
        self
    }
    /// <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
    pub fn insecure_ssl(mut self, input: bool) -> Self {
        self.insecure_ssl = Some(input);
        self
    }
    /// <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
    pub fn set_insecure_ssl(mut self, input: std::option::Option<bool>) -> Self {
        self.insecure_ssl = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCodeBuildProjectSource`](crate::types::AwsCodeBuildProjectSource).
    pub fn build(self) -> crate::types::AwsCodeBuildProjectSource {
        crate::types::AwsCodeBuildProjectSource {
            r#type: self.r#type,
            location: self.location,
            git_clone_depth: self.git_clone_depth.unwrap_or_default(),
            insecure_ssl: self.insecure_ssl.unwrap_or_default(),
        }
    }
}
