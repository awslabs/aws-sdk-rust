// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a rule to exclude from a rule group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WafExcludedRule {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
}
impl WafExcludedRule {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
}
impl WafExcludedRule {
    /// Creates a new builder-style object to manufacture [`WafExcludedRule`](crate::types::WafExcludedRule).
    pub fn builder() -> crate::types::builders::WafExcludedRuleBuilder {
        crate::types::builders::WafExcludedRuleBuilder::default()
    }
}

/// A builder for [`WafExcludedRule`](crate::types::WafExcludedRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WafExcludedRuleBuilder {
    pub(crate) rule_id: std::option::Option<std::string::String>,
}
impl WafExcludedRuleBuilder {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// Consumes the builder and constructs a [`WafExcludedRule`](crate::types::WafExcludedRule).
    pub fn build(self) -> crate::types::WafExcludedRule {
        crate::types::WafExcludedRule {
            rule_id: self.rule_id,
        }
    }
}
