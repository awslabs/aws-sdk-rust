// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default capacity provider strategy for the cluster. The default capacity provider strategy is used when services or tasks are run without a specified launch type or capacity provider strategy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsClusterDefaultCapacityProviderStrategyDetails {
    /// <p>The minimum number of tasks to run on the specified capacity provider.</p>
    #[doc(hidden)]
    pub base: i32,
    /// <p>The name of the capacity provider.</p>
    #[doc(hidden)]
    pub capacity_provider: std::option::Option<std::string::String>,
    /// <p>The relative percentage of the total number of tasks launched that should use the capacity provider.</p>
    #[doc(hidden)]
    pub weight: i32,
}
impl AwsEcsClusterDefaultCapacityProviderStrategyDetails {
    /// <p>The minimum number of tasks to run on the specified capacity provider.</p>
    pub fn base(&self) -> i32 {
        self.base
    }
    /// <p>The name of the capacity provider.</p>
    pub fn capacity_provider(&self) -> std::option::Option<&str> {
        self.capacity_provider.as_deref()
    }
    /// <p>The relative percentage of the total number of tasks launched that should use the capacity provider.</p>
    pub fn weight(&self) -> i32 {
        self.weight
    }
}
impl AwsEcsClusterDefaultCapacityProviderStrategyDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsClusterDefaultCapacityProviderStrategyDetails`](crate::types::AwsEcsClusterDefaultCapacityProviderStrategyDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsClusterDefaultCapacityProviderStrategyDetailsBuilder {
        crate::types::builders::AwsEcsClusterDefaultCapacityProviderStrategyDetailsBuilder::default(
        )
    }
}

/// A builder for [`AwsEcsClusterDefaultCapacityProviderStrategyDetails`](crate::types::AwsEcsClusterDefaultCapacityProviderStrategyDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsClusterDefaultCapacityProviderStrategyDetailsBuilder {
    pub(crate) base: std::option::Option<i32>,
    pub(crate) capacity_provider: std::option::Option<std::string::String>,
    pub(crate) weight: std::option::Option<i32>,
}
impl AwsEcsClusterDefaultCapacityProviderStrategyDetailsBuilder {
    /// <p>The minimum number of tasks to run on the specified capacity provider.</p>
    pub fn base(mut self, input: i32) -> Self {
        self.base = Some(input);
        self
    }
    /// <p>The minimum number of tasks to run on the specified capacity provider.</p>
    pub fn set_base(mut self, input: std::option::Option<i32>) -> Self {
        self.base = input;
        self
    }
    /// <p>The name of the capacity provider.</p>
    pub fn capacity_provider(mut self, input: impl Into<std::string::String>) -> Self {
        self.capacity_provider = Some(input.into());
        self
    }
    /// <p>The name of the capacity provider.</p>
    pub fn set_capacity_provider(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.capacity_provider = input;
        self
    }
    /// <p>The relative percentage of the total number of tasks launched that should use the capacity provider.</p>
    pub fn weight(mut self, input: i32) -> Self {
        self.weight = Some(input);
        self
    }
    /// <p>The relative percentage of the total number of tasks launched that should use the capacity provider.</p>
    pub fn set_weight(mut self, input: std::option::Option<i32>) -> Self {
        self.weight = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsClusterDefaultCapacityProviderStrategyDetails`](crate::types::AwsEcsClusterDefaultCapacityProviderStrategyDetails).
    pub fn build(self) -> crate::types::AwsEcsClusterDefaultCapacityProviderStrategyDetails {
        crate::types::AwsEcsClusterDefaultCapacityProviderStrategyDetails {
            base: self.base.unwrap_or_default(),
            capacity_provider: self.capacity_provider,
            weight: self.weight.unwrap_or_default(),
        }
    }
}
