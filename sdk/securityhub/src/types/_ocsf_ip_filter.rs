// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure for filtering findings based on IP address attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OcsfIpFilter {
    /// <p>The name of the IP address field to filter on.</p>
    pub field_name: ::std::option::Option<crate::types::OcsfIpField>,
    /// <p>The IP filter for querying findings.</p>
    pub filter: ::std::option::Option<crate::types::IpFilter>,
}
impl OcsfIpFilter {
    /// <p>The name of the IP address field to filter on.</p>
    pub fn field_name(&self) -> ::std::option::Option<&crate::types::OcsfIpField> {
        self.field_name.as_ref()
    }
    /// <p>The IP filter for querying findings.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::IpFilter> {
        self.filter.as_ref()
    }
}
impl OcsfIpFilter {
    /// Creates a new builder-style object to manufacture [`OcsfIpFilter`](crate::types::OcsfIpFilter).
    pub fn builder() -> crate::types::builders::OcsfIpFilterBuilder {
        crate::types::builders::OcsfIpFilterBuilder::default()
    }
}

/// A builder for [`OcsfIpFilter`](crate::types::OcsfIpFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OcsfIpFilterBuilder {
    pub(crate) field_name: ::std::option::Option<crate::types::OcsfIpField>,
    pub(crate) filter: ::std::option::Option<crate::types::IpFilter>,
}
impl OcsfIpFilterBuilder {
    /// <p>The name of the IP address field to filter on.</p>
    pub fn field_name(mut self, input: crate::types::OcsfIpField) -> Self {
        self.field_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the IP address field to filter on.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<crate::types::OcsfIpField>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The name of the IP address field to filter on.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<crate::types::OcsfIpField> {
        &self.field_name
    }
    /// <p>The IP filter for querying findings.</p>
    pub fn filter(mut self, input: crate::types::IpFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP filter for querying findings.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::IpFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The IP filter for querying findings.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::IpFilter> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`OcsfIpFilter`](crate::types::OcsfIpFilter).
    pub fn build(self) -> crate::types::OcsfIpFilter {
        crate::types::OcsfIpFilter {
            field_name: self.field_name,
            filter: self.filter,
        }
    }
}
