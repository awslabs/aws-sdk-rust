// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains route settings for a stage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsApiGatewayV2RouteSettings {
    /// <p>Indicates whether detailed metrics are enabled.</p>
    #[doc(hidden)]
    pub detailed_metrics_enabled: bool,
    /// <p>The logging level. The logging level affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    /// <p>If the logging level is <code>ERROR</code>, then the logs only include error-level entries.</p>
    /// <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code> events and extra informational events.</p>
    /// <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code> </p>
    #[doc(hidden)]
    pub logging_level: std::option::Option<std::string::String>,
    /// <p>Indicates whether data trace logging is enabled. Data trace logging affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    #[doc(hidden)]
    pub data_trace_enabled: bool,
    /// <p>The throttling burst limit.</p>
    #[doc(hidden)]
    pub throttling_burst_limit: i32,
    /// <p>The throttling rate limit.</p>
    #[doc(hidden)]
    pub throttling_rate_limit: f64,
}
impl AwsApiGatewayV2RouteSettings {
    /// <p>Indicates whether detailed metrics are enabled.</p>
    pub fn detailed_metrics_enabled(&self) -> bool {
        self.detailed_metrics_enabled
    }
    /// <p>The logging level. The logging level affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    /// <p>If the logging level is <code>ERROR</code>, then the logs only include error-level entries.</p>
    /// <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code> events and extra informational events.</p>
    /// <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code> </p>
    pub fn logging_level(&self) -> std::option::Option<&str> {
        self.logging_level.as_deref()
    }
    /// <p>Indicates whether data trace logging is enabled. Data trace logging affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    pub fn data_trace_enabled(&self) -> bool {
        self.data_trace_enabled
    }
    /// <p>The throttling burst limit.</p>
    pub fn throttling_burst_limit(&self) -> i32 {
        self.throttling_burst_limit
    }
    /// <p>The throttling rate limit.</p>
    pub fn throttling_rate_limit(&self) -> f64 {
        self.throttling_rate_limit
    }
}
impl AwsApiGatewayV2RouteSettings {
    /// Creates a new builder-style object to manufacture [`AwsApiGatewayV2RouteSettings`](crate::types::AwsApiGatewayV2RouteSettings).
    pub fn builder() -> crate::types::builders::AwsApiGatewayV2RouteSettingsBuilder {
        crate::types::builders::AwsApiGatewayV2RouteSettingsBuilder::default()
    }
}

/// A builder for [`AwsApiGatewayV2RouteSettings`](crate::types::AwsApiGatewayV2RouteSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsApiGatewayV2RouteSettingsBuilder {
    pub(crate) detailed_metrics_enabled: std::option::Option<bool>,
    pub(crate) logging_level: std::option::Option<std::string::String>,
    pub(crate) data_trace_enabled: std::option::Option<bool>,
    pub(crate) throttling_burst_limit: std::option::Option<i32>,
    pub(crate) throttling_rate_limit: std::option::Option<f64>,
}
impl AwsApiGatewayV2RouteSettingsBuilder {
    /// <p>Indicates whether detailed metrics are enabled.</p>
    pub fn detailed_metrics_enabled(mut self, input: bool) -> Self {
        self.detailed_metrics_enabled = Some(input);
        self
    }
    /// <p>Indicates whether detailed metrics are enabled.</p>
    pub fn set_detailed_metrics_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.detailed_metrics_enabled = input;
        self
    }
    /// <p>The logging level. The logging level affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    /// <p>If the logging level is <code>ERROR</code>, then the logs only include error-level entries.</p>
    /// <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code> events and extra informational events.</p>
    /// <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code> </p>
    pub fn logging_level(mut self, input: impl Into<std::string::String>) -> Self {
        self.logging_level = Some(input.into());
        self
    }
    /// <p>The logging level. The logging level affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    /// <p>If the logging level is <code>ERROR</code>, then the logs only include error-level entries.</p>
    /// <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code> events and extra informational events.</p>
    /// <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code> </p>
    pub fn set_logging_level(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logging_level = input;
        self
    }
    /// <p>Indicates whether data trace logging is enabled. Data trace logging affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    pub fn data_trace_enabled(mut self, input: bool) -> Self {
        self.data_trace_enabled = Some(input);
        self
    }
    /// <p>Indicates whether data trace logging is enabled. Data trace logging affects the log entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
    pub fn set_data_trace_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.data_trace_enabled = input;
        self
    }
    /// <p>The throttling burst limit.</p>
    pub fn throttling_burst_limit(mut self, input: i32) -> Self {
        self.throttling_burst_limit = Some(input);
        self
    }
    /// <p>The throttling burst limit.</p>
    pub fn set_throttling_burst_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.throttling_burst_limit = input;
        self
    }
    /// <p>The throttling rate limit.</p>
    pub fn throttling_rate_limit(mut self, input: f64) -> Self {
        self.throttling_rate_limit = Some(input);
        self
    }
    /// <p>The throttling rate limit.</p>
    pub fn set_throttling_rate_limit(mut self, input: std::option::Option<f64>) -> Self {
        self.throttling_rate_limit = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsApiGatewayV2RouteSettings`](crate::types::AwsApiGatewayV2RouteSettings).
    pub fn build(self) -> crate::types::AwsApiGatewayV2RouteSettings {
        crate::types::AwsApiGatewayV2RouteSettings {
            detailed_metrics_enabled: self.detailed_metrics_enabled.unwrap_or_default(),
            logging_level: self.logging_level,
            data_trace_enabled: self.data_trace_enabled.unwrap_or_default(),
            throttling_burst_limit: self.throttling_burst_limit.unwrap_or_default(),
            throttling_rate_limit: self.throttling_rate_limit.unwrap_or_default(),
        }
    }
}
