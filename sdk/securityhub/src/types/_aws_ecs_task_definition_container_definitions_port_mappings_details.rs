// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A port mapping for the container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
    /// <p>The port number on the container that is bound to the user-specified or automatically assigned host port.</p>
    #[doc(hidden)]
    pub container_port: i32,
    /// <p>The port number on the container instance to reserve for the container.</p>
    #[doc(hidden)]
    pub host_port: i32,
    /// <p>The protocol used for the port mapping. The default is <code>tcp</code>.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
    /// <p>The port number on the container that is bound to the user-specified or automatically assigned host port.</p>
    pub fn container_port(&self) -> i32 {
        self.container_port
    }
    /// <p>The port number on the container instance to reserve for the container.</p>
    pub fn host_port(&self) -> i32 {
        self.host_port
    }
    /// <p>The protocol used for the port mapping. The default is <code>tcp</code>.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
}
impl AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsBuilder
    {
        crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsBuilder {
    pub(crate) container_port: std::option::Option<i32>,
    pub(crate) host_port: std::option::Option<i32>,
    pub(crate) protocol: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsBuilder {
    /// <p>The port number on the container that is bound to the user-specified or automatically assigned host port.</p>
    pub fn container_port(mut self, input: i32) -> Self {
        self.container_port = Some(input);
        self
    }
    /// <p>The port number on the container that is bound to the user-specified or automatically assigned host port.</p>
    pub fn set_container_port(mut self, input: std::option::Option<i32>) -> Self {
        self.container_port = input;
        self
    }
    /// <p>The port number on the container instance to reserve for the container.</p>
    pub fn host_port(mut self, input: i32) -> Self {
        self.host_port = Some(input);
        self
    }
    /// <p>The port number on the container instance to reserve for the container.</p>
    pub fn set_host_port(mut self, input: std::option::Option<i32>) -> Self {
        self.host_port = input;
        self
    }
    /// <p>The protocol used for the port mapping. The default is <code>tcp</code>.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol used for the port mapping. The default is <code>tcp</code>.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
        crate::types::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
            container_port: self.container_port.unwrap_or_default(),
            host_port: self.host_port.unwrap_or_default(),
            protocol: self.protocol,
        }
    }
}
