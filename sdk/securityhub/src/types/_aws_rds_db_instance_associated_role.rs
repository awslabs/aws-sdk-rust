// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An IAM role associated with the DB instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsRdsDbInstanceAssociatedRole {
    /// <p>The ARN of the IAM role that is associated with the DB instance.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the feature associated with the IAM role.</p>
    #[doc(hidden)]
    pub feature_name: std::option::Option<std::string::String>,
    /// <p>Describes the state of the association between the IAM role and the DB instance. The <code>Status</code> property returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.</p> </li>
    /// <li> <p> <code>PENDING</code> - The IAM role ARN is being associated with the DB instance.</p> </li>
    /// <li> <p> <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl AwsRdsDbInstanceAssociatedRole {
    /// <p>The ARN of the IAM role that is associated with the DB instance.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The name of the feature associated with the IAM role.</p>
    pub fn feature_name(&self) -> std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>Describes the state of the association between the IAM role and the DB instance. The <code>Status</code> property returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.</p> </li>
    /// <li> <p> <code>PENDING</code> - The IAM role ARN is being associated with the DB instance.</p> </li>
    /// <li> <p> <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf. </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl AwsRdsDbInstanceAssociatedRole {
    /// Creates a new builder-style object to manufacture [`AwsRdsDbInstanceAssociatedRole`](crate::types::AwsRdsDbInstanceAssociatedRole).
    pub fn builder() -> crate::types::builders::AwsRdsDbInstanceAssociatedRoleBuilder {
        crate::types::builders::AwsRdsDbInstanceAssociatedRoleBuilder::default()
    }
}

/// A builder for [`AwsRdsDbInstanceAssociatedRole`](crate::types::AwsRdsDbInstanceAssociatedRole).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsRdsDbInstanceAssociatedRoleBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) feature_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl AwsRdsDbInstanceAssociatedRoleBuilder {
    /// <p>The ARN of the IAM role that is associated with the DB instance.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that is associated with the DB instance.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The name of the feature associated with the IAM role.</p>
    pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_name = Some(input.into());
        self
    }
    /// <p>The name of the feature associated with the IAM role.</p>
    pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>Describes the state of the association between the IAM role and the DB instance. The <code>Status</code> property returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.</p> </li>
    /// <li> <p> <code>PENDING</code> - The IAM role ARN is being associated with the DB instance.</p> </li>
    /// <li> <p> <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf. </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Describes the state of the association between the IAM role and the DB instance. The <code>Status</code> property returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.</p> </li>
    /// <li> <p> <code>PENDING</code> - The IAM role ARN is being associated with the DB instance.</p> </li>
    /// <li> <p> <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf. </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsRdsDbInstanceAssociatedRole`](crate::types::AwsRdsDbInstanceAssociatedRole).
    pub fn build(self) -> crate::types::AwsRdsDbInstanceAssociatedRole {
        crate::types::AwsRdsDbInstanceAssociatedRole {
            role_arn: self.role_arn,
            feature_name: self.feature_name,
            status: self.status,
        }
    }
}
