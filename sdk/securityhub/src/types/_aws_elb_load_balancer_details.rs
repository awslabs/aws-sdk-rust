// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a Classic Load Balancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsElbLoadBalancerDetails {
    /// <p>The list of Availability Zones for the load balancer.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the configuration of the EC2 instances.</p>
    #[doc(hidden)]
    pub backend_server_descriptions: std::option::Option<
        std::vec::Vec<crate::types::AwsElbLoadBalancerBackendServerDescription>,
    >,
    /// <p>The name of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    #[doc(hidden)]
    pub canonical_hosted_zone_name: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    #[doc(hidden)]
    pub canonical_hosted_zone_name_id: std::option::Option<std::string::String>,
    /// <p>Indicates when the load balancer was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The DNS name of the load balancer.</p>
    #[doc(hidden)]
    pub dns_name: std::option::Option<std::string::String>,
    /// <p>Information about the health checks that are conducted on the load balancer.</p>
    #[doc(hidden)]
    pub health_check: std::option::Option<crate::types::AwsElbLoadBalancerHealthCheck>,
    /// <p>List of EC2 instances for the load balancer.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::types::AwsElbLoadBalancerInstance>>,
    /// <p>The policies that are enabled for the load balancer listeners.</p>
    #[doc(hidden)]
    pub listener_descriptions:
        std::option::Option<std::vec::Vec<crate::types::AwsElbLoadBalancerListenerDescription>>,
    /// <p>The attributes for a load balancer.</p>
    #[doc(hidden)]
    pub load_balancer_attributes: std::option::Option<crate::types::AwsElbLoadBalancerAttributes>,
    /// <p>The name of the load balancer.</p>
    #[doc(hidden)]
    pub load_balancer_name: std::option::Option<std::string::String>,
    /// <p>The policies for a load balancer.</p>
    #[doc(hidden)]
    pub policies: std::option::Option<crate::types::AwsElbLoadBalancerPolicies>,
    /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    #[doc(hidden)]
    pub scheme: std::option::Option<std::string::String>,
    /// <p>The security groups for the load balancer. Only provided if the load balancer is in a VPC.</p>
    #[doc(hidden)]
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the security group for the load balancer. This is the security group that is used for inbound rules.</p>
    #[doc(hidden)]
    pub source_security_group:
        std::option::Option<crate::types::AwsElbLoadBalancerSourceSecurityGroup>,
    /// <p>The list of subnet identifiers for the load balancer.</p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The identifier of the VPC for the load balancer.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
}
impl AwsElbLoadBalancerDetails {
    /// <p>The list of Availability Zones for the load balancer.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
    /// <p>Information about the configuration of the EC2 instances.</p>
    pub fn backend_server_descriptions(
        &self,
    ) -> std::option::Option<&[crate::types::AwsElbLoadBalancerBackendServerDescription]> {
        self.backend_server_descriptions.as_deref()
    }
    /// <p>The name of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name(&self) -> std::option::Option<&str> {
        self.canonical_hosted_zone_name.as_deref()
    }
    /// <p>The ID of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name_id(&self) -> std::option::Option<&str> {
        self.canonical_hosted_zone_name_id.as_deref()
    }
    /// <p>Indicates when the load balancer was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn dns_name(&self) -> std::option::Option<&str> {
        self.dns_name.as_deref()
    }
    /// <p>Information about the health checks that are conducted on the load balancer.</p>
    pub fn health_check(
        &self,
    ) -> std::option::Option<&crate::types::AwsElbLoadBalancerHealthCheck> {
        self.health_check.as_ref()
    }
    /// <p>List of EC2 instances for the load balancer.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::types::AwsElbLoadBalancerInstance]> {
        self.instances.as_deref()
    }
    /// <p>The policies that are enabled for the load balancer listeners.</p>
    pub fn listener_descriptions(
        &self,
    ) -> std::option::Option<&[crate::types::AwsElbLoadBalancerListenerDescription]> {
        self.listener_descriptions.as_deref()
    }
    /// <p>The attributes for a load balancer.</p>
    pub fn load_balancer_attributes(
        &self,
    ) -> std::option::Option<&crate::types::AwsElbLoadBalancerAttributes> {
        self.load_balancer_attributes.as_ref()
    }
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(&self) -> std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The policies for a load balancer.</p>
    pub fn policies(&self) -> std::option::Option<&crate::types::AwsElbLoadBalancerPolicies> {
        self.policies.as_ref()
    }
    /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn scheme(&self) -> std::option::Option<&str> {
        self.scheme.as_deref()
    }
    /// <p>The security groups for the load balancer. Only provided if the load balancer is in a VPC.</p>
    pub fn security_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.security_groups.as_deref()
    }
    /// <p>Information about the security group for the load balancer. This is the security group that is used for inbound rules.</p>
    pub fn source_security_group(
        &self,
    ) -> std::option::Option<&crate::types::AwsElbLoadBalancerSourceSecurityGroup> {
        self.source_security_group.as_ref()
    }
    /// <p>The list of subnet identifiers for the load balancer.</p>
    pub fn subnets(&self) -> std::option::Option<&[std::string::String]> {
        self.subnets.as_deref()
    }
    /// <p>The identifier of the VPC for the load balancer.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl AwsElbLoadBalancerDetails {
    /// Creates a new builder-style object to manufacture [`AwsElbLoadBalancerDetails`](crate::types::AwsElbLoadBalancerDetails).
    pub fn builder() -> crate::types::builders::AwsElbLoadBalancerDetailsBuilder {
        crate::types::builders::AwsElbLoadBalancerDetailsBuilder::default()
    }
}

/// A builder for [`AwsElbLoadBalancerDetails`](crate::types::AwsElbLoadBalancerDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsElbLoadBalancerDetailsBuilder {
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) backend_server_descriptions: std::option::Option<
        std::vec::Vec<crate::types::AwsElbLoadBalancerBackendServerDescription>,
    >,
    pub(crate) canonical_hosted_zone_name: std::option::Option<std::string::String>,
    pub(crate) canonical_hosted_zone_name_id: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) dns_name: std::option::Option<std::string::String>,
    pub(crate) health_check: std::option::Option<crate::types::AwsElbLoadBalancerHealthCheck>,
    pub(crate) instances:
        std::option::Option<std::vec::Vec<crate::types::AwsElbLoadBalancerInstance>>,
    pub(crate) listener_descriptions:
        std::option::Option<std::vec::Vec<crate::types::AwsElbLoadBalancerListenerDescription>>,
    pub(crate) load_balancer_attributes:
        std::option::Option<crate::types::AwsElbLoadBalancerAttributes>,
    pub(crate) load_balancer_name: std::option::Option<std::string::String>,
    pub(crate) policies: std::option::Option<crate::types::AwsElbLoadBalancerPolicies>,
    pub(crate) scheme: std::option::Option<std::string::String>,
    pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) source_security_group:
        std::option::Option<crate::types::AwsElbLoadBalancerSourceSecurityGroup>,
    pub(crate) subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
}
impl AwsElbLoadBalancerDetailsBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The list of Availability Zones for the load balancer.</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// <p>The list of Availability Zones for the load balancer.</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// Appends an item to `backend_server_descriptions`.
    ///
    /// To override the contents of this collection use [`set_backend_server_descriptions`](Self::set_backend_server_descriptions).
    ///
    /// <p>Information about the configuration of the EC2 instances.</p>
    pub fn backend_server_descriptions(
        mut self,
        input: crate::types::AwsElbLoadBalancerBackendServerDescription,
    ) -> Self {
        let mut v = self.backend_server_descriptions.unwrap_or_default();
        v.push(input);
        self.backend_server_descriptions = Some(v);
        self
    }
    /// <p>Information about the configuration of the EC2 instances.</p>
    pub fn set_backend_server_descriptions(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsElbLoadBalancerBackendServerDescription>,
        >,
    ) -> Self {
        self.backend_server_descriptions = input;
        self
    }
    /// <p>The name of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.canonical_hosted_zone_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn set_canonical_hosted_zone_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.canonical_hosted_zone_name = input;
        self
    }
    /// <p>The ID of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.canonical_hosted_zone_name_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Route&nbsp;53 hosted zone for the load balancer.</p>
    pub fn set_canonical_hosted_zone_name_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.canonical_hosted_zone_name_id = input;
        self
    }
    /// <p>Indicates when the load balancer was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>Indicates when the load balancer was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dns_name = Some(input.into());
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn set_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dns_name = input;
        self
    }
    /// <p>Information about the health checks that are conducted on the load balancer.</p>
    pub fn health_check(mut self, input: crate::types::AwsElbLoadBalancerHealthCheck) -> Self {
        self.health_check = Some(input);
        self
    }
    /// <p>Information about the health checks that are conducted on the load balancer.</p>
    pub fn set_health_check(
        mut self,
        input: std::option::Option<crate::types::AwsElbLoadBalancerHealthCheck>,
    ) -> Self {
        self.health_check = input;
        self
    }
    /// Appends an item to `instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>List of EC2 instances for the load balancer.</p>
    pub fn instances(mut self, input: crate::types::AwsElbLoadBalancerInstance) -> Self {
        let mut v = self.instances.unwrap_or_default();
        v.push(input);
        self.instances = Some(v);
        self
    }
    /// <p>List of EC2 instances for the load balancer.</p>
    pub fn set_instances(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsElbLoadBalancerInstance>>,
    ) -> Self {
        self.instances = input;
        self
    }
    /// Appends an item to `listener_descriptions`.
    ///
    /// To override the contents of this collection use [`set_listener_descriptions`](Self::set_listener_descriptions).
    ///
    /// <p>The policies that are enabled for the load balancer listeners.</p>
    pub fn listener_descriptions(
        mut self,
        input: crate::types::AwsElbLoadBalancerListenerDescription,
    ) -> Self {
        let mut v = self.listener_descriptions.unwrap_or_default();
        v.push(input);
        self.listener_descriptions = Some(v);
        self
    }
    /// <p>The policies that are enabled for the load balancer listeners.</p>
    pub fn set_listener_descriptions(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsElbLoadBalancerListenerDescription>,
        >,
    ) -> Self {
        self.listener_descriptions = input;
        self
    }
    /// <p>The attributes for a load balancer.</p>
    pub fn load_balancer_attributes(
        mut self,
        input: crate::types::AwsElbLoadBalancerAttributes,
    ) -> Self {
        self.load_balancer_attributes = Some(input);
        self
    }
    /// <p>The attributes for a load balancer.</p>
    pub fn set_load_balancer_attributes(
        mut self,
        input: std::option::Option<crate::types::AwsElbLoadBalancerAttributes>,
    ) -> Self {
        self.load_balancer_attributes = input;
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.load_balancer_name = Some(input.into());
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn set_load_balancer_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The policies for a load balancer.</p>
    pub fn policies(mut self, input: crate::types::AwsElbLoadBalancerPolicies) -> Self {
        self.policies = Some(input);
        self
    }
    /// <p>The policies for a load balancer.</p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<crate::types::AwsElbLoadBalancerPolicies>,
    ) -> Self {
        self.policies = input;
        self
    }
    /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn scheme(mut self, input: impl Into<std::string::String>) -> Self {
        self.scheme = Some(input.into());
        self
    }
    /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn set_scheme(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scheme = input;
        self
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The security groups for the load balancer. Only provided if the load balancer is in a VPC.</p>
    pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = Some(v);
        self
    }
    /// <p>The security groups for the load balancer. Only provided if the load balancer is in a VPC.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>Information about the security group for the load balancer. This is the security group that is used for inbound rules.</p>
    pub fn source_security_group(
        mut self,
        input: crate::types::AwsElbLoadBalancerSourceSecurityGroup,
    ) -> Self {
        self.source_security_group = Some(input);
        self
    }
    /// <p>Information about the security group for the load balancer. This is the security group that is used for inbound rules.</p>
    pub fn set_source_security_group(
        mut self,
        input: std::option::Option<crate::types::AwsElbLoadBalancerSourceSecurityGroup>,
    ) -> Self {
        self.source_security_group = input;
        self
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The list of subnet identifiers for the load balancer.</p>
    pub fn subnets(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = Some(v);
        self
    }
    /// <p>The list of subnet identifiers for the load balancer.</p>
    pub fn set_subnets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The identifier of the VPC for the load balancer.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The identifier of the VPC for the load balancer.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsElbLoadBalancerDetails`](crate::types::AwsElbLoadBalancerDetails).
    pub fn build(self) -> crate::types::AwsElbLoadBalancerDetails {
        crate::types::AwsElbLoadBalancerDetails {
            availability_zones: self.availability_zones,
            backend_server_descriptions: self.backend_server_descriptions,
            canonical_hosted_zone_name: self.canonical_hosted_zone_name,
            canonical_hosted_zone_name_id: self.canonical_hosted_zone_name_id,
            created_time: self.created_time,
            dns_name: self.dns_name,
            health_check: self.health_check,
            instances: self.instances,
            listener_descriptions: self.listener_descriptions,
            load_balancer_attributes: self.load_balancer_attributes,
            load_balancer_name: self.load_balancer_name,
            policies: self.policies,
            scheme: self.scheme,
            security_groups: self.security_groups,
            source_security_group: self.source_security_group,
            subnets: self.subnets,
            vpc_id: self.vpc_id,
        }
    }
}
