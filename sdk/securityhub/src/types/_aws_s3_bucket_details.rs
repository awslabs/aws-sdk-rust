// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an Amazon S3 bucket.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsS3BucketDetails {
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The display name of the owner of the S3 bucket.</p>
    #[doc(hidden)]
    pub owner_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account identifier of the account that owns the S3 bucket.</p>
    #[doc(hidden)]
    pub owner_account_id: std::option::Option<std::string::String>,
    /// <p>Indicates when the S3 bucket was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>The encryption rules that are applied to the S3 bucket.</p>
    #[doc(hidden)]
    pub server_side_encryption_configuration:
        std::option::Option<crate::types::AwsS3BucketServerSideEncryptionConfiguration>,
    /// <p>The lifecycle configuration for objects in the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_lifecycle_configuration:
        std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationDetails>,
    /// <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
    #[doc(hidden)]
    pub public_access_block_configuration:
        std::option::Option<crate::types::AwsS3AccountPublicAccessBlockDetails>,
    /// <p>The access control list for the S3 bucket.</p>
    #[doc(hidden)]
    pub access_control_list: std::option::Option<std::string::String>,
    /// <p>The logging configuration for the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_logging_configuration:
        std::option::Option<crate::types::AwsS3BucketLoggingConfiguration>,
    /// <p>The website configuration parameters for the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_website_configuration:
        std::option::Option<crate::types::AwsS3BucketWebsiteConfiguration>,
    /// <p>The notification configuration for the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_notification_configuration:
        std::option::Option<crate::types::AwsS3BucketNotificationConfiguration>,
    /// <p>The versioning state of an S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_versioning_configuration:
        std::option::Option<crate::types::AwsS3BucketBucketVersioningConfiguration>,
}
impl AwsS3BucketDetails {
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn owner_name(&self) -> std::option::Option<&str> {
        self.owner_name.as_deref()
    }
    /// <p>The Amazon Web Services account identifier of the account that owns the S3 bucket.</p>
    pub fn owner_account_id(&self) -> std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>Indicates when the S3 bucket was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The encryption rules that are applied to the S3 bucket.</p>
    pub fn server_side_encryption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketServerSideEncryptionConfiguration> {
        self.server_side_encryption_configuration.as_ref()
    }
    /// <p>The lifecycle configuration for objects in the S3 bucket.</p>
    pub fn bucket_lifecycle_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketBucketLifecycleConfigurationDetails> {
        self.bucket_lifecycle_configuration.as_ref()
    }
    /// <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
    pub fn public_access_block_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3AccountPublicAccessBlockDetails> {
        self.public_access_block_configuration.as_ref()
    }
    /// <p>The access control list for the S3 bucket.</p>
    pub fn access_control_list(&self) -> std::option::Option<&str> {
        self.access_control_list.as_deref()
    }
    /// <p>The logging configuration for the S3 bucket.</p>
    pub fn bucket_logging_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketLoggingConfiguration> {
        self.bucket_logging_configuration.as_ref()
    }
    /// <p>The website configuration parameters for the S3 bucket.</p>
    pub fn bucket_website_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketWebsiteConfiguration> {
        self.bucket_website_configuration.as_ref()
    }
    /// <p>The notification configuration for the S3 bucket.</p>
    pub fn bucket_notification_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketNotificationConfiguration> {
        self.bucket_notification_configuration.as_ref()
    }
    /// <p>The versioning state of an S3 bucket.</p>
    pub fn bucket_versioning_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsS3BucketBucketVersioningConfiguration> {
        self.bucket_versioning_configuration.as_ref()
    }
}
impl AwsS3BucketDetails {
    /// Creates a new builder-style object to manufacture [`AwsS3BucketDetails`](crate::types::AwsS3BucketDetails).
    pub fn builder() -> crate::types::builders::AwsS3BucketDetailsBuilder {
        crate::types::builders::AwsS3BucketDetailsBuilder::default()
    }
}

/// A builder for [`AwsS3BucketDetails`](crate::types::AwsS3BucketDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsS3BucketDetailsBuilder {
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) owner_name: std::option::Option<std::string::String>,
    pub(crate) owner_account_id: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) server_side_encryption_configuration:
        std::option::Option<crate::types::AwsS3BucketServerSideEncryptionConfiguration>,
    pub(crate) bucket_lifecycle_configuration:
        std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationDetails>,
    pub(crate) public_access_block_configuration:
        std::option::Option<crate::types::AwsS3AccountPublicAccessBlockDetails>,
    pub(crate) access_control_list: std::option::Option<std::string::String>,
    pub(crate) bucket_logging_configuration:
        std::option::Option<crate::types::AwsS3BucketLoggingConfiguration>,
    pub(crate) bucket_website_configuration:
        std::option::Option<crate::types::AwsS3BucketWebsiteConfiguration>,
    pub(crate) bucket_notification_configuration:
        std::option::Option<crate::types::AwsS3BucketNotificationConfiguration>,
    pub(crate) bucket_versioning_configuration:
        std::option::Option<crate::types::AwsS3BucketBucketVersioningConfiguration>,
}
impl AwsS3BucketDetailsBuilder {
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn owner_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_name = Some(input.into());
        self
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn set_owner_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_name = input;
        self
    }
    /// <p>The Amazon Web Services account identifier of the account that owns the S3 bucket.</p>
    pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account identifier of the account that owns the S3 bucket.</p>
    pub fn set_owner_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>Indicates when the S3 bucket was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>Indicates when the S3 bucket was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The encryption rules that are applied to the S3 bucket.</p>
    pub fn server_side_encryption_configuration(
        mut self,
        input: crate::types::AwsS3BucketServerSideEncryptionConfiguration,
    ) -> Self {
        self.server_side_encryption_configuration = Some(input);
        self
    }
    /// <p>The encryption rules that are applied to the S3 bucket.</p>
    pub fn set_server_side_encryption_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketServerSideEncryptionConfiguration>,
    ) -> Self {
        self.server_side_encryption_configuration = input;
        self
    }
    /// <p>The lifecycle configuration for objects in the S3 bucket.</p>
    pub fn bucket_lifecycle_configuration(
        mut self,
        input: crate::types::AwsS3BucketBucketLifecycleConfigurationDetails,
    ) -> Self {
        self.bucket_lifecycle_configuration = Some(input);
        self
    }
    /// <p>The lifecycle configuration for objects in the S3 bucket.</p>
    pub fn set_bucket_lifecycle_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationDetails>,
    ) -> Self {
        self.bucket_lifecycle_configuration = input;
        self
    }
    /// <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
    pub fn public_access_block_configuration(
        mut self,
        input: crate::types::AwsS3AccountPublicAccessBlockDetails,
    ) -> Self {
        self.public_access_block_configuration = Some(input);
        self
    }
    /// <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
    pub fn set_public_access_block_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3AccountPublicAccessBlockDetails>,
    ) -> Self {
        self.public_access_block_configuration = input;
        self
    }
    /// <p>The access control list for the S3 bucket.</p>
    pub fn access_control_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_control_list = Some(input.into());
        self
    }
    /// <p>The access control list for the S3 bucket.</p>
    pub fn set_access_control_list(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.access_control_list = input;
        self
    }
    /// <p>The logging configuration for the S3 bucket.</p>
    pub fn bucket_logging_configuration(
        mut self,
        input: crate::types::AwsS3BucketLoggingConfiguration,
    ) -> Self {
        self.bucket_logging_configuration = Some(input);
        self
    }
    /// <p>The logging configuration for the S3 bucket.</p>
    pub fn set_bucket_logging_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketLoggingConfiguration>,
    ) -> Self {
        self.bucket_logging_configuration = input;
        self
    }
    /// <p>The website configuration parameters for the S3 bucket.</p>
    pub fn bucket_website_configuration(
        mut self,
        input: crate::types::AwsS3BucketWebsiteConfiguration,
    ) -> Self {
        self.bucket_website_configuration = Some(input);
        self
    }
    /// <p>The website configuration parameters for the S3 bucket.</p>
    pub fn set_bucket_website_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketWebsiteConfiguration>,
    ) -> Self {
        self.bucket_website_configuration = input;
        self
    }
    /// <p>The notification configuration for the S3 bucket.</p>
    pub fn bucket_notification_configuration(
        mut self,
        input: crate::types::AwsS3BucketNotificationConfiguration,
    ) -> Self {
        self.bucket_notification_configuration = Some(input);
        self
    }
    /// <p>The notification configuration for the S3 bucket.</p>
    pub fn set_bucket_notification_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketNotificationConfiguration>,
    ) -> Self {
        self.bucket_notification_configuration = input;
        self
    }
    /// <p>The versioning state of an S3 bucket.</p>
    pub fn bucket_versioning_configuration(
        mut self,
        input: crate::types::AwsS3BucketBucketVersioningConfiguration,
    ) -> Self {
        self.bucket_versioning_configuration = Some(input);
        self
    }
    /// <p>The versioning state of an S3 bucket.</p>
    pub fn set_bucket_versioning_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsS3BucketBucketVersioningConfiguration>,
    ) -> Self {
        self.bucket_versioning_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsS3BucketDetails`](crate::types::AwsS3BucketDetails).
    pub fn build(self) -> crate::types::AwsS3BucketDetails {
        crate::types::AwsS3BucketDetails {
            owner_id: self.owner_id,
            owner_name: self.owner_name,
            owner_account_id: self.owner_account_id,
            created_at: self.created_at,
            server_side_encryption_configuration: self.server_side_encryption_configuration,
            bucket_lifecycle_configuration: self.bucket_lifecycle_configuration,
            public_access_block_configuration: self.public_access_block_configuration,
            access_control_list: self.access_control_list,
            bucket_logging_configuration: self.bucket_logging_configuration,
            bucket_website_configuration: self.bucket_website_configuration,
            bucket_notification_configuration: self.bucket_notification_configuration,
            bucket_versioning_configuration: self.bucket_versioning_configuration,
        }
    }
}
