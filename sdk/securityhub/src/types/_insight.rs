// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a Security Hub insight.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Insight {
    /// <p>The ARN of a Security Hub insight.</p>
    #[doc(hidden)]
    pub insight_arn: std::option::Option<std::string::String>,
    /// <p>The name of a Security Hub insight.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    /// <p>The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.</p>
    #[doc(hidden)]
    pub group_by_attribute: std::option::Option<std::string::String>,
}
impl Insight {
    /// <p>The ARN of a Security Hub insight.</p>
    pub fn insight_arn(&self) -> std::option::Option<&str> {
        self.insight_arn.as_deref()
    }
    /// <p>The name of a Security Hub insight.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.</p>
    pub fn filters(&self) -> std::option::Option<&crate::types::AwsSecurityFindingFilters> {
        self.filters.as_ref()
    }
    /// <p>The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.</p>
    pub fn group_by_attribute(&self) -> std::option::Option<&str> {
        self.group_by_attribute.as_deref()
    }
}
impl Insight {
    /// Creates a new builder-style object to manufacture [`Insight`](crate::types::Insight).
    pub fn builder() -> crate::types::builders::InsightBuilder {
        crate::types::builders::InsightBuilder::default()
    }
}

/// A builder for [`Insight`](crate::types::Insight).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InsightBuilder {
    pub(crate) insight_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    pub(crate) group_by_attribute: std::option::Option<std::string::String>,
}
impl InsightBuilder {
    /// <p>The ARN of a Security Hub insight.</p>
    pub fn insight_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.insight_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a Security Hub insight.</p>
    pub fn set_insight_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.insight_arn = input;
        self
    }
    /// <p>The name of a Security Hub insight.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a Security Hub insight.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.</p>
    pub fn filters(mut self, input: crate::types::AwsSecurityFindingFilters) -> Self {
        self.filters = Some(input);
        self
    }
    /// <p>One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::types::AwsSecurityFindingFilters>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.</p>
    pub fn group_by_attribute(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_by_attribute = Some(input.into());
        self
    }
    /// <p>The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.</p>
    pub fn set_group_by_attribute(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.group_by_attribute = input;
        self
    }
    /// Consumes the builder and constructs a [`Insight`](crate::types::Insight).
    pub fn build(self) -> crate::types::Insight {
        crate::types::Insight {
            insight_arn: self.insight_arn,
            name: self.name,
            filters: self.filters,
            group_by_attribute: self.group_by_attribute,
        }
    }
}
