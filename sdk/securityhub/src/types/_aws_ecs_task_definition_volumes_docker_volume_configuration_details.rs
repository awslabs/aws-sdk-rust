// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Docker volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
    /// <p>Whether to create the Docker volume automatically if it does not already exist.</p>
    #[doc(hidden)]
    pub autoprovision: bool,
    /// <p>The Docker volume driver to use.</p>
    #[doc(hidden)]
    pub driver: std::option::Option<std::string::String>,
    /// <p>A map of Docker driver-specific options that are passed through.</p>
    #[doc(hidden)]
    pub driver_opts:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Custom metadata to add to the Docker volume.</p>
    #[doc(hidden)]
    pub labels:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are provisioned automatically when the task starts and destroyed when the task stops. Docker volumes that are shared persist after the task stops. Valid values are <code>shared</code> or <code>task</code>.</p>
    #[doc(hidden)]
    pub scope: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
    /// <p>Whether to create the Docker volume automatically if it does not already exist.</p>
    pub fn autoprovision(&self) -> bool {
        self.autoprovision
    }
    /// <p>The Docker volume driver to use.</p>
    pub fn driver(&self) -> std::option::Option<&str> {
        self.driver.as_deref()
    }
    /// <p>A map of Docker driver-specific options that are passed through.</p>
    pub fn driver_opts(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.driver_opts.as_ref()
    }
    /// <p>Custom metadata to add to the Docker volume.</p>
    pub fn labels(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.labels.as_ref()
    }
    /// <p>The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are provisioned automatically when the task starts and destroyed when the task stops. Docker volumes that are shared persist after the task stops. Valid values are <code>shared</code> or <code>task</code>.</p>
    pub fn scope(&self) -> std::option::Option<&str> {
        self.scope.as_deref()
    }
}
impl AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsBuilder
    {
        crate::types::builders::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsBuilder {
    pub(crate) autoprovision: std::option::Option<bool>,
    pub(crate) driver: std::option::Option<std::string::String>,
    pub(crate) driver_opts:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) labels:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) scope: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsBuilder {
    /// <p>Whether to create the Docker volume automatically if it does not already exist.</p>
    pub fn autoprovision(mut self, input: bool) -> Self {
        self.autoprovision = Some(input);
        self
    }
    /// <p>Whether to create the Docker volume automatically if it does not already exist.</p>
    pub fn set_autoprovision(mut self, input: std::option::Option<bool>) -> Self {
        self.autoprovision = input;
        self
    }
    /// <p>The Docker volume driver to use.</p>
    pub fn driver(mut self, input: impl Into<std::string::String>) -> Self {
        self.driver = Some(input.into());
        self
    }
    /// <p>The Docker volume driver to use.</p>
    pub fn set_driver(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.driver = input;
        self
    }
    /// Adds a key-value pair to `driver_opts`.
    ///
    /// To override the contents of this collection use [`set_driver_opts`](Self::set_driver_opts).
    ///
    /// <p>A map of Docker driver-specific options that are passed through.</p>
    pub fn driver_opts(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.driver_opts.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.driver_opts = Some(hash_map);
        self
    }
    /// <p>A map of Docker driver-specific options that are passed through.</p>
    pub fn set_driver_opts(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.driver_opts = input;
        self
    }
    /// Adds a key-value pair to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>Custom metadata to add to the Docker volume.</p>
    pub fn labels(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.labels.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.labels = Some(hash_map);
        self
    }
    /// <p>Custom metadata to add to the Docker volume.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.labels = input;
        self
    }
    /// <p>The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are provisioned automatically when the task starts and destroyed when the task stops. Docker volumes that are shared persist after the task stops. Valid values are <code>shared</code> or <code>task</code>.</p>
    pub fn scope(mut self, input: impl Into<std::string::String>) -> Self {
        self.scope = Some(input.into());
        self
    }
    /// <p>The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are provisioned automatically when the task starts and destroyed when the task stops. Docker volumes that are shared persist after the task stops. Valid values are <code>shared</code> or <code>task</code>.</p>
    pub fn set_scope(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
        crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
            autoprovision: self.autoprovision.unwrap_or_default(),
            driver: self.driver,
            driver_opts: self.driver_opts,
            labels: self.labels,
            scope: self.scope,
        }
    }
}
