// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the VPC peering connection options for the accepter or requester VPC. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcInfoPeeringOptionsDetails {
    /// <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC. </p>
    #[doc(hidden)]
    pub allow_dns_resolution_from_remote_vpc: bool,
    /// <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection. </p>
    #[doc(hidden)]
    pub allow_egress_from_local_classic_link_to_remote_vpc: bool,
    /// <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection. </p>
    #[doc(hidden)]
    pub allow_egress_from_local_vpc_to_remote_classic_link: bool,
}
impl VpcInfoPeeringOptionsDetails {
    /// <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC. </p>
    pub fn allow_dns_resolution_from_remote_vpc(&self) -> bool {
        self.allow_dns_resolution_from_remote_vpc
    }
    /// <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection. </p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(&self) -> bool {
        self.allow_egress_from_local_classic_link_to_remote_vpc
    }
    /// <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection. </p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(&self) -> bool {
        self.allow_egress_from_local_vpc_to_remote_classic_link
    }
}
impl VpcInfoPeeringOptionsDetails {
    /// Creates a new builder-style object to manufacture [`VpcInfoPeeringOptionsDetails`](crate::types::VpcInfoPeeringOptionsDetails).
    pub fn builder() -> crate::types::builders::VpcInfoPeeringOptionsDetailsBuilder {
        crate::types::builders::VpcInfoPeeringOptionsDetailsBuilder::default()
    }
}

/// A builder for [`VpcInfoPeeringOptionsDetails`](crate::types::VpcInfoPeeringOptionsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcInfoPeeringOptionsDetailsBuilder {
    pub(crate) allow_dns_resolution_from_remote_vpc: std::option::Option<bool>,
    pub(crate) allow_egress_from_local_classic_link_to_remote_vpc: std::option::Option<bool>,
    pub(crate) allow_egress_from_local_vpc_to_remote_classic_link: std::option::Option<bool>,
}
impl VpcInfoPeeringOptionsDetailsBuilder {
    /// <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC. </p>
    pub fn allow_dns_resolution_from_remote_vpc(mut self, input: bool) -> Self {
        self.allow_dns_resolution_from_remote_vpc = Some(input);
        self
    }
    /// <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC. </p>
    pub fn set_allow_dns_resolution_from_remote_vpc(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_dns_resolution_from_remote_vpc = input;
        self
    }
    /// <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection. </p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(mut self, input: bool) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = Some(input);
        self
    }
    /// <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection. </p>
    pub fn set_allow_egress_from_local_classic_link_to_remote_vpc(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = input;
        self
    }
    /// <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection. </p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(mut self, input: bool) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = Some(input);
        self
    }
    /// <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection. </p>
    pub fn set_allow_egress_from_local_vpc_to_remote_classic_link(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcInfoPeeringOptionsDetails`](crate::types::VpcInfoPeeringOptionsDetails).
    pub fn build(self) -> crate::types::VpcInfoPeeringOptionsDetails {
        crate::types::VpcInfoPeeringOptionsDetails {
            allow_dns_resolution_from_remote_vpc: self
                .allow_dns_resolution_from_remote_vpc
                .unwrap_or_default(),
            allow_egress_from_local_classic_link_to_remote_vpc: self
                .allow_egress_from_local_classic_link_to_remote_vpc
                .unwrap_or_default(),
            allow_egress_from_local_vpc_to_remote_classic_link: self
                .allow_egress_from_local_vpc_to_remote_classic_link
                .unwrap_or_default(),
        }
    }
}
