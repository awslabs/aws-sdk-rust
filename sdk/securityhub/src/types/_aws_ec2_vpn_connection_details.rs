// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Amazon EC2 VPN connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2VpnConnectionDetails {
    /// <p>The identifier of the VPN connection.</p>
    pub vpn_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the VPN connection. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
    pub customer_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration information for the VPN connection's customer gateway, in the native XML format.</p>
    pub customer_gateway_configuration: ::std::option::Option<::std::string::String>,
    /// <p>The type of VPN connection.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN connection.</p>
    pub vpn_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>
    pub category: ::std::option::Option<::std::string::String>,
    /// <p>Information about the VPN tunnel.</p>
    pub vgw_telemetry: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionVgwTelemetryDetails>>,
    /// <p>The VPN connection options.</p>
    pub options: ::std::option::Option<crate::types::AwsEc2VpnConnectionOptionsDetails>,
    /// <p>The static routes that are associated with the VPN connection.</p>
    pub routes: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionRoutesDetails>>,
    /// <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
    pub transit_gateway_id: ::std::option::Option<::std::string::String>,
}
impl AwsEc2VpnConnectionDetails {
    /// <p>The identifier of the VPN connection.</p>
    pub fn vpn_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpn_connection_id.as_deref()
    }
    /// <p>The current state of the VPN connection. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
    pub fn customer_gateway_id(&self) -> ::std::option::Option<&str> {
        self.customer_gateway_id.as_deref()
    }
    /// <p>The configuration information for the VPN connection's customer gateway, in the native XML format.</p>
    pub fn customer_gateway_configuration(&self) -> ::std::option::Option<&str> {
        self.customer_gateway_configuration.as_deref()
    }
    /// <p>The type of VPN connection.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN connection.</p>
    pub fn vpn_gateway_id(&self) -> ::std::option::Option<&str> {
        self.vpn_gateway_id.as_deref()
    }
    /// <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>
    pub fn category(&self) -> ::std::option::Option<&str> {
        self.category.as_deref()
    }
    /// <p>Information about the VPN tunnel.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vgw_telemetry.is_none()`.
    pub fn vgw_telemetry(&self) -> &[crate::types::AwsEc2VpnConnectionVgwTelemetryDetails] {
        self.vgw_telemetry.as_deref().unwrap_or_default()
    }
    /// <p>The VPN connection options.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::AwsEc2VpnConnectionOptionsDetails> {
        self.options.as_ref()
    }
    /// <p>The static routes that are associated with the VPN connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.routes.is_none()`.
    pub fn routes(&self) -> &[crate::types::AwsEc2VpnConnectionRoutesDetails] {
        self.routes.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
    pub fn transit_gateway_id(&self) -> ::std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
}
impl AwsEc2VpnConnectionDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2VpnConnectionDetails`](crate::types::AwsEc2VpnConnectionDetails).
    pub fn builder() -> crate::types::builders::AwsEc2VpnConnectionDetailsBuilder {
        crate::types::builders::AwsEc2VpnConnectionDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2VpnConnectionDetails`](crate::types::AwsEc2VpnConnectionDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2VpnConnectionDetailsBuilder {
    pub(crate) vpn_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) customer_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) customer_gateway_configuration: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) vpn_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<::std::string::String>,
    pub(crate) vgw_telemetry: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionVgwTelemetryDetails>>,
    pub(crate) options: ::std::option::Option<crate::types::AwsEc2VpnConnectionOptionsDetails>,
    pub(crate) routes: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionRoutesDetails>>,
    pub(crate) transit_gateway_id: ::std::option::Option<::std::string::String>,
}
impl AwsEc2VpnConnectionDetailsBuilder {
    /// <p>The identifier of the VPN connection.</p>
    pub fn vpn_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpn_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the VPN connection.</p>
    pub fn set_vpn_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpn_connection_id = input;
        self
    }
    /// <p>The identifier of the VPN connection.</p>
    pub fn get_vpn_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpn_connection_id
    }
    /// <p>The current state of the VPN connection. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the VPN connection. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the VPN connection. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
    pub fn customer_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
    pub fn set_customer_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_gateway_id = input;
        self
    }
    /// <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
    pub fn get_customer_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_gateway_id
    }
    /// <p>The configuration information for the VPN connection's customer gateway, in the native XML format.</p>
    pub fn customer_gateway_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_gateway_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration information for the VPN connection's customer gateway, in the native XML format.</p>
    pub fn set_customer_gateway_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_gateway_configuration = input;
        self
    }
    /// <p>The configuration information for the VPN connection's customer gateway, in the native XML format.</p>
    pub fn get_customer_gateway_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_gateway_configuration
    }
    /// <p>The type of VPN connection.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of VPN connection.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of VPN connection.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN connection.</p>
    pub fn vpn_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpn_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN connection.</p>
    pub fn set_vpn_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpn_gateway_id = input;
        self
    }
    /// <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN connection.</p>
    pub fn get_vpn_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpn_gateway_id
    }
    /// <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    /// Appends an item to `vgw_telemetry`.
    ///
    /// To override the contents of this collection use [`set_vgw_telemetry`](Self::set_vgw_telemetry).
    ///
    /// <p>Information about the VPN tunnel.</p>
    pub fn vgw_telemetry(mut self, input: crate::types::AwsEc2VpnConnectionVgwTelemetryDetails) -> Self {
        let mut v = self.vgw_telemetry.unwrap_or_default();
        v.push(input);
        self.vgw_telemetry = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the VPN tunnel.</p>
    pub fn set_vgw_telemetry(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionVgwTelemetryDetails>>) -> Self {
        self.vgw_telemetry = input;
        self
    }
    /// <p>Information about the VPN tunnel.</p>
    pub fn get_vgw_telemetry(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionVgwTelemetryDetails>> {
        &self.vgw_telemetry
    }
    /// <p>The VPN connection options.</p>
    pub fn options(mut self, input: crate::types::AwsEc2VpnConnectionOptionsDetails) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPN connection options.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::AwsEc2VpnConnectionOptionsDetails>) -> Self {
        self.options = input;
        self
    }
    /// <p>The VPN connection options.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::AwsEc2VpnConnectionOptionsDetails> {
        &self.options
    }
    /// Appends an item to `routes`.
    ///
    /// To override the contents of this collection use [`set_routes`](Self::set_routes).
    ///
    /// <p>The static routes that are associated with the VPN connection.</p>
    pub fn routes(mut self, input: crate::types::AwsEc2VpnConnectionRoutesDetails) -> Self {
        let mut v = self.routes.unwrap_or_default();
        v.push(input);
        self.routes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The static routes that are associated with the VPN connection.</p>
    pub fn set_routes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionRoutesDetails>>) -> Self {
        self.routes = input;
        self
    }
    /// <p>The static routes that are associated with the VPN connection.</p>
    pub fn get_routes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VpnConnectionRoutesDetails>> {
        &self.routes
    }
    /// <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
    pub fn transit_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transit_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
    pub fn set_transit_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
    pub fn get_transit_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transit_gateway_id
    }
    /// Consumes the builder and constructs a [`AwsEc2VpnConnectionDetails`](crate::types::AwsEc2VpnConnectionDetails).
    pub fn build(self) -> crate::types::AwsEc2VpnConnectionDetails {
        crate::types::AwsEc2VpnConnectionDetails {
            vpn_connection_id: self.vpn_connection_id,
            state: self.state,
            customer_gateway_id: self.customer_gateway_id,
            customer_gateway_configuration: self.customer_gateway_configuration,
            r#type: self.r#type,
            vpn_gateway_id: self.vpn_gateway_id,
            category: self.category,
            vgw_telemetry: self.vgw_telemetry,
            options: self.options,
            routes: self.routes,
            transit_gateway_id: self.transit_gateway_id,
        }
    }
}
