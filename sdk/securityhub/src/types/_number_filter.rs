// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A number filter for querying findings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NumberFilter {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings. </p>
    #[doc(hidden)]
    pub gte: f64,
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings. </p>
    #[doc(hidden)]
    pub lte: f64,
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub eq: f64,
}
impl NumberFilter {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn gte(&self) -> f64 {
        self.gte
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn lte(&self) -> f64 {
        self.lte
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn eq(&self) -> f64 {
        self.eq
    }
}
impl NumberFilter {
    /// Creates a new builder-style object to manufacture [`NumberFilter`](crate::types::NumberFilter).
    pub fn builder() -> crate::types::builders::NumberFilterBuilder {
        crate::types::builders::NumberFilterBuilder::default()
    }
}

/// A builder for [`NumberFilter`](crate::types::NumberFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NumberFilterBuilder {
    pub(crate) gte: std::option::Option<f64>,
    pub(crate) lte: std::option::Option<f64>,
    pub(crate) eq: std::option::Option<f64>,
}
impl NumberFilterBuilder {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn gte(mut self, input: f64) -> Self {
        self.gte = Some(input);
        self
    }
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn set_gte(mut self, input: std::option::Option<f64>) -> Self {
        self.gte = input;
        self
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn lte(mut self, input: f64) -> Self {
        self.lte = Some(input);
        self
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings. </p>
    pub fn set_lte(mut self, input: std::option::Option<f64>) -> Self {
        self.lte = input;
        self
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn eq(mut self, input: f64) -> Self {
        self.eq = Some(input);
        self
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn set_eq(mut self, input: std::option::Option<f64>) -> Self {
        self.eq = input;
        self
    }
    /// Consumes the builder and constructs a [`NumberFilter`](crate::types::NumberFilter).
    pub fn build(self) -> crate::types::NumberFilter {
        crate::types::NumberFilter {
            gte: self.gte.unwrap_or_default(),
            lte: self.lte.unwrap_or_default(),
            eq: self.eq.unwrap_or_default(),
        }
    }
}
