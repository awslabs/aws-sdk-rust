// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
    /// <p>The authorization configuration details for the Amazon EFS file system.</p>
    #[doc(hidden)]
    pub authorization_config: std::option::Option<
        crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
    >,
    /// <p>The Amazon EFS file system identifier to use.</p>
    #[doc(hidden)]
    pub filesystem_id: std::option::Option<std::string::String>,
    /// <p>The directory within the Amazon EFS file system to mount as the root directory inside the host.</p>
    #[doc(hidden)]
    pub root_directory: std::option::Option<std::string::String>,
    /// <p>Whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. </p>
    #[doc(hidden)]
    pub transit_encryption: std::option::Option<std::string::String>,
    /// <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.</p>
    #[doc(hidden)]
    pub transit_encryption_port: i32,
}
impl AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
    /// <p>The authorization configuration details for the Amazon EFS file system.</p>
    pub fn authorization_config(
        &self,
    ) -> std::option::Option<
        &crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
    > {
        self.authorization_config.as_ref()
    }
    /// <p>The Amazon EFS file system identifier to use.</p>
    pub fn filesystem_id(&self) -> std::option::Option<&str> {
        self.filesystem_id.as_deref()
    }
    /// <p>The directory within the Amazon EFS file system to mount as the root directory inside the host.</p>
    pub fn root_directory(&self) -> std::option::Option<&str> {
        self.root_directory.as_deref()
    }
    /// <p>Whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. </p>
    pub fn transit_encryption(&self) -> std::option::Option<&str> {
        self.transit_encryption.as_deref()
    }
    /// <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.</p>
    pub fn transit_encryption_port(&self) -> i32 {
        self.transit_encryption_port
    }
}
impl AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsBuilder
    {
        crate::types::builders::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsBuilder {
    pub(crate) authorization_config: std::option::Option<
        crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
    >,
    pub(crate) filesystem_id: std::option::Option<std::string::String>,
    pub(crate) root_directory: std::option::Option<std::string::String>,
    pub(crate) transit_encryption: std::option::Option<std::string::String>,
    pub(crate) transit_encryption_port: std::option::Option<i32>,
}
impl AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsBuilder {
    /// <p>The authorization configuration details for the Amazon EFS file system.</p>
    pub fn authorization_config(
        mut self,
        input: crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
    ) -> Self {
        self.authorization_config = Some(input);
        self
    }
    /// <p>The authorization configuration details for the Amazon EFS file system.</p>
    pub fn set_authorization_config(
        mut self,
        input: std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails>,
    ) -> Self {
        self.authorization_config = input;
        self
    }
    /// <p>The Amazon EFS file system identifier to use.</p>
    pub fn filesystem_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.filesystem_id = Some(input.into());
        self
    }
    /// <p>The Amazon EFS file system identifier to use.</p>
    pub fn set_filesystem_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filesystem_id = input;
        self
    }
    /// <p>The directory within the Amazon EFS file system to mount as the root directory inside the host.</p>
    pub fn root_directory(mut self, input: impl Into<std::string::String>) -> Self {
        self.root_directory = Some(input.into());
        self
    }
    /// <p>The directory within the Amazon EFS file system to mount as the root directory inside the host.</p>
    pub fn set_root_directory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.root_directory = input;
        self
    }
    /// <p>Whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. </p>
    pub fn transit_encryption(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_encryption = Some(input.into());
        self
    }
    /// <p>Whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. </p>
    pub fn set_transit_encryption(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_encryption = input;
        self
    }
    /// <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.</p>
    pub fn transit_encryption_port(mut self, input: i32) -> Self {
        self.transit_encryption_port = Some(input);
        self
    }
    /// <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.</p>
    pub fn set_transit_encryption_port(mut self, input: std::option::Option<i32>) -> Self {
        self.transit_encryption_port = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails`](crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails).
    pub fn build(self) -> crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
        crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
            authorization_config: self.authorization_config,
            filesystem_id: self.filesystem_id,
            root_directory: self.root_directory,
            transit_encryption: self.transit_encryption,
            transit_encryption_port: self.transit_encryption_port.unwrap_or_default(),
        }
    }
}
