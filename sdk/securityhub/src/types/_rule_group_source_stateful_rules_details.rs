// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Suricata rule specification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleGroupSourceStatefulRulesDetails {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
    pub action: ::std::option::Option<::std::string::String>,
    /// <p>The stateful inspection criteria for the rule.</p>
    pub header: ::std::option::Option<crate::types::RuleGroupSourceStatefulRulesHeaderDetails>,
    /// <p>Additional options for the rule.</p>
    pub rule_options: ::std::option::Option<::std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesOptionsDetails>>,
}
impl RuleGroupSourceStatefulRulesDetails {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p>The stateful inspection criteria for the rule.</p>
    pub fn header(&self) -> ::std::option::Option<&crate::types::RuleGroupSourceStatefulRulesHeaderDetails> {
        self.header.as_ref()
    }
    /// <p>Additional options for the rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_options.is_none()`.
    pub fn rule_options(&self) -> &[crate::types::RuleGroupSourceStatefulRulesOptionsDetails] {
        self.rule_options.as_deref().unwrap_or_default()
    }
}
impl RuleGroupSourceStatefulRulesDetails {
    /// Creates a new builder-style object to manufacture [`RuleGroupSourceStatefulRulesDetails`](crate::types::RuleGroupSourceStatefulRulesDetails).
    pub fn builder() -> crate::types::builders::RuleGroupSourceStatefulRulesDetailsBuilder {
        crate::types::builders::RuleGroupSourceStatefulRulesDetailsBuilder::default()
    }
}

/// A builder for [`RuleGroupSourceStatefulRulesDetails`](crate::types::RuleGroupSourceStatefulRulesDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleGroupSourceStatefulRulesDetailsBuilder {
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) header: ::std::option::Option<crate::types::RuleGroupSourceStatefulRulesHeaderDetails>,
    pub(crate) rule_options: ::std::option::Option<::std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesOptionsDetails>>,
}
impl RuleGroupSourceStatefulRulesDetailsBuilder {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>The stateful inspection criteria for the rule.</p>
    pub fn header(mut self, input: crate::types::RuleGroupSourceStatefulRulesHeaderDetails) -> Self {
        self.header = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stateful inspection criteria for the rule.</p>
    pub fn set_header(mut self, input: ::std::option::Option<crate::types::RuleGroupSourceStatefulRulesHeaderDetails>) -> Self {
        self.header = input;
        self
    }
    /// <p>The stateful inspection criteria for the rule.</p>
    pub fn get_header(&self) -> &::std::option::Option<crate::types::RuleGroupSourceStatefulRulesHeaderDetails> {
        &self.header
    }
    /// Appends an item to `rule_options`.
    ///
    /// To override the contents of this collection use [`set_rule_options`](Self::set_rule_options).
    ///
    /// <p>Additional options for the rule.</p>
    pub fn rule_options(mut self, input: crate::types::RuleGroupSourceStatefulRulesOptionsDetails) -> Self {
        let mut v = self.rule_options.unwrap_or_default();
        v.push(input);
        self.rule_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional options for the rule.</p>
    pub fn set_rule_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesOptionsDetails>>,
    ) -> Self {
        self.rule_options = input;
        self
    }
    /// <p>Additional options for the rule.</p>
    pub fn get_rule_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesOptionsDetails>> {
        &self.rule_options
    }
    /// Consumes the builder and constructs a [`RuleGroupSourceStatefulRulesDetails`](crate::types::RuleGroupSourceStatefulRulesDetails).
    pub fn build(self) -> crate::types::RuleGroupSourceStatefulRulesDetails {
        crate::types::RuleGroupSourceStatefulRulesDetails {
            action: self.action,
            header: self.header,
            rule_options: self.rule_options,
        }
    }
}
