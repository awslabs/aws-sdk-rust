// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an WAF web access control list (web ACL).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsWafWebAclDetails {
    /// <p>A friendly name or description of the web ACL. You can't change the name of a web ACL after you create it.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The action to perform if none of the rules contained in the web ACL match.</p>
    pub default_action: ::std::option::Option<::std::string::String>,
    /// <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafWebAclRule>>,
    /// <p>A unique identifier for a web ACL.</p>
    pub web_acl_id: ::std::option::Option<::std::string::String>,
}
impl AwsWafWebAclDetails {
    /// <p>A friendly name or description of the web ACL. You can't change the name of a web ACL after you create it.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The action to perform if none of the rules contained in the web ACL match.</p>
    pub fn default_action(&self) -> ::std::option::Option<&str> {
        self.default_action.as_deref()
    }
    /// <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::AwsWafWebAclRule] {
        self.rules.as_deref().unwrap_or_default()
    }
    /// <p>A unique identifier for a web ACL.</p>
    pub fn web_acl_id(&self) -> ::std::option::Option<&str> {
        self.web_acl_id.as_deref()
    }
}
impl AwsWafWebAclDetails {
    /// Creates a new builder-style object to manufacture [`AwsWafWebAclDetails`](crate::types::AwsWafWebAclDetails).
    pub fn builder() -> crate::types::builders::AwsWafWebAclDetailsBuilder {
        crate::types::builders::AwsWafWebAclDetailsBuilder::default()
    }
}

/// A builder for [`AwsWafWebAclDetails`](crate::types::AwsWafWebAclDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsWafWebAclDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) default_action: ::std::option::Option<::std::string::String>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafWebAclRule>>,
    pub(crate) web_acl_id: ::std::option::Option<::std::string::String>,
}
impl AwsWafWebAclDetailsBuilder {
    /// <p>A friendly name or description of the web ACL. You can't change the name of a web ACL after you create it.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name or description of the web ACL. You can't change the name of a web ACL after you create it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A friendly name or description of the web ACL. You can't change the name of a web ACL after you create it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The action to perform if none of the rules contained in the web ACL match.</p>
    pub fn default_action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action to perform if none of the rules contained in the web ACL match.</p>
    pub fn set_default_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_action = input;
        self
    }
    /// <p>The action to perform if none of the rules contained in the web ACL match.</p>
    pub fn get_default_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_action
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
    pub fn rules(mut self, input: crate::types::AwsWafWebAclRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafWebAclRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsWafWebAclRule>> {
        &self.rules
    }
    /// <p>A unique identifier for a web ACL.</p>
    pub fn web_acl_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for a web ACL.</p>
    pub fn set_web_acl_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_id = input;
        self
    }
    /// <p>A unique identifier for a web ACL.</p>
    pub fn get_web_acl_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_id
    }
    /// Consumes the builder and constructs a [`AwsWafWebAclDetails`](crate::types::AwsWafWebAclDetails).
    pub fn build(self) -> crate::types::AwsWafWebAclDetails {
        crate::types::AwsWafWebAclDetails {
            name: self.name,
            default_action: self.default_action,
            rules: self.rules,
            web_acl_id: self.web_acl_id,
        }
    }
}
