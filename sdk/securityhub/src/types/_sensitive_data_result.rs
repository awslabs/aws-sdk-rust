// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a detected instance of sensitive data that are based on built-in identifiers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SensitiveDataResult {
    /// <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
    #[doc(hidden)]
    pub category: std::option::Option<std::string::String>,
    /// <p>The list of detected instances of sensitive data.</p>
    #[doc(hidden)]
    pub detections: std::option::Option<std::vec::Vec<crate::types::SensitiveDataDetections>>,
    /// <p>The total number of occurrences of sensitive data.</p>
    #[doc(hidden)]
    pub total_count: i64,
}
impl SensitiveDataResult {
    /// <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
    pub fn category(&self) -> std::option::Option<&str> {
        self.category.as_deref()
    }
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn detections(&self) -> std::option::Option<&[crate::types::SensitiveDataDetections]> {
        self.detections.as_deref()
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn total_count(&self) -> i64 {
        self.total_count
    }
}
impl SensitiveDataResult {
    /// Creates a new builder-style object to manufacture [`SensitiveDataResult`](crate::types::SensitiveDataResult).
    pub fn builder() -> crate::types::builders::SensitiveDataResultBuilder {
        crate::types::builders::SensitiveDataResultBuilder::default()
    }
}

/// A builder for [`SensitiveDataResult`](crate::types::SensitiveDataResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SensitiveDataResultBuilder {
    pub(crate) category: std::option::Option<std::string::String>,
    pub(crate) detections:
        std::option::Option<std::vec::Vec<crate::types::SensitiveDataDetections>>,
    pub(crate) total_count: std::option::Option<i64>,
}
impl SensitiveDataResultBuilder {
    /// <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
    pub fn category(mut self, input: impl Into<std::string::String>) -> Self {
        self.category = Some(input.into());
        self
    }
    /// <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
    pub fn set_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// Appends an item to `detections`.
    ///
    /// To override the contents of this collection use [`set_detections`](Self::set_detections).
    ///
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn detections(mut self, input: crate::types::SensitiveDataDetections) -> Self {
        let mut v = self.detections.unwrap_or_default();
        v.push(input);
        self.detections = Some(v);
        self
    }
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn set_detections(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SensitiveDataDetections>>,
    ) -> Self {
        self.detections = input;
        self
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn total_count(mut self, input: i64) -> Self {
        self.total_count = Some(input);
        self
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn set_total_count(mut self, input: std::option::Option<i64>) -> Self {
        self.total_count = input;
        self
    }
    /// Consumes the builder and constructs a [`SensitiveDataResult`](crate::types::SensitiveDataResult).
    pub fn build(self) -> crate::types::SensitiveDataResult {
        crate::types::SensitiveDataResult {
            category: self.category,
            detections: self.detections,
            total_count: self.total_count.unwrap_or_default(),
        }
    }
}
