// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the action that CloudFront or WAF takes when a web request matches the conditions in the rule. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WafAction {
    /// <p>Specifies how you want WAF to respond to requests that match the settings in a rule.</p>
    /// <p>Valid settings include the following:</p>
    /// <ul>
    /// <li> <p> <code>ALLOW</code> - WAF allows requests</p> </li>
    /// <li> <p> <code>BLOCK</code> - WAF blocks requests</p> </li>
    /// <li> <p> <code>COUNT</code> - WAF increments a counter of the requests that match all of the conditions in the rule. WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify <code>COUNT</code> for the default action for a web ACL.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl WafAction {
    /// <p>Specifies how you want WAF to respond to requests that match the settings in a rule.</p>
    /// <p>Valid settings include the following:</p>
    /// <ul>
    /// <li> <p> <code>ALLOW</code> - WAF allows requests</p> </li>
    /// <li> <p> <code>BLOCK</code> - WAF blocks requests</p> </li>
    /// <li> <p> <code>COUNT</code> - WAF increments a counter of the requests that match all of the conditions in the rule. WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify <code>COUNT</code> for the default action for a web ACL.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl WafAction {
    /// Creates a new builder-style object to manufacture [`WafAction`](crate::types::WafAction).
    pub fn builder() -> crate::types::builders::WafActionBuilder {
        crate::types::builders::WafActionBuilder::default()
    }
}

/// A builder for [`WafAction`](crate::types::WafAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WafActionBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl WafActionBuilder {
    /// <p>Specifies how you want WAF to respond to requests that match the settings in a rule.</p>
    /// <p>Valid settings include the following:</p>
    /// <ul>
    /// <li> <p> <code>ALLOW</code> - WAF allows requests</p> </li>
    /// <li> <p> <code>BLOCK</code> - WAF blocks requests</p> </li>
    /// <li> <p> <code>COUNT</code> - WAF increments a counter of the requests that match all of the conditions in the rule. WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify <code>COUNT</code> for the default action for a web ACL.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>Specifies how you want WAF to respond to requests that match the settings in a rule.</p>
    /// <p>Valid settings include the following:</p>
    /// <ul>
    /// <li> <p> <code>ALLOW</code> - WAF allows requests</p> </li>
    /// <li> <p> <code>BLOCK</code> - WAF blocks requests</p> </li>
    /// <li> <p> <code>COUNT</code> - WAF increments a counter of the requests that match all of the conditions in the rule. WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify <code>COUNT</code> for the default action for a web ACL.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`WafAction`](crate::types::WafAction).
    pub fn build(self) -> crate::types::WafAction {
        crate::types::WafAction {
            r#type: self.r#type,
        }
    }
}
