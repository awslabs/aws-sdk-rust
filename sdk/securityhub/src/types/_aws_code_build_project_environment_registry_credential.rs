// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The credentials for access to a private registry.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCodeBuildProjectEnvironmentRegistryCredential {
    /// <p>The ARN or name of credentials created using Secrets Manager.</p> <note>
    /// <p>The credential can use the name of the credentials only if they exist in your current Amazon Web Services Region. </p>
    /// </note>
    #[doc(hidden)]
    pub credential: std::option::Option<std::string::String>,
    /// <p>The service that created the credentials to access a private Docker registry.</p>
    /// <p>The valid value,<code> SECRETS_MANAGER</code>, is for Secrets Manager.</p>
    #[doc(hidden)]
    pub credential_provider: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectEnvironmentRegistryCredential {
    /// <p>The ARN or name of credentials created using Secrets Manager.</p> <note>
    /// <p>The credential can use the name of the credentials only if they exist in your current Amazon Web Services Region. </p>
    /// </note>
    pub fn credential(&self) -> std::option::Option<&str> {
        self.credential.as_deref()
    }
    /// <p>The service that created the credentials to access a private Docker registry.</p>
    /// <p>The valid value,<code> SECRETS_MANAGER</code>, is for Secrets Manager.</p>
    pub fn credential_provider(&self) -> std::option::Option<&str> {
        self.credential_provider.as_deref()
    }
}
impl AwsCodeBuildProjectEnvironmentRegistryCredential {
    /// Creates a new builder-style object to manufacture [`AwsCodeBuildProjectEnvironmentRegistryCredential`](crate::types::AwsCodeBuildProjectEnvironmentRegistryCredential).
    pub fn builder(
    ) -> crate::types::builders::AwsCodeBuildProjectEnvironmentRegistryCredentialBuilder {
        crate::types::builders::AwsCodeBuildProjectEnvironmentRegistryCredentialBuilder::default()
    }
}

/// A builder for [`AwsCodeBuildProjectEnvironmentRegistryCredential`](crate::types::AwsCodeBuildProjectEnvironmentRegistryCredential).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCodeBuildProjectEnvironmentRegistryCredentialBuilder {
    pub(crate) credential: std::option::Option<std::string::String>,
    pub(crate) credential_provider: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectEnvironmentRegistryCredentialBuilder {
    /// <p>The ARN or name of credentials created using Secrets Manager.</p> <note>
    /// <p>The credential can use the name of the credentials only if they exist in your current Amazon Web Services Region. </p>
    /// </note>
    pub fn credential(mut self, input: impl Into<std::string::String>) -> Self {
        self.credential = Some(input.into());
        self
    }
    /// <p>The ARN or name of credentials created using Secrets Manager.</p> <note>
    /// <p>The credential can use the name of the credentials only if they exist in your current Amazon Web Services Region. </p>
    /// </note>
    pub fn set_credential(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.credential = input;
        self
    }
    /// <p>The service that created the credentials to access a private Docker registry.</p>
    /// <p>The valid value,<code> SECRETS_MANAGER</code>, is for Secrets Manager.</p>
    pub fn credential_provider(mut self, input: impl Into<std::string::String>) -> Self {
        self.credential_provider = Some(input.into());
        self
    }
    /// <p>The service that created the credentials to access a private Docker registry.</p>
    /// <p>The valid value,<code> SECRETS_MANAGER</code>, is for Secrets Manager.</p>
    pub fn set_credential_provider(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.credential_provider = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCodeBuildProjectEnvironmentRegistryCredential`](crate::types::AwsCodeBuildProjectEnvironmentRegistryCredential).
    pub fn build(self) -> crate::types::AwsCodeBuildProjectEnvironmentRegistryCredential {
        crate::types::AwsCodeBuildProjectEnvironmentRegistryCredential {
            credential: self.credential,
            credential_provider: self.credential_provider,
        }
    }
}
