// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the properties for creating an Amazon Elastic Compute Cloud (Amazon EC2) launch template. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDetails {
    /// <p> A name for the launch template. </p>
    #[doc(hidden)]
    pub launch_template_name: std::option::Option<std::string::String>,
    /// <p> An ID for the launch template. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p> The information to include in the launch template. </p>
    #[doc(hidden)]
    pub launch_template_data: std::option::Option<crate::types::AwsEc2LaunchTemplateDataDetails>,
    /// <p> The default version of the launch template. </p>
    #[doc(hidden)]
    pub default_version_number: i64,
    /// <p> The latest version of the launch template. </p>
    #[doc(hidden)]
    pub latest_version_number: i64,
}
impl AwsEc2LaunchTemplateDetails {
    /// <p> A name for the launch template. </p>
    pub fn launch_template_name(&self) -> std::option::Option<&str> {
        self.launch_template_name.as_deref()
    }
    /// <p> An ID for the launch template. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> The information to include in the launch template. </p>
    pub fn launch_template_data(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2LaunchTemplateDataDetails> {
        self.launch_template_data.as_ref()
    }
    /// <p> The default version of the launch template. </p>
    pub fn default_version_number(&self) -> i64 {
        self.default_version_number
    }
    /// <p> The latest version of the launch template. </p>
    pub fn latest_version_number(&self) -> i64 {
        self.latest_version_number
    }
}
impl AwsEc2LaunchTemplateDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2LaunchTemplateDetails`](crate::types::AwsEc2LaunchTemplateDetails).
    pub fn builder() -> crate::types::builders::AwsEc2LaunchTemplateDetailsBuilder {
        crate::types::builders::AwsEc2LaunchTemplateDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2LaunchTemplateDetails`](crate::types::AwsEc2LaunchTemplateDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDetailsBuilder {
    pub(crate) launch_template_name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) launch_template_data:
        std::option::Option<crate::types::AwsEc2LaunchTemplateDataDetails>,
    pub(crate) default_version_number: std::option::Option<i64>,
    pub(crate) latest_version_number: std::option::Option<i64>,
}
impl AwsEc2LaunchTemplateDetailsBuilder {
    /// <p> A name for the launch template. </p>
    pub fn launch_template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_name = Some(input.into());
        self
    }
    /// <p> A name for the launch template. </p>
    pub fn set_launch_template_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_name = input;
        self
    }
    /// <p> An ID for the launch template. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p> An ID for the launch template. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The information to include in the launch template. </p>
    pub fn launch_template_data(
        mut self,
        input: crate::types::AwsEc2LaunchTemplateDataDetails,
    ) -> Self {
        self.launch_template_data = Some(input);
        self
    }
    /// <p> The information to include in the launch template. </p>
    pub fn set_launch_template_data(
        mut self,
        input: std::option::Option<crate::types::AwsEc2LaunchTemplateDataDetails>,
    ) -> Self {
        self.launch_template_data = input;
        self
    }
    /// <p> The default version of the launch template. </p>
    pub fn default_version_number(mut self, input: i64) -> Self {
        self.default_version_number = Some(input);
        self
    }
    /// <p> The default version of the launch template. </p>
    pub fn set_default_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.default_version_number = input;
        self
    }
    /// <p> The latest version of the launch template. </p>
    pub fn latest_version_number(mut self, input: i64) -> Self {
        self.latest_version_number = Some(input);
        self
    }
    /// <p> The latest version of the launch template. </p>
    pub fn set_latest_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.latest_version_number = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2LaunchTemplateDetails`](crate::types::AwsEc2LaunchTemplateDetails).
    pub fn build(self) -> crate::types::AwsEc2LaunchTemplateDetails {
        crate::types::AwsEc2LaunchTemplateDetails {
            launch_template_name: self.launch_template_name,
            id: self.id,
            launch_template_data: self.launch_template_data,
            default_version_number: self.default_version_number.unwrap_or_default(),
            latest_version_number: self.latest_version_number.unwrap_or_default(),
        }
    }
}
