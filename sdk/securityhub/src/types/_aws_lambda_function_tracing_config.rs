// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The function's X-Ray tracing configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsLambdaFunctionTracingConfig {
    /// <p>The tracing mode.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<std::string::String>,
}
impl AwsLambdaFunctionTracingConfig {
    /// <p>The tracing mode.</p>
    pub fn mode(&self) -> std::option::Option<&str> {
        self.mode.as_deref()
    }
}
impl AwsLambdaFunctionTracingConfig {
    /// Creates a new builder-style object to manufacture [`AwsLambdaFunctionTracingConfig`](crate::types::AwsLambdaFunctionTracingConfig).
    pub fn builder() -> crate::types::builders::AwsLambdaFunctionTracingConfigBuilder {
        crate::types::builders::AwsLambdaFunctionTracingConfigBuilder::default()
    }
}

/// A builder for [`AwsLambdaFunctionTracingConfig`](crate::types::AwsLambdaFunctionTracingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsLambdaFunctionTracingConfigBuilder {
    pub(crate) mode: std::option::Option<std::string::String>,
}
impl AwsLambdaFunctionTracingConfigBuilder {
    /// <p>The tracing mode.</p>
    pub fn mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.mode = Some(input.into());
        self
    }
    /// <p>The tracing mode.</p>
    pub fn set_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mode = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsLambdaFunctionTracingConfig`](crate::types::AwsLambdaFunctionTracingConfig).
    pub fn build(self) -> crate::types::AwsLambdaFunctionTracingConfig {
        crate::types::AwsLambdaFunctionTracingConfig { mode: self.mode }
    }
}
