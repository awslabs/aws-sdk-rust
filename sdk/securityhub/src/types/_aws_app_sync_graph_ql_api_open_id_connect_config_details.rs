// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the authorization configuration for using an OpenID Connect compliant service with your AppSync GraphQL API endpoint. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiOpenIdConnectConfigDetails {
    /// <p> The number of milliseconds that a token is valid after being authenticated. </p>
    pub auth_ttl: ::std::option::Option<i64>,
    /// <p> The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time. </p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p> The number of milliseconds that a token is valid after it's issued to a user. </p>
    pub iat_ttl: ::std::option::Option<i64>,
    /// <p> The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token. </p>
    pub issuer: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiOpenIdConnectConfigDetails {
    /// <p> The number of milliseconds that a token is valid after being authenticated. </p>
    pub fn auth_ttl(&self) -> ::std::option::Option<i64> {
        self.auth_ttl
    }
    /// <p> The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time. </p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p> The number of milliseconds that a token is valid after it's issued to a user. </p>
    pub fn iat_ttl(&self) -> ::std::option::Option<i64> {
        self.iat_ttl
    }
    /// <p> The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token. </p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
}
impl AwsAppSyncGraphQlApiOpenIdConnectConfigDetails {
    /// Creates a new builder-style object to manufacture [`AwsAppSyncGraphQlApiOpenIdConnectConfigDetails`](crate::types::AwsAppSyncGraphQlApiOpenIdConnectConfigDetails).
    pub fn builder() -> crate::types::builders::AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsBuilder {
        crate::types::builders::AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsBuilder::default()
    }
}

/// A builder for [`AwsAppSyncGraphQlApiOpenIdConnectConfigDetails`](crate::types::AwsAppSyncGraphQlApiOpenIdConnectConfigDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsBuilder {
    pub(crate) auth_ttl: ::std::option::Option<i64>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) iat_ttl: ::std::option::Option<i64>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsBuilder {
    /// <p> The number of milliseconds that a token is valid after being authenticated. </p>
    pub fn auth_ttl(mut self, input: i64) -> Self {
        self.auth_ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of milliseconds that a token is valid after being authenticated. </p>
    pub fn set_auth_ttl(mut self, input: ::std::option::Option<i64>) -> Self {
        self.auth_ttl = input;
        self
    }
    /// <p> The number of milliseconds that a token is valid after being authenticated. </p>
    pub fn get_auth_ttl(&self) -> &::std::option::Option<i64> {
        &self.auth_ttl
    }
    /// <p> The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time. </p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time. </p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p> The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time. </p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p> The number of milliseconds that a token is valid after it's issued to a user. </p>
    pub fn iat_ttl(mut self, input: i64) -> Self {
        self.iat_ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of milliseconds that a token is valid after it's issued to a user. </p>
    pub fn set_iat_ttl(mut self, input: ::std::option::Option<i64>) -> Self {
        self.iat_ttl = input;
        self
    }
    /// <p> The number of milliseconds that a token is valid after it's issued to a user. </p>
    pub fn get_iat_ttl(&self) -> &::std::option::Option<i64> {
        &self.iat_ttl
    }
    /// <p> The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token. </p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token. </p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p> The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token. </p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// Consumes the builder and constructs a [`AwsAppSyncGraphQlApiOpenIdConnectConfigDetails`](crate::types::AwsAppSyncGraphQlApiOpenIdConnectConfigDetails).
    pub fn build(self) -> crate::types::AwsAppSyncGraphQlApiOpenIdConnectConfigDetails {
        crate::types::AwsAppSyncGraphQlApiOpenIdConnectConfigDetails {
            auth_ttl: self.auth_ttl,
            client_id: self.client_id,
            iat_ttl: self.iat_ttl,
            issuer: self.issuer,
        }
    }
}
