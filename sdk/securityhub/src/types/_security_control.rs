// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A security control in Security Hub describes a security best practice related to a specific resource. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SecurityControl {
    /// <p> The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3. </p>
    pub security_control_id: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard. </p>
    pub security_control_arn: ::std::option::Option<::std::string::String>,
    /// <p>The title of a security control. </p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p> The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> A link to Security Hub documentation that explains how to remediate a failed finding for a security control. </p>
    pub remediation_url: ::std::option::Option<::std::string::String>,
    /// <p> The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>. </p>
    pub severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    /// <p> The enablement status of a security control in a specific standard. </p>
    pub security_control_status: ::std::option::Option<crate::types::ControlStatus>,
}
impl SecurityControl {
    /// <p> The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3. </p>
    pub fn security_control_id(&self) -> ::std::option::Option<&str> {
        self.security_control_id.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard. </p>
    pub fn security_control_arn(&self) -> ::std::option::Option<&str> {
        self.security_control_arn.as_deref()
    }
    /// <p>The title of a security control. </p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p> The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> A link to Security Hub documentation that explains how to remediate a failed finding for a security control. </p>
    pub fn remediation_url(&self) -> ::std::option::Option<&str> {
        self.remediation_url.as_deref()
    }
    /// <p> The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn severity_rating(&self) -> ::std::option::Option<&crate::types::SeverityRating> {
        self.severity_rating.as_ref()
    }
    /// <p> The enablement status of a security control in a specific standard. </p>
    pub fn security_control_status(&self) -> ::std::option::Option<&crate::types::ControlStatus> {
        self.security_control_status.as_ref()
    }
}
impl SecurityControl {
    /// Creates a new builder-style object to manufacture [`SecurityControl`](crate::types::SecurityControl).
    pub fn builder() -> crate::types::builders::SecurityControlBuilder {
        crate::types::builders::SecurityControlBuilder::default()
    }
}

/// A builder for [`SecurityControl`](crate::types::SecurityControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SecurityControlBuilder {
    pub(crate) security_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_control_arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) remediation_url: ::std::option::Option<::std::string::String>,
    pub(crate) severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    pub(crate) security_control_status: ::std::option::Option<crate::types::ControlStatus>,
}
impl SecurityControlBuilder {
    /// <p> The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3. </p>
    /// This field is required.
    pub fn security_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3. </p>
    pub fn set_security_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_id = input;
        self
    }
    /// <p> The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3. </p>
    pub fn get_security_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_id
    }
    /// <p> The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard. </p>
    /// This field is required.
    pub fn security_control_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard. </p>
    pub fn set_security_control_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard. </p>
    pub fn get_security_control_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_arn
    }
    /// <p>The title of a security control. </p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of a security control. </p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of a security control. </p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p> The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard. </p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> A link to Security Hub documentation that explains how to remediate a failed finding for a security control. </p>
    /// This field is required.
    pub fn remediation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remediation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A link to Security Hub documentation that explains how to remediate a failed finding for a security control. </p>
    pub fn set_remediation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remediation_url = input;
        self
    }
    /// <p> A link to Security Hub documentation that explains how to remediate a failed finding for a security control. </p>
    pub fn get_remediation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.remediation_url
    }
    /// <p> The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>. </p>
    /// This field is required.
    pub fn severity_rating(mut self, input: crate::types::SeverityRating) -> Self {
        self.severity_rating = ::std::option::Option::Some(input);
        self
    }
    /// <p> The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn set_severity_rating(mut self, input: ::std::option::Option<crate::types::SeverityRating>) -> Self {
        self.severity_rating = input;
        self
    }
    /// <p> The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn get_severity_rating(&self) -> &::std::option::Option<crate::types::SeverityRating> {
        &self.severity_rating
    }
    /// <p> The enablement status of a security control in a specific standard. </p>
    /// This field is required.
    pub fn security_control_status(mut self, input: crate::types::ControlStatus) -> Self {
        self.security_control_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The enablement status of a security control in a specific standard. </p>
    pub fn set_security_control_status(mut self, input: ::std::option::Option<crate::types::ControlStatus>) -> Self {
        self.security_control_status = input;
        self
    }
    /// <p> The enablement status of a security control in a specific standard. </p>
    pub fn get_security_control_status(&self) -> &::std::option::Option<crate::types::ControlStatus> {
        &self.security_control_status
    }
    /// Consumes the builder and constructs a [`SecurityControl`](crate::types::SecurityControl).
    pub fn build(self) -> crate::types::SecurityControl {
        crate::types::SecurityControl {
            security_control_id: self.security_control_id,
            security_control_arn: self.security_control_arn,
            title: self.title,
            description: self.description,
            remediation_url: self.remediation_url,
            severity_rating: self.severity_rating,
            security_control_status: self.security_control_status,
        }
    }
}
