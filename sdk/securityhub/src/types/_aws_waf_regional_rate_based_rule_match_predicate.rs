// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for a match predicate. A predicate might look for characteristics such as specific IP addresses, geographic locations, or sizes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsWafRegionalRateBasedRuleMatchPredicate {
    /// <p>The unique identifier for the predicate.</p>
    #[doc(hidden)]
    pub data_id: std::option::Option<std::string::String>,
    /// <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
    /// <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.</p>
    #[doc(hidden)]
    pub negated: bool,
    /// <p>The type of predicate. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatch</code> </p> </li>
    /// <li> <p> <code>GeoMatch</code> </p> </li>
    /// <li> <p> <code>IPMatch</code> </p> </li>
    /// <li> <p> <code>RegexMatch</code> </p> </li>
    /// <li> <p> <code>SizeConstraint</code> </p> </li>
    /// <li> <p> <code>SqlInjectionMatch</code> </p> </li>
    /// <li> <p> <code>XssMatch</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl AwsWafRegionalRateBasedRuleMatchPredicate {
    /// <p>The unique identifier for the predicate.</p>
    pub fn data_id(&self) -> std::option::Option<&str> {
        self.data_id.as_deref()
    }
    /// <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
    /// <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.</p>
    pub fn negated(&self) -> bool {
        self.negated
    }
    /// <p>The type of predicate. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatch</code> </p> </li>
    /// <li> <p> <code>GeoMatch</code> </p> </li>
    /// <li> <p> <code>IPMatch</code> </p> </li>
    /// <li> <p> <code>RegexMatch</code> </p> </li>
    /// <li> <p> <code>SizeConstraint</code> </p> </li>
    /// <li> <p> <code>SqlInjectionMatch</code> </p> </li>
    /// <li> <p> <code>XssMatch</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsWafRegionalRateBasedRuleMatchPredicate {
    /// Creates a new builder-style object to manufacture [`AwsWafRegionalRateBasedRuleMatchPredicate`](crate::types::AwsWafRegionalRateBasedRuleMatchPredicate).
    pub fn builder() -> crate::types::builders::AwsWafRegionalRateBasedRuleMatchPredicateBuilder {
        crate::types::builders::AwsWafRegionalRateBasedRuleMatchPredicateBuilder::default()
    }
}

/// A builder for [`AwsWafRegionalRateBasedRuleMatchPredicate`](crate::types::AwsWafRegionalRateBasedRuleMatchPredicate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsWafRegionalRateBasedRuleMatchPredicateBuilder {
    pub(crate) data_id: std::option::Option<std::string::String>,
    pub(crate) negated: std::option::Option<bool>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl AwsWafRegionalRateBasedRuleMatchPredicateBuilder {
    /// <p>The unique identifier for the predicate.</p>
    pub fn data_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the predicate.</p>
    pub fn set_data_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_id = input;
        self
    }
    /// <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
    /// <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.</p>
    pub fn negated(mut self, input: bool) -> Self {
        self.negated = Some(input);
        self
    }
    /// <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
    /// <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.</p>
    pub fn set_negated(mut self, input: std::option::Option<bool>) -> Self {
        self.negated = input;
        self
    }
    /// <p>The type of predicate. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatch</code> </p> </li>
    /// <li> <p> <code>GeoMatch</code> </p> </li>
    /// <li> <p> <code>IPMatch</code> </p> </li>
    /// <li> <p> <code>RegexMatch</code> </p> </li>
    /// <li> <p> <code>SizeConstraint</code> </p> </li>
    /// <li> <p> <code>SqlInjectionMatch</code> </p> </li>
    /// <li> <p> <code>XssMatch</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of predicate. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatch</code> </p> </li>
    /// <li> <p> <code>GeoMatch</code> </p> </li>
    /// <li> <p> <code>IPMatch</code> </p> </li>
    /// <li> <p> <code>RegexMatch</code> </p> </li>
    /// <li> <p> <code>SizeConstraint</code> </p> </li>
    /// <li> <p> <code>SqlInjectionMatch</code> </p> </li>
    /// <li> <p> <code>XssMatch</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsWafRegionalRateBasedRuleMatchPredicate`](crate::types::AwsWafRegionalRateBasedRuleMatchPredicate).
    pub fn build(self) -> crate::types::AwsWafRegionalRateBasedRuleMatchPredicate {
        crate::types::AwsWafRegionalRateBasedRuleMatchPredicate {
            data_id: self.data_id,
            negated: self.negated.unwrap_or_default(),
            r#type: self.r#type,
        }
    }
}
