// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a version 2 stage for Amazon API Gateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsApiGatewayV2StageDetails {
    /// <p>The identifier of a client certificate for a stage. Supported only for WebSocket API calls.</p>
    #[doc(hidden)]
    pub client_certificate_id: std::option::Option<std::string::String>,
    /// <p>Indicates when the stage was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<std::string::String>,
    /// <p>The description of the stage.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Default route settings for the stage.</p>
    #[doc(hidden)]
    pub default_route_settings: std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    /// <p>The identifier of the deployment that the stage is associated with. </p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p>Indicates when the stage was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub last_updated_date: std::option::Option<std::string::String>,
    /// <p>The route settings for the stage.</p>
    #[doc(hidden)]
    pub route_settings: std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    /// <p>The name of the stage.</p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
    /// <p>A map that defines the stage variables for the stage.</p>
    /// <p>Variable names can have alphanumeric and underscore characters.</p>
    /// <p>Variable values can contain the following characters:</p>
    /// <ul>
    /// <li> <p>Uppercase and lowercase letters</p> </li>
    /// <li> <p>Numbers</p> </li>
    /// <li> <p>Special characters -._~:/?#&amp;=,</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub stage_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Information about settings for logging access for the stage.</p>
    #[doc(hidden)]
    pub access_log_settings: std::option::Option<crate::types::AwsApiGatewayAccessLogSettings>,
    /// <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
    #[doc(hidden)]
    pub auto_deploy: bool,
    /// <p>The status of the last deployment of a stage. Supported only if the stage has automatic deployment enabled.</p>
    #[doc(hidden)]
    pub last_deployment_status_message: std::option::Option<std::string::String>,
    /// <p>Indicates whether the stage is managed by API Gateway.</p>
    #[doc(hidden)]
    pub api_gateway_managed: bool,
}
impl AwsApiGatewayV2StageDetails {
    /// <p>The identifier of a client certificate for a stage. Supported only for WebSocket API calls.</p>
    pub fn client_certificate_id(&self) -> std::option::Option<&str> {
        self.client_certificate_id.as_deref()
    }
    /// <p>Indicates when the stage was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(&self) -> std::option::Option<&str> {
        self.created_date.as_deref()
    }
    /// <p>The description of the stage.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Default route settings for the stage.</p>
    pub fn default_route_settings(
        &self,
    ) -> std::option::Option<&crate::types::AwsApiGatewayV2RouteSettings> {
        self.default_route_settings.as_ref()
    }
    /// <p>The identifier of the deployment that the stage is associated with. </p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>Indicates when the stage was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_updated_date(&self) -> std::option::Option<&str> {
        self.last_updated_date.as_deref()
    }
    /// <p>The route settings for the stage.</p>
    pub fn route_settings(
        &self,
    ) -> std::option::Option<&crate::types::AwsApiGatewayV2RouteSettings> {
        self.route_settings.as_ref()
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>A map that defines the stage variables for the stage.</p>
    /// <p>Variable names can have alphanumeric and underscore characters.</p>
    /// <p>Variable values can contain the following characters:</p>
    /// <ul>
    /// <li> <p>Uppercase and lowercase letters</p> </li>
    /// <li> <p>Numbers</p> </li>
    /// <li> <p>Special characters -._~:/?#&amp;=,</p> </li>
    /// </ul>
    pub fn stage_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.stage_variables.as_ref()
    }
    /// <p>Information about settings for logging access for the stage.</p>
    pub fn access_log_settings(
        &self,
    ) -> std::option::Option<&crate::types::AwsApiGatewayAccessLogSettings> {
        self.access_log_settings.as_ref()
    }
    /// <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
    pub fn auto_deploy(&self) -> bool {
        self.auto_deploy
    }
    /// <p>The status of the last deployment of a stage. Supported only if the stage has automatic deployment enabled.</p>
    pub fn last_deployment_status_message(&self) -> std::option::Option<&str> {
        self.last_deployment_status_message.as_deref()
    }
    /// <p>Indicates whether the stage is managed by API Gateway.</p>
    pub fn api_gateway_managed(&self) -> bool {
        self.api_gateway_managed
    }
}
impl AwsApiGatewayV2StageDetails {
    /// Creates a new builder-style object to manufacture [`AwsApiGatewayV2StageDetails`](crate::types::AwsApiGatewayV2StageDetails).
    pub fn builder() -> crate::types::builders::AwsApiGatewayV2StageDetailsBuilder {
        crate::types::builders::AwsApiGatewayV2StageDetailsBuilder::default()
    }
}

/// A builder for [`AwsApiGatewayV2StageDetails`](crate::types::AwsApiGatewayV2StageDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsApiGatewayV2StageDetailsBuilder {
    pub(crate) client_certificate_id: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) default_route_settings:
        std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) last_updated_date: std::option::Option<std::string::String>,
    pub(crate) route_settings: std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    pub(crate) stage_name: std::option::Option<std::string::String>,
    pub(crate) stage_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) access_log_settings:
        std::option::Option<crate::types::AwsApiGatewayAccessLogSettings>,
    pub(crate) auto_deploy: std::option::Option<bool>,
    pub(crate) last_deployment_status_message: std::option::Option<std::string::String>,
    pub(crate) api_gateway_managed: std::option::Option<bool>,
}
impl AwsApiGatewayV2StageDetailsBuilder {
    /// <p>The identifier of a client certificate for a stage. Supported only for WebSocket API calls.</p>
    pub fn client_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_certificate_id = Some(input.into());
        self
    }
    /// <p>The identifier of a client certificate for a stage. Supported only for WebSocket API calls.</p>
    pub fn set_client_certificate_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_certificate_id = input;
        self
    }
    /// <p>Indicates when the stage was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_date = Some(input.into());
        self
    }
    /// <p>Indicates when the stage was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The description of the stage.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the stage.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Default route settings for the stage.</p>
    pub fn default_route_settings(
        mut self,
        input: crate::types::AwsApiGatewayV2RouteSettings,
    ) -> Self {
        self.default_route_settings = Some(input);
        self
    }
    /// <p>Default route settings for the stage.</p>
    pub fn set_default_route_settings(
        mut self,
        input: std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    ) -> Self {
        self.default_route_settings = input;
        self
    }
    /// <p>The identifier of the deployment that the stage is associated with. </p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p>The identifier of the deployment that the stage is associated with. </p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>Indicates when the stage was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_updated_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_date = Some(input.into());
        self
    }
    /// <p>Indicates when the stage was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_last_updated_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The route settings for the stage.</p>
    pub fn route_settings(mut self, input: crate::types::AwsApiGatewayV2RouteSettings) -> Self {
        self.route_settings = Some(input);
        self
    }
    /// <p>The route settings for the stage.</p>
    pub fn set_route_settings(
        mut self,
        input: std::option::Option<crate::types::AwsApiGatewayV2RouteSettings>,
    ) -> Self {
        self.route_settings = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// Adds a key-value pair to `stage_variables`.
    ///
    /// To override the contents of this collection use [`set_stage_variables`](Self::set_stage_variables).
    ///
    /// <p>A map that defines the stage variables for the stage.</p>
    /// <p>Variable names can have alphanumeric and underscore characters.</p>
    /// <p>Variable values can contain the following characters:</p>
    /// <ul>
    /// <li> <p>Uppercase and lowercase letters</p> </li>
    /// <li> <p>Numbers</p> </li>
    /// <li> <p>Special characters -._~:/?#&amp;=,</p> </li>
    /// </ul>
    pub fn stage_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.stage_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.stage_variables = Some(hash_map);
        self
    }
    /// <p>A map that defines the stage variables for the stage.</p>
    /// <p>Variable names can have alphanumeric and underscore characters.</p>
    /// <p>Variable values can contain the following characters:</p>
    /// <ul>
    /// <li> <p>Uppercase and lowercase letters</p> </li>
    /// <li> <p>Numbers</p> </li>
    /// <li> <p>Special characters -._~:/?#&amp;=,</p> </li>
    /// </ul>
    pub fn set_stage_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.stage_variables = input;
        self
    }
    /// <p>Information about settings for logging access for the stage.</p>
    pub fn access_log_settings(
        mut self,
        input: crate::types::AwsApiGatewayAccessLogSettings,
    ) -> Self {
        self.access_log_settings = Some(input);
        self
    }
    /// <p>Information about settings for logging access for the stage.</p>
    pub fn set_access_log_settings(
        mut self,
        input: std::option::Option<crate::types::AwsApiGatewayAccessLogSettings>,
    ) -> Self {
        self.access_log_settings = input;
        self
    }
    /// <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
    pub fn auto_deploy(mut self, input: bool) -> Self {
        self.auto_deploy = Some(input);
        self
    }
    /// <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
    pub fn set_auto_deploy(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_deploy = input;
        self
    }
    /// <p>The status of the last deployment of a stage. Supported only if the stage has automatic deployment enabled.</p>
    pub fn last_deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_deployment_status_message = Some(input.into());
        self
    }
    /// <p>The status of the last deployment of a stage. Supported only if the stage has automatic deployment enabled.</p>
    pub fn set_last_deployment_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_deployment_status_message = input;
        self
    }
    /// <p>Indicates whether the stage is managed by API Gateway.</p>
    pub fn api_gateway_managed(mut self, input: bool) -> Self {
        self.api_gateway_managed = Some(input);
        self
    }
    /// <p>Indicates whether the stage is managed by API Gateway.</p>
    pub fn set_api_gateway_managed(mut self, input: std::option::Option<bool>) -> Self {
        self.api_gateway_managed = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsApiGatewayV2StageDetails`](crate::types::AwsApiGatewayV2StageDetails).
    pub fn build(self) -> crate::types::AwsApiGatewayV2StageDetails {
        crate::types::AwsApiGatewayV2StageDetails {
            client_certificate_id: self.client_certificate_id,
            created_date: self.created_date,
            description: self.description,
            default_route_settings: self.default_route_settings,
            deployment_id: self.deployment_id,
            last_updated_date: self.last_updated_date,
            route_settings: self.route_settings,
            stage_name: self.stage_name,
            stage_variables: self.stage_variables,
            access_log_settings: self.access_log_settings,
            auto_deploy: self.auto_deploy.unwrap_or_default(),
            last_deployment_status_message: self.last_deployment_status_message,
            api_gateway_managed: self.api_gateway_managed.unwrap_or_default(),
        }
    }
}
