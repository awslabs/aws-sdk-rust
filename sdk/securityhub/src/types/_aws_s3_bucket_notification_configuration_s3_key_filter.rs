// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for an Amazon S3 filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsS3BucketNotificationConfigurationS3KeyFilter {
    /// <p>The filter rules for the filter.</p>
    #[doc(hidden)]
    pub filter_rules: std::option::Option<
        std::vec::Vec<crate::types::AwsS3BucketNotificationConfigurationS3KeyFilterRule>,
    >,
}
impl AwsS3BucketNotificationConfigurationS3KeyFilter {
    /// <p>The filter rules for the filter.</p>
    pub fn filter_rules(
        &self,
    ) -> std::option::Option<&[crate::types::AwsS3BucketNotificationConfigurationS3KeyFilterRule]>
    {
        self.filter_rules.as_deref()
    }
}
impl AwsS3BucketNotificationConfigurationS3KeyFilter {
    /// Creates a new builder-style object to manufacture [`AwsS3BucketNotificationConfigurationS3KeyFilter`](crate::types::AwsS3BucketNotificationConfigurationS3KeyFilter).
    pub fn builder(
    ) -> crate::types::builders::AwsS3BucketNotificationConfigurationS3KeyFilterBuilder {
        crate::types::builders::AwsS3BucketNotificationConfigurationS3KeyFilterBuilder::default()
    }
}

/// A builder for [`AwsS3BucketNotificationConfigurationS3KeyFilter`](crate::types::AwsS3BucketNotificationConfigurationS3KeyFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsS3BucketNotificationConfigurationS3KeyFilterBuilder {
    pub(crate) filter_rules: std::option::Option<
        std::vec::Vec<crate::types::AwsS3BucketNotificationConfigurationS3KeyFilterRule>,
    >,
}
impl AwsS3BucketNotificationConfigurationS3KeyFilterBuilder {
    /// Appends an item to `filter_rules`.
    ///
    /// To override the contents of this collection use [`set_filter_rules`](Self::set_filter_rules).
    ///
    /// <p>The filter rules for the filter.</p>
    pub fn filter_rules(
        mut self,
        input: crate::types::AwsS3BucketNotificationConfigurationS3KeyFilterRule,
    ) -> Self {
        let mut v = self.filter_rules.unwrap_or_default();
        v.push(input);
        self.filter_rules = Some(v);
        self
    }
    /// <p>The filter rules for the filter.</p>
    pub fn set_filter_rules(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsS3BucketNotificationConfigurationS3KeyFilterRule>,
        >,
    ) -> Self {
        self.filter_rules = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsS3BucketNotificationConfigurationS3KeyFilter`](crate::types::AwsS3BucketNotificationConfigurationS3KeyFilter).
    pub fn build(self) -> crate::types::AwsS3BucketNotificationConfigurationS3KeyFilter {
        crate::types::AwsS3BucketNotificationConfigurationS3KeyFilter {
            filter_rules: self.filter_rules,
        }
    }
}
