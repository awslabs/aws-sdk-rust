// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an instance of sensitive data that was detected by a customer-defined identifier.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomDataIdentifiersResult {
    /// <p>The list of detected instances of sensitive data.</p>
    pub detections: ::std::option::Option<::std::vec::Vec<crate::types::CustomDataIdentifiersDetections>>,
    /// <p>The total number of occurrences of sensitive data.</p>
    pub total_count: ::std::option::Option<i64>,
}
impl CustomDataIdentifiersResult {
    /// <p>The list of detected instances of sensitive data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.detections.is_none()`.
    pub fn detections(&self) -> &[crate::types::CustomDataIdentifiersDetections] {
        self.detections.as_deref().unwrap_or_default()
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn total_count(&self) -> ::std::option::Option<i64> {
        self.total_count
    }
}
impl CustomDataIdentifiersResult {
    /// Creates a new builder-style object to manufacture [`CustomDataIdentifiersResult`](crate::types::CustomDataIdentifiersResult).
    pub fn builder() -> crate::types::builders::CustomDataIdentifiersResultBuilder {
        crate::types::builders::CustomDataIdentifiersResultBuilder::default()
    }
}

/// A builder for [`CustomDataIdentifiersResult`](crate::types::CustomDataIdentifiersResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomDataIdentifiersResultBuilder {
    pub(crate) detections: ::std::option::Option<::std::vec::Vec<crate::types::CustomDataIdentifiersDetections>>,
    pub(crate) total_count: ::std::option::Option<i64>,
}
impl CustomDataIdentifiersResultBuilder {
    /// Appends an item to `detections`.
    ///
    /// To override the contents of this collection use [`set_detections`](Self::set_detections).
    ///
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn detections(mut self, input: crate::types::CustomDataIdentifiersDetections) -> Self {
        let mut v = self.detections.unwrap_or_default();
        v.push(input);
        self.detections = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn set_detections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomDataIdentifiersDetections>>) -> Self {
        self.detections = input;
        self
    }
    /// <p>The list of detected instances of sensitive data.</p>
    pub fn get_detections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomDataIdentifiersDetections>> {
        &self.detections
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn total_count(mut self, input: i64) -> Self {
        self.total_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn set_total_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_count = input;
        self
    }
    /// <p>The total number of occurrences of sensitive data.</p>
    pub fn get_total_count(&self) -> &::std::option::Option<i64> {
        &self.total_count
    }
    /// Consumes the builder and constructs a [`CustomDataIdentifiersResult`](crate::types::CustomDataIdentifiersResult).
    pub fn build(self) -> crate::types::CustomDataIdentifiersResult {
        crate::types::CustomDataIdentifiersResult {
            detections: self.detections,
            total_count: self.total_count,
        }
    }
}
