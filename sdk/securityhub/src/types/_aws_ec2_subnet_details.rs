// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a subnet in Amazon EC2.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2SubnetDetails {
    /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
    pub assign_ipv6_address_on_creation: ::std::option::Option<bool>,
    /// <p>The Availability Zone for the subnet.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Availability Zone for the subnet.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
    pub available_ip_address_count: ::std::option::Option<i32>,
    /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
    pub cidr_block: ::std::option::Option<::std::string::String>,
    /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
    pub default_for_az: ::std::option::Option<bool>,
    /// <p>Whether instances in this subnet receive a public IP address.</p>
    pub map_public_ip_on_launch: ::std::option::Option<bool>,
    /// <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the subnet. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the subnet.</p>
    pub subnet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the subnet.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the VPC that contains the subnet.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
    pub ipv6_cidr_block_association_set: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
}
impl AwsEc2SubnetDetails {
    /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
    pub fn assign_ipv6_address_on_creation(&self) -> ::std::option::Option<bool> {
        self.assign_ipv6_address_on_creation
    }
    /// <p>The Availability Zone for the subnet.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The identifier of the Availability Zone for the subnet.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
    pub fn available_ip_address_count(&self) -> ::std::option::Option<i32> {
        self.available_ip_address_count
    }
    /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
    pub fn cidr_block(&self) -> ::std::option::Option<&str> {
        self.cidr_block.as_deref()
    }
    /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
    pub fn default_for_az(&self) -> ::std::option::Option<bool> {
        self.default_for_az
    }
    /// <p>Whether instances in this subnet receive a public IP address.</p>
    pub fn map_public_ip_on_launch(&self) -> ::std::option::Option<bool> {
        self.map_public_ip_on_launch
    }
    /// <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The current state of the subnet. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The ARN of the subnet.</p>
    pub fn subnet_arn(&self) -> ::std::option::Option<&str> {
        self.subnet_arn.as_deref()
    }
    /// <p>The identifier of the subnet.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The identifier of the VPC that contains the subnet.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_cidr_block_association_set.is_none()`.
    pub fn ipv6_cidr_block_association_set(&self) -> &[crate::types::Ipv6CidrBlockAssociation] {
        self.ipv6_cidr_block_association_set.as_deref().unwrap_or_default()
    }
}
impl AwsEc2SubnetDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2SubnetDetails`](crate::types::AwsEc2SubnetDetails).
    pub fn builder() -> crate::types::builders::AwsEc2SubnetDetailsBuilder {
        crate::types::builders::AwsEc2SubnetDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2SubnetDetails`](crate::types::AwsEc2SubnetDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2SubnetDetailsBuilder {
    pub(crate) assign_ipv6_address_on_creation: ::std::option::Option<bool>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) available_ip_address_count: ::std::option::Option<i32>,
    pub(crate) cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) default_for_az: ::std::option::Option<bool>,
    pub(crate) map_public_ip_on_launch: ::std::option::Option<bool>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_cidr_block_association_set: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
}
impl AwsEc2SubnetDetailsBuilder {
    /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
    pub fn assign_ipv6_address_on_creation(mut self, input: bool) -> Self {
        self.assign_ipv6_address_on_creation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
    pub fn set_assign_ipv6_address_on_creation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.assign_ipv6_address_on_creation = input;
        self
    }
    /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
    pub fn get_assign_ipv6_address_on_creation(&self) -> &::std::option::Option<bool> {
        &self.assign_ipv6_address_on_creation
    }
    /// <p>The Availability Zone for the subnet.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone for the subnet.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone for the subnet.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The identifier of the Availability Zone for the subnet.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Availability Zone for the subnet.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The identifier of the Availability Zone for the subnet.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
    pub fn available_ip_address_count(mut self, input: i32) -> Self {
        self.available_ip_address_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
    pub fn set_available_ip_address_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_ip_address_count = input;
        self
    }
    /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
    pub fn get_available_ip_address_count(&self) -> &::std::option::Option<i32> {
        &self.available_ip_address_count
    }
    /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
    pub fn cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
    pub fn set_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr_block = input;
        self
    }
    /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
    pub fn get_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr_block
    }
    /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
    pub fn default_for_az(mut self, input: bool) -> Self {
        self.default_for_az = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
    pub fn set_default_for_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_for_az = input;
        self
    }
    /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
    pub fn get_default_for_az(&self) -> &::std::option::Option<bool> {
        &self.default_for_az
    }
    /// <p>Whether instances in this subnet receive a public IP address.</p>
    pub fn map_public_ip_on_launch(mut self, input: bool) -> Self {
        self.map_public_ip_on_launch = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether instances in this subnet receive a public IP address.</p>
    pub fn set_map_public_ip_on_launch(mut self, input: ::std::option::Option<bool>) -> Self {
        self.map_public_ip_on_launch = input;
        self
    }
    /// <p>Whether instances in this subnet receive a public IP address.</p>
    pub fn get_map_public_ip_on_launch(&self) -> &::std::option::Option<bool> {
        &self.map_public_ip_on_launch
    }
    /// <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The current state of the subnet. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the subnet. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the subnet. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The ARN of the subnet.</p>
    pub fn subnet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the subnet.</p>
    pub fn set_subnet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_arn = input;
        self
    }
    /// <p>The ARN of the subnet.</p>
    pub fn get_subnet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_arn
    }
    /// <p>The identifier of the subnet.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The identifier of the subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The identifier of the VPC that contains the subnet.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the VPC that contains the subnet.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The identifier of the VPC that contains the subnet.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `ipv6_cidr_block_association_set`.
    ///
    /// To override the contents of this collection use [`set_ipv6_cidr_block_association_set`](Self::set_ipv6_cidr_block_association_set).
    ///
    /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
    pub fn ipv6_cidr_block_association_set(mut self, input: crate::types::Ipv6CidrBlockAssociation) -> Self {
        let mut v = self.ipv6_cidr_block_association_set.unwrap_or_default();
        v.push(input);
        self.ipv6_cidr_block_association_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
    pub fn set_ipv6_cidr_block_association_set(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
    ) -> Self {
        self.ipv6_cidr_block_association_set = input;
        self
    }
    /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
    pub fn get_ipv6_cidr_block_association_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>> {
        &self.ipv6_cidr_block_association_set
    }
    /// Consumes the builder and constructs a [`AwsEc2SubnetDetails`](crate::types::AwsEc2SubnetDetails).
    pub fn build(self) -> crate::types::AwsEc2SubnetDetails {
        crate::types::AwsEc2SubnetDetails {
            assign_ipv6_address_on_creation: self.assign_ipv6_address_on_creation,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
            available_ip_address_count: self.available_ip_address_count,
            cidr_block: self.cidr_block,
            default_for_az: self.default_for_az,
            map_public_ip_on_launch: self.map_public_ip_on_launch,
            owner_id: self.owner_id,
            state: self.state,
            subnet_arn: self.subnet_arn,
            subnet_id: self.subnet_id,
            vpc_id: self.vpc_id,
            ipv6_cidr_block_association_set: self.ipv6_cidr_block_association_set,
        }
    }
}
