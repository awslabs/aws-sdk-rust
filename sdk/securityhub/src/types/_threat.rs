// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the threat detected in a security finding and the file paths that were affected by the threat. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Threat {
    /// <p>The name of the threat. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The severity of the threat. </p>
    #[doc(hidden)]
    pub severity: std::option::Option<std::string::String>,
    /// <p>This total number of items in which the threat has been detected. </p>
    #[doc(hidden)]
    pub item_count: i32,
    /// <p>Provides information about the file paths that were affected by the threat. </p>
    #[doc(hidden)]
    pub file_paths: std::option::Option<std::vec::Vec<crate::types::FilePaths>>,
}
impl Threat {
    /// <p>The name of the threat. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The severity of the threat. </p>
    pub fn severity(&self) -> std::option::Option<&str> {
        self.severity.as_deref()
    }
    /// <p>This total number of items in which the threat has been detected. </p>
    pub fn item_count(&self) -> i32 {
        self.item_count
    }
    /// <p>Provides information about the file paths that were affected by the threat. </p>
    pub fn file_paths(&self) -> std::option::Option<&[crate::types::FilePaths]> {
        self.file_paths.as_deref()
    }
}
impl Threat {
    /// Creates a new builder-style object to manufacture [`Threat`](crate::types::Threat).
    pub fn builder() -> crate::types::builders::ThreatBuilder {
        crate::types::builders::ThreatBuilder::default()
    }
}

/// A builder for [`Threat`](crate::types::Threat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThreatBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<std::string::String>,
    pub(crate) item_count: std::option::Option<i32>,
    pub(crate) file_paths: std::option::Option<std::vec::Vec<crate::types::FilePaths>>,
}
impl ThreatBuilder {
    /// <p>The name of the threat. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the threat. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The severity of the threat. </p>
    pub fn severity(mut self, input: impl Into<std::string::String>) -> Self {
        self.severity = Some(input.into());
        self
    }
    /// <p>The severity of the threat. </p>
    pub fn set_severity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.severity = input;
        self
    }
    /// <p>This total number of items in which the threat has been detected. </p>
    pub fn item_count(mut self, input: i32) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>This total number of items in which the threat has been detected. </p>
    pub fn set_item_count(mut self, input: std::option::Option<i32>) -> Self {
        self.item_count = input;
        self
    }
    /// Appends an item to `file_paths`.
    ///
    /// To override the contents of this collection use [`set_file_paths`](Self::set_file_paths).
    ///
    /// <p>Provides information about the file paths that were affected by the threat. </p>
    pub fn file_paths(mut self, input: crate::types::FilePaths) -> Self {
        let mut v = self.file_paths.unwrap_or_default();
        v.push(input);
        self.file_paths = Some(v);
        self
    }
    /// <p>Provides information about the file paths that were affected by the threat. </p>
    pub fn set_file_paths(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilePaths>>,
    ) -> Self {
        self.file_paths = input;
        self
    }
    /// Consumes the builder and constructs a [`Threat`](crate::types::Threat).
    pub fn build(self) -> crate::types::Threat {
        crate::types::Threat {
            name: self.name,
            severity: self.severity,
            item_count: self.item_count.unwrap_or_default(),
            file_paths: self.file_paths,
        }
    }
}
