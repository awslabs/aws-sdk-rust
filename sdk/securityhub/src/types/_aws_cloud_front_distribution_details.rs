// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A CloudFront distribution configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCloudFrontDistributionDetails {
    /// <p>Provides information about the cache configuration for the distribution.</p>
    #[doc(hidden)]
    pub cache_behaviors: std::option::Option<crate::types::AwsCloudFrontDistributionCacheBehaviors>,
    /// <p>The default cache behavior for the configuration.</p>
    #[doc(hidden)]
    pub default_cache_behavior:
        std::option::Option<crate::types::AwsCloudFrontDistributionDefaultCacheBehavior>,
    /// <p>The object that CloudFront sends in response to requests from the origin (for example, index.html) when a viewer requests the root URL for the distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). </p>
    #[doc(hidden)]
    pub default_root_object: std::option::Option<std::string::String>,
    /// <p>The domain name corresponding to the distribution.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The entity tag is a hash of the object.</p>
    #[doc(hidden)]
    pub e_tag: std::option::Option<std::string::String>,
    /// <p>Indicates when that the distribution was last modified.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<std::string::String>,
    /// <p>A complex type that controls whether access logs are written for the distribution.</p>
    #[doc(hidden)]
    pub logging: std::option::Option<crate::types::AwsCloudFrontDistributionLogging>,
    /// <p>A complex type that contains information about origins for this distribution.</p>
    #[doc(hidden)]
    pub origins: std::option::Option<crate::types::AwsCloudFrontDistributionOrigins>,
    /// <p>Provides information about the origin groups in the distribution.</p>
    #[doc(hidden)]
    pub origin_groups: std::option::Option<crate::types::AwsCloudFrontDistributionOriginGroups>,
    /// <p>Provides information about the TLS/SSL configuration that the distribution uses to communicate with viewers.</p>
    #[doc(hidden)]
    pub viewer_certificate:
        std::option::Option<crate::types::AwsCloudFrontDistributionViewerCertificate>,
    /// <p>Indicates the current status of the distribution.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution.</p>
    #[doc(hidden)]
    pub web_acl_id: std::option::Option<std::string::String>,
}
impl AwsCloudFrontDistributionDetails {
    /// <p>Provides information about the cache configuration for the distribution.</p>
    pub fn cache_behaviors(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionCacheBehaviors> {
        self.cache_behaviors.as_ref()
    }
    /// <p>The default cache behavior for the configuration.</p>
    pub fn default_cache_behavior(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionDefaultCacheBehavior> {
        self.default_cache_behavior.as_ref()
    }
    /// <p>The object that CloudFront sends in response to requests from the origin (for example, index.html) when a viewer requests the root URL for the distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). </p>
    pub fn default_root_object(&self) -> std::option::Option<&str> {
        self.default_root_object.as_deref()
    }
    /// <p>The domain name corresponding to the distribution.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The entity tag is a hash of the object.</p>
    pub fn e_tag(&self) -> std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>Indicates when that the distribution was last modified.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&str> {
        self.last_modified_time.as_deref()
    }
    /// <p>A complex type that controls whether access logs are written for the distribution.</p>
    pub fn logging(&self) -> std::option::Option<&crate::types::AwsCloudFrontDistributionLogging> {
        self.logging.as_ref()
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn origins(&self) -> std::option::Option<&crate::types::AwsCloudFrontDistributionOrigins> {
        self.origins.as_ref()
    }
    /// <p>Provides information about the origin groups in the distribution.</p>
    pub fn origin_groups(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionOriginGroups> {
        self.origin_groups.as_ref()
    }
    /// <p>Provides information about the TLS/SSL configuration that the distribution uses to communicate with viewers.</p>
    pub fn viewer_certificate(
        &self,
    ) -> std::option::Option<&crate::types::AwsCloudFrontDistributionViewerCertificate> {
        self.viewer_certificate.as_ref()
    }
    /// <p>Indicates the current status of the distribution.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution.</p>
    pub fn web_acl_id(&self) -> std::option::Option<&str> {
        self.web_acl_id.as_deref()
    }
}
impl AwsCloudFrontDistributionDetails {
    /// Creates a new builder-style object to manufacture [`AwsCloudFrontDistributionDetails`](crate::types::AwsCloudFrontDistributionDetails).
    pub fn builder() -> crate::types::builders::AwsCloudFrontDistributionDetailsBuilder {
        crate::types::builders::AwsCloudFrontDistributionDetailsBuilder::default()
    }
}

/// A builder for [`AwsCloudFrontDistributionDetails`](crate::types::AwsCloudFrontDistributionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCloudFrontDistributionDetailsBuilder {
    pub(crate) cache_behaviors:
        std::option::Option<crate::types::AwsCloudFrontDistributionCacheBehaviors>,
    pub(crate) default_cache_behavior:
        std::option::Option<crate::types::AwsCloudFrontDistributionDefaultCacheBehavior>,
    pub(crate) default_root_object: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) e_tag: std::option::Option<std::string::String>,
    pub(crate) last_modified_time: std::option::Option<std::string::String>,
    pub(crate) logging: std::option::Option<crate::types::AwsCloudFrontDistributionLogging>,
    pub(crate) origins: std::option::Option<crate::types::AwsCloudFrontDistributionOrigins>,
    pub(crate) origin_groups:
        std::option::Option<crate::types::AwsCloudFrontDistributionOriginGroups>,
    pub(crate) viewer_certificate:
        std::option::Option<crate::types::AwsCloudFrontDistributionViewerCertificate>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) web_acl_id: std::option::Option<std::string::String>,
}
impl AwsCloudFrontDistributionDetailsBuilder {
    /// <p>Provides information about the cache configuration for the distribution.</p>
    pub fn cache_behaviors(
        mut self,
        input: crate::types::AwsCloudFrontDistributionCacheBehaviors,
    ) -> Self {
        self.cache_behaviors = Some(input);
        self
    }
    /// <p>Provides information about the cache configuration for the distribution.</p>
    pub fn set_cache_behaviors(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionCacheBehaviors>,
    ) -> Self {
        self.cache_behaviors = input;
        self
    }
    /// <p>The default cache behavior for the configuration.</p>
    pub fn default_cache_behavior(
        mut self,
        input: crate::types::AwsCloudFrontDistributionDefaultCacheBehavior,
    ) -> Self {
        self.default_cache_behavior = Some(input);
        self
    }
    /// <p>The default cache behavior for the configuration.</p>
    pub fn set_default_cache_behavior(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionDefaultCacheBehavior>,
    ) -> Self {
        self.default_cache_behavior = input;
        self
    }
    /// <p>The object that CloudFront sends in response to requests from the origin (for example, index.html) when a viewer requests the root URL for the distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). </p>
    pub fn default_root_object(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_root_object = Some(input.into());
        self
    }
    /// <p>The object that CloudFront sends in response to requests from the origin (for example, index.html) when a viewer requests the root URL for the distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). </p>
    pub fn set_default_root_object(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_root_object = input;
        self
    }
    /// <p>The domain name corresponding to the distribution.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name corresponding to the distribution.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The entity tag is a hash of the object.</p>
    pub fn e_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.e_tag = Some(input.into());
        self
    }
    /// <p>The entity tag is a hash of the object.</p>
    pub fn set_e_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>Indicates when that the distribution was last modified.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_modified_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_time = Some(input.into());
        self
    }
    /// <p>Indicates when that the distribution was last modified.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>A complex type that controls whether access logs are written for the distribution.</p>
    pub fn logging(mut self, input: crate::types::AwsCloudFrontDistributionLogging) -> Self {
        self.logging = Some(input);
        self
    }
    /// <p>A complex type that controls whether access logs are written for the distribution.</p>
    pub fn set_logging(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionLogging>,
    ) -> Self {
        self.logging = input;
        self
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn origins(mut self, input: crate::types::AwsCloudFrontDistributionOrigins) -> Self {
        self.origins = Some(input);
        self
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn set_origins(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionOrigins>,
    ) -> Self {
        self.origins = input;
        self
    }
    /// <p>Provides information about the origin groups in the distribution.</p>
    pub fn origin_groups(
        mut self,
        input: crate::types::AwsCloudFrontDistributionOriginGroups,
    ) -> Self {
        self.origin_groups = Some(input);
        self
    }
    /// <p>Provides information about the origin groups in the distribution.</p>
    pub fn set_origin_groups(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionOriginGroups>,
    ) -> Self {
        self.origin_groups = input;
        self
    }
    /// <p>Provides information about the TLS/SSL configuration that the distribution uses to communicate with viewers.</p>
    pub fn viewer_certificate(
        mut self,
        input: crate::types::AwsCloudFrontDistributionViewerCertificate,
    ) -> Self {
        self.viewer_certificate = Some(input);
        self
    }
    /// <p>Provides information about the TLS/SSL configuration that the distribution uses to communicate with viewers.</p>
    pub fn set_viewer_certificate(
        mut self,
        input: std::option::Option<crate::types::AwsCloudFrontDistributionViewerCertificate>,
    ) -> Self {
        self.viewer_certificate = input;
        self
    }
    /// <p>Indicates the current status of the distribution.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Indicates the current status of the distribution.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution.</p>
    pub fn web_acl_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.web_acl_id = Some(input.into());
        self
    }
    /// <p>A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution.</p>
    pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.web_acl_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCloudFrontDistributionDetails`](crate::types::AwsCloudFrontDistributionDetails).
    pub fn build(self) -> crate::types::AwsCloudFrontDistributionDetails {
        crate::types::AwsCloudFrontDistributionDetails {
            cache_behaviors: self.cache_behaviors,
            default_cache_behavior: self.default_cache_behavior,
            default_root_object: self.default_root_object,
            domain_name: self.domain_name,
            e_tag: self.e_tag,
            last_modified_time: self.last_modified_time,
            logging: self.logging,
            origins: self.origins,
            origin_groups: self.origin_groups,
            viewer_certificate: self.viewer_certificate,
            status: self.status,
            web_acl_id: self.web_acl_id,
        }
    }
}
