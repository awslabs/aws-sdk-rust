// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the entity that created the session.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsIamAccessKeySessionContextSessionIssuer {
    /// <p>The type of principal (user, role, or group) that created the session.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The principal ID of the principal (user, role, or group) that created the session.</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the session.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the Amazon Web Services account that created the session.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The name of the principal that created the session.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
}
impl AwsIamAccessKeySessionContextSessionIssuer {
    /// <p>The type of principal (user, role, or group) that created the session.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The principal ID of the principal (user, role, or group) that created the session.</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The ARN of the session.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services account that created the session.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The name of the principal that created the session.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
}
impl AwsIamAccessKeySessionContextSessionIssuer {
    /// Creates a new builder-style object to manufacture [`AwsIamAccessKeySessionContextSessionIssuer`](crate::types::AwsIamAccessKeySessionContextSessionIssuer).
    pub fn builder() -> crate::types::builders::AwsIamAccessKeySessionContextSessionIssuerBuilder {
        crate::types::builders::AwsIamAccessKeySessionContextSessionIssuerBuilder::default()
    }
}

/// A builder for [`AwsIamAccessKeySessionContextSessionIssuer`](crate::types::AwsIamAccessKeySessionContextSessionIssuer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsIamAccessKeySessionContextSessionIssuerBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
}
impl AwsIamAccessKeySessionContextSessionIssuerBuilder {
    /// <p>The type of principal (user, role, or group) that created the session.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of principal (user, role, or group) that created the session.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The principal ID of the principal (user, role, or group) that created the session.</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The principal ID of the principal (user, role, or group) that created the session.</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The ARN of the session.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the session.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that created the session.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that created the session.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The name of the principal that created the session.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the principal that created the session.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsIamAccessKeySessionContextSessionIssuer`](crate::types::AwsIamAccessKeySessionContextSessionIssuer).
    pub fn build(self) -> crate::types::AwsIamAccessKeySessionContextSessionIssuer {
        crate::types::AwsIamAccessKeySessionContextSessionIssuer {
            r#type: self.r#type,
            principal_id: self.principal_id,
            arn: self.arn,
            account_id: self.account_id,
            user_name: self.user_name,
        }
    }
}
