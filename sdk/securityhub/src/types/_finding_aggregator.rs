// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A finding aggregator. A finding aggregator contains the configuration for finding aggregation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FindingAggregator {
    /// <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.</p>
    #[doc(hidden)]
    pub finding_aggregator_arn: std::option::Option<std::string::String>,
}
impl FindingAggregator {
    /// <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.</p>
    pub fn finding_aggregator_arn(&self) -> std::option::Option<&str> {
        self.finding_aggregator_arn.as_deref()
    }
}
impl FindingAggregator {
    /// Creates a new builder-style object to manufacture [`FindingAggregator`](crate::types::FindingAggregator).
    pub fn builder() -> crate::types::builders::FindingAggregatorBuilder {
        crate::types::builders::FindingAggregatorBuilder::default()
    }
}

/// A builder for [`FindingAggregator`](crate::types::FindingAggregator).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FindingAggregatorBuilder {
    pub(crate) finding_aggregator_arn: std::option::Option<std::string::String>,
}
impl FindingAggregatorBuilder {
    /// <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.</p>
    pub fn finding_aggregator_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.finding_aggregator_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.</p>
    pub fn set_finding_aggregator_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.finding_aggregator_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`FindingAggregator`](crate::types::FindingAggregator).
    pub fn build(self) -> crate::types::FindingAggregator {
        crate::types::FindingAggregator {
            finding_aggregator_arn: self.finding_aggregator_arn,
        }
    }
}
