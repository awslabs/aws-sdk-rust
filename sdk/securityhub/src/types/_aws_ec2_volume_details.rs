// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an EC2 volume.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2VolumeDetails {
    /// <p>Indicates when the volume was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub create_time: ::std::option::Option<::std::string::String>,
    /// <p>The device name for the volume that is attached to the instance. </p>
    pub device_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the volume is encrypted.</p>
    pub encrypted: ::std::option::Option<bool>,
    /// <p>The size of the volume, in GiBs.</p>
    pub size: ::std::option::Option<i32>,
    /// <p>The snapshot from which the volume was created.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The volume state. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>error</code> </p> </li>
    /// <li> <p> <code>in-use</code> </p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key that was used to protect the volume encryption key for the volume.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The volume attachments.</p>
    pub attachments: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VolumeAttachment>>,
    /// <p>The ID of the volume. </p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The volume type. </p>
    pub volume_type: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the volume was scanned or skipped. </p>
    pub volume_scan_status: ::std::option::Option<::std::string::String>,
}
impl AwsEc2VolumeDetails {
    /// <p>Indicates when the volume was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_time(&self) -> ::std::option::Option<&str> {
        self.create_time.as_deref()
    }
    /// <p>The device name for the volume that is attached to the instance. </p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Specifies whether the volume is encrypted.</p>
    pub fn encrypted(&self) -> ::std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The size of the volume, in GiBs.</p>
    pub fn size(&self) -> ::std::option::Option<i32> {
        self.size
    }
    /// <p>The snapshot from which the volume was created.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The volume state. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>error</code> </p> </li>
    /// <li> <p> <code>in-use</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The ARN of the KMS key that was used to protect the volume encryption key for the volume.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The volume attachments.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachments.is_none()`.
    pub fn attachments(&self) -> &[crate::types::AwsEc2VolumeAttachment] {
        self.attachments.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the volume. </p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The volume type. </p>
    pub fn volume_type(&self) -> ::std::option::Option<&str> {
        self.volume_type.as_deref()
    }
    /// <p>Indicates whether the volume was scanned or skipped. </p>
    pub fn volume_scan_status(&self) -> ::std::option::Option<&str> {
        self.volume_scan_status.as_deref()
    }
}
impl AwsEc2VolumeDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2VolumeDetails`](crate::types::AwsEc2VolumeDetails).
    pub fn builder() -> crate::types::builders::AwsEc2VolumeDetailsBuilder {
        crate::types::builders::AwsEc2VolumeDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2VolumeDetails`](crate::types::AwsEc2VolumeDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2VolumeDetailsBuilder {
    pub(crate) create_time: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) encrypted: ::std::option::Option<bool>,
    pub(crate) size: ::std::option::Option<i32>,
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) attachments: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VolumeAttachment>>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_type: ::std::option::Option<::std::string::String>,
    pub(crate) volume_scan_status: ::std::option::Option<::std::string::String>,
}
impl AwsEc2VolumeDetailsBuilder {
    /// <p>Indicates when the volume was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.create_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the volume was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>Indicates when the volume was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.create_time
    }
    /// <p>The device name for the volume that is attached to the instance. </p>
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device name for the volume that is attached to the instance. </p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The device name for the volume that is attached to the instance. </p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// <p>Specifies whether the volume is encrypted.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the volume is encrypted.</p>
    pub fn set_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>Specifies whether the volume is encrypted.</p>
    pub fn get_encrypted(&self) -> &::std::option::Option<bool> {
        &self.encrypted
    }
    /// <p>The size of the volume, in GiBs.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the volume, in GiBs.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the volume, in GiBs.</p>
    pub fn get_size(&self) -> &::std::option::Option<i32> {
        &self.size
    }
    /// <p>The snapshot from which the volume was created.</p>
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The snapshot from which the volume was created.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The snapshot from which the volume was created.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// <p>The volume state. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>error</code> </p> </li>
    /// <li> <p> <code>in-use</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The volume state. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>error</code> </p> </li>
    /// <li> <p> <code>in-use</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The volume state. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// <li> <p> <code>deleted</code> </p> </li>
    /// <li> <p> <code>deleting</code> </p> </li>
    /// <li> <p> <code>error</code> </p> </li>
    /// <li> <p> <code>in-use</code> </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The ARN of the KMS key that was used to protect the volume encryption key for the volume.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that was used to protect the volume encryption key for the volume.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ARN of the KMS key that was used to protect the volume encryption key for the volume.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>The volume attachments.</p>
    pub fn attachments(mut self, input: crate::types::AwsEc2VolumeAttachment) -> Self {
        let mut v = self.attachments.unwrap_or_default();
        v.push(input);
        self.attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The volume attachments.</p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VolumeAttachment>>) -> Self {
        self.attachments = input;
        self
    }
    /// <p>The volume attachments.</p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2VolumeAttachment>> {
        &self.attachments
    }
    /// <p>The ID of the volume. </p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the volume. </p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The ID of the volume. </p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The volume type. </p>
    pub fn volume_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The volume type. </p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The volume type. </p>
    pub fn get_volume_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_type
    }
    /// <p>Indicates whether the volume was scanned or skipped. </p>
    pub fn volume_scan_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_scan_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the volume was scanned or skipped. </p>
    pub fn set_volume_scan_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_scan_status = input;
        self
    }
    /// <p>Indicates whether the volume was scanned or skipped. </p>
    pub fn get_volume_scan_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_scan_status
    }
    /// Consumes the builder and constructs a [`AwsEc2VolumeDetails`](crate::types::AwsEc2VolumeDetails).
    pub fn build(self) -> crate::types::AwsEc2VolumeDetails {
        crate::types::AwsEc2VolumeDetails {
            create_time: self.create_time,
            device_name: self.device_name,
            encrypted: self.encrypted,
            size: self.size,
            snapshot_id: self.snapshot_id,
            status: self.status,
            kms_key_id: self.kms_key_id,
            attachments: self.attachments,
            volume_id: self.volume_id,
            volume_type: self.volume_type,
            volume_scan_status: self.volume_scan_status,
        }
    }
}
