// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource related to a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>The type of the resource that details are provided for. If possible, set <code>Type</code> to one of the supported resource types. For example, if the resource is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
    /// <p>If the resource does not match any of the provided types, then set <code>Type</code> to <code>Other</code>. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The canonical identifier for the given resource type.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    #[doc(hidden)]
    pub partition: std::option::Option<crate::types::Partition>,
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
    #[doc(hidden)]
    pub resource_role: std::option::Option<std::string::String>,
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Contains information about sensitive data that was detected on the resource.</p>
    #[doc(hidden)]
    pub data_classification: std::option::Option<crate::types::DataClassificationDetails>,
    /// <p>Additional details about the resource related to a finding.</p>
    #[doc(hidden)]
    pub details: std::option::Option<crate::types::ResourceDetails>,
}
impl Resource {
    /// <p>The type of the resource that details are provided for. If possible, set <code>Type</code> to one of the supported resource types. For example, if the resource is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
    /// <p>If the resource does not match any of the provided types, then set <code>Type</code> to <code>Other</code>. </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn partition(&self) -> std::option::Option<&crate::types::Partition> {
        self.partition.as_ref()
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
    pub fn resource_role(&self) -> std::option::Option<&str> {
        self.resource_role.as_deref()
    }
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Contains information about sensitive data that was detected on the resource.</p>
    pub fn data_classification(
        &self,
    ) -> std::option::Option<&crate::types::DataClassificationDetails> {
        self.data_classification.as_ref()
    }
    /// <p>Additional details about the resource related to a finding.</p>
    pub fn details(&self) -> std::option::Option<&crate::types::ResourceDetails> {
        self.details.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) partition: std::option::Option<crate::types::Partition>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) resource_role: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) data_classification: std::option::Option<crate::types::DataClassificationDetails>,
    pub(crate) details: std::option::Option<crate::types::ResourceDetails>,
}
impl ResourceBuilder {
    /// <p>The type of the resource that details are provided for. If possible, set <code>Type</code> to one of the supported resource types. For example, if the resource is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
    /// <p>If the resource does not match any of the provided types, then set <code>Type</code> to <code>Other</code>. </p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the resource that details are provided for. If possible, set <code>Type</code> to one of the supported resource types. For example, if the resource is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
    /// <p>If the resource does not match any of the provided types, then set <code>Type</code> to <code>Other</code>. </p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn partition(mut self, input: crate::types::Partition) -> Self {
        self.partition = Some(input);
        self
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn set_partition(mut self, input: std::option::Option<crate::types::Partition>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
    pub fn resource_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_role = Some(input.into());
        self
    }
    /// <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
    pub fn set_resource_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_role = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Contains information about sensitive data that was detected on the resource.</p>
    pub fn data_classification(mut self, input: crate::types::DataClassificationDetails) -> Self {
        self.data_classification = Some(input);
        self
    }
    /// <p>Contains information about sensitive data that was detected on the resource.</p>
    pub fn set_data_classification(
        mut self,
        input: std::option::Option<crate::types::DataClassificationDetails>,
    ) -> Self {
        self.data_classification = input;
        self
    }
    /// <p>Additional details about the resource related to a finding.</p>
    pub fn details(mut self, input: crate::types::ResourceDetails) -> Self {
        self.details = Some(input);
        self
    }
    /// <p>Additional details about the resource related to a finding.</p>
    pub fn set_details(
        mut self,
        input: std::option::Option<crate::types::ResourceDetails>,
    ) -> Self {
        self.details = input;
        self
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            r#type: self.r#type,
            id: self.id,
            partition: self.partition,
            region: self.region,
            resource_role: self.resource_role,
            tags: self.tags,
            data_classification: self.data_classification,
            details: self.details,
        }
    }
}
