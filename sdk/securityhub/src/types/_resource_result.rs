// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides comprehensive details about an Amazon Web Services resource and its associated security findings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceResult {
    /// <p>The global identifier used to identify a resource.</p>
    pub resource_guid: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for a resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account that owns the resource.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the resource is located.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The grouping where the resource belongs.</p>
    pub resource_category: ::std::option::Option<crate::types::ResourceCategory>,
    /// <p>The type of resource.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the resource.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The time when the resource was created.</p>
    pub resource_creation_time_dt: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when information about the resource was captured.</p>
    pub resource_detail_capture_time_dt: ::std::option::Option<::std::string::String>,
    /// <p>An aggregated view of security findings associated with a resource.</p>
    pub findings_summary: ::std::option::Option<::std::vec::Vec<crate::types::ResourceFindingsSummary>>,
    /// <p>The key-value pairs associated with a resource.</p>
    pub resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>,
    /// <p>The configuration details of a resource.</p>
    pub resource_config: ::std::option::Option<::aws_smithy_types::Document>,
}
impl ResourceResult {
    /// <p>The global identifier used to identify a resource.</p>
    pub fn resource_guid(&self) -> ::std::option::Option<&str> {
        self.resource_guid.as_deref()
    }
    /// <p>The unique identifier for a resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The Amazon Web Services account that owns the resource.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the resource is located.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The grouping where the resource belongs.</p>
    pub fn resource_category(&self) -> ::std::option::Option<&crate::types::ResourceCategory> {
        self.resource_category.as_ref()
    }
    /// <p>The type of resource.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The name of the resource.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The time when the resource was created.</p>
    pub fn resource_creation_time_dt(&self) -> ::std::option::Option<&str> {
        self.resource_creation_time_dt.as_deref()
    }
    /// <p>The timestamp when information about the resource was captured.</p>
    pub fn resource_detail_capture_time_dt(&self) -> ::std::option::Option<&str> {
        self.resource_detail_capture_time_dt.as_deref()
    }
    /// <p>An aggregated view of security findings associated with a resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.findings_summary.is_none()`.
    pub fn findings_summary(&self) -> &[crate::types::ResourceFindingsSummary] {
        self.findings_summary.as_deref().unwrap_or_default()
    }
    /// <p>The key-value pairs associated with a resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_tags.is_none()`.
    pub fn resource_tags(&self) -> &[crate::types::ResourceTag] {
        self.resource_tags.as_deref().unwrap_or_default()
    }
    /// <p>The configuration details of a resource.</p>
    pub fn resource_config(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.resource_config.as_ref()
    }
}
impl ResourceResult {
    /// Creates a new builder-style object to manufacture [`ResourceResult`](crate::types::ResourceResult).
    pub fn builder() -> crate::types::builders::ResourceResultBuilder {
        crate::types::builders::ResourceResultBuilder::default()
    }
}

/// A builder for [`ResourceResult`](crate::types::ResourceResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceResultBuilder {
    pub(crate) resource_guid: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_category: ::std::option::Option<crate::types::ResourceCategory>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_creation_time_dt: ::std::option::Option<::std::string::String>,
    pub(crate) resource_detail_capture_time_dt: ::std::option::Option<::std::string::String>,
    pub(crate) findings_summary: ::std::option::Option<::std::vec::Vec<crate::types::ResourceFindingsSummary>>,
    pub(crate) resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>,
    pub(crate) resource_config: ::std::option::Option<::aws_smithy_types::Document>,
}
impl ResourceResultBuilder {
    /// <p>The global identifier used to identify a resource.</p>
    pub fn resource_guid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_guid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The global identifier used to identify a resource.</p>
    pub fn set_resource_guid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_guid = input;
        self
    }
    /// <p>The global identifier used to identify a resource.</p>
    pub fn get_resource_guid(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_guid
    }
    /// <p>The unique identifier for a resource.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The unique identifier for a resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The Amazon Web Services account that owns the resource.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that owns the resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account that owns the resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Amazon Web Services Region where the resource is located.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the resource is located.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the resource is located.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The grouping where the resource belongs.</p>
    pub fn resource_category(mut self, input: crate::types::ResourceCategory) -> Self {
        self.resource_category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The grouping where the resource belongs.</p>
    pub fn set_resource_category(mut self, input: ::std::option::Option<crate::types::ResourceCategory>) -> Self {
        self.resource_category = input;
        self
    }
    /// <p>The grouping where the resource belongs.</p>
    pub fn get_resource_category(&self) -> &::std::option::Option<crate::types::ResourceCategory> {
        &self.resource_category
    }
    /// <p>The type of resource.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The name of the resource.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The time when the resource was created.</p>
    pub fn resource_creation_time_dt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_creation_time_dt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the resource was created.</p>
    pub fn set_resource_creation_time_dt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_creation_time_dt = input;
        self
    }
    /// <p>The time when the resource was created.</p>
    pub fn get_resource_creation_time_dt(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_creation_time_dt
    }
    /// <p>The timestamp when information about the resource was captured.</p>
    /// This field is required.
    pub fn resource_detail_capture_time_dt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_detail_capture_time_dt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when information about the resource was captured.</p>
    pub fn set_resource_detail_capture_time_dt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_detail_capture_time_dt = input;
        self
    }
    /// <p>The timestamp when information about the resource was captured.</p>
    pub fn get_resource_detail_capture_time_dt(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_detail_capture_time_dt
    }
    /// Appends an item to `findings_summary`.
    ///
    /// To override the contents of this collection use [`set_findings_summary`](Self::set_findings_summary).
    ///
    /// <p>An aggregated view of security findings associated with a resource.</p>
    pub fn findings_summary(mut self, input: crate::types::ResourceFindingsSummary) -> Self {
        let mut v = self.findings_summary.unwrap_or_default();
        v.push(input);
        self.findings_summary = ::std::option::Option::Some(v);
        self
    }
    /// <p>An aggregated view of security findings associated with a resource.</p>
    pub fn set_findings_summary(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceFindingsSummary>>) -> Self {
        self.findings_summary = input;
        self
    }
    /// <p>An aggregated view of security findings associated with a resource.</p>
    pub fn get_findings_summary(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceFindingsSummary>> {
        &self.findings_summary
    }
    /// Appends an item to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>The key-value pairs associated with a resource.</p>
    pub fn resource_tags(mut self, input: crate::types::ResourceTag) -> Self {
        let mut v = self.resource_tags.unwrap_or_default();
        v.push(input);
        self.resource_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key-value pairs associated with a resource.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>The key-value pairs associated with a resource.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>> {
        &self.resource_tags
    }
    /// <p>The configuration details of a resource.</p>
    /// This field is required.
    pub fn resource_config(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.resource_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of a resource.</p>
    pub fn set_resource_config(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.resource_config = input;
        self
    }
    /// <p>The configuration details of a resource.</p>
    pub fn get_resource_config(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.resource_config
    }
    /// Consumes the builder and constructs a [`ResourceResult`](crate::types::ResourceResult).
    pub fn build(self) -> crate::types::ResourceResult {
        crate::types::ResourceResult {
            resource_guid: self.resource_guid,
            resource_id: self.resource_id,
            account_id: self.account_id,
            region: self.region,
            resource_category: self.resource_category,
            resource_type: self.resource_type,
            resource_name: self.resource_name,
            resource_creation_time_dt: self.resource_creation_time_dt,
            resource_detail_capture_time_dt: self.resource_detail_capture_time_dt,
            findings_summary: self.findings_summary,
            resource_tags: self.resource_tags,
            resource_config: self.resource_config,
        }
    }
}
