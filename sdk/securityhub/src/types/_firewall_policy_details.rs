// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the behavior of the firewall.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FirewallPolicyDetails {
    /// <p>The stateful rule groups that are used in the firewall policy.</p>
    #[doc(hidden)]
    pub stateful_rule_group_references: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatefulRuleGroupReferencesDetails>,
    >,
    /// <p>The custom action definitions that are available to use in the firewall policy's <code>StatelessDefaultActions</code> setting.</p>
    #[doc(hidden)]
    pub stateless_custom_actions: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatelessCustomActionsDetails>,
    >,
    /// <p>The actions to take on a packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    #[doc(hidden)]
    pub stateless_default_actions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    #[doc(hidden)]
    pub stateless_fragment_default_actions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The stateless rule groups that are used in the firewall policy.</p>
    #[doc(hidden)]
    pub stateless_rule_group_references: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatelessRuleGroupReferencesDetails>,
    >,
}
impl FirewallPolicyDetails {
    /// <p>The stateful rule groups that are used in the firewall policy.</p>
    pub fn stateful_rule_group_references(
        &self,
    ) -> std::option::Option<&[crate::types::FirewallPolicyStatefulRuleGroupReferencesDetails]>
    {
        self.stateful_rule_group_references.as_deref()
    }
    /// <p>The custom action definitions that are available to use in the firewall policy's <code>StatelessDefaultActions</code> setting.</p>
    pub fn stateless_custom_actions(
        &self,
    ) -> std::option::Option<&[crate::types::FirewallPolicyStatelessCustomActionsDetails]> {
        self.stateless_custom_actions.as_deref()
    }
    /// <p>The actions to take on a packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn stateless_default_actions(&self) -> std::option::Option<&[std::string::String]> {
        self.stateless_default_actions.as_deref()
    }
    /// <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn stateless_fragment_default_actions(
        &self,
    ) -> std::option::Option<&[std::string::String]> {
        self.stateless_fragment_default_actions.as_deref()
    }
    /// <p>The stateless rule groups that are used in the firewall policy.</p>
    pub fn stateless_rule_group_references(
        &self,
    ) -> std::option::Option<&[crate::types::FirewallPolicyStatelessRuleGroupReferencesDetails]>
    {
        self.stateless_rule_group_references.as_deref()
    }
}
impl FirewallPolicyDetails {
    /// Creates a new builder-style object to manufacture [`FirewallPolicyDetails`](crate::types::FirewallPolicyDetails).
    pub fn builder() -> crate::types::builders::FirewallPolicyDetailsBuilder {
        crate::types::builders::FirewallPolicyDetailsBuilder::default()
    }
}

/// A builder for [`FirewallPolicyDetails`](crate::types::FirewallPolicyDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FirewallPolicyDetailsBuilder {
    pub(crate) stateful_rule_group_references: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatefulRuleGroupReferencesDetails>,
    >,
    pub(crate) stateless_custom_actions: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatelessCustomActionsDetails>,
    >,
    pub(crate) stateless_default_actions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) stateless_fragment_default_actions:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) stateless_rule_group_references: std::option::Option<
        std::vec::Vec<crate::types::FirewallPolicyStatelessRuleGroupReferencesDetails>,
    >,
}
impl FirewallPolicyDetailsBuilder {
    /// Appends an item to `stateful_rule_group_references`.
    ///
    /// To override the contents of this collection use [`set_stateful_rule_group_references`](Self::set_stateful_rule_group_references).
    ///
    /// <p>The stateful rule groups that are used in the firewall policy.</p>
    pub fn stateful_rule_group_references(
        mut self,
        input: crate::types::FirewallPolicyStatefulRuleGroupReferencesDetails,
    ) -> Self {
        let mut v = self.stateful_rule_group_references.unwrap_or_default();
        v.push(input);
        self.stateful_rule_group_references = Some(v);
        self
    }
    /// <p>The stateful rule groups that are used in the firewall policy.</p>
    pub fn set_stateful_rule_group_references(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::FirewallPolicyStatefulRuleGroupReferencesDetails>,
        >,
    ) -> Self {
        self.stateful_rule_group_references = input;
        self
    }
    /// Appends an item to `stateless_custom_actions`.
    ///
    /// To override the contents of this collection use [`set_stateless_custom_actions`](Self::set_stateless_custom_actions).
    ///
    /// <p>The custom action definitions that are available to use in the firewall policy's <code>StatelessDefaultActions</code> setting.</p>
    pub fn stateless_custom_actions(
        mut self,
        input: crate::types::FirewallPolicyStatelessCustomActionsDetails,
    ) -> Self {
        let mut v = self.stateless_custom_actions.unwrap_or_default();
        v.push(input);
        self.stateless_custom_actions = Some(v);
        self
    }
    /// <p>The custom action definitions that are available to use in the firewall policy's <code>StatelessDefaultActions</code> setting.</p>
    pub fn set_stateless_custom_actions(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::FirewallPolicyStatelessCustomActionsDetails>,
        >,
    ) -> Self {
        self.stateless_custom_actions = input;
        self
    }
    /// Appends an item to `stateless_default_actions`.
    ///
    /// To override the contents of this collection use [`set_stateless_default_actions`](Self::set_stateless_default_actions).
    ///
    /// <p>The actions to take on a packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn stateless_default_actions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.stateless_default_actions.unwrap_or_default();
        v.push(input.into());
        self.stateless_default_actions = Some(v);
        self
    }
    /// <p>The actions to take on a packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn set_stateless_default_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.stateless_default_actions = input;
        self
    }
    /// Appends an item to `stateless_fragment_default_actions`.
    ///
    /// To override the contents of this collection use [`set_stateless_fragment_default_actions`](Self::set_stateless_fragment_default_actions).
    ///
    /// <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn stateless_fragment_default_actions(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.stateless_fragment_default_actions.unwrap_or_default();
        v.push(input.into());
        self.stateless_fragment_default_actions = Some(v);
        self
    }
    /// <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy.</p>
    /// <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>. </p>
    pub fn set_stateless_fragment_default_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.stateless_fragment_default_actions = input;
        self
    }
    /// Appends an item to `stateless_rule_group_references`.
    ///
    /// To override the contents of this collection use [`set_stateless_rule_group_references`](Self::set_stateless_rule_group_references).
    ///
    /// <p>The stateless rule groups that are used in the firewall policy.</p>
    pub fn stateless_rule_group_references(
        mut self,
        input: crate::types::FirewallPolicyStatelessRuleGroupReferencesDetails,
    ) -> Self {
        let mut v = self.stateless_rule_group_references.unwrap_or_default();
        v.push(input);
        self.stateless_rule_group_references = Some(v);
        self
    }
    /// <p>The stateless rule groups that are used in the firewall policy.</p>
    pub fn set_stateless_rule_group_references(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::FirewallPolicyStatelessRuleGroupReferencesDetails>,
        >,
    ) -> Self {
        self.stateless_rule_group_references = input;
        self
    }
    /// Consumes the builder and constructs a [`FirewallPolicyDetails`](crate::types::FirewallPolicyDetails).
    pub fn build(self) -> crate::types::FirewallPolicyDetails {
        crate::types::FirewallPolicyDetails {
            stateful_rule_group_references: self.stateful_rule_group_references,
            stateless_custom_actions: self.stateless_custom_actions,
            stateless_default_actions: self.stateless_default_actions,
            stateless_fragment_default_actions: self.stateless_fragment_default_actions,
            stateless_rule_group_references: self.stateless_rule_group_references,
        }
    }
}
