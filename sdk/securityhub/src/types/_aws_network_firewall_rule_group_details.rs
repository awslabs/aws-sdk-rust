// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Network Firewall rule group. Rule groups are used to inspect and control network traffic. Stateless rule groups apply to individual packets. Stateful rule groups apply to packets in the context of their traffic flow.</p>
/// <p>Rule groups are referenced in firewall policies. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsNetworkFirewallRuleGroupDetails {
    /// <p>The maximum number of operating resources that this rule group can use.</p>
    #[doc(hidden)]
    pub capacity: i32,
    /// <p>A description of the rule group.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Details about the rule group.</p>
    #[doc(hidden)]
    pub rule_group: std::option::Option<crate::types::RuleGroupDetails>,
    /// <p>The ARN of the rule group.</p>
    #[doc(hidden)]
    pub rule_group_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the rule group.</p>
    #[doc(hidden)]
    pub rule_group_id: std::option::Option<std::string::String>,
    /// <p>The descriptive name of the rule group.</p>
    #[doc(hidden)]
    pub rule_group_name: std::option::Option<std::string::String>,
    /// <p>The type of rule group. A rule group can be stateful or stateless.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl AwsNetworkFirewallRuleGroupDetails {
    /// <p>The maximum number of operating resources that this rule group can use.</p>
    pub fn capacity(&self) -> i32 {
        self.capacity
    }
    /// <p>A description of the rule group.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Details about the rule group.</p>
    pub fn rule_group(&self) -> std::option::Option<&crate::types::RuleGroupDetails> {
        self.rule_group.as_ref()
    }
    /// <p>The ARN of the rule group.</p>
    pub fn rule_group_arn(&self) -> std::option::Option<&str> {
        self.rule_group_arn.as_deref()
    }
    /// <p>The identifier of the rule group.</p>
    pub fn rule_group_id(&self) -> std::option::Option<&str> {
        self.rule_group_id.as_deref()
    }
    /// <p>The descriptive name of the rule group.</p>
    pub fn rule_group_name(&self) -> std::option::Option<&str> {
        self.rule_group_name.as_deref()
    }
    /// <p>The type of rule group. A rule group can be stateful or stateless.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsNetworkFirewallRuleGroupDetails {
    /// Creates a new builder-style object to manufacture [`AwsNetworkFirewallRuleGroupDetails`](crate::types::AwsNetworkFirewallRuleGroupDetails).
    pub fn builder() -> crate::types::builders::AwsNetworkFirewallRuleGroupDetailsBuilder {
        crate::types::builders::AwsNetworkFirewallRuleGroupDetailsBuilder::default()
    }
}

/// A builder for [`AwsNetworkFirewallRuleGroupDetails`](crate::types::AwsNetworkFirewallRuleGroupDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsNetworkFirewallRuleGroupDetailsBuilder {
    pub(crate) capacity: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) rule_group: std::option::Option<crate::types::RuleGroupDetails>,
    pub(crate) rule_group_arn: std::option::Option<std::string::String>,
    pub(crate) rule_group_id: std::option::Option<std::string::String>,
    pub(crate) rule_group_name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl AwsNetworkFirewallRuleGroupDetailsBuilder {
    /// <p>The maximum number of operating resources that this rule group can use.</p>
    pub fn capacity(mut self, input: i32) -> Self {
        self.capacity = Some(input);
        self
    }
    /// <p>The maximum number of operating resources that this rule group can use.</p>
    pub fn set_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>A description of the rule group.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the rule group.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Details about the rule group.</p>
    pub fn rule_group(mut self, input: crate::types::RuleGroupDetails) -> Self {
        self.rule_group = Some(input);
        self
    }
    /// <p>Details about the rule group.</p>
    pub fn set_rule_group(
        mut self,
        input: std::option::Option<crate::types::RuleGroupDetails>,
    ) -> Self {
        self.rule_group = input;
        self
    }
    /// <p>The ARN of the rule group.</p>
    pub fn rule_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_group_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the rule group.</p>
    pub fn set_rule_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_group_arn = input;
        self
    }
    /// <p>The identifier of the rule group.</p>
    pub fn rule_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_group_id = Some(input.into());
        self
    }
    /// <p>The identifier of the rule group.</p>
    pub fn set_rule_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_group_id = input;
        self
    }
    /// <p>The descriptive name of the rule group.</p>
    pub fn rule_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_group_name = Some(input.into());
        self
    }
    /// <p>The descriptive name of the rule group.</p>
    pub fn set_rule_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_group_name = input;
        self
    }
    /// <p>The type of rule group. A rule group can be stateful or stateless.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of rule group. A rule group can be stateful or stateless.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsNetworkFirewallRuleGroupDetails`](crate::types::AwsNetworkFirewallRuleGroupDetails).
    pub fn build(self) -> crate::types::AwsNetworkFirewallRuleGroupDetails {
        crate::types::AwsNetworkFirewallRuleGroupDetails {
            capacity: self.capacity.unwrap_or_default(),
            description: self.description,
            rule_group: self.rule_group,
            rule_group_arn: self.rule_group_arn,
            rule_group_id: self.rule_group_id,
            rule_group_name: self.rule_group_name,
            r#type: self.r#type,
        }
    }
}
