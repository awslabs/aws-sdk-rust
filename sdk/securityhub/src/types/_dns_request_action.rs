// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provided if <code>ActionType</code> is <code>DNS_REQUEST</code>. It provides details about the DNS request that was detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DnsRequestAction {
    /// <p>The DNS domain that is associated with the DNS request.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The protocol that was used for the DNS request.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>Indicates whether the DNS request was blocked.</p>
    #[doc(hidden)]
    pub blocked: bool,
}
impl DnsRequestAction {
    /// <p>The DNS domain that is associated with the DNS request.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The protocol that was used for the DNS request.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>Indicates whether the DNS request was blocked.</p>
    pub fn blocked(&self) -> bool {
        self.blocked
    }
}
impl DnsRequestAction {
    /// Creates a new builder-style object to manufacture [`DnsRequestAction`](crate::types::DnsRequestAction).
    pub fn builder() -> crate::types::builders::DnsRequestActionBuilder {
        crate::types::builders::DnsRequestActionBuilder::default()
    }
}

/// A builder for [`DnsRequestAction`](crate::types::DnsRequestAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DnsRequestActionBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) blocked: std::option::Option<bool>,
}
impl DnsRequestActionBuilder {
    /// <p>The DNS domain that is associated with the DNS request.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The DNS domain that is associated with the DNS request.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The protocol that was used for the DNS request.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol that was used for the DNS request.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>Indicates whether the DNS request was blocked.</p>
    pub fn blocked(mut self, input: bool) -> Self {
        self.blocked = Some(input);
        self
    }
    /// <p>Indicates whether the DNS request was blocked.</p>
    pub fn set_blocked(mut self, input: std::option::Option<bool>) -> Self {
        self.blocked = input;
        self
    }
    /// Consumes the builder and constructs a [`DnsRequestAction`](crate::types::DnsRequestAction).
    pub fn build(self) -> crate::types::DnsRequestAction {
        crate::types::DnsRequestAction {
            domain: self.domain,
            protocol: self.protocol,
            blocked: self.blocked.unwrap_or_default(),
        }
    }
}
