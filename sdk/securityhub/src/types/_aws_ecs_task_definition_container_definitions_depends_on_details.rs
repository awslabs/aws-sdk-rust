// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A dependency that is defined for container startup and shutdown.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
    /// <p>The dependency condition of the dependent container. Indicates the required status of the dependent container before the current container can start. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETE</code> </p> </li>
    /// <li> <p> <code>HEALTHY</code> </p> </li>
    /// <li> <p> <code>SUCCESS</code> </p> </li>
    /// <li> <p> <code>START</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub condition: std::option::Option<std::string::String>,
    /// <p>The name of the dependent container.</p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
    /// <p>The dependency condition of the dependent container. Indicates the required status of the dependent container before the current container can start. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETE</code> </p> </li>
    /// <li> <p> <code>HEALTHY</code> </p> </li>
    /// <li> <p> <code>SUCCESS</code> </p> </li>
    /// <li> <p> <code>START</code> </p> </li>
    /// </ul>
    pub fn condition(&self) -> std::option::Option<&str> {
        self.condition.as_deref()
    }
    /// <p>The name of the dependent container.</p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
}
impl AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsBuilder
    {
        crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsBuilder {
    pub(crate) condition: std::option::Option<std::string::String>,
    pub(crate) container_name: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsBuilder {
    /// <p>The dependency condition of the dependent container. Indicates the required status of the dependent container before the current container can start. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETE</code> </p> </li>
    /// <li> <p> <code>HEALTHY</code> </p> </li>
    /// <li> <p> <code>SUCCESS</code> </p> </li>
    /// <li> <p> <code>START</code> </p> </li>
    /// </ul>
    pub fn condition(mut self, input: impl Into<std::string::String>) -> Self {
        self.condition = Some(input.into());
        self
    }
    /// <p>The dependency condition of the dependent container. Indicates the required status of the dependent container before the current container can start. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETE</code> </p> </li>
    /// <li> <p> <code>HEALTHY</code> </p> </li>
    /// <li> <p> <code>SUCCESS</code> </p> </li>
    /// <li> <p> <code>START</code> </p> </li>
    /// </ul>
    pub fn set_condition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The name of the dependent container.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p>The name of the dependent container.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails).
    pub fn build(self) -> crate::types::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
        crate::types::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
            condition: self.condition,
            container_name: self.container_name,
        }
    }
}
