// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an WAF Regional rule. This rule identifies the web requests that you want to allow, block, or count. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsWafRegionalRuleDetails {
    /// <p>A name for the metrics for the rule. </p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>A descriptive name for the rule. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings. </p>
    pub predicate_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafRegionalRulePredicateListDetails>>,
    /// <p>The ID of the rule. </p>
    pub rule_id: ::std::option::Option<::std::string::String>,
}
impl AwsWafRegionalRuleDetails {
    /// <p>A name for the metrics for the rule. </p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>A descriptive name for the rule. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.predicate_list.is_none()`.
    pub fn predicate_list(&self) -> &[crate::types::AwsWafRegionalRulePredicateListDetails] {
        self.predicate_list.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the rule. </p>
    pub fn rule_id(&self) -> ::std::option::Option<&str> {
        self.rule_id.as_deref()
    }
}
impl AwsWafRegionalRuleDetails {
    /// Creates a new builder-style object to manufacture [`AwsWafRegionalRuleDetails`](crate::types::AwsWafRegionalRuleDetails).
    pub fn builder() -> crate::types::builders::AwsWafRegionalRuleDetailsBuilder {
        crate::types::builders::AwsWafRegionalRuleDetailsBuilder::default()
    }
}

/// A builder for [`AwsWafRegionalRuleDetails`](crate::types::AwsWafRegionalRuleDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsWafRegionalRuleDetailsBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) predicate_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafRegionalRulePredicateListDetails>>,
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
}
impl AwsWafRegionalRuleDetailsBuilder {
    /// <p>A name for the metrics for the rule. </p>
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the metrics for the rule. </p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>A name for the metrics for the rule. </p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>A descriptive name for the rule. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive name for the rule. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive name for the rule. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `predicate_list`.
    ///
    /// To override the contents of this collection use [`set_predicate_list`](Self::set_predicate_list).
    ///
    /// <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings. </p>
    pub fn predicate_list(mut self, input: crate::types::AwsWafRegionalRulePredicateListDetails) -> Self {
        let mut v = self.predicate_list.unwrap_or_default();
        v.push(input);
        self.predicate_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings. </p>
    pub fn set_predicate_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsWafRegionalRulePredicateListDetails>>) -> Self {
        self.predicate_list = input;
        self
    }
    /// <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings. </p>
    pub fn get_predicate_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsWafRegionalRulePredicateListDetails>> {
        &self.predicate_list
    }
    /// <p>The ID of the rule. </p>
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the rule. </p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The ID of the rule. </p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// Consumes the builder and constructs a [`AwsWafRegionalRuleDetails`](crate::types::AwsWafRegionalRuleDetails).
    pub fn build(self) -> crate::types::AwsWafRegionalRuleDetails {
        crate::types::AwsWafRegionalRuleDetails {
            metric_name: self.metric_name,
            name: self.name,
            predicate_list: self.predicate_list,
            rule_id: self.rule_id,
        }
    }
}
