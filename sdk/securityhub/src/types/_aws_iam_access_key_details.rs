// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>IAM access key details related to a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsIamAccessKeyDetails {
    /// <p>The user associated with the IAM access key related to a finding.</p>
    /// <p>The <code>UserName</code> parameter has been replaced with the <code>PrincipalName</code> parameter because access keys can also be assigned to principals that are not IAM users.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use PrincipalName.")]
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The status of the IAM access key related to a finding.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AwsIamAccessKeyStatus>,
    /// <p>Indicates when the IAM access key was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>The ID of the principal associated with an access key.</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The type of principal associated with an access key.</p>
    #[doc(hidden)]
    pub principal_type: std::option::Option<std::string::String>,
    /// <p>The name of the principal.</p>
    #[doc(hidden)]
    pub principal_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the account for the key.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the access key.</p>
    #[doc(hidden)]
    pub access_key_id: std::option::Option<std::string::String>,
    /// <p>Information about the session that the key was used for.</p>
    #[doc(hidden)]
    pub session_context: std::option::Option<crate::types::AwsIamAccessKeySessionContext>,
}
impl AwsIamAccessKeyDetails {
    /// <p>The user associated with the IAM access key related to a finding.</p>
    /// <p>The <code>UserName</code> parameter has been replaced with the <code>PrincipalName</code> parameter because access keys can also be assigned to principals that are not IAM users.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use PrincipalName.")]
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AwsIamAccessKeyStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates when the IAM access key was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The ID of the principal associated with an access key.</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The type of principal associated with an access key.</p>
    pub fn principal_type(&self) -> std::option::Option<&str> {
        self.principal_type.as_deref()
    }
    /// <p>The name of the principal.</p>
    pub fn principal_name(&self) -> std::option::Option<&str> {
        self.principal_name.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the account for the key.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The identifier of the access key.</p>
    pub fn access_key_id(&self) -> std::option::Option<&str> {
        self.access_key_id.as_deref()
    }
    /// <p>Information about the session that the key was used for.</p>
    pub fn session_context(
        &self,
    ) -> std::option::Option<&crate::types::AwsIamAccessKeySessionContext> {
        self.session_context.as_ref()
    }
}
impl AwsIamAccessKeyDetails {
    /// Creates a new builder-style object to manufacture [`AwsIamAccessKeyDetails`](crate::types::AwsIamAccessKeyDetails).
    pub fn builder() -> crate::types::builders::AwsIamAccessKeyDetailsBuilder {
        crate::types::builders::AwsIamAccessKeyDetailsBuilder::default()
    }
}

/// A builder for [`AwsIamAccessKeyDetails`](crate::types::AwsIamAccessKeyDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsIamAccessKeyDetailsBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AwsIamAccessKeyStatus>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) principal_type: std::option::Option<std::string::String>,
    pub(crate) principal_name: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) access_key_id: std::option::Option<std::string::String>,
    pub(crate) session_context: std::option::Option<crate::types::AwsIamAccessKeySessionContext>,
}
impl AwsIamAccessKeyDetailsBuilder {
    /// <p>The user associated with the IAM access key related to a finding.</p>
    /// <p>The <code>UserName</code> parameter has been replaced with the <code>PrincipalName</code> parameter because access keys can also be assigned to principals that are not IAM users.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use PrincipalName.")]
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The user associated with the IAM access key related to a finding.</p>
    /// <p>The <code>UserName</code> parameter has been replaced with the <code>PrincipalName</code> parameter because access keys can also be assigned to principals that are not IAM users.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use PrincipalName.")]
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn status(mut self, input: crate::types::AwsIamAccessKeyStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AwsIamAccessKeyStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates when the IAM access key was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>Indicates when the IAM access key was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ID of the principal associated with an access key.</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The ID of the principal associated with an access key.</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The type of principal associated with an access key.</p>
    pub fn principal_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_type = Some(input.into());
        self
    }
    /// <p>The type of principal associated with an access key.</p>
    pub fn set_principal_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The name of the principal.</p>
    pub fn principal_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_name = Some(input.into());
        self
    }
    /// <p>The name of the principal.</p>
    pub fn set_principal_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_name = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the account for the key.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the account for the key.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The identifier of the access key.</p>
    pub fn access_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_key_id = Some(input.into());
        self
    }
    /// <p>The identifier of the access key.</p>
    pub fn set_access_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_key_id = input;
        self
    }
    /// <p>Information about the session that the key was used for.</p>
    pub fn session_context(mut self, input: crate::types::AwsIamAccessKeySessionContext) -> Self {
        self.session_context = Some(input);
        self
    }
    /// <p>Information about the session that the key was used for.</p>
    pub fn set_session_context(
        mut self,
        input: std::option::Option<crate::types::AwsIamAccessKeySessionContext>,
    ) -> Self {
        self.session_context = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsIamAccessKeyDetails`](crate::types::AwsIamAccessKeyDetails).
    pub fn build(self) -> crate::types::AwsIamAccessKeyDetails {
        crate::types::AwsIamAccessKeyDetails {
            user_name: self.user_name,
            status: self.status,
            created_at: self.created_at,
            principal_id: self.principal_id,
            principal_type: self.principal_type,
            principal_name: self.principal_name,
            account_id: self.account_id,
            access_key_id: self.access_key_id,
            session_context: self.session_context,
        }
    }
}
