// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about an auto scaling group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAutoScalingAutoScalingGroupDetails {
    /// <p>The name of the launch configuration.</p>
    pub launch_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of load balancers associated with the group.</p>
    pub load_balancer_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The service to use for the health checks. Valid values are <code>EC2</code> or <code>ELB</code>.</p>
    pub health_check_type: ::std::option::Option<::std::string::String>,
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the health status of an EC2 instance that has come into service.</p>
    pub health_check_grace_period: ::std::option::Option<i32>,
    /// <p>Indicates when the auto scaling group was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub created_time: ::std::option::Option<::std::string::String>,
    /// <p>The mixed instances policy for the automatic scaling group.</p>
    pub mixed_instances_policy: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails>,
    /// <p>The list of Availability Zones for the automatic scaling group.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails>>,
    /// <p>The launch template to use.</p>
    pub launch_template: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification>,
    /// <p>Indicates whether capacity rebalancing is enabled. </p>
    pub capacity_rebalance: ::std::option::Option<bool>,
}
impl AwsAutoScalingAutoScalingGroupDetails {
    /// <p>The name of the launch configuration.</p>
    pub fn launch_configuration_name(&self) -> ::std::option::Option<&str> {
        self.launch_configuration_name.as_deref()
    }
    /// <p>The list of load balancers associated with the group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_balancer_names.is_none()`.
    pub fn load_balancer_names(&self) -> &[::std::string::String] {
        self.load_balancer_names.as_deref().unwrap_or_default()
    }
    /// <p>The service to use for the health checks. Valid values are <code>EC2</code> or <code>ELB</code>.</p>
    pub fn health_check_type(&self) -> ::std::option::Option<&str> {
        self.health_check_type.as_deref()
    }
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the health status of an EC2 instance that has come into service.</p>
    pub fn health_check_grace_period(&self) -> ::std::option::Option<i32> {
        self.health_check_grace_period
    }
    /// <p>Indicates when the auto scaling group was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_time(&self) -> ::std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The mixed instances policy for the automatic scaling group.</p>
    pub fn mixed_instances_policy(&self) -> ::std::option::Option<&crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails> {
        self.mixed_instances_policy.as_ref()
    }
    /// <p>The list of Availability Zones for the automatic scaling group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The launch template to use.</p>
    pub fn launch_template(&self) -> ::std::option::Option<&crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification> {
        self.launch_template.as_ref()
    }
    /// <p>Indicates whether capacity rebalancing is enabled. </p>
    pub fn capacity_rebalance(&self) -> ::std::option::Option<bool> {
        self.capacity_rebalance
    }
}
impl AwsAutoScalingAutoScalingGroupDetails {
    /// Creates a new builder-style object to manufacture [`AwsAutoScalingAutoScalingGroupDetails`](crate::types::AwsAutoScalingAutoScalingGroupDetails).
    pub fn builder() -> crate::types::builders::AwsAutoScalingAutoScalingGroupDetailsBuilder {
        crate::types::builders::AwsAutoScalingAutoScalingGroupDetailsBuilder::default()
    }
}

/// A builder for [`AwsAutoScalingAutoScalingGroupDetails`](crate::types::AwsAutoScalingAutoScalingGroupDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAutoScalingAutoScalingGroupDetailsBuilder {
    pub(crate) launch_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) load_balancer_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) health_check_type: ::std::option::Option<::std::string::String>,
    pub(crate) health_check_grace_period: ::std::option::Option<i32>,
    pub(crate) created_time: ::std::option::Option<::std::string::String>,
    pub(crate) mixed_instances_policy: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails>>,
    pub(crate) launch_template: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification>,
    pub(crate) capacity_rebalance: ::std::option::Option<bool>,
}
impl AwsAutoScalingAutoScalingGroupDetailsBuilder {
    /// <p>The name of the launch configuration.</p>
    pub fn launch_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the launch configuration.</p>
    pub fn set_launch_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_configuration_name = input;
        self
    }
    /// <p>The name of the launch configuration.</p>
    pub fn get_launch_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_configuration_name
    }
    /// Appends an item to `load_balancer_names`.
    ///
    /// To override the contents of this collection use [`set_load_balancer_names`](Self::set_load_balancer_names).
    ///
    /// <p>The list of load balancers associated with the group.</p>
    pub fn load_balancer_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.load_balancer_names.unwrap_or_default();
        v.push(input.into());
        self.load_balancer_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of load balancers associated with the group.</p>
    pub fn set_load_balancer_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.load_balancer_names = input;
        self
    }
    /// <p>The list of load balancers associated with the group.</p>
    pub fn get_load_balancer_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.load_balancer_names
    }
    /// <p>The service to use for the health checks. Valid values are <code>EC2</code> or <code>ELB</code>.</p>
    pub fn health_check_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.health_check_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service to use for the health checks. Valid values are <code>EC2</code> or <code>ELB</code>.</p>
    pub fn set_health_check_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.health_check_type = input;
        self
    }
    /// <p>The service to use for the health checks. Valid values are <code>EC2</code> or <code>ELB</code>.</p>
    pub fn get_health_check_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.health_check_type
    }
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the health status of an EC2 instance that has come into service.</p>
    pub fn health_check_grace_period(mut self, input: i32) -> Self {
        self.health_check_grace_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the health status of an EC2 instance that has come into service.</p>
    pub fn set_health_check_grace_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.health_check_grace_period = input;
        self
    }
    /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the health status of an EC2 instance that has come into service.</p>
    pub fn get_health_check_grace_period(&self) -> &::std::option::Option<i32> {
        &self.health_check_grace_period
    }
    /// <p>Indicates when the auto scaling group was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the auto scaling group was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>Indicates when the auto scaling group was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_time
    }
    /// <p>The mixed instances policy for the automatic scaling group.</p>
    pub fn mixed_instances_policy(mut self, input: crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails) -> Self {
        self.mixed_instances_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mixed instances policy for the automatic scaling group.</p>
    pub fn set_mixed_instances_policy(
        mut self,
        input: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails>,
    ) -> Self {
        self.mixed_instances_policy = input;
        self
    }
    /// <p>The mixed instances policy for the automatic scaling group.</p>
    pub fn get_mixed_instances_policy(&self) -> &::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails> {
        &self.mixed_instances_policy
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The list of Availability Zones for the automatic scaling group.</p>
    pub fn availability_zones(mut self, input: crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input);
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Availability Zones for the automatic scaling group.</p>
    pub fn set_availability_zones(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>The list of Availability Zones for the automatic scaling group.</p>
    pub fn get_availability_zones(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails>> {
        &self.availability_zones
    }
    /// <p>The launch template to use.</p>
    pub fn launch_template(mut self, input: crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification) -> Self {
        self.launch_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch template to use.</p>
    pub fn set_launch_template(
        mut self,
        input: ::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification>,
    ) -> Self {
        self.launch_template = input;
        self
    }
    /// <p>The launch template to use.</p>
    pub fn get_launch_template(
        &self,
    ) -> &::std::option::Option<crate::types::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification> {
        &self.launch_template
    }
    /// <p>Indicates whether capacity rebalancing is enabled. </p>
    pub fn capacity_rebalance(mut self, input: bool) -> Self {
        self.capacity_rebalance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether capacity rebalancing is enabled. </p>
    pub fn set_capacity_rebalance(mut self, input: ::std::option::Option<bool>) -> Self {
        self.capacity_rebalance = input;
        self
    }
    /// <p>Indicates whether capacity rebalancing is enabled. </p>
    pub fn get_capacity_rebalance(&self) -> &::std::option::Option<bool> {
        &self.capacity_rebalance
    }
    /// Consumes the builder and constructs a [`AwsAutoScalingAutoScalingGroupDetails`](crate::types::AwsAutoScalingAutoScalingGroupDetails).
    pub fn build(self) -> crate::types::AwsAutoScalingAutoScalingGroupDetails {
        crate::types::AwsAutoScalingAutoScalingGroupDetails {
            launch_configuration_name: self.launch_configuration_name,
            load_balancer_names: self.load_balancer_names,
            health_check_type: self.health_check_type,
            health_check_grace_period: self.health_check_grace_period,
            created_time: self.created_time,
            mixed_instances_policy: self.mixed_instances_policy,
            availability_zones: self.availability_zones,
            launch_template: self.launch_template,
            capacity_rebalance: self.capacity_rebalance,
        }
    }
}
