// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a block device mapping for an Amazon Elastic Compute Cloud (Amazon EC2) launch template. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails {
    /// <p> The device name. </p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p> Parameters used to automatically set up Amazon EBS volumes when the instance is launched. </p>
    #[doc(hidden)]
    pub ebs:
        std::option::Option<crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails>,
    /// <p> Omits the device from the block device mapping when an empty string is specified. </p>
    #[doc(hidden)]
    pub no_device: std::option::Option<std::string::String>,
    /// <p> The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. </p>
    #[doc(hidden)]
    pub virtual_name: std::option::Option<std::string::String>,
}
impl AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails {
    /// <p> The device name. </p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p> Parameters used to automatically set up Amazon EBS volumes when the instance is launched. </p>
    pub fn ebs(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails>
    {
        self.ebs.as_ref()
    }
    /// <p> Omits the device from the block device mapping when an empty string is specified. </p>
    pub fn no_device(&self) -> std::option::Option<&str> {
        self.no_device.as_deref()
    }
    /// <p> The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. </p>
    pub fn virtual_name(&self) -> std::option::Option<&str> {
        self.virtual_name.as_deref()
    }
}
impl AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails`](crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsBuilder {
        crate::types::builders::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsBuilder::default(
        )
    }
}

/// A builder for [`AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails`](crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) ebs:
        std::option::Option<crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails>,
    pub(crate) no_device: std::option::Option<std::string::String>,
    pub(crate) virtual_name: std::option::Option<std::string::String>,
}
impl AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsBuilder {
    /// <p> The device name. </p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p> The device name. </p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p> Parameters used to automatically set up Amazon EBS volumes when the instance is launched. </p>
    pub fn ebs(
        mut self,
        input: crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails,
    ) -> Self {
        self.ebs = Some(input);
        self
    }
    /// <p> Parameters used to automatically set up Amazon EBS volumes when the instance is launched. </p>
    pub fn set_ebs(
        mut self,
        input: std::option::Option<
            crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails,
        >,
    ) -> Self {
        self.ebs = input;
        self
    }
    /// <p> Omits the device from the block device mapping when an empty string is specified. </p>
    pub fn no_device(mut self, input: impl Into<std::string::String>) -> Self {
        self.no_device = Some(input.into());
        self
    }
    /// <p> Omits the device from the block device mapping when an empty string is specified. </p>
    pub fn set_no_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.no_device = input;
        self
    }
    /// <p> The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. </p>
    pub fn virtual_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_name = Some(input.into());
        self
    }
    /// <p> The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. </p>
    pub fn set_virtual_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.virtual_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails`](crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails).
    pub fn build(self) -> crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails {
        crate::types::AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails {
            device_name: self.device_name,
            ebs: self.ebs,
            no_device: self.no_device,
            virtual_name: self.virtual_name,
        }
    }
}
