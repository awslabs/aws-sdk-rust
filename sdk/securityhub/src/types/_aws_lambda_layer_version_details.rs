// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a Lambda layer version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsLambdaLayerVersionDetails {
    /// <p>The version number.</p>
    pub version: ::std::option::Option<i64>,
    /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
    /// <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> | <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> | <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> | <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> | <code>provided</code> </p>
    pub compatible_runtimes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub created_date: ::std::option::Option<::std::string::String>,
}
impl AwsLambdaLayerVersionDetails {
    /// <p>The version number.</p>
    pub fn version(&self) -> ::std::option::Option<i64> {
        self.version
    }
    /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
    /// <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> | <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> | <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> | <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> | <code>provided</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compatible_runtimes.is_none()`.
    pub fn compatible_runtimes(&self) -> &[::std::string::String] {
        self.compatible_runtimes.as_deref().unwrap_or_default()
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(&self) -> ::std::option::Option<&str> {
        self.created_date.as_deref()
    }
}
impl AwsLambdaLayerVersionDetails {
    /// Creates a new builder-style object to manufacture [`AwsLambdaLayerVersionDetails`](crate::types::AwsLambdaLayerVersionDetails).
    pub fn builder() -> crate::types::builders::AwsLambdaLayerVersionDetailsBuilder {
        crate::types::builders::AwsLambdaLayerVersionDetailsBuilder::default()
    }
}

/// A builder for [`AwsLambdaLayerVersionDetails`](crate::types::AwsLambdaLayerVersionDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsLambdaLayerVersionDetailsBuilder {
    pub(crate) version: ::std::option::Option<i64>,
    pub(crate) compatible_runtimes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_date: ::std::option::Option<::std::string::String>,
}
impl AwsLambdaLayerVersionDetailsBuilder {
    /// <p>The version number.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number.</p>
    pub fn get_version(&self) -> &::std::option::Option<i64> {
        &self.version
    }
    /// Appends an item to `compatible_runtimes`.
    ///
    /// To override the contents of this collection use [`set_compatible_runtimes`](Self::set_compatible_runtimes).
    ///
    /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
    /// <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> | <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> | <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> | <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> | <code>provided</code> </p>
    pub fn compatible_runtimes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.compatible_runtimes.unwrap_or_default();
        v.push(input.into());
        self.compatible_runtimes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
    /// <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> | <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> | <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> | <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> | <code>provided</code> </p>
    pub fn set_compatible_runtimes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.compatible_runtimes = input;
        self
    }
    /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
    /// <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> | <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> | <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> | <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> | <code>provided</code> </p>
    pub fn get_compatible_runtimes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.compatible_runtimes
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_date
    }
    /// Consumes the builder and constructs a [`AwsLambdaLayerVersionDetails`](crate::types::AwsLambdaLayerVersionDetails).
    pub fn build(self) -> crate::types::AwsLambdaLayerVersionDetails {
        crate::types::AwsLambdaLayerVersionDetails {
            version: self.version,
            compatible_runtimes: self.compatible_runtimes,
            created_date: self.created_date,
        }
    }
}
