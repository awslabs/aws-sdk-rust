// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a service discovery registry to assign to the service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsServiceServiceRegistriesDetails {
    /// <p>The container name value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
    /// <p>The port value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    #[doc(hidden)]
    pub container_port: i32,
    /// <p>The port value to use for a service discovery service that specifies an SRV record. This field can be used if both the <code>awsvpc</code>awsvpc network mode and SRV records are used.</p>
    #[doc(hidden)]
    pub port: i32,
    /// <p>The ARN of the service registry.</p>
    #[doc(hidden)]
    pub registry_arn: std::option::Option<std::string::String>,
}
impl AwsEcsServiceServiceRegistriesDetails {
    /// <p>The container name value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The port value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn container_port(&self) -> i32 {
        self.container_port
    }
    /// <p>The port value to use for a service discovery service that specifies an SRV record. This field can be used if both the <code>awsvpc</code>awsvpc network mode and SRV records are used.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>The ARN of the service registry.</p>
    pub fn registry_arn(&self) -> std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
}
impl AwsEcsServiceServiceRegistriesDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsServiceServiceRegistriesDetails`](crate::types::AwsEcsServiceServiceRegistriesDetails).
    pub fn builder() -> crate::types::builders::AwsEcsServiceServiceRegistriesDetailsBuilder {
        crate::types::builders::AwsEcsServiceServiceRegistriesDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsServiceServiceRegistriesDetails`](crate::types::AwsEcsServiceServiceRegistriesDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsServiceServiceRegistriesDetailsBuilder {
    pub(crate) container_name: std::option::Option<std::string::String>,
    pub(crate) container_port: std::option::Option<i32>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) registry_arn: std::option::Option<std::string::String>,
}
impl AwsEcsServiceServiceRegistriesDetailsBuilder {
    /// <p>The container name value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p>The container name value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The port value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn container_port(mut self, input: i32) -> Self {
        self.container_port = Some(input);
        self
    }
    /// <p>The port value to use for the service discovery service.</p>
    /// <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
    /// <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
    pub fn set_container_port(mut self, input: std::option::Option<i32>) -> Self {
        self.container_port = input;
        self
    }
    /// <p>The port value to use for a service discovery service that specifies an SRV record. This field can be used if both the <code>awsvpc</code>awsvpc network mode and SRV records are used.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port value to use for a service discovery service that specifies an SRV record. This field can be used if both the <code>awsvpc</code>awsvpc network mode and SRV records are used.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The ARN of the service registry.</p>
    pub fn registry_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the service registry.</p>
    pub fn set_registry_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsServiceServiceRegistriesDetails`](crate::types::AwsEcsServiceServiceRegistriesDetails).
    pub fn build(self) -> crate::types::AwsEcsServiceServiceRegistriesDetails {
        crate::types::AwsEcsServiceServiceRegistriesDetails {
            container_name: self.container_name,
            container_port: self.container_port.unwrap_or_default(),
            port: self.port.unwrap_or_default(),
            registry_arn: self.registry_arn,
        }
    }
}
