// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about a DynamoDB table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsDynamoDbTableDetails {
    /// <p>A list of attribute definitions for the table.</p>
    pub attribute_definitions: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableAttributeDefinition>>,
    /// <p>Information about the billing for read/write capacity on the table.</p>
    pub billing_mode_summary: ::std::option::Option<crate::types::AwsDynamoDbTableBillingModeSummary>,
    /// <p>Indicates when the table was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub creation_date_time: ::std::option::Option<::std::string::String>,
    /// <p>List of global secondary indexes for the table.</p>
    pub global_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableGlobalSecondaryIndex>>,
    /// <p>The version of global tables being used.</p>
    pub global_table_version: ::std::option::Option<::std::string::String>,
    /// <p>The number of items in the table.</p>
    pub item_count: ::std::option::Option<i32>,
    /// <p>The primary key structure for the table.</p>
    pub key_schema: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableKeySchema>>,
    /// <p>The ARN of the latest stream for the table.</p>
    pub latest_stream_arn: ::std::option::Option<::std::string::String>,
    /// <p>The label of the latest stream. The label is not a unique identifier.</p>
    pub latest_stream_label: ::std::option::Option<::std::string::String>,
    /// <p>The list of local secondary indexes for the table.</p>
    pub local_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableLocalSecondaryIndex>>,
    /// <p>Information about the provisioned throughput for the table.</p>
    pub provisioned_throughput: ::std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughput>,
    /// <p>The list of replicas of this table.</p>
    pub replicas: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableReplica>>,
    /// <p>Information about the restore for the table.</p>
    pub restore_summary: ::std::option::Option<crate::types::AwsDynamoDbTableRestoreSummary>,
    /// <p>Information about the server-side encryption for the table.</p>
    pub sse_description: ::std::option::Option<crate::types::AwsDynamoDbTableSseDescription>,
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    pub stream_specification: ::std::option::Option<crate::types::AwsDynamoDbTableStreamSpecification>,
    /// <p>The identifier of the table.</p>
    pub table_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The total size of the table in bytes.</p>
    pub table_size_bytes: ::std::option::Option<i64>,
    /// <p>The current status of the table. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ARCHIVED</code> </p> </li>
    /// <li> <p> <code>ARCHIVING</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub table_status: ::std::option::Option<::std::string::String>,
}
impl AwsDynamoDbTableDetails {
    /// <p>A list of attribute definitions for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_definitions.is_none()`.
    pub fn attribute_definitions(&self) -> &[crate::types::AwsDynamoDbTableAttributeDefinition] {
        self.attribute_definitions.as_deref().unwrap_or_default()
    }
    /// <p>Information about the billing for read/write capacity on the table.</p>
    pub fn billing_mode_summary(&self) -> ::std::option::Option<&crate::types::AwsDynamoDbTableBillingModeSummary> {
        self.billing_mode_summary.as_ref()
    }
    /// <p>Indicates when the table was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&str> {
        self.creation_date_time.as_deref()
    }
    /// <p>List of global secondary indexes for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_secondary_indexes.is_none()`.
    pub fn global_secondary_indexes(&self) -> &[crate::types::AwsDynamoDbTableGlobalSecondaryIndex] {
        self.global_secondary_indexes.as_deref().unwrap_or_default()
    }
    /// <p>The version of global tables being used.</p>
    pub fn global_table_version(&self) -> ::std::option::Option<&str> {
        self.global_table_version.as_deref()
    }
    /// <p>The number of items in the table.</p>
    pub fn item_count(&self) -> ::std::option::Option<i32> {
        self.item_count
    }
    /// <p>The primary key structure for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.key_schema.is_none()`.
    pub fn key_schema(&self) -> &[crate::types::AwsDynamoDbTableKeySchema] {
        self.key_schema.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the latest stream for the table.</p>
    pub fn latest_stream_arn(&self) -> ::std::option::Option<&str> {
        self.latest_stream_arn.as_deref()
    }
    /// <p>The label of the latest stream. The label is not a unique identifier.</p>
    pub fn latest_stream_label(&self) -> ::std::option::Option<&str> {
        self.latest_stream_label.as_deref()
    }
    /// <p>The list of local secondary indexes for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_secondary_indexes.is_none()`.
    pub fn local_secondary_indexes(&self) -> &[crate::types::AwsDynamoDbTableLocalSecondaryIndex] {
        self.local_secondary_indexes.as_deref().unwrap_or_default()
    }
    /// <p>Information about the provisioned throughput for the table.</p>
    pub fn provisioned_throughput(&self) -> ::std::option::Option<&crate::types::AwsDynamoDbTableProvisionedThroughput> {
        self.provisioned_throughput.as_ref()
    }
    /// <p>The list of replicas of this table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replicas.is_none()`.
    pub fn replicas(&self) -> &[crate::types::AwsDynamoDbTableReplica] {
        self.replicas.as_deref().unwrap_or_default()
    }
    /// <p>Information about the restore for the table.</p>
    pub fn restore_summary(&self) -> ::std::option::Option<&crate::types::AwsDynamoDbTableRestoreSummary> {
        self.restore_summary.as_ref()
    }
    /// <p>Information about the server-side encryption for the table.</p>
    pub fn sse_description(&self) -> ::std::option::Option<&crate::types::AwsDynamoDbTableSseDescription> {
        self.sse_description.as_ref()
    }
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    pub fn stream_specification(&self) -> ::std::option::Option<&crate::types::AwsDynamoDbTableStreamSpecification> {
        self.stream_specification.as_ref()
    }
    /// <p>The identifier of the table.</p>
    pub fn table_id(&self) -> ::std::option::Option<&str> {
        self.table_id.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The total size of the table in bytes.</p>
    pub fn table_size_bytes(&self) -> ::std::option::Option<i64> {
        self.table_size_bytes
    }
    /// <p>The current status of the table. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ARCHIVED</code> </p> </li>
    /// <li> <p> <code>ARCHIVING</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn table_status(&self) -> ::std::option::Option<&str> {
        self.table_status.as_deref()
    }
}
impl AwsDynamoDbTableDetails {
    /// Creates a new builder-style object to manufacture [`AwsDynamoDbTableDetails`](crate::types::AwsDynamoDbTableDetails).
    pub fn builder() -> crate::types::builders::AwsDynamoDbTableDetailsBuilder {
        crate::types::builders::AwsDynamoDbTableDetailsBuilder::default()
    }
}

/// A builder for [`AwsDynamoDbTableDetails`](crate::types::AwsDynamoDbTableDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsDynamoDbTableDetailsBuilder {
    pub(crate) attribute_definitions: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableAttributeDefinition>>,
    pub(crate) billing_mode_summary: ::std::option::Option<crate::types::AwsDynamoDbTableBillingModeSummary>,
    pub(crate) creation_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) global_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableGlobalSecondaryIndex>>,
    pub(crate) global_table_version: ::std::option::Option<::std::string::String>,
    pub(crate) item_count: ::std::option::Option<i32>,
    pub(crate) key_schema: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableKeySchema>>,
    pub(crate) latest_stream_arn: ::std::option::Option<::std::string::String>,
    pub(crate) latest_stream_label: ::std::option::Option<::std::string::String>,
    pub(crate) local_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableLocalSecondaryIndex>>,
    pub(crate) provisioned_throughput: ::std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughput>,
    pub(crate) replicas: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableReplica>>,
    pub(crate) restore_summary: ::std::option::Option<crate::types::AwsDynamoDbTableRestoreSummary>,
    pub(crate) sse_description: ::std::option::Option<crate::types::AwsDynamoDbTableSseDescription>,
    pub(crate) stream_specification: ::std::option::Option<crate::types::AwsDynamoDbTableStreamSpecification>,
    pub(crate) table_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_size_bytes: ::std::option::Option<i64>,
    pub(crate) table_status: ::std::option::Option<::std::string::String>,
}
impl AwsDynamoDbTableDetailsBuilder {
    /// Appends an item to `attribute_definitions`.
    ///
    /// To override the contents of this collection use [`set_attribute_definitions`](Self::set_attribute_definitions).
    ///
    /// <p>A list of attribute definitions for the table.</p>
    pub fn attribute_definitions(mut self, input: crate::types::AwsDynamoDbTableAttributeDefinition) -> Self {
        let mut v = self.attribute_definitions.unwrap_or_default();
        v.push(input);
        self.attribute_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of attribute definitions for the table.</p>
    pub fn set_attribute_definitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableAttributeDefinition>>,
    ) -> Self {
        self.attribute_definitions = input;
        self
    }
    /// <p>A list of attribute definitions for the table.</p>
    pub fn get_attribute_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableAttributeDefinition>> {
        &self.attribute_definitions
    }
    /// <p>Information about the billing for read/write capacity on the table.</p>
    pub fn billing_mode_summary(mut self, input: crate::types::AwsDynamoDbTableBillingModeSummary) -> Self {
        self.billing_mode_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the billing for read/write capacity on the table.</p>
    pub fn set_billing_mode_summary(mut self, input: ::std::option::Option<crate::types::AwsDynamoDbTableBillingModeSummary>) -> Self {
        self.billing_mode_summary = input;
        self
    }
    /// <p>Information about the billing for read/write capacity on the table.</p>
    pub fn get_billing_mode_summary(&self) -> &::std::option::Option<crate::types::AwsDynamoDbTableBillingModeSummary> {
        &self.billing_mode_summary
    }
    /// <p>Indicates when the table was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn creation_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the table was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>Indicates when the table was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date_time
    }
    /// Appends an item to `global_secondary_indexes`.
    ///
    /// To override the contents of this collection use [`set_global_secondary_indexes`](Self::set_global_secondary_indexes).
    ///
    /// <p>List of global secondary indexes for the table.</p>
    pub fn global_secondary_indexes(mut self, input: crate::types::AwsDynamoDbTableGlobalSecondaryIndex) -> Self {
        let mut v = self.global_secondary_indexes.unwrap_or_default();
        v.push(input);
        self.global_secondary_indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of global secondary indexes for the table.</p>
    pub fn set_global_secondary_indexes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableGlobalSecondaryIndex>>,
    ) -> Self {
        self.global_secondary_indexes = input;
        self
    }
    /// <p>List of global secondary indexes for the table.</p>
    pub fn get_global_secondary_indexes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableGlobalSecondaryIndex>> {
        &self.global_secondary_indexes
    }
    /// <p>The version of global tables being used.</p>
    pub fn global_table_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_table_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of global tables being used.</p>
    pub fn set_global_table_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_table_version = input;
        self
    }
    /// <p>The version of global tables being used.</p>
    pub fn get_global_table_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_table_version
    }
    /// <p>The number of items in the table.</p>
    pub fn item_count(mut self, input: i32) -> Self {
        self.item_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of items in the table.</p>
    pub fn set_item_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>The number of items in the table.</p>
    pub fn get_item_count(&self) -> &::std::option::Option<i32> {
        &self.item_count
    }
    /// Appends an item to `key_schema`.
    ///
    /// To override the contents of this collection use [`set_key_schema`](Self::set_key_schema).
    ///
    /// <p>The primary key structure for the table.</p>
    pub fn key_schema(mut self, input: crate::types::AwsDynamoDbTableKeySchema) -> Self {
        let mut v = self.key_schema.unwrap_or_default();
        v.push(input);
        self.key_schema = ::std::option::Option::Some(v);
        self
    }
    /// <p>The primary key structure for the table.</p>
    pub fn set_key_schema(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableKeySchema>>) -> Self {
        self.key_schema = input;
        self
    }
    /// <p>The primary key structure for the table.</p>
    pub fn get_key_schema(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableKeySchema>> {
        &self.key_schema
    }
    /// <p>The ARN of the latest stream for the table.</p>
    pub fn latest_stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the latest stream for the table.</p>
    pub fn set_latest_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_stream_arn = input;
        self
    }
    /// <p>The ARN of the latest stream for the table.</p>
    pub fn get_latest_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_stream_arn
    }
    /// <p>The label of the latest stream. The label is not a unique identifier.</p>
    pub fn latest_stream_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_stream_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The label of the latest stream. The label is not a unique identifier.</p>
    pub fn set_latest_stream_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_stream_label = input;
        self
    }
    /// <p>The label of the latest stream. The label is not a unique identifier.</p>
    pub fn get_latest_stream_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_stream_label
    }
    /// Appends an item to `local_secondary_indexes`.
    ///
    /// To override the contents of this collection use [`set_local_secondary_indexes`](Self::set_local_secondary_indexes).
    ///
    /// <p>The list of local secondary indexes for the table.</p>
    pub fn local_secondary_indexes(mut self, input: crate::types::AwsDynamoDbTableLocalSecondaryIndex) -> Self {
        let mut v = self.local_secondary_indexes.unwrap_or_default();
        v.push(input);
        self.local_secondary_indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of local secondary indexes for the table.</p>
    pub fn set_local_secondary_indexes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableLocalSecondaryIndex>>,
    ) -> Self {
        self.local_secondary_indexes = input;
        self
    }
    /// <p>The list of local secondary indexes for the table.</p>
    pub fn get_local_secondary_indexes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableLocalSecondaryIndex>> {
        &self.local_secondary_indexes
    }
    /// <p>Information about the provisioned throughput for the table.</p>
    pub fn provisioned_throughput(mut self, input: crate::types::AwsDynamoDbTableProvisionedThroughput) -> Self {
        self.provisioned_throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the provisioned throughput for the table.</p>
    pub fn set_provisioned_throughput(mut self, input: ::std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughput>) -> Self {
        self.provisioned_throughput = input;
        self
    }
    /// <p>Information about the provisioned throughput for the table.</p>
    pub fn get_provisioned_throughput(&self) -> &::std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughput> {
        &self.provisioned_throughput
    }
    /// Appends an item to `replicas`.
    ///
    /// To override the contents of this collection use [`set_replicas`](Self::set_replicas).
    ///
    /// <p>The list of replicas of this table.</p>
    pub fn replicas(mut self, input: crate::types::AwsDynamoDbTableReplica) -> Self {
        let mut v = self.replicas.unwrap_or_default();
        v.push(input);
        self.replicas = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of replicas of this table.</p>
    pub fn set_replicas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableReplica>>) -> Self {
        self.replicas = input;
        self
    }
    /// <p>The list of replicas of this table.</p>
    pub fn get_replicas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsDynamoDbTableReplica>> {
        &self.replicas
    }
    /// <p>Information about the restore for the table.</p>
    pub fn restore_summary(mut self, input: crate::types::AwsDynamoDbTableRestoreSummary) -> Self {
        self.restore_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the restore for the table.</p>
    pub fn set_restore_summary(mut self, input: ::std::option::Option<crate::types::AwsDynamoDbTableRestoreSummary>) -> Self {
        self.restore_summary = input;
        self
    }
    /// <p>Information about the restore for the table.</p>
    pub fn get_restore_summary(&self) -> &::std::option::Option<crate::types::AwsDynamoDbTableRestoreSummary> {
        &self.restore_summary
    }
    /// <p>Information about the server-side encryption for the table.</p>
    pub fn sse_description(mut self, input: crate::types::AwsDynamoDbTableSseDescription) -> Self {
        self.sse_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the server-side encryption for the table.</p>
    pub fn set_sse_description(mut self, input: ::std::option::Option<crate::types::AwsDynamoDbTableSseDescription>) -> Self {
        self.sse_description = input;
        self
    }
    /// <p>Information about the server-side encryption for the table.</p>
    pub fn get_sse_description(&self) -> &::std::option::Option<crate::types::AwsDynamoDbTableSseDescription> {
        &self.sse_description
    }
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    pub fn stream_specification(mut self, input: crate::types::AwsDynamoDbTableStreamSpecification) -> Self {
        self.stream_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    pub fn set_stream_specification(mut self, input: ::std::option::Option<crate::types::AwsDynamoDbTableStreamSpecification>) -> Self {
        self.stream_specification = input;
        self
    }
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    pub fn get_stream_specification(&self) -> &::std::option::Option<crate::types::AwsDynamoDbTableStreamSpecification> {
        &self.stream_specification
    }
    /// <p>The identifier of the table.</p>
    pub fn table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the table.</p>
    pub fn set_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_id = input;
        self
    }
    /// <p>The identifier of the table.</p>
    pub fn get_table_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_id
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The total size of the table in bytes.</p>
    pub fn table_size_bytes(mut self, input: i64) -> Self {
        self.table_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total size of the table in bytes.</p>
    pub fn set_table_size_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.table_size_bytes = input;
        self
    }
    /// <p>The total size of the table in bytes.</p>
    pub fn get_table_size_bytes(&self) -> &::std::option::Option<i64> {
        &self.table_size_bytes
    }
    /// <p>The current status of the table. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ARCHIVED</code> </p> </li>
    /// <li> <p> <code>ARCHIVING</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn table_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the table. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ARCHIVED</code> </p> </li>
    /// <li> <p> <code>ARCHIVING</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn set_table_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_status = input;
        self
    }
    /// <p>The current status of the table. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ARCHIVED</code> </p> </li>
    /// <li> <p> <code>ARCHIVING</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn get_table_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_status
    }
    /// Consumes the builder and constructs a [`AwsDynamoDbTableDetails`](crate::types::AwsDynamoDbTableDetails).
    pub fn build(self) -> crate::types::AwsDynamoDbTableDetails {
        crate::types::AwsDynamoDbTableDetails {
            attribute_definitions: self.attribute_definitions,
            billing_mode_summary: self.billing_mode_summary,
            creation_date_time: self.creation_date_time,
            global_secondary_indexes: self.global_secondary_indexes,
            global_table_version: self.global_table_version,
            item_count: self.item_count,
            key_schema: self.key_schema,
            latest_stream_arn: self.latest_stream_arn,
            latest_stream_label: self.latest_stream_label,
            local_secondary_indexes: self.local_secondary_indexes,
            provisioned_throughput: self.provisioned_throughput,
            replicas: self.replicas,
            restore_summary: self.restore_summary,
            sse_description: self.sse_description,
            stream_specification: self.stream_specification,
            table_id: self.table_id,
            table_name: self.table_name,
            table_size_bytes: self.table_size_bytes,
            table_status: self.table_status,
        }
    }
}
