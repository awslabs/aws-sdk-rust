// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for a volume mount point that's used in a container definition. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsMountPoint {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>. </p>
    #[doc(hidden)]
    pub source_volume: std::option::Option<std::string::String>,
    /// <p>The path on the container to mount the host volume at. </p>
    #[doc(hidden)]
    pub container_path: std::option::Option<std::string::String>,
}
impl AwsMountPoint {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>. </p>
    pub fn source_volume(&self) -> std::option::Option<&str> {
        self.source_volume.as_deref()
    }
    /// <p>The path on the container to mount the host volume at. </p>
    pub fn container_path(&self) -> std::option::Option<&str> {
        self.container_path.as_deref()
    }
}
impl AwsMountPoint {
    /// Creates a new builder-style object to manufacture [`AwsMountPoint`](crate::types::AwsMountPoint).
    pub fn builder() -> crate::types::builders::AwsMountPointBuilder {
        crate::types::builders::AwsMountPointBuilder::default()
    }
}

/// A builder for [`AwsMountPoint`](crate::types::AwsMountPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsMountPointBuilder {
    pub(crate) source_volume: std::option::Option<std::string::String>,
    pub(crate) container_path: std::option::Option<std::string::String>,
}
impl AwsMountPointBuilder {
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>. </p>
    pub fn source_volume(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_volume = Some(input.into());
        self
    }
    /// <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter of task definition <code>volume</code>. </p>
    pub fn set_source_volume(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_volume = input;
        self
    }
    /// <p>The path on the container to mount the host volume at. </p>
    pub fn container_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_path = Some(input.into());
        self
    }
    /// <p>The path on the container to mount the host volume at. </p>
    pub fn set_container_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_path = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsMountPoint`](crate::types::AwsMountPoint).
    pub fn build(self) -> crate::types::AwsMountPoint {
        crate::types::AwsMountPoint {
            source_volume: self.source_volume,
            container_path: self.container_path,
        }
    }
}
