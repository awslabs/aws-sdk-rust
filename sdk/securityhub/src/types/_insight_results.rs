// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The insight results returned by the <code>GetInsightResults</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InsightResults {
    /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub insight_arn: ::std::option::Option<::std::string::String>,
    /// <p>The attribute that the findings are grouped by for the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub group_by_attribute: ::std::option::Option<::std::string::String>,
    /// <p>The list of insight result values returned by the <code>GetInsightResults</code> operation.</p>
    pub result_values: ::std::option::Option<::std::vec::Vec<crate::types::InsightResultValue>>,
}
impl InsightResults {
    /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn insight_arn(&self) -> ::std::option::Option<&str> {
        self.insight_arn.as_deref()
    }
    /// <p>The attribute that the findings are grouped by for the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn group_by_attribute(&self) -> ::std::option::Option<&str> {
        self.group_by_attribute.as_deref()
    }
    /// <p>The list of insight result values returned by the <code>GetInsightResults</code> operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.result_values.is_none()`.
    pub fn result_values(&self) -> &[crate::types::InsightResultValue] {
        self.result_values.as_deref().unwrap_or_default()
    }
}
impl InsightResults {
    /// Creates a new builder-style object to manufacture [`InsightResults`](crate::types::InsightResults).
    pub fn builder() -> crate::types::builders::InsightResultsBuilder {
        crate::types::builders::InsightResultsBuilder::default()
    }
}

/// A builder for [`InsightResults`](crate::types::InsightResults).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InsightResultsBuilder {
    pub(crate) insight_arn: ::std::option::Option<::std::string::String>,
    pub(crate) group_by_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) result_values: ::std::option::Option<::std::vec::Vec<crate::types::InsightResultValue>>,
}
impl InsightResultsBuilder {
    /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    /// This field is required.
    pub fn insight_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.insight_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn set_insight_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.insight_arn = input;
        self
    }
    /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn get_insight_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.insight_arn
    }
    /// <p>The attribute that the findings are grouped by for the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    /// This field is required.
    pub fn group_by_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_by_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attribute that the findings are grouped by for the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn set_group_by_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_by_attribute = input;
        self
    }
    /// <p>The attribute that the findings are grouped by for the insight whose results are returned by the <code>GetInsightResults</code> operation.</p>
    pub fn get_group_by_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_by_attribute
    }
    /// Appends an item to `result_values`.
    ///
    /// To override the contents of this collection use [`set_result_values`](Self::set_result_values).
    ///
    /// <p>The list of insight result values returned by the <code>GetInsightResults</code> operation.</p>
    pub fn result_values(mut self, input: crate::types::InsightResultValue) -> Self {
        let mut v = self.result_values.unwrap_or_default();
        v.push(input);
        self.result_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of insight result values returned by the <code>GetInsightResults</code> operation.</p>
    pub fn set_result_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightResultValue>>) -> Self {
        self.result_values = input;
        self
    }
    /// <p>The list of insight result values returned by the <code>GetInsightResults</code> operation.</p>
    pub fn get_result_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightResultValue>> {
        &self.result_values
    }
    /// Consumes the builder and constructs a [`InsightResults`](crate::types::InsightResults).
    pub fn build(self) -> crate::types::InsightResults {
        crate::types::InsightResults {
            insight_arn: self.insight_arn,
            group_by_attribute: self.group_by_attribute,
            result_values: self.result_values,
        }
    }
}
