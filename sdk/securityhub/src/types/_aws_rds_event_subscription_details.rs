// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Amazon RDS event notification subscription. The subscription allows Amazon RDS to post events to an SNS topic.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsRdsEventSubscriptionDetails {
    /// <p>The identifier of the account that is associated with the event notification subscription.</p>
    #[doc(hidden)]
    pub cust_subscription_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the event notification subscription.</p>
    #[doc(hidden)]
    pub customer_aws_id: std::option::Option<std::string::String>,
    /// <p>Whether the event notification subscription is enabled.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The list of event categories for the event notification subscription.</p>
    #[doc(hidden)]
    pub event_categories_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ARN of the event notification subscription.</p>
    #[doc(hidden)]
    pub event_subscription_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the SNS topic to post the event notifications to.</p>
    #[doc(hidden)]
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>A list of source identifiers for the event notification subscription.</p>
    #[doc(hidden)]
    pub source_ids_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The source type for the event notification subscription.</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<std::string::String>,
    /// <p>The status of the event notification subscription.</p>
    /// <p>Valid values: <code>creating</code> | <code>modifying</code> | <code>deleting</code> | <code>active</code> | <code>no-permission</code> | <code>topic-not-exist</code> </p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The datetime when the event notification subscription was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub subscription_creation_time: std::option::Option<std::string::String>,
}
impl AwsRdsEventSubscriptionDetails {
    /// <p>The identifier of the account that is associated with the event notification subscription.</p>
    pub fn cust_subscription_id(&self) -> std::option::Option<&str> {
        self.cust_subscription_id.as_deref()
    }
    /// <p>The identifier of the event notification subscription.</p>
    pub fn customer_aws_id(&self) -> std::option::Option<&str> {
        self.customer_aws_id.as_deref()
    }
    /// <p>Whether the event notification subscription is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The list of event categories for the event notification subscription.</p>
    pub fn event_categories_list(&self) -> std::option::Option<&[std::string::String]> {
        self.event_categories_list.as_deref()
    }
    /// <p>The ARN of the event notification subscription.</p>
    pub fn event_subscription_arn(&self) -> std::option::Option<&str> {
        self.event_subscription_arn.as_deref()
    }
    /// <p>The ARN of the SNS topic to post the event notifications to.</p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>A list of source identifiers for the event notification subscription.</p>
    pub fn source_ids_list(&self) -> std::option::Option<&[std::string::String]> {
        self.source_ids_list.as_deref()
    }
    /// <p>The source type for the event notification subscription.</p>
    pub fn source_type(&self) -> std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p>The status of the event notification subscription.</p>
    /// <p>Valid values: <code>creating</code> | <code>modifying</code> | <code>deleting</code> | <code>active</code> | <code>no-permission</code> | <code>topic-not-exist</code> </p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The datetime when the event notification subscription was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn subscription_creation_time(&self) -> std::option::Option<&str> {
        self.subscription_creation_time.as_deref()
    }
}
impl AwsRdsEventSubscriptionDetails {
    /// Creates a new builder-style object to manufacture [`AwsRdsEventSubscriptionDetails`](crate::types::AwsRdsEventSubscriptionDetails).
    pub fn builder() -> crate::types::builders::AwsRdsEventSubscriptionDetailsBuilder {
        crate::types::builders::AwsRdsEventSubscriptionDetailsBuilder::default()
    }
}

/// A builder for [`AwsRdsEventSubscriptionDetails`](crate::types::AwsRdsEventSubscriptionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsRdsEventSubscriptionDetailsBuilder {
    pub(crate) cust_subscription_id: std::option::Option<std::string::String>,
    pub(crate) customer_aws_id: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) event_categories_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) event_subscription_arn: std::option::Option<std::string::String>,
    pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
    pub(crate) source_ids_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) source_type: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) subscription_creation_time: std::option::Option<std::string::String>,
}
impl AwsRdsEventSubscriptionDetailsBuilder {
    /// <p>The identifier of the account that is associated with the event notification subscription.</p>
    pub fn cust_subscription_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cust_subscription_id = Some(input.into());
        self
    }
    /// <p>The identifier of the account that is associated with the event notification subscription.</p>
    pub fn set_cust_subscription_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cust_subscription_id = input;
        self
    }
    /// <p>The identifier of the event notification subscription.</p>
    pub fn customer_aws_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_aws_id = Some(input.into());
        self
    }
    /// <p>The identifier of the event notification subscription.</p>
    pub fn set_customer_aws_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.customer_aws_id = input;
        self
    }
    /// <p>Whether the event notification subscription is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether the event notification subscription is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Appends an item to `event_categories_list`.
    ///
    /// To override the contents of this collection use [`set_event_categories_list`](Self::set_event_categories_list).
    ///
    /// <p>The list of event categories for the event notification subscription.</p>
    pub fn event_categories_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_categories_list.unwrap_or_default();
        v.push(input.into());
        self.event_categories_list = Some(v);
        self
    }
    /// <p>The list of event categories for the event notification subscription.</p>
    pub fn set_event_categories_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_categories_list = input;
        self
    }
    /// <p>The ARN of the event notification subscription.</p>
    pub fn event_subscription_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_subscription_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the event notification subscription.</p>
    pub fn set_event_subscription_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.event_subscription_arn = input;
        self
    }
    /// <p>The ARN of the SNS topic to post the event notifications to.</p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the SNS topic to post the event notifications to.</p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// Appends an item to `source_ids_list`.
    ///
    /// To override the contents of this collection use [`set_source_ids_list`](Self::set_source_ids_list).
    ///
    /// <p>A list of source identifiers for the event notification subscription.</p>
    pub fn source_ids_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_ids_list.unwrap_or_default();
        v.push(input.into());
        self.source_ids_list = Some(v);
        self
    }
    /// <p>A list of source identifiers for the event notification subscription.</p>
    pub fn set_source_ids_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_ids_list = input;
        self
    }
    /// <p>The source type for the event notification subscription.</p>
    pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_type = Some(input.into());
        self
    }
    /// <p>The source type for the event notification subscription.</p>
    pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The status of the event notification subscription.</p>
    /// <p>Valid values: <code>creating</code> | <code>modifying</code> | <code>deleting</code> | <code>active</code> | <code>no-permission</code> | <code>topic-not-exist</code> </p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the event notification subscription.</p>
    /// <p>Valid values: <code>creating</code> | <code>modifying</code> | <code>deleting</code> | <code>active</code> | <code>no-permission</code> | <code>topic-not-exist</code> </p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The datetime when the event notification subscription was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn subscription_creation_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.subscription_creation_time = Some(input.into());
        self
    }
    /// <p>The datetime when the event notification subscription was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_subscription_creation_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.subscription_creation_time = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsRdsEventSubscriptionDetails`](crate::types::AwsRdsEventSubscriptionDetails).
    pub fn build(self) -> crate::types::AwsRdsEventSubscriptionDetails {
        crate::types::AwsRdsEventSubscriptionDetails {
            cust_subscription_id: self.cust_subscription_id,
            customer_aws_id: self.customer_aws_id,
            enabled: self.enabled.unwrap_or_default(),
            event_categories_list: self.event_categories_list,
            event_subscription_arn: self.event_subscription_arn,
            sns_topic_arn: self.sns_topic_arn,
            source_ids_list: self.source_ids_list,
            source_type: self.source_type,
            status: self.status,
            subscription_creation_time: self.subscription_creation_time,
        }
    }
}
