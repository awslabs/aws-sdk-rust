// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a cross-Region snapshot copy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsRedshiftClusterClusterSnapshotCopyStatus {
    /// <p>The destination Region that snapshots are automatically copied to when cross-Region snapshot copy is enabled.</p>
    #[doc(hidden)]
    pub destination_region: std::option::Option<std::string::String>,
    /// <p>The number of days that manual snapshots are retained in the destination region after they are copied from a source region.</p>
    /// <p>If the value is <code>-1</code>, then the manual snapshot is retained indefinitely.</p>
    /// <p>Valid values: Either <code>-1</code> or an integer between 1 and 3,653</p>
    #[doc(hidden)]
    pub manual_snapshot_retention_period: i32,
    /// <p>The number of days to retain automated snapshots in the destination Region after they are copied from a source Region.</p>
    #[doc(hidden)]
    pub retention_period: i32,
    /// <p>The name of the snapshot copy grant.</p>
    #[doc(hidden)]
    pub snapshot_copy_grant_name: std::option::Option<std::string::String>,
}
impl AwsRedshiftClusterClusterSnapshotCopyStatus {
    /// <p>The destination Region that snapshots are automatically copied to when cross-Region snapshot copy is enabled.</p>
    pub fn destination_region(&self) -> std::option::Option<&str> {
        self.destination_region.as_deref()
    }
    /// <p>The number of days that manual snapshots are retained in the destination region after they are copied from a source region.</p>
    /// <p>If the value is <code>-1</code>, then the manual snapshot is retained indefinitely.</p>
    /// <p>Valid values: Either <code>-1</code> or an integer between 1 and 3,653</p>
    pub fn manual_snapshot_retention_period(&self) -> i32 {
        self.manual_snapshot_retention_period
    }
    /// <p>The number of days to retain automated snapshots in the destination Region after they are copied from a source Region.</p>
    pub fn retention_period(&self) -> i32 {
        self.retention_period
    }
    /// <p>The name of the snapshot copy grant.</p>
    pub fn snapshot_copy_grant_name(&self) -> std::option::Option<&str> {
        self.snapshot_copy_grant_name.as_deref()
    }
}
impl AwsRedshiftClusterClusterSnapshotCopyStatus {
    /// Creates a new builder-style object to manufacture [`AwsRedshiftClusterClusterSnapshotCopyStatus`](crate::types::AwsRedshiftClusterClusterSnapshotCopyStatus).
    pub fn builder() -> crate::types::builders::AwsRedshiftClusterClusterSnapshotCopyStatusBuilder {
        crate::types::builders::AwsRedshiftClusterClusterSnapshotCopyStatusBuilder::default()
    }
}

/// A builder for [`AwsRedshiftClusterClusterSnapshotCopyStatus`](crate::types::AwsRedshiftClusterClusterSnapshotCopyStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsRedshiftClusterClusterSnapshotCopyStatusBuilder {
    pub(crate) destination_region: std::option::Option<std::string::String>,
    pub(crate) manual_snapshot_retention_period: std::option::Option<i32>,
    pub(crate) retention_period: std::option::Option<i32>,
    pub(crate) snapshot_copy_grant_name: std::option::Option<std::string::String>,
}
impl AwsRedshiftClusterClusterSnapshotCopyStatusBuilder {
    /// <p>The destination Region that snapshots are automatically copied to when cross-Region snapshot copy is enabled.</p>
    pub fn destination_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_region = Some(input.into());
        self
    }
    /// <p>The destination Region that snapshots are automatically copied to when cross-Region snapshot copy is enabled.</p>
    pub fn set_destination_region(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_region = input;
        self
    }
    /// <p>The number of days that manual snapshots are retained in the destination region after they are copied from a source region.</p>
    /// <p>If the value is <code>-1</code>, then the manual snapshot is retained indefinitely.</p>
    /// <p>Valid values: Either <code>-1</code> or an integer between 1 and 3,653</p>
    pub fn manual_snapshot_retention_period(mut self, input: i32) -> Self {
        self.manual_snapshot_retention_period = Some(input);
        self
    }
    /// <p>The number of days that manual snapshots are retained in the destination region after they are copied from a source region.</p>
    /// <p>If the value is <code>-1</code>, then the manual snapshot is retained indefinitely.</p>
    /// <p>Valid values: Either <code>-1</code> or an integer between 1 and 3,653</p>
    pub fn set_manual_snapshot_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.manual_snapshot_retention_period = input;
        self
    }
    /// <p>The number of days to retain automated snapshots in the destination Region after they are copied from a source Region.</p>
    pub fn retention_period(mut self, input: i32) -> Self {
        self.retention_period = Some(input);
        self
    }
    /// <p>The number of days to retain automated snapshots in the destination Region after they are copied from a source Region.</p>
    pub fn set_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>The name of the snapshot copy grant.</p>
    pub fn snapshot_copy_grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_copy_grant_name = Some(input.into());
        self
    }
    /// <p>The name of the snapshot copy grant.</p>
    pub fn set_snapshot_copy_grant_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_copy_grant_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsRedshiftClusterClusterSnapshotCopyStatus`](crate::types::AwsRedshiftClusterClusterSnapshotCopyStatus).
    pub fn build(self) -> crate::types::AwsRedshiftClusterClusterSnapshotCopyStatus {
        crate::types::AwsRedshiftClusterClusterSnapshotCopyStatus {
            destination_region: self.destination_region,
            manual_snapshot_retention_period: self
                .manual_snapshot_retention_period
                .unwrap_or_default(),
            retention_period: self.retention_period.unwrap_or_default(),
            snapshot_copy_grant_name: self.snapshot_copy_grant_name,
        }
    }
}
