// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an Amazon Kinesis data stream. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsKinesisStreamDetails {
    /// <p>The name of the Kinesis stream. If you don't specify a name, CloudFront generates a unique physical ID and uses that ID for the stream name. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Kinesis data stream. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>When specified, enables or updates server-side encryption using an KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption. </p>
    #[doc(hidden)]
    pub stream_encryption:
        std::option::Option<crate::types::AwsKinesisStreamStreamEncryptionDetails>,
    /// <p>The number of shards that the stream uses. </p>
    #[doc(hidden)]
    pub shard_count: i32,
    /// <p>The number of hours for the data records that are stored in shards to remain accessible. </p>
    #[doc(hidden)]
    pub retention_period_hours: i32,
}
impl AwsKinesisStreamDetails {
    /// <p>The name of the Kinesis stream. If you don't specify a name, CloudFront generates a unique physical ID and uses that ID for the stream name. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Kinesis data stream. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>When specified, enables or updates server-side encryption using an KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption. </p>
    pub fn stream_encryption(
        &self,
    ) -> std::option::Option<&crate::types::AwsKinesisStreamStreamEncryptionDetails> {
        self.stream_encryption.as_ref()
    }
    /// <p>The number of shards that the stream uses. </p>
    pub fn shard_count(&self) -> i32 {
        self.shard_count
    }
    /// <p>The number of hours for the data records that are stored in shards to remain accessible. </p>
    pub fn retention_period_hours(&self) -> i32 {
        self.retention_period_hours
    }
}
impl AwsKinesisStreamDetails {
    /// Creates a new builder-style object to manufacture [`AwsKinesisStreamDetails`](crate::types::AwsKinesisStreamDetails).
    pub fn builder() -> crate::types::builders::AwsKinesisStreamDetailsBuilder {
        crate::types::builders::AwsKinesisStreamDetailsBuilder::default()
    }
}

/// A builder for [`AwsKinesisStreamDetails`](crate::types::AwsKinesisStreamDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsKinesisStreamDetailsBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) stream_encryption:
        std::option::Option<crate::types::AwsKinesisStreamStreamEncryptionDetails>,
    pub(crate) shard_count: std::option::Option<i32>,
    pub(crate) retention_period_hours: std::option::Option<i32>,
}
impl AwsKinesisStreamDetailsBuilder {
    /// <p>The name of the Kinesis stream. If you don't specify a name, CloudFront generates a unique physical ID and uses that ID for the stream name. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Kinesis stream. If you don't specify a name, CloudFront generates a unique physical ID and uses that ID for the stream name. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Kinesis data stream. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Kinesis data stream. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>When specified, enables or updates server-side encryption using an KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption. </p>
    pub fn stream_encryption(
        mut self,
        input: crate::types::AwsKinesisStreamStreamEncryptionDetails,
    ) -> Self {
        self.stream_encryption = Some(input);
        self
    }
    /// <p>When specified, enables or updates server-side encryption using an KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption. </p>
    pub fn set_stream_encryption(
        mut self,
        input: std::option::Option<crate::types::AwsKinesisStreamStreamEncryptionDetails>,
    ) -> Self {
        self.stream_encryption = input;
        self
    }
    /// <p>The number of shards that the stream uses. </p>
    pub fn shard_count(mut self, input: i32) -> Self {
        self.shard_count = Some(input);
        self
    }
    /// <p>The number of shards that the stream uses. </p>
    pub fn set_shard_count(mut self, input: std::option::Option<i32>) -> Self {
        self.shard_count = input;
        self
    }
    /// <p>The number of hours for the data records that are stored in shards to remain accessible. </p>
    pub fn retention_period_hours(mut self, input: i32) -> Self {
        self.retention_period_hours = Some(input);
        self
    }
    /// <p>The number of hours for the data records that are stored in shards to remain accessible. </p>
    pub fn set_retention_period_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.retention_period_hours = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsKinesisStreamDetails`](crate::types::AwsKinesisStreamDetails).
    pub fn build(self) -> crate::types::AwsKinesisStreamDetails {
        crate::types::AwsKinesisStreamDetails {
            name: self.name,
            arn: self.arn,
            stream_encryption: self.stream_encryption,
            shard_count: self.shard_count.unwrap_or_default(),
            retention_period_hours: self.retention_period_hours.unwrap_or_default(),
        }
    }
}
