// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `GroupByField`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let groupbyfield = unimplemented!();
/// match groupbyfield {
///     GroupByField::ActivityName => { /* ... */ },
///     GroupByField::ClassName => { /* ... */ },
///     GroupByField::CloudAccountName => { /* ... */ },
///     GroupByField::CloudAccountUid => { /* ... */ },
///     GroupByField::CloudProvider => { /* ... */ },
///     GroupByField::CloudRegion => { /* ... */ },
///     GroupByField::ComplianceAssessmentsName => { /* ... */ },
///     GroupByField::ComplianceControl => { /* ... */ },
///     GroupByField::ComplianceStandards => { /* ... */ },
///     GroupByField::ComplianceStatus => { /* ... */ },
///     GroupByField::FindingInfoAnalyticName => { /* ... */ },
///     GroupByField::FindingInfoTitle => { /* ... */ },
///     GroupByField::FindingInfoTypes => { /* ... */ },
///     GroupByField::MetadataProductName => { /* ... */ },
///     GroupByField::MetadataProductUid => { /* ... */ },
///     GroupByField::ResourcesType => { /* ... */ },
///     GroupByField::ResourcesUid => { /* ... */ },
///     GroupByField::Severity => { /* ... */ },
///     GroupByField::Status => { /* ... */ },
///     GroupByField::VulnerabilitiesAffectedPackagesName => { /* ... */ },
///     GroupByField::VulnerabilitiesFixCoverage => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `groupbyfield` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `GroupByField::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `GroupByField::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `GroupByField::NewFeature` is defined.
/// Specifically, when `groupbyfield` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `GroupByField::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum GroupByField {
    #[allow(missing_docs)] // documentation missing in model
    ActivityName,
    #[allow(missing_docs)] // documentation missing in model
    ClassName,
    #[allow(missing_docs)] // documentation missing in model
    CloudAccountName,
    #[allow(missing_docs)] // documentation missing in model
    CloudAccountUid,
    #[allow(missing_docs)] // documentation missing in model
    CloudProvider,
    #[allow(missing_docs)] // documentation missing in model
    CloudRegion,
    #[allow(missing_docs)] // documentation missing in model
    ComplianceAssessmentsName,
    #[allow(missing_docs)] // documentation missing in model
    ComplianceControl,
    #[allow(missing_docs)] // documentation missing in model
    ComplianceStandards,
    #[allow(missing_docs)] // documentation missing in model
    ComplianceStatus,
    #[allow(missing_docs)] // documentation missing in model
    FindingInfoAnalyticName,
    #[allow(missing_docs)] // documentation missing in model
    FindingInfoTitle,
    #[allow(missing_docs)] // documentation missing in model
    FindingInfoTypes,
    #[allow(missing_docs)] // documentation missing in model
    MetadataProductName,
    #[allow(missing_docs)] // documentation missing in model
    MetadataProductUid,
    #[allow(missing_docs)] // documentation missing in model
    ResourcesType,
    #[allow(missing_docs)] // documentation missing in model
    ResourcesUid,
    #[allow(missing_docs)] // documentation missing in model
    Severity,
    #[allow(missing_docs)] // documentation missing in model
    Status,
    #[allow(missing_docs)] // documentation missing in model
    VulnerabilitiesAffectedPackagesName,
    #[allow(missing_docs)] // documentation missing in model
    VulnerabilitiesFixCoverage,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for GroupByField {
    fn from(s: &str) -> Self {
        match s {
            "activity_name" => GroupByField::ActivityName,
            "class_name" => GroupByField::ClassName,
            "cloud.account.name" => GroupByField::CloudAccountName,
            "cloud.account.uid" => GroupByField::CloudAccountUid,
            "cloud.provider" => GroupByField::CloudProvider,
            "cloud.region" => GroupByField::CloudRegion,
            "compliance.assessments.name" => GroupByField::ComplianceAssessmentsName,
            "compliance.control" => GroupByField::ComplianceControl,
            "compliance.standards" => GroupByField::ComplianceStandards,
            "compliance.status" => GroupByField::ComplianceStatus,
            "finding_info.analytic.name" => GroupByField::FindingInfoAnalyticName,
            "finding_info.title" => GroupByField::FindingInfoTitle,
            "finding_info.types" => GroupByField::FindingInfoTypes,
            "metadata.product.name" => GroupByField::MetadataProductName,
            "metadata.product.uid" => GroupByField::MetadataProductUid,
            "resources.type" => GroupByField::ResourcesType,
            "resources.uid" => GroupByField::ResourcesUid,
            "severity" => GroupByField::Severity,
            "status" => GroupByField::Status,
            "vulnerabilities.affected_packages.name" => GroupByField::VulnerabilitiesAffectedPackagesName,
            "vulnerabilities.fix_coverage" => GroupByField::VulnerabilitiesFixCoverage,
            other => GroupByField::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for GroupByField {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(GroupByField::from(s))
    }
}
impl GroupByField {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            GroupByField::ActivityName => "activity_name",
            GroupByField::ClassName => "class_name",
            GroupByField::CloudAccountName => "cloud.account.name",
            GroupByField::CloudAccountUid => "cloud.account.uid",
            GroupByField::CloudProvider => "cloud.provider",
            GroupByField::CloudRegion => "cloud.region",
            GroupByField::ComplianceAssessmentsName => "compliance.assessments.name",
            GroupByField::ComplianceControl => "compliance.control",
            GroupByField::ComplianceStandards => "compliance.standards",
            GroupByField::ComplianceStatus => "compliance.status",
            GroupByField::FindingInfoAnalyticName => "finding_info.analytic.name",
            GroupByField::FindingInfoTitle => "finding_info.title",
            GroupByField::FindingInfoTypes => "finding_info.types",
            GroupByField::MetadataProductName => "metadata.product.name",
            GroupByField::MetadataProductUid => "metadata.product.uid",
            GroupByField::ResourcesType => "resources.type",
            GroupByField::ResourcesUid => "resources.uid",
            GroupByField::Severity => "severity",
            GroupByField::Status => "status",
            GroupByField::VulnerabilitiesAffectedPackagesName => "vulnerabilities.affected_packages.name",
            GroupByField::VulnerabilitiesFixCoverage => "vulnerabilities.fix_coverage",
            GroupByField::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "activity_name",
            "class_name",
            "cloud.account.name",
            "cloud.account.uid",
            "cloud.provider",
            "cloud.region",
            "compliance.assessments.name",
            "compliance.control",
            "compliance.standards",
            "compliance.status",
            "finding_info.analytic.name",
            "finding_info.title",
            "finding_info.types",
            "metadata.product.name",
            "metadata.product.uid",
            "resources.type",
            "resources.uid",
            "severity",
            "status",
            "vulnerabilities.affected_packages.name",
            "vulnerabilities.fix_coverage",
        ]
    }
}
impl ::std::convert::AsRef<str> for GroupByField {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl GroupByField {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for GroupByField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            GroupByField::ActivityName => write!(f, "activity_name"),
            GroupByField::ClassName => write!(f, "class_name"),
            GroupByField::CloudAccountName => write!(f, "cloud.account.name"),
            GroupByField::CloudAccountUid => write!(f, "cloud.account.uid"),
            GroupByField::CloudProvider => write!(f, "cloud.provider"),
            GroupByField::CloudRegion => write!(f, "cloud.region"),
            GroupByField::ComplianceAssessmentsName => write!(f, "compliance.assessments.name"),
            GroupByField::ComplianceControl => write!(f, "compliance.control"),
            GroupByField::ComplianceStandards => write!(f, "compliance.standards"),
            GroupByField::ComplianceStatus => write!(f, "compliance.status"),
            GroupByField::FindingInfoAnalyticName => write!(f, "finding_info.analytic.name"),
            GroupByField::FindingInfoTitle => write!(f, "finding_info.title"),
            GroupByField::FindingInfoTypes => write!(f, "finding_info.types"),
            GroupByField::MetadataProductName => write!(f, "metadata.product.name"),
            GroupByField::MetadataProductUid => write!(f, "metadata.product.uid"),
            GroupByField::ResourcesType => write!(f, "resources.type"),
            GroupByField::ResourcesUid => write!(f, "resources.uid"),
            GroupByField::Severity => write!(f, "severity"),
            GroupByField::Status => write!(f, "status"),
            GroupByField::VulnerabilitiesAffectedPackagesName => write!(f, "vulnerabilities.affected_packages.name"),
            GroupByField::VulnerabilitiesFixCoverage => write!(f, "vulnerabilities.fix_coverage"),
            GroupByField::Unknown(value) => write!(f, "{value}"),
        }
    }
}
