// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a data volume that's used in a task definition. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskVolumeDetails {
    /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>This parameter is specified when you use bind mount host volumes. The contents of the <code>host</code> parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. </p>
    #[doc(hidden)]
    pub host: std::option::Option<crate::types::AwsEcsTaskVolumeHostDetails>,
}
impl AwsEcsTaskVolumeDetails {
    /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>This parameter is specified when you use bind mount host volumes. The contents of the <code>host</code> parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. </p>
    pub fn host(&self) -> std::option::Option<&crate::types::AwsEcsTaskVolumeHostDetails> {
        self.host.as_ref()
    }
}
impl AwsEcsTaskVolumeDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskVolumeDetails`](crate::types::AwsEcsTaskVolumeDetails).
    pub fn builder() -> crate::types::builders::AwsEcsTaskVolumeDetailsBuilder {
        crate::types::builders::AwsEcsTaskVolumeDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskVolumeDetails`](crate::types::AwsEcsTaskVolumeDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskVolumeDetailsBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) host: std::option::Option<crate::types::AwsEcsTaskVolumeHostDetails>,
}
impl AwsEcsTaskVolumeDetailsBuilder {
    /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>This parameter is specified when you use bind mount host volumes. The contents of the <code>host</code> parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. </p>
    pub fn host(mut self, input: crate::types::AwsEcsTaskVolumeHostDetails) -> Self {
        self.host = Some(input);
        self
    }
    /// <p>This parameter is specified when you use bind mount host volumes. The contents of the <code>host</code> parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. </p>
    pub fn set_host(
        mut self,
        input: std::option::Option<crate::types::AwsEcsTaskVolumeHostDetails>,
    ) -> Self {
        self.host = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskVolumeDetails`](crate::types::AwsEcsTaskVolumeDetails).
    pub fn build(self) -> crate::types::AwsEcsTaskVolumeDetails {
        crate::types::AwsEcsTaskVolumeDetails {
            name: self.name,
            host: self.host,
        }
    }
}
