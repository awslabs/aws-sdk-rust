// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for a lifecycle rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsS3BucketBucketLifecycleConfigurationRulesDetails {
    /// <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number of days before Amazon S3 cancels the entire upload.</p>
    pub abort_incomplete_multipart_upload:
        ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails>,
    /// <p>The date when objects are moved or deleted.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub expiration_date: ::std::option::Option<::std::string::String>,
    /// <p>The length in days of the lifetime for objects that are subject to the rule.</p>
    pub expiration_in_days: ::std::option::Option<i32>,
    /// <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy takes no action.</p>
    /// <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
    pub expired_object_delete_marker: ::std::option::Option<bool>,
    /// <p>Identifies the objects that a rule applies to.</p>
    pub filter: ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails>,
    /// <p>The unique identifier of the rule.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
    pub noncurrent_version_expiration_in_days: ::std::option::Option<i32>,
    /// <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
    pub noncurrent_version_transitions:
        ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails>>,
    /// <p>A prefix that identifies one or more objects that the rule applies to.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Transition rules that indicate when objects transition to a specified storage class.</p>
    pub transitions: ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails>>,
}
impl AwsS3BucketBucketLifecycleConfigurationRulesDetails {
    /// <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number of days before Amazon S3 cancels the entire upload.</p>
    pub fn abort_incomplete_multipart_upload(
        &self,
    ) -> ::std::option::Option<&crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails> {
        self.abort_incomplete_multipart_upload.as_ref()
    }
    /// <p>The date when objects are moved or deleted.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&str> {
        self.expiration_date.as_deref()
    }
    /// <p>The length in days of the lifetime for objects that are subject to the rule.</p>
    pub fn expiration_in_days(&self) -> ::std::option::Option<i32> {
        self.expiration_in_days
    }
    /// <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy takes no action.</p>
    /// <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
    pub fn expired_object_delete_marker(&self) -> ::std::option::Option<bool> {
        self.expired_object_delete_marker
    }
    /// <p>Identifies the objects that a rule applies to.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails> {
        self.filter.as_ref()
    }
    /// <p>The unique identifier of the rule.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
    pub fn noncurrent_version_expiration_in_days(&self) -> ::std::option::Option<i32> {
        self.noncurrent_version_expiration_in_days
    }
    /// <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.noncurrent_version_transitions.is_none()`.
    pub fn noncurrent_version_transitions(&self) -> &[crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails] {
        self.noncurrent_version_transitions.as_deref().unwrap_or_default()
    }
    /// <p>A prefix that identifies one or more objects that the rule applies to.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Transition rules that indicate when objects transition to a specified storage class.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.transitions.is_none()`.
    pub fn transitions(&self) -> &[crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails] {
        self.transitions.as_deref().unwrap_or_default()
    }
}
impl AwsS3BucketBucketLifecycleConfigurationRulesDetails {
    /// Creates a new builder-style object to manufacture [`AwsS3BucketBucketLifecycleConfigurationRulesDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails).
    pub fn builder() -> crate::types::builders::AwsS3BucketBucketLifecycleConfigurationRulesDetailsBuilder {
        crate::types::builders::AwsS3BucketBucketLifecycleConfigurationRulesDetailsBuilder::default()
    }
}

/// A builder for [`AwsS3BucketBucketLifecycleConfigurationRulesDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsS3BucketBucketLifecycleConfigurationRulesDetailsBuilder {
    pub(crate) abort_incomplete_multipart_upload:
        ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails>,
    pub(crate) expiration_date: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_in_days: ::std::option::Option<i32>,
    pub(crate) expired_object_delete_marker: ::std::option::Option<bool>,
    pub(crate) filter: ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) noncurrent_version_expiration_in_days: ::std::option::Option<i32>,
    pub(crate) noncurrent_version_transitions:
        ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails>>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) transitions: ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails>>,
}
impl AwsS3BucketBucketLifecycleConfigurationRulesDetailsBuilder {
    /// <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number of days before Amazon S3 cancels the entire upload.</p>
    pub fn abort_incomplete_multipart_upload(
        mut self,
        input: crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
    ) -> Self {
        self.abort_incomplete_multipart_upload = ::std::option::Option::Some(input);
        self
    }
    /// <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number of days before Amazon S3 cancels the entire upload.</p>
    pub fn set_abort_incomplete_multipart_upload(
        mut self,
        input: ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails>,
    ) -> Self {
        self.abort_incomplete_multipart_upload = input;
        self
    }
    /// <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number of days before Amazon S3 cancels the entire upload.</p>
    pub fn get_abort_incomplete_multipart_upload(
        &self,
    ) -> &::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails> {
        &self.abort_incomplete_multipart_upload
    }
    /// <p>The date when objects are moved or deleted.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn expiration_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expiration_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date when objects are moved or deleted.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>The date when objects are moved or deleted.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.expiration_date
    }
    /// <p>The length in days of the lifetime for objects that are subject to the rule.</p>
    pub fn expiration_in_days(mut self, input: i32) -> Self {
        self.expiration_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length in days of the lifetime for objects that are subject to the rule.</p>
    pub fn set_expiration_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.expiration_in_days = input;
        self
    }
    /// <p>The length in days of the lifetime for objects that are subject to the rule.</p>
    pub fn get_expiration_in_days(&self) -> &::std::option::Option<i32> {
        &self.expiration_in_days
    }
    /// <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy takes no action.</p>
    /// <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
    pub fn expired_object_delete_marker(mut self, input: bool) -> Self {
        self.expired_object_delete_marker = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy takes no action.</p>
    /// <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
    pub fn set_expired_object_delete_marker(mut self, input: ::std::option::Option<bool>) -> Self {
        self.expired_object_delete_marker = input;
        self
    }
    /// <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy takes no action.</p>
    /// <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
    pub fn get_expired_object_delete_marker(&self) -> &::std::option::Option<bool> {
        &self.expired_object_delete_marker
    }
    /// <p>Identifies the objects that a rule applies to.</p>
    pub fn filter(mut self, input: crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the objects that a rule applies to.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Identifies the objects that a rule applies to.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails> {
        &self.filter
    }
    /// <p>The unique identifier of the rule.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the rule.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the rule.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
    pub fn noncurrent_version_expiration_in_days(mut self, input: i32) -> Self {
        self.noncurrent_version_expiration_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
    pub fn set_noncurrent_version_expiration_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.noncurrent_version_expiration_in_days = input;
        self
    }
    /// <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
    pub fn get_noncurrent_version_expiration_in_days(&self) -> &::std::option::Option<i32> {
        &self.noncurrent_version_expiration_in_days
    }
    /// Appends an item to `noncurrent_version_transitions`.
    ///
    /// To override the contents of this collection use [`set_noncurrent_version_transitions`](Self::set_noncurrent_version_transitions).
    ///
    /// <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
    pub fn noncurrent_version_transitions(
        mut self,
        input: crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
    ) -> Self {
        let mut v = self.noncurrent_version_transitions.unwrap_or_default();
        v.push(input);
        self.noncurrent_version_transitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
    pub fn set_noncurrent_version_transitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails>>,
    ) -> Self {
        self.noncurrent_version_transitions = input;
        self
    }
    /// <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
    pub fn get_noncurrent_version_transitions(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails>> {
        &self.noncurrent_version_transitions
    }
    /// <p>A prefix that identifies one or more objects that the rule applies to.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A prefix that identifies one or more objects that the rule applies to.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>A prefix that identifies one or more objects that the rule applies to.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Appends an item to `transitions`.
    ///
    /// To override the contents of this collection use [`set_transitions`](Self::set_transitions).
    ///
    /// <p>Transition rules that indicate when objects transition to a specified storage class.</p>
    pub fn transitions(mut self, input: crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails) -> Self {
        let mut v = self.transitions.unwrap_or_default();
        v.push(input);
        self.transitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Transition rules that indicate when objects transition to a specified storage class.</p>
    pub fn set_transitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails>>,
    ) -> Self {
        self.transitions = input;
        self
    }
    /// <p>Transition rules that indicate when objects transition to a specified storage class.</p>
    pub fn get_transitions(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails>> {
        &self.transitions
    }
    /// Consumes the builder and constructs a [`AwsS3BucketBucketLifecycleConfigurationRulesDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails).
    pub fn build(self) -> crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails {
        crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails {
            abort_incomplete_multipart_upload: self.abort_incomplete_multipart_upload,
            expiration_date: self.expiration_date,
            expiration_in_days: self.expiration_in_days,
            expired_object_delete_marker: self.expired_object_delete_marker,
            filter: self.filter,
            id: self.id,
            noncurrent_version_expiration_in_days: self.noncurrent_version_expiration_in_days,
            noncurrent_version_transitions: self.noncurrent_version_transitions,
            prefix: self.prefix,
            status: self.status,
            transitions: self.transitions,
        }
    }
}
