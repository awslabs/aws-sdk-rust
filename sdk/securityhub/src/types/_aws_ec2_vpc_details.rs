// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an EC2 VPC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2VpcDetails {
    /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
    #[doc(hidden)]
    pub cidr_block_association_set:
        std::option::Option<std::vec::Vec<crate::types::CidrBlockAssociation>>,
    /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_association_set:
        std::option::Option<std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
    /// <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are associated with the VPC. If the default options are associated with the VPC, then this is default.</p>
    #[doc(hidden)]
    pub dhcp_options_id: std::option::Option<std::string::String>,
    /// <p>The current state of the VPC. Valid values are <code>available</code> or <code>pending</code>.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
}
impl AwsEc2VpcDetails {
    /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
    pub fn cidr_block_association_set(
        &self,
    ) -> std::option::Option<&[crate::types::CidrBlockAssociation]> {
        self.cidr_block_association_set.as_deref()
    }
    /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
    pub fn ipv6_cidr_block_association_set(
        &self,
    ) -> std::option::Option<&[crate::types::Ipv6CidrBlockAssociation]> {
        self.ipv6_cidr_block_association_set.as_deref()
    }
    /// <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are associated with the VPC. If the default options are associated with the VPC, then this is default.</p>
    pub fn dhcp_options_id(&self) -> std::option::Option<&str> {
        self.dhcp_options_id.as_deref()
    }
    /// <p>The current state of the VPC. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl AwsEc2VpcDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2VpcDetails`](crate::types::AwsEc2VpcDetails).
    pub fn builder() -> crate::types::builders::AwsEc2VpcDetailsBuilder {
        crate::types::builders::AwsEc2VpcDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2VpcDetails`](crate::types::AwsEc2VpcDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2VpcDetailsBuilder {
    pub(crate) cidr_block_association_set:
        std::option::Option<std::vec::Vec<crate::types::CidrBlockAssociation>>,
    pub(crate) ipv6_cidr_block_association_set:
        std::option::Option<std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
    pub(crate) dhcp_options_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
}
impl AwsEc2VpcDetailsBuilder {
    /// Appends an item to `cidr_block_association_set`.
    ///
    /// To override the contents of this collection use [`set_cidr_block_association_set`](Self::set_cidr_block_association_set).
    ///
    /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
    pub fn cidr_block_association_set(mut self, input: crate::types::CidrBlockAssociation) -> Self {
        let mut v = self.cidr_block_association_set.unwrap_or_default();
        v.push(input);
        self.cidr_block_association_set = Some(v);
        self
    }
    /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
    pub fn set_cidr_block_association_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CidrBlockAssociation>>,
    ) -> Self {
        self.cidr_block_association_set = input;
        self
    }
    /// Appends an item to `ipv6_cidr_block_association_set`.
    ///
    /// To override the contents of this collection use [`set_ipv6_cidr_block_association_set`](Self::set_ipv6_cidr_block_association_set).
    ///
    /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
    pub fn ipv6_cidr_block_association_set(
        mut self,
        input: crate::types::Ipv6CidrBlockAssociation,
    ) -> Self {
        let mut v = self.ipv6_cidr_block_association_set.unwrap_or_default();
        v.push(input);
        self.ipv6_cidr_block_association_set = Some(v);
        self
    }
    /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
    pub fn set_ipv6_cidr_block_association_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ipv6CidrBlockAssociation>>,
    ) -> Self {
        self.ipv6_cidr_block_association_set = input;
        self
    }
    /// <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are associated with the VPC. If the default options are associated with the VPC, then this is default.</p>
    pub fn dhcp_options_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dhcp_options_id = Some(input.into());
        self
    }
    /// <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are associated with the VPC. If the default options are associated with the VPC, then this is default.</p>
    pub fn set_dhcp_options_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dhcp_options_id = input;
        self
    }
    /// <p>The current state of the VPC. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The current state of the VPC. Valid values are <code>available</code> or <code>pending</code>.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2VpcDetails`](crate::types::AwsEc2VpcDetails).
    pub fn build(self) -> crate::types::AwsEc2VpcDetails {
        crate::types::AwsEc2VpcDetails {
            cidr_block_association_set: self.cidr_block_association_set,
            ipv6_cidr_block_association_set: self.ipv6_cidr_block_association_set,
            dhcp_options_id: self.dhcp_options_id,
            state: self.state,
        }
    }
}
