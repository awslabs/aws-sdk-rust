// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A date range for the date filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DateRange {
    /// <p>A date range value for the date filter.</p>
    #[doc(hidden)]
    pub value: i32,
    /// <p>A date range unit for the date filter.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::DateRangeUnit>,
}
impl DateRange {
    /// <p>A date range value for the date filter.</p>
    pub fn value(&self) -> i32 {
        self.value
    }
    /// <p>A date range unit for the date filter.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::DateRangeUnit> {
        self.unit.as_ref()
    }
}
impl DateRange {
    /// Creates a new builder-style object to manufacture [`DateRange`](crate::types::DateRange).
    pub fn builder() -> crate::types::builders::DateRangeBuilder {
        crate::types::builders::DateRangeBuilder::default()
    }
}

/// A builder for [`DateRange`](crate::types::DateRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DateRangeBuilder {
    pub(crate) value: std::option::Option<i32>,
    pub(crate) unit: std::option::Option<crate::types::DateRangeUnit>,
}
impl DateRangeBuilder {
    /// <p>A date range value for the date filter.</p>
    pub fn value(mut self, input: i32) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>A date range value for the date filter.</p>
    pub fn set_value(mut self, input: std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>A date range unit for the date filter.</p>
    pub fn unit(mut self, input: crate::types::DateRangeUnit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>A date range unit for the date filter.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::DateRangeUnit>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`DateRange`](crate::types::DateRange).
    pub fn build(self) -> crate::types::DateRange {
        crate::types::DateRange {
            value: self.value.unwrap_or_default(),
            unit: self.unit,
        }
    }
}
