// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A data volume to mount from another container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesDetails {
    /// <p>Information about a Docker volume.</p>
    #[doc(hidden)]
    pub docker_volume_configuration: std::option::Option<
        crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
    >,
    /// <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
    #[doc(hidden)]
    pub efs_volume_configuration:
        std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails>,
    /// <p>Information about a bind mount host volume.</p>
    #[doc(hidden)]
    pub host: std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesHostDetails>,
    /// <p>The name of the data volume.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionVolumesDetails {
    /// <p>Information about a Docker volume.</p>
    pub fn docker_volume_configuration(
        &self,
    ) -> std::option::Option<
        &crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
    > {
        self.docker_volume_configuration.as_ref()
    }
    /// <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
    pub fn efs_volume_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails>
    {
        self.efs_volume_configuration.as_ref()
    }
    /// <p>Information about a bind mount host volume.</p>
    pub fn host(
        &self,
    ) -> std::option::Option<&crate::types::AwsEcsTaskDefinitionVolumesHostDetails> {
        self.host.as_ref()
    }
    /// <p>The name of the data volume.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AwsEcsTaskDefinitionVolumesDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionVolumesDetails`](crate::types::AwsEcsTaskDefinitionVolumesDetails).
    pub fn builder() -> crate::types::builders::AwsEcsTaskDefinitionVolumesDetailsBuilder {
        crate::types::builders::AwsEcsTaskDefinitionVolumesDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionVolumesDetails`](crate::types::AwsEcsTaskDefinitionVolumesDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionVolumesDetailsBuilder {
    pub(crate) docker_volume_configuration: std::option::Option<
        crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
    >,
    pub(crate) efs_volume_configuration:
        std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails>,
    pub(crate) host: std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesHostDetails>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionVolumesDetailsBuilder {
    /// <p>Information about a Docker volume.</p>
    pub fn docker_volume_configuration(
        mut self,
        input: crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
    ) -> Self {
        self.docker_volume_configuration = Some(input);
        self
    }
    /// <p>Information about a Docker volume.</p>
    pub fn set_docker_volume_configuration(
        mut self,
        input: std::option::Option<
            crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
        >,
    ) -> Self {
        self.docker_volume_configuration = input;
        self
    }
    /// <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
    pub fn efs_volume_configuration(
        mut self,
        input: crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
    ) -> Self {
        self.efs_volume_configuration = Some(input);
        self
    }
    /// <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
    pub fn set_efs_volume_configuration(
        mut self,
        input: std::option::Option<
            crate::types::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
        >,
    ) -> Self {
        self.efs_volume_configuration = input;
        self
    }
    /// <p>Information about a bind mount host volume.</p>
    pub fn host(mut self, input: crate::types::AwsEcsTaskDefinitionVolumesHostDetails) -> Self {
        self.host = Some(input);
        self
    }
    /// <p>Information about a bind mount host volume.</p>
    pub fn set_host(
        mut self,
        input: std::option::Option<crate::types::AwsEcsTaskDefinitionVolumesHostDetails>,
    ) -> Self {
        self.host = input;
        self
    }
    /// <p>The name of the data volume.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the data volume.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionVolumesDetails`](crate::types::AwsEcsTaskDefinitionVolumesDetails).
    pub fn build(self) -> crate::types::AwsEcsTaskDefinitionVolumesDetails {
        crate::types::AwsEcsTaskDefinitionVolumesDetails {
            docker_volume_configuration: self.docker_volume_configuration,
            efs_volume_configuration: self.efs_volume_configuration,
            host: self.host,
            name: self.name,
        }
    }
}
