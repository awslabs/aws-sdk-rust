// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerLdapServerMetadataDetails {
    /// <p> Specifies the location of the LDAP server, such as Amazon Web Services Directory Service for Microsoft Active Directory. </p>
    pub hosts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. </p>
    pub role_base: ::std::option::Option<::std::string::String>,
    /// <p> The group name attribute in a role entry whose value is the name of that role. </p>
    pub role_name: ::std::option::Option<::std::string::String>,
    /// <p> The LDAP search filter used to find roles within the <code>roleBase</code>. </p>
    pub role_search_matching: ::std::option::Option<::std::string::String>,
    /// <p> The directory search scope for the role. If set to <code>true</code>, the scope is to search the entire subtree. </p>
    pub role_search_subtree: ::std::option::Option<bool>,
    /// <p> A username for the service account, which is an account in your LDAP server that has access to initiate a connection. </p>
    pub service_account_username: ::std::option::Option<::std::string::String>,
    /// <p> Selects a particular subtree of the directory information tree (DIT) to search for user entries. </p>
    pub user_base: ::std::option::Option<::std::string::String>,
    /// <p> The name of the LDAP attribute in the user's directory entry for the user's group membership. </p>
    pub user_role_name: ::std::option::Option<::std::string::String>,
    /// <p> The LDAP search filter used to find users within the <code>userBase</code>. </p>
    pub user_search_matching: ::std::option::Option<::std::string::String>,
    /// <p> The directory search scope for the user. If set to true, the scope is to search the entire subtree. </p>
    pub user_search_subtree: ::std::option::Option<bool>,
}
impl AwsAmazonMqBrokerLdapServerMetadataDetails {
    /// <p> Specifies the location of the LDAP server, such as Amazon Web Services Directory Service for Microsoft Active Directory. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hosts.is_none()`.
    pub fn hosts(&self) -> &[::std::string::String] {
        self.hosts.as_deref().unwrap_or_default()
    }
    /// <p> The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. </p>
    pub fn role_base(&self) -> ::std::option::Option<&str> {
        self.role_base.as_deref()
    }
    /// <p> The group name attribute in a role entry whose value is the name of that role. </p>
    pub fn role_name(&self) -> ::std::option::Option<&str> {
        self.role_name.as_deref()
    }
    /// <p> The LDAP search filter used to find roles within the <code>roleBase</code>. </p>
    pub fn role_search_matching(&self) -> ::std::option::Option<&str> {
        self.role_search_matching.as_deref()
    }
    /// <p> The directory search scope for the role. If set to <code>true</code>, the scope is to search the entire subtree. </p>
    pub fn role_search_subtree(&self) -> ::std::option::Option<bool> {
        self.role_search_subtree
    }
    /// <p> A username for the service account, which is an account in your LDAP server that has access to initiate a connection. </p>
    pub fn service_account_username(&self) -> ::std::option::Option<&str> {
        self.service_account_username.as_deref()
    }
    /// <p> Selects a particular subtree of the directory information tree (DIT) to search for user entries. </p>
    pub fn user_base(&self) -> ::std::option::Option<&str> {
        self.user_base.as_deref()
    }
    /// <p> The name of the LDAP attribute in the user's directory entry for the user's group membership. </p>
    pub fn user_role_name(&self) -> ::std::option::Option<&str> {
        self.user_role_name.as_deref()
    }
    /// <p> The LDAP search filter used to find users within the <code>userBase</code>. </p>
    pub fn user_search_matching(&self) -> ::std::option::Option<&str> {
        self.user_search_matching.as_deref()
    }
    /// <p> The directory search scope for the user. If set to true, the scope is to search the entire subtree. </p>
    pub fn user_search_subtree(&self) -> ::std::option::Option<bool> {
        self.user_search_subtree
    }
}
impl AwsAmazonMqBrokerLdapServerMetadataDetails {
    /// Creates a new builder-style object to manufacture [`AwsAmazonMqBrokerLdapServerMetadataDetails`](crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails).
    pub fn builder() -> crate::types::builders::AwsAmazonMqBrokerLdapServerMetadataDetailsBuilder {
        crate::types::builders::AwsAmazonMqBrokerLdapServerMetadataDetailsBuilder::default()
    }
}

/// A builder for [`AwsAmazonMqBrokerLdapServerMetadataDetails`](crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerLdapServerMetadataDetailsBuilder {
    pub(crate) hosts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) role_base: ::std::option::Option<::std::string::String>,
    pub(crate) role_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_search_matching: ::std::option::Option<::std::string::String>,
    pub(crate) role_search_subtree: ::std::option::Option<bool>,
    pub(crate) service_account_username: ::std::option::Option<::std::string::String>,
    pub(crate) user_base: ::std::option::Option<::std::string::String>,
    pub(crate) user_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_search_matching: ::std::option::Option<::std::string::String>,
    pub(crate) user_search_subtree: ::std::option::Option<bool>,
}
impl AwsAmazonMqBrokerLdapServerMetadataDetailsBuilder {
    /// Appends an item to `hosts`.
    ///
    /// To override the contents of this collection use [`set_hosts`](Self::set_hosts).
    ///
    /// <p> Specifies the location of the LDAP server, such as Amazon Web Services Directory Service for Microsoft Active Directory. </p>
    pub fn hosts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.hosts.unwrap_or_default();
        v.push(input.into());
        self.hosts = ::std::option::Option::Some(v);
        self
    }
    /// <p> Specifies the location of the LDAP server, such as Amazon Web Services Directory Service for Microsoft Active Directory. </p>
    pub fn set_hosts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.hosts = input;
        self
    }
    /// <p> Specifies the location of the LDAP server, such as Amazon Web Services Directory Service for Microsoft Active Directory. </p>
    pub fn get_hosts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.hosts
    }
    /// <p> The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. </p>
    pub fn role_base(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_base = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. </p>
    pub fn set_role_base(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_base = input;
        self
    }
    /// <p> The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. </p>
    pub fn get_role_base(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_base
    }
    /// <p> The group name attribute in a role entry whose value is the name of that role. </p>
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The group name attribute in a role entry whose value is the name of that role. </p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// <p> The group name attribute in a role entry whose value is the name of that role. </p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_name
    }
    /// <p> The LDAP search filter used to find roles within the <code>roleBase</code>. </p>
    pub fn role_search_matching(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_search_matching = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The LDAP search filter used to find roles within the <code>roleBase</code>. </p>
    pub fn set_role_search_matching(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_search_matching = input;
        self
    }
    /// <p> The LDAP search filter used to find roles within the <code>roleBase</code>. </p>
    pub fn get_role_search_matching(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_search_matching
    }
    /// <p> The directory search scope for the role. If set to <code>true</code>, the scope is to search the entire subtree. </p>
    pub fn role_search_subtree(mut self, input: bool) -> Self {
        self.role_search_subtree = ::std::option::Option::Some(input);
        self
    }
    /// <p> The directory search scope for the role. If set to <code>true</code>, the scope is to search the entire subtree. </p>
    pub fn set_role_search_subtree(mut self, input: ::std::option::Option<bool>) -> Self {
        self.role_search_subtree = input;
        self
    }
    /// <p> The directory search scope for the role. If set to <code>true</code>, the scope is to search the entire subtree. </p>
    pub fn get_role_search_subtree(&self) -> &::std::option::Option<bool> {
        &self.role_search_subtree
    }
    /// <p> A username for the service account, which is an account in your LDAP server that has access to initiate a connection. </p>
    pub fn service_account_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_account_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A username for the service account, which is an account in your LDAP server that has access to initiate a connection. </p>
    pub fn set_service_account_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_account_username = input;
        self
    }
    /// <p> A username for the service account, which is an account in your LDAP server that has access to initiate a connection. </p>
    pub fn get_service_account_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_account_username
    }
    /// <p> Selects a particular subtree of the directory information tree (DIT) to search for user entries. </p>
    pub fn user_base(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_base = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Selects a particular subtree of the directory information tree (DIT) to search for user entries. </p>
    pub fn set_user_base(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_base = input;
        self
    }
    /// <p> Selects a particular subtree of the directory information tree (DIT) to search for user entries. </p>
    pub fn get_user_base(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_base
    }
    /// <p> The name of the LDAP attribute in the user's directory entry for the user's group membership. </p>
    pub fn user_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the LDAP attribute in the user's directory entry for the user's group membership. </p>
    pub fn set_user_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_role_name = input;
        self
    }
    /// <p> The name of the LDAP attribute in the user's directory entry for the user's group membership. </p>
    pub fn get_user_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_role_name
    }
    /// <p> The LDAP search filter used to find users within the <code>userBase</code>. </p>
    pub fn user_search_matching(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_search_matching = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The LDAP search filter used to find users within the <code>userBase</code>. </p>
    pub fn set_user_search_matching(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_search_matching = input;
        self
    }
    /// <p> The LDAP search filter used to find users within the <code>userBase</code>. </p>
    pub fn get_user_search_matching(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_search_matching
    }
    /// <p> The directory search scope for the user. If set to true, the scope is to search the entire subtree. </p>
    pub fn user_search_subtree(mut self, input: bool) -> Self {
        self.user_search_subtree = ::std::option::Option::Some(input);
        self
    }
    /// <p> The directory search scope for the user. If set to true, the scope is to search the entire subtree. </p>
    pub fn set_user_search_subtree(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_search_subtree = input;
        self
    }
    /// <p> The directory search scope for the user. If set to true, the scope is to search the entire subtree. </p>
    pub fn get_user_search_subtree(&self) -> &::std::option::Option<bool> {
        &self.user_search_subtree
    }
    /// Consumes the builder and constructs a [`AwsAmazonMqBrokerLdapServerMetadataDetails`](crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails).
    pub fn build(self) -> crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails {
        crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails {
            hosts: self.hosts,
            role_base: self.role_base,
            role_name: self.role_name,
            role_search_matching: self.role_search_matching,
            role_search_subtree: self.role_search_subtree,
            service_account_username: self.service_account_username,
            user_base: self.user_base,
            user_role_name: self.user_role_name,
            user_search_matching: self.user_search_matching,
            user_search_subtree: self.user_search_subtree,
        }
    }
}
