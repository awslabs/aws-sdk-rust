// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mount point for the data volumes in the container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
    /// <p>The path on the container to mount the host volume at.</p>
    #[doc(hidden)]
    pub container_path: std::option::Option<std::string::String>,
    /// <p>Whether the container has read-only access to the volume.</p>
    #[doc(hidden)]
    pub read_only: bool,
    /// <p>The name of the volume to mount. Must match the name of a volume listed in <code>VolumeDetails</code> for the task definition.</p>
    #[doc(hidden)]
    pub source_volume: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn container_path(&self) -> std::option::Option<&str> {
        self.container_path.as_deref()
    }
    /// <p>Whether the container has read-only access to the volume.</p>
    pub fn read_only(&self) -> bool {
        self.read_only
    }
    /// <p>The name of the volume to mount. Must match the name of a volume listed in <code>VolumeDetails</code> for the task definition.</p>
    pub fn source_volume(&self) -> std::option::Option<&str> {
        self.source_volume.as_deref()
    }
}
impl AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsBuilder
    {
        crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsBuilder {
    pub(crate) container_path: std::option::Option<std::string::String>,
    pub(crate) read_only: std::option::Option<bool>,
    pub(crate) source_volume: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsBuilder {
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn container_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_path = Some(input.into());
        self
    }
    /// <p>The path on the container to mount the host volume at.</p>
    pub fn set_container_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_path = input;
        self
    }
    /// <p>Whether the container has read-only access to the volume.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = Some(input);
        self
    }
    /// <p>Whether the container has read-only access to the volume.</p>
    pub fn set_read_only(mut self, input: std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// <p>The name of the volume to mount. Must match the name of a volume listed in <code>VolumeDetails</code> for the task definition.</p>
    pub fn source_volume(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_volume = Some(input.into());
        self
    }
    /// <p>The name of the volume to mount. Must match the name of a volume listed in <code>VolumeDetails</code> for the task definition.</p>
    pub fn set_source_volume(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_volume = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails).
    pub fn build(self) -> crate::types::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
        crate::types::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
            container_path: self.container_path,
            read_only: self.read_only.unwrap_or_default(),
            source_volume: self.source_volume,
        }
    }
}
