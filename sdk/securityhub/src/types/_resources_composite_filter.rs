// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enables the creation of criteria for Amazon Web Services resources in Security Hub.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourcesCompositeFilter {
    /// <p>Enables filtering based on string field values.</p>
    pub string_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesStringFilter>>,
    /// <p>Enables filtering based on date and timestamp field values.</p>
    pub date_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesDateFilter>>,
    /// <p>Enables filtering based on numerical field values.</p>
    pub number_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesNumberFilter>>,
    /// <p>Enables filtering based on map-based field values.</p>
    pub map_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesMapFilter>>,
    /// <p>Provides an additional level of filtering, creating a three-layer nested structure. The first layer is a <code>CompositeFilters</code> array with a <code>CompositeOperator</code> (<code>AND</code>/<code>OR</code>). The second layer is a <code>CompositeFilter</code> object that contains direct filters and <code>NestedCompositeFilters</code>. The third layer is <code>NestedCompositeFilters</code>, which contains additional filter conditions.</p>
    pub nested_composite_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesCompositeFilter>>,
    /// <p>The logical operator used to combine multiple filter conditions.</p>
    pub operator: ::std::option::Option<crate::types::AllowedOperators>,
}
impl ResourcesCompositeFilter {
    /// <p>Enables filtering based on string field values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.string_filters.is_none()`.
    pub fn string_filters(&self) -> &[crate::types::ResourcesStringFilter] {
        self.string_filters.as_deref().unwrap_or_default()
    }
    /// <p>Enables filtering based on date and timestamp field values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.date_filters.is_none()`.
    pub fn date_filters(&self) -> &[crate::types::ResourcesDateFilter] {
        self.date_filters.as_deref().unwrap_or_default()
    }
    /// <p>Enables filtering based on numerical field values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.number_filters.is_none()`.
    pub fn number_filters(&self) -> &[crate::types::ResourcesNumberFilter] {
        self.number_filters.as_deref().unwrap_or_default()
    }
    /// <p>Enables filtering based on map-based field values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.map_filters.is_none()`.
    pub fn map_filters(&self) -> &[crate::types::ResourcesMapFilter] {
        self.map_filters.as_deref().unwrap_or_default()
    }
    /// <p>Provides an additional level of filtering, creating a three-layer nested structure. The first layer is a <code>CompositeFilters</code> array with a <code>CompositeOperator</code> (<code>AND</code>/<code>OR</code>). The second layer is a <code>CompositeFilter</code> object that contains direct filters and <code>NestedCompositeFilters</code>. The third layer is <code>NestedCompositeFilters</code>, which contains additional filter conditions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nested_composite_filters.is_none()`.
    pub fn nested_composite_filters(&self) -> &[crate::types::ResourcesCompositeFilter] {
        self.nested_composite_filters.as_deref().unwrap_or_default()
    }
    /// <p>The logical operator used to combine multiple filter conditions.</p>
    pub fn operator(&self) -> ::std::option::Option<&crate::types::AllowedOperators> {
        self.operator.as_ref()
    }
}
impl ResourcesCompositeFilter {
    /// Creates a new builder-style object to manufacture [`ResourcesCompositeFilter`](crate::types::ResourcesCompositeFilter).
    pub fn builder() -> crate::types::builders::ResourcesCompositeFilterBuilder {
        crate::types::builders::ResourcesCompositeFilterBuilder::default()
    }
}

/// A builder for [`ResourcesCompositeFilter`](crate::types::ResourcesCompositeFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourcesCompositeFilterBuilder {
    pub(crate) string_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesStringFilter>>,
    pub(crate) date_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesDateFilter>>,
    pub(crate) number_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesNumberFilter>>,
    pub(crate) map_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesMapFilter>>,
    pub(crate) nested_composite_filters: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesCompositeFilter>>,
    pub(crate) operator: ::std::option::Option<crate::types::AllowedOperators>,
}
impl ResourcesCompositeFilterBuilder {
    /// Appends an item to `string_filters`.
    ///
    /// To override the contents of this collection use [`set_string_filters`](Self::set_string_filters).
    ///
    /// <p>Enables filtering based on string field values.</p>
    pub fn string_filters(mut self, input: crate::types::ResourcesStringFilter) -> Self {
        let mut v = self.string_filters.unwrap_or_default();
        v.push(input);
        self.string_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables filtering based on string field values.</p>
    pub fn set_string_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesStringFilter>>) -> Self {
        self.string_filters = input;
        self
    }
    /// <p>Enables filtering based on string field values.</p>
    pub fn get_string_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcesStringFilter>> {
        &self.string_filters
    }
    /// Appends an item to `date_filters`.
    ///
    /// To override the contents of this collection use [`set_date_filters`](Self::set_date_filters).
    ///
    /// <p>Enables filtering based on date and timestamp field values.</p>
    pub fn date_filters(mut self, input: crate::types::ResourcesDateFilter) -> Self {
        let mut v = self.date_filters.unwrap_or_default();
        v.push(input);
        self.date_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables filtering based on date and timestamp field values.</p>
    pub fn set_date_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesDateFilter>>) -> Self {
        self.date_filters = input;
        self
    }
    /// <p>Enables filtering based on date and timestamp field values.</p>
    pub fn get_date_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcesDateFilter>> {
        &self.date_filters
    }
    /// Appends an item to `number_filters`.
    ///
    /// To override the contents of this collection use [`set_number_filters`](Self::set_number_filters).
    ///
    /// <p>Enables filtering based on numerical field values.</p>
    pub fn number_filters(mut self, input: crate::types::ResourcesNumberFilter) -> Self {
        let mut v = self.number_filters.unwrap_or_default();
        v.push(input);
        self.number_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables filtering based on numerical field values.</p>
    pub fn set_number_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesNumberFilter>>) -> Self {
        self.number_filters = input;
        self
    }
    /// <p>Enables filtering based on numerical field values.</p>
    pub fn get_number_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcesNumberFilter>> {
        &self.number_filters
    }
    /// Appends an item to `map_filters`.
    ///
    /// To override the contents of this collection use [`set_map_filters`](Self::set_map_filters).
    ///
    /// <p>Enables filtering based on map-based field values.</p>
    pub fn map_filters(mut self, input: crate::types::ResourcesMapFilter) -> Self {
        let mut v = self.map_filters.unwrap_or_default();
        v.push(input);
        self.map_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables filtering based on map-based field values.</p>
    pub fn set_map_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesMapFilter>>) -> Self {
        self.map_filters = input;
        self
    }
    /// <p>Enables filtering based on map-based field values.</p>
    pub fn get_map_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcesMapFilter>> {
        &self.map_filters
    }
    /// Appends an item to `nested_composite_filters`.
    ///
    /// To override the contents of this collection use [`set_nested_composite_filters`](Self::set_nested_composite_filters).
    ///
    /// <p>Provides an additional level of filtering, creating a three-layer nested structure. The first layer is a <code>CompositeFilters</code> array with a <code>CompositeOperator</code> (<code>AND</code>/<code>OR</code>). The second layer is a <code>CompositeFilter</code> object that contains direct filters and <code>NestedCompositeFilters</code>. The third layer is <code>NestedCompositeFilters</code>, which contains additional filter conditions.</p>
    pub fn nested_composite_filters(mut self, input: crate::types::ResourcesCompositeFilter) -> Self {
        let mut v = self.nested_composite_filters.unwrap_or_default();
        v.push(input);
        self.nested_composite_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides an additional level of filtering, creating a three-layer nested structure. The first layer is a <code>CompositeFilters</code> array with a <code>CompositeOperator</code> (<code>AND</code>/<code>OR</code>). The second layer is a <code>CompositeFilter</code> object that contains direct filters and <code>NestedCompositeFilters</code>. The third layer is <code>NestedCompositeFilters</code>, which contains additional filter conditions.</p>
    pub fn set_nested_composite_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcesCompositeFilter>>) -> Self {
        self.nested_composite_filters = input;
        self
    }
    /// <p>Provides an additional level of filtering, creating a three-layer nested structure. The first layer is a <code>CompositeFilters</code> array with a <code>CompositeOperator</code> (<code>AND</code>/<code>OR</code>). The second layer is a <code>CompositeFilter</code> object that contains direct filters and <code>NestedCompositeFilters</code>. The third layer is <code>NestedCompositeFilters</code>, which contains additional filter conditions.</p>
    pub fn get_nested_composite_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcesCompositeFilter>> {
        &self.nested_composite_filters
    }
    /// <p>The logical operator used to combine multiple filter conditions.</p>
    pub fn operator(mut self, input: crate::types::AllowedOperators) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical operator used to combine multiple filter conditions.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::AllowedOperators>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The logical operator used to combine multiple filter conditions.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::AllowedOperators> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`ResourcesCompositeFilter`](crate::types::ResourcesCompositeFilter).
    pub fn build(self) -> crate::types::ResourcesCompositeFilter {
        crate::types::ResourcesCompositeFilter {
            string_filters: self.string_filters,
            date_filters: self.date_filters,
            number_filters: self.number_filters,
            map_filters: self.map_filters,
            nested_composite_filters: self.nested_composite_filters,
            operator: self.operator,
        }
    }
}
