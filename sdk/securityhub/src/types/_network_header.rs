// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a network path component that occurs before or after the current component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkHeader {
    /// <p>The protocol used for the component.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>Information about the destination of the component.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::NetworkPathComponentDetails>,
    /// <p>Information about the origin of the component.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::NetworkPathComponentDetails>,
}
impl NetworkHeader {
    /// <p>The protocol used for the component.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>Information about the destination of the component.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::NetworkPathComponentDetails> {
        self.destination.as_ref()
    }
    /// <p>Information about the origin of the component.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::NetworkPathComponentDetails> {
        self.source.as_ref()
    }
}
impl NetworkHeader {
    /// Creates a new builder-style object to manufacture [`NetworkHeader`](crate::types::NetworkHeader).
    pub fn builder() -> crate::types::builders::NetworkHeaderBuilder {
        crate::types::builders::NetworkHeaderBuilder::default()
    }
}

/// A builder for [`NetworkHeader`](crate::types::NetworkHeader).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkHeaderBuilder {
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<crate::types::NetworkPathComponentDetails>,
    pub(crate) source: std::option::Option<crate::types::NetworkPathComponentDetails>,
}
impl NetworkHeaderBuilder {
    /// <p>The protocol used for the component.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol used for the component.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>Information about the destination of the component.</p>
    pub fn destination(mut self, input: crate::types::NetworkPathComponentDetails) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>Information about the destination of the component.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::NetworkPathComponentDetails>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Information about the origin of the component.</p>
    pub fn source(mut self, input: crate::types::NetworkPathComponentDetails) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>Information about the origin of the component.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::NetworkPathComponentDetails>,
    ) -> Self {
        self.source = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkHeader`](crate::types::NetworkHeader).
    pub fn build(self) -> crate::types::NetworkHeader {
        crate::types::NetworkHeader {
            protocol: self.protocol,
            destination: self.destination,
            source: self.source,
        }
    }
}
