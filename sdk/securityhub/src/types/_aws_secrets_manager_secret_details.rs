// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Secrets Manager secret.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsSecretsManagerSecretDetails {
    /// <p>Defines the rotation schedule for the secret.</p>
    #[doc(hidden)]
    pub rotation_rules: std::option::Option<crate::types::AwsSecretsManagerSecretRotationRules>,
    /// <p>Whether the rotation occurred within the specified rotation frequency.</p>
    #[doc(hidden)]
    pub rotation_occurred_within_frequency: bool,
    /// <p>The ARN, Key ID, or alias of the KMS key used to encrypt the <code>SecretString</code> or <code>SecretBinary</code> values for versions of this secret.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>Whether rotation is enabled.</p>
    #[doc(hidden)]
    pub rotation_enabled: bool,
    /// <p>The ARN of the Lambda function that rotates the secret.</p>
    #[doc(hidden)]
    pub rotation_lambda_arn: std::option::Option<std::string::String>,
    /// <p>Whether the secret is deleted.</p>
    #[doc(hidden)]
    pub deleted: bool,
    /// <p>The name of the secret.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The user-provided description of the secret.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl AwsSecretsManagerSecretDetails {
    /// <p>Defines the rotation schedule for the secret.</p>
    pub fn rotation_rules(
        &self,
    ) -> std::option::Option<&crate::types::AwsSecretsManagerSecretRotationRules> {
        self.rotation_rules.as_ref()
    }
    /// <p>Whether the rotation occurred within the specified rotation frequency.</p>
    pub fn rotation_occurred_within_frequency(&self) -> bool {
        self.rotation_occurred_within_frequency
    }
    /// <p>The ARN, Key ID, or alias of the KMS key used to encrypt the <code>SecretString</code> or <code>SecretBinary</code> values for versions of this secret.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Whether rotation is enabled.</p>
    pub fn rotation_enabled(&self) -> bool {
        self.rotation_enabled
    }
    /// <p>The ARN of the Lambda function that rotates the secret.</p>
    pub fn rotation_lambda_arn(&self) -> std::option::Option<&str> {
        self.rotation_lambda_arn.as_deref()
    }
    /// <p>Whether the secret is deleted.</p>
    pub fn deleted(&self) -> bool {
        self.deleted
    }
    /// <p>The name of the secret.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The user-provided description of the secret.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl AwsSecretsManagerSecretDetails {
    /// Creates a new builder-style object to manufacture [`AwsSecretsManagerSecretDetails`](crate::types::AwsSecretsManagerSecretDetails).
    pub fn builder() -> crate::types::builders::AwsSecretsManagerSecretDetailsBuilder {
        crate::types::builders::AwsSecretsManagerSecretDetailsBuilder::default()
    }
}

/// A builder for [`AwsSecretsManagerSecretDetails`](crate::types::AwsSecretsManagerSecretDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsSecretsManagerSecretDetailsBuilder {
    pub(crate) rotation_rules:
        std::option::Option<crate::types::AwsSecretsManagerSecretRotationRules>,
    pub(crate) rotation_occurred_within_frequency: std::option::Option<bool>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) rotation_enabled: std::option::Option<bool>,
    pub(crate) rotation_lambda_arn: std::option::Option<std::string::String>,
    pub(crate) deleted: std::option::Option<bool>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl AwsSecretsManagerSecretDetailsBuilder {
    /// <p>Defines the rotation schedule for the secret.</p>
    pub fn rotation_rules(
        mut self,
        input: crate::types::AwsSecretsManagerSecretRotationRules,
    ) -> Self {
        self.rotation_rules = Some(input);
        self
    }
    /// <p>Defines the rotation schedule for the secret.</p>
    pub fn set_rotation_rules(
        mut self,
        input: std::option::Option<crate::types::AwsSecretsManagerSecretRotationRules>,
    ) -> Self {
        self.rotation_rules = input;
        self
    }
    /// <p>Whether the rotation occurred within the specified rotation frequency.</p>
    pub fn rotation_occurred_within_frequency(mut self, input: bool) -> Self {
        self.rotation_occurred_within_frequency = Some(input);
        self
    }
    /// <p>Whether the rotation occurred within the specified rotation frequency.</p>
    pub fn set_rotation_occurred_within_frequency(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.rotation_occurred_within_frequency = input;
        self
    }
    /// <p>The ARN, Key ID, or alias of the KMS key used to encrypt the <code>SecretString</code> or <code>SecretBinary</code> values for versions of this secret.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The ARN, Key ID, or alias of the KMS key used to encrypt the <code>SecretString</code> or <code>SecretBinary</code> values for versions of this secret.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>Whether rotation is enabled.</p>
    pub fn rotation_enabled(mut self, input: bool) -> Self {
        self.rotation_enabled = Some(input);
        self
    }
    /// <p>Whether rotation is enabled.</p>
    pub fn set_rotation_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.rotation_enabled = input;
        self
    }
    /// <p>The ARN of the Lambda function that rotates the secret.</p>
    pub fn rotation_lambda_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rotation_lambda_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda function that rotates the secret.</p>
    pub fn set_rotation_lambda_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rotation_lambda_arn = input;
        self
    }
    /// <p>Whether the secret is deleted.</p>
    pub fn deleted(mut self, input: bool) -> Self {
        self.deleted = Some(input);
        self
    }
    /// <p>Whether the secret is deleted.</p>
    pub fn set_deleted(mut self, input: std::option::Option<bool>) -> Self {
        self.deleted = input;
        self
    }
    /// <p>The name of the secret.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the secret.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The user-provided description of the secret.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The user-provided description of the secret.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsSecretsManagerSecretDetails`](crate::types::AwsSecretsManagerSecretDetails).
    pub fn build(self) -> crate::types::AwsSecretsManagerSecretDetails {
        crate::types::AwsSecretsManagerSecretDetails {
            rotation_rules: self.rotation_rules,
            rotation_occurred_within_frequency: self
                .rotation_occurred_within_frequency
                .unwrap_or_default(),
            kms_key_id: self.kms_key_id,
            rotation_enabled: self.rotation_enabled.unwrap_or_default(),
            rotation_lambda_arn: self.rotation_lambda_arn,
            deleted: self.deleted.unwrap_or_default(),
            name: self.name,
            description: self.description,
        }
    }
}
