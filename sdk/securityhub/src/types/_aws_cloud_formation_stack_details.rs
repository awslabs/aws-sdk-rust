// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Nests a stack as a resource in a top-level template. Nested stacks are stacks created as resources for another stack.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsCloudFormationStackDetails {
    /// <p>The capabilities allowed in the stack. </p>
    pub capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time at which the stack was created. </p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>A user-defined description associated with the stack. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Boolean to enable or disable rollback on stack creation failures. </p>
    pub disable_rollback: ::std::option::Option<bool>,
    /// <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. </p>
    pub drift_information: ::std::option::Option<crate::types::AwsCloudFormationStackDriftInformationDetails>,
    /// <p>Whether termination protection is enabled for the stack. </p>
    pub enable_termination_protection: ::std::option::Option<bool>,
    /// <p>The time the nested stack was last updated. This field will only be returned if the stack has been updated at least once.</p>
    pub last_updated_time: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published. </p>
    pub notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of output structures. </p>
    pub outputs: ::std::option::Option<::std::vec::Vec<crate::types::AwsCloudFormationStackOutputsDetails>>,
    /// <p>The ARN of an IAM role that's associated with the stack. </p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier of the stack. </p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The name associated with the stack. </p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>Current status of the stack. </p>
    pub stack_status: ::std::option::Option<::std::string::String>,
    /// <p>Success or failure message associated with the stack status. </p>
    pub stack_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach the <code>CREATE_COMPLETE</code> state. </p>
    pub timeout_in_minutes: ::std::option::Option<i32>,
}
impl AwsCloudFormationStackDetails {
    /// <p>The capabilities allowed in the stack. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capabilities.is_none()`.
    pub fn capabilities(&self) -> &[::std::string::String] {
        self.capabilities.as_deref().unwrap_or_default()
    }
    /// <p>The time at which the stack was created. </p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>A user-defined description associated with the stack. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Boolean to enable or disable rollback on stack creation failures. </p>
    pub fn disable_rollback(&self) -> ::std::option::Option<bool> {
        self.disable_rollback
    }
    /// <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. </p>
    pub fn drift_information(&self) -> ::std::option::Option<&crate::types::AwsCloudFormationStackDriftInformationDetails> {
        self.drift_information.as_ref()
    }
    /// <p>Whether termination protection is enabled for the stack. </p>
    pub fn enable_termination_protection(&self) -> ::std::option::Option<bool> {
        self.enable_termination_protection
    }
    /// <p>The time the nested stack was last updated. This field will only be returned if the stack has been updated at least once.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_arns.is_none()`.
    pub fn notification_arns(&self) -> &[::std::string::String] {
        self.notification_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of output structures. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outputs.is_none()`.
    pub fn outputs(&self) -> &[crate::types::AwsCloudFormationStackOutputsDetails] {
        self.outputs.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of an IAM role that's associated with the stack. </p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Unique identifier of the stack. </p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The name associated with the stack. </p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>Current status of the stack. </p>
    pub fn stack_status(&self) -> ::std::option::Option<&str> {
        self.stack_status.as_deref()
    }
    /// <p>Success or failure message associated with the stack status. </p>
    pub fn stack_status_reason(&self) -> ::std::option::Option<&str> {
        self.stack_status_reason.as_deref()
    }
    /// <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach the <code>CREATE_COMPLETE</code> state. </p>
    pub fn timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.timeout_in_minutes
    }
}
impl AwsCloudFormationStackDetails {
    /// Creates a new builder-style object to manufacture [`AwsCloudFormationStackDetails`](crate::types::AwsCloudFormationStackDetails).
    pub fn builder() -> crate::types::builders::AwsCloudFormationStackDetailsBuilder {
        crate::types::builders::AwsCloudFormationStackDetailsBuilder::default()
    }
}

/// A builder for [`AwsCloudFormationStackDetails`](crate::types::AwsCloudFormationStackDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsCloudFormationStackDetailsBuilder {
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) disable_rollback: ::std::option::Option<bool>,
    pub(crate) drift_information: ::std::option::Option<crate::types::AwsCloudFormationStackDriftInformationDetails>,
    pub(crate) enable_termination_protection: ::std::option::Option<bool>,
    pub(crate) last_updated_time: ::std::option::Option<::std::string::String>,
    pub(crate) notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) outputs: ::std::option::Option<::std::vec::Vec<crate::types::AwsCloudFormationStackOutputsDetails>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) stack_status: ::std::option::Option<::std::string::String>,
    pub(crate) stack_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) timeout_in_minutes: ::std::option::Option<i32>,
}
impl AwsCloudFormationStackDetailsBuilder {
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>The capabilities allowed in the stack. </p>
    pub fn capabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input.into());
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The capabilities allowed in the stack. </p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The capabilities allowed in the stack. </p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capabilities
    }
    /// <p>The time at which the stack was created. </p>
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time at which the stack was created. </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time at which the stack was created. </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>A user-defined description associated with the stack. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined description associated with the stack. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A user-defined description associated with the stack. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Boolean to enable or disable rollback on stack creation failures. </p>
    pub fn disable_rollback(mut self, input: bool) -> Self {
        self.disable_rollback = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean to enable or disable rollback on stack creation failures. </p>
    pub fn set_disable_rollback(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_rollback = input;
        self
    }
    /// <p>Boolean to enable or disable rollback on stack creation failures. </p>
    pub fn get_disable_rollback(&self) -> &::std::option::Option<bool> {
        &self.disable_rollback
    }
    /// <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. </p>
    pub fn drift_information(mut self, input: crate::types::AwsCloudFormationStackDriftInformationDetails) -> Self {
        self.drift_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. </p>
    pub fn set_drift_information(mut self, input: ::std::option::Option<crate::types::AwsCloudFormationStackDriftInformationDetails>) -> Self {
        self.drift_information = input;
        self
    }
    /// <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. </p>
    pub fn get_drift_information(&self) -> &::std::option::Option<crate::types::AwsCloudFormationStackDriftInformationDetails> {
        &self.drift_information
    }
    /// <p>Whether termination protection is enabled for the stack. </p>
    pub fn enable_termination_protection(mut self, input: bool) -> Self {
        self.enable_termination_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether termination protection is enabled for the stack. </p>
    pub fn set_enable_termination_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_termination_protection = input;
        self
    }
    /// <p>Whether termination protection is enabled for the stack. </p>
    pub fn get_enable_termination_protection(&self) -> &::std::option::Option<bool> {
        &self.enable_termination_protection
    }
    /// <p>The time the nested stack was last updated. This field will only be returned if the stack has been updated at least once.</p>
    pub fn last_updated_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time the nested stack was last updated. This field will only be returned if the stack has been updated at least once.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time the nested stack was last updated. This field will only be returned if the stack has been updated at least once.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_time
    }
    /// Appends an item to `notification_arns`.
    ///
    /// To override the contents of this collection use [`set_notification_arns`](Self::set_notification_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published. </p>
    pub fn notification_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.notification_arns.unwrap_or_default();
        v.push(input.into());
        self.notification_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published. </p>
    pub fn set_notification_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.notification_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published. </p>
    pub fn get_notification_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.notification_arns
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>A list of output structures. </p>
    pub fn outputs(mut self, input: crate::types::AwsCloudFormationStackOutputsDetails) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of output structures. </p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsCloudFormationStackOutputsDetails>>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>A list of output structures. </p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsCloudFormationStackOutputsDetails>> {
        &self.outputs
    }
    /// <p>The ARN of an IAM role that's associated with the stack. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role that's associated with the stack. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of an IAM role that's associated with the stack. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Unique identifier of the stack. </p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the stack. </p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>Unique identifier of the stack. </p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The name associated with the stack. </p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name associated with the stack. </p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name associated with the stack. </p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>Current status of the stack. </p>
    pub fn stack_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Current status of the stack. </p>
    pub fn set_stack_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_status = input;
        self
    }
    /// <p>Current status of the stack. </p>
    pub fn get_stack_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_status
    }
    /// <p>Success or failure message associated with the stack status. </p>
    pub fn stack_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Success or failure message associated with the stack status. </p>
    pub fn set_stack_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_status_reason = input;
        self
    }
    /// <p>Success or failure message associated with the stack status. </p>
    pub fn get_stack_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_status_reason
    }
    /// <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach the <code>CREATE_COMPLETE</code> state. </p>
    pub fn timeout_in_minutes(mut self, input: i32) -> Self {
        self.timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach the <code>CREATE_COMPLETE</code> state. </p>
    pub fn set_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_minutes = input;
        self
    }
    /// <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach the <code>CREATE_COMPLETE</code> state. </p>
    pub fn get_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_minutes
    }
    /// Consumes the builder and constructs a [`AwsCloudFormationStackDetails`](crate::types::AwsCloudFormationStackDetails).
    pub fn build(self) -> crate::types::AwsCloudFormationStackDetails {
        crate::types::AwsCloudFormationStackDetails {
            capabilities: self.capabilities,
            creation_time: self.creation_time,
            description: self.description,
            disable_rollback: self.disable_rollback,
            drift_information: self.drift_information,
            enable_termination_protection: self.enable_termination_protection,
            last_updated_time: self.last_updated_time,
            notification_arns: self.notification_arns,
            outputs: self.outputs,
            role_arn: self.role_arn,
            stack_id: self.stack_id,
            stack_name: self.stack_name,
            stack_status: self.stack_status,
            stack_status_reason: self.stack_status_reason,
            timeout_in_minutes: self.timeout_in_minutes,
        }
    }
}
