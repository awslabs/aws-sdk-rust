// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a replica of a DynamoDB table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsDynamoDbTableReplica {
    /// <p>List of global secondary indexes for the replica.</p>
    #[doc(hidden)]
    pub global_secondary_indexes: std::option::Option<
        std::vec::Vec<crate::types::AwsDynamoDbTableReplicaGlobalSecondaryIndex>,
    >,
    /// <p>The identifier of the KMS key that will be used for KMS encryption for the replica.</p>
    #[doc(hidden)]
    pub kms_master_key_id: std::option::Option<std::string::String>,
    /// <p>Replica-specific configuration for the provisioned throughput.</p>
    #[doc(hidden)]
    pub provisioned_throughput_override:
        std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughputOverride>,
    /// <p>The name of the Region where the replica is located.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
    /// <p>The current status of the replica. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub replica_status: std::option::Option<std::string::String>,
    /// <p>Detailed information about the replica status.</p>
    #[doc(hidden)]
    pub replica_status_description: std::option::Option<std::string::String>,
}
impl AwsDynamoDbTableReplica {
    /// <p>List of global secondary indexes for the replica.</p>
    pub fn global_secondary_indexes(
        &self,
    ) -> std::option::Option<&[crate::types::AwsDynamoDbTableReplicaGlobalSecondaryIndex]> {
        self.global_secondary_indexes.as_deref()
    }
    /// <p>The identifier of the KMS key that will be used for KMS encryption for the replica.</p>
    pub fn kms_master_key_id(&self) -> std::option::Option<&str> {
        self.kms_master_key_id.as_deref()
    }
    /// <p>Replica-specific configuration for the provisioned throughput.</p>
    pub fn provisioned_throughput_override(
        &self,
    ) -> std::option::Option<&crate::types::AwsDynamoDbTableProvisionedThroughputOverride> {
        self.provisioned_throughput_override.as_ref()
    }
    /// <p>The name of the Region where the replica is located.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>The current status of the replica. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn replica_status(&self) -> std::option::Option<&str> {
        self.replica_status.as_deref()
    }
    /// <p>Detailed information about the replica status.</p>
    pub fn replica_status_description(&self) -> std::option::Option<&str> {
        self.replica_status_description.as_deref()
    }
}
impl AwsDynamoDbTableReplica {
    /// Creates a new builder-style object to manufacture [`AwsDynamoDbTableReplica`](crate::types::AwsDynamoDbTableReplica).
    pub fn builder() -> crate::types::builders::AwsDynamoDbTableReplicaBuilder {
        crate::types::builders::AwsDynamoDbTableReplicaBuilder::default()
    }
}

/// A builder for [`AwsDynamoDbTableReplica`](crate::types::AwsDynamoDbTableReplica).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsDynamoDbTableReplicaBuilder {
    pub(crate) global_secondary_indexes: std::option::Option<
        std::vec::Vec<crate::types::AwsDynamoDbTableReplicaGlobalSecondaryIndex>,
    >,
    pub(crate) kms_master_key_id: std::option::Option<std::string::String>,
    pub(crate) provisioned_throughput_override:
        std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughputOverride>,
    pub(crate) region_name: std::option::Option<std::string::String>,
    pub(crate) replica_status: std::option::Option<std::string::String>,
    pub(crate) replica_status_description: std::option::Option<std::string::String>,
}
impl AwsDynamoDbTableReplicaBuilder {
    /// Appends an item to `global_secondary_indexes`.
    ///
    /// To override the contents of this collection use [`set_global_secondary_indexes`](Self::set_global_secondary_indexes).
    ///
    /// <p>List of global secondary indexes for the replica.</p>
    pub fn global_secondary_indexes(
        mut self,
        input: crate::types::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
    ) -> Self {
        let mut v = self.global_secondary_indexes.unwrap_or_default();
        v.push(input);
        self.global_secondary_indexes = Some(v);
        self
    }
    /// <p>List of global secondary indexes for the replica.</p>
    pub fn set_global_secondary_indexes(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::AwsDynamoDbTableReplicaGlobalSecondaryIndex>,
        >,
    ) -> Self {
        self.global_secondary_indexes = input;
        self
    }
    /// <p>The identifier of the KMS key that will be used for KMS encryption for the replica.</p>
    pub fn kms_master_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_master_key_id = Some(input.into());
        self
    }
    /// <p>The identifier of the KMS key that will be used for KMS encryption for the replica.</p>
    pub fn set_kms_master_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.kms_master_key_id = input;
        self
    }
    /// <p>Replica-specific configuration for the provisioned throughput.</p>
    pub fn provisioned_throughput_override(
        mut self,
        input: crate::types::AwsDynamoDbTableProvisionedThroughputOverride,
    ) -> Self {
        self.provisioned_throughput_override = Some(input);
        self
    }
    /// <p>Replica-specific configuration for the provisioned throughput.</p>
    pub fn set_provisioned_throughput_override(
        mut self,
        input: std::option::Option<crate::types::AwsDynamoDbTableProvisionedThroughputOverride>,
    ) -> Self {
        self.provisioned_throughput_override = input;
        self
    }
    /// <p>The name of the Region where the replica is located.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>The name of the Region where the replica is located.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The current status of the replica. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn replica_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.replica_status = Some(input.into());
        self
    }
    /// <p>The current status of the replica. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATING</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETING</code> </p> </li>
    /// <li> <p> <code>UPDATING</code> </p> </li>
    /// </ul>
    pub fn set_replica_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.replica_status = input;
        self
    }
    /// <p>Detailed information about the replica status.</p>
    pub fn replica_status_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.replica_status_description = Some(input.into());
        self
    }
    /// <p>Detailed information about the replica status.</p>
    pub fn set_replica_status_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replica_status_description = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsDynamoDbTableReplica`](crate::types::AwsDynamoDbTableReplica).
    pub fn build(self) -> crate::types::AwsDynamoDbTableReplica {
        crate::types::AwsDynamoDbTableReplica {
            global_secondary_indexes: self.global_secondary_indexes,
            kms_master_key_id: self.kms_master_key_id,
            provisioned_throughput_override: self.provisioned_throughput_override,
            region_name: self.region_name,
            replica_status: self.replica_status,
            replica_status_description: self.replica_status_description,
        }
    }
}
