// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about an Amazon MQ message broker. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerDetails {
    /// <p> The authentication strategy used to secure the broker. The default is <code>SIMPLE</code>. </p>
    pub authentication_strategy: ::std::option::Option<::std::string::String>,
    /// <p> Whether automatically upgrade new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. </p>
    pub auto_minor_version_upgrade: ::std::option::Option<bool>,
    /// <p> The Amazon Resource Name (ARN) of the broker. </p>
    pub broker_arn: ::std::option::Option<::std::string::String>,
    /// <p>The broker's name. </p>
    pub broker_name: ::std::option::Option<::std::string::String>,
    /// <p> The broker's deployment mode. </p>
    pub deployment_mode: ::std::option::Option<::std::string::String>,
    /// <p> Encryption options for the broker. Doesn’t apply to RabbitMQ brokers. </p>
    pub encryption_options: ::std::option::Option<crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails>,
    /// <p> The type of broker engine. </p>
    pub engine_type: ::std::option::Option<::std::string::String>,
    /// <p> The version of the broker engine. </p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p> The broker's instance type. </p>
    pub host_instance_type: ::std::option::Option<::std::string::String>,
    /// <p> The unique ID that Amazon MQ generates for the broker. </p>
    pub broker_id: ::std::option::Option<::std::string::String>,
    /// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
    pub ldap_server_metadata: ::std::option::Option<crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails>,
    /// <p> Turns on Amazon CloudWatch logging for brokers. </p>
    pub logs: ::std::option::Option<crate::types::AwsAmazonMqBrokerLogsDetails>,
    /// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
    pub maintenance_window_start_time: ::std::option::Option<crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails>,
    /// <p> Permits connections from applications outside of the VPC that hosts the broker's subnets. </p>
    pub publicly_accessible: ::std::option::Option<bool>,
    /// <p> The list of rules (one minimum, 125 maximum) that authorize connections to brokers. </p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The broker's storage type. </p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p> The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. </p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The list of all broker usernames for the specified broker. Doesn't apply to RabbitMQ brokers. </p>
    pub users: ::std::option::Option<::std::vec::Vec<crate::types::AwsAmazonMqBrokerUsersDetails>>,
}
impl AwsAmazonMqBrokerDetails {
    /// <p> The authentication strategy used to secure the broker. The default is <code>SIMPLE</code>. </p>
    pub fn authentication_strategy(&self) -> ::std::option::Option<&str> {
        self.authentication_strategy.as_deref()
    }
    /// <p> Whether automatically upgrade new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. </p>
    pub fn auto_minor_version_upgrade(&self) -> ::std::option::Option<bool> {
        self.auto_minor_version_upgrade
    }
    /// <p> The Amazon Resource Name (ARN) of the broker. </p>
    pub fn broker_arn(&self) -> ::std::option::Option<&str> {
        self.broker_arn.as_deref()
    }
    /// <p>The broker's name. </p>
    pub fn broker_name(&self) -> ::std::option::Option<&str> {
        self.broker_name.as_deref()
    }
    /// <p> The broker's deployment mode. </p>
    pub fn deployment_mode(&self) -> ::std::option::Option<&str> {
        self.deployment_mode.as_deref()
    }
    /// <p> Encryption options for the broker. Doesn’t apply to RabbitMQ brokers. </p>
    pub fn encryption_options(&self) -> ::std::option::Option<&crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails> {
        self.encryption_options.as_ref()
    }
    /// <p> The type of broker engine. </p>
    pub fn engine_type(&self) -> ::std::option::Option<&str> {
        self.engine_type.as_deref()
    }
    /// <p> The version of the broker engine. </p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p> The broker's instance type. </p>
    pub fn host_instance_type(&self) -> ::std::option::Option<&str> {
        self.host_instance_type.as_deref()
    }
    /// <p> The unique ID that Amazon MQ generates for the broker. </p>
    pub fn broker_id(&self) -> ::std::option::Option<&str> {
        self.broker_id.as_deref()
    }
    /// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
    pub fn ldap_server_metadata(&self) -> ::std::option::Option<&crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails> {
        self.ldap_server_metadata.as_ref()
    }
    /// <p> Turns on Amazon CloudWatch logging for brokers. </p>
    pub fn logs(&self) -> ::std::option::Option<&crate::types::AwsAmazonMqBrokerLogsDetails> {
        self.logs.as_ref()
    }
    /// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
    pub fn maintenance_window_start_time(&self) -> ::std::option::Option<&crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails> {
        self.maintenance_window_start_time.as_ref()
    }
    /// <p> Permits connections from applications outside of the VPC that hosts the broker's subnets. </p>
    pub fn publicly_accessible(&self) -> ::std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p> The list of rules (one minimum, 125 maximum) that authorize connections to brokers. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[::std::string::String] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p> The broker's storage type. </p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p> The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p> The list of all broker usernames for the specified broker. Doesn't apply to RabbitMQ brokers. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.users.is_none()`.
    pub fn users(&self) -> &[crate::types::AwsAmazonMqBrokerUsersDetails] {
        self.users.as_deref().unwrap_or_default()
    }
}
impl AwsAmazonMqBrokerDetails {
    /// Creates a new builder-style object to manufacture [`AwsAmazonMqBrokerDetails`](crate::types::AwsAmazonMqBrokerDetails).
    pub fn builder() -> crate::types::builders::AwsAmazonMqBrokerDetailsBuilder {
        crate::types::builders::AwsAmazonMqBrokerDetailsBuilder::default()
    }
}

/// A builder for [`AwsAmazonMqBrokerDetails`](crate::types::AwsAmazonMqBrokerDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerDetailsBuilder {
    pub(crate) authentication_strategy: ::std::option::Option<::std::string::String>,
    pub(crate) auto_minor_version_upgrade: ::std::option::Option<bool>,
    pub(crate) broker_arn: ::std::option::Option<::std::string::String>,
    pub(crate) broker_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_mode: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_options: ::std::option::Option<crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails>,
    pub(crate) engine_type: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) host_instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) broker_id: ::std::option::Option<::std::string::String>,
    pub(crate) ldap_server_metadata: ::std::option::Option<crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails>,
    pub(crate) logs: ::std::option::Option<crate::types::AwsAmazonMqBrokerLogsDetails>,
    pub(crate) maintenance_window_start_time: ::std::option::Option<crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) users: ::std::option::Option<::std::vec::Vec<crate::types::AwsAmazonMqBrokerUsersDetails>>,
}
impl AwsAmazonMqBrokerDetailsBuilder {
    /// <p> The authentication strategy used to secure the broker. The default is <code>SIMPLE</code>. </p>
    pub fn authentication_strategy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_strategy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The authentication strategy used to secure the broker. The default is <code>SIMPLE</code>. </p>
    pub fn set_authentication_strategy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_strategy = input;
        self
    }
    /// <p> The authentication strategy used to secure the broker. The default is <code>SIMPLE</code>. </p>
    pub fn get_authentication_strategy(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_strategy
    }
    /// <p> Whether automatically upgrade new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. </p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p> Whether automatically upgrade new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. </p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p> Whether automatically upgrade new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. </p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        &self.auto_minor_version_upgrade
    }
    /// <p> The Amazon Resource Name (ARN) of the broker. </p>
    pub fn broker_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.broker_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the broker. </p>
    pub fn set_broker_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.broker_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the broker. </p>
    pub fn get_broker_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.broker_arn
    }
    /// <p>The broker's name. </p>
    pub fn broker_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.broker_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The broker's name. </p>
    pub fn set_broker_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.broker_name = input;
        self
    }
    /// <p>The broker's name. </p>
    pub fn get_broker_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.broker_name
    }
    /// <p> The broker's deployment mode. </p>
    pub fn deployment_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The broker's deployment mode. </p>
    pub fn set_deployment_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_mode = input;
        self
    }
    /// <p> The broker's deployment mode. </p>
    pub fn get_deployment_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_mode
    }
    /// <p> Encryption options for the broker. Doesn’t apply to RabbitMQ brokers. </p>
    pub fn encryption_options(mut self, input: crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails) -> Self {
        self.encryption_options = ::std::option::Option::Some(input);
        self
    }
    /// <p> Encryption options for the broker. Doesn’t apply to RabbitMQ brokers. </p>
    pub fn set_encryption_options(mut self, input: ::std::option::Option<crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails>) -> Self {
        self.encryption_options = input;
        self
    }
    /// <p> Encryption options for the broker. Doesn’t apply to RabbitMQ brokers. </p>
    pub fn get_encryption_options(&self) -> &::std::option::Option<crate::types::AwsAmazonMqBrokerEncryptionOptionsDetails> {
        &self.encryption_options
    }
    /// <p> The type of broker engine. </p>
    pub fn engine_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The type of broker engine. </p>
    pub fn set_engine_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p> The type of broker engine. </p>
    pub fn get_engine_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_type
    }
    /// <p> The version of the broker engine. </p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The version of the broker engine. </p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p> The version of the broker engine. </p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p> The broker's instance type. </p>
    pub fn host_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The broker's instance type. </p>
    pub fn set_host_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_instance_type = input;
        self
    }
    /// <p> The broker's instance type. </p>
    pub fn get_host_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_instance_type
    }
    /// <p> The unique ID that Amazon MQ generates for the broker. </p>
    pub fn broker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.broker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID that Amazon MQ generates for the broker. </p>
    pub fn set_broker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.broker_id = input;
        self
    }
    /// <p> The unique ID that Amazon MQ generates for the broker. </p>
    pub fn get_broker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.broker_id
    }
    /// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
    pub fn ldap_server_metadata(mut self, input: crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails) -> Self {
        self.ldap_server_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
    pub fn set_ldap_server_metadata(mut self, input: ::std::option::Option<crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails>) -> Self {
        self.ldap_server_metadata = input;
        self
    }
    /// <p> The metadata of the Lightweight Directory Access Protocol (LDAP) server used to authenticate and authorize connections to the broker. This is an optional failover server. </p>
    pub fn get_ldap_server_metadata(&self) -> &::std::option::Option<crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails> {
        &self.ldap_server_metadata
    }
    /// <p> Turns on Amazon CloudWatch logging for brokers. </p>
    pub fn logs(mut self, input: crate::types::AwsAmazonMqBrokerLogsDetails) -> Self {
        self.logs = ::std::option::Option::Some(input);
        self
    }
    /// <p> Turns on Amazon CloudWatch logging for brokers. </p>
    pub fn set_logs(mut self, input: ::std::option::Option<crate::types::AwsAmazonMqBrokerLogsDetails>) -> Self {
        self.logs = input;
        self
    }
    /// <p> Turns on Amazon CloudWatch logging for brokers. </p>
    pub fn get_logs(&self) -> &::std::option::Option<crate::types::AwsAmazonMqBrokerLogsDetails> {
        &self.logs
    }
    /// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
    pub fn maintenance_window_start_time(mut self, input: crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails) -> Self {
        self.maintenance_window_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
    pub fn set_maintenance_window_start_time(
        mut self,
        input: ::std::option::Option<crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails>,
    ) -> Self {
        self.maintenance_window_start_time = input;
        self
    }
    /// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
    pub fn get_maintenance_window_start_time(&self) -> &::std::option::Option<crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails> {
        &self.maintenance_window_start_time
    }
    /// <p> Permits connections from applications outside of the VPC that hosts the broker's subnets. </p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p> Permits connections from applications outside of the VPC that hosts the broker's subnets. </p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p> Permits connections from applications outside of the VPC that hosts the broker's subnets. </p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p> The list of rules (one minimum, 125 maximum) that authorize connections to brokers. </p>
    pub fn security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of rules (one minimum, 125 maximum) that authorize connections to brokers. </p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p> The list of rules (one minimum, 125 maximum) that authorize connections to brokers. </p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_groups
    }
    /// <p> The broker's storage type. </p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The broker's storage type. </p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p> The broker's storage type. </p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p> The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. </p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. </p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p> The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. </p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p> The list of all broker usernames for the specified broker. Doesn't apply to RabbitMQ brokers. </p>
    pub fn users(mut self, input: crate::types::AwsAmazonMqBrokerUsersDetails) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of all broker usernames for the specified broker. Doesn't apply to RabbitMQ brokers. </p>
    pub fn set_users(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsAmazonMqBrokerUsersDetails>>) -> Self {
        self.users = input;
        self
    }
    /// <p> The list of all broker usernames for the specified broker. Doesn't apply to RabbitMQ brokers. </p>
    pub fn get_users(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsAmazonMqBrokerUsersDetails>> {
        &self.users
    }
    /// Consumes the builder and constructs a [`AwsAmazonMqBrokerDetails`](crate::types::AwsAmazonMqBrokerDetails).
    pub fn build(self) -> crate::types::AwsAmazonMqBrokerDetails {
        crate::types::AwsAmazonMqBrokerDetails {
            authentication_strategy: self.authentication_strategy,
            auto_minor_version_upgrade: self.auto_minor_version_upgrade,
            broker_arn: self.broker_arn,
            broker_name: self.broker_name,
            deployment_mode: self.deployment_mode,
            encryption_options: self.encryption_options,
            engine_type: self.engine_type,
            engine_version: self.engine_version,
            host_instance_type: self.host_instance_type,
            broker_id: self.broker_id,
            ldap_server_metadata: self.ldap_server_metadata,
            logs: self.logs,
            maintenance_window_start_time: self.maintenance_window_start_time,
            publicly_accessible: self.publicly_accessible,
            security_groups: self.security_groups,
            storage_type: self.storage_type,
            subnet_ids: self.subnet_ids,
            users: self.users,
        }
    }
}
