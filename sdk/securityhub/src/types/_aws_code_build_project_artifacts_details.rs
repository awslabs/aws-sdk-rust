// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the build artifacts for the CodeBuild project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCodeBuildProjectArtifactsDetails {
    /// <p>An identifier for the artifact definition.</p>
    #[doc(hidden)]
    pub artifact_identifier: std::option::Option<std::string::String>,
    /// <p>Indicates whether to disable encryption on the artifact. Only valid when <code>Type</code> is <code>S3</code>.</p>
    #[doc(hidden)]
    pub encryption_disabled: bool,
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The name of the S3 bucket where the artifact is located.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>Only used when Type is S3. The name of the artifact. Used with <code>NamepaceType</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The value to use for the namespace. Used with <code>Name</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    #[doc(hidden)]
    pub namespace_type: std::option::Option<std::string::String>,
    /// <p>Whether the name specified in the buildspec file overrides the artifact name.</p>
    #[doc(hidden)]
    pub override_artifact_name: bool,
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The type of output artifact to create.</p>
    #[doc(hidden)]
    pub packaging: std::option::Option<std::string::String>,
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The path to the artifact. Used with <code>Name</code> and <code>NamespaceType</code> to determine the pattern for storing the artifact.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>The type of build artifact.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectArtifactsDetails {
    /// <p>An identifier for the artifact definition.</p>
    pub fn artifact_identifier(&self) -> std::option::Option<&str> {
        self.artifact_identifier.as_deref()
    }
    /// <p>Indicates whether to disable encryption on the artifact. Only valid when <code>Type</code> is <code>S3</code>.</p>
    pub fn encryption_disabled(&self) -> bool {
        self.encryption_disabled
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The name of the S3 bucket where the artifact is located.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>Only used when Type is S3. The name of the artifact. Used with <code>NamepaceType</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The value to use for the namespace. Used with <code>Name</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn namespace_type(&self) -> std::option::Option<&str> {
        self.namespace_type.as_deref()
    }
    /// <p>Whether the name specified in the buildspec file overrides the artifact name.</p>
    pub fn override_artifact_name(&self) -> bool {
        self.override_artifact_name
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The type of output artifact to create.</p>
    pub fn packaging(&self) -> std::option::Option<&str> {
        self.packaging.as_deref()
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The path to the artifact. Used with <code>Name</code> and <code>NamespaceType</code> to determine the pattern for storing the artifact.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The type of build artifact.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsCodeBuildProjectArtifactsDetails {
    /// Creates a new builder-style object to manufacture [`AwsCodeBuildProjectArtifactsDetails`](crate::types::AwsCodeBuildProjectArtifactsDetails).
    pub fn builder() -> crate::types::builders::AwsCodeBuildProjectArtifactsDetailsBuilder {
        crate::types::builders::AwsCodeBuildProjectArtifactsDetailsBuilder::default()
    }
}

/// A builder for [`AwsCodeBuildProjectArtifactsDetails`](crate::types::AwsCodeBuildProjectArtifactsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCodeBuildProjectArtifactsDetailsBuilder {
    pub(crate) artifact_identifier: std::option::Option<std::string::String>,
    pub(crate) encryption_disabled: std::option::Option<bool>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) namespace_type: std::option::Option<std::string::String>,
    pub(crate) override_artifact_name: std::option::Option<bool>,
    pub(crate) packaging: std::option::Option<std::string::String>,
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl AwsCodeBuildProjectArtifactsDetailsBuilder {
    /// <p>An identifier for the artifact definition.</p>
    pub fn artifact_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_identifier = Some(input.into());
        self
    }
    /// <p>An identifier for the artifact definition.</p>
    pub fn set_artifact_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_identifier = input;
        self
    }
    /// <p>Indicates whether to disable encryption on the artifact. Only valid when <code>Type</code> is <code>S3</code>.</p>
    pub fn encryption_disabled(mut self, input: bool) -> Self {
        self.encryption_disabled = Some(input);
        self
    }
    /// <p>Indicates whether to disable encryption on the artifact. Only valid when <code>Type</code> is <code>S3</code>.</p>
    pub fn set_encryption_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.encryption_disabled = input;
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The name of the S3 bucket where the artifact is located.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The name of the S3 bucket where the artifact is located.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Only used when Type is S3. The name of the artifact. Used with <code>NamepaceType</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Only used when Type is S3. The name of the artifact. Used with <code>NamepaceType</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The value to use for the namespace. Used with <code>Name</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn namespace_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_type = Some(input.into());
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The value to use for the namespace. Used with <code>Name</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
    pub fn set_namespace_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_type = input;
        self
    }
    /// <p>Whether the name specified in the buildspec file overrides the artifact name.</p>
    pub fn override_artifact_name(mut self, input: bool) -> Self {
        self.override_artifact_name = Some(input);
        self
    }
    /// <p>Whether the name specified in the buildspec file overrides the artifact name.</p>
    pub fn set_override_artifact_name(mut self, input: std::option::Option<bool>) -> Self {
        self.override_artifact_name = input;
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The type of output artifact to create.</p>
    pub fn packaging(mut self, input: impl Into<std::string::String>) -> Self {
        self.packaging = Some(input.into());
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The type of output artifact to create.</p>
    pub fn set_packaging(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.packaging = input;
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The path to the artifact. Used with <code>Name</code> and <code>NamespaceType</code> to determine the pattern for storing the artifact.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>Only used when <code>Type</code> is <code>S3</code>. The path to the artifact. Used with <code>Name</code> and <code>NamespaceType</code> to determine the pattern for storing the artifact.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The type of build artifact.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of build artifact.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCodeBuildProjectArtifactsDetails`](crate::types::AwsCodeBuildProjectArtifactsDetails).
    pub fn build(self) -> crate::types::AwsCodeBuildProjectArtifactsDetails {
        crate::types::AwsCodeBuildProjectArtifactsDetails {
            artifact_identifier: self.artifact_identifier,
            encryption_disabled: self.encryption_disabled.unwrap_or_default(),
            location: self.location,
            name: self.name,
            namespace_type: self.namespace_type,
            override_artifact_name: self.override_artifact_name.unwrap_or_default(),
            packaging: self.packaging,
            path: self.path,
            r#type: self.r#type,
        }
    }
}
