// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An array with one or more objects that includes a security control (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) and the Amazon Resource Name (ARN) of a standard. The security control ID or ARN is the same across standards. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StandardsControlAssociationId {
    /// <p> The unique identifier (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) of a security control across standards. </p>
    pub security_control_id: ::std::option::Option<::std::string::String>,
    /// <p> The ARN of a standard. </p>
    pub standards_arn: ::std::option::Option<::std::string::String>,
}
impl StandardsControlAssociationId {
    /// <p> The unique identifier (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) of a security control across standards. </p>
    pub fn security_control_id(&self) -> ::std::option::Option<&str> {
        self.security_control_id.as_deref()
    }
    /// <p> The ARN of a standard. </p>
    pub fn standards_arn(&self) -> ::std::option::Option<&str> {
        self.standards_arn.as_deref()
    }
}
impl StandardsControlAssociationId {
    /// Creates a new builder-style object to manufacture [`StandardsControlAssociationId`](crate::types::StandardsControlAssociationId).
    pub fn builder() -> crate::types::builders::StandardsControlAssociationIdBuilder {
        crate::types::builders::StandardsControlAssociationIdBuilder::default()
    }
}

/// A builder for [`StandardsControlAssociationId`](crate::types::StandardsControlAssociationId).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StandardsControlAssociationIdBuilder {
    pub(crate) security_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) standards_arn: ::std::option::Option<::std::string::String>,
}
impl StandardsControlAssociationIdBuilder {
    /// <p> The unique identifier (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) of a security control across standards. </p>
    /// This field is required.
    pub fn security_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) of a security control across standards. </p>
    pub fn set_security_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_id = input;
        self
    }
    /// <p> The unique identifier (identified with <code>SecurityControlId</code>, <code>SecurityControlArn</code>, or a mix of both parameters) of a security control across standards. </p>
    pub fn get_security_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_id
    }
    /// <p> The ARN of a standard. </p>
    /// This field is required.
    pub fn standards_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standards_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN of a standard. </p>
    pub fn set_standards_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standards_arn = input;
        self
    }
    /// <p> The ARN of a standard. </p>
    pub fn get_standards_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.standards_arn
    }
    /// Consumes the builder and constructs a [`StandardsControlAssociationId`](crate::types::StandardsControlAssociationId).
    pub fn build(self) -> crate::types::StandardsControlAssociationId {
        crate::types::StandardsControlAssociationId {
            security_control_id: self.security_control_id,
            standards_arn: self.standards_arn,
        }
    }
}
