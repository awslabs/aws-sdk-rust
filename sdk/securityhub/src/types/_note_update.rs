// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The updated note.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoteUpdate {
    /// <p>The updated note text.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The principal that updated the note.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
}
impl NoteUpdate {
    /// <p>The updated note text.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The principal that updated the note.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl NoteUpdate {
    /// Creates a new builder-style object to manufacture [`NoteUpdate`](crate::types::NoteUpdate).
    pub fn builder() -> crate::types::builders::NoteUpdateBuilder {
        crate::types::builders::NoteUpdateBuilder::default()
    }
}

/// A builder for [`NoteUpdate`](crate::types::NoteUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NoteUpdateBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
}
impl NoteUpdateBuilder {
    /// <p>The updated note text.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated note text.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The updated note text.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The principal that updated the note.</p>
    /// This field is required.
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal that updated the note.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The principal that updated the note.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Consumes the builder and constructs a [`NoteUpdate`](crate::types::NoteUpdate).
    pub fn build(self) -> crate::types::NoteUpdate {
        crate::types::NoteUpdate {
            text: self.text,
            updated_by: self.updated_by,
        }
    }
}
