// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the stateless rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleGroupSourceStatelessRuleDefinition {
    /// <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
    pub match_attributes: ::std::option::Option<crate::types::RuleGroupSourceStatelessRuleMatchAttributes>,
}
impl RuleGroupSourceStatelessRuleDefinition {
    /// <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[::std::string::String] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
    pub fn match_attributes(&self) -> ::std::option::Option<&crate::types::RuleGroupSourceStatelessRuleMatchAttributes> {
        self.match_attributes.as_ref()
    }
}
impl RuleGroupSourceStatelessRuleDefinition {
    /// Creates a new builder-style object to manufacture [`RuleGroupSourceStatelessRuleDefinition`](crate::types::RuleGroupSourceStatelessRuleDefinition).
    pub fn builder() -> crate::types::builders::RuleGroupSourceStatelessRuleDefinitionBuilder {
        crate::types::builders::RuleGroupSourceStatelessRuleDefinitionBuilder::default()
    }
}

/// A builder for [`RuleGroupSourceStatelessRuleDefinition`](crate::types::RuleGroupSourceStatelessRuleDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleGroupSourceStatelessRuleDefinitionBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_attributes: ::std::option::Option<crate::types::RuleGroupSourceStatelessRuleMatchAttributes>,
}
impl RuleGroupSourceStatelessRuleDefinitionBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
    pub fn match_attributes(mut self, input: crate::types::RuleGroupSourceStatelessRuleMatchAttributes) -> Self {
        self.match_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
    pub fn set_match_attributes(mut self, input: ::std::option::Option<crate::types::RuleGroupSourceStatelessRuleMatchAttributes>) -> Self {
        self.match_attributes = input;
        self
    }
    /// <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
    pub fn get_match_attributes(&self) -> &::std::option::Option<crate::types::RuleGroupSourceStatelessRuleMatchAttributes> {
        &self.match_attributes
    }
    /// Consumes the builder and constructs a [`RuleGroupSourceStatelessRuleDefinition`](crate::types::RuleGroupSourceStatelessRuleDefinition).
    pub fn build(self) -> crate::types::RuleGroupSourceStatelessRuleDefinition {
        crate::types::RuleGroupSourceStatelessRuleDefinition {
            actions: self.actions,
            match_attributes: self.match_attributes,
        }
    }
}
