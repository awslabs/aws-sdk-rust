// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the rule group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleGroupDetails {
    /// <p>Additional settings to use in the specified rules.</p>
    #[doc(hidden)]
    pub rule_variables: std::option::Option<crate::types::RuleGroupVariables>,
    /// <p>The rules and actions for the rule group.</p>
    /// <p>For stateful rule groups, can contain <code>RulesString</code>, <code>RulesSourceList</code>, or <code>StatefulRules</code>.</p>
    /// <p>For stateless rule groups, contains <code>StatelessRulesAndCustomActions</code>.</p>
    #[doc(hidden)]
    pub rules_source: std::option::Option<crate::types::RuleGroupSource>,
}
impl RuleGroupDetails {
    /// <p>Additional settings to use in the specified rules.</p>
    pub fn rule_variables(&self) -> std::option::Option<&crate::types::RuleGroupVariables> {
        self.rule_variables.as_ref()
    }
    /// <p>The rules and actions for the rule group.</p>
    /// <p>For stateful rule groups, can contain <code>RulesString</code>, <code>RulesSourceList</code>, or <code>StatefulRules</code>.</p>
    /// <p>For stateless rule groups, contains <code>StatelessRulesAndCustomActions</code>.</p>
    pub fn rules_source(&self) -> std::option::Option<&crate::types::RuleGroupSource> {
        self.rules_source.as_ref()
    }
}
impl RuleGroupDetails {
    /// Creates a new builder-style object to manufacture [`RuleGroupDetails`](crate::types::RuleGroupDetails).
    pub fn builder() -> crate::types::builders::RuleGroupDetailsBuilder {
        crate::types::builders::RuleGroupDetailsBuilder::default()
    }
}

/// A builder for [`RuleGroupDetails`](crate::types::RuleGroupDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleGroupDetailsBuilder {
    pub(crate) rule_variables: std::option::Option<crate::types::RuleGroupVariables>,
    pub(crate) rules_source: std::option::Option<crate::types::RuleGroupSource>,
}
impl RuleGroupDetailsBuilder {
    /// <p>Additional settings to use in the specified rules.</p>
    pub fn rule_variables(mut self, input: crate::types::RuleGroupVariables) -> Self {
        self.rule_variables = Some(input);
        self
    }
    /// <p>Additional settings to use in the specified rules.</p>
    pub fn set_rule_variables(
        mut self,
        input: std::option::Option<crate::types::RuleGroupVariables>,
    ) -> Self {
        self.rule_variables = input;
        self
    }
    /// <p>The rules and actions for the rule group.</p>
    /// <p>For stateful rule groups, can contain <code>RulesString</code>, <code>RulesSourceList</code>, or <code>StatefulRules</code>.</p>
    /// <p>For stateless rule groups, contains <code>StatelessRulesAndCustomActions</code>.</p>
    pub fn rules_source(mut self, input: crate::types::RuleGroupSource) -> Self {
        self.rules_source = Some(input);
        self
    }
    /// <p>The rules and actions for the rule group.</p>
    /// <p>For stateful rule groups, can contain <code>RulesString</code>, <code>RulesSourceList</code>, or <code>StatefulRules</code>.</p>
    /// <p>For stateless rule groups, contains <code>StatelessRulesAndCustomActions</code>.</p>
    pub fn set_rules_source(
        mut self,
        input: std::option::Option<crate::types::RuleGroupSource>,
    ) -> Self {
        self.rules_source = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleGroupDetails`](crate::types::RuleGroupDetails).
    pub fn build(self) -> crate::types::RuleGroupDetails {
        crate::types::RuleGroupDetails {
            rule_variables: self.rule_variables,
            rules_source: self.rules_source,
        }
    }
}
