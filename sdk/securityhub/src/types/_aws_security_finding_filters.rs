// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight.</p>
/// <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to 20 filter values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsSecurityFindingFilters {
    /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.</p>
    pub product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub aws_account_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.</p>
    pub generator_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The Region from which the finding was generated.</p>
    pub region: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A finding type in the format of <code>namespace/category/classifier</code> that classifies a finding.</p>
    pub r#type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub first_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub last_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub created_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record. </p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub updated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The native severity as defined by the security findings provider's solution that generated the finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use FindingProviderSeverityOriginal.")]
    pub severity_product: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The normalized severity of a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel.")]
    pub severity_normalized: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The label of a finding's severity.</p>
    pub severity_label: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub confidence: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub criticality: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>A finding's title.</p>
    pub title: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A finding's description.</p>
    pub description: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The recommendation of what to do about the issue described in a finding.</p>
    pub recommendation_text: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A URL that links to a page about the current finding in the security findings provider's solution.</p>
    pub source_url: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A data type where security findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    pub product_fields: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    /// <p>The name of the solution (product) that generates findings.</p>
    pub product_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The name of the findings provider (company) that owns the solution (product) that generates findings.</p>
    pub company_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub user_defined_fields: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    /// <p>The name of the malware that was observed.</p>
    pub malware_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The type of the malware that was observed.</p>
    pub malware_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The filesystem path of the malware that was observed.</p>
    pub malware_path: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The state of the malware that was observed.</p>
    pub malware_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>Indicates the direction of network traffic associated with a finding.</p>
    pub network_direction: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The protocol of network-related information about a finding.</p>
    pub network_protocol: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub network_source_ipv4: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub network_source_ipv6: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The source port of network-related information about a finding.</p>
    pub network_source_port: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The source domain of network-related information about a finding.</p>
    pub network_source_domain: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub network_source_mac: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub network_destination_ipv4: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub network_destination_ipv6: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The destination port of network-related information about a finding.</p>
    pub network_destination_port: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The destination domain of network-related information about a finding.</p>
    pub network_destination_domain: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The name of the process.</p>
    pub process_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The path to the process executable.</p>
    pub process_path: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The process ID.</p>
    pub process_pid: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The parent process ID. This field accepts positive integers between <code>O</code> and <code>2147483647</code>.</p>
    pub process_parent_pid: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>A timestamp that identifies when the process was launched.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub process_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>A timestamp that identifies when the process was terminated.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub process_terminated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The type of a threat intelligence indicator.</p>
    pub threat_intel_indicator_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The value of a threat intelligence indicator.</p>
    pub threat_intel_indicator_value: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The category of a threat intelligence indicator.</p>
    pub threat_intel_indicator_category: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A timestamp that identifies the last observation of a threat intelligence indicator.</p>
    pub threat_intel_indicator_last_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The source of the threat intelligence.</p>
    pub threat_intel_indicator_source: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The URL for more details from the source of the threat intelligence.</p>
    pub threat_intel_indicator_source_url: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>Specifies the type of the resource that details are provided for.</p>
    pub resource_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The canonical identifier for the given resource type.</p>
    pub resource_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub resource_partition: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub resource_region: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    /// <p>The instance type of the instance.</p>
    pub resource_aws_ec2_instance_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub resource_aws_ec2_instance_image_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub resource_aws_ec2_instance_ipv4_addresses: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub resource_aws_ec2_instance_ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    /// <p>The key name associated with the instance.</p>
    pub resource_aws_ec2_instance_key_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The IAM profile ARN of the instance.</p>
    pub resource_aws_ec2_instance_iam_instance_profile_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub resource_aws_ec2_instance_vpc_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub resource_aws_ec2_instance_subnet_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The date and time the instance was launched.</p>
    pub resource_aws_ec2_instance_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub resource_aws_s3_bucket_owner_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub resource_aws_s3_bucket_owner_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The user associated with the IAM access key related to a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName.")]
    pub resource_aws_iam_access_key_user_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The name of the principal that is associated with an IAM access key.</p>
    pub resource_aws_iam_access_key_principal_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The status of the IAM access key related to a finding.</p>
    pub resource_aws_iam_access_key_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The creation date/time of the IAM access key related to a finding.</p>
    pub resource_aws_iam_access_key_created_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The name of an IAM user.</p>
    pub resource_aws_iam_user_user_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The name of the container related to a finding.</p>
    pub resource_container_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The identifier of the image related to a finding.</p>
    pub resource_container_image_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The name of the image related to a finding.</p>
    pub resource_container_image_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A timestamp that identifies when the container was started.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub resource_container_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The details of a resource that doesn't have a specific subfield for the resource type defined.</p>
    pub resource_details_other: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    /// <p>Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub compliance_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The veracity of a finding.</p>
    pub verification_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The workflow state of a finding.</p>
    /// <p>Note that this field is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    pub workflow_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code> - The initial state of a finding, before it is reviewed.</p> <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>, <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>NOTIFIED</code> - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.</p> <p>If one of the following occurs, the workflow status is changed automatically from <code>NOTIFIED</code> to <code>NEW</code>:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed.</p> <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>RESOLVED</code> - The finding was reviewed and remediated and is now considered resolved. </p> <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p> <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>, then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p> </li>
    /// </ul>
    pub workflow_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The updated record state for the finding.</p>
    pub record_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The ARN of the solution that generated a related finding.</p>
    pub related_findings_product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The solution-generated identifier for a related finding.</p>
    pub related_findings_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The text of a note.</p>
    pub note_text: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The timestamp of when the note was updated.</p>
    pub note_updated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    /// <p>The principal that created a note.</p>
    pub note_updated_by: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>A keyword for a finding.</p>
    #[deprecated(note = "The Keyword property is deprecated.")]
    pub keyword: ::std::option::Option<::std::vec::Vec<crate::types::KeywordFilter>>,
    /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub finding_provider_fields_confidence: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The finding provider value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub finding_provider_fields_criticality: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
    pub finding_provider_fields_related_findings_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
    pub finding_provider_fields_related_findings_product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The finding provider value for the severity label.</p>
    pub finding_provider_fields_severity_label: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The finding provider's original value for the severity.</p>
    pub finding_provider_fields_severity_original: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub finding_provider_fields_types: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>Indicates whether or not sample findings are included in the filter results.</p>
    pub sample: ::std::option::Option<::std::vec::Vec<crate::types::BooleanFilter>>,
    /// <p> The unique identifier of a control across standards. Values for this field typically consist of an Amazon Web Service and a number, such as APIGateway.5. </p>
    pub compliance_security_control_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p> The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html">DescribeStandards</a> API response. </p>
    pub compliance_associated_standards_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
}
impl AwsSecurityFindingFilters {
    /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.product_arn.is_none()`.
    pub fn product_arn(&self) -> &[crate::types::StringFilter] {
        self.product_arn.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_account_id.is_none()`.
    pub fn aws_account_id(&self) -> &[crate::types::StringFilter] {
        self.aws_account_id.as_deref().unwrap_or_default()
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.id.is_none()`.
    pub fn id(&self) -> &[crate::types::StringFilter] {
        self.id.as_deref().unwrap_or_default()
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.generator_id.is_none()`.
    pub fn generator_id(&self) -> &[crate::types::StringFilter] {
        self.generator_id.as_deref().unwrap_or_default()
    }
    /// <p>The Region from which the finding was generated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.region.is_none()`.
    pub fn region(&self) -> &[crate::types::StringFilter] {
        self.region.as_deref().unwrap_or_default()
    }
    /// <p>A finding type in the format of <code>namespace/category/classifier</code> that classifies a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.r#type.is_none()`.
    pub fn r#type(&self) -> &[crate::types::StringFilter] {
        self.r#type.as_deref().unwrap_or_default()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.first_observed_at.is_none()`.
    pub fn first_observed_at(&self) -> &[crate::types::DateFilter] {
        self.first_observed_at.as_deref().unwrap_or_default()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.last_observed_at.is_none()`.
    pub fn last_observed_at(&self) -> &[crate::types::DateFilter] {
        self.last_observed_at.as_deref().unwrap_or_default()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.created_at.is_none()`.
    pub fn created_at(&self) -> &[crate::types::DateFilter] {
        self.created_at.as_deref().unwrap_or_default()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record. </p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.updated_at.is_none()`.
    pub fn updated_at(&self) -> &[crate::types::DateFilter] {
        self.updated_at.as_deref().unwrap_or_default()
    }
    /// <p>The native severity as defined by the security findings provider's solution that generated the finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.severity_product.is_none()`.
    #[deprecated(note = "This filter is deprecated. Instead, use FindingProviderSeverityOriginal.")]
    pub fn severity_product(&self) -> &[crate::types::NumberFilter] {
        self.severity_product.as_deref().unwrap_or_default()
    }
    /// <p>The normalized severity of a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.severity_normalized.is_none()`.
    #[deprecated(note = "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel.")]
    pub fn severity_normalized(&self) -> &[crate::types::NumberFilter] {
        self.severity_normalized.as_deref().unwrap_or_default()
    }
    /// <p>The label of a finding's severity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.severity_label.is_none()`.
    pub fn severity_label(&self) -> &[crate::types::StringFilter] {
        self.severity_label.as_deref().unwrap_or_default()
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.confidence.is_none()`.
    pub fn confidence(&self) -> &[crate::types::NumberFilter] {
        self.confidence.as_deref().unwrap_or_default()
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.criticality.is_none()`.
    pub fn criticality(&self) -> &[crate::types::NumberFilter] {
        self.criticality.as_deref().unwrap_or_default()
    }
    /// <p>A finding's title.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.title.is_none()`.
    pub fn title(&self) -> &[crate::types::StringFilter] {
        self.title.as_deref().unwrap_or_default()
    }
    /// <p>A finding's description.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.description.is_none()`.
    pub fn description(&self) -> &[crate::types::StringFilter] {
        self.description.as_deref().unwrap_or_default()
    }
    /// <p>The recommendation of what to do about the issue described in a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recommendation_text.is_none()`.
    pub fn recommendation_text(&self) -> &[crate::types::StringFilter] {
        self.recommendation_text.as_deref().unwrap_or_default()
    }
    /// <p>A URL that links to a page about the current finding in the security findings provider's solution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_url.is_none()`.
    pub fn source_url(&self) -> &[crate::types::StringFilter] {
        self.source_url.as_deref().unwrap_or_default()
    }
    /// <p>A data type where security findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.product_fields.is_none()`.
    pub fn product_fields(&self) -> &[crate::types::MapFilter] {
        self.product_fields.as_deref().unwrap_or_default()
    }
    /// <p>The name of the solution (product) that generates findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.product_name.is_none()`.
    pub fn product_name(&self) -> &[crate::types::StringFilter] {
        self.product_name.as_deref().unwrap_or_default()
    }
    /// <p>The name of the findings provider (company) that owns the solution (product) that generates findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.company_name.is_none()`.
    pub fn company_name(&self) -> &[crate::types::StringFilter] {
        self.company_name.as_deref().unwrap_or_default()
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_defined_fields.is_none()`.
    pub fn user_defined_fields(&self) -> &[crate::types::MapFilter] {
        self.user_defined_fields.as_deref().unwrap_or_default()
    }
    /// <p>The name of the malware that was observed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.malware_name.is_none()`.
    pub fn malware_name(&self) -> &[crate::types::StringFilter] {
        self.malware_name.as_deref().unwrap_or_default()
    }
    /// <p>The type of the malware that was observed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.malware_type.is_none()`.
    pub fn malware_type(&self) -> &[crate::types::StringFilter] {
        self.malware_type.as_deref().unwrap_or_default()
    }
    /// <p>The filesystem path of the malware that was observed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.malware_path.is_none()`.
    pub fn malware_path(&self) -> &[crate::types::StringFilter] {
        self.malware_path.as_deref().unwrap_or_default()
    }
    /// <p>The state of the malware that was observed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.malware_state.is_none()`.
    pub fn malware_state(&self) -> &[crate::types::StringFilter] {
        self.malware_state.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the direction of network traffic associated with a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_direction.is_none()`.
    pub fn network_direction(&self) -> &[crate::types::StringFilter] {
        self.network_direction.as_deref().unwrap_or_default()
    }
    /// <p>The protocol of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_protocol.is_none()`.
    pub fn network_protocol(&self) -> &[crate::types::StringFilter] {
        self.network_protocol.as_deref().unwrap_or_default()
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_source_ipv4.is_none()`.
    pub fn network_source_ipv4(&self) -> &[crate::types::IpFilter] {
        self.network_source_ipv4.as_deref().unwrap_or_default()
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_source_ipv6.is_none()`.
    pub fn network_source_ipv6(&self) -> &[crate::types::IpFilter] {
        self.network_source_ipv6.as_deref().unwrap_or_default()
    }
    /// <p>The source port of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_source_port.is_none()`.
    pub fn network_source_port(&self) -> &[crate::types::NumberFilter] {
        self.network_source_port.as_deref().unwrap_or_default()
    }
    /// <p>The source domain of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_source_domain.is_none()`.
    pub fn network_source_domain(&self) -> &[crate::types::StringFilter] {
        self.network_source_domain.as_deref().unwrap_or_default()
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_source_mac.is_none()`.
    pub fn network_source_mac(&self) -> &[crate::types::StringFilter] {
        self.network_source_mac.as_deref().unwrap_or_default()
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_destination_ipv4.is_none()`.
    pub fn network_destination_ipv4(&self) -> &[crate::types::IpFilter] {
        self.network_destination_ipv4.as_deref().unwrap_or_default()
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_destination_ipv6.is_none()`.
    pub fn network_destination_ipv6(&self) -> &[crate::types::IpFilter] {
        self.network_destination_ipv6.as_deref().unwrap_or_default()
    }
    /// <p>The destination port of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_destination_port.is_none()`.
    pub fn network_destination_port(&self) -> &[crate::types::NumberFilter] {
        self.network_destination_port.as_deref().unwrap_or_default()
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_destination_domain.is_none()`.
    pub fn network_destination_domain(&self) -> &[crate::types::StringFilter] {
        self.network_destination_domain.as_deref().unwrap_or_default()
    }
    /// <p>The name of the process.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_name.is_none()`.
    pub fn process_name(&self) -> &[crate::types::StringFilter] {
        self.process_name.as_deref().unwrap_or_default()
    }
    /// <p>The path to the process executable.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_path.is_none()`.
    pub fn process_path(&self) -> &[crate::types::StringFilter] {
        self.process_path.as_deref().unwrap_or_default()
    }
    /// <p>The process ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_pid.is_none()`.
    pub fn process_pid(&self) -> &[crate::types::NumberFilter] {
        self.process_pid.as_deref().unwrap_or_default()
    }
    /// <p>The parent process ID. This field accepts positive integers between <code>O</code> and <code>2147483647</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_parent_pid.is_none()`.
    pub fn process_parent_pid(&self) -> &[crate::types::NumberFilter] {
        self.process_parent_pid.as_deref().unwrap_or_default()
    }
    /// <p>A timestamp that identifies when the process was launched.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_launched_at.is_none()`.
    pub fn process_launched_at(&self) -> &[crate::types::DateFilter] {
        self.process_launched_at.as_deref().unwrap_or_default()
    }
    /// <p>A timestamp that identifies when the process was terminated.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.process_terminated_at.is_none()`.
    pub fn process_terminated_at(&self) -> &[crate::types::DateFilter] {
        self.process_terminated_at.as_deref().unwrap_or_default()
    }
    /// <p>The type of a threat intelligence indicator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_type.is_none()`.
    pub fn threat_intel_indicator_type(&self) -> &[crate::types::StringFilter] {
        self.threat_intel_indicator_type.as_deref().unwrap_or_default()
    }
    /// <p>The value of a threat intelligence indicator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_value.is_none()`.
    pub fn threat_intel_indicator_value(&self) -> &[crate::types::StringFilter] {
        self.threat_intel_indicator_value.as_deref().unwrap_or_default()
    }
    /// <p>The category of a threat intelligence indicator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_category.is_none()`.
    pub fn threat_intel_indicator_category(&self) -> &[crate::types::StringFilter] {
        self.threat_intel_indicator_category.as_deref().unwrap_or_default()
    }
    /// <p>A timestamp that identifies the last observation of a threat intelligence indicator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_last_observed_at.is_none()`.
    pub fn threat_intel_indicator_last_observed_at(&self) -> &[crate::types::DateFilter] {
        self.threat_intel_indicator_last_observed_at.as_deref().unwrap_or_default()
    }
    /// <p>The source of the threat intelligence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_source.is_none()`.
    pub fn threat_intel_indicator_source(&self) -> &[crate::types::StringFilter] {
        self.threat_intel_indicator_source.as_deref().unwrap_or_default()
    }
    /// <p>The URL for more details from the source of the threat intelligence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_intel_indicator_source_url.is_none()`.
    pub fn threat_intel_indicator_source_url(&self) -> &[crate::types::StringFilter] {
        self.threat_intel_indicator_source_url.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the type of the resource that details are provided for.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_type.is_none()`.
    pub fn resource_type(&self) -> &[crate::types::StringFilter] {
        self.resource_type.as_deref().unwrap_or_default()
    }
    /// <p>The canonical identifier for the given resource type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_id.is_none()`.
    pub fn resource_id(&self) -> &[crate::types::StringFilter] {
        self.resource_id.as_deref().unwrap_or_default()
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_partition.is_none()`.
    pub fn resource_partition(&self) -> &[crate::types::StringFilter] {
        self.resource_partition.as_deref().unwrap_or_default()
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_region.is_none()`.
    pub fn resource_region(&self) -> &[crate::types::StringFilter] {
        self.resource_region.as_deref().unwrap_or_default()
    }
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_tags.is_none()`.
    pub fn resource_tags(&self) -> &[crate::types::MapFilter] {
        self.resource_tags.as_deref().unwrap_or_default()
    }
    /// <p>The instance type of the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_type.is_none()`.
    pub fn resource_aws_ec2_instance_type(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_type.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_image_id.is_none()`.
    pub fn resource_aws_ec2_instance_image_id(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_image_id.as_deref().unwrap_or_default()
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_ipv4_addresses.is_none()`.
    pub fn resource_aws_ec2_instance_ipv4_addresses(&self) -> &[crate::types::IpFilter] {
        self.resource_aws_ec2_instance_ipv4_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_ipv6_addresses.is_none()`.
    pub fn resource_aws_ec2_instance_ipv6_addresses(&self) -> &[crate::types::IpFilter] {
        self.resource_aws_ec2_instance_ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The key name associated with the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_key_name.is_none()`.
    pub fn resource_aws_ec2_instance_key_name(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_key_name.as_deref().unwrap_or_default()
    }
    /// <p>The IAM profile ARN of the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_iam_instance_profile_arn.is_none()`.
    pub fn resource_aws_ec2_instance_iam_instance_profile_arn(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_iam_instance_profile_arn.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_vpc_id.is_none()`.
    pub fn resource_aws_ec2_instance_vpc_id(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_vpc_id.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_subnet_id.is_none()`.
    pub fn resource_aws_ec2_instance_subnet_id(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_ec2_instance_subnet_id.as_deref().unwrap_or_default()
    }
    /// <p>The date and time the instance was launched.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_ec2_instance_launched_at.is_none()`.
    pub fn resource_aws_ec2_instance_launched_at(&self) -> &[crate::types::DateFilter] {
        self.resource_aws_ec2_instance_launched_at.as_deref().unwrap_or_default()
    }
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_s3_bucket_owner_id.is_none()`.
    pub fn resource_aws_s3_bucket_owner_id(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_s3_bucket_owner_id.as_deref().unwrap_or_default()
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_s3_bucket_owner_name.is_none()`.
    pub fn resource_aws_s3_bucket_owner_name(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_s3_bucket_owner_name.as_deref().unwrap_or_default()
    }
    /// <p>The user associated with the IAM access key related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_iam_access_key_user_name.is_none()`.
    #[deprecated(note = "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName.")]
    pub fn resource_aws_iam_access_key_user_name(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_iam_access_key_user_name.as_deref().unwrap_or_default()
    }
    /// <p>The name of the principal that is associated with an IAM access key.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_iam_access_key_principal_name.is_none()`.
    pub fn resource_aws_iam_access_key_principal_name(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_iam_access_key_principal_name.as_deref().unwrap_or_default()
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_iam_access_key_status.is_none()`.
    pub fn resource_aws_iam_access_key_status(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_iam_access_key_status.as_deref().unwrap_or_default()
    }
    /// <p>The creation date/time of the IAM access key related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_iam_access_key_created_at.is_none()`.
    pub fn resource_aws_iam_access_key_created_at(&self) -> &[crate::types::DateFilter] {
        self.resource_aws_iam_access_key_created_at.as_deref().unwrap_or_default()
    }
    /// <p>The name of an IAM user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_aws_iam_user_user_name.is_none()`.
    pub fn resource_aws_iam_user_user_name(&self) -> &[crate::types::StringFilter] {
        self.resource_aws_iam_user_user_name.as_deref().unwrap_or_default()
    }
    /// <p>The name of the container related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_container_name.is_none()`.
    pub fn resource_container_name(&self) -> &[crate::types::StringFilter] {
        self.resource_container_name.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the image related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_container_image_id.is_none()`.
    pub fn resource_container_image_id(&self) -> &[crate::types::StringFilter] {
        self.resource_container_image_id.as_deref().unwrap_or_default()
    }
    /// <p>The name of the image related to a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_container_image_name.is_none()`.
    pub fn resource_container_image_name(&self) -> &[crate::types::StringFilter] {
        self.resource_container_image_name.as_deref().unwrap_or_default()
    }
    /// <p>A timestamp that identifies when the container was started.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_container_launched_at.is_none()`.
    pub fn resource_container_launched_at(&self) -> &[crate::types::DateFilter] {
        self.resource_container_launched_at.as_deref().unwrap_or_default()
    }
    /// <p>The details of a resource that doesn't have a specific subfield for the resource type defined.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_details_other.is_none()`.
    pub fn resource_details_other(&self) -> &[crate::types::MapFilter] {
        self.resource_details_other.as_deref().unwrap_or_default()
    }
    /// <p>Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compliance_status.is_none()`.
    pub fn compliance_status(&self) -> &[crate::types::StringFilter] {
        self.compliance_status.as_deref().unwrap_or_default()
    }
    /// <p>The veracity of a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.verification_state.is_none()`.
    pub fn verification_state(&self) -> &[crate::types::StringFilter] {
        self.verification_state.as_deref().unwrap_or_default()
    }
    /// <p>The workflow state of a finding.</p>
    /// <p>Note that this field is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflow_state.is_none()`.
    pub fn workflow_state(&self) -> &[crate::types::StringFilter] {
        self.workflow_state.as_deref().unwrap_or_default()
    }
    /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code> - The initial state of a finding, before it is reviewed.</p> <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>, <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>NOTIFIED</code> - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.</p> <p>If one of the following occurs, the workflow status is changed automatically from <code>NOTIFIED</code> to <code>NEW</code>:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed.</p> <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>RESOLVED</code> - The finding was reviewed and remediated and is now considered resolved. </p> <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p> <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>, then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflow_status.is_none()`.
    pub fn workflow_status(&self) -> &[crate::types::StringFilter] {
        self.workflow_status.as_deref().unwrap_or_default()
    }
    /// <p>The updated record state for the finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.record_state.is_none()`.
    pub fn record_state(&self) -> &[crate::types::StringFilter] {
        self.record_state.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the solution that generated a related finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_findings_product_arn.is_none()`.
    pub fn related_findings_product_arn(&self) -> &[crate::types::StringFilter] {
        self.related_findings_product_arn.as_deref().unwrap_or_default()
    }
    /// <p>The solution-generated identifier for a related finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_findings_id.is_none()`.
    pub fn related_findings_id(&self) -> &[crate::types::StringFilter] {
        self.related_findings_id.as_deref().unwrap_or_default()
    }
    /// <p>The text of a note.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.note_text.is_none()`.
    pub fn note_text(&self) -> &[crate::types::StringFilter] {
        self.note_text.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp of when the note was updated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.note_updated_at.is_none()`.
    pub fn note_updated_at(&self) -> &[crate::types::DateFilter] {
        self.note_updated_at.as_deref().unwrap_or_default()
    }
    /// <p>The principal that created a note.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.note_updated_by.is_none()`.
    pub fn note_updated_by(&self) -> &[crate::types::StringFilter] {
        self.note_updated_by.as_deref().unwrap_or_default()
    }
    /// <p>A keyword for a finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.keyword.is_none()`.
    #[deprecated(note = "The Keyword property is deprecated.")]
    pub fn keyword(&self) -> &[crate::types::KeywordFilter] {
        self.keyword.as_deref().unwrap_or_default()
    }
    /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_confidence.is_none()`.
    pub fn finding_provider_fields_confidence(&self) -> &[crate::types::NumberFilter] {
        self.finding_provider_fields_confidence.as_deref().unwrap_or_default()
    }
    /// <p>The finding provider value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_criticality.is_none()`.
    pub fn finding_provider_fields_criticality(&self) -> &[crate::types::NumberFilter] {
        self.finding_provider_fields_criticality.as_deref().unwrap_or_default()
    }
    /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_related_findings_id.is_none()`.
    pub fn finding_provider_fields_related_findings_id(&self) -> &[crate::types::StringFilter] {
        self.finding_provider_fields_related_findings_id.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_related_findings_product_arn.is_none()`.
    pub fn finding_provider_fields_related_findings_product_arn(&self) -> &[crate::types::StringFilter] {
        self.finding_provider_fields_related_findings_product_arn.as_deref().unwrap_or_default()
    }
    /// <p>The finding provider value for the severity label.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_severity_label.is_none()`.
    pub fn finding_provider_fields_severity_label(&self) -> &[crate::types::StringFilter] {
        self.finding_provider_fields_severity_label.as_deref().unwrap_or_default()
    }
    /// <p>The finding provider's original value for the severity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_severity_original.is_none()`.
    pub fn finding_provider_fields_severity_original(&self) -> &[crate::types::StringFilter] {
        self.finding_provider_fields_severity_original.as_deref().unwrap_or_default()
    }
    /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_provider_fields_types.is_none()`.
    pub fn finding_provider_fields_types(&self) -> &[crate::types::StringFilter] {
        self.finding_provider_fields_types.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether or not sample findings are included in the filter results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sample.is_none()`.
    pub fn sample(&self) -> &[crate::types::BooleanFilter] {
        self.sample.as_deref().unwrap_or_default()
    }
    /// <p> The unique identifier of a control across standards. Values for this field typically consist of an Amazon Web Service and a number, such as APIGateway.5. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compliance_security_control_id.is_none()`.
    pub fn compliance_security_control_id(&self) -> &[crate::types::StringFilter] {
        self.compliance_security_control_id.as_deref().unwrap_or_default()
    }
    /// <p> The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html">DescribeStandards</a> API response. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compliance_associated_standards_id.is_none()`.
    pub fn compliance_associated_standards_id(&self) -> &[crate::types::StringFilter] {
        self.compliance_associated_standards_id.as_deref().unwrap_or_default()
    }
}
impl AwsSecurityFindingFilters {
    /// Creates a new builder-style object to manufacture [`AwsSecurityFindingFilters`](crate::types::AwsSecurityFindingFilters).
    pub fn builder() -> crate::types::builders::AwsSecurityFindingFiltersBuilder {
        crate::types::builders::AwsSecurityFindingFiltersBuilder::default()
    }
}

/// A builder for [`AwsSecurityFindingFilters`](crate::types::AwsSecurityFindingFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsSecurityFindingFiltersBuilder {
    pub(crate) product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) aws_account_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) generator_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) region: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) r#type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) first_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) last_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) created_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) updated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) severity_product: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) severity_normalized: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) severity_label: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) confidence: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) criticality: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) title: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) description: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) recommendation_text: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) source_url: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) product_fields: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    pub(crate) product_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) company_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) user_defined_fields: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    pub(crate) malware_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) malware_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) malware_path: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) malware_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) network_direction: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) network_protocol: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) network_source_ipv4: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) network_source_ipv6: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) network_source_port: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) network_source_domain: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) network_source_mac: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) network_destination_ipv4: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) network_destination_ipv6: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) network_destination_port: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) network_destination_domain: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) process_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) process_path: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) process_pid: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) process_parent_pid: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) process_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) process_terminated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) threat_intel_indicator_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) threat_intel_indicator_value: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) threat_intel_indicator_category: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) threat_intel_indicator_last_observed_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) threat_intel_indicator_source: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) threat_intel_indicator_source_url: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_partition: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_region: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    pub(crate) resource_aws_ec2_instance_type: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_image_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_ipv4_addresses: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) resource_aws_ec2_instance_ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>,
    pub(crate) resource_aws_ec2_instance_key_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_iam_instance_profile_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_vpc_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_subnet_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_ec2_instance_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) resource_aws_s3_bucket_owner_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_s3_bucket_owner_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_iam_access_key_user_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_iam_access_key_principal_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_iam_access_key_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_aws_iam_access_key_created_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) resource_aws_iam_user_user_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_container_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_container_image_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_container_image_name: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) resource_container_launched_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) resource_details_other: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>,
    pub(crate) compliance_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) verification_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) workflow_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) workflow_status: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) record_state: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) related_findings_product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) related_findings_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) note_text: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) note_updated_at: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>,
    pub(crate) note_updated_by: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) keyword: ::std::option::Option<::std::vec::Vec<crate::types::KeywordFilter>>,
    pub(crate) finding_provider_fields_confidence: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) finding_provider_fields_criticality: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>,
    pub(crate) finding_provider_fields_related_findings_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) finding_provider_fields_related_findings_product_arn: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) finding_provider_fields_severity_label: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) finding_provider_fields_severity_original: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) finding_provider_fields_types: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) sample: ::std::option::Option<::std::vec::Vec<crate::types::BooleanFilter>>,
    pub(crate) compliance_security_control_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) compliance_associated_standards_id: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
}
impl AwsSecurityFindingFiltersBuilder {
    /// Appends an item to `product_arn`.
    ///
    /// To override the contents of this collection use [`set_product_arn`](Self::set_product_arn).
    ///
    /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.</p>
    pub fn product_arn(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.product_arn.unwrap_or_default();
        v.push(input);
        self.product_arn = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.</p>
    pub fn set_product_arn(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.product_arn = input;
        self
    }
    /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.</p>
    pub fn get_product_arn(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.product_arn
    }
    /// Appends an item to `aws_account_id`.
    ///
    /// To override the contents of this collection use [`set_aws_account_id`](Self::set_aws_account_id).
    ///
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn aws_account_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.aws_account_id.unwrap_or_default();
        v.push(input);
        self.aws_account_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.aws_account_id
    }
    /// Appends an item to `id`.
    ///
    /// To override the contents of this collection use [`set_id`](Self::set_id).
    ///
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.id.unwrap_or_default();
        v.push(input);
        self.id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.id = input;
        self
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.id
    }
    /// Appends an item to `generator_id`.
    ///
    /// To override the contents of this collection use [`set_generator_id`](Self::set_generator_id).
    ///
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.</p>
    pub fn generator_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.generator_id.unwrap_or_default();
        v.push(input);
        self.generator_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.</p>
    pub fn set_generator_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.generator_id = input;
        self
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.</p>
    pub fn get_generator_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.generator_id
    }
    /// Appends an item to `region`.
    ///
    /// To override the contents of this collection use [`set_region`](Self::set_region).
    ///
    /// <p>The Region from which the finding was generated.</p>
    pub fn region(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.region.unwrap_or_default();
        v.push(input);
        self.region = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Region from which the finding was generated.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region from which the finding was generated.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.region
    }
    /// Appends an item to `r#type`.
    ///
    /// To override the contents of this collection use [`set_type`](Self::set_type).
    ///
    /// <p>A finding type in the format of <code>namespace/category/classifier</code> that classifies a finding.</p>
    pub fn r#type(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.r#type.unwrap_or_default();
        v.push(input);
        self.r#type = ::std::option::Option::Some(v);
        self
    }
    /// <p>A finding type in the format of <code>namespace/category/classifier</code> that classifies a finding.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A finding type in the format of <code>namespace/category/classifier</code> that classifies a finding.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.r#type
    }
    /// Appends an item to `first_observed_at`.
    ///
    /// To override the contents of this collection use [`set_first_observed_at`](Self::set_first_observed_at).
    ///
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn first_observed_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.first_observed_at.unwrap_or_default();
        v.push(input);
        self.first_observed_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_first_observed_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.first_observed_at = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_first_observed_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.first_observed_at
    }
    /// Appends an item to `last_observed_at`.
    ///
    /// To override the contents of this collection use [`set_last_observed_at`](Self::set_last_observed_at).
    ///
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn last_observed_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.last_observed_at.unwrap_or_default();
        v.push(input);
        self.last_observed_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_last_observed_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.last_observed_at = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_last_observed_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.last_observed_at
    }
    /// Appends an item to `created_at`.
    ///
    /// To override the contents of this collection use [`set_created_at`](Self::set_created_at).
    ///
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn created_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.created_at.unwrap_or_default();
        v.push(input);
        self.created_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.created_at
    }
    /// Appends an item to `updated_at`.
    ///
    /// To override the contents of this collection use [`set_updated_at`](Self::set_updated_at).
    ///
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record. </p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn updated_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.updated_at.unwrap_or_default();
        v.push(input);
        self.updated_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record. </p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record. </p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.updated_at
    }
    /// Appends an item to `severity_product`.
    ///
    /// To override the contents of this collection use [`set_severity_product`](Self::set_severity_product).
    ///
    /// <p>The native severity as defined by the security findings provider's solution that generated the finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use FindingProviderSeverityOriginal.")]
    pub fn severity_product(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.severity_product.unwrap_or_default();
        v.push(input);
        self.severity_product = ::std::option::Option::Some(v);
        self
    }
    /// <p>The native severity as defined by the security findings provider's solution that generated the finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use FindingProviderSeverityOriginal.")]
    pub fn set_severity_product(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.severity_product = input;
        self
    }
    /// <p>The native severity as defined by the security findings provider's solution that generated the finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use FindingProviderSeverityOriginal.")]
    pub fn get_severity_product(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.severity_product
    }
    /// Appends an item to `severity_normalized`.
    ///
    /// To override the contents of this collection use [`set_severity_normalized`](Self::set_severity_normalized).
    ///
    /// <p>The normalized severity of a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel.")]
    pub fn severity_normalized(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.severity_normalized.unwrap_or_default();
        v.push(input);
        self.severity_normalized = ::std::option::Option::Some(v);
        self
    }
    /// <p>The normalized severity of a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel.")]
    pub fn set_severity_normalized(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.severity_normalized = input;
        self
    }
    /// <p>The normalized severity of a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel.")]
    pub fn get_severity_normalized(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.severity_normalized
    }
    /// Appends an item to `severity_label`.
    ///
    /// To override the contents of this collection use [`set_severity_label`](Self::set_severity_label).
    ///
    /// <p>The label of a finding's severity.</p>
    pub fn severity_label(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.severity_label.unwrap_or_default();
        v.push(input);
        self.severity_label = ::std::option::Option::Some(v);
        self
    }
    /// <p>The label of a finding's severity.</p>
    pub fn set_severity_label(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.severity_label = input;
        self
    }
    /// <p>The label of a finding's severity.</p>
    pub fn get_severity_label(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.severity_label
    }
    /// Appends an item to `confidence`.
    ///
    /// To override the contents of this collection use [`set_confidence`](Self::set_confidence).
    ///
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn confidence(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.confidence.unwrap_or_default();
        v.push(input);
        self.confidence = ::std::option::Option::Some(v);
        self
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.confidence
    }
    /// Appends an item to `criticality`.
    ///
    /// To override the contents of this collection use [`set_criticality`](Self::set_criticality).
    ///
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn criticality(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.criticality.unwrap_or_default();
        v.push(input);
        self.criticality = ::std::option::Option::Some(v);
        self
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn set_criticality(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.criticality = input;
        self
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn get_criticality(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.criticality
    }
    /// Appends an item to `title`.
    ///
    /// To override the contents of this collection use [`set_title`](Self::set_title).
    ///
    /// <p>A finding's title.</p>
    pub fn title(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.title.unwrap_or_default();
        v.push(input);
        self.title = ::std::option::Option::Some(v);
        self
    }
    /// <p>A finding's title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.title = input;
        self
    }
    /// <p>A finding's title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.title
    }
    /// Appends an item to `description`.
    ///
    /// To override the contents of this collection use [`set_description`](Self::set_description).
    ///
    /// <p>A finding's description.</p>
    pub fn description(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.description.unwrap_or_default();
        v.push(input);
        self.description = ::std::option::Option::Some(v);
        self
    }
    /// <p>A finding's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.description = input;
        self
    }
    /// <p>A finding's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.description
    }
    /// Appends an item to `recommendation_text`.
    ///
    /// To override the contents of this collection use [`set_recommendation_text`](Self::set_recommendation_text).
    ///
    /// <p>The recommendation of what to do about the issue described in a finding.</p>
    pub fn recommendation_text(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.recommendation_text.unwrap_or_default();
        v.push(input);
        self.recommendation_text = ::std::option::Option::Some(v);
        self
    }
    /// <p>The recommendation of what to do about the issue described in a finding.</p>
    pub fn set_recommendation_text(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.recommendation_text = input;
        self
    }
    /// <p>The recommendation of what to do about the issue described in a finding.</p>
    pub fn get_recommendation_text(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.recommendation_text
    }
    /// Appends an item to `source_url`.
    ///
    /// To override the contents of this collection use [`set_source_url`](Self::set_source_url).
    ///
    /// <p>A URL that links to a page about the current finding in the security findings provider's solution.</p>
    pub fn source_url(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.source_url.unwrap_or_default();
        v.push(input);
        self.source_url = ::std::option::Option::Some(v);
        self
    }
    /// <p>A URL that links to a page about the current finding in the security findings provider's solution.</p>
    pub fn set_source_url(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>A URL that links to a page about the current finding in the security findings provider's solution.</p>
    pub fn get_source_url(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.source_url
    }
    /// Appends an item to `product_fields`.
    ///
    /// To override the contents of this collection use [`set_product_fields`](Self::set_product_fields).
    ///
    /// <p>A data type where security findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    pub fn product_fields(mut self, input: crate::types::MapFilter) -> Self {
        let mut v = self.product_fields.unwrap_or_default();
        v.push(input);
        self.product_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A data type where security findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    pub fn set_product_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>) -> Self {
        self.product_fields = input;
        self
    }
    /// <p>A data type where security findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    pub fn get_product_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MapFilter>> {
        &self.product_fields
    }
    /// Appends an item to `product_name`.
    ///
    /// To override the contents of this collection use [`set_product_name`](Self::set_product_name).
    ///
    /// <p>The name of the solution (product) that generates findings.</p>
    pub fn product_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.product_name.unwrap_or_default();
        v.push(input);
        self.product_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the solution (product) that generates findings.</p>
    pub fn set_product_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>The name of the solution (product) that generates findings.</p>
    pub fn get_product_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.product_name
    }
    /// Appends an item to `company_name`.
    ///
    /// To override the contents of this collection use [`set_company_name`](Self::set_company_name).
    ///
    /// <p>The name of the findings provider (company) that owns the solution (product) that generates findings.</p>
    pub fn company_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.company_name.unwrap_or_default();
        v.push(input);
        self.company_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the findings provider (company) that owns the solution (product) that generates findings.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>The name of the findings provider (company) that owns the solution (product) that generates findings.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.company_name
    }
    /// Appends an item to `user_defined_fields`.
    ///
    /// To override the contents of this collection use [`set_user_defined_fields`](Self::set_user_defined_fields).
    ///
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn user_defined_fields(mut self, input: crate::types::MapFilter) -> Self {
        let mut v = self.user_defined_fields.unwrap_or_default();
        v.push(input);
        self.user_defined_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn set_user_defined_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>) -> Self {
        self.user_defined_fields = input;
        self
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn get_user_defined_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MapFilter>> {
        &self.user_defined_fields
    }
    /// Appends an item to `malware_name`.
    ///
    /// To override the contents of this collection use [`set_malware_name`](Self::set_malware_name).
    ///
    /// <p>The name of the malware that was observed.</p>
    pub fn malware_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.malware_name.unwrap_or_default();
        v.push(input);
        self.malware_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the malware that was observed.</p>
    pub fn set_malware_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.malware_name = input;
        self
    }
    /// <p>The name of the malware that was observed.</p>
    pub fn get_malware_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.malware_name
    }
    /// Appends an item to `malware_type`.
    ///
    /// To override the contents of this collection use [`set_malware_type`](Self::set_malware_type).
    ///
    /// <p>The type of the malware that was observed.</p>
    pub fn malware_type(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.malware_type.unwrap_or_default();
        v.push(input);
        self.malware_type = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of the malware that was observed.</p>
    pub fn set_malware_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.malware_type = input;
        self
    }
    /// <p>The type of the malware that was observed.</p>
    pub fn get_malware_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.malware_type
    }
    /// Appends an item to `malware_path`.
    ///
    /// To override the contents of this collection use [`set_malware_path`](Self::set_malware_path).
    ///
    /// <p>The filesystem path of the malware that was observed.</p>
    pub fn malware_path(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.malware_path.unwrap_or_default();
        v.push(input);
        self.malware_path = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filesystem path of the malware that was observed.</p>
    pub fn set_malware_path(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.malware_path = input;
        self
    }
    /// <p>The filesystem path of the malware that was observed.</p>
    pub fn get_malware_path(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.malware_path
    }
    /// Appends an item to `malware_state`.
    ///
    /// To override the contents of this collection use [`set_malware_state`](Self::set_malware_state).
    ///
    /// <p>The state of the malware that was observed.</p>
    pub fn malware_state(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.malware_state.unwrap_or_default();
        v.push(input);
        self.malware_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The state of the malware that was observed.</p>
    pub fn set_malware_state(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.malware_state = input;
        self
    }
    /// <p>The state of the malware that was observed.</p>
    pub fn get_malware_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.malware_state
    }
    /// Appends an item to `network_direction`.
    ///
    /// To override the contents of this collection use [`set_network_direction`](Self::set_network_direction).
    ///
    /// <p>Indicates the direction of network traffic associated with a finding.</p>
    pub fn network_direction(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.network_direction.unwrap_or_default();
        v.push(input);
        self.network_direction = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the direction of network traffic associated with a finding.</p>
    pub fn set_network_direction(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.network_direction = input;
        self
    }
    /// <p>Indicates the direction of network traffic associated with a finding.</p>
    pub fn get_network_direction(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.network_direction
    }
    /// Appends an item to `network_protocol`.
    ///
    /// To override the contents of this collection use [`set_network_protocol`](Self::set_network_protocol).
    ///
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn network_protocol(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.network_protocol.unwrap_or_default();
        v.push(input);
        self.network_protocol = ::std::option::Option::Some(v);
        self
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn set_network_protocol(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.network_protocol = input;
        self
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn get_network_protocol(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.network_protocol
    }
    /// Appends an item to `network_source_ipv4`.
    ///
    /// To override the contents of this collection use [`set_network_source_ipv4`](Self::set_network_source_ipv4).
    ///
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn network_source_ipv4(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.network_source_ipv4.unwrap_or_default();
        v.push(input);
        self.network_source_ipv4 = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn set_network_source_ipv4(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.network_source_ipv4 = input;
        self
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn get_network_source_ipv4(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.network_source_ipv4
    }
    /// Appends an item to `network_source_ipv6`.
    ///
    /// To override the contents of this collection use [`set_network_source_ipv6`](Self::set_network_source_ipv6).
    ///
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn network_source_ipv6(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.network_source_ipv6.unwrap_or_default();
        v.push(input);
        self.network_source_ipv6 = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn set_network_source_ipv6(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.network_source_ipv6 = input;
        self
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn get_network_source_ipv6(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.network_source_ipv6
    }
    /// Appends an item to `network_source_port`.
    ///
    /// To override the contents of this collection use [`set_network_source_port`](Self::set_network_source_port).
    ///
    /// <p>The source port of network-related information about a finding.</p>
    pub fn network_source_port(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.network_source_port.unwrap_or_default();
        v.push(input);
        self.network_source_port = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn set_network_source_port(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.network_source_port = input;
        self
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn get_network_source_port(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.network_source_port
    }
    /// Appends an item to `network_source_domain`.
    ///
    /// To override the contents of this collection use [`set_network_source_domain`](Self::set_network_source_domain).
    ///
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn network_source_domain(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.network_source_domain.unwrap_or_default();
        v.push(input);
        self.network_source_domain = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn set_network_source_domain(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.network_source_domain = input;
        self
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn get_network_source_domain(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.network_source_domain
    }
    /// Appends an item to `network_source_mac`.
    ///
    /// To override the contents of this collection use [`set_network_source_mac`](Self::set_network_source_mac).
    ///
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn network_source_mac(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.network_source_mac.unwrap_or_default();
        v.push(input);
        self.network_source_mac = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn set_network_source_mac(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.network_source_mac = input;
        self
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn get_network_source_mac(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.network_source_mac
    }
    /// Appends an item to `network_destination_ipv4`.
    ///
    /// To override the contents of this collection use [`set_network_destination_ipv4`](Self::set_network_destination_ipv4).
    ///
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn network_destination_ipv4(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.network_destination_ipv4.unwrap_or_default();
        v.push(input);
        self.network_destination_ipv4 = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn set_network_destination_ipv4(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.network_destination_ipv4 = input;
        self
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn get_network_destination_ipv4(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.network_destination_ipv4
    }
    /// Appends an item to `network_destination_ipv6`.
    ///
    /// To override the contents of this collection use [`set_network_destination_ipv6`](Self::set_network_destination_ipv6).
    ///
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn network_destination_ipv6(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.network_destination_ipv6.unwrap_or_default();
        v.push(input);
        self.network_destination_ipv6 = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn set_network_destination_ipv6(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.network_destination_ipv6 = input;
        self
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn get_network_destination_ipv6(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.network_destination_ipv6
    }
    /// Appends an item to `network_destination_port`.
    ///
    /// To override the contents of this collection use [`set_network_destination_port`](Self::set_network_destination_port).
    ///
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn network_destination_port(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.network_destination_port.unwrap_or_default();
        v.push(input);
        self.network_destination_port = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn set_network_destination_port(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.network_destination_port = input;
        self
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn get_network_destination_port(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.network_destination_port
    }
    /// Appends an item to `network_destination_domain`.
    ///
    /// To override the contents of this collection use [`set_network_destination_domain`](Self::set_network_destination_domain).
    ///
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn network_destination_domain(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.network_destination_domain.unwrap_or_default();
        v.push(input);
        self.network_destination_domain = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn set_network_destination_domain(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.network_destination_domain = input;
        self
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn get_network_destination_domain(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.network_destination_domain
    }
    /// Appends an item to `process_name`.
    ///
    /// To override the contents of this collection use [`set_process_name`](Self::set_process_name).
    ///
    /// <p>The name of the process.</p>
    pub fn process_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.process_name.unwrap_or_default();
        v.push(input);
        self.process_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the process.</p>
    pub fn set_process_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.process_name = input;
        self
    }
    /// <p>The name of the process.</p>
    pub fn get_process_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.process_name
    }
    /// Appends an item to `process_path`.
    ///
    /// To override the contents of this collection use [`set_process_path`](Self::set_process_path).
    ///
    /// <p>The path to the process executable.</p>
    pub fn process_path(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.process_path.unwrap_or_default();
        v.push(input);
        self.process_path = ::std::option::Option::Some(v);
        self
    }
    /// <p>The path to the process executable.</p>
    pub fn set_process_path(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.process_path = input;
        self
    }
    /// <p>The path to the process executable.</p>
    pub fn get_process_path(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.process_path
    }
    /// Appends an item to `process_pid`.
    ///
    /// To override the contents of this collection use [`set_process_pid`](Self::set_process_pid).
    ///
    /// <p>The process ID.</p>
    pub fn process_pid(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.process_pid.unwrap_or_default();
        v.push(input);
        self.process_pid = ::std::option::Option::Some(v);
        self
    }
    /// <p>The process ID.</p>
    pub fn set_process_pid(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.process_pid = input;
        self
    }
    /// <p>The process ID.</p>
    pub fn get_process_pid(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.process_pid
    }
    /// Appends an item to `process_parent_pid`.
    ///
    /// To override the contents of this collection use [`set_process_parent_pid`](Self::set_process_parent_pid).
    ///
    /// <p>The parent process ID. This field accepts positive integers between <code>O</code> and <code>2147483647</code>.</p>
    pub fn process_parent_pid(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.process_parent_pid.unwrap_or_default();
        v.push(input);
        self.process_parent_pid = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parent process ID. This field accepts positive integers between <code>O</code> and <code>2147483647</code>.</p>
    pub fn set_process_parent_pid(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.process_parent_pid = input;
        self
    }
    /// <p>The parent process ID. This field accepts positive integers between <code>O</code> and <code>2147483647</code>.</p>
    pub fn get_process_parent_pid(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.process_parent_pid
    }
    /// Appends an item to `process_launched_at`.
    ///
    /// To override the contents of this collection use [`set_process_launched_at`](Self::set_process_launched_at).
    ///
    /// <p>A timestamp that identifies when the process was launched.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn process_launched_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.process_launched_at.unwrap_or_default();
        v.push(input);
        self.process_launched_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>A timestamp that identifies when the process was launched.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_process_launched_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.process_launched_at = input;
        self
    }
    /// <p>A timestamp that identifies when the process was launched.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_process_launched_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.process_launched_at
    }
    /// Appends an item to `process_terminated_at`.
    ///
    /// To override the contents of this collection use [`set_process_terminated_at`](Self::set_process_terminated_at).
    ///
    /// <p>A timestamp that identifies when the process was terminated.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn process_terminated_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.process_terminated_at.unwrap_or_default();
        v.push(input);
        self.process_terminated_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>A timestamp that identifies when the process was terminated.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_process_terminated_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.process_terminated_at = input;
        self
    }
    /// <p>A timestamp that identifies when the process was terminated.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_process_terminated_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.process_terminated_at
    }
    /// Appends an item to `threat_intel_indicator_type`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_type`](Self::set_threat_intel_indicator_type).
    ///
    /// <p>The type of a threat intelligence indicator.</p>
    pub fn threat_intel_indicator_type(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.threat_intel_indicator_type.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_type = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of a threat intelligence indicator.</p>
    pub fn set_threat_intel_indicator_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.threat_intel_indicator_type = input;
        self
    }
    /// <p>The type of a threat intelligence indicator.</p>
    pub fn get_threat_intel_indicator_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.threat_intel_indicator_type
    }
    /// Appends an item to `threat_intel_indicator_value`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_value`](Self::set_threat_intel_indicator_value).
    ///
    /// <p>The value of a threat intelligence indicator.</p>
    pub fn threat_intel_indicator_value(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.threat_intel_indicator_value.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_value = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value of a threat intelligence indicator.</p>
    pub fn set_threat_intel_indicator_value(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.threat_intel_indicator_value = input;
        self
    }
    /// <p>The value of a threat intelligence indicator.</p>
    pub fn get_threat_intel_indicator_value(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.threat_intel_indicator_value
    }
    /// Appends an item to `threat_intel_indicator_category`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_category`](Self::set_threat_intel_indicator_category).
    ///
    /// <p>The category of a threat intelligence indicator.</p>
    pub fn threat_intel_indicator_category(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.threat_intel_indicator_category.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_category = ::std::option::Option::Some(v);
        self
    }
    /// <p>The category of a threat intelligence indicator.</p>
    pub fn set_threat_intel_indicator_category(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.threat_intel_indicator_category = input;
        self
    }
    /// <p>The category of a threat intelligence indicator.</p>
    pub fn get_threat_intel_indicator_category(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.threat_intel_indicator_category
    }
    /// Appends an item to `threat_intel_indicator_last_observed_at`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_last_observed_at`](Self::set_threat_intel_indicator_last_observed_at).
    ///
    /// <p>A timestamp that identifies the last observation of a threat intelligence indicator.</p>
    pub fn threat_intel_indicator_last_observed_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.threat_intel_indicator_last_observed_at.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_last_observed_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>A timestamp that identifies the last observation of a threat intelligence indicator.</p>
    pub fn set_threat_intel_indicator_last_observed_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.threat_intel_indicator_last_observed_at = input;
        self
    }
    /// <p>A timestamp that identifies the last observation of a threat intelligence indicator.</p>
    pub fn get_threat_intel_indicator_last_observed_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.threat_intel_indicator_last_observed_at
    }
    /// Appends an item to `threat_intel_indicator_source`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_source`](Self::set_threat_intel_indicator_source).
    ///
    /// <p>The source of the threat intelligence.</p>
    pub fn threat_intel_indicator_source(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.threat_intel_indicator_source.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_source = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source of the threat intelligence.</p>
    pub fn set_threat_intel_indicator_source(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.threat_intel_indicator_source = input;
        self
    }
    /// <p>The source of the threat intelligence.</p>
    pub fn get_threat_intel_indicator_source(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.threat_intel_indicator_source
    }
    /// Appends an item to `threat_intel_indicator_source_url`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicator_source_url`](Self::set_threat_intel_indicator_source_url).
    ///
    /// <p>The URL for more details from the source of the threat intelligence.</p>
    pub fn threat_intel_indicator_source_url(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.threat_intel_indicator_source_url.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicator_source_url = ::std::option::Option::Some(v);
        self
    }
    /// <p>The URL for more details from the source of the threat intelligence.</p>
    pub fn set_threat_intel_indicator_source_url(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.threat_intel_indicator_source_url = input;
        self
    }
    /// <p>The URL for more details from the source of the threat intelligence.</p>
    pub fn get_threat_intel_indicator_source_url(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.threat_intel_indicator_source_url
    }
    /// Appends an item to `resource_type`.
    ///
    /// To override the contents of this collection use [`set_resource_type`](Self::set_resource_type).
    ///
    /// <p>Specifies the type of the resource that details are provided for.</p>
    pub fn resource_type(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_type.unwrap_or_default();
        v.push(input);
        self.resource_type = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the type of the resource that details are provided for.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Specifies the type of the resource that details are provided for.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_type
    }
    /// Appends an item to `resource_id`.
    ///
    /// To override the contents of this collection use [`set_resource_id`](Self::set_resource_id).
    ///
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn resource_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_id.unwrap_or_default();
        v.push(input);
        self.resource_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The canonical identifier for the given resource type.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_id
    }
    /// Appends an item to `resource_partition`.
    ///
    /// To override the contents of this collection use [`set_resource_partition`](Self::set_resource_partition).
    ///
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn resource_partition(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_partition.unwrap_or_default();
        v.push(input);
        self.resource_partition = ::std::option::Option::Some(v);
        self
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn set_resource_partition(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_partition = input;
        self
    }
    /// <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
    pub fn get_resource_partition(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_partition
    }
    /// Appends an item to `resource_region`.
    ///
    /// To override the contents of this collection use [`set_resource_region`](Self::set_resource_region).
    ///
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn resource_region(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_region.unwrap_or_default();
        v.push(input);
        self.resource_region = ::std::option::Option::Some(v);
        self
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn set_resource_region(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_region = input;
        self
    }
    /// <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
    pub fn get_resource_region(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_region
    }
    /// Appends an item to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn resource_tags(mut self, input: crate::types::MapFilter) -> Self {
        let mut v = self.resource_tags.unwrap_or_default();
        v.push(input);
        self.resource_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>A list of Amazon Web Services tags associated with a resource at the time the finding was processed.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MapFilter>> {
        &self.resource_tags
    }
    /// Appends an item to `resource_aws_ec2_instance_type`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_type`](Self::set_resource_aws_ec2_instance_type).
    ///
    /// <p>The instance type of the instance.</p>
    pub fn resource_aws_ec2_instance_type(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_type.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_type = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance type of the instance.</p>
    pub fn set_resource_aws_ec2_instance_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_ec2_instance_type = input;
        self
    }
    /// <p>The instance type of the instance.</p>
    pub fn get_resource_aws_ec2_instance_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_type
    }
    /// Appends an item to `resource_aws_ec2_instance_image_id`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_image_id`](Self::set_resource_aws_ec2_instance_image_id).
    ///
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn resource_aws_ec2_instance_image_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_image_id.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_image_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn set_resource_aws_ec2_instance_image_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_ec2_instance_image_id = input;
        self
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn get_resource_aws_ec2_instance_image_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_image_id
    }
    /// Appends an item to `resource_aws_ec2_instance_ipv4_addresses`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_ipv4_addresses`](Self::set_resource_aws_ec2_instance_ipv4_addresses).
    ///
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn resource_aws_ec2_instance_ipv4_addresses(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_ipv4_addresses.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_ipv4_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn set_resource_aws_ec2_instance_ipv4_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.resource_aws_ec2_instance_ipv4_addresses = input;
        self
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn get_resource_aws_ec2_instance_ipv4_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.resource_aws_ec2_instance_ipv4_addresses
    }
    /// Appends an item to `resource_aws_ec2_instance_ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_ipv6_addresses`](Self::set_resource_aws_ec2_instance_ipv6_addresses).
    ///
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn resource_aws_ec2_instance_ipv6_addresses(mut self, input: crate::types::IpFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_ipv6_addresses.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn set_resource_aws_ec2_instance_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpFilter>>) -> Self {
        self.resource_aws_ec2_instance_ipv6_addresses = input;
        self
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn get_resource_aws_ec2_instance_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpFilter>> {
        &self.resource_aws_ec2_instance_ipv6_addresses
    }
    /// Appends an item to `resource_aws_ec2_instance_key_name`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_key_name`](Self::set_resource_aws_ec2_instance_key_name).
    ///
    /// <p>The key name associated with the instance.</p>
    pub fn resource_aws_ec2_instance_key_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_key_name.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_key_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key name associated with the instance.</p>
    pub fn set_resource_aws_ec2_instance_key_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_ec2_instance_key_name = input;
        self
    }
    /// <p>The key name associated with the instance.</p>
    pub fn get_resource_aws_ec2_instance_key_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_key_name
    }
    /// Appends an item to `resource_aws_ec2_instance_iam_instance_profile_arn`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_iam_instance_profile_arn`](Self::set_resource_aws_ec2_instance_iam_instance_profile_arn).
    ///
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn resource_aws_ec2_instance_iam_instance_profile_arn(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_iam_instance_profile_arn.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_iam_instance_profile_arn = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn set_resource_aws_ec2_instance_iam_instance_profile_arn(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.resource_aws_ec2_instance_iam_instance_profile_arn = input;
        self
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn get_resource_aws_ec2_instance_iam_instance_profile_arn(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_iam_instance_profile_arn
    }
    /// Appends an item to `resource_aws_ec2_instance_vpc_id`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_vpc_id`](Self::set_resource_aws_ec2_instance_vpc_id).
    ///
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn resource_aws_ec2_instance_vpc_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_vpc_id.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_vpc_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn set_resource_aws_ec2_instance_vpc_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_ec2_instance_vpc_id = input;
        self
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn get_resource_aws_ec2_instance_vpc_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_vpc_id
    }
    /// Appends an item to `resource_aws_ec2_instance_subnet_id`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_subnet_id`](Self::set_resource_aws_ec2_instance_subnet_id).
    ///
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn resource_aws_ec2_instance_subnet_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_subnet_id.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_subnet_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn set_resource_aws_ec2_instance_subnet_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_ec2_instance_subnet_id = input;
        self
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn get_resource_aws_ec2_instance_subnet_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_ec2_instance_subnet_id
    }
    /// Appends an item to `resource_aws_ec2_instance_launched_at`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_ec2_instance_launched_at`](Self::set_resource_aws_ec2_instance_launched_at).
    ///
    /// <p>The date and time the instance was launched.</p>
    pub fn resource_aws_ec2_instance_launched_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.resource_aws_ec2_instance_launched_at.unwrap_or_default();
        v.push(input);
        self.resource_aws_ec2_instance_launched_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>The date and time the instance was launched.</p>
    pub fn set_resource_aws_ec2_instance_launched_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.resource_aws_ec2_instance_launched_at = input;
        self
    }
    /// <p>The date and time the instance was launched.</p>
    pub fn get_resource_aws_ec2_instance_launched_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.resource_aws_ec2_instance_launched_at
    }
    /// Appends an item to `resource_aws_s3_bucket_owner_id`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_s3_bucket_owner_id`](Self::set_resource_aws_s3_bucket_owner_id).
    ///
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn resource_aws_s3_bucket_owner_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_s3_bucket_owner_id.unwrap_or_default();
        v.push(input);
        self.resource_aws_s3_bucket_owner_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn set_resource_aws_s3_bucket_owner_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_s3_bucket_owner_id = input;
        self
    }
    /// <p>The canonical user ID of the owner of the S3 bucket.</p>
    pub fn get_resource_aws_s3_bucket_owner_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_s3_bucket_owner_id
    }
    /// Appends an item to `resource_aws_s3_bucket_owner_name`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_s3_bucket_owner_name`](Self::set_resource_aws_s3_bucket_owner_name).
    ///
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn resource_aws_s3_bucket_owner_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_s3_bucket_owner_name.unwrap_or_default();
        v.push(input);
        self.resource_aws_s3_bucket_owner_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn set_resource_aws_s3_bucket_owner_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_s3_bucket_owner_name = input;
        self
    }
    /// <p>The display name of the owner of the S3 bucket.</p>
    pub fn get_resource_aws_s3_bucket_owner_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_s3_bucket_owner_name
    }
    /// Appends an item to `resource_aws_iam_access_key_user_name`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_iam_access_key_user_name`](Self::set_resource_aws_iam_access_key_user_name).
    ///
    /// <p>The user associated with the IAM access key related to a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName.")]
    pub fn resource_aws_iam_access_key_user_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_iam_access_key_user_name.unwrap_or_default();
        v.push(input);
        self.resource_aws_iam_access_key_user_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user associated with the IAM access key related to a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName.")]
    pub fn set_resource_aws_iam_access_key_user_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_iam_access_key_user_name = input;
        self
    }
    /// <p>The user associated with the IAM access key related to a finding.</p>
    #[deprecated(note = "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName.")]
    pub fn get_resource_aws_iam_access_key_user_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_iam_access_key_user_name
    }
    /// Appends an item to `resource_aws_iam_access_key_principal_name`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_iam_access_key_principal_name`](Self::set_resource_aws_iam_access_key_principal_name).
    ///
    /// <p>The name of the principal that is associated with an IAM access key.</p>
    pub fn resource_aws_iam_access_key_principal_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_iam_access_key_principal_name.unwrap_or_default();
        v.push(input);
        self.resource_aws_iam_access_key_principal_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the principal that is associated with an IAM access key.</p>
    pub fn set_resource_aws_iam_access_key_principal_name(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.resource_aws_iam_access_key_principal_name = input;
        self
    }
    /// <p>The name of the principal that is associated with an IAM access key.</p>
    pub fn get_resource_aws_iam_access_key_principal_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_iam_access_key_principal_name
    }
    /// Appends an item to `resource_aws_iam_access_key_status`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_iam_access_key_status`](Self::set_resource_aws_iam_access_key_status).
    ///
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn resource_aws_iam_access_key_status(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_iam_access_key_status.unwrap_or_default();
        v.push(input);
        self.resource_aws_iam_access_key_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn set_resource_aws_iam_access_key_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_iam_access_key_status = input;
        self
    }
    /// <p>The status of the IAM access key related to a finding.</p>
    pub fn get_resource_aws_iam_access_key_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_iam_access_key_status
    }
    /// Appends an item to `resource_aws_iam_access_key_created_at`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_iam_access_key_created_at`](Self::set_resource_aws_iam_access_key_created_at).
    ///
    /// <p>The creation date/time of the IAM access key related to a finding.</p>
    pub fn resource_aws_iam_access_key_created_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.resource_aws_iam_access_key_created_at.unwrap_or_default();
        v.push(input);
        self.resource_aws_iam_access_key_created_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>The creation date/time of the IAM access key related to a finding.</p>
    pub fn set_resource_aws_iam_access_key_created_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.resource_aws_iam_access_key_created_at = input;
        self
    }
    /// <p>The creation date/time of the IAM access key related to a finding.</p>
    pub fn get_resource_aws_iam_access_key_created_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.resource_aws_iam_access_key_created_at
    }
    /// Appends an item to `resource_aws_iam_user_user_name`.
    ///
    /// To override the contents of this collection use [`set_resource_aws_iam_user_user_name`](Self::set_resource_aws_iam_user_user_name).
    ///
    /// <p>The name of an IAM user.</p>
    pub fn resource_aws_iam_user_user_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_aws_iam_user_user_name.unwrap_or_default();
        v.push(input);
        self.resource_aws_iam_user_user_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of an IAM user.</p>
    pub fn set_resource_aws_iam_user_user_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_aws_iam_user_user_name = input;
        self
    }
    /// <p>The name of an IAM user.</p>
    pub fn get_resource_aws_iam_user_user_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_aws_iam_user_user_name
    }
    /// Appends an item to `resource_container_name`.
    ///
    /// To override the contents of this collection use [`set_resource_container_name`](Self::set_resource_container_name).
    ///
    /// <p>The name of the container related to a finding.</p>
    pub fn resource_container_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_container_name.unwrap_or_default();
        v.push(input);
        self.resource_container_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the container related to a finding.</p>
    pub fn set_resource_container_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_container_name = input;
        self
    }
    /// <p>The name of the container related to a finding.</p>
    pub fn get_resource_container_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_container_name
    }
    /// Appends an item to `resource_container_image_id`.
    ///
    /// To override the contents of this collection use [`set_resource_container_image_id`](Self::set_resource_container_image_id).
    ///
    /// <p>The identifier of the image related to a finding.</p>
    pub fn resource_container_image_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_container_image_id.unwrap_or_default();
        v.push(input);
        self.resource_container_image_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier of the image related to a finding.</p>
    pub fn set_resource_container_image_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_container_image_id = input;
        self
    }
    /// <p>The identifier of the image related to a finding.</p>
    pub fn get_resource_container_image_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_container_image_id
    }
    /// Appends an item to `resource_container_image_name`.
    ///
    /// To override the contents of this collection use [`set_resource_container_image_name`](Self::set_resource_container_image_name).
    ///
    /// <p>The name of the image related to a finding.</p>
    pub fn resource_container_image_name(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_container_image_name.unwrap_or_default();
        v.push(input);
        self.resource_container_image_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the image related to a finding.</p>
    pub fn set_resource_container_image_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_container_image_name = input;
        self
    }
    /// <p>The name of the image related to a finding.</p>
    pub fn get_resource_container_image_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_container_image_name
    }
    /// Appends an item to `resource_container_launched_at`.
    ///
    /// To override the contents of this collection use [`set_resource_container_launched_at`](Self::set_resource_container_launched_at).
    ///
    /// <p>A timestamp that identifies when the container was started.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn resource_container_launched_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.resource_container_launched_at.unwrap_or_default();
        v.push(input);
        self.resource_container_launched_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>A timestamp that identifies when the container was started.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_resource_container_launched_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.resource_container_launched_at = input;
        self
    }
    /// <p>A timestamp that identifies when the container was started.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_resource_container_launched_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.resource_container_launched_at
    }
    /// Appends an item to `resource_details_other`.
    ///
    /// To override the contents of this collection use [`set_resource_details_other`](Self::set_resource_details_other).
    ///
    /// <p>The details of a resource that doesn't have a specific subfield for the resource type defined.</p>
    pub fn resource_details_other(mut self, input: crate::types::MapFilter) -> Self {
        let mut v = self.resource_details_other.unwrap_or_default();
        v.push(input);
        self.resource_details_other = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details of a resource that doesn't have a specific subfield for the resource type defined.</p>
    pub fn set_resource_details_other(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MapFilter>>) -> Self {
        self.resource_details_other = input;
        self
    }
    /// <p>The details of a resource that doesn't have a specific subfield for the resource type defined.</p>
    pub fn get_resource_details_other(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MapFilter>> {
        &self.resource_details_other
    }
    /// Appends an item to `compliance_status`.
    ///
    /// To override the contents of this collection use [`set_compliance_status`](Self::set_compliance_status).
    ///
    /// <p>Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn compliance_status(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.compliance_status.unwrap_or_default();
        v.push(input);
        self.compliance_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn set_compliance_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.compliance_status = input;
        self
    }
    /// <p>Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn get_compliance_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.compliance_status
    }
    /// Appends an item to `verification_state`.
    ///
    /// To override the contents of this collection use [`set_verification_state`](Self::set_verification_state).
    ///
    /// <p>The veracity of a finding.</p>
    pub fn verification_state(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.verification_state.unwrap_or_default();
        v.push(input);
        self.verification_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The veracity of a finding.</p>
    pub fn set_verification_state(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.verification_state = input;
        self
    }
    /// <p>The veracity of a finding.</p>
    pub fn get_verification_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.verification_state
    }
    /// Appends an item to `workflow_state`.
    ///
    /// To override the contents of this collection use [`set_workflow_state`](Self::set_workflow_state).
    ///
    /// <p>The workflow state of a finding.</p>
    /// <p>Note that this field is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    pub fn workflow_state(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.workflow_state.unwrap_or_default();
        v.push(input);
        self.workflow_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The workflow state of a finding.</p>
    /// <p>Note that this field is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    pub fn set_workflow_state(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.workflow_state = input;
        self
    }
    /// <p>The workflow state of a finding.</p>
    /// <p>Note that this field is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    pub fn get_workflow_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.workflow_state
    }
    /// Appends an item to `workflow_status`.
    ///
    /// To override the contents of this collection use [`set_workflow_status`](Self::set_workflow_status).
    ///
    /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code> - The initial state of a finding, before it is reviewed.</p> <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>, <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>NOTIFIED</code> - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.</p> <p>If one of the following occurs, the workflow status is changed automatically from <code>NOTIFIED</code> to <code>NEW</code>:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed.</p> <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>RESOLVED</code> - The finding was reviewed and remediated and is now considered resolved. </p> <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p> <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>, then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p> </li>
    /// </ul>
    pub fn workflow_status(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.workflow_status.unwrap_or_default();
        v.push(input);
        self.workflow_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code> - The initial state of a finding, before it is reviewed.</p> <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>, <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>NOTIFIED</code> - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.</p> <p>If one of the following occurs, the workflow status is changed automatically from <code>NOTIFIED</code> to <code>NEW</code>:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed.</p> <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>RESOLVED</code> - The finding was reviewed and remediated and is now considered resolved. </p> <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p> <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>, then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p> </li>
    /// </ul>
    pub fn set_workflow_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.workflow_status = input;
        self
    }
    /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code> - The initial state of a finding, before it is reviewed.</p> <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>, <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>NOTIFIED</code> - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.</p> <p>If one of the following occurs, the workflow status is changed automatically from <code>NOTIFIED</code> to <code>NEW</code>:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed.</p> <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>RESOLVED</code> - The finding was reviewed and remediated and is now considered resolved. </p> <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
    /// <ul>
    /// <li> <p> <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p> </li>
    /// <li> <p> <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>, <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p> </li>
    /// </ul> <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p> <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>, then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p> </li>
    /// </ul>
    pub fn get_workflow_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.workflow_status
    }
    /// Appends an item to `record_state`.
    ///
    /// To override the contents of this collection use [`set_record_state`](Self::set_record_state).
    ///
    /// <p>The updated record state for the finding.</p>
    pub fn record_state(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.record_state.unwrap_or_default();
        v.push(input);
        self.record_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated record state for the finding.</p>
    pub fn set_record_state(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.record_state = input;
        self
    }
    /// <p>The updated record state for the finding.</p>
    pub fn get_record_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.record_state
    }
    /// Appends an item to `related_findings_product_arn`.
    ///
    /// To override the contents of this collection use [`set_related_findings_product_arn`](Self::set_related_findings_product_arn).
    ///
    /// <p>The ARN of the solution that generated a related finding.</p>
    pub fn related_findings_product_arn(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.related_findings_product_arn.unwrap_or_default();
        v.push(input);
        self.related_findings_product_arn = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARN of the solution that generated a related finding.</p>
    pub fn set_related_findings_product_arn(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.related_findings_product_arn = input;
        self
    }
    /// <p>The ARN of the solution that generated a related finding.</p>
    pub fn get_related_findings_product_arn(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.related_findings_product_arn
    }
    /// Appends an item to `related_findings_id`.
    ///
    /// To override the contents of this collection use [`set_related_findings_id`](Self::set_related_findings_id).
    ///
    /// <p>The solution-generated identifier for a related finding.</p>
    pub fn related_findings_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.related_findings_id.unwrap_or_default();
        v.push(input);
        self.related_findings_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The solution-generated identifier for a related finding.</p>
    pub fn set_related_findings_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.related_findings_id = input;
        self
    }
    /// <p>The solution-generated identifier for a related finding.</p>
    pub fn get_related_findings_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.related_findings_id
    }
    /// Appends an item to `note_text`.
    ///
    /// To override the contents of this collection use [`set_note_text`](Self::set_note_text).
    ///
    /// <p>The text of a note.</p>
    pub fn note_text(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.note_text.unwrap_or_default();
        v.push(input);
        self.note_text = ::std::option::Option::Some(v);
        self
    }
    /// <p>The text of a note.</p>
    pub fn set_note_text(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.note_text = input;
        self
    }
    /// <p>The text of a note.</p>
    pub fn get_note_text(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.note_text
    }
    /// Appends an item to `note_updated_at`.
    ///
    /// To override the contents of this collection use [`set_note_updated_at`](Self::set_note_updated_at).
    ///
    /// <p>The timestamp of when the note was updated.</p>
    pub fn note_updated_at(mut self, input: crate::types::DateFilter) -> Self {
        let mut v = self.note_updated_at.unwrap_or_default();
        v.push(input);
        self.note_updated_at = ::std::option::Option::Some(v);
        self
    }
    /// <p>The timestamp of when the note was updated.</p>
    pub fn set_note_updated_at(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DateFilter>>) -> Self {
        self.note_updated_at = input;
        self
    }
    /// <p>The timestamp of when the note was updated.</p>
    pub fn get_note_updated_at(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DateFilter>> {
        &self.note_updated_at
    }
    /// Appends an item to `note_updated_by`.
    ///
    /// To override the contents of this collection use [`set_note_updated_by`](Self::set_note_updated_by).
    ///
    /// <p>The principal that created a note.</p>
    pub fn note_updated_by(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.note_updated_by.unwrap_or_default();
        v.push(input);
        self.note_updated_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>The principal that created a note.</p>
    pub fn set_note_updated_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.note_updated_by = input;
        self
    }
    /// <p>The principal that created a note.</p>
    pub fn get_note_updated_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.note_updated_by
    }
    /// Appends an item to `keyword`.
    ///
    /// To override the contents of this collection use [`set_keyword`](Self::set_keyword).
    ///
    /// <p>A keyword for a finding.</p>
    #[deprecated(note = "The Keyword property is deprecated.")]
    pub fn keyword(mut self, input: crate::types::KeywordFilter) -> Self {
        let mut v = self.keyword.unwrap_or_default();
        v.push(input);
        self.keyword = ::std::option::Option::Some(v);
        self
    }
    /// <p>A keyword for a finding.</p>
    #[deprecated(note = "The Keyword property is deprecated.")]
    pub fn set_keyword(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KeywordFilter>>) -> Self {
        self.keyword = input;
        self
    }
    /// <p>A keyword for a finding.</p>
    #[deprecated(note = "The Keyword property is deprecated.")]
    pub fn get_keyword(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KeywordFilter>> {
        &self.keyword
    }
    /// Appends an item to `finding_provider_fields_confidence`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_confidence`](Self::set_finding_provider_fields_confidence).
    ///
    /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn finding_provider_fields_confidence(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.finding_provider_fields_confidence.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_confidence = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn set_finding_provider_fields_confidence(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.finding_provider_fields_confidence = input;
        self
    }
    /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn get_finding_provider_fields_confidence(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.finding_provider_fields_confidence
    }
    /// Appends an item to `finding_provider_fields_criticality`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_criticality`](Self::set_finding_provider_fields_criticality).
    ///
    /// <p>The finding provider value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn finding_provider_fields_criticality(mut self, input: crate::types::NumberFilter) -> Self {
        let mut v = self.finding_provider_fields_criticality.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_criticality = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding provider value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn set_finding_provider_fields_criticality(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>>) -> Self {
        self.finding_provider_fields_criticality = input;
        self
    }
    /// <p>The finding provider value for the level of importance assigned to the resources associated with the findings.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    pub fn get_finding_provider_fields_criticality(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberFilter>> {
        &self.finding_provider_fields_criticality
    }
    /// Appends an item to `finding_provider_fields_related_findings_id`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_related_findings_id`](Self::set_finding_provider_fields_related_findings_id).
    ///
    /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
    pub fn finding_provider_fields_related_findings_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.finding_provider_fields_related_findings_id.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_related_findings_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
    pub fn set_finding_provider_fields_related_findings_id(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.finding_provider_fields_related_findings_id = input;
        self
    }
    /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
    pub fn get_finding_provider_fields_related_findings_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.finding_provider_fields_related_findings_id
    }
    /// Appends an item to `finding_provider_fields_related_findings_product_arn`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_related_findings_product_arn`](Self::set_finding_provider_fields_related_findings_product_arn).
    ///
    /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
    pub fn finding_provider_fields_related_findings_product_arn(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.finding_provider_fields_related_findings_product_arn.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_related_findings_product_arn = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
    pub fn set_finding_provider_fields_related_findings_product_arn(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.finding_provider_fields_related_findings_product_arn = input;
        self
    }
    /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
    pub fn get_finding_provider_fields_related_findings_product_arn(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.finding_provider_fields_related_findings_product_arn
    }
    /// Appends an item to `finding_provider_fields_severity_label`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_severity_label`](Self::set_finding_provider_fields_severity_label).
    ///
    /// <p>The finding provider value for the severity label.</p>
    pub fn finding_provider_fields_severity_label(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.finding_provider_fields_severity_label.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_severity_label = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding provider value for the severity label.</p>
    pub fn set_finding_provider_fields_severity_label(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.finding_provider_fields_severity_label = input;
        self
    }
    /// <p>The finding provider value for the severity label.</p>
    pub fn get_finding_provider_fields_severity_label(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.finding_provider_fields_severity_label
    }
    /// Appends an item to `finding_provider_fields_severity_original`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_severity_original`](Self::set_finding_provider_fields_severity_original).
    ///
    /// <p>The finding provider's original value for the severity.</p>
    pub fn finding_provider_fields_severity_original(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.finding_provider_fields_severity_original.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_severity_original = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding provider's original value for the severity.</p>
    pub fn set_finding_provider_fields_severity_original(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.finding_provider_fields_severity_original = input;
        self
    }
    /// <p>The finding provider's original value for the severity.</p>
    pub fn get_finding_provider_fields_severity_original(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.finding_provider_fields_severity_original
    }
    /// Appends an item to `finding_provider_fields_types`.
    ///
    /// To override the contents of this collection use [`set_finding_provider_fields_types`](Self::set_finding_provider_fields_types).
    ///
    /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn finding_provider_fields_types(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.finding_provider_fields_types.unwrap_or_default();
        v.push(input);
        self.finding_provider_fields_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn set_finding_provider_fields_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.finding_provider_fields_types = input;
        self
    }
    /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn get_finding_provider_fields_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.finding_provider_fields_types
    }
    /// Appends an item to `sample`.
    ///
    /// To override the contents of this collection use [`set_sample`](Self::set_sample).
    ///
    /// <p>Indicates whether or not sample findings are included in the filter results.</p>
    pub fn sample(mut self, input: crate::types::BooleanFilter) -> Self {
        let mut v = self.sample.unwrap_or_default();
        v.push(input);
        self.sample = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates whether or not sample findings are included in the filter results.</p>
    pub fn set_sample(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BooleanFilter>>) -> Self {
        self.sample = input;
        self
    }
    /// <p>Indicates whether or not sample findings are included in the filter results.</p>
    pub fn get_sample(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BooleanFilter>> {
        &self.sample
    }
    /// Appends an item to `compliance_security_control_id`.
    ///
    /// To override the contents of this collection use [`set_compliance_security_control_id`](Self::set_compliance_security_control_id).
    ///
    /// <p> The unique identifier of a control across standards. Values for this field typically consist of an Amazon Web Service and a number, such as APIGateway.5. </p>
    pub fn compliance_security_control_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.compliance_security_control_id.unwrap_or_default();
        v.push(input);
        self.compliance_security_control_id = ::std::option::Option::Some(v);
        self
    }
    /// <p> The unique identifier of a control across standards. Values for this field typically consist of an Amazon Web Service and a number, such as APIGateway.5. </p>
    pub fn set_compliance_security_control_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.compliance_security_control_id = input;
        self
    }
    /// <p> The unique identifier of a control across standards. Values for this field typically consist of an Amazon Web Service and a number, such as APIGateway.5. </p>
    pub fn get_compliance_security_control_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.compliance_security_control_id
    }
    /// Appends an item to `compliance_associated_standards_id`.
    ///
    /// To override the contents of this collection use [`set_compliance_associated_standards_id`](Self::set_compliance_associated_standards_id).
    ///
    /// <p> The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html">DescribeStandards</a> API response. </p>
    pub fn compliance_associated_standards_id(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.compliance_associated_standards_id.unwrap_or_default();
        v.push(input);
        self.compliance_associated_standards_id = ::std::option::Option::Some(v);
        self
    }
    /// <p> The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html">DescribeStandards</a> API response. </p>
    pub fn set_compliance_associated_standards_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.compliance_associated_standards_id = input;
        self
    }
    /// <p> The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html">DescribeStandards</a> API response. </p>
    pub fn get_compliance_associated_standards_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.compliance_associated_standards_id
    }
    /// Consumes the builder and constructs a [`AwsSecurityFindingFilters`](crate::types::AwsSecurityFindingFilters).
    pub fn build(self) -> crate::types::AwsSecurityFindingFilters {
        crate::types::AwsSecurityFindingFilters {
            product_arn: self.product_arn,
            aws_account_id: self.aws_account_id,
            id: self.id,
            generator_id: self.generator_id,
            region: self.region,
            r#type: self.r#type,
            first_observed_at: self.first_observed_at,
            last_observed_at: self.last_observed_at,
            created_at: self.created_at,
            updated_at: self.updated_at,
            severity_product: self.severity_product,
            severity_normalized: self.severity_normalized,
            severity_label: self.severity_label,
            confidence: self.confidence,
            criticality: self.criticality,
            title: self.title,
            description: self.description,
            recommendation_text: self.recommendation_text,
            source_url: self.source_url,
            product_fields: self.product_fields,
            product_name: self.product_name,
            company_name: self.company_name,
            user_defined_fields: self.user_defined_fields,
            malware_name: self.malware_name,
            malware_type: self.malware_type,
            malware_path: self.malware_path,
            malware_state: self.malware_state,
            network_direction: self.network_direction,
            network_protocol: self.network_protocol,
            network_source_ipv4: self.network_source_ipv4,
            network_source_ipv6: self.network_source_ipv6,
            network_source_port: self.network_source_port,
            network_source_domain: self.network_source_domain,
            network_source_mac: self.network_source_mac,
            network_destination_ipv4: self.network_destination_ipv4,
            network_destination_ipv6: self.network_destination_ipv6,
            network_destination_port: self.network_destination_port,
            network_destination_domain: self.network_destination_domain,
            process_name: self.process_name,
            process_path: self.process_path,
            process_pid: self.process_pid,
            process_parent_pid: self.process_parent_pid,
            process_launched_at: self.process_launched_at,
            process_terminated_at: self.process_terminated_at,
            threat_intel_indicator_type: self.threat_intel_indicator_type,
            threat_intel_indicator_value: self.threat_intel_indicator_value,
            threat_intel_indicator_category: self.threat_intel_indicator_category,
            threat_intel_indicator_last_observed_at: self.threat_intel_indicator_last_observed_at,
            threat_intel_indicator_source: self.threat_intel_indicator_source,
            threat_intel_indicator_source_url: self.threat_intel_indicator_source_url,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            resource_partition: self.resource_partition,
            resource_region: self.resource_region,
            resource_tags: self.resource_tags,
            resource_aws_ec2_instance_type: self.resource_aws_ec2_instance_type,
            resource_aws_ec2_instance_image_id: self.resource_aws_ec2_instance_image_id,
            resource_aws_ec2_instance_ipv4_addresses: self.resource_aws_ec2_instance_ipv4_addresses,
            resource_aws_ec2_instance_ipv6_addresses: self.resource_aws_ec2_instance_ipv6_addresses,
            resource_aws_ec2_instance_key_name: self.resource_aws_ec2_instance_key_name,
            resource_aws_ec2_instance_iam_instance_profile_arn: self.resource_aws_ec2_instance_iam_instance_profile_arn,
            resource_aws_ec2_instance_vpc_id: self.resource_aws_ec2_instance_vpc_id,
            resource_aws_ec2_instance_subnet_id: self.resource_aws_ec2_instance_subnet_id,
            resource_aws_ec2_instance_launched_at: self.resource_aws_ec2_instance_launched_at,
            resource_aws_s3_bucket_owner_id: self.resource_aws_s3_bucket_owner_id,
            resource_aws_s3_bucket_owner_name: self.resource_aws_s3_bucket_owner_name,
            resource_aws_iam_access_key_user_name: self.resource_aws_iam_access_key_user_name,
            resource_aws_iam_access_key_principal_name: self.resource_aws_iam_access_key_principal_name,
            resource_aws_iam_access_key_status: self.resource_aws_iam_access_key_status,
            resource_aws_iam_access_key_created_at: self.resource_aws_iam_access_key_created_at,
            resource_aws_iam_user_user_name: self.resource_aws_iam_user_user_name,
            resource_container_name: self.resource_container_name,
            resource_container_image_id: self.resource_container_image_id,
            resource_container_image_name: self.resource_container_image_name,
            resource_container_launched_at: self.resource_container_launched_at,
            resource_details_other: self.resource_details_other,
            compliance_status: self.compliance_status,
            verification_state: self.verification_state,
            workflow_state: self.workflow_state,
            workflow_status: self.workflow_status,
            record_state: self.record_state,
            related_findings_product_arn: self.related_findings_product_arn,
            related_findings_id: self.related_findings_id,
            note_text: self.note_text,
            note_updated_at: self.note_updated_at,
            note_updated_by: self.note_updated_by,
            keyword: self.keyword,
            finding_provider_fields_confidence: self.finding_provider_fields_confidence,
            finding_provider_fields_criticality: self.finding_provider_fields_criticality,
            finding_provider_fields_related_findings_id: self.finding_provider_fields_related_findings_id,
            finding_provider_fields_related_findings_product_arn: self.finding_provider_fields_related_findings_product_arn,
            finding_provider_fields_severity_label: self.finding_provider_fields_severity_label,
            finding_provider_fields_severity_original: self.finding_provider_fields_severity_original,
            finding_provider_fields_types: self.finding_provider_fields_types,
            sample: self.sample,
            compliance_security_control_id: self.compliance_security_control_id,
            compliance_associated_standards_id: self.compliance_associated_standards_id,
        }
    }
}
