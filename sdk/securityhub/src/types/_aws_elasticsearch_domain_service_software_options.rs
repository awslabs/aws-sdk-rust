// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the state of the domain relative to the latest service software.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsElasticsearchDomainServiceSoftwareOptions {
    /// <p>The epoch time when the deployment window closes for required updates. After this time, Amazon OpenSearch Service schedules the software upgrade automatically.</p>
    #[doc(hidden)]
    pub automated_update_date: std::option::Option<std::string::String>,
    /// <p>Whether a request to update the domain can be canceled.</p>
    #[doc(hidden)]
    pub cancellable: bool,
    /// <p>The version of the service software that is currently installed on the domain.</p>
    #[doc(hidden)]
    pub current_version: std::option::Option<std::string::String>,
    /// <p>A more detailed description of the service software status.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The most recent version of the service software.</p>
    #[doc(hidden)]
    pub new_version: std::option::Option<std::string::String>,
    /// <p>Whether a service software update is available for the domain.</p>
    #[doc(hidden)]
    pub update_available: bool,
    /// <p>The status of the service software update. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> </p> </li>
    /// <li> <p> <code>ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>NOT_ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>PENDING_UPDATE</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub update_status: std::option::Option<std::string::String>,
}
impl AwsElasticsearchDomainServiceSoftwareOptions {
    /// <p>The epoch time when the deployment window closes for required updates. After this time, Amazon OpenSearch Service schedules the software upgrade automatically.</p>
    pub fn automated_update_date(&self) -> std::option::Option<&str> {
        self.automated_update_date.as_deref()
    }
    /// <p>Whether a request to update the domain can be canceled.</p>
    pub fn cancellable(&self) -> bool {
        self.cancellable
    }
    /// <p>The version of the service software that is currently installed on the domain.</p>
    pub fn current_version(&self) -> std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>A more detailed description of the service software status.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The most recent version of the service software.</p>
    pub fn new_version(&self) -> std::option::Option<&str> {
        self.new_version.as_deref()
    }
    /// <p>Whether a service software update is available for the domain.</p>
    pub fn update_available(&self) -> bool {
        self.update_available
    }
    /// <p>The status of the service software update. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> </p> </li>
    /// <li> <p> <code>ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>NOT_ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>PENDING_UPDATE</code> </p> </li>
    /// </ul>
    pub fn update_status(&self) -> std::option::Option<&str> {
        self.update_status.as_deref()
    }
}
impl AwsElasticsearchDomainServiceSoftwareOptions {
    /// Creates a new builder-style object to manufacture [`AwsElasticsearchDomainServiceSoftwareOptions`](crate::types::AwsElasticsearchDomainServiceSoftwareOptions).
    pub fn builder() -> crate::types::builders::AwsElasticsearchDomainServiceSoftwareOptionsBuilder
    {
        crate::types::builders::AwsElasticsearchDomainServiceSoftwareOptionsBuilder::default()
    }
}

/// A builder for [`AwsElasticsearchDomainServiceSoftwareOptions`](crate::types::AwsElasticsearchDomainServiceSoftwareOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsElasticsearchDomainServiceSoftwareOptionsBuilder {
    pub(crate) automated_update_date: std::option::Option<std::string::String>,
    pub(crate) cancellable: std::option::Option<bool>,
    pub(crate) current_version: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) new_version: std::option::Option<std::string::String>,
    pub(crate) update_available: std::option::Option<bool>,
    pub(crate) update_status: std::option::Option<std::string::String>,
}
impl AwsElasticsearchDomainServiceSoftwareOptionsBuilder {
    /// <p>The epoch time when the deployment window closes for required updates. After this time, Amazon OpenSearch Service schedules the software upgrade automatically.</p>
    pub fn automated_update_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.automated_update_date = Some(input.into());
        self
    }
    /// <p>The epoch time when the deployment window closes for required updates. After this time, Amazon OpenSearch Service schedules the software upgrade automatically.</p>
    pub fn set_automated_update_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.automated_update_date = input;
        self
    }
    /// <p>Whether a request to update the domain can be canceled.</p>
    pub fn cancellable(mut self, input: bool) -> Self {
        self.cancellable = Some(input);
        self
    }
    /// <p>Whether a request to update the domain can be canceled.</p>
    pub fn set_cancellable(mut self, input: std::option::Option<bool>) -> Self {
        self.cancellable = input;
        self
    }
    /// <p>The version of the service software that is currently installed on the domain.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_version = Some(input.into());
        self
    }
    /// <p>The version of the service software that is currently installed on the domain.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>A more detailed description of the service software status.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A more detailed description of the service software status.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The most recent version of the service software.</p>
    pub fn new_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_version = Some(input.into());
        self
    }
    /// <p>The most recent version of the service software.</p>
    pub fn set_new_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_version = input;
        self
    }
    /// <p>Whether a service software update is available for the domain.</p>
    pub fn update_available(mut self, input: bool) -> Self {
        self.update_available = Some(input);
        self
    }
    /// <p>Whether a service software update is available for the domain.</p>
    pub fn set_update_available(mut self, input: std::option::Option<bool>) -> Self {
        self.update_available = input;
        self
    }
    /// <p>The status of the service software update. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> </p> </li>
    /// <li> <p> <code>ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>NOT_ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>PENDING_UPDATE</code> </p> </li>
    /// </ul>
    pub fn update_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.update_status = Some(input.into());
        self
    }
    /// <p>The status of the service software update. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> </p> </li>
    /// <li> <p> <code>ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>NOT_ELIGIBLE</code> </p> </li>
    /// <li> <p> <code>PENDING_UPDATE</code> </p> </li>
    /// </ul>
    pub fn set_update_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.update_status = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsElasticsearchDomainServiceSoftwareOptions`](crate::types::AwsElasticsearchDomainServiceSoftwareOptions).
    pub fn build(self) -> crate::types::AwsElasticsearchDomainServiceSoftwareOptions {
        crate::types::AwsElasticsearchDomainServiceSoftwareOptions {
            automated_update_date: self.automated_update_date,
            cancellable: self.cancellable.unwrap_or_default(),
            current_version: self.current_version,
            description: self.description,
            new_version: self.new_version,
            update_available: self.update_available.unwrap_or_default(),
            update_status: self.update_status,
        }
    }
}
