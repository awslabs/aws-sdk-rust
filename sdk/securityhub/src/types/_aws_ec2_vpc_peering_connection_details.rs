// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2VpcPeeringConnectionDetails {
    /// <p>Information about the accepter VPC. </p>
    #[doc(hidden)]
    pub accepter_vpc_info:
        std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    /// <p>The time at which an unaccepted VPC peering connection will expire. </p>
    #[doc(hidden)]
    pub expiration_time: std::option::Option<std::string::String>,
    /// <p>Information about the requester VPC. </p>
    #[doc(hidden)]
    pub requester_vpc_info:
        std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    /// <p>The status of the VPC peering connection. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AwsEc2VpcPeeringConnectionStatusDetails>,
    /// <p>The ID of the VPC peering connection. </p>
    #[doc(hidden)]
    pub vpc_peering_connection_id: std::option::Option<std::string::String>,
}
impl AwsEc2VpcPeeringConnectionDetails {
    /// <p>Information about the accepter VPC. </p>
    pub fn accepter_vpc_info(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails> {
        self.accepter_vpc_info.as_ref()
    }
    /// <p>The time at which an unaccepted VPC peering connection will expire. </p>
    pub fn expiration_time(&self) -> std::option::Option<&str> {
        self.expiration_time.as_deref()
    }
    /// <p>Information about the requester VPC. </p>
    pub fn requester_vpc_info(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails> {
        self.requester_vpc_info.as_ref()
    }
    /// <p>The status of the VPC peering connection. </p>
    pub fn status(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2VpcPeeringConnectionStatusDetails> {
        self.status.as_ref()
    }
    /// <p>The ID of the VPC peering connection. </p>
    pub fn vpc_peering_connection_id(&self) -> std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
}
impl AwsEc2VpcPeeringConnectionDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2VpcPeeringConnectionDetails`](crate::types::AwsEc2VpcPeeringConnectionDetails).
    pub fn builder() -> crate::types::builders::AwsEc2VpcPeeringConnectionDetailsBuilder {
        crate::types::builders::AwsEc2VpcPeeringConnectionDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2VpcPeeringConnectionDetails`](crate::types::AwsEc2VpcPeeringConnectionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2VpcPeeringConnectionDetailsBuilder {
    pub(crate) accepter_vpc_info:
        std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    pub(crate) expiration_time: std::option::Option<std::string::String>,
    pub(crate) requester_vpc_info:
        std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    pub(crate) status: std::option::Option<crate::types::AwsEc2VpcPeeringConnectionStatusDetails>,
    pub(crate) vpc_peering_connection_id: std::option::Option<std::string::String>,
}
impl AwsEc2VpcPeeringConnectionDetailsBuilder {
    /// <p>Information about the accepter VPC. </p>
    pub fn accepter_vpc_info(
        mut self,
        input: crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails,
    ) -> Self {
        self.accepter_vpc_info = Some(input);
        self
    }
    /// <p>Information about the accepter VPC. </p>
    pub fn set_accepter_vpc_info(
        mut self,
        input: std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    ) -> Self {
        self.accepter_vpc_info = input;
        self
    }
    /// <p>The time at which an unaccepted VPC peering connection will expire. </p>
    pub fn expiration_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.expiration_time = Some(input.into());
        self
    }
    /// <p>The time at which an unaccepted VPC peering connection will expire. </p>
    pub fn set_expiration_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>Information about the requester VPC. </p>
    pub fn requester_vpc_info(
        mut self,
        input: crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails,
    ) -> Self {
        self.requester_vpc_info = Some(input);
        self
    }
    /// <p>Information about the requester VPC. </p>
    pub fn set_requester_vpc_info(
        mut self,
        input: std::option::Option<crate::types::AwsEc2VpcPeeringConnectionVpcInfoDetails>,
    ) -> Self {
        self.requester_vpc_info = input;
        self
    }
    /// <p>The status of the VPC peering connection. </p>
    pub fn status(mut self, input: crate::types::AwsEc2VpcPeeringConnectionStatusDetails) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the VPC peering connection. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AwsEc2VpcPeeringConnectionStatusDetails>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The ID of the VPC peering connection. </p>
    pub fn vpc_peering_connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_peering_connection_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC peering connection. </p>
    pub fn set_vpc_peering_connection_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2VpcPeeringConnectionDetails`](crate::types::AwsEc2VpcPeeringConnectionDetails).
    pub fn build(self) -> crate::types::AwsEc2VpcPeeringConnectionDetails {
        crate::types::AwsEc2VpcPeeringConnectionDetails {
            accepter_vpc_info: self.accepter_vpc_info,
            expiration_time: self.expiration_time,
            requester_vpc_info: self.requester_vpc_info,
            status: self.status,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
        }
    }
}
