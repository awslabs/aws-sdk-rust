// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The FireLens configuration for the container. The configuration specifies and configures a log router for container logs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
    /// <p>The options to use to configure the log router.</p>
    /// <p>The valid option keys are as follows:</p>
    /// <ul>
    /// <li> <p> <code>enable-ecs-log-metadata</code>. The value can be <code>true</code> or <code>false</code>.</p> </li>
    /// <li> <p> <code>config-file-type</code>. The value can be <code>s3</code> or <code>file</code>.</p> </li>
    /// <li> <p> <code>config-file-value</code>. The value is either an S3 ARN or a file path.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The log router to use. Valid values are <code>fluentbit</code> or <code>fluentd</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
    /// <p>The options to use to configure the log router.</p>
    /// <p>The valid option keys are as follows:</p>
    /// <ul>
    /// <li> <p> <code>enable-ecs-log-metadata</code>. The value can be <code>true</code> or <code>false</code>.</p> </li>
    /// <li> <p> <code>config-file-type</code>. The value can be <code>s3</code> or <code>file</code>.</p> </li>
    /// <li> <p> <code>config-file-value</code>. The value is either an S3 ARN or a file path.</p> </li>
    /// </ul>
    pub fn options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.options.as_ref()
    }
    /// <p>The log router to use. Valid values are <code>fluentbit</code> or <code>fluentd</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails).
    pub fn builder() -> crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsBuilder{
        crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsBuilder {
    pub(crate) options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsBuilder {
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The options to use to configure the log router.</p>
    /// <p>The valid option keys are as follows:</p>
    /// <ul>
    /// <li> <p> <code>enable-ecs-log-metadata</code>. The value can be <code>true</code> or <code>false</code>.</p> </li>
    /// <li> <p> <code>config-file-type</code>. The value can be <code>s3</code> or <code>file</code>.</p> </li>
    /// <li> <p> <code>config-file-value</code>. The value is either an S3 ARN or a file path.</p> </li>
    /// </ul>
    pub fn options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = Some(hash_map);
        self
    }
    /// <p>The options to use to configure the log router.</p>
    /// <p>The valid option keys are as follows:</p>
    /// <ul>
    /// <li> <p> <code>enable-ecs-log-metadata</code>. The value can be <code>true</code> or <code>false</code>.</p> </li>
    /// <li> <p> <code>config-file-type</code>. The value can be <code>s3</code> or <code>file</code>.</p> </li>
    /// <li> <p> <code>config-file-value</code>. The value is either an S3 ARN or a file path.</p> </li>
    /// </ul>
    pub fn set_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.options = input;
        self
    }
    /// <p>The log router to use. Valid values are <code>fluentbit</code> or <code>fluentd</code>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The log router to use. Valid values are <code>fluentbit</code> or <code>fluentd</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
        crate::types::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
            options: self.options,
            r#type: self.r#type,
        }
    }
}
