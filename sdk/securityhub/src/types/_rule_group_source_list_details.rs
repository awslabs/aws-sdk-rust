// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stateful inspection criteria for a domain list rule group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleGroupSourceListDetails {
    /// <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
    pub generated_rules_type: ::std::option::Option<::std::string::String>,
    /// <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
    pub target_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
    pub targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleGroupSourceListDetails {
    /// <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
    pub fn generated_rules_type(&self) -> ::std::option::Option<&str> {
        self.generated_rules_type.as_deref()
    }
    /// <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_types.is_none()`.
    pub fn target_types(&self) -> &[::std::string::String] {
        self.target_types.as_deref().unwrap_or_default()
    }
    /// <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.targets.is_none()`.
    pub fn targets(&self) -> &[::std::string::String] {
        self.targets.as_deref().unwrap_or_default()
    }
}
impl RuleGroupSourceListDetails {
    /// Creates a new builder-style object to manufacture [`RuleGroupSourceListDetails`](crate::types::RuleGroupSourceListDetails).
    pub fn builder() -> crate::types::builders::RuleGroupSourceListDetailsBuilder {
        crate::types::builders::RuleGroupSourceListDetailsBuilder::default()
    }
}

/// A builder for [`RuleGroupSourceListDetails`](crate::types::RuleGroupSourceListDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleGroupSourceListDetailsBuilder {
    pub(crate) generated_rules_type: ::std::option::Option<::std::string::String>,
    pub(crate) target_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleGroupSourceListDetailsBuilder {
    /// <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
    pub fn generated_rules_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_rules_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
    pub fn set_generated_rules_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_rules_type = input;
        self
    }
    /// <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
    pub fn get_generated_rules_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_rules_type
    }
    /// Appends an item to `target_types`.
    ///
    /// To override the contents of this collection use [`set_target_types`](Self::set_target_types).
    ///
    /// <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
    pub fn target_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target_types.unwrap_or_default();
        v.push(input.into());
        self.target_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
    pub fn set_target_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.target_types = input;
        self
    }
    /// <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
    pub fn get_target_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.target_types
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
    pub fn targets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input.into());
        self.targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
    pub fn get_targets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.targets
    }
    /// Consumes the builder and constructs a [`RuleGroupSourceListDetails`](crate::types::RuleGroupSourceListDetails).
    pub fn build(self) -> crate::types::RuleGroupSourceListDetails {
        crate::types::RuleGroupSourceListDetails {
            generated_rules_type: self.generated_rules_type,
            target_types: self.target_types,
            targets: self.targets,
        }
    }
}
