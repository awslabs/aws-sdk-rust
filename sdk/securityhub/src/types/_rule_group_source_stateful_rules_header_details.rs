// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The inspection criteria for a stateful rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleGroupSourceStatefulRulesHeaderDetails {
    /// <p>The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// <p>The destination port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    #[doc(hidden)]
    pub destination_port: std::option::Option<std::string::String>,
    /// <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to <code>FORWARD</code>, the inspection only matches traffic going from the source to the destination.</p>
    #[doc(hidden)]
    pub direction: std::option::Option<std::string::String>,
    /// <p>The protocol to inspect for. To inspector for all protocols, use <code>IP</code>.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>The source port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    #[doc(hidden)]
    pub source_port: std::option::Option<std::string::String>,
}
impl RuleGroupSourceStatefulRulesHeaderDetails {
    /// <p>The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The destination port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(&self) -> std::option::Option<&str> {
        self.destination_port.as_deref()
    }
    /// <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to <code>FORWARD</code>, the inspection only matches traffic going from the source to the destination.</p>
    pub fn direction(&self) -> std::option::Option<&str> {
        self.direction.as_deref()
    }
    /// <p>The protocol to inspect for. To inspector for all protocols, use <code>IP</code>.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The source port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(&self) -> std::option::Option<&str> {
        self.source_port.as_deref()
    }
}
impl RuleGroupSourceStatefulRulesHeaderDetails {
    /// Creates a new builder-style object to manufacture [`RuleGroupSourceStatefulRulesHeaderDetails`](crate::types::RuleGroupSourceStatefulRulesHeaderDetails).
    pub fn builder() -> crate::types::builders::RuleGroupSourceStatefulRulesHeaderDetailsBuilder {
        crate::types::builders::RuleGroupSourceStatefulRulesHeaderDetailsBuilder::default()
    }
}

/// A builder for [`RuleGroupSourceStatefulRulesHeaderDetails`](crate::types::RuleGroupSourceStatefulRulesHeaderDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleGroupSourceStatefulRulesHeaderDetailsBuilder {
    pub(crate) destination: std::option::Option<std::string::String>,
    pub(crate) destination_port: std::option::Option<std::string::String>,
    pub(crate) direction: std::option::Option<std::string::String>,
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) source_port: std::option::Option<std::string::String>,
}
impl RuleGroupSourceStatefulRulesHeaderDetailsBuilder {
    /// <p>The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// <p>The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_port = Some(input.into());
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_destination_port(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to <code>FORWARD</code>, the inspection only matches traffic going from the source to the destination.</p>
    pub fn direction(mut self, input: impl Into<std::string::String>) -> Self {
        self.direction = Some(input.into());
        self
    }
    /// <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to <code>FORWARD</code>, the inspection only matches traffic going from the source to the destination.</p>
    pub fn set_direction(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The protocol to inspect for. To inspector for all protocols, use <code>IP</code>.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol to inspect for. To inspector for all protocols, use <code>IP</code>.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_port = Some(input.into());
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_source_port(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_port = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleGroupSourceStatefulRulesHeaderDetails`](crate::types::RuleGroupSourceStatefulRulesHeaderDetails).
    pub fn build(self) -> crate::types::RuleGroupSourceStatefulRulesHeaderDetails {
        crate::types::RuleGroupSourceStatefulRulesHeaderDetails {
            destination: self.destination,
            destination_port: self.destination_port,
            direction: self.direction,
            protocol: self.protocol,
            source: self.source,
            source_port: self.source_port,
        }
    }
}
