// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A placement constraint for the tasks in the service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsServicePlacementConstraintsDetails {
    /// <p>A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is <code>distinctInstance</code>.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
    /// <p>The type of constraint. Use <code>distinctInstance</code> to run each task in a particular group on a different container instance. Use <code>memberOf</code> to restrict the selection to a group of valid candidates.</p>
    /// <p>Valid values: <code>distinctInstance</code> | <code>memberOf</code> </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl AwsEcsServicePlacementConstraintsDetails {
    /// <p>A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is <code>distinctInstance</code>.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>The type of constraint. Use <code>distinctInstance</code> to run each task in a particular group on a different container instance. Use <code>memberOf</code> to restrict the selection to a group of valid candidates.</p>
    /// <p>Valid values: <code>distinctInstance</code> | <code>memberOf</code> </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsEcsServicePlacementConstraintsDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsServicePlacementConstraintsDetails`](crate::types::AwsEcsServicePlacementConstraintsDetails).
    pub fn builder() -> crate::types::builders::AwsEcsServicePlacementConstraintsDetailsBuilder {
        crate::types::builders::AwsEcsServicePlacementConstraintsDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsServicePlacementConstraintsDetails`](crate::types::AwsEcsServicePlacementConstraintsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsServicePlacementConstraintsDetailsBuilder {
    pub(crate) expression: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl AwsEcsServicePlacementConstraintsDetailsBuilder {
    /// <p>A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is <code>distinctInstance</code>.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is <code>distinctInstance</code>.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The type of constraint. Use <code>distinctInstance</code> to run each task in a particular group on a different container instance. Use <code>memberOf</code> to restrict the selection to a group of valid candidates.</p>
    /// <p>Valid values: <code>distinctInstance</code> | <code>memberOf</code> </p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of constraint. Use <code>distinctInstance</code> to run each task in a particular group on a different container instance. Use <code>memberOf</code> to restrict the selection to a group of valid candidates.</p>
    /// <p>Valid values: <code>distinctInstance</code> | <code>memberOf</code> </p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsServicePlacementConstraintsDetails`](crate::types::AwsEcsServicePlacementConstraintsDetails).
    pub fn build(self) -> crate::types::AwsEcsServicePlacementConstraintsDetails {
        crate::types::AwsEcsServicePlacementConstraintsDetails {
            expression: self.expression,
            r#type: self.r#type,
        }
    }
}
