// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an WAF rule group. A rule group is a collection of rules for inspecting and controlling web requests. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsWafRuleGroupDetails {
    /// <p>The name of the metrics for this rule group. </p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The name of the rule group. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the rule group. </p>
    #[doc(hidden)]
    pub rule_group_id: std::option::Option<std::string::String>,
    /// <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to allow, block, or count. </p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::AwsWafRuleGroupRulesDetails>>,
}
impl AwsWafRuleGroupDetails {
    /// <p>The name of the metrics for this rule group. </p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The name of the rule group. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the rule group. </p>
    pub fn rule_group_id(&self) -> std::option::Option<&str> {
        self.rule_group_id.as_deref()
    }
    /// <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to allow, block, or count. </p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::AwsWafRuleGroupRulesDetails]> {
        self.rules.as_deref()
    }
}
impl AwsWafRuleGroupDetails {
    /// Creates a new builder-style object to manufacture [`AwsWafRuleGroupDetails`](crate::types::AwsWafRuleGroupDetails).
    pub fn builder() -> crate::types::builders::AwsWafRuleGroupDetailsBuilder {
        crate::types::builders::AwsWafRuleGroupDetailsBuilder::default()
    }
}

/// A builder for [`AwsWafRuleGroupDetails`](crate::types::AwsWafRuleGroupDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsWafRuleGroupDetailsBuilder {
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) rule_group_id: std::option::Option<std::string::String>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::AwsWafRuleGroupRulesDetails>>,
}
impl AwsWafRuleGroupDetailsBuilder {
    /// <p>The name of the metrics for this rule group. </p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The name of the metrics for this rule group. </p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the rule group. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule group. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the rule group. </p>
    pub fn rule_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the rule group. </p>
    pub fn set_rule_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_group_id = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to allow, block, or count. </p>
    pub fn rules(mut self, input: crate::types::AwsWafRuleGroupRulesDetails) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to allow, block, or count. </p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsWafRuleGroupRulesDetails>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsWafRuleGroupDetails`](crate::types::AwsWafRuleGroupDetails).
    pub fn build(self) -> crate::types::AwsWafRuleGroupDetails {
        crate::types::AwsWafRuleGroupDetails {
            metric_name: self.metric_name,
            name: self.name,
            rule_group_id: self.rule_group_id,
            rules: self.rules,
        }
    }
}
