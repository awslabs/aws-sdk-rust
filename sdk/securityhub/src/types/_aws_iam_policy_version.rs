// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A version of an IAM policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsIamPolicyVersion {
    /// <p>The identifier of the policy version.</p>
    #[doc(hidden)]
    pub version_id: std::option::Option<std::string::String>,
    /// <p>Whether the version is the default version.</p>
    #[doc(hidden)]
    pub is_default_version: bool,
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<std::string::String>,
}
impl AwsIamPolicyVersion {
    /// <p>The identifier of the policy version.</p>
    pub fn version_id(&self) -> std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>Whether the version is the default version.</p>
    pub fn is_default_version(&self) -> bool {
        self.is_default_version
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(&self) -> std::option::Option<&str> {
        self.create_date.as_deref()
    }
}
impl AwsIamPolicyVersion {
    /// Creates a new builder-style object to manufacture [`AwsIamPolicyVersion`](crate::types::AwsIamPolicyVersion).
    pub fn builder() -> crate::types::builders::AwsIamPolicyVersionBuilder {
        crate::types::builders::AwsIamPolicyVersionBuilder::default()
    }
}

/// A builder for [`AwsIamPolicyVersion`](crate::types::AwsIamPolicyVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsIamPolicyVersionBuilder {
    pub(crate) version_id: std::option::Option<std::string::String>,
    pub(crate) is_default_version: std::option::Option<bool>,
    pub(crate) create_date: std::option::Option<std::string::String>,
}
impl AwsIamPolicyVersionBuilder {
    /// <p>The identifier of the policy version.</p>
    pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_id = Some(input.into());
        self
    }
    /// <p>The identifier of the policy version.</p>
    pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>Whether the version is the default version.</p>
    pub fn is_default_version(mut self, input: bool) -> Self {
        self.is_default_version = Some(input);
        self
    }
    /// <p>Whether the version is the default version.</p>
    pub fn set_is_default_version(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default_version = input;
        self
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.create_date = Some(input.into());
        self
    }
    /// <p>Indicates when the version was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_create_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.create_date = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsIamPolicyVersion`](crate::types::AwsIamPolicyVersion).
    pub fn build(self) -> crate::types::AwsIamPolicyVersion {
        crate::types::AwsIamPolicyVersion {
            version_id: self.version_id,
            is_default_version: self.is_default_version.unwrap_or_default(),
            create_date: self.create_date,
        }
    }
}
