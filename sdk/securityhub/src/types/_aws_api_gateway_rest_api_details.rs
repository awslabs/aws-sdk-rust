// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a REST API in version 1 of Amazon API Gateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsApiGatewayRestApiDetails {
    /// <p>The identifier of the REST API.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the REST API.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the REST API.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates when the API was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<std::string::String>,
    /// <p>The version identifier for the REST API.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The list of binary media types supported by the REST API.</p>
    #[doc(hidden)]
    pub binary_media_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The minimum size in bytes of a payload before compression is enabled.</p>
    /// <p>If <code>null</code>, then compression is disabled.</p>
    /// <p>If 0, then all payloads are compressed.</p>
    #[doc(hidden)]
    pub minimum_compression_size: i32,
    /// <p>The source of the API key for metering requests according to a usage plan.</p>
    /// <p> <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a request.</p>
    /// <p> <code>AUTHORIZER</code> indicates whether to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    #[doc(hidden)]
    pub api_key_source: std::option::Option<std::string::String>,
    /// <p>The endpoint configuration of the REST API.</p>
    #[doc(hidden)]
    pub endpoint_configuration:
        std::option::Option<crate::types::AwsApiGatewayEndpointConfiguration>,
}
impl AwsApiGatewayRestApiDetails {
    /// <p>The identifier of the REST API.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the REST API.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the REST API.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates when the API was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(&self) -> std::option::Option<&str> {
        self.created_date.as_deref()
    }
    /// <p>The version identifier for the REST API.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The list of binary media types supported by the REST API.</p>
    pub fn binary_media_types(&self) -> std::option::Option<&[std::string::String]> {
        self.binary_media_types.as_deref()
    }
    /// <p>The minimum size in bytes of a payload before compression is enabled.</p>
    /// <p>If <code>null</code>, then compression is disabled.</p>
    /// <p>If 0, then all payloads are compressed.</p>
    pub fn minimum_compression_size(&self) -> i32 {
        self.minimum_compression_size
    }
    /// <p>The source of the API key for metering requests according to a usage plan.</p>
    /// <p> <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a request.</p>
    /// <p> <code>AUTHORIZER</code> indicates whether to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn api_key_source(&self) -> std::option::Option<&str> {
        self.api_key_source.as_deref()
    }
    /// <p>The endpoint configuration of the REST API.</p>
    pub fn endpoint_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AwsApiGatewayEndpointConfiguration> {
        self.endpoint_configuration.as_ref()
    }
}
impl AwsApiGatewayRestApiDetails {
    /// Creates a new builder-style object to manufacture [`AwsApiGatewayRestApiDetails`](crate::types::AwsApiGatewayRestApiDetails).
    pub fn builder() -> crate::types::builders::AwsApiGatewayRestApiDetailsBuilder {
        crate::types::builders::AwsApiGatewayRestApiDetailsBuilder::default()
    }
}

/// A builder for [`AwsApiGatewayRestApiDetails`](crate::types::AwsApiGatewayRestApiDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsApiGatewayRestApiDetailsBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) binary_media_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) minimum_compression_size: std::option::Option<i32>,
    pub(crate) api_key_source: std::option::Option<std::string::String>,
    pub(crate) endpoint_configuration:
        std::option::Option<crate::types::AwsApiGatewayEndpointConfiguration>,
}
impl AwsApiGatewayRestApiDetailsBuilder {
    /// <p>The identifier of the REST API.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the REST API.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the REST API.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the REST API.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the REST API.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the REST API.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Indicates when the API was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_date = Some(input.into());
        self
    }
    /// <p>Indicates when the API was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The version identifier for the REST API.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version identifier for the REST API.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Appends an item to `binary_media_types`.
    ///
    /// To override the contents of this collection use [`set_binary_media_types`](Self::set_binary_media_types).
    ///
    /// <p>The list of binary media types supported by the REST API.</p>
    pub fn binary_media_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.binary_media_types.unwrap_or_default();
        v.push(input.into());
        self.binary_media_types = Some(v);
        self
    }
    /// <p>The list of binary media types supported by the REST API.</p>
    pub fn set_binary_media_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.binary_media_types = input;
        self
    }
    /// <p>The minimum size in bytes of a payload before compression is enabled.</p>
    /// <p>If <code>null</code>, then compression is disabled.</p>
    /// <p>If 0, then all payloads are compressed.</p>
    pub fn minimum_compression_size(mut self, input: i32) -> Self {
        self.minimum_compression_size = Some(input);
        self
    }
    /// <p>The minimum size in bytes of a payload before compression is enabled.</p>
    /// <p>If <code>null</code>, then compression is disabled.</p>
    /// <p>If 0, then all payloads are compressed.</p>
    pub fn set_minimum_compression_size(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_compression_size = input;
        self
    }
    /// <p>The source of the API key for metering requests according to a usage plan.</p>
    /// <p> <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a request.</p>
    /// <p> <code>AUTHORIZER</code> indicates whether to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn api_key_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_key_source = Some(input.into());
        self
    }
    /// <p>The source of the API key for metering requests according to a usage plan.</p>
    /// <p> <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a request.</p>
    /// <p> <code>AUTHORIZER</code> indicates whether to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn set_api_key_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_key_source = input;
        self
    }
    /// <p>The endpoint configuration of the REST API.</p>
    pub fn endpoint_configuration(
        mut self,
        input: crate::types::AwsApiGatewayEndpointConfiguration,
    ) -> Self {
        self.endpoint_configuration = Some(input);
        self
    }
    /// <p>The endpoint configuration of the REST API.</p>
    pub fn set_endpoint_configuration(
        mut self,
        input: std::option::Option<crate::types::AwsApiGatewayEndpointConfiguration>,
    ) -> Self {
        self.endpoint_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsApiGatewayRestApiDetails`](crate::types::AwsApiGatewayRestApiDetails).
    pub fn build(self) -> crate::types::AwsApiGatewayRestApiDetails {
        crate::types::AwsApiGatewayRestApiDetails {
            id: self.id,
            name: self.name,
            description: self.description,
            created_date: self.created_date,
            version: self.version,
            binary_media_types: self.binary_media_types,
            minimum_compression_size: self.minimum_compression_size.unwrap_or_default(),
            api_key_source: self.api_key_source,
            endpoint_configuration: self.endpoint_configuration,
        }
    }
}
