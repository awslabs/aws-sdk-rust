// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IP filter for querying findings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpFilter {
    /// <p>A finding's CIDR value.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
}
impl IpFilter {
    /// <p>A finding's CIDR value.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
}
impl IpFilter {
    /// Creates a new builder-style object to manufacture [`IpFilter`](crate::types::IpFilter).
    pub fn builder() -> crate::types::builders::IpFilterBuilder {
        crate::types::builders::IpFilterBuilder::default()
    }
}

/// A builder for [`IpFilter`](crate::types::IpFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpFilterBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
}
impl IpFilterBuilder {
    /// <p>A finding's CIDR value.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>A finding's CIDR value.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// Consumes the builder and constructs a [`IpFilter`](crate::types::IpFilter).
    pub fn build(self) -> crate::types::IpFilter {
        crate::types::IpFilter { cidr: self.cidr }
    }
}
