// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates to the severity information for a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SeverityUpdate {
    /// <p>The normalized severity for the finding. This attribute is to be deprecated in favor of <code>Label</code>.</p>
    /// <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, <code>Label</code> is set automatically as follows.</p>
    /// <ul>
    /// <li> <p>0 - <code>INFORMATIONAL</code> </p> </li>
    /// <li> <p>1–39 - <code>LOW</code> </p> </li>
    /// <li> <p>40–69 - <code>MEDIUM</code> </p> </li>
    /// <li> <p>70–89 - <code>HIGH</code> </p> </li>
    /// <li> <p>90–100 - <code>CRITICAL</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub normalized: i32,
    /// <p>The native severity as defined by the Amazon Web Services service or integrated partner product that generated the finding.</p>
    #[doc(hidden)]
    pub product: f64,
    /// <p>The severity value of the finding. The allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>INFORMATIONAL</code> - No issue was found.</p> </li>
    /// <li> <p> <code>LOW</code> - The issue does not require action on its own.</p> </li>
    /// <li> <p> <code>MEDIUM</code> - The issue must be addressed but not urgently.</p> </li>
    /// <li> <p> <code>HIGH</code> - The issue must be addressed as a priority.</p> </li>
    /// <li> <p> <code>CRITICAL</code> - The issue must be remediated immediately to avoid it escalating.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub label: std::option::Option<crate::types::SeverityLabel>,
}
impl SeverityUpdate {
    /// <p>The normalized severity for the finding. This attribute is to be deprecated in favor of <code>Label</code>.</p>
    /// <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, <code>Label</code> is set automatically as follows.</p>
    /// <ul>
    /// <li> <p>0 - <code>INFORMATIONAL</code> </p> </li>
    /// <li> <p>1–39 - <code>LOW</code> </p> </li>
    /// <li> <p>40–69 - <code>MEDIUM</code> </p> </li>
    /// <li> <p>70–89 - <code>HIGH</code> </p> </li>
    /// <li> <p>90–100 - <code>CRITICAL</code> </p> </li>
    /// </ul>
    pub fn normalized(&self) -> i32 {
        self.normalized
    }
    /// <p>The native severity as defined by the Amazon Web Services service or integrated partner product that generated the finding.</p>
    pub fn product(&self) -> f64 {
        self.product
    }
    /// <p>The severity value of the finding. The allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>INFORMATIONAL</code> - No issue was found.</p> </li>
    /// <li> <p> <code>LOW</code> - The issue does not require action on its own.</p> </li>
    /// <li> <p> <code>MEDIUM</code> - The issue must be addressed but not urgently.</p> </li>
    /// <li> <p> <code>HIGH</code> - The issue must be addressed as a priority.</p> </li>
    /// <li> <p> <code>CRITICAL</code> - The issue must be remediated immediately to avoid it escalating.</p> </li>
    /// </ul>
    pub fn label(&self) -> std::option::Option<&crate::types::SeverityLabel> {
        self.label.as_ref()
    }
}
impl SeverityUpdate {
    /// Creates a new builder-style object to manufacture [`SeverityUpdate`](crate::types::SeverityUpdate).
    pub fn builder() -> crate::types::builders::SeverityUpdateBuilder {
        crate::types::builders::SeverityUpdateBuilder::default()
    }
}

/// A builder for [`SeverityUpdate`](crate::types::SeverityUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SeverityUpdateBuilder {
    pub(crate) normalized: std::option::Option<i32>,
    pub(crate) product: std::option::Option<f64>,
    pub(crate) label: std::option::Option<crate::types::SeverityLabel>,
}
impl SeverityUpdateBuilder {
    /// <p>The normalized severity for the finding. This attribute is to be deprecated in favor of <code>Label</code>.</p>
    /// <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, <code>Label</code> is set automatically as follows.</p>
    /// <ul>
    /// <li> <p>0 - <code>INFORMATIONAL</code> </p> </li>
    /// <li> <p>1–39 - <code>LOW</code> </p> </li>
    /// <li> <p>40–69 - <code>MEDIUM</code> </p> </li>
    /// <li> <p>70–89 - <code>HIGH</code> </p> </li>
    /// <li> <p>90–100 - <code>CRITICAL</code> </p> </li>
    /// </ul>
    pub fn normalized(mut self, input: i32) -> Self {
        self.normalized = Some(input);
        self
    }
    /// <p>The normalized severity for the finding. This attribute is to be deprecated in favor of <code>Label</code>.</p>
    /// <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, <code>Label</code> is set automatically as follows.</p>
    /// <ul>
    /// <li> <p>0 - <code>INFORMATIONAL</code> </p> </li>
    /// <li> <p>1–39 - <code>LOW</code> </p> </li>
    /// <li> <p>40–69 - <code>MEDIUM</code> </p> </li>
    /// <li> <p>70–89 - <code>HIGH</code> </p> </li>
    /// <li> <p>90–100 - <code>CRITICAL</code> </p> </li>
    /// </ul>
    pub fn set_normalized(mut self, input: std::option::Option<i32>) -> Self {
        self.normalized = input;
        self
    }
    /// <p>The native severity as defined by the Amazon Web Services service or integrated partner product that generated the finding.</p>
    pub fn product(mut self, input: f64) -> Self {
        self.product = Some(input);
        self
    }
    /// <p>The native severity as defined by the Amazon Web Services service or integrated partner product that generated the finding.</p>
    pub fn set_product(mut self, input: std::option::Option<f64>) -> Self {
        self.product = input;
        self
    }
    /// <p>The severity value of the finding. The allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>INFORMATIONAL</code> - No issue was found.</p> </li>
    /// <li> <p> <code>LOW</code> - The issue does not require action on its own.</p> </li>
    /// <li> <p> <code>MEDIUM</code> - The issue must be addressed but not urgently.</p> </li>
    /// <li> <p> <code>HIGH</code> - The issue must be addressed as a priority.</p> </li>
    /// <li> <p> <code>CRITICAL</code> - The issue must be remediated immediately to avoid it escalating.</p> </li>
    /// </ul>
    pub fn label(mut self, input: crate::types::SeverityLabel) -> Self {
        self.label = Some(input);
        self
    }
    /// <p>The severity value of the finding. The allowed values are the following.</p>
    /// <ul>
    /// <li> <p> <code>INFORMATIONAL</code> - No issue was found.</p> </li>
    /// <li> <p> <code>LOW</code> - The issue does not require action on its own.</p> </li>
    /// <li> <p> <code>MEDIUM</code> - The issue must be addressed but not urgently.</p> </li>
    /// <li> <p> <code>HIGH</code> - The issue must be addressed as a priority.</p> </li>
    /// <li> <p> <code>CRITICAL</code> - The issue must be remediated immediately to avoid it escalating.</p> </li>
    /// </ul>
    pub fn set_label(mut self, input: std::option::Option<crate::types::SeverityLabel>) -> Self {
        self.label = input;
        self
    }
    /// Consumes the builder and constructs a [`SeverityUpdate`](crate::types::SeverityUpdate).
    pub fn build(self) -> crate::types::SeverityUpdate {
        crate::types::SeverityUpdate {
            normalized: self.normalized.unwrap_or_default(),
            product: self.product.unwrap_or_default(),
            label: self.label,
        }
    }
}
