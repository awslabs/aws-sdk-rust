// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a consistent format for Security Hub findings. <code>AwsSecurityFinding</code> format allows you to share findings between Amazon Web Services security services and third-party solutions.</p> <note>
/// <p>A finding is a potential security issue generated either by Amazon Web Services services or by the integrated third-party solutions and standards checks.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsSecurityFinding {
    /// <p>The schema version that a finding is formatted for.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>The security findings provider-specific identifier for a finding.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings. This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for a custom integration.</p>
    #[doc(hidden)]
    pub product_arn: std::option::Option<std::string::String>,
    /// <p>The name of the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by product name, you use this attribute.</p>
    #[doc(hidden)]
    pub product_name: std::option::Option<std::string::String>,
    /// <p>The name of the company for the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by company name, you use this attribute.</p>
    #[doc(hidden)]
    pub company_name: std::option::Option<std::string::String>,
    /// <p>The Region from which the finding was generated.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update it using <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security-findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc. </p>
    #[doc(hidden)]
    pub generator_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>One or more finding types in the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    #[doc(hidden)]
    pub types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates when the security-findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub first_observed_at: std::option::Option<std::string::String>,
    /// <p>Indicates when the security-findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub last_observed_at: std::option::Option<std::string::String>,
    /// <p>Indicates when the security-findings provider created the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>Indicates when the security-findings provider last updated the finding record.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<std::string::String>,
    /// <p>A finding's severity.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::Severity>,
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    #[doc(hidden)]
    pub confidence: i32,
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    #[doc(hidden)]
    pub criticality: i32,
    /// <p>A finding's title.</p> <note>
    /// <p>In this release, <code>Title</code> is a required property.</p>
    /// </note>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>A finding's description.</p> <note>
    /// <p>In this release, <code>Description</code> is a required property.</p>
    /// </note>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A data type that describes the remediation options for a finding.</p>
    #[doc(hidden)]
    pub remediation: std::option::Option<crate::types::Remediation>,
    /// <p>A URL that links to a page about the current finding in the security-findings provider's solution.</p>
    #[doc(hidden)]
    pub source_url: std::option::Option<std::string::String>,
    /// <p>A data type where security-findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    /// <p>Can contain up to 50 key-value pairs. For each key-value pair, the key can contain up to 128 characters, and the value can contain up to 2048 characters.</p>
    #[doc(hidden)]
    pub product_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    #[doc(hidden)]
    pub user_defined_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of malware related to a finding.</p>
    #[doc(hidden)]
    pub malware: std::option::Option<std::vec::Vec<crate::types::Malware>>,
    /// <p>The details of network-related information about a finding.</p>
    #[doc(hidden)]
    pub network: std::option::Option<crate::types::Network>,
    /// <p>Provides information about a network path that is relevant to a finding. Each entry under <code>NetworkPath</code> represents a component of that path.</p>
    #[doc(hidden)]
    pub network_path: std::option::Option<std::vec::Vec<crate::types::NetworkPathComponent>>,
    /// <p>The details of process-related information about a finding.</p>
    #[doc(hidden)]
    pub process: std::option::Option<crate::types::ProcessDetails>,
    /// <p>Details about the threat detected in a security finding and the file paths that were affected by the threat. </p>
    #[doc(hidden)]
    pub threats: std::option::Option<std::vec::Vec<crate::types::Threat>>,
    /// <p>Threat intelligence details related to a finding.</p>
    #[doc(hidden)]
    pub threat_intel_indicators:
        std::option::Option<std::vec::Vec<crate::types::ThreatIntelIndicator>>,
    /// <p>A set of resource data types that describe the resources that the finding refers to.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    /// <p>This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    #[doc(hidden)]
    pub compliance: std::option::Option<crate::types::Compliance>,
    /// <p>Indicates the veracity of a finding. </p>
    #[doc(hidden)]
    pub verification_state: std::option::Option<crate::types::VerificationState>,
    /// <p>The workflow state of a finding. </p>
    #[doc(hidden)]
    pub workflow_state: std::option::Option<crate::types::WorkflowState>,
    /// <p>Provides information about the status of the investigation into a finding.</p>
    #[doc(hidden)]
    pub workflow: std::option::Option<crate::types::Workflow>,
    /// <p>The record state of a finding.</p>
    #[doc(hidden)]
    pub record_state: std::option::Option<crate::types::RecordState>,
    /// <p>A list of related findings.</p>
    #[doc(hidden)]
    pub related_findings: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
    /// <p>A user-defined note added to a finding.</p>
    #[doc(hidden)]
    pub note: std::option::Option<crate::types::Note>,
    /// <p>Provides a list of vulnerabilities associated with the findings.</p>
    #[doc(hidden)]
    pub vulnerabilities: std::option::Option<std::vec::Vec<crate::types::Vulnerability>>,
    /// <p>Provides an overview of the patch compliance status for an instance against a selected compliance standard.</p>
    #[doc(hidden)]
    pub patch_summary: std::option::Option<crate::types::PatchSummary>,
    /// <p>Provides details about an action that affects or that was taken on a resource.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::Action>,
    /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
    #[doc(hidden)]
    pub finding_provider_fields: std::option::Option<crate::types::FindingProviderFields>,
    /// <p>Indicates whether the finding is a sample finding.</p>
    #[doc(hidden)]
    pub sample: bool,
}
impl AwsSecurityFinding {
    /// <p>The schema version that a finding is formatted for.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings. This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for a custom integration.</p>
    pub fn product_arn(&self) -> std::option::Option<&str> {
        self.product_arn.as_deref()
    }
    /// <p>The name of the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by product name, you use this attribute.</p>
    pub fn product_name(&self) -> std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>The name of the company for the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by company name, you use this attribute.</p>
    pub fn company_name(&self) -> std::option::Option<&str> {
        self.company_name.as_deref()
    }
    /// <p>The Region from which the finding was generated.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update it using <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security-findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc. </p>
    pub fn generator_id(&self) -> std::option::Option<&str> {
        self.generator_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>One or more finding types in the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn types(&self) -> std::option::Option<&[std::string::String]> {
        self.types.as_deref()
    }
    /// <p>Indicates when the security-findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn first_observed_at(&self) -> std::option::Option<&str> {
        self.first_observed_at.as_deref()
    }
    /// <p>Indicates when the security-findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_observed_at(&self) -> std::option::Option<&str> {
        self.last_observed_at.as_deref()
    }
    /// <p>Indicates when the security-findings provider created the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>Indicates when the security-findings provider last updated the finding record.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn updated_at(&self) -> std::option::Option<&str> {
        self.updated_at.as_deref()
    }
    /// <p>A finding's severity.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn confidence(&self) -> i32 {
        self.confidence
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn criticality(&self) -> i32 {
        self.criticality
    }
    /// <p>A finding's title.</p> <note>
    /// <p>In this release, <code>Title</code> is a required property.</p>
    /// </note>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>A finding's description.</p> <note>
    /// <p>In this release, <code>Description</code> is a required property.</p>
    /// </note>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A data type that describes the remediation options for a finding.</p>
    pub fn remediation(&self) -> std::option::Option<&crate::types::Remediation> {
        self.remediation.as_ref()
    }
    /// <p>A URL that links to a page about the current finding in the security-findings provider's solution.</p>
    pub fn source_url(&self) -> std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>A data type where security-findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    /// <p>Can contain up to 50 key-value pairs. For each key-value pair, the key can contain up to 128 characters, and the value can contain up to 2048 characters.</p>
    pub fn product_fields(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.product_fields.as_ref()
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn user_defined_fields(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.user_defined_fields.as_ref()
    }
    /// <p>A list of malware related to a finding.</p>
    pub fn malware(&self) -> std::option::Option<&[crate::types::Malware]> {
        self.malware.as_deref()
    }
    /// <p>The details of network-related information about a finding.</p>
    pub fn network(&self) -> std::option::Option<&crate::types::Network> {
        self.network.as_ref()
    }
    /// <p>Provides information about a network path that is relevant to a finding. Each entry under <code>NetworkPath</code> represents a component of that path.</p>
    pub fn network_path(&self) -> std::option::Option<&[crate::types::NetworkPathComponent]> {
        self.network_path.as_deref()
    }
    /// <p>The details of process-related information about a finding.</p>
    pub fn process(&self) -> std::option::Option<&crate::types::ProcessDetails> {
        self.process.as_ref()
    }
    /// <p>Details about the threat detected in a security finding and the file paths that were affected by the threat. </p>
    pub fn threats(&self) -> std::option::Option<&[crate::types::Threat]> {
        self.threats.as_deref()
    }
    /// <p>Threat intelligence details related to a finding.</p>
    pub fn threat_intel_indicators(
        &self,
    ) -> std::option::Option<&[crate::types::ThreatIntelIndicator]> {
        self.threat_intel_indicators.as_deref()
    }
    /// <p>A set of resource data types that describe the resources that the finding refers to.</p>
    pub fn resources(&self) -> std::option::Option<&[crate::types::Resource]> {
        self.resources.as_deref()
    }
    /// <p>This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn compliance(&self) -> std::option::Option<&crate::types::Compliance> {
        self.compliance.as_ref()
    }
    /// <p>Indicates the veracity of a finding. </p>
    pub fn verification_state(&self) -> std::option::Option<&crate::types::VerificationState> {
        self.verification_state.as_ref()
    }
    /// <p>The workflow state of a finding. </p>
    pub fn workflow_state(&self) -> std::option::Option<&crate::types::WorkflowState> {
        self.workflow_state.as_ref()
    }
    /// <p>Provides information about the status of the investigation into a finding.</p>
    pub fn workflow(&self) -> std::option::Option<&crate::types::Workflow> {
        self.workflow.as_ref()
    }
    /// <p>The record state of a finding.</p>
    pub fn record_state(&self) -> std::option::Option<&crate::types::RecordState> {
        self.record_state.as_ref()
    }
    /// <p>A list of related findings.</p>
    pub fn related_findings(&self) -> std::option::Option<&[crate::types::RelatedFinding]> {
        self.related_findings.as_deref()
    }
    /// <p>A user-defined note added to a finding.</p>
    pub fn note(&self) -> std::option::Option<&crate::types::Note> {
        self.note.as_ref()
    }
    /// <p>Provides a list of vulnerabilities associated with the findings.</p>
    pub fn vulnerabilities(&self) -> std::option::Option<&[crate::types::Vulnerability]> {
        self.vulnerabilities.as_deref()
    }
    /// <p>Provides an overview of the patch compliance status for an instance against a selected compliance standard.</p>
    pub fn patch_summary(&self) -> std::option::Option<&crate::types::PatchSummary> {
        self.patch_summary.as_ref()
    }
    /// <p>Provides details about an action that affects or that was taken on a resource.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
    pub fn finding_provider_fields(
        &self,
    ) -> std::option::Option<&crate::types::FindingProviderFields> {
        self.finding_provider_fields.as_ref()
    }
    /// <p>Indicates whether the finding is a sample finding.</p>
    pub fn sample(&self) -> bool {
        self.sample
    }
}
impl AwsSecurityFinding {
    /// Creates a new builder-style object to manufacture [`AwsSecurityFinding`](crate::types::AwsSecurityFinding).
    pub fn builder() -> crate::types::builders::AwsSecurityFindingBuilder {
        crate::types::builders::AwsSecurityFindingBuilder::default()
    }
}

/// A builder for [`AwsSecurityFinding`](crate::types::AwsSecurityFinding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsSecurityFindingBuilder {
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) product_arn: std::option::Option<std::string::String>,
    pub(crate) product_name: std::option::Option<std::string::String>,
    pub(crate) company_name: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) generator_id: std::option::Option<std::string::String>,
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) first_observed_at: std::option::Option<std::string::String>,
    pub(crate) last_observed_at: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) updated_at: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<crate::types::Severity>,
    pub(crate) confidence: std::option::Option<i32>,
    pub(crate) criticality: std::option::Option<i32>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) remediation: std::option::Option<crate::types::Remediation>,
    pub(crate) source_url: std::option::Option<std::string::String>,
    pub(crate) product_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) user_defined_fields:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) malware: std::option::Option<std::vec::Vec<crate::types::Malware>>,
    pub(crate) network: std::option::Option<crate::types::Network>,
    pub(crate) network_path: std::option::Option<std::vec::Vec<crate::types::NetworkPathComponent>>,
    pub(crate) process: std::option::Option<crate::types::ProcessDetails>,
    pub(crate) threats: std::option::Option<std::vec::Vec<crate::types::Threat>>,
    pub(crate) threat_intel_indicators:
        std::option::Option<std::vec::Vec<crate::types::ThreatIntelIndicator>>,
    pub(crate) resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    pub(crate) compliance: std::option::Option<crate::types::Compliance>,
    pub(crate) verification_state: std::option::Option<crate::types::VerificationState>,
    pub(crate) workflow_state: std::option::Option<crate::types::WorkflowState>,
    pub(crate) workflow: std::option::Option<crate::types::Workflow>,
    pub(crate) record_state: std::option::Option<crate::types::RecordState>,
    pub(crate) related_findings: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
    pub(crate) note: std::option::Option<crate::types::Note>,
    pub(crate) vulnerabilities: std::option::Option<std::vec::Vec<crate::types::Vulnerability>>,
    pub(crate) patch_summary: std::option::Option<crate::types::PatchSummary>,
    pub(crate) action: std::option::Option<crate::types::Action>,
    pub(crate) finding_provider_fields: std::option::Option<crate::types::FindingProviderFields>,
    pub(crate) sample: std::option::Option<bool>,
}
impl AwsSecurityFindingBuilder {
    /// <p>The schema version that a finding is formatted for.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The schema version that a finding is formatted for.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The security findings provider-specific identifier for a finding.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings. This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for a custom integration.</p>
    pub fn product_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_arn = Some(input.into());
        self
    }
    /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings. This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for a custom integration.</p>
    pub fn set_product_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_arn = input;
        self
    }
    /// <p>The name of the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by product name, you use this attribute.</p>
    pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_name = Some(input.into());
        self
    }
    /// <p>The name of the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by product name, you use this attribute.</p>
    pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>The name of the company for the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by company name, you use this attribute.</p>
    pub fn company_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.company_name = Some(input.into());
        self
    }
    /// <p>The name of the company for the product that generated the finding.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
    /// <p>When you use the Security Hub console or API to filter findings by company name, you use this attribute.</p>
    pub fn set_company_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>The Region from which the finding was generated.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update it using <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Region from which the finding was generated.</p>
    /// <p>Security Hub populates this attribute automatically for each finding. You cannot update it using <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security-findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc. </p>
    pub fn generator_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.generator_id = Some(input.into());
        self
    }
    /// <p>The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security-findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc. </p>
    pub fn set_generator_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.generator_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that a finding is generated in.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>One or more finding types in the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = Some(v);
        self
    }
    /// <p>One or more finding types in the format of <code>namespace/category/classifier</code> that classify a finding.</p>
    /// <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications</p>
    pub fn set_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.types = input;
        self
    }
    /// <p>Indicates when the security-findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn first_observed_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_observed_at = Some(input.into());
        self
    }
    /// <p>Indicates when the security-findings provider first observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_first_observed_at(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.first_observed_at = input;
        self
    }
    /// <p>Indicates when the security-findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn last_observed_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_observed_at = Some(input.into());
        self
    }
    /// <p>Indicates when the security-findings provider most recently observed the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_last_observed_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_observed_at = input;
        self
    }
    /// <p>Indicates when the security-findings provider created the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>Indicates when the security-findings provider created the potential security issue that a finding captured.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Indicates when the security-findings provider last updated the finding record.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn updated_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_at = Some(input.into());
        self
    }
    /// <p>Indicates when the security-findings provider last updated the finding record.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_updated_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>A finding's severity.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>A finding's severity.</p>
    pub fn set_severity(mut self, input: std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn confidence(mut self, input: i32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>
    /// <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    pub fn set_confidence(mut self, input: std::option::Option<i32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn criticality(mut self, input: i32) -> Self {
        self.criticality = Some(input);
        self
    }
    /// <p>The level of importance assigned to the resources associated with the finding.</p>
    /// <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.</p>
    pub fn set_criticality(mut self, input: std::option::Option<i32>) -> Self {
        self.criticality = input;
        self
    }
    /// <p>A finding's title.</p> <note>
    /// <p>In this release, <code>Title</code> is a required property.</p>
    /// </note>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>A finding's title.</p> <note>
    /// <p>In this release, <code>Title</code> is a required property.</p>
    /// </note>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A finding's description.</p> <note>
    /// <p>In this release, <code>Description</code> is a required property.</p>
    /// </note>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A finding's description.</p> <note>
    /// <p>In this release, <code>Description</code> is a required property.</p>
    /// </note>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A data type that describes the remediation options for a finding.</p>
    pub fn remediation(mut self, input: crate::types::Remediation) -> Self {
        self.remediation = Some(input);
        self
    }
    /// <p>A data type that describes the remediation options for a finding.</p>
    pub fn set_remediation(
        mut self,
        input: std::option::Option<crate::types::Remediation>,
    ) -> Self {
        self.remediation = input;
        self
    }
    /// <p>A URL that links to a page about the current finding in the security-findings provider's solution.</p>
    pub fn source_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_url = Some(input.into());
        self
    }
    /// <p>A URL that links to a page about the current finding in the security-findings provider's solution.</p>
    pub fn set_source_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// Adds a key-value pair to `product_fields`.
    ///
    /// To override the contents of this collection use [`set_product_fields`](Self::set_product_fields).
    ///
    /// <p>A data type where security-findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    /// <p>Can contain up to 50 key-value pairs. For each key-value pair, the key can contain up to 128 characters, and the value can contain up to 2048 characters.</p>
    pub fn product_fields(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.product_fields.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.product_fields = Some(hash_map);
        self
    }
    /// <p>A data type where security-findings providers can include additional solution-specific details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
    /// <p>Can contain up to 50 key-value pairs. For each key-value pair, the key can contain up to 128 characters, and the value can contain up to 2048 characters.</p>
    pub fn set_product_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.product_fields = input;
        self
    }
    /// Adds a key-value pair to `user_defined_fields`.
    ///
    /// To override the contents of this collection use [`set_user_defined_fields`](Self::set_user_defined_fields).
    ///
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn user_defined_fields(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.user_defined_fields.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.user_defined_fields = Some(hash_map);
        self
    }
    /// <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. </p>
    pub fn set_user_defined_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.user_defined_fields = input;
        self
    }
    /// Appends an item to `malware`.
    ///
    /// To override the contents of this collection use [`set_malware`](Self::set_malware).
    ///
    /// <p>A list of malware related to a finding.</p>
    pub fn malware(mut self, input: crate::types::Malware) -> Self {
        let mut v = self.malware.unwrap_or_default();
        v.push(input);
        self.malware = Some(v);
        self
    }
    /// <p>A list of malware related to a finding.</p>
    pub fn set_malware(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Malware>>,
    ) -> Self {
        self.malware = input;
        self
    }
    /// <p>The details of network-related information about a finding.</p>
    pub fn network(mut self, input: crate::types::Network) -> Self {
        self.network = Some(input);
        self
    }
    /// <p>The details of network-related information about a finding.</p>
    pub fn set_network(mut self, input: std::option::Option<crate::types::Network>) -> Self {
        self.network = input;
        self
    }
    /// Appends an item to `network_path`.
    ///
    /// To override the contents of this collection use [`set_network_path`](Self::set_network_path).
    ///
    /// <p>Provides information about a network path that is relevant to a finding. Each entry under <code>NetworkPath</code> represents a component of that path.</p>
    pub fn network_path(mut self, input: crate::types::NetworkPathComponent) -> Self {
        let mut v = self.network_path.unwrap_or_default();
        v.push(input);
        self.network_path = Some(v);
        self
    }
    /// <p>Provides information about a network path that is relevant to a finding. Each entry under <code>NetworkPath</code> represents a component of that path.</p>
    pub fn set_network_path(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkPathComponent>>,
    ) -> Self {
        self.network_path = input;
        self
    }
    /// <p>The details of process-related information about a finding.</p>
    pub fn process(mut self, input: crate::types::ProcessDetails) -> Self {
        self.process = Some(input);
        self
    }
    /// <p>The details of process-related information about a finding.</p>
    pub fn set_process(mut self, input: std::option::Option<crate::types::ProcessDetails>) -> Self {
        self.process = input;
        self
    }
    /// Appends an item to `threats`.
    ///
    /// To override the contents of this collection use [`set_threats`](Self::set_threats).
    ///
    /// <p>Details about the threat detected in a security finding and the file paths that were affected by the threat. </p>
    pub fn threats(mut self, input: crate::types::Threat) -> Self {
        let mut v = self.threats.unwrap_or_default();
        v.push(input);
        self.threats = Some(v);
        self
    }
    /// <p>Details about the threat detected in a security finding and the file paths that were affected by the threat. </p>
    pub fn set_threats(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Threat>>,
    ) -> Self {
        self.threats = input;
        self
    }
    /// Appends an item to `threat_intel_indicators`.
    ///
    /// To override the contents of this collection use [`set_threat_intel_indicators`](Self::set_threat_intel_indicators).
    ///
    /// <p>Threat intelligence details related to a finding.</p>
    pub fn threat_intel_indicators(mut self, input: crate::types::ThreatIntelIndicator) -> Self {
        let mut v = self.threat_intel_indicators.unwrap_or_default();
        v.push(input);
        self.threat_intel_indicators = Some(v);
        self
    }
    /// <p>Threat intelligence details related to a finding.</p>
    pub fn set_threat_intel_indicators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ThreatIntelIndicator>>,
    ) -> Self {
        self.threat_intel_indicators = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>A set of resource data types that describe the resources that the finding refers to.</p>
    pub fn resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = Some(v);
        self
    }
    /// <p>A set of resource data types that describe the resources that the finding refers to.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    ) -> Self {
        self.resources = input;
        self
    }
    /// <p>This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn compliance(mut self, input: crate::types::Compliance) -> Self {
        self.compliance = Some(input);
        self
    }
    /// <p>This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations. Contains security standard-related finding details.</p>
    pub fn set_compliance(mut self, input: std::option::Option<crate::types::Compliance>) -> Self {
        self.compliance = input;
        self
    }
    /// <p>Indicates the veracity of a finding. </p>
    pub fn verification_state(mut self, input: crate::types::VerificationState) -> Self {
        self.verification_state = Some(input);
        self
    }
    /// <p>Indicates the veracity of a finding. </p>
    pub fn set_verification_state(
        mut self,
        input: std::option::Option<crate::types::VerificationState>,
    ) -> Self {
        self.verification_state = input;
        self
    }
    /// <p>The workflow state of a finding. </p>
    pub fn workflow_state(mut self, input: crate::types::WorkflowState) -> Self {
        self.workflow_state = Some(input);
        self
    }
    /// <p>The workflow state of a finding. </p>
    pub fn set_workflow_state(
        mut self,
        input: std::option::Option<crate::types::WorkflowState>,
    ) -> Self {
        self.workflow_state = input;
        self
    }
    /// <p>Provides information about the status of the investigation into a finding.</p>
    pub fn workflow(mut self, input: crate::types::Workflow) -> Self {
        self.workflow = Some(input);
        self
    }
    /// <p>Provides information about the status of the investigation into a finding.</p>
    pub fn set_workflow(mut self, input: std::option::Option<crate::types::Workflow>) -> Self {
        self.workflow = input;
        self
    }
    /// <p>The record state of a finding.</p>
    pub fn record_state(mut self, input: crate::types::RecordState) -> Self {
        self.record_state = Some(input);
        self
    }
    /// <p>The record state of a finding.</p>
    pub fn set_record_state(
        mut self,
        input: std::option::Option<crate::types::RecordState>,
    ) -> Self {
        self.record_state = input;
        self
    }
    /// Appends an item to `related_findings`.
    ///
    /// To override the contents of this collection use [`set_related_findings`](Self::set_related_findings).
    ///
    /// <p>A list of related findings.</p>
    pub fn related_findings(mut self, input: crate::types::RelatedFinding) -> Self {
        let mut v = self.related_findings.unwrap_or_default();
        v.push(input);
        self.related_findings = Some(v);
        self
    }
    /// <p>A list of related findings.</p>
    pub fn set_related_findings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RelatedFinding>>,
    ) -> Self {
        self.related_findings = input;
        self
    }
    /// <p>A user-defined note added to a finding.</p>
    pub fn note(mut self, input: crate::types::Note) -> Self {
        self.note = Some(input);
        self
    }
    /// <p>A user-defined note added to a finding.</p>
    pub fn set_note(mut self, input: std::option::Option<crate::types::Note>) -> Self {
        self.note = input;
        self
    }
    /// Appends an item to `vulnerabilities`.
    ///
    /// To override the contents of this collection use [`set_vulnerabilities`](Self::set_vulnerabilities).
    ///
    /// <p>Provides a list of vulnerabilities associated with the findings.</p>
    pub fn vulnerabilities(mut self, input: crate::types::Vulnerability) -> Self {
        let mut v = self.vulnerabilities.unwrap_or_default();
        v.push(input);
        self.vulnerabilities = Some(v);
        self
    }
    /// <p>Provides a list of vulnerabilities associated with the findings.</p>
    pub fn set_vulnerabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Vulnerability>>,
    ) -> Self {
        self.vulnerabilities = input;
        self
    }
    /// <p>Provides an overview of the patch compliance status for an instance against a selected compliance standard.</p>
    pub fn patch_summary(mut self, input: crate::types::PatchSummary) -> Self {
        self.patch_summary = Some(input);
        self
    }
    /// <p>Provides an overview of the patch compliance status for an instance against a selected compliance standard.</p>
    pub fn set_patch_summary(
        mut self,
        input: std::option::Option<crate::types::PatchSummary>,
    ) -> Self {
        self.patch_summary = input;
        self
    }
    /// <p>Provides details about an action that affects or that was taken on a resource.</p>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>Provides details about an action that affects or that was taken on a resource.</p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
    pub fn finding_provider_fields(mut self, input: crate::types::FindingProviderFields) -> Self {
        self.finding_provider_fields = Some(input);
        self
    }
    /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
    pub fn set_finding_provider_fields(
        mut self,
        input: std::option::Option<crate::types::FindingProviderFields>,
    ) -> Self {
        self.finding_provider_fields = input;
        self
    }
    /// <p>Indicates whether the finding is a sample finding.</p>
    pub fn sample(mut self, input: bool) -> Self {
        self.sample = Some(input);
        self
    }
    /// <p>Indicates whether the finding is a sample finding.</p>
    pub fn set_sample(mut self, input: std::option::Option<bool>) -> Self {
        self.sample = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsSecurityFinding`](crate::types::AwsSecurityFinding).
    pub fn build(self) -> crate::types::AwsSecurityFinding {
        crate::types::AwsSecurityFinding {
            schema_version: self.schema_version,
            id: self.id,
            product_arn: self.product_arn,
            product_name: self.product_name,
            company_name: self.company_name,
            region: self.region,
            generator_id: self.generator_id,
            aws_account_id: self.aws_account_id,
            types: self.types,
            first_observed_at: self.first_observed_at,
            last_observed_at: self.last_observed_at,
            created_at: self.created_at,
            updated_at: self.updated_at,
            severity: self.severity,
            confidence: self.confidence.unwrap_or_default(),
            criticality: self.criticality.unwrap_or_default(),
            title: self.title,
            description: self.description,
            remediation: self.remediation,
            source_url: self.source_url,
            product_fields: self.product_fields,
            user_defined_fields: self.user_defined_fields,
            malware: self.malware,
            network: self.network,
            network_path: self.network_path,
            process: self.process,
            threats: self.threats,
            threat_intel_indicators: self.threat_intel_indicators,
            resources: self.resources,
            compliance: self.compliance,
            verification_state: self.verification_state,
            workflow_state: self.workflow_state,
            workflow: self.workflow,
            record_state: self.record_state,
            related_findings: self.related_findings,
            note: self.note,
            vulnerabilities: self.vulnerabilities,
            patch_summary: self.patch_summary,
            action: self.action,
            finding_provider_fields: self.finding_provider_fields,
            sample: self.sample.unwrap_or_default(),
        }
    }
}
