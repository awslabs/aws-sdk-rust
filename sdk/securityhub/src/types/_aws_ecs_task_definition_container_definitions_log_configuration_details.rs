// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The log configuration specification for the container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails  {
    /// <p>The log driver to use for the container.</p> 
    /// <p>Valid values on Fargate are as follows:</p> 
    /// <ul> 
    /// <li> <p> <code>awsfirelens</code> </p> </li> 
    /// <li> <p> <code>awslogs</code> </p> </li> 
    /// <li> <p> <code>splunk</code> </p> </li> 
    /// </ul> 
    /// <p>Valid values on Amazon EC2 are as follows:</p> 
    /// <ul> 
    /// <li> <p> <code>awsfirelens</code> </p> </li> 
    /// <li> <p> <code>awslogs</code> </p> </li> 
    /// <li> <p> <code>fluentd</code> </p> </li> 
    /// <li> <p> <code>gelf</code> </p> </li> 
    /// <li> <p> <code>journald</code> </p> </li> 
    /// <li> <p> <code>json-file</code> </p> </li> 
    /// <li> <p> <code>logentries</code> </p> </li> 
    /// <li> <p> <code>splunk</code> </p> </li> 
    /// <li> <p> <code>syslog</code> </p> </li> 
    /// </ul>
    #[doc(hidden)]
    pub log_driver: std::option::Option<std::string::String>,
    /// <p>The configuration options to send to the log driver. Requires version 1.19 of the Docker Remote API or greater on your container instance.</p>
    #[doc(hidden)]
    pub options: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The secrets to pass to the log configuration.</p>
    #[doc(hidden)]
    pub secret_options: std::option::Option<std::vec::Vec<crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails>>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
    /// <p>The log driver to use for the container.</p>
    /// <p>Valid values on Fargate are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// </ul>
    /// <p>Valid values on Amazon EC2 are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>fluentd</code> </p> </li>
    /// <li> <p> <code>gelf</code> </p> </li>
    /// <li> <p> <code>journald</code> </p> </li>
    /// <li> <p> <code>json-file</code> </p> </li>
    /// <li> <p> <code>logentries</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// <li> <p> <code>syslog</code> </p> </li>
    /// </ul>
    pub fn log_driver(&self) -> std::option::Option<&str> {
        self.log_driver.as_deref()
    }
    /// <p>The configuration options to send to the log driver. Requires version 1.19 of the Docker Remote API or greater on your container instance.</p>
    pub fn options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.options.as_ref()
    }
    /// <p>The secrets to pass to the log configuration.</p>
    pub fn secret_options(&self) -> std::option::Option<& [crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails]>{
        self.secret_options.as_deref()
    }
}
impl AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails).
    pub fn builder() -> crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsBuilder{
        crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsBuilder {
    pub(crate) log_driver: std::option::Option<std::string::String>,
    pub(crate) options: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) secret_options: std::option::Option<std::vec::Vec<crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails>>,
}
impl AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsBuilder {
    /// <p>The log driver to use for the container.</p>
    /// <p>Valid values on Fargate are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// </ul>
    /// <p>Valid values on Amazon EC2 are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>fluentd</code> </p> </li>
    /// <li> <p> <code>gelf</code> </p> </li>
    /// <li> <p> <code>journald</code> </p> </li>
    /// <li> <p> <code>json-file</code> </p> </li>
    /// <li> <p> <code>logentries</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// <li> <p> <code>syslog</code> </p> </li>
    /// </ul>
    pub fn log_driver(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_driver = Some(input.into());
        self
    }
    /// <p>The log driver to use for the container.</p>
    /// <p>Valid values on Fargate are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// </ul>
    /// <p>Valid values on Amazon EC2 are as follows:</p>
    /// <ul>
    /// <li> <p> <code>awsfirelens</code> </p> </li>
    /// <li> <p> <code>awslogs</code> </p> </li>
    /// <li> <p> <code>fluentd</code> </p> </li>
    /// <li> <p> <code>gelf</code> </p> </li>
    /// <li> <p> <code>journald</code> </p> </li>
    /// <li> <p> <code>json-file</code> </p> </li>
    /// <li> <p> <code>logentries</code> </p> </li>
    /// <li> <p> <code>splunk</code> </p> </li>
    /// <li> <p> <code>syslog</code> </p> </li>
    /// </ul>
    pub fn set_log_driver(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_driver = input;
        self
    }
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The configuration options to send to the log driver. Requires version 1.19 of the Docker Remote API or greater on your container instance.</p>
    pub fn options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = Some(hash_map);
        self
    }
    /// <p>The configuration options to send to the log driver. Requires version 1.19 of the Docker Remote API or greater on your container instance.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.options = input;
        self
    }
    /// Appends an item to `secret_options`.
    ///
    /// To override the contents of this collection use [`set_secret_options`](Self::set_secret_options).
    ///
    /// <p>The secrets to pass to the log configuration.</p>
    pub fn secret_options(
        mut self,
        input: crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
    ) -> Self {
        let mut v = self.secret_options.unwrap_or_default();
        v.push(input);
        self.secret_options = Some(v);
        self
    }
    /// <p>The secrets to pass to the log configuration.</p>
    pub fn set_secret_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails>>,
    ) -> Self {
        self.secret_options = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails`](crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
        crate::types::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
            log_driver: self.log_driver,
            options: self.options,
            secret_options: self.secret_options,
        }
    }
}
