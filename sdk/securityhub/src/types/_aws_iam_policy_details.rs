// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an IAM permissions policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsIamPolicyDetails {
    /// <p>The number of users, groups, and roles that the policy is attached to.</p>
    pub attachment_count: ::std::option::Option<i32>,
    /// <p>When the policy was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub create_date: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the default version of the policy.</p>
    pub default_version_id: ::std::option::Option<::std::string::String>,
    /// <p>A description of the policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Whether the policy can be attached to a user, group, or role.</p>
    pub is_attachable: ::std::option::Option<bool>,
    /// <p>The path to the policy.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The number of users and roles that use the policy to set the permissions boundary.</p>
    pub permissions_boundary_usage_count: ::std::option::Option<i32>,
    /// <p>The unique identifier of the policy.</p>
    pub policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the policy.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>List of versions of the policy.</p>
    pub policy_version_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsIamPolicyVersion>>,
    /// <p>When the policy was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub update_date: ::std::option::Option<::std::string::String>,
}
impl AwsIamPolicyDetails {
    /// <p>The number of users, groups, and roles that the policy is attached to.</p>
    pub fn attachment_count(&self) -> ::std::option::Option<i32> {
        self.attachment_count
    }
    /// <p>When the policy was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(&self) -> ::std::option::Option<&str> {
        self.create_date.as_deref()
    }
    /// <p>The identifier of the default version of the policy.</p>
    pub fn default_version_id(&self) -> ::std::option::Option<&str> {
        self.default_version_id.as_deref()
    }
    /// <p>A description of the policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Whether the policy can be attached to a user, group, or role.</p>
    pub fn is_attachable(&self) -> ::std::option::Option<bool> {
        self.is_attachable
    }
    /// <p>The path to the policy.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The number of users and roles that use the policy to set the permissions boundary.</p>
    pub fn permissions_boundary_usage_count(&self) -> ::std::option::Option<i32> {
        self.permissions_boundary_usage_count
    }
    /// <p>The unique identifier of the policy.</p>
    pub fn policy_id(&self) -> ::std::option::Option<&str> {
        self.policy_id.as_deref()
    }
    /// <p>The name of the policy.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>List of versions of the policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_version_list.is_none()`.
    pub fn policy_version_list(&self) -> &[crate::types::AwsIamPolicyVersion] {
        self.policy_version_list.as_deref().unwrap_or_default()
    }
    /// <p>When the policy was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn update_date(&self) -> ::std::option::Option<&str> {
        self.update_date.as_deref()
    }
}
impl AwsIamPolicyDetails {
    /// Creates a new builder-style object to manufacture [`AwsIamPolicyDetails`](crate::types::AwsIamPolicyDetails).
    pub fn builder() -> crate::types::builders::AwsIamPolicyDetailsBuilder {
        crate::types::builders::AwsIamPolicyDetailsBuilder::default()
    }
}

/// A builder for [`AwsIamPolicyDetails`](crate::types::AwsIamPolicyDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsIamPolicyDetailsBuilder {
    pub(crate) attachment_count: ::std::option::Option<i32>,
    pub(crate) create_date: ::std::option::Option<::std::string::String>,
    pub(crate) default_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) is_attachable: ::std::option::Option<bool>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) permissions_boundary_usage_count: ::std::option::Option<i32>,
    pub(crate) policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_version_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsIamPolicyVersion>>,
    pub(crate) update_date: ::std::option::Option<::std::string::String>,
}
impl AwsIamPolicyDetailsBuilder {
    /// <p>The number of users, groups, and roles that the policy is attached to.</p>
    pub fn attachment_count(mut self, input: i32) -> Self {
        self.attachment_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of users, groups, and roles that the policy is attached to.</p>
    pub fn set_attachment_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.attachment_count = input;
        self
    }
    /// <p>The number of users, groups, and roles that the policy is attached to.</p>
    pub fn get_attachment_count(&self) -> &::std::option::Option<i32> {
        &self.attachment_count
    }
    /// <p>When the policy was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn create_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.create_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the policy was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_create_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.create_date = input;
        self
    }
    /// <p>When the policy was created.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_create_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.create_date
    }
    /// <p>The identifier of the default version of the policy.</p>
    pub fn default_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the default version of the policy.</p>
    pub fn set_default_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_version_id = input;
        self
    }
    /// <p>The identifier of the default version of the policy.</p>
    pub fn get_default_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_version_id
    }
    /// <p>A description of the policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Whether the policy can be attached to a user, group, or role.</p>
    pub fn is_attachable(mut self, input: bool) -> Self {
        self.is_attachable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the policy can be attached to a user, group, or role.</p>
    pub fn set_is_attachable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_attachable = input;
        self
    }
    /// <p>Whether the policy can be attached to a user, group, or role.</p>
    pub fn get_is_attachable(&self) -> &::std::option::Option<bool> {
        &self.is_attachable
    }
    /// <p>The path to the policy.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the policy.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path to the policy.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The number of users and roles that use the policy to set the permissions boundary.</p>
    pub fn permissions_boundary_usage_count(mut self, input: i32) -> Self {
        self.permissions_boundary_usage_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of users and roles that use the policy to set the permissions boundary.</p>
    pub fn set_permissions_boundary_usage_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.permissions_boundary_usage_count = input;
        self
    }
    /// <p>The number of users and roles that use the policy to set the permissions boundary.</p>
    pub fn get_permissions_boundary_usage_count(&self) -> &::std::option::Option<i32> {
        &self.permissions_boundary_usage_count
    }
    /// <p>The unique identifier of the policy.</p>
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the policy.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>The unique identifier of the policy.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_id
    }
    /// <p>The name of the policy.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// Appends an item to `policy_version_list`.
    ///
    /// To override the contents of this collection use [`set_policy_version_list`](Self::set_policy_version_list).
    ///
    /// <p>List of versions of the policy.</p>
    pub fn policy_version_list(mut self, input: crate::types::AwsIamPolicyVersion) -> Self {
        let mut v = self.policy_version_list.unwrap_or_default();
        v.push(input);
        self.policy_version_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of versions of the policy.</p>
    pub fn set_policy_version_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsIamPolicyVersion>>) -> Self {
        self.policy_version_list = input;
        self
    }
    /// <p>List of versions of the policy.</p>
    pub fn get_policy_version_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsIamPolicyVersion>> {
        &self.policy_version_list
    }
    /// <p>When the policy was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn update_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.update_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the policy was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_update_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.update_date = input;
        self
    }
    /// <p>When the policy was most recently updated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_update_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.update_date
    }
    /// Consumes the builder and constructs a [`AwsIamPolicyDetails`](crate::types::AwsIamPolicyDetails).
    pub fn build(self) -> crate::types::AwsIamPolicyDetails {
        crate::types::AwsIamPolicyDetails {
            attachment_count: self.attachment_count,
            create_date: self.create_date,
            default_version_id: self.default_version_id,
            description: self.description,
            is_attachable: self.is_attachable,
            path: self.path,
            permissions_boundary_usage_count: self.permissions_boundary_usage_count,
            policy_id: self.policy_id,
            policy_name: self.policy_name,
            policy_version_list: self.policy_version_list,
            update_date: self.update_date,
        }
    }
}
