// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the configuration of an EC2 instance for the load balancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsElbLoadBalancerBackendServerDescription {
    /// <p>The port on which the EC2 instance is listening.</p>
    #[doc(hidden)]
    pub instance_port: i32,
    /// <p>The names of the policies that are enabled for the EC2 instance.</p>
    #[doc(hidden)]
    pub policy_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AwsElbLoadBalancerBackendServerDescription {
    /// <p>The port on which the EC2 instance is listening.</p>
    pub fn instance_port(&self) -> i32 {
        self.instance_port
    }
    /// <p>The names of the policies that are enabled for the EC2 instance.</p>
    pub fn policy_names(&self) -> std::option::Option<&[std::string::String]> {
        self.policy_names.as_deref()
    }
}
impl AwsElbLoadBalancerBackendServerDescription {
    /// Creates a new builder-style object to manufacture [`AwsElbLoadBalancerBackendServerDescription`](crate::types::AwsElbLoadBalancerBackendServerDescription).
    pub fn builder() -> crate::types::builders::AwsElbLoadBalancerBackendServerDescriptionBuilder {
        crate::types::builders::AwsElbLoadBalancerBackendServerDescriptionBuilder::default()
    }
}

/// A builder for [`AwsElbLoadBalancerBackendServerDescription`](crate::types::AwsElbLoadBalancerBackendServerDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsElbLoadBalancerBackendServerDescriptionBuilder {
    pub(crate) instance_port: std::option::Option<i32>,
    pub(crate) policy_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AwsElbLoadBalancerBackendServerDescriptionBuilder {
    /// <p>The port on which the EC2 instance is listening.</p>
    pub fn instance_port(mut self, input: i32) -> Self {
        self.instance_port = Some(input);
        self
    }
    /// <p>The port on which the EC2 instance is listening.</p>
    pub fn set_instance_port(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_port = input;
        self
    }
    /// Appends an item to `policy_names`.
    ///
    /// To override the contents of this collection use [`set_policy_names`](Self::set_policy_names).
    ///
    /// <p>The names of the policies that are enabled for the EC2 instance.</p>
    pub fn policy_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.policy_names.unwrap_or_default();
        v.push(input.into());
        self.policy_names = Some(v);
        self
    }
    /// <p>The names of the policies that are enabled for the EC2 instance.</p>
    pub fn set_policy_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.policy_names = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsElbLoadBalancerBackendServerDescription`](crate::types::AwsElbLoadBalancerBackendServerDescription).
    pub fn build(self) -> crate::types::AwsElbLoadBalancerBackendServerDescription {
        crate::types::AwsElbLoadBalancerBackendServerDescription {
            instance_port: self.instance_port.unwrap_or_default(),
            policy_names: self.policy_names,
        }
    }
}
