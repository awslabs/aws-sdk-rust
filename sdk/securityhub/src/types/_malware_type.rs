// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MalwareType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let malwaretype = unimplemented!();
/// match malwaretype {
///     MalwareType::Adware => { /* ... */ },
///     MalwareType::BlendedThreat => { /* ... */ },
///     MalwareType::BotnetAgent => { /* ... */ },
///     MalwareType::CoinMiner => { /* ... */ },
///     MalwareType::ExploitKit => { /* ... */ },
///     MalwareType::Keylogger => { /* ... */ },
///     MalwareType::Macro => { /* ... */ },
///     MalwareType::PotentiallyUnwanted => { /* ... */ },
///     MalwareType::Ransomware => { /* ... */ },
///     MalwareType::RemoteAccess => { /* ... */ },
///     MalwareType::Rootkit => { /* ... */ },
///     MalwareType::Spyware => { /* ... */ },
///     MalwareType::Trojan => { /* ... */ },
///     MalwareType::Virus => { /* ... */ },
///     MalwareType::Worm => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `malwaretype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MalwareType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MalwareType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MalwareType::NewFeature` is defined.
/// Specifically, when `malwaretype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MalwareType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum MalwareType {
    #[allow(missing_docs)] // documentation missing in model
    Adware,
    #[allow(missing_docs)] // documentation missing in model
    BlendedThreat,
    #[allow(missing_docs)] // documentation missing in model
    BotnetAgent,
    #[allow(missing_docs)] // documentation missing in model
    CoinMiner,
    #[allow(missing_docs)] // documentation missing in model
    ExploitKit,
    #[allow(missing_docs)] // documentation missing in model
    Keylogger,
    #[allow(missing_docs)] // documentation missing in model
    Macro,
    #[allow(missing_docs)] // documentation missing in model
    PotentiallyUnwanted,
    #[allow(missing_docs)] // documentation missing in model
    Ransomware,
    #[allow(missing_docs)] // documentation missing in model
    RemoteAccess,
    #[allow(missing_docs)] // documentation missing in model
    Rootkit,
    #[allow(missing_docs)] // documentation missing in model
    Spyware,
    #[allow(missing_docs)] // documentation missing in model
    Trojan,
    #[allow(missing_docs)] // documentation missing in model
    Virus,
    #[allow(missing_docs)] // documentation missing in model
    Worm,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for MalwareType {
    fn from(s: &str) -> Self {
        match s {
            "ADWARE" => MalwareType::Adware,
            "BLENDED_THREAT" => MalwareType::BlendedThreat,
            "BOTNET_AGENT" => MalwareType::BotnetAgent,
            "COIN_MINER" => MalwareType::CoinMiner,
            "EXPLOIT_KIT" => MalwareType::ExploitKit,
            "KEYLOGGER" => MalwareType::Keylogger,
            "MACRO" => MalwareType::Macro,
            "POTENTIALLY_UNWANTED" => MalwareType::PotentiallyUnwanted,
            "RANSOMWARE" => MalwareType::Ransomware,
            "REMOTE_ACCESS" => MalwareType::RemoteAccess,
            "ROOTKIT" => MalwareType::Rootkit,
            "SPYWARE" => MalwareType::Spyware,
            "TROJAN" => MalwareType::Trojan,
            "VIRUS" => MalwareType::Virus,
            "WORM" => MalwareType::Worm,
            other => MalwareType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for MalwareType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(MalwareType::from(s))
    }
}
impl MalwareType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MalwareType::Adware => "ADWARE",
            MalwareType::BlendedThreat => "BLENDED_THREAT",
            MalwareType::BotnetAgent => "BOTNET_AGENT",
            MalwareType::CoinMiner => "COIN_MINER",
            MalwareType::ExploitKit => "EXPLOIT_KIT",
            MalwareType::Keylogger => "KEYLOGGER",
            MalwareType::Macro => "MACRO",
            MalwareType::PotentiallyUnwanted => "POTENTIALLY_UNWANTED",
            MalwareType::Ransomware => "RANSOMWARE",
            MalwareType::RemoteAccess => "REMOTE_ACCESS",
            MalwareType::Rootkit => "ROOTKIT",
            MalwareType::Spyware => "SPYWARE",
            MalwareType::Trojan => "TROJAN",
            MalwareType::Virus => "VIRUS",
            MalwareType::Worm => "WORM",
            MalwareType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADWARE",
            "BLENDED_THREAT",
            "BOTNET_AGENT",
            "COIN_MINER",
            "EXPLOIT_KIT",
            "KEYLOGGER",
            "MACRO",
            "POTENTIALLY_UNWANTED",
            "RANSOMWARE",
            "REMOTE_ACCESS",
            "ROOTKIT",
            "SPYWARE",
            "TROJAN",
            "VIRUS",
            "WORM",
        ]
    }
}
impl ::std::convert::AsRef<str> for MalwareType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl MalwareType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for MalwareType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            MalwareType::Adware => write!(f, "ADWARE"),
            MalwareType::BlendedThreat => write!(f, "BLENDED_THREAT"),
            MalwareType::BotnetAgent => write!(f, "BOTNET_AGENT"),
            MalwareType::CoinMiner => write!(f, "COIN_MINER"),
            MalwareType::ExploitKit => write!(f, "EXPLOIT_KIT"),
            MalwareType::Keylogger => write!(f, "KEYLOGGER"),
            MalwareType::Macro => write!(f, "MACRO"),
            MalwareType::PotentiallyUnwanted => write!(f, "POTENTIALLY_UNWANTED"),
            MalwareType::Ransomware => write!(f, "RANSOMWARE"),
            MalwareType::RemoteAccess => write!(f, "REMOTE_ACCESS"),
            MalwareType::Rootkit => write!(f, "ROOTKIT"),
            MalwareType::Spyware => write!(f, "SPYWARE"),
            MalwareType::Trojan => write!(f, "TROJAN"),
            MalwareType::Virus => write!(f, "VIRUS"),
            MalwareType::Worm => write!(f, "WORM"),
            MalwareType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
