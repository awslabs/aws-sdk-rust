// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains finding details that are specific to control-based findings. Only returned for findings generated from controls.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Compliance {
    /// <p>The result of a standards check.</p>
    /// <p>The valid values for <code>Status</code> are as follows.</p>
    /// <ul>
    /// <li>
    /// <ul>
    /// <li> <p> <code>PASSED</code> - Standards check passed for all evaluated resources.</p> </li>
    /// <li> <p> <code>WARNING</code> - Some information is missing or this check is not supported for your configuration.</p> </li>
    /// <li> <p> <code>FAILED</code> - Standards check failed for at least one evaluated resource.</p> </li>
    /// <li> <p> <code>NOT_AVAILABLE</code> - Check could not be performed due to a service outage, API error, or because the result of the Config evaluation was <code>NOT_APPLICABLE</code>. If the Config evaluation result was <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives the finding.</p> </li>
    /// </ul> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ComplianceStatus>,
    /// <p>For a control, the industry or regulatory framework requirements that are related to the control. The check for that control is aligned with these requirements.</p>
    #[doc(hidden)]
    pub related_requirements: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>For findings generated from controls, a list of reasons behind the value of <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the <i>Security Hub User Guide</i>. </p>
    #[doc(hidden)]
    pub status_reasons: std::option::Option<std::vec::Vec<crate::types::StatusReason>>,
}
impl Compliance {
    /// <p>The result of a standards check.</p>
    /// <p>The valid values for <code>Status</code> are as follows.</p>
    /// <ul>
    /// <li>
    /// <ul>
    /// <li> <p> <code>PASSED</code> - Standards check passed for all evaluated resources.</p> </li>
    /// <li> <p> <code>WARNING</code> - Some information is missing or this check is not supported for your configuration.</p> </li>
    /// <li> <p> <code>FAILED</code> - Standards check failed for at least one evaluated resource.</p> </li>
    /// <li> <p> <code>NOT_AVAILABLE</code> - Check could not be performed due to a service outage, API error, or because the result of the Config evaluation was <code>NOT_APPLICABLE</code>. If the Config evaluation result was <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives the finding.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::ComplianceStatus> {
        self.status.as_ref()
    }
    /// <p>For a control, the industry or regulatory framework requirements that are related to the control. The check for that control is aligned with these requirements.</p>
    pub fn related_requirements(&self) -> std::option::Option<&[std::string::String]> {
        self.related_requirements.as_deref()
    }
    /// <p>For findings generated from controls, a list of reasons behind the value of <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn status_reasons(&self) -> std::option::Option<&[crate::types::StatusReason]> {
        self.status_reasons.as_deref()
    }
}
impl Compliance {
    /// Creates a new builder-style object to manufacture [`Compliance`](crate::types::Compliance).
    pub fn builder() -> crate::types::builders::ComplianceBuilder {
        crate::types::builders::ComplianceBuilder::default()
    }
}

/// A builder for [`Compliance`](crate::types::Compliance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComplianceBuilder {
    pub(crate) status: std::option::Option<crate::types::ComplianceStatus>,
    pub(crate) related_requirements: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status_reasons: std::option::Option<std::vec::Vec<crate::types::StatusReason>>,
}
impl ComplianceBuilder {
    /// <p>The result of a standards check.</p>
    /// <p>The valid values for <code>Status</code> are as follows.</p>
    /// <ul>
    /// <li>
    /// <ul>
    /// <li> <p> <code>PASSED</code> - Standards check passed for all evaluated resources.</p> </li>
    /// <li> <p> <code>WARNING</code> - Some information is missing or this check is not supported for your configuration.</p> </li>
    /// <li> <p> <code>FAILED</code> - Standards check failed for at least one evaluated resource.</p> </li>
    /// <li> <p> <code>NOT_AVAILABLE</code> - Check could not be performed due to a service outage, API error, or because the result of the Config evaluation was <code>NOT_APPLICABLE</code>. If the Config evaluation result was <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives the finding.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ComplianceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The result of a standards check.</p>
    /// <p>The valid values for <code>Status</code> are as follows.</p>
    /// <ul>
    /// <li>
    /// <ul>
    /// <li> <p> <code>PASSED</code> - Standards check passed for all evaluated resources.</p> </li>
    /// <li> <p> <code>WARNING</code> - Some information is missing or this check is not supported for your configuration.</p> </li>
    /// <li> <p> <code>FAILED</code> - Standards check failed for at least one evaluated resource.</p> </li>
    /// <li> <p> <code>NOT_AVAILABLE</code> - Check could not be performed due to a service outage, API error, or because the result of the Config evaluation was <code>NOT_APPLICABLE</code>. If the Config evaluation result was <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives the finding.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ComplianceStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `related_requirements`.
    ///
    /// To override the contents of this collection use [`set_related_requirements`](Self::set_related_requirements).
    ///
    /// <p>For a control, the industry or regulatory framework requirements that are related to the control. The check for that control is aligned with these requirements.</p>
    pub fn related_requirements(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.related_requirements.unwrap_or_default();
        v.push(input.into());
        self.related_requirements = Some(v);
        self
    }
    /// <p>For a control, the industry or regulatory framework requirements that are related to the control. The check for that control is aligned with these requirements.</p>
    pub fn set_related_requirements(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.related_requirements = input;
        self
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>For findings generated from controls, a list of reasons behind the value of <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn status_reasons(mut self, input: crate::types::StatusReason) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input);
        self.status_reasons = Some(v);
        self
    }
    /// <p>For findings generated from controls, a list of reasons behind the value of <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the <i>Security Hub User Guide</i>. </p>
    pub fn set_status_reasons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StatusReason>>,
    ) -> Self {
        self.status_reasons = input;
        self
    }
    /// Consumes the builder and constructs a [`Compliance`](crate::types::Compliance).
    pub fn build(self) -> crate::types::Compliance {
        crate::types::Compliance {
            status: self.status,
            related_requirements: self.related_requirements,
            status_reasons: self.status_reasons,
        }
    }
}
