// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An occurrence of sensitive data in an Apache Avro object container or an Apache Parquet file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Record {
    /// <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
    #[doc(hidden)]
    pub json_path: std::option::Option<std::string::String>,
    /// <p>The record index, starting from 0, for the record that contains the data.</p>
    #[doc(hidden)]
    pub record_index: i64,
}
impl Record {
    /// <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
    pub fn json_path(&self) -> std::option::Option<&str> {
        self.json_path.as_deref()
    }
    /// <p>The record index, starting from 0, for the record that contains the data.</p>
    pub fn record_index(&self) -> i64 {
        self.record_index
    }
}
impl Record {
    /// Creates a new builder-style object to manufacture [`Record`](crate::types::Record).
    pub fn builder() -> crate::types::builders::RecordBuilder {
        crate::types::builders::RecordBuilder::default()
    }
}

/// A builder for [`Record`](crate::types::Record).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordBuilder {
    pub(crate) json_path: std::option::Option<std::string::String>,
    pub(crate) record_index: std::option::Option<i64>,
}
impl RecordBuilder {
    /// <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
    pub fn json_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.json_path = Some(input.into());
        self
    }
    /// <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
    pub fn set_json_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.json_path = input;
        self
    }
    /// <p>The record index, starting from 0, for the record that contains the data.</p>
    pub fn record_index(mut self, input: i64) -> Self {
        self.record_index = Some(input);
        self
    }
    /// <p>The record index, starting from 0, for the record that contains the data.</p>
    pub fn set_record_index(mut self, input: std::option::Option<i64>) -> Self {
        self.record_index = input;
        self
    }
    /// Consumes the builder and constructs a [`Record`](crate::types::Record).
    pub fn build(self) -> crate::types::Record {
        crate::types::Record {
            json_path: self.json_path,
            record_index: self.record_index.unwrap_or_default(),
        }
    }
}
