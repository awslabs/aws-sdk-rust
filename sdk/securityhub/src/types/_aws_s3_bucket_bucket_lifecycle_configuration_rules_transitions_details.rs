// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule for when objects transition to specific storage classes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
    /// <p>A date on which to transition objects to the specified storage class. If you provide <code>Date</code>, you cannot provide <code>Days</code>.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    #[doc(hidden)]
    pub date: std::option::Option<std::string::String>,
    /// <p>The number of days after which to transition the object to the specified storage class. If you provide <code>Days</code>, you cannot provide <code>Date</code>.</p>
    #[doc(hidden)]
    pub days: i32,
    /// <p>The storage class to transition the object to. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>DEEP_ARCHIVE</code> </p> </li>
    /// <li> <p> <code>GLACIER</code> </p> </li>
    /// <li> <p> <code>INTELLIGENT_TIERING</code> </p> </li>
    /// <li> <p> <code>ONEZONE_IA</code> </p> </li>
    /// <li> <p> <code>STANDARD_IA</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub storage_class: std::option::Option<std::string::String>,
}
impl AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
    /// <p>A date on which to transition objects to the specified storage class. If you provide <code>Date</code>, you cannot provide <code>Days</code>.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn date(&self) -> std::option::Option<&str> {
        self.date.as_deref()
    }
    /// <p>The number of days after which to transition the object to the specified storage class. If you provide <code>Days</code>, you cannot provide <code>Date</code>.</p>
    pub fn days(&self) -> i32 {
        self.days
    }
    /// <p>The storage class to transition the object to. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>DEEP_ARCHIVE</code> </p> </li>
    /// <li> <p> <code>GLACIER</code> </p> </li>
    /// <li> <p> <code>INTELLIGENT_TIERING</code> </p> </li>
    /// <li> <p> <code>ONEZONE_IA</code> </p> </li>
    /// <li> <p> <code>STANDARD_IA</code> </p> </li>
    /// </ul>
    pub fn storage_class(&self) -> std::option::Option<&str> {
        self.storage_class.as_deref()
    }
}
impl AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
    /// Creates a new builder-style object to manufacture [`AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails).
    pub fn builder(
    ) -> crate::types::builders::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsBuilder
    {
        crate::types::builders::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsBuilder::default()
    }
}

/// A builder for [`AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsBuilder {
    pub(crate) date: std::option::Option<std::string::String>,
    pub(crate) days: std::option::Option<i32>,
    pub(crate) storage_class: std::option::Option<std::string::String>,
}
impl AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsBuilder {
    /// <p>A date on which to transition objects to the specified storage class. If you provide <code>Date</code>, you cannot provide <code>Days</code>.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn date(mut self, input: impl Into<std::string::String>) -> Self {
        self.date = Some(input.into());
        self
    }
    /// <p>A date on which to transition objects to the specified storage class. If you provide <code>Date</code>, you cannot provide <code>Days</code>.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.date = input;
        self
    }
    /// <p>The number of days after which to transition the object to the specified storage class. If you provide <code>Days</code>, you cannot provide <code>Date</code>.</p>
    pub fn days(mut self, input: i32) -> Self {
        self.days = Some(input);
        self
    }
    /// <p>The number of days after which to transition the object to the specified storage class. If you provide <code>Days</code>, you cannot provide <code>Date</code>.</p>
    pub fn set_days(mut self, input: std::option::Option<i32>) -> Self {
        self.days = input;
        self
    }
    /// <p>The storage class to transition the object to. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>DEEP_ARCHIVE</code> </p> </li>
    /// <li> <p> <code>GLACIER</code> </p> </li>
    /// <li> <p> <code>INTELLIGENT_TIERING</code> </p> </li>
    /// <li> <p> <code>ONEZONE_IA</code> </p> </li>
    /// <li> <p> <code>STANDARD_IA</code> </p> </li>
    /// </ul>
    pub fn storage_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_class = Some(input.into());
        self
    }
    /// <p>The storage class to transition the object to. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>DEEP_ARCHIVE</code> </p> </li>
    /// <li> <p> <code>GLACIER</code> </p> </li>
    /// <li> <p> <code>INTELLIGENT_TIERING</code> </p> </li>
    /// <li> <p> <code>ONEZONE_IA</code> </p> </li>
    /// <li> <p> <code>STANDARD_IA</code> </p> </li>
    /// </ul>
    pub fn set_storage_class(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage_class = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails`](crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails).
    pub fn build(
        self,
    ) -> crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
        crate::types::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
            date: self.date,
            days: self.days.unwrap_or_default(),
            storage_class: self.storage_class,
        }
    }
}
