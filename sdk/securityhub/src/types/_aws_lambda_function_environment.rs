// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A function's environment variable settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsLambdaFunctionEnvironment {
    /// <p>Environment variable key-value pairs.</p>
    #[doc(hidden)]
    pub variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::AwsLambdaFunctionEnvironmentError>,
}
impl AwsLambdaFunctionEnvironment {
    /// <p>Environment variable key-value pairs.</p>
    pub fn variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.variables.as_ref()
    }
    /// <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::AwsLambdaFunctionEnvironmentError> {
        self.error.as_ref()
    }
}
impl AwsLambdaFunctionEnvironment {
    /// Creates a new builder-style object to manufacture [`AwsLambdaFunctionEnvironment`](crate::types::AwsLambdaFunctionEnvironment).
    pub fn builder() -> crate::types::builders::AwsLambdaFunctionEnvironmentBuilder {
        crate::types::builders::AwsLambdaFunctionEnvironmentBuilder::default()
    }
}

/// A builder for [`AwsLambdaFunctionEnvironment`](crate::types::AwsLambdaFunctionEnvironment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsLambdaFunctionEnvironmentBuilder {
    pub(crate) variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) error: std::option::Option<crate::types::AwsLambdaFunctionEnvironmentError>,
}
impl AwsLambdaFunctionEnvironmentBuilder {
    /// Adds a key-value pair to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>Environment variable key-value pairs.</p>
    pub fn variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.variables = Some(hash_map);
        self
    }
    /// <p>Environment variable key-value pairs.</p>
    pub fn set_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.variables = input;
        self
    }
    /// <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
    pub fn error(mut self, input: crate::types::AwsLambdaFunctionEnvironmentError) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
    pub fn set_error(
        mut self,
        input: std::option::Option<crate::types::AwsLambdaFunctionEnvironmentError>,
    ) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsLambdaFunctionEnvironment`](crate::types::AwsLambdaFunctionEnvironment).
    pub fn build(self) -> crate::types::AwsLambdaFunctionEnvironment {
        crate::types::AwsLambdaFunctionEnvironment {
            variables: self.variables,
            error: self.error,
        }
    }
}
