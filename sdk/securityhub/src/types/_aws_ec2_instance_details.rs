// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an Amazon EC2 instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2InstanceDetails {
    /// <p>The instance type of the instance. </p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The key name associated with the instance.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>The IAM profile ARN of the instance.</p>
    pub iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates when the instance was launched.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub launched_at: ::std::option::Option<::std::string::String>,
    /// <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
    pub network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2InstanceNetworkInterfacesDetails>>,
    /// <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance. </p>
    pub virtualization_type: ::std::option::Option<::std::string::String>,
    /// <p>Details about the metadata options for the Amazon EC2 instance. </p>
    pub metadata_options: ::std::option::Option<crate::types::AwsEc2InstanceMetadataOptions>,
    /// <p> Describes the type of monitoring that’s turned on for an instance. </p>
    pub monitoring: ::std::option::Option<crate::types::AwsEc2InstanceMonitoringDetails>,
}
impl AwsEc2InstanceDetails {
    /// <p>The instance type of the instance. </p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv4_addresses.is_none()`.
    pub fn ipv4_addresses(&self) -> &[::std::string::String] {
        self.ipv4_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[::std::string::String] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The key name associated with the instance.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn iam_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.iam_instance_profile_arn.as_deref()
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>Indicates when the instance was launched.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn launched_at(&self) -> ::std::option::Option<&str> {
        self.launched_at.as_deref()
    }
    /// <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces.is_none()`.
    pub fn network_interfaces(&self) -> &[crate::types::AwsEc2InstanceNetworkInterfacesDetails] {
        self.network_interfaces.as_deref().unwrap_or_default()
    }
    /// <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance. </p>
    pub fn virtualization_type(&self) -> ::std::option::Option<&str> {
        self.virtualization_type.as_deref()
    }
    /// <p>Details about the metadata options for the Amazon EC2 instance. </p>
    pub fn metadata_options(&self) -> ::std::option::Option<&crate::types::AwsEc2InstanceMetadataOptions> {
        self.metadata_options.as_ref()
    }
    /// <p> Describes the type of monitoring that’s turned on for an instance. </p>
    pub fn monitoring(&self) -> ::std::option::Option<&crate::types::AwsEc2InstanceMonitoringDetails> {
        self.monitoring.as_ref()
    }
}
impl AwsEc2InstanceDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn builder() -> crate::types::builders::AwsEc2InstanceDetailsBuilder {
        crate::types::builders::AwsEc2InstanceDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2InstanceDetailsBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) launched_at: ::std::option::Option<::std::string::String>,
    pub(crate) network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2InstanceNetworkInterfacesDetails>>,
    pub(crate) virtualization_type: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_options: ::std::option::Option<crate::types::AwsEc2InstanceMetadataOptions>,
    pub(crate) monitoring: ::std::option::Option<crate::types::AwsEc2InstanceMonitoringDetails>,
}
impl AwsEc2InstanceDetailsBuilder {
    /// <p>The instance type of the instance. </p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type of the instance. </p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The instance type of the instance. </p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// Appends an item to `ipv4_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv4_addresses`](Self::set_ipv4_addresses).
    ///
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn ipv4_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv4_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv4_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn set_ipv4_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv4_addresses = input;
        self
    }
    /// <p>The IPv4 addresses associated with the instance.</p>
    pub fn get_ipv4_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv4_addresses
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn ipv6_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>The IPv6 addresses associated with the instance.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv6_addresses
    }
    /// <p>The key name associated with the instance.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key name associated with the instance.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The key name associated with the instance.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn iam_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn set_iam_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = input;
        self
    }
    /// <p>The IAM profile ARN of the instance.</p>
    pub fn get_iam_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_instance_profile_arn
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The identifier of the VPC that the instance was launched in.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The identifier of the subnet that the instance was launched in.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>Indicates when the instance was launched.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn launched_at(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launched_at = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the instance was launched.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_launched_at(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launched_at = input;
        self
    }
    /// <p>Indicates when the instance was launched.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_launched_at(&self) -> &::std::option::Option<::std::string::String> {
        &self.launched_at
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
    pub fn network_interfaces(mut self, input: crate::types::AwsEc2InstanceNetworkInterfacesDetails) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
    pub fn set_network_interfaces(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2InstanceNetworkInterfacesDetails>>,
    ) -> Self {
        self.network_interfaces = input;
        self
    }
    /// <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
    pub fn get_network_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2InstanceNetworkInterfacesDetails>> {
        &self.network_interfaces
    }
    /// <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance. </p>
    pub fn virtualization_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtualization_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance. </p>
    pub fn set_virtualization_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtualization_type = input;
        self
    }
    /// <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance. </p>
    pub fn get_virtualization_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtualization_type
    }
    /// <p>Details about the metadata options for the Amazon EC2 instance. </p>
    pub fn metadata_options(mut self, input: crate::types::AwsEc2InstanceMetadataOptions) -> Self {
        self.metadata_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the metadata options for the Amazon EC2 instance. </p>
    pub fn set_metadata_options(mut self, input: ::std::option::Option<crate::types::AwsEc2InstanceMetadataOptions>) -> Self {
        self.metadata_options = input;
        self
    }
    /// <p>Details about the metadata options for the Amazon EC2 instance. </p>
    pub fn get_metadata_options(&self) -> &::std::option::Option<crate::types::AwsEc2InstanceMetadataOptions> {
        &self.metadata_options
    }
    /// <p> Describes the type of monitoring that’s turned on for an instance. </p>
    pub fn monitoring(mut self, input: crate::types::AwsEc2InstanceMonitoringDetails) -> Self {
        self.monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the type of monitoring that’s turned on for an instance. </p>
    pub fn set_monitoring(mut self, input: ::std::option::Option<crate::types::AwsEc2InstanceMonitoringDetails>) -> Self {
        self.monitoring = input;
        self
    }
    /// <p> Describes the type of monitoring that’s turned on for an instance. </p>
    pub fn get_monitoring(&self) -> &::std::option::Option<crate::types::AwsEc2InstanceMonitoringDetails> {
        &self.monitoring
    }
    /// Consumes the builder and constructs a [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn build(self) -> crate::types::AwsEc2InstanceDetails {
        crate::types::AwsEc2InstanceDetails {
            r#type: self.r#type,
            image_id: self.image_id,
            ipv4_addresses: self.ipv4_addresses,
            ipv6_addresses: self.ipv6_addresses,
            key_name: self.key_name,
            iam_instance_profile_arn: self.iam_instance_profile_arn,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            launched_at: self.launched_at,
            network_interfaces: self.network_interfaces,
            virtualization_type: self.virtualization_type,
            metadata_options: self.metadata_options,
            monitoring: self.monitoring,
        }
    }
}
