// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of network-related information about a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Network {
    /// <p>The direction of network traffic associated with a finding.</p>
    pub direction: ::std::option::Option<crate::types::NetworkDirection>,
    /// <p>The protocol of network-related information about a finding.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The range of open ports that is present on the network.</p>
    pub open_port_range: ::std::option::Option<crate::types::PortRange>,
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub source_ipv4: ::std::option::Option<::std::string::String>,
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub source_ipv6: ::std::option::Option<::std::string::String>,
    /// <p>The source port of network-related information about a finding.</p>
    pub source_port: ::std::option::Option<i32>,
    /// <p>The source domain of network-related information about a finding.</p>
    pub source_domain: ::std::option::Option<::std::string::String>,
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub source_mac: ::std::option::Option<::std::string::String>,
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub destination_ipv4: ::std::option::Option<::std::string::String>,
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub destination_ipv6: ::std::option::Option<::std::string::String>,
    /// <p>The destination port of network-related information about a finding.</p>
    pub destination_port: ::std::option::Option<i32>,
    /// <p>The destination domain of network-related information about a finding.</p>
    pub destination_domain: ::std::option::Option<::std::string::String>,
}
impl Network {
    /// <p>The direction of network traffic associated with a finding.</p>
    pub fn direction(&self) -> ::std::option::Option<&crate::types::NetworkDirection> {
        self.direction.as_ref()
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The range of open ports that is present on the network.</p>
    pub fn open_port_range(&self) -> ::std::option::Option<&crate::types::PortRange> {
        self.open_port_range.as_ref()
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn source_ipv4(&self) -> ::std::option::Option<&str> {
        self.source_ipv4.as_deref()
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn source_ipv6(&self) -> ::std::option::Option<&str> {
        self.source_ipv6.as_deref()
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn source_port(&self) -> ::std::option::Option<i32> {
        self.source_port
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn source_domain(&self) -> ::std::option::Option<&str> {
        self.source_domain.as_deref()
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn source_mac(&self) -> ::std::option::Option<&str> {
        self.source_mac.as_deref()
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn destination_ipv4(&self) -> ::std::option::Option<&str> {
        self.destination_ipv4.as_deref()
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn destination_ipv6(&self) -> ::std::option::Option<&str> {
        self.destination_ipv6.as_deref()
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn destination_port(&self) -> ::std::option::Option<i32> {
        self.destination_port
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn destination_domain(&self) -> ::std::option::Option<&str> {
        self.destination_domain.as_deref()
    }
}
impl Network {
    /// Creates a new builder-style object to manufacture [`Network`](crate::types::Network).
    pub fn builder() -> crate::types::builders::NetworkBuilder {
        crate::types::builders::NetworkBuilder::default()
    }
}

/// A builder for [`Network`](crate::types::Network).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkBuilder {
    pub(crate) direction: ::std::option::Option<crate::types::NetworkDirection>,
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) open_port_range: ::std::option::Option<crate::types::PortRange>,
    pub(crate) source_ipv4: ::std::option::Option<::std::string::String>,
    pub(crate) source_ipv6: ::std::option::Option<::std::string::String>,
    pub(crate) source_port: ::std::option::Option<i32>,
    pub(crate) source_domain: ::std::option::Option<::std::string::String>,
    pub(crate) source_mac: ::std::option::Option<::std::string::String>,
    pub(crate) destination_ipv4: ::std::option::Option<::std::string::String>,
    pub(crate) destination_ipv6: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<i32>,
    pub(crate) destination_domain: ::std::option::Option<::std::string::String>,
}
impl NetworkBuilder {
    /// <p>The direction of network traffic associated with a finding.</p>
    pub fn direction(mut self, input: crate::types::NetworkDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The direction of network traffic associated with a finding.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::NetworkDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The direction of network traffic associated with a finding.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::NetworkDirection> {
        &self.direction
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol of network-related information about a finding.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The range of open ports that is present on the network.</p>
    pub fn open_port_range(mut self, input: crate::types::PortRange) -> Self {
        self.open_port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The range of open ports that is present on the network.</p>
    pub fn set_open_port_range(mut self, input: ::std::option::Option<crate::types::PortRange>) -> Self {
        self.open_port_range = input;
        self
    }
    /// <p>The range of open ports that is present on the network.</p>
    pub fn get_open_port_range(&self) -> &::std::option::Option<crate::types::PortRange> {
        &self.open_port_range
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn source_ipv4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_ipv4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn set_source_ipv4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_ipv4 = input;
        self
    }
    /// <p>The source IPv4 address of network-related information about a finding.</p>
    pub fn get_source_ipv4(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_ipv4
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn source_ipv6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_ipv6 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn set_source_ipv6(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_ipv6 = input;
        self
    }
    /// <p>The source IPv6 address of network-related information about a finding.</p>
    pub fn get_source_ipv6(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_ipv6
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn source_port(mut self, input: i32) -> Self {
        self.source_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn set_source_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.source_port = input;
        self
    }
    /// <p>The source port of network-related information about a finding.</p>
    pub fn get_source_port(&self) -> &::std::option::Option<i32> {
        &self.source_port
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn source_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn set_source_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_domain = input;
        self
    }
    /// <p>The source domain of network-related information about a finding.</p>
    pub fn get_source_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_domain
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn source_mac(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_mac = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn set_source_mac(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_mac = input;
        self
    }
    /// <p>The source media access control (MAC) address of network-related information about a finding.</p>
    pub fn get_source_mac(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_mac
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn destination_ipv4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_ipv4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn set_destination_ipv4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_ipv4 = input;
        self
    }
    /// <p>The destination IPv4 address of network-related information about a finding.</p>
    pub fn get_destination_ipv4(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_ipv4
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn destination_ipv6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_ipv6 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn set_destination_ipv6(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_ipv6 = input;
        self
    }
    /// <p>The destination IPv6 address of network-related information about a finding.</p>
    pub fn get_destination_ipv6(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_ipv6
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn destination_port(mut self, input: i32) -> Self {
        self.destination_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The destination port of network-related information about a finding.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<i32> {
        &self.destination_port
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn destination_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn set_destination_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_domain = input;
        self
    }
    /// <p>The destination domain of network-related information about a finding.</p>
    pub fn get_destination_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_domain
    }
    /// Consumes the builder and constructs a [`Network`](crate::types::Network).
    pub fn build(self) -> crate::types::Network {
        crate::types::Network {
            direction: self.direction,
            protocol: self.protocol,
            open_port_range: self.open_port_range,
            source_ipv4: self.source_ipv4,
            source_ipv6: self.source_ipv6,
            source_port: self.source_port,
            source_domain: self.source_domain,
            source_mac: self.source_mac,
            destination_ipv4: self.destination_ipv4,
            destination_ipv6: self.destination_ipv6,
            destination_port: self.destination_port,
            destination_domain: self.destination_domain,
        }
    }
}
