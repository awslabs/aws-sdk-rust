// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rules and actions for the rule group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleGroupSource {
    /// <p>Stateful inspection criteria for a domain list rule group. A domain list rule group determines access by specific protocols to specific domains.</p>
    #[doc(hidden)]
    pub rules_source_list: std::option::Option<crate::types::RuleGroupSourceListDetails>,
    /// <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules.</p>
    #[doc(hidden)]
    pub rules_string: std::option::Option<std::string::String>,
    /// <p>Suricata rule specifications.</p>
    #[doc(hidden)]
    pub stateful_rules:
        std::option::Option<std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesDetails>>,
    /// <p>The stateless rules and custom actions used by a stateless rule group.</p>
    #[doc(hidden)]
    pub stateless_rules_and_custom_actions:
        std::option::Option<crate::types::RuleGroupSourceStatelessRulesAndCustomActionsDetails>,
}
impl RuleGroupSource {
    /// <p>Stateful inspection criteria for a domain list rule group. A domain list rule group determines access by specific protocols to specific domains.</p>
    pub fn rules_source_list(
        &self,
    ) -> std::option::Option<&crate::types::RuleGroupSourceListDetails> {
        self.rules_source_list.as_ref()
    }
    /// <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules.</p>
    pub fn rules_string(&self) -> std::option::Option<&str> {
        self.rules_string.as_deref()
    }
    /// <p>Suricata rule specifications.</p>
    pub fn stateful_rules(
        &self,
    ) -> std::option::Option<&[crate::types::RuleGroupSourceStatefulRulesDetails]> {
        self.stateful_rules.as_deref()
    }
    /// <p>The stateless rules and custom actions used by a stateless rule group.</p>
    pub fn stateless_rules_and_custom_actions(
        &self,
    ) -> std::option::Option<&crate::types::RuleGroupSourceStatelessRulesAndCustomActionsDetails>
    {
        self.stateless_rules_and_custom_actions.as_ref()
    }
}
impl RuleGroupSource {
    /// Creates a new builder-style object to manufacture [`RuleGroupSource`](crate::types::RuleGroupSource).
    pub fn builder() -> crate::types::builders::RuleGroupSourceBuilder {
        crate::types::builders::RuleGroupSourceBuilder::default()
    }
}

/// A builder for [`RuleGroupSource`](crate::types::RuleGroupSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleGroupSourceBuilder {
    pub(crate) rules_source_list: std::option::Option<crate::types::RuleGroupSourceListDetails>,
    pub(crate) rules_string: std::option::Option<std::string::String>,
    pub(crate) stateful_rules:
        std::option::Option<std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesDetails>>,
    pub(crate) stateless_rules_and_custom_actions:
        std::option::Option<crate::types::RuleGroupSourceStatelessRulesAndCustomActionsDetails>,
}
impl RuleGroupSourceBuilder {
    /// <p>Stateful inspection criteria for a domain list rule group. A domain list rule group determines access by specific protocols to specific domains.</p>
    pub fn rules_source_list(mut self, input: crate::types::RuleGroupSourceListDetails) -> Self {
        self.rules_source_list = Some(input);
        self
    }
    /// <p>Stateful inspection criteria for a domain list rule group. A domain list rule group determines access by specific protocols to specific domains.</p>
    pub fn set_rules_source_list(
        mut self,
        input: std::option::Option<crate::types::RuleGroupSourceListDetails>,
    ) -> Self {
        self.rules_source_list = input;
        self
    }
    /// <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules.</p>
    pub fn rules_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.rules_string = Some(input.into());
        self
    }
    /// <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules.</p>
    pub fn set_rules_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rules_string = input;
        self
    }
    /// Appends an item to `stateful_rules`.
    ///
    /// To override the contents of this collection use [`set_stateful_rules`](Self::set_stateful_rules).
    ///
    /// <p>Suricata rule specifications.</p>
    pub fn stateful_rules(
        mut self,
        input: crate::types::RuleGroupSourceStatefulRulesDetails,
    ) -> Self {
        let mut v = self.stateful_rules.unwrap_or_default();
        v.push(input);
        self.stateful_rules = Some(v);
        self
    }
    /// <p>Suricata rule specifications.</p>
    pub fn set_stateful_rules(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::RuleGroupSourceStatefulRulesDetails>,
        >,
    ) -> Self {
        self.stateful_rules = input;
        self
    }
    /// <p>The stateless rules and custom actions used by a stateless rule group.</p>
    pub fn stateless_rules_and_custom_actions(
        mut self,
        input: crate::types::RuleGroupSourceStatelessRulesAndCustomActionsDetails,
    ) -> Self {
        self.stateless_rules_and_custom_actions = Some(input);
        self
    }
    /// <p>The stateless rules and custom actions used by a stateless rule group.</p>
    pub fn set_stateless_rules_and_custom_actions(
        mut self,
        input: std::option::Option<
            crate::types::RuleGroupSourceStatelessRulesAndCustomActionsDetails,
        >,
    ) -> Self {
        self.stateless_rules_and_custom_actions = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleGroupSource`](crate::types::RuleGroupSource).
    pub fn build(self) -> crate::types::RuleGroupSource {
        crate::types::RuleGroupSource {
            rules_source_list: self.rules_source_list,
            rules_string: self.rules_string,
            stateful_rules: self.stateful_rules,
            stateless_rules_and_custom_actions: self.stateless_rules_and_custom_actions,
        }
    }
}
