// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ecs_task_definition_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEcsTaskDefinitionDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.container_definitions {
        let mut array_2 = object.key("ContainerDefinitions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_details::ser_aws_ecs_task_definition_container_definitions_details(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.cpu {
        object.key("Cpu").string(var_5.as_str());
    }
    if let Some(var_6) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.family {
        object.key("Family").string(var_7.as_str());
    }
    if let Some(var_8) = &input.inference_accelerators {
        let mut array_9 = object.key("InferenceAccelerators").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_inference_accelerators_details::ser_aws_ecs_task_definition_inference_accelerators_details(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.ipc_mode {
        object.key("IpcMode").string(var_12.as_str());
    }
    if let Some(var_13) = &input.memory {
        object.key("Memory").string(var_13.as_str());
    }
    if let Some(var_14) = &input.network_mode {
        object.key("NetworkMode").string(var_14.as_str());
    }
    if let Some(var_15) = &input.pid_mode {
        object.key("PidMode").string(var_15.as_str());
    }
    if let Some(var_16) = &input.placement_constraints {
        let mut array_17 = object.key("PlacementConstraints").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_placement_constraints_details::ser_aws_ecs_task_definition_placement_constraints_details(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ProxyConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_proxy_configuration_details::ser_aws_ecs_task_definition_proxy_configuration_details(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.requires_compatibilities {
        let mut array_23 = object.key("RequiresCompatibilities").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.volumes {
        let mut array_27 = object.key("Volumes").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_volumes_details::ser_aws_ecs_task_definition_volumes_details(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_ecs_task_definition_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEcsTaskDefinitionDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEcsTaskDefinitionDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ContainerDefinitions" => {
                                builder = builder.set_container_definitions(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_list::de_aws_ecs_task_definition_container_definitions_list(tokens)?
                                );
                            }
                            "Cpu" => {
                                builder = builder.set_cpu(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExecutionRoleArn" => {
                                builder = builder.set_execution_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Family" => {
                                builder = builder.set_family(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InferenceAccelerators" => {
                                builder = builder.set_inference_accelerators(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_inference_accelerators_list::de_aws_ecs_task_definition_inference_accelerators_list(tokens)?
                                );
                            }
                            "IpcMode" => {
                                builder = builder.set_ipc_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Memory" => {
                                builder = builder.set_memory(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NetworkMode" => {
                                builder = builder.set_network_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PidMode" => {
                                builder = builder.set_pid_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PlacementConstraints" => {
                                builder = builder.set_placement_constraints(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_placement_constraints_list::de_aws_ecs_task_definition_placement_constraints_list(tokens)?
                                );
                            }
                            "ProxyConfiguration" => {
                                builder = builder.set_proxy_configuration(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_proxy_configuration_details::de_aws_ecs_task_definition_proxy_configuration_details(tokens)?
                                );
                            }
                            "RequiresCompatibilities" => {
                                builder = builder.set_requires_compatibilities(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "TaskRoleArn" => {
                                builder = builder.set_task_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Volumes" => {
                                builder = builder.set_volumes(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_volumes_list::de_aws_ecs_task_definition_volumes_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
