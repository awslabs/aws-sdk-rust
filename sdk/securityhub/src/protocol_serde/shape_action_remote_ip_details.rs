// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_action_remote_ip_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ActionRemoteIpDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_1.as_str());
    }
    if let Some(var_2) = &input.organization {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Organization").start_object();
        crate::protocol_serde::shape_ip_organization_details::ser_ip_organization_details(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.country {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Country").start_object();
        crate::protocol_serde::shape_country::ser_country(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.city {
        #[allow(unused_mut)]
        let mut object_7 = object.key("City").start_object();
        crate::protocol_serde::shape_city::ser_city(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.geo_location {
        #[allow(unused_mut)]
        let mut object_9 = object.key("GeoLocation").start_object();
        crate::protocol_serde::shape_geo_location::ser_geo_location(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_action_remote_ip_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ActionRemoteIpDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ActionRemoteIpDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "IpAddressV4" => {
                            builder = builder.set_ip_address_v4(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Organization" => {
                            builder =
                                builder.set_organization(crate::protocol_serde::shape_ip_organization_details::de_ip_organization_details(tokens)?);
                        }
                        "Country" => {
                            builder = builder.set_country(crate::protocol_serde::shape_country::de_country(tokens)?);
                        }
                        "City" => {
                            builder = builder.set_city(crate::protocol_serde::shape_city::de_city(tokens)?);
                        }
                        "GeoLocation" => {
                            builder = builder.set_geo_location(crate::protocol_serde::shape_geo_location::de_geo_location(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
