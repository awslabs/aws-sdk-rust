// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_elasticsearch_domain_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsElasticsearchDomainDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_policies {
        object.key("AccessPolicies").string(var_1.as_str());
    }
    if let Some(var_2) = &input.domain_endpoint_options {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DomainEndpointOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_domain_endpoint_options::ser_aws_elasticsearch_domain_domain_endpoint_options(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.domain_id {
        object.key("DomainId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.domain_name {
        object.key("DomainName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.endpoint {
        object.key("Endpoint").string(var_6.as_str());
    }
    if let Some(var_7) = &input.endpoints {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Endpoints").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.elasticsearch_cluster_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("ElasticsearchClusterConfig").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_elasticsearch_cluster_config_details::ser_aws_elasticsearch_domain_elasticsearch_cluster_config_details(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.encryption_at_rest_options {
        #[allow(unused_mut)]
        let mut object_15 = object.key("EncryptionAtRestOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_encryption_at_rest_options::ser_aws_elasticsearch_domain_encryption_at_rest_options(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.log_publishing_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("LogPublishingOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_log_publishing_options::ser_aws_elasticsearch_domain_log_publishing_options(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.node_to_node_encryption_options {
        #[allow(unused_mut)]
        let mut object_19 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_node_to_node_encryption_options::ser_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.service_software_options {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ServiceSoftwareOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_service_software_options::ser_aws_elasticsearch_domain_service_software_options(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.vpc_options {
        #[allow(unused_mut)]
        let mut object_23 = object.key("VPCOptions").start_object();
        crate::protocol_serde::shape_aws_elasticsearch_domain_vpc_options::ser_aws_elasticsearch_domain_vpc_options(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_elasticsearch_domain_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsElasticsearchDomainDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsElasticsearchDomainDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AccessPolicies" => {
                            builder = builder.set_access_policies(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DomainEndpointOptions" => {
                            builder = builder.set_domain_endpoint_options(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_domain_endpoint_options::de_aws_elasticsearch_domain_domain_endpoint_options(tokens)?
                                );
                        }
                        "DomainId" => {
                            builder = builder.set_domain_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DomainName" => {
                            builder = builder.set_domain_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Endpoint" => {
                            builder = builder.set_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Endpoints" => {
                            builder = builder.set_endpoints(crate::protocol_serde::shape_field_map::de_field_map(tokens)?);
                        }
                        "ElasticsearchVersion" => {
                            builder = builder.set_elasticsearch_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ElasticsearchClusterConfig" => {
                            builder = builder.set_elasticsearch_cluster_config(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_elasticsearch_cluster_config_details::de_aws_elasticsearch_domain_elasticsearch_cluster_config_details(tokens)?
                                );
                        }
                        "EncryptionAtRestOptions" => {
                            builder = builder.set_encryption_at_rest_options(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_encryption_at_rest_options::de_aws_elasticsearch_domain_encryption_at_rest_options(tokens)?
                                );
                        }
                        "LogPublishingOptions" => {
                            builder = builder.set_log_publishing_options(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_log_publishing_options::de_aws_elasticsearch_domain_log_publishing_options(tokens)?
                                );
                        }
                        "NodeToNodeEncryptionOptions" => {
                            builder = builder.set_node_to_node_encryption_options(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_node_to_node_encryption_options::de_aws_elasticsearch_domain_node_to_node_encryption_options(tokens)?
                                );
                        }
                        "ServiceSoftwareOptions" => {
                            builder = builder.set_service_software_options(
                                    crate::protocol_serde::shape_aws_elasticsearch_domain_service_software_options::de_aws_elasticsearch_domain_service_software_options(tokens)?
                                );
                        }
                        "VPCOptions" => {
                            builder = builder.set_vpc_options(
                                crate::protocol_serde::shape_aws_elasticsearch_domain_vpc_options::de_aws_elasticsearch_domain_vpc_options(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
