// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_api_gateway_method_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsApiGatewayMethodSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.metrics_enabled {
        object.key("MetricsEnabled").boolean(*var_1);
    }
    if let Some(var_2) = &input.logging_level {
        object.key("LoggingLevel").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_trace_enabled {
        object.key("DataTraceEnabled").boolean(*var_3);
    }
    if let Some(var_4) = &input.throttling_burst_limit {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.throttling_rate_limit {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.caching_enabled {
        object.key("CachingEnabled").boolean(*var_6);
    }
    if let Some(var_7) = &input.cache_ttl_in_seconds {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.cache_data_encrypted {
        object.key("CacheDataEncrypted").boolean(*var_8);
    }
    if let Some(var_9) = &input.require_authorization_for_cache_control {
        object.key("RequireAuthorizationForCacheControl").boolean(*var_9);
    }
    if let Some(var_10) = &input.unauthorized_cache_control_header_strategy {
        object.key("UnauthorizedCacheControlHeaderStrategy").string(var_10.as_str());
    }
    if let Some(var_11) = &input.http_method {
        object.key("HttpMethod").string(var_11.as_str());
    }
    if let Some(var_12) = &input.resource_path {
        object.key("ResourcePath").string(var_12.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_api_gateway_method_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsApiGatewayMethodSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsApiGatewayMethodSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "MetricsEnabled" => {
                            builder = builder.set_metrics_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "LoggingLevel" => {
                            builder = builder.set_logging_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DataTraceEnabled" => {
                            builder = builder.set_data_trace_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ThrottlingBurstLimit" => {
                            builder = builder.set_throttling_burst_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ThrottlingRateLimit" => {
                            builder = builder.set_throttling_rate_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "CachingEnabled" => {
                            builder = builder.set_caching_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CacheTtlInSeconds" => {
                            builder = builder.set_cache_ttl_in_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "CacheDataEncrypted" => {
                            builder = builder.set_cache_data_encrypted(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RequireAuthorizationForCacheControl" => {
                            builder = builder.set_require_authorization_for_cache_control(
                                ::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?,
                            );
                        }
                        "UnauthorizedCacheControlHeaderStrategy" => {
                            builder = builder.set_unauthorized_cache_control_header_strategy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "HttpMethod" => {
                            builder = builder.set_http_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ResourcePath" => {
                            builder = builder.set_resource_path(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
