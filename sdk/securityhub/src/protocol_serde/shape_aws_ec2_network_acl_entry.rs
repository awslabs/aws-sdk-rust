// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_network_acl_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2NetworkAclEntry,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cidr_block {
        object.key("CidrBlock").string(var_1.as_str());
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_2) = &input.icmp_type_code {
        #[allow(unused_mut)]
        let mut object_3 = object.key("IcmpTypeCode").start_object();
        crate::protocol_serde::shape_icmp_type_code::ser_icmp_type_code(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_4.as_str());
    }
    if let Some(var_5) = &input.port_range {
        #[allow(unused_mut)]
        let mut object_6 = object.key("PortRange").start_object();
        crate::protocol_serde::shape_port_range_from_to::ser_port_range_from_to(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.protocol {
        object.key("Protocol").string(var_7.as_str());
    }
    if let Some(var_8) = &input.rule_action {
        object.key("RuleAction").string(var_8.as_str());
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_network_acl_entry<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEc2NetworkAclEntry>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2NetworkAclEntryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "CidrBlock" => {
                                builder = builder.set_cidr_block(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Egress" => {
                                builder = builder.set_egress(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "IcmpTypeCode" => {
                                builder = builder.set_icmp_type_code(
                                    crate::protocol_serde::shape_icmp_type_code::de_icmp_type_code(
                                        tokens,
                                    )?,
                                );
                            }
                            "Ipv6CidrBlock" => {
                                builder = builder.set_ipv6_cidr_block(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PortRange" => {
                                builder = builder.set_port_range(
                                    crate::protocol_serde::shape_port_range_from_to::de_port_range_from_to(tokens)?
                                );
                            }
                            "Protocol" => {
                                builder = builder.set_protocol(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RuleAction" => {
                                builder = builder.set_rule_action(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RuleNumber" => {
                                builder = builder.set_rule_number(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
