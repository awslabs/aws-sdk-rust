// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_api_gateway_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsApiGatewayStageDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.deployment_id {
        object.key("DeploymentId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.stage_name {
        object.key("StageName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_5) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_6.as_str());
    }
    if let Some(var_7) = &input.method_settings {
        let mut array_8 = object.key("MethodSettings").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_aws_api_gateway_method_settings::ser_aws_api_gateway_method_settings(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.variables {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Variables").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_15.as_str());
    }
    if let Some(var_16) = &input.access_log_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("AccessLogSettings").start_object();
        crate::protocol_serde::shape_aws_api_gateway_access_log_settings::ser_aws_api_gateway_access_log_settings(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.canary_settings {
        #[allow(unused_mut)]
        let mut object_19 = object.key("CanarySettings").start_object();
        crate::protocol_serde::shape_aws_api_gateway_canary_settings::ser_aws_api_gateway_canary_settings(&mut object_19, var_18)?;
        object_19.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_20) = &input.created_date {
        object.key("CreatedDate").string(var_20.as_str());
    }
    if let Some(var_21) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_21.as_str());
    }
    if let Some(var_22) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_22.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_api_gateway_stage_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsApiGatewayStageDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsApiGatewayStageDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DeploymentId" => {
                                builder = builder.set_deployment_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ClientCertificateId" => {
                                builder = builder.set_client_certificate_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "StageName" => {
                                builder = builder.set_stage_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CacheClusterEnabled" => {
                                builder = builder.set_cache_cluster_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CacheClusterSize" => {
                                builder = builder.set_cache_cluster_size(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CacheClusterStatus" => {
                                builder = builder.set_cache_cluster_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MethodSettings" => {
                                builder = builder.set_method_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_method_settings_list::de_aws_api_gateway_method_settings_list(tokens)?
                                );
                            }
                            "Variables" => {
                                builder = builder.set_variables(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "DocumentationVersion" => {
                                builder = builder.set_documentation_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AccessLogSettings" => {
                                builder = builder.set_access_log_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_access_log_settings::de_aws_api_gateway_access_log_settings(tokens)?
                                );
                            }
                            "CanarySettings" => {
                                builder = builder.set_canary_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_canary_settings::de_aws_api_gateway_canary_settings(tokens)?
                                );
                            }
                            "TracingEnabled" => {
                                builder = builder.set_tracing_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CreatedDate" => {
                                builder = builder.set_created_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastUpdatedDate" => {
                                builder = builder.set_last_updated_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "WebAclArn" => {
                                builder = builder.set_web_acl_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
