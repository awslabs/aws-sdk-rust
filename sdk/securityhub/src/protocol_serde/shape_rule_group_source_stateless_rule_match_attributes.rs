// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rule_group_source_stateless_rule_match_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RuleGroupSourceStatelessRuleMatchAttributes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.destination_ports {
        let mut array_2 = object.key("DestinationPorts").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_destination_ports::ser_rule_group_source_stateless_rule_match_attributes_destination_ports(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.destinations {
        let mut array_6 = object.key("Destinations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_destinations::ser_rule_group_source_stateless_rule_match_attributes_destinations(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.protocols {
        let mut array_10 = object.key("Protocols").start_array();
        for item_11 in var_9 {
            {
                array_10.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_11).into()),
                );
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.source_ports {
        let mut array_13 = object.key("SourcePorts").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_source_ports::ser_rule_group_source_stateless_rule_match_attributes_source_ports(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.sources {
        let mut array_17 = object.key("Sources").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_sources::ser_rule_group_source_stateless_rule_match_attributes_sources(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.tcp_flags {
        let mut array_21 = object.key("TcpFlags").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_tcp_flags::ser_rule_group_source_stateless_rule_match_attributes_tcp_flags(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub(crate) fn de_rule_group_source_stateless_rule_match_attributes<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::RuleGroupSourceStatelessRuleMatchAttributes>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::RuleGroupSourceStatelessRuleMatchAttributesBuilder::default(
                );
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DestinationPorts" => {
                                builder = builder.set_destination_ports(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_destination_ports_list::de_rule_group_source_stateless_rule_match_attributes_destination_ports_list(tokens)?
                                );
                            }
                            "Destinations" => {
                                builder = builder.set_destinations(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_destinations_list::de_rule_group_source_stateless_rule_match_attributes_destinations_list(tokens)?
                                );
                            }
                            "Protocols" => {
                                builder = builder.set_protocols(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_protocols_list::de_rule_group_source_stateless_rule_match_attributes_protocols_list(tokens)?
                                );
                            }
                            "SourcePorts" => {
                                builder = builder.set_source_ports(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_source_ports_list::de_rule_group_source_stateless_rule_match_attributes_source_ports_list(tokens)?
                                );
                            }
                            "Sources" => {
                                builder = builder.set_sources(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_sources_list::de_rule_group_source_stateless_rule_match_attributes_sources_list(tokens)?
                                );
                            }
                            "TcpFlags" => {
                                builder = builder.set_tcp_flags(
                                    crate::protocol_serde::shape_rule_group_source_stateless_rule_match_attributes_tcp_flags_list::de_rule_group_source_stateless_rule_match_attributes_tcp_flags_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
