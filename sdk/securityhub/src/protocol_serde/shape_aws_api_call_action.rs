// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_api_call_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsApiCallAction,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.api {
        object.key("Api").string(var_1.as_str());
    }
    if let Some(var_2) = &input.service_name {
        object.key("ServiceName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.caller_type {
        object.key("CallerType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.remote_ip_details {
        #[allow(unused_mut)]
        let mut object_5 = object.key("RemoteIpDetails").start_object();
        crate::protocol_serde::shape_action_remote_ip_details::ser_action_remote_ip_details(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.domain_details {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DomainDetails").start_object();
        crate::protocol_serde::shape_aws_api_call_action_domain_details::ser_aws_api_call_action_domain_details(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.affected_resources {
        #[allow(unused_mut)]
        let mut object_9 = object.key("AffectedResources").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.first_seen {
        object.key("FirstSeen").string(var_12.as_str());
    }
    if let Some(var_13) = &input.last_seen {
        object.key("LastSeen").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_api_call_action<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsApiCallAction>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsApiCallActionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Api" => {
                                builder = builder.set_api(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ServiceName" => {
                                builder = builder.set_service_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CallerType" => {
                                builder = builder.set_caller_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RemoteIpDetails" => {
                                builder = builder.set_remote_ip_details(
                                    crate::protocol_serde::shape_action_remote_ip_details::de_action_remote_ip_details(tokens)?
                                );
                            }
                            "DomainDetails" => {
                                builder = builder.set_domain_details(
                                    crate::protocol_serde::shape_aws_api_call_action_domain_details::de_aws_api_call_action_domain_details(tokens)?
                                );
                            }
                            "AffectedResources" => {
                                builder = builder.set_affected_resources(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "FirstSeen" => {
                                builder = builder.set_first_seen(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastSeen" => {
                                builder = builder.set_last_seen(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
