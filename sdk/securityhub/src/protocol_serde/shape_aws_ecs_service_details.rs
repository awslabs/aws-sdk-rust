// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ecs_service_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEcsServiceDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.capacity_provider_strategy {
        let mut array_2 = object.key("CapacityProviderStrategy").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aws_ecs_service_capacity_provider_strategy_details::ser_aws_ecs_service_capacity_provider_strategy_details(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.cluster {
        object.key("Cluster").string(var_5.as_str());
    }
    if let Some(var_6) = &input.deployment_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DeploymentConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_service_deployment_configuration_details::ser_aws_ecs_service_deployment_configuration_details(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.deployment_controller {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DeploymentController").start_object();
        crate::protocol_serde::shape_aws_ecs_service_deployment_controller_details::ser_aws_ecs_service_deployment_controller_details(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.desired_count {
        object.key("DesiredCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.enable_ecs_managed_tags {
        object.key("EnableEcsManagedTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.enable_execute_command {
        object.key("EnableExecuteCommand").boolean(*var_12);
    }
    if let Some(var_13) = &input.health_check_grace_period_seconds {
        object.key("HealthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.launch_type {
        object.key("LaunchType").string(var_14.as_str());
    }
    if let Some(var_15) = &input.load_balancers {
        let mut array_16 = object.key("LoadBalancers").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_aws_ecs_service_load_balancers_details::ser_aws_ecs_service_load_balancers_details(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_service_network_configuration_details::ser_aws_ecs_service_network_configuration_details(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.placement_constraints {
        let mut array_23 = object.key("PlacementConstraints").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_aws_ecs_service_placement_constraints_details::ser_aws_ecs_service_placement_constraints_details(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.placement_strategies {
        let mut array_27 = object.key("PlacementStrategies").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_aws_ecs_service_placement_strategies_details::ser_aws_ecs_service_placement_strategies_details(
                    &mut object_29,
                    item_28,
                )?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.platform_version {
        object.key("PlatformVersion").string(var_30.as_str());
    }
    if let Some(var_31) = &input.propagate_tags {
        object.key("PropagateTags").string(var_31.as_str());
    }
    if let Some(var_32) = &input.role {
        object.key("Role").string(var_32.as_str());
    }
    if let Some(var_33) = &input.scheduling_strategy {
        object.key("SchedulingStrategy").string(var_33.as_str());
    }
    if let Some(var_34) = &input.service_arn {
        object.key("ServiceArn").string(var_34.as_str());
    }
    if let Some(var_35) = &input.service_name {
        object.key("ServiceName").string(var_35.as_str());
    }
    if let Some(var_36) = &input.service_registries {
        let mut array_37 = object.key("ServiceRegistries").start_array();
        for item_38 in var_36 {
            {
                #[allow(unused_mut)]
                let mut object_39 = array_37.value().start_object();
                crate::protocol_serde::shape_aws_ecs_service_service_registries_details::ser_aws_ecs_service_service_registries_details(
                    &mut object_39,
                    item_38,
                )?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.task_definition {
        object.key("TaskDefinition").string(var_40.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ecs_service_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEcsServiceDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEcsServiceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CapacityProviderStrategy" => {
                            builder = builder.set_capacity_provider_strategy(
                                    crate::protocol_serde::shape_aws_ecs_service_capacity_provider_strategy_list::de_aws_ecs_service_capacity_provider_strategy_list(tokens)?
                                );
                        }
                        "Cluster" => {
                            builder = builder.set_cluster(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeploymentConfiguration" => {
                            builder = builder.set_deployment_configuration(
                                    crate::protocol_serde::shape_aws_ecs_service_deployment_configuration_details::de_aws_ecs_service_deployment_configuration_details(tokens)?
                                );
                        }
                        "DeploymentController" => {
                            builder = builder.set_deployment_controller(
                                    crate::protocol_serde::shape_aws_ecs_service_deployment_controller_details::de_aws_ecs_service_deployment_controller_details(tokens)?
                                );
                        }
                        "DesiredCount" => {
                            builder = builder.set_desired_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "EnableEcsManagedTags" => {
                            builder = builder.set_enable_ecs_managed_tags(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "EnableExecuteCommand" => {
                            builder = builder.set_enable_execute_command(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "HealthCheckGracePeriodSeconds" => {
                            builder = builder.set_health_check_grace_period_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "LaunchType" => {
                            builder = builder.set_launch_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LoadBalancers" => {
                            builder = builder.set_load_balancers(
                                crate::protocol_serde::shape_aws_ecs_service_load_balancers_list::de_aws_ecs_service_load_balancers_list(tokens)?,
                            );
                        }
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NetworkConfiguration" => {
                            builder = builder.set_network_configuration(
                                    crate::protocol_serde::shape_aws_ecs_service_network_configuration_details::de_aws_ecs_service_network_configuration_details(tokens)?
                                );
                        }
                        "PlacementConstraints" => {
                            builder = builder.set_placement_constraints(
                                    crate::protocol_serde::shape_aws_ecs_service_placement_constraints_list::de_aws_ecs_service_placement_constraints_list(tokens)?
                                );
                        }
                        "PlacementStrategies" => {
                            builder = builder.set_placement_strategies(
                                crate::protocol_serde::shape_aws_ecs_service_placement_strategies_list::de_aws_ecs_service_placement_strategies_list(
                                    tokens,
                                )?,
                            );
                        }
                        "PlatformVersion" => {
                            builder = builder.set_platform_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PropagateTags" => {
                            builder = builder.set_propagate_tags(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Role" => {
                            builder = builder.set_role(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SchedulingStrategy" => {
                            builder = builder.set_scheduling_strategy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceArn" => {
                            builder = builder.set_service_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceName" => {
                            builder = builder.set_service_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceRegistries" => {
                            builder = builder.set_service_registries(
                                crate::protocol_serde::shape_aws_ecs_service_service_registries_list::de_aws_ecs_service_service_registries_list(
                                    tokens,
                                )?,
                            );
                        }
                        "TaskDefinition" => {
                            builder = builder.set_task_definition(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
