// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_automation_rule_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_automation_rule::CreateAutomationRuleInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actions {
        let mut array_2 = object.key("Actions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_automation_rules_action::ser_automation_rules_action(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.criteria {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Criteria").start_object();
        crate::protocol_serde::shape_automation_rules_finding_filters::ser_automation_rules_finding_filters(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.is_terminal {
        object.key("IsTerminal").boolean(*var_8);
    }
    if let Some(var_9) = &input.rule_name {
        object.key("RuleName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.rule_order {
        object.key("RuleOrder").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.rule_status {
        object.key("RuleStatus").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
