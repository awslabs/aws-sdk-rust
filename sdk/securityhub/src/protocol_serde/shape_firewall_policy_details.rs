// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_firewall_policy_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FirewallPolicyDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stateful_rule_group_references {
        let mut array_2 = object.key("StatefulRuleGroupReferences").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_firewall_policy_stateful_rule_group_references_details::ser_firewall_policy_stateful_rule_group_references_details(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.stateless_custom_actions {
        let mut array_6 = object.key("StatelessCustomActions").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_firewall_policy_stateless_custom_actions_details::ser_firewall_policy_stateless_custom_actions_details(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.stateless_default_actions {
        let mut array_10 = object.key("StatelessDefaultActions").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.stateless_fragment_default_actions {
        let mut array_13 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.stateless_rule_group_references {
        let mut array_16 = object.key("StatelessRuleGroupReferences").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_firewall_policy_stateless_rule_group_references_details::ser_firewall_policy_stateless_rule_group_references_details(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub(crate) fn de_firewall_policy_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::FirewallPolicyDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FirewallPolicyDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StatefulRuleGroupReferences" => {
                            builder = builder.set_stateful_rule_group_references(
                                    crate::protocol_serde::shape_firewall_policy_stateful_rule_group_references_list::de_firewall_policy_stateful_rule_group_references_list(tokens)?
                                );
                        }
                        "StatelessCustomActions" => {
                            builder = builder.set_stateless_custom_actions(
                                    crate::protocol_serde::shape_firewall_policy_stateless_custom_actions_list::de_firewall_policy_stateless_custom_actions_list(tokens)?
                                );
                        }
                        "StatelessDefaultActions" => {
                            builder = builder
                                .set_stateless_default_actions(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "StatelessFragmentDefaultActions" => {
                            builder = builder.set_stateless_fragment_default_actions(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "StatelessRuleGroupReferences" => {
                            builder = builder.set_stateless_rule_group_references(
                                    crate::protocol_serde::shape_firewall_policy_stateless_rule_group_references_list::de_firewall_policy_stateless_rule_group_references_list(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
