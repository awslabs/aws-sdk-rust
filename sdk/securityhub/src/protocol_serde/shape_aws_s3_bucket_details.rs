// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_s3_bucket_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsS3BucketDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.owner_id {
        object.key("OwnerId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.owner_name {
        object.key("OwnerName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.owner_account_id {
        object.key("OwnerAccountId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.created_at {
        object.key("CreatedAt").string(var_4.as_str());
    }
    if let Some(var_5) = &input.server_side_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ServerSideEncryptionConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_server_side_encryption_configuration::ser_aws_s3_bucket_server_side_encryption_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.bucket_lifecycle_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("BucketLifecycleConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_details::ser_aws_s3_bucket_bucket_lifecycle_configuration_details(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.public_access_block_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_account_public_access_block_details::ser_aws_s3_account_public_access_block_details(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.access_control_list {
        object.key("AccessControlList").string(var_11.as_str());
    }
    if let Some(var_12) = &input.bucket_logging_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("BucketLoggingConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_logging_configuration::ser_aws_s3_bucket_logging_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.bucket_website_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("BucketWebsiteConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_website_configuration::ser_aws_s3_bucket_website_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.bucket_notification_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("BucketNotificationConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_notification_configuration::ser_aws_s3_bucket_notification_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.bucket_versioning_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("BucketVersioningConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_bucket_versioning_configuration::ser_aws_s3_bucket_bucket_versioning_configuration(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.object_lock_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ObjectLockConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_object_lock_configuration::ser_aws_s3_bucket_object_lock_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_s3_bucket_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsS3BucketDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsS3BucketDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "OwnerId" => {
                                builder = builder.set_owner_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "OwnerName" => {
                                builder = builder.set_owner_name(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "OwnerAccountId" => {
                                builder = builder.set_owner_account_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "CreatedAt" => {
                                builder = builder.set_created_at(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "ServerSideEncryptionConfiguration" => {
                                builder = builder.set_server_side_encryption_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_server_side_encryption_configuration::de_aws_s3_bucket_server_side_encryption_configuration(tokens)?
                                );
                            }
                            "BucketLifecycleConfiguration" => {
                                builder = builder.set_bucket_lifecycle_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_details::de_aws_s3_bucket_bucket_lifecycle_configuration_details(tokens)?
                                );
                            }
                            "PublicAccessBlockConfiguration" => {
                                builder = builder.set_public_access_block_configuration(
                                    crate::protocol_serde::shape_aws_s3_account_public_access_block_details::de_aws_s3_account_public_access_block_details(tokens)?
                                );
                            }
                            "AccessControlList" => {
                                builder = builder.set_access_control_list(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "BucketLoggingConfiguration" => {
                                builder = builder.set_bucket_logging_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_logging_configuration::de_aws_s3_bucket_logging_configuration(tokens)?,
                                );
                            }
                            "BucketWebsiteConfiguration" => {
                                builder = builder.set_bucket_website_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_website_configuration::de_aws_s3_bucket_website_configuration(tokens)?,
                                );
                            }
                            "BucketNotificationConfiguration" => {
                                builder = builder.set_bucket_notification_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_notification_configuration::de_aws_s3_bucket_notification_configuration(tokens)?
                                );
                            }
                            "BucketVersioningConfiguration" => {
                                builder = builder.set_bucket_versioning_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_versioning_configuration::de_aws_s3_bucket_bucket_versioning_configuration(tokens)?
                                );
                            }
                            "ObjectLockConfiguration" => {
                                builder = builder.set_object_lock_configuration(
                                    crate::protocol_serde::shape_aws_s3_bucket_object_lock_configuration::de_aws_s3_bucket_object_lock_configuration(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
