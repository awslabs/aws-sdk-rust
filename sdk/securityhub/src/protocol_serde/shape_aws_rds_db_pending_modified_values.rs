// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_rds_db_pending_modified_values(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRdsDbPendingModifiedValues,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_1.as_str());
    }
    if let Some(var_2) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_3.as_str());
    }
    if let Some(var_4) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.backup_retention_period {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_6);
    }
    if let Some(var_7) = &input.engine_version {
        object.key("EngineVersion").string(var_7.as_str());
    }
    if let Some(var_8) = &input.license_model {
        object.key("LicenseModel").string(var_8.as_str());
    }
    if let Some(var_9) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.storage_type {
        object.key("StorageType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.ca_certificate_identifier {
        object.key("CaCertificateIdentifier").string(var_12.as_str());
    }
    if let Some(var_13) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.pending_cloud_watch_logs_exports {
        #[allow(unused_mut)]
        let mut object_15 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::protocol_serde::shape_aws_rds_pending_cloud_watch_logs_exports::ser_aws_rds_pending_cloud_watch_logs_exports(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.processor_features {
        let mut array_17 = object.key("ProcessorFeatures").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_processor_feature::ser_aws_rds_db_processor_feature(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_rds_db_pending_modified_values<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsRdsDbPendingModifiedValues>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRdsDbPendingModifiedValuesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DbInstanceClass" => {
                                builder = builder.set_db_instance_class(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "AllocatedStorage" => {
                                builder = builder.set_allocated_storage(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            "MasterUserPassword" => {
                                builder = builder.set_master_user_password(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "Port" => {
                                builder = builder.set_port(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            "BackupRetentionPeriod" => {
                                builder = builder.set_backup_retention_period(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            "MultiAZ" => {
                                builder = builder.set_multi_az(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "EngineVersion" => {
                                builder = builder.set_engine_version(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "LicenseModel" => {
                                builder = builder.set_license_model(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "Iops" => {
                                builder = builder.set_iops(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            "DbInstanceIdentifier" => {
                                builder = builder.set_db_instance_identifier(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "StorageType" => {
                                builder = builder.set_storage_type(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "CaCertificateIdentifier" => {
                                builder = builder.set_ca_certificate_identifier(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "DbSubnetGroupName" => {
                                builder = builder.set_db_subnet_group_name(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "PendingCloudWatchLogsExports" => {
                                builder = builder.set_pending_cloud_watch_logs_exports(
                                    crate::protocol_serde::shape_aws_rds_pending_cloud_watch_logs_exports::de_aws_rds_pending_cloud_watch_logs_exports(tokens)?
                                );
                            }
                            "ProcessorFeatures" => {
                                builder = builder.set_processor_features(
                                    crate::protocol_serde::shape_aws_rds_db_processor_features::de_aws_rds_db_processor_features(tokens)?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
