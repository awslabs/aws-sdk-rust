// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_auto_scaling_auto_scaling_group_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsAutoScalingAutoScalingGroupDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.launch_configuration_name {
        object.key("LaunchConfigurationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.load_balancer_names {
        let mut array_3 = object.key("LoadBalancerNames").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.health_check_type {
        object.key("HealthCheckType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.health_check_grace_period {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.created_time {
        object.key("CreatedTime").string(var_7.as_str());
    }
    if let Some(var_8) = &input.mixed_instances_policy {
        #[allow(unused_mut)]
        let mut object_9 = object.key("MixedInstancesPolicy").start_object();
        crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details::ser_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.availability_zones {
        let mut array_11 = object.key("AvailabilityZones").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_availability_zones_list_details::ser_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.launch_template {
        #[allow(unused_mut)]
        let mut object_15 = object.key("LaunchTemplate").start_object();
        crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification::ser_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.capacity_rebalance {
        object.key("CapacityRebalance").boolean(*var_16);
    }
    Ok(())
}

pub(crate) fn de_aws_auto_scaling_auto_scaling_group_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsAutoScalingAutoScalingGroupDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsAutoScalingAutoScalingGroupDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LaunchConfigurationName" => {
                            builder = builder.set_launch_configuration_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LoadBalancerNames" => {
                            builder = builder.set_load_balancer_names(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "HealthCheckType" => {
                            builder = builder.set_health_check_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "HealthCheckGracePeriod" => {
                            builder = builder.set_health_check_grace_period(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "CreatedTime" => {
                            builder = builder.set_created_time(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MixedInstancesPolicy" => {
                            builder = builder.set_mixed_instances_policy(
                                    crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details::de_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(tokens)?
                                );
                        }
                        "AvailabilityZones" => {
                            builder = builder.set_availability_zones(
                                    crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_availability_zones_list::de_aws_auto_scaling_auto_scaling_group_availability_zones_list(tokens)?
                                );
                        }
                        "LaunchTemplate" => {
                            builder = builder.set_launch_template(
                                    crate::protocol_serde::shape_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification::de_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(tokens)?
                                );
                        }
                        "CapacityRebalance" => {
                            builder = builder.set_capacity_rebalance(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
