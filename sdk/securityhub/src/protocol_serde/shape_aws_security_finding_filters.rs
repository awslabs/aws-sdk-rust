// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_security_finding_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsSecurityFindingFilters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.product_arn {
        let mut array_2 = object.key("ProductArn").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.aws_account_id {
        let mut array_6 = object.key("AwsAccountId").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.id {
        let mut array_10 = object.key("Id").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.generator_id {
        let mut array_14 = object.key("GeneratorId").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.region {
        let mut array_18 = object.key("Region").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_20,
                    item_19,
                )?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.r#type {
        let mut array_22 = object.key("Type").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.first_observed_at {
        let mut array_26 = object.key("FirstObservedAt").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.last_observed_at {
        let mut array_30 = object.key("LastObservedAt").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.created_at {
        let mut array_34 = object.key("CreatedAt").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.updated_at {
        let mut array_38 = object.key("UpdatedAt").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.severity_product {
        let mut array_42 = object.key("SeverityProduct").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_44,
                    item_43,
                )?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.severity_normalized {
        let mut array_46 = object.key("SeverityNormalized").start_array();
        for item_47 in var_45 {
            {
                #[allow(unused_mut)]
                let mut object_48 = array_46.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_48,
                    item_47,
                )?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.severity_label {
        let mut array_50 = object.key("SeverityLabel").start_array();
        for item_51 in var_49 {
            {
                #[allow(unused_mut)]
                let mut object_52 = array_50.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_52,
                    item_51,
                )?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.confidence {
        let mut array_54 = object.key("Confidence").start_array();
        for item_55 in var_53 {
            {
                #[allow(unused_mut)]
                let mut object_56 = array_54.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_56,
                    item_55,
                )?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.criticality {
        let mut array_58 = object.key("Criticality").start_array();
        for item_59 in var_57 {
            {
                #[allow(unused_mut)]
                let mut object_60 = array_58.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_60,
                    item_59,
                )?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.title {
        let mut array_62 = object.key("Title").start_array();
        for item_63 in var_61 {
            {
                #[allow(unused_mut)]
                let mut object_64 = array_62.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_64,
                    item_63,
                )?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.description {
        let mut array_66 = object.key("Description").start_array();
        for item_67 in var_65 {
            {
                #[allow(unused_mut)]
                let mut object_68 = array_66.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_68,
                    item_67,
                )?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.recommendation_text {
        let mut array_70 = object.key("RecommendationText").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_72,
                    item_71,
                )?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.source_url {
        let mut array_74 = object.key("SourceUrl").start_array();
        for item_75 in var_73 {
            {
                #[allow(unused_mut)]
                let mut object_76 = array_74.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_76,
                    item_75,
                )?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.product_fields {
        let mut array_78 = object.key("ProductFields").start_array();
        for item_79 in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_80 = array_78.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.product_name {
        let mut array_82 = object.key("ProductName").start_array();
        for item_83 in var_81 {
            {
                #[allow(unused_mut)]
                let mut object_84 = array_82.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_84,
                    item_83,
                )?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.company_name {
        let mut array_86 = object.key("CompanyName").start_array();
        for item_87 in var_85 {
            {
                #[allow(unused_mut)]
                let mut object_88 = array_86.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_88,
                    item_87,
                )?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.user_defined_fields {
        let mut array_90 = object.key("UserDefinedFields").start_array();
        for item_91 in var_89 {
            {
                #[allow(unused_mut)]
                let mut object_92 = array_90.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    if let Some(var_93) = &input.malware_name {
        let mut array_94 = object.key("MalwareName").start_array();
        for item_95 in var_93 {
            {
                #[allow(unused_mut)]
                let mut object_96 = array_94.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_96,
                    item_95,
                )?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.malware_type {
        let mut array_98 = object.key("MalwareType").start_array();
        for item_99 in var_97 {
            {
                #[allow(unused_mut)]
                let mut object_100 = array_98.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_100,
                    item_99,
                )?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if let Some(var_101) = &input.malware_path {
        let mut array_102 = object.key("MalwarePath").start_array();
        for item_103 in var_101 {
            {
                #[allow(unused_mut)]
                let mut object_104 = array_102.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_104,
                    item_103,
                )?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.malware_state {
        let mut array_106 = object.key("MalwareState").start_array();
        for item_107 in var_105 {
            {
                #[allow(unused_mut)]
                let mut object_108 = array_106.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_108,
                    item_107,
                )?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.network_direction {
        let mut array_110 = object.key("NetworkDirection").start_array();
        for item_111 in var_109 {
            {
                #[allow(unused_mut)]
                let mut object_112 = array_110.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.network_protocol {
        let mut array_114 = object.key("NetworkProtocol").start_array();
        for item_115 in var_113 {
            {
                #[allow(unused_mut)]
                let mut object_116 = array_114.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_116,
                    item_115,
                )?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.network_source_ip_v4 {
        let mut array_118 = object.key("NetworkSourceIpV4").start_array();
        for item_119 in var_117 {
            {
                #[allow(unused_mut)]
                let mut object_120 = array_118.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_120, item_119)?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.network_source_ip_v6 {
        let mut array_122 = object.key("NetworkSourceIpV6").start_array();
        for item_123 in var_121 {
            {
                #[allow(unused_mut)]
                let mut object_124 = array_122.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.network_source_port {
        let mut array_126 = object.key("NetworkSourcePort").start_array();
        for item_127 in var_125 {
            {
                #[allow(unused_mut)]
                let mut object_128 = array_126.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_128,
                    item_127,
                )?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.network_source_domain {
        let mut array_130 = object.key("NetworkSourceDomain").start_array();
        for item_131 in var_129 {
            {
                #[allow(unused_mut)]
                let mut object_132 = array_130.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.network_source_mac {
        let mut array_134 = object.key("NetworkSourceMac").start_array();
        for item_135 in var_133 {
            {
                #[allow(unused_mut)]
                let mut object_136 = array_134.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_136,
                    item_135,
                )?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.network_destination_ip_v4 {
        let mut array_138 = object.key("NetworkDestinationIpV4").start_array();
        for item_139 in var_137 {
            {
                #[allow(unused_mut)]
                let mut object_140 = array_138.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_140, item_139)?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.network_destination_ip_v6 {
        let mut array_142 = object.key("NetworkDestinationIpV6").start_array();
        for item_143 in var_141 {
            {
                #[allow(unused_mut)]
                let mut object_144 = array_142.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_144, item_143)?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.network_destination_port {
        let mut array_146 = object.key("NetworkDestinationPort").start_array();
        for item_147 in var_145 {
            {
                #[allow(unused_mut)]
                let mut object_148 = array_146.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_148,
                    item_147,
                )?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.network_destination_domain {
        let mut array_150 = object.key("NetworkDestinationDomain").start_array();
        for item_151 in var_149 {
            {
                #[allow(unused_mut)]
                let mut object_152 = array_150.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.process_name {
        let mut array_154 = object.key("ProcessName").start_array();
        for item_155 in var_153 {
            {
                #[allow(unused_mut)]
                let mut object_156 = array_154.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_156,
                    item_155,
                )?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.process_path {
        let mut array_158 = object.key("ProcessPath").start_array();
        for item_159 in var_157 {
            {
                #[allow(unused_mut)]
                let mut object_160 = array_158.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.process_pid {
        let mut array_162 = object.key("ProcessPid").start_array();
        for item_163 in var_161 {
            {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.process_parent_pid {
        let mut array_166 = object.key("ProcessParentPid").start_array();
        for item_167 in var_165 {
            {
                #[allow(unused_mut)]
                let mut object_168 = array_166.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_168,
                    item_167,
                )?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.process_launched_at {
        let mut array_170 = object.key("ProcessLaunchedAt").start_array();
        for item_171 in var_169 {
            {
                #[allow(unused_mut)]
                let mut object_172 = array_170.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_172,
                    item_171,
                )?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.process_terminated_at {
        let mut array_174 = object.key("ProcessTerminatedAt").start_array();
        for item_175 in var_173 {
            {
                #[allow(unused_mut)]
                let mut object_176 = array_174.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_176,
                    item_175,
                )?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.threat_intel_indicator_type {
        let mut array_178 = object.key("ThreatIntelIndicatorType").start_array();
        for item_179 in var_177 {
            {
                #[allow(unused_mut)]
                let mut object_180 = array_178.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.threat_intel_indicator_value {
        let mut array_182 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_183 in var_181 {
            {
                #[allow(unused_mut)]
                let mut object_184 = array_182.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.threat_intel_indicator_category {
        let mut array_186 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_187 in var_185 {
            {
                #[allow(unused_mut)]
                let mut object_188 = array_186.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.threat_intel_indicator_last_observed_at {
        let mut array_190 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_191 in var_189 {
            {
                #[allow(unused_mut)]
                let mut object_192 = array_190.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_192,
                    item_191,
                )?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.threat_intel_indicator_source {
        let mut array_194 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_195 in var_193 {
            {
                #[allow(unused_mut)]
                let mut object_196 = array_194.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_196,
                    item_195,
                )?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.threat_intel_indicator_source_url {
        let mut array_198 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_199 in var_197 {
            {
                #[allow(unused_mut)]
                let mut object_200 = array_198.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.resource_type {
        let mut array_202 = object.key("ResourceType").start_array();
        for item_203 in var_201 {
            {
                #[allow(unused_mut)]
                let mut object_204 = array_202.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.resource_id {
        let mut array_206 = object.key("ResourceId").start_array();
        for item_207 in var_205 {
            {
                #[allow(unused_mut)]
                let mut object_208 = array_206.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.resource_partition {
        let mut array_210 = object.key("ResourcePartition").start_array();
        for item_211 in var_209 {
            {
                #[allow(unused_mut)]
                let mut object_212 = array_210.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.resource_region {
        let mut array_214 = object.key("ResourceRegion").start_array();
        for item_215 in var_213 {
            {
                #[allow(unused_mut)]
                let mut object_216 = array_214.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_216,
                    item_215,
                )?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.resource_tags {
        let mut array_218 = object.key("ResourceTags").start_array();
        for item_219 in var_217 {
            {
                #[allow(unused_mut)]
                let mut object_220 = array_218.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_220, item_219)?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.resource_aws_ec2_instance_type {
        let mut array_222 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_223 in var_221 {
            {
                #[allow(unused_mut)]
                let mut object_224 = array_222.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.resource_aws_ec2_instance_image_id {
        let mut array_226 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_227 in var_225 {
            {
                #[allow(unused_mut)]
                let mut object_228 = array_226.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_228,
                    item_227,
                )?;
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_230 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_231 in var_229 {
            {
                #[allow(unused_mut)]
                let mut object_232 = array_230.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_234 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_235 in var_233 {
            {
                #[allow(unused_mut)]
                let mut object_236 = array_234.value().start_object();
                crate::protocol_serde::shape_ip_filter::ser_ip_filter(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.resource_aws_ec2_instance_key_name {
        let mut array_238 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_239 in var_237 {
            {
                #[allow(unused_mut)]
                let mut object_240 = array_238.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_242 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_243 in var_241 {
            {
                #[allow(unused_mut)]
                let mut object_244 = array_242.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_246 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_247 in var_245 {
            {
                #[allow(unused_mut)]
                let mut object_248 = array_246.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_250 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_251 in var_249 {
            {
                #[allow(unused_mut)]
                let mut object_252 = array_250.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_252,
                    item_251,
                )?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_254 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_255 in var_253 {
            {
                #[allow(unused_mut)]
                let mut object_256 = array_254.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_256,
                    item_255,
                )?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_258 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_259 in var_257 {
            {
                #[allow(unused_mut)]
                let mut object_260 = array_258.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_260,
                    item_259,
                )?;
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_262 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_263 in var_261 {
            {
                #[allow(unused_mut)]
                let mut object_264 = array_262.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_264,
                    item_263,
                )?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.resource_aws_iam_access_key_user_name {
        let mut array_266 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_267 in var_265 {
            {
                #[allow(unused_mut)]
                let mut object_268 = array_266.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_268,
                    item_267,
                )?;
                object_268.finish();
            }
        }
        array_266.finish();
    }
    if let Some(var_269) = &input.resource_aws_iam_access_key_principal_name {
        let mut array_270 = object
            .key("ResourceAwsIamAccessKeyPrincipalName")
            .start_array();
        for item_271 in var_269 {
            {
                #[allow(unused_mut)]
                let mut object_272 = array_270.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_272,
                    item_271,
                )?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.resource_aws_iam_access_key_status {
        let mut array_274 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_275 in var_273 {
            {
                #[allow(unused_mut)]
                let mut object_276 = array_274.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_276,
                    item_275,
                )?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    if let Some(var_277) = &input.resource_aws_iam_access_key_created_at {
        let mut array_278 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_279 in var_277 {
            {
                #[allow(unused_mut)]
                let mut object_280 = array_278.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.resource_aws_iam_user_user_name {
        let mut array_282 = object.key("ResourceAwsIamUserUserName").start_array();
        for item_283 in var_281 {
            {
                #[allow(unused_mut)]
                let mut object_284 = array_282.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_284,
                    item_283,
                )?;
                object_284.finish();
            }
        }
        array_282.finish();
    }
    if let Some(var_285) = &input.resource_container_name {
        let mut array_286 = object.key("ResourceContainerName").start_array();
        for item_287 in var_285 {
            {
                #[allow(unused_mut)]
                let mut object_288 = array_286.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    if let Some(var_289) = &input.resource_container_image_id {
        let mut array_290 = object.key("ResourceContainerImageId").start_array();
        for item_291 in var_289 {
            {
                #[allow(unused_mut)]
                let mut object_292 = array_290.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_292,
                    item_291,
                )?;
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.resource_container_image_name {
        let mut array_294 = object.key("ResourceContainerImageName").start_array();
        for item_295 in var_293 {
            {
                #[allow(unused_mut)]
                let mut object_296 = array_294.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.resource_container_launched_at {
        let mut array_298 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_299 in var_297 {
            {
                #[allow(unused_mut)]
                let mut object_300 = array_298.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_300,
                    item_299,
                )?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.resource_details_other {
        let mut array_302 = object.key("ResourceDetailsOther").start_array();
        for item_303 in var_301 {
            {
                #[allow(unused_mut)]
                let mut object_304 = array_302.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_304, item_303)?;
                object_304.finish();
            }
        }
        array_302.finish();
    }
    if let Some(var_305) = &input.compliance_status {
        let mut array_306 = object.key("ComplianceStatus").start_array();
        for item_307 in var_305 {
            {
                #[allow(unused_mut)]
                let mut object_308 = array_306.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.verification_state {
        let mut array_310 = object.key("VerificationState").start_array();
        for item_311 in var_309 {
            {
                #[allow(unused_mut)]
                let mut object_312 = array_310.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.workflow_state {
        let mut array_314 = object.key("WorkflowState").start_array();
        for item_315 in var_313 {
            {
                #[allow(unused_mut)]
                let mut object_316 = array_314.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_316,
                    item_315,
                )?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.workflow_status {
        let mut array_318 = object.key("WorkflowStatus").start_array();
        for item_319 in var_317 {
            {
                #[allow(unused_mut)]
                let mut object_320 = array_318.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.record_state {
        let mut array_322 = object.key("RecordState").start_array();
        for item_323 in var_321 {
            {
                #[allow(unused_mut)]
                let mut object_324 = array_322.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_324,
                    item_323,
                )?;
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.related_findings_product_arn {
        let mut array_326 = object.key("RelatedFindingsProductArn").start_array();
        for item_327 in var_325 {
            {
                #[allow(unused_mut)]
                let mut object_328 = array_326.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.related_findings_id {
        let mut array_330 = object.key("RelatedFindingsId").start_array();
        for item_331 in var_329 {
            {
                #[allow(unused_mut)]
                let mut object_332 = array_330.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.note_text {
        let mut array_334 = object.key("NoteText").start_array();
        for item_335 in var_333 {
            {
                #[allow(unused_mut)]
                let mut object_336 = array_334.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_336,
                    item_335,
                )?;
                object_336.finish();
            }
        }
        array_334.finish();
    }
    if let Some(var_337) = &input.note_updated_at {
        let mut array_338 = object.key("NoteUpdatedAt").start_array();
        for item_339 in var_337 {
            {
                #[allow(unused_mut)]
                let mut object_340 = array_338.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(
                    &mut object_340,
                    item_339,
                )?;
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.note_updated_by {
        let mut array_342 = object.key("NoteUpdatedBy").start_array();
        for item_343 in var_341 {
            {
                #[allow(unused_mut)]
                let mut object_344 = array_342.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_344,
                    item_343,
                )?;
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.keyword {
        let mut array_346 = object.key("Keyword").start_array();
        for item_347 in var_345 {
            {
                #[allow(unused_mut)]
                let mut object_348 = array_346.value().start_object();
                crate::protocol_serde::shape_keyword_filter::ser_keyword_filter(
                    &mut object_348,
                    item_347,
                )?;
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.finding_provider_fields_confidence {
        let mut array_350 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_351 in var_349 {
            {
                #[allow(unused_mut)]
                let mut object_352 = array_350.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_352,
                    item_351,
                )?;
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.finding_provider_fields_criticality {
        let mut array_354 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_355 in var_353 {
            {
                #[allow(unused_mut)]
                let mut object_356 = array_354.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(
                    &mut object_356,
                    item_355,
                )?;
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.finding_provider_fields_related_findings_id {
        let mut array_358 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_359 in var_357 {
            {
                #[allow(unused_mut)]
                let mut object_360 = array_358.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_362 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_363 in var_361 {
            {
                #[allow(unused_mut)]
                let mut object_364 = array_362.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_364,
                    item_363,
                )?;
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.finding_provider_fields_severity_label {
        let mut array_366 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_367 in var_365 {
            {
                #[allow(unused_mut)]
                let mut object_368 = array_366.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_368,
                    item_367,
                )?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.finding_provider_fields_severity_original {
        let mut array_370 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_371 in var_369 {
            {
                #[allow(unused_mut)]
                let mut object_372 = array_370.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_372,
                    item_371,
                )?;
                object_372.finish();
            }
        }
        array_370.finish();
    }
    if let Some(var_373) = &input.finding_provider_fields_types {
        let mut array_374 = object.key("FindingProviderFieldsTypes").start_array();
        for item_375 in var_373 {
            {
                #[allow(unused_mut)]
                let mut object_376 = array_374.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(
                    &mut object_376,
                    item_375,
                )?;
                object_376.finish();
            }
        }
        array_374.finish();
    }
    if let Some(var_377) = &input.sample {
        let mut array_378 = object.key("Sample").start_array();
        for item_379 in var_377 {
            {
                #[allow(unused_mut)]
                let mut object_380 = array_378.value().start_object();
                crate::protocol_serde::shape_boolean_filter::ser_boolean_filter(
                    &mut object_380,
                    item_379,
                )?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_security_finding_filters<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsSecurityFindingFilters>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsSecurityFindingFiltersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ProductArn" => {
                                builder = builder.set_product_arn(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "AwsAccountId" => {
                                builder = builder.set_aws_account_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Id" => {
                                builder = builder.set_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "GeneratorId" => {
                                builder = builder.set_generator_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Region" => {
                                builder = builder.set_region(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "FirstObservedAt" => {
                                builder = builder.set_first_observed_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "LastObservedAt" => {
                                builder = builder.set_last_observed_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "CreatedAt" => {
                                builder = builder.set_created_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "UpdatedAt" => {
                                builder = builder.set_updated_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "SeverityProduct" => {
                                builder = builder.set_severity_product(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "SeverityNormalized" => {
                                builder = builder.set_severity_normalized(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "SeverityLabel" => {
                                builder = builder.set_severity_label(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Confidence" => {
                                builder = builder.set_confidence(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "Criticality" => {
                                builder = builder.set_criticality(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "Title" => {
                                builder = builder.set_title(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "RecommendationText" => {
                                builder = builder.set_recommendation_text(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "SourceUrl" => {
                                builder = builder.set_source_url(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ProductFields" => {
                                builder = builder.set_product_fields(
                                    crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?
                                );
                            }
                            "ProductName" => {
                                builder = builder.set_product_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "CompanyName" => {
                                builder = builder.set_company_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "UserDefinedFields" => {
                                builder = builder.set_user_defined_fields(
                                    crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?
                                );
                            }
                            "MalwareName" => {
                                builder = builder.set_malware_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "MalwareType" => {
                                builder = builder.set_malware_type(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "MalwarePath" => {
                                builder = builder.set_malware_path(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "MalwareState" => {
                                builder = builder.set_malware_state(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NetworkDirection" => {
                                builder = builder.set_network_direction(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NetworkProtocol" => {
                                builder = builder.set_network_protocol(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NetworkSourceIpV4" => {
                                builder = builder.set_network_source_ip_v4(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "NetworkSourceIpV6" => {
                                builder = builder.set_network_source_ip_v6(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "NetworkSourcePort" => {
                                builder = builder.set_network_source_port(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "NetworkSourceDomain" => {
                                builder = builder.set_network_source_domain(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NetworkSourceMac" => {
                                builder = builder.set_network_source_mac(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NetworkDestinationIpV4" => {
                                builder = builder.set_network_destination_ip_v4(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "NetworkDestinationIpV6" => {
                                builder = builder.set_network_destination_ip_v6(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "NetworkDestinationPort" => {
                                builder = builder.set_network_destination_port(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "NetworkDestinationDomain" => {
                                builder = builder.set_network_destination_domain(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ProcessName" => {
                                builder = builder.set_process_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ProcessPath" => {
                                builder = builder.set_process_path(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ProcessPid" => {
                                builder = builder.set_process_pid(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "ProcessParentPid" => {
                                builder = builder.set_process_parent_pid(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "ProcessLaunchedAt" => {
                                builder = builder.set_process_launched_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ProcessTerminatedAt" => {
                                builder = builder.set_process_terminated_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorType" => {
                                builder = builder.set_threat_intel_indicator_type(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorValue" => {
                                builder = builder.set_threat_intel_indicator_value(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorCategory" => {
                                builder = builder.set_threat_intel_indicator_category(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorLastObservedAt" => {
                                builder = builder.set_threat_intel_indicator_last_observed_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorSource" => {
                                builder = builder.set_threat_intel_indicator_source(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ThreatIntelIndicatorSourceUrl" => {
                                builder = builder.set_threat_intel_indicator_source_url(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceType" => {
                                builder = builder.set_resource_type(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceId" => {
                                builder = builder.set_resource_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourcePartition" => {
                                builder = builder.set_resource_partition(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceRegion" => {
                                builder = builder.set_resource_region(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceTags" => {
                                builder = builder.set_resource_tags(
                                    crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceType" => {
                                builder = builder.set_resource_aws_ec2_instance_type(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceImageId" => {
                                builder = builder.set_resource_aws_ec2_instance_image_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceIpV4Addresses" => {
                                builder = builder.set_resource_aws_ec2_instance_ip_v4_addresses(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ResourceAwsEc2InstanceIpV6Addresses" => {
                                builder = builder.set_resource_aws_ec2_instance_ip_v6_addresses(
                                    crate::protocol_serde::shape_ip_filter_list::de_ip_filter_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ResourceAwsEc2InstanceKeyName" => {
                                builder = builder.set_resource_aws_ec2_instance_key_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceIamInstanceProfileArn" => {
                                builder = builder.set_resource_aws_ec2_instance_iam_instance_profile_arn(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceVpcId" => {
                                builder = builder.set_resource_aws_ec2_instance_vpc_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceSubnetId" => {
                                builder = builder.set_resource_aws_ec2_instance_subnet_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsEc2InstanceLaunchedAt" => {
                                builder = builder.set_resource_aws_ec2_instance_launched_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsS3BucketOwnerId" => {
                                builder = builder.set_resource_aws_s3_bucket_owner_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsS3BucketOwnerName" => {
                                builder = builder.set_resource_aws_s3_bucket_owner_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsIamAccessKeyUserName" => {
                                builder = builder.set_resource_aws_iam_access_key_user_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsIamAccessKeyPrincipalName" => {
                                builder = builder.set_resource_aws_iam_access_key_principal_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsIamAccessKeyStatus" => {
                                builder = builder.set_resource_aws_iam_access_key_status(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsIamAccessKeyCreatedAt" => {
                                builder = builder.set_resource_aws_iam_access_key_created_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ResourceAwsIamUserUserName" => {
                                builder = builder.set_resource_aws_iam_user_user_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceContainerName" => {
                                builder = builder.set_resource_container_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceContainerImageId" => {
                                builder = builder.set_resource_container_image_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceContainerImageName" => {
                                builder = builder.set_resource_container_image_name(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "ResourceContainerLaunchedAt" => {
                                builder = builder.set_resource_container_launched_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "ResourceDetailsOther" => {
                                builder = builder.set_resource_details_other(
                                    crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?
                                );
                            }
                            "ComplianceStatus" => {
                                builder = builder.set_compliance_status(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "VerificationState" => {
                                builder = builder.set_verification_state(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "WorkflowState" => {
                                builder = builder.set_workflow_state(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "WorkflowStatus" => {
                                builder = builder.set_workflow_status(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "RecordState" => {
                                builder = builder.set_record_state(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "RelatedFindingsProductArn" => {
                                builder = builder.set_related_findings_product_arn(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "RelatedFindingsId" => {
                                builder = builder.set_related_findings_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NoteText" => {
                                builder = builder.set_note_text(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "NoteUpdatedAt" => {
                                builder = builder.set_note_updated_at(
                                    crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?
                                );
                            }
                            "NoteUpdatedBy" => {
                                builder = builder.set_note_updated_by(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Keyword" => {
                                builder = builder.set_keyword(
                                    crate::protocol_serde::shape_keyword_filter_list::de_keyword_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsConfidence" => {
                                builder = builder.set_finding_provider_fields_confidence(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsCriticality" => {
                                builder = builder.set_finding_provider_fields_criticality(
                                    crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsRelatedFindingsId" => {
                                builder = builder.set_finding_provider_fields_related_findings_id(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsRelatedFindingsProductArn" => {
                                builder = builder.set_finding_provider_fields_related_findings_product_arn(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsSeverityLabel" => {
                                builder = builder.set_finding_provider_fields_severity_label(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsSeverityOriginal" => {
                                builder = builder.set_finding_provider_fields_severity_original(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "FindingProviderFieldsTypes" => {
                                builder = builder.set_finding_provider_fields_types(
                                    crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?
                                );
                            }
                            "Sample" => {
                                builder = builder.set_sample(
                                    crate::protocol_serde::shape_boolean_filter_list::de_boolean_filter_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
