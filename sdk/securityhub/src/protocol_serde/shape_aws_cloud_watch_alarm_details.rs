// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_cloud_watch_alarm_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsCloudWatchAlarmDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.actions_enabled {
        object.key("ActionsEnabled").boolean(input.actions_enabled);
    }
    if let Some(var_1) = &input.alarm_actions {
        let mut array_2 = object.key("AlarmActions").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.alarm_arn {
        object.key("AlarmArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.alarm_configuration_updated_timestamp {
        object
            .key("AlarmConfigurationUpdatedTimestamp")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.alarm_description {
        object.key("AlarmDescription").string(var_6.as_str());
    }
    if let Some(var_7) = &input.alarm_name {
        object.key("AlarmName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_8.as_str());
    }
    if input.datapoints_to_alarm != 0 {
        object.key("DatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.datapoints_to_alarm).into()),
        );
    }
    if let Some(var_9) = &input.dimensions {
        let mut array_10 = object.key("Dimensions").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_aws_cloud_watch_alarm_dimensions_details::ser_aws_cloud_watch_alarm_dimensions_details(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.evaluate_low_sample_count_percentile {
        object
            .key("EvaluateLowSampleCountPercentile")
            .string(var_13.as_str());
    }
    if input.evaluation_periods != 0 {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.evaluation_periods).into()),
        );
    }
    if let Some(var_14) = &input.extended_statistic {
        object.key("ExtendedStatistic").string(var_14.as_str());
    }
    if let Some(var_15) = &input.insufficient_data_actions {
        let mut array_16 = object.key("InsufficientDataActions").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.metric_name {
        object.key("MetricName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.namespace {
        object.key("Namespace").string(var_19.as_str());
    }
    if let Some(var_20) = &input.ok_actions {
        let mut array_21 = object.key("OkActions").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if input.period != 0 {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_23) = &input.statistic {
        object.key("Statistic").string(var_23.as_str());
    }
    if input.threshold != 0.0 {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.threshold).into()),
        );
    }
    if let Some(var_24) = &input.threshold_metric_id {
        object.key("ThresholdMetricId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.treat_missing_data {
        object.key("TreatMissingData").string(var_25.as_str());
    }
    if let Some(var_26) = &input.unit {
        object.key("Unit").string(var_26.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_cloud_watch_alarm_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsCloudWatchAlarmDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsCloudWatchAlarmDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ActionsEnabled" => {
                                builder = builder.set_actions_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "AlarmActions" => {
                                builder = builder.set_alarm_actions(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "AlarmArn" => {
                                builder = builder.set_alarm_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AlarmConfigurationUpdatedTimestamp" => {
                                builder = builder.set_alarm_configuration_updated_timestamp(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AlarmDescription" => {
                                builder = builder.set_alarm_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AlarmName" => {
                                builder = builder.set_alarm_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ComparisonOperator" => {
                                builder = builder.set_comparison_operator(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DatapointsToAlarm" => {
                                builder = builder.set_datapoints_to_alarm(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Dimensions" => {
                                builder = builder.set_dimensions(
                                    crate::protocol_serde::shape_aws_cloud_watch_alarm_dimensions_list::de_aws_cloud_watch_alarm_dimensions_list(tokens)?
                                );
                            }
                            "EvaluateLowSampleCountPercentile" => {
                                builder = builder.set_evaluate_low_sample_count_percentile(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EvaluationPeriods" => {
                                builder = builder.set_evaluation_periods(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ExtendedStatistic" => {
                                builder = builder.set_extended_statistic(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InsufficientDataActions" => {
                                builder = builder.set_insufficient_data_actions(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "MetricName" => {
                                builder = builder.set_metric_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Namespace" => {
                                builder = builder.set_namespace(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "OkActions" => {
                                builder = builder.set_ok_actions(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Period" => {
                                builder = builder.set_period(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Statistic" => {
                                builder = builder.set_statistic(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Threshold" => {
                                builder = builder.set_threshold(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "ThresholdMetricId" => {
                                builder = builder.set_threshold_metric_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TreatMissingData" => {
                                builder = builder.set_treat_missing_data(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Unit" => {
                                builder = builder.set_unit(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
