// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_sage_maker_notebook_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsSageMakerNotebookInstanceDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accelerator_types {
        let mut array_2 = object.key("AcceleratorTypes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.additional_code_repositories {
        let mut array_5 = object.key("AdditionalCodeRepositories").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_7.as_str());
    }
    if let Some(var_8) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_8.as_str());
    }
    if let Some(var_9) = &input.failure_reason {
        object.key("FailureReason").string(var_9.as_str());
    }
    if let Some(var_10) = &input.instance_metadata_service_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::protocol_serde::shape_aws_sage_maker_notebook_instance_metadata_service_configuration_details::ser_aws_sage_maker_notebook_instance_metadata_service_configuration_details(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.instance_type {
        object.key("InstanceType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.notebook_instance_arn {
        object.key("NotebookInstanceArn").string(var_15.as_str());
    }
    if let Some(var_16) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.notebook_instance_status {
        object.key("NotebookInstanceStatus").string(var_18.as_str());
    }
    if let Some(var_19) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_19.as_str());
    }
    if let Some(var_20) = &input.role_arn {
        object.key("RoleArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.root_access {
        object.key("RootAccess").string(var_21.as_str());
    }
    if let Some(var_22) = &input.security_groups {
        let mut array_23 = object.key("SecurityGroups").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.subnet_id {
        object.key("SubnetId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.url {
        object.key("Url").string(var_26.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_aws_sage_maker_notebook_instance_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsSageMakerNotebookInstanceDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::AwsSageMakerNotebookInstanceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AcceleratorTypes" => {
                                builder = builder.set_accelerator_types(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "AdditionalCodeRepositories" => {
                                builder = builder.set_additional_code_repositories(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "DefaultCodeRepository" => {
                                builder = builder.set_default_code_repository(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DirectInternetAccess" => {
                                builder = builder.set_direct_internet_access(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "FailureReason" => {
                                builder = builder.set_failure_reason(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InstanceMetadataServiceConfiguration" => {
                                builder = builder.set_instance_metadata_service_configuration(
                                    crate::protocol_serde::shape_aws_sage_maker_notebook_instance_metadata_service_configuration_details::de_aws_sage_maker_notebook_instance_metadata_service_configuration_details(tokens)?
                                );
                            }
                            "InstanceType" => {
                                builder = builder.set_instance_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KmsKeyId" => {
                                builder = builder.set_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NetworkInterfaceId" => {
                                builder = builder.set_network_interface_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NotebookInstanceArn" => {
                                builder = builder.set_notebook_instance_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NotebookInstanceLifecycleConfigName" => {
                                builder = builder.set_notebook_instance_lifecycle_config_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NotebookInstanceName" => {
                                builder = builder.set_notebook_instance_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NotebookInstanceStatus" => {
                                builder = builder.set_notebook_instance_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PlatformIdentifier" => {
                                builder = builder.set_platform_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RoleArn" => {
                                builder = builder.set_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RootAccess" => {
                                builder = builder.set_root_access(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecurityGroups" => {
                                builder = builder.set_security_groups(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "SubnetId" => {
                                builder = builder.set_subnet_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Url" => {
                                builder = builder.set_url(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VolumeSizeInGB" => {
                                builder = builder.set_volume_size_in_gb(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
