// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_automation_rules_finding_filters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AutomationRulesFindingFilters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.product_arn {
        let mut array_2 = object.key("ProductArn").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.aws_account_id {
        let mut array_6 = object.key("AwsAccountId").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.id {
        let mut array_10 = object.key("Id").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.generator_id {
        let mut array_14 = object.key("GeneratorId").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.r#type {
        let mut array_18 = object.key("Type").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.first_observed_at {
        let mut array_22 = object.key("FirstObservedAt").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.last_observed_at {
        let mut array_26 = object.key("LastObservedAt").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.created_at {
        let mut array_30 = object.key("CreatedAt").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.updated_at {
        let mut array_34 = object.key("UpdatedAt").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.confidence {
        let mut array_38 = object.key("Confidence").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.criticality {
        let mut array_42 = object.key("Criticality").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.title {
        let mut array_46 = object.key("Title").start_array();
        for item_47 in var_45 {
            {
                #[allow(unused_mut)]
                let mut object_48 = array_46.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.description {
        let mut array_50 = object.key("Description").start_array();
        for item_51 in var_49 {
            {
                #[allow(unused_mut)]
                let mut object_52 = array_50.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.source_url {
        let mut array_54 = object.key("SourceUrl").start_array();
        for item_55 in var_53 {
            {
                #[allow(unused_mut)]
                let mut object_56 = array_54.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.product_name {
        let mut array_58 = object.key("ProductName").start_array();
        for item_59 in var_57 {
            {
                #[allow(unused_mut)]
                let mut object_60 = array_58.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_60, item_59)?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.company_name {
        let mut array_62 = object.key("CompanyName").start_array();
        for item_63 in var_61 {
            {
                #[allow(unused_mut)]
                let mut object_64 = array_62.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_64, item_63)?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.severity_label {
        let mut array_66 = object.key("SeverityLabel").start_array();
        for item_67 in var_65 {
            {
                #[allow(unused_mut)]
                let mut object_68 = array_66.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_68, item_67)?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.resource_type {
        let mut array_70 = object.key("ResourceType").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.resource_id {
        let mut array_74 = object.key("ResourceId").start_array();
        for item_75 in var_73 {
            {
                #[allow(unused_mut)]
                let mut object_76 = array_74.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_76, item_75)?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.resource_partition {
        let mut array_78 = object.key("ResourcePartition").start_array();
        for item_79 in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_80 = array_78.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.resource_region {
        let mut array_82 = object.key("ResourceRegion").start_array();
        for item_83 in var_81 {
            {
                #[allow(unused_mut)]
                let mut object_84 = array_82.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_84, item_83)?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.resource_tags {
        let mut array_86 = object.key("ResourceTags").start_array();
        for item_87 in var_85 {
            {
                #[allow(unused_mut)]
                let mut object_88 = array_86.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_88, item_87)?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.resource_details_other {
        let mut array_90 = object.key("ResourceDetailsOther").start_array();
        for item_91 in var_89 {
            {
                #[allow(unused_mut)]
                let mut object_92 = array_90.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    if let Some(var_93) = &input.compliance_status {
        let mut array_94 = object.key("ComplianceStatus").start_array();
        for item_95 in var_93 {
            {
                #[allow(unused_mut)]
                let mut object_96 = array_94.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_96, item_95)?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.compliance_security_control_id {
        let mut array_98 = object.key("ComplianceSecurityControlId").start_array();
        for item_99 in var_97 {
            {
                #[allow(unused_mut)]
                let mut object_100 = array_98.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_100, item_99)?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if let Some(var_101) = &input.compliance_associated_standards_id {
        let mut array_102 = object.key("ComplianceAssociatedStandardsId").start_array();
        for item_103 in var_101 {
            {
                #[allow(unused_mut)]
                let mut object_104 = array_102.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.verification_state {
        let mut array_106 = object.key("VerificationState").start_array();
        for item_107 in var_105 {
            {
                #[allow(unused_mut)]
                let mut object_108 = array_106.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.workflow_status {
        let mut array_110 = object.key("WorkflowStatus").start_array();
        for item_111 in var_109 {
            {
                #[allow(unused_mut)]
                let mut object_112 = array_110.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.record_state {
        let mut array_114 = object.key("RecordState").start_array();
        for item_115 in var_113 {
            {
                #[allow(unused_mut)]
                let mut object_116 = array_114.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_116, item_115)?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.related_findings_product_arn {
        let mut array_118 = object.key("RelatedFindingsProductArn").start_array();
        for item_119 in var_117 {
            {
                #[allow(unused_mut)]
                let mut object_120 = array_118.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_120, item_119)?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.related_findings_id {
        let mut array_122 = object.key("RelatedFindingsId").start_array();
        for item_123 in var_121 {
            {
                #[allow(unused_mut)]
                let mut object_124 = array_122.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.note_text {
        let mut array_126 = object.key("NoteText").start_array();
        for item_127 in var_125 {
            {
                #[allow(unused_mut)]
                let mut object_128 = array_126.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_128, item_127)?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.note_updated_at {
        let mut array_130 = object.key("NoteUpdatedAt").start_array();
        for item_131 in var_129 {
            {
                #[allow(unused_mut)]
                let mut object_132 = array_130.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_132, item_131)?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.note_updated_by {
        let mut array_134 = object.key("NoteUpdatedBy").start_array();
        for item_135 in var_133 {
            {
                #[allow(unused_mut)]
                let mut object_136 = array_134.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.user_defined_fields {
        let mut array_138 = object.key("UserDefinedFields").start_array();
        for item_139 in var_137 {
            {
                #[allow(unused_mut)]
                let mut object_140 = array_138.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_140, item_139)?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    Ok(())
}

pub(crate) fn de_automation_rules_finding_filters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AutomationRulesFindingFilters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AutomationRulesFindingFiltersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ProductArn" => {
                            builder = builder.set_product_arn(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "AwsAccountId" => {
                            builder = builder.set_aws_account_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "Id" => {
                            builder = builder.set_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "GeneratorId" => {
                            builder = builder.set_generator_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "Type" => {
                            builder = builder.set_type(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "FirstObservedAt" => {
                            builder = builder.set_first_observed_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "LastObservedAt" => {
                            builder = builder.set_last_observed_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "CreatedAt" => {
                            builder = builder.set_created_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "UpdatedAt" => {
                            builder = builder.set_updated_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "Confidence" => {
                            builder = builder.set_confidence(crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?);
                        }
                        "Criticality" => {
                            builder = builder.set_criticality(crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?);
                        }
                        "Title" => {
                            builder = builder.set_title(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "Description" => {
                            builder = builder.set_description(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "SourceUrl" => {
                            builder = builder.set_source_url(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ProductName" => {
                            builder = builder.set_product_name(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "CompanyName" => {
                            builder = builder.set_company_name(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "SeverityLabel" => {
                            builder = builder.set_severity_label(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ResourceType" => {
                            builder = builder.set_resource_type(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ResourceId" => {
                            builder = builder.set_resource_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ResourcePartition" => {
                            builder = builder.set_resource_partition(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ResourceRegion" => {
                            builder = builder.set_resource_region(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ResourceTags" => {
                            builder = builder.set_resource_tags(crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?);
                        }
                        "ResourceDetailsOther" => {
                            builder = builder.set_resource_details_other(crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?);
                        }
                        "ComplianceStatus" => {
                            builder = builder.set_compliance_status(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ComplianceSecurityControlId" => {
                            builder = builder
                                .set_compliance_security_control_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ComplianceAssociatedStandardsId" => {
                            builder = builder.set_compliance_associated_standards_id(
                                crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?,
                            );
                        }
                        "VerificationState" => {
                            builder = builder.set_verification_state(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "WorkflowStatus" => {
                            builder = builder.set_workflow_status(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "RecordState" => {
                            builder = builder.set_record_state(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "RelatedFindingsProductArn" => {
                            builder = builder
                                .set_related_findings_product_arn(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "RelatedFindingsId" => {
                            builder =
                                builder.set_related_findings_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "NoteText" => {
                            builder = builder.set_note_text(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "NoteUpdatedAt" => {
                            builder = builder.set_note_updated_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "NoteUpdatedBy" => {
                            builder = builder.set_note_updated_by(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "UserDefinedFields" => {
                            builder = builder.set_user_defined_fields(crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
