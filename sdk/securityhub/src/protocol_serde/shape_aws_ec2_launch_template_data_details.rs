// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_launch_template_data_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2LaunchTemplateDataDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.block_device_mapping_set {
        let mut array_2 = object.key("BlockDeviceMappingSet").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_block_device_mapping_set_details::ser_aws_ec2_launch_template_data_block_device_mapping_set_details(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.capacity_reservation_specification {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CapacityReservationSpecification").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_capacity_reservation_specification_details::ser_aws_ec2_launch_template_data_capacity_reservation_specification_details(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.cpu_options {
        #[allow(unused_mut)]
        let mut object_8 = object.key("CpuOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_cpu_options_details::ser_aws_ec2_launch_template_data_cpu_options_details(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.credit_specification {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CreditSpecification").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_credit_specification_details::ser_aws_ec2_launch_template_data_credit_specification_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.disable_api_stop {
        object.key("DisableApiStop").boolean(*var_11);
    }
    if let Some(var_12) = &input.disable_api_termination {
        object.key("DisableApiTermination").boolean(*var_12);
    }
    if let Some(var_13) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_13);
    }
    if let Some(var_14) = &input.elastic_gpu_specification_set {
        let mut array_15 = object.key("ElasticGpuSpecificationSet").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_elastic_gpu_specification_set_details::ser_aws_ec2_launch_template_data_elastic_gpu_specification_set_details(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.elastic_inference_accelerator_set {
        let mut array_19 = object.key("ElasticInferenceAcceleratorSet").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_elastic_inference_accelerator_set_details::ser_aws_ec2_launch_template_data_elastic_inference_accelerator_set_details(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.enclave_options {
        #[allow(unused_mut)]
        let mut object_23 = object.key("EnclaveOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_enclave_options_details::ser_aws_ec2_launch_template_data_enclave_options_details(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.hibernation_options {
        #[allow(unused_mut)]
        let mut object_25 = object.key("HibernationOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_hibernation_options_details::ser_aws_ec2_launch_template_data_hibernation_options_details(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.iam_instance_profile {
        #[allow(unused_mut)]
        let mut object_27 = object.key("IamInstanceProfile").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_iam_instance_profile_details::ser_aws_ec2_launch_template_data_iam_instance_profile_details(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.image_id {
        object.key("ImageId").string(var_28.as_str());
    }
    if let Some(var_29) = &input.instance_initiated_shutdown_behavior {
        object.key("InstanceInitiatedShutdownBehavior").string(var_29.as_str());
    }
    if let Some(var_30) = &input.instance_market_options {
        #[allow(unused_mut)]
        let mut object_31 = object.key("InstanceMarketOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_market_options_details::ser_aws_ec2_launch_template_data_instance_market_options_details(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.instance_requirements {
        #[allow(unused_mut)]
        let mut object_33 = object.key("InstanceRequirements").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_details::ser_aws_ec2_launch_template_data_instance_requirements_details(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.instance_type {
        object.key("InstanceType").string(var_34.as_str());
    }
    if let Some(var_35) = &input.kernel_id {
        object.key("KernelId").string(var_35.as_str());
    }
    if let Some(var_36) = &input.key_name {
        object.key("KeyName").string(var_36.as_str());
    }
    if let Some(var_37) = &input.license_set {
        let mut array_38 = object.key("LicenseSet").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_license_set_details::ser_aws_ec2_launch_template_data_license_set_details(
                    &mut object_40,
                    item_39,
                )?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.maintenance_options {
        #[allow(unused_mut)]
        let mut object_42 = object.key("MaintenanceOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_maintenance_options_details::ser_aws_ec2_launch_template_data_maintenance_options_details(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.metadata_options {
        #[allow(unused_mut)]
        let mut object_44 = object.key("MetadataOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_metadata_options_details::ser_aws_ec2_launch_template_data_metadata_options_details(&mut object_44, var_43)?;
        object_44.finish();
    }
    if let Some(var_45) = &input.monitoring {
        #[allow(unused_mut)]
        let mut object_46 = object.key("Monitoring").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_monitoring_details::ser_aws_ec2_launch_template_data_monitoring_details(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.network_interface_set {
        let mut array_48 = object.key("NetworkInterfaceSet").start_array();
        for item_49 in var_47 {
            {
                #[allow(unused_mut)]
                let mut object_50 = array_48.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_details::ser_aws_ec2_launch_template_data_network_interface_set_details(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if let Some(var_51) = &input.placement {
        #[allow(unused_mut)]
        let mut object_52 = object.key("Placement").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_placement_details::ser_aws_ec2_launch_template_data_placement_details(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    if let Some(var_53) = &input.private_dns_name_options {
        #[allow(unused_mut)]
        let mut object_54 = object.key("PrivateDnsNameOptions").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_private_dns_name_options_details::ser_aws_ec2_launch_template_data_private_dns_name_options_details(&mut object_54, var_53)?;
        object_54.finish();
    }
    if let Some(var_55) = &input.ram_disk_id {
        object.key("RamDiskId").string(var_55.as_str());
    }
    if let Some(var_56) = &input.security_group_id_set {
        let mut array_57 = object.key("SecurityGroupIdSet").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.security_group_set {
        let mut array_60 = object.key("SecurityGroupSet").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    if let Some(var_62) = &input.user_data {
        object.key("UserData").string(var_62.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_launch_template_data_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2LaunchTemplateDataDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2LaunchTemplateDataDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "BlockDeviceMappingSet" => {
                            builder = builder.set_block_device_mapping_set(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_block_device_mapping_set_list::de_aws_ec2_launch_template_data_block_device_mapping_set_list(tokens)?
                                );
                        }
                        "CapacityReservationSpecification" => {
                            builder = builder.set_capacity_reservation_specification(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_capacity_reservation_specification_details::de_aws_ec2_launch_template_data_capacity_reservation_specification_details(tokens)?
                                );
                        }
                        "CpuOptions" => {
                            builder = builder.set_cpu_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_cpu_options_details::de_aws_ec2_launch_template_data_cpu_options_details(tokens)?
                                );
                        }
                        "CreditSpecification" => {
                            builder = builder.set_credit_specification(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_credit_specification_details::de_aws_ec2_launch_template_data_credit_specification_details(tokens)?
                                );
                        }
                        "DisableApiStop" => {
                            builder = builder.set_disable_api_stop(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DisableApiTermination" => {
                            builder = builder.set_disable_api_termination(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "EbsOptimized" => {
                            builder = builder.set_ebs_optimized(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ElasticGpuSpecificationSet" => {
                            builder = builder.set_elastic_gpu_specification_set(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_elastic_gpu_specification_set_list::de_aws_ec2_launch_template_data_elastic_gpu_specification_set_list(tokens)?
                                );
                        }
                        "ElasticInferenceAcceleratorSet" => {
                            builder = builder.set_elastic_inference_accelerator_set(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_elastic_inference_accelerator_set_list::de_aws_ec2_launch_template_data_elastic_inference_accelerator_set_list(tokens)?
                                );
                        }
                        "EnclaveOptions" => {
                            builder = builder.set_enclave_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_enclave_options_details::de_aws_ec2_launch_template_data_enclave_options_details(tokens)?
                                );
                        }
                        "HibernationOptions" => {
                            builder = builder.set_hibernation_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_hibernation_options_details::de_aws_ec2_launch_template_data_hibernation_options_details(tokens)?
                                );
                        }
                        "IamInstanceProfile" => {
                            builder = builder.set_iam_instance_profile(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_iam_instance_profile_details::de_aws_ec2_launch_template_data_iam_instance_profile_details(tokens)?
                                );
                        }
                        "ImageId" => {
                            builder = builder.set_image_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "InstanceInitiatedShutdownBehavior" => {
                            builder = builder.set_instance_initiated_shutdown_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "InstanceMarketOptions" => {
                            builder = builder.set_instance_market_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_market_options_details::de_aws_ec2_launch_template_data_instance_market_options_details(tokens)?
                                );
                        }
                        "InstanceRequirements" => {
                            builder = builder.set_instance_requirements(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_details::de_aws_ec2_launch_template_data_instance_requirements_details(tokens)?
                                );
                        }
                        "InstanceType" => {
                            builder = builder.set_instance_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KernelId" => {
                            builder = builder.set_kernel_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KeyName" => {
                            builder = builder.set_key_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LicenseSet" => {
                            builder = builder.set_license_set(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_license_set_list::de_aws_ec2_launch_template_data_license_set_list(tokens)?
                                );
                        }
                        "MaintenanceOptions" => {
                            builder = builder.set_maintenance_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_maintenance_options_details::de_aws_ec2_launch_template_data_maintenance_options_details(tokens)?
                                );
                        }
                        "MetadataOptions" => {
                            builder = builder.set_metadata_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_metadata_options_details::de_aws_ec2_launch_template_data_metadata_options_details(tokens)?
                                );
                        }
                        "Monitoring" => {
                            builder = builder.set_monitoring(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_monitoring_details::de_aws_ec2_launch_template_data_monitoring_details(tokens)?
                                );
                        }
                        "NetworkInterfaceSet" => {
                            builder = builder.set_network_interface_set(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_list::de_aws_ec2_launch_template_data_network_interface_set_list(tokens)?
                                );
                        }
                        "Placement" => {
                            builder = builder.set_placement(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_placement_details::de_aws_ec2_launch_template_data_placement_details(tokens)?
                                );
                        }
                        "PrivateDnsNameOptions" => {
                            builder = builder.set_private_dns_name_options(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_private_dns_name_options_details::de_aws_ec2_launch_template_data_private_dns_name_options_details(tokens)?
                                );
                        }
                        "RamDiskId" => {
                            builder = builder.set_ram_disk_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecurityGroupIdSet" => {
                            builder = builder
                                .set_security_group_id_set(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "SecurityGroupSet" => {
                            builder =
                                builder.set_security_group_set(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "UserData" => {
                            builder = builder.set_user_data(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
