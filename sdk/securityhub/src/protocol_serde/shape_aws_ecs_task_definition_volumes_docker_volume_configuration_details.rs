// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_1) = &input.driver {
        object.key("Driver").string(var_1.as_str());
    }
    if let Some(var_2) = &input.driver_opts {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DriverOpts").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.labels {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Labels").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.scope {
        object.key("Scope").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ecs_task_definition_volumes_docker_volume_configuration_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Autoprovision" => {
                                builder = builder.set_autoprovision(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Driver" => {
                                builder = builder.set_driver(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DriverOpts" => {
                                builder = builder.set_driver_opts(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "Labels" => {
                                builder = builder.set_labels(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "Scope" => {
                                builder = builder.set_scope(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
