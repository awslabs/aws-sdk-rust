// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_rds_db_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRdsDbClusterDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1) = &input.availability_zones {
        let mut array_2 = object.key("AvailabilityZones").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_4) = &input.database_name {
        object.key("DatabaseName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.status {
        object.key("Status").string(var_5.as_str());
    }
    if let Some(var_6) = &input.endpoint {
        object.key("Endpoint").string(var_6.as_str());
    }
    if let Some(var_7) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_7.as_str());
    }
    if let Some(var_8) = &input.custom_endpoints {
        let mut array_9 = object.key("CustomEndpoints").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_11) = &input.engine {
        object.key("Engine").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engine_version {
        object.key("EngineVersion").string(var_12.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_13) = &input.master_username {
        object.key("MasterUsername").string(var_13.as_str());
    }
    if let Some(var_14) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_14.as_str());
    }
    if let Some(var_15) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_15.as_str());
    }
    if let Some(var_16) = &input.read_replica_identifiers {
        let mut array_17 = object.key("ReadReplicaIdentifiers").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.vpc_security_groups {
        let mut array_20 = object.key("VpcSecurityGroups").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_group::ser_aws_rds_db_instance_vpc_security_group(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_23.as_str());
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_24) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.associated_roles {
        let mut array_27 = object.key("AssociatedRoles").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_associated_role::ser_aws_rds_db_cluster_associated_role(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_30.as_str());
    }
    if let Some(var_31) = &input.enabled_cloud_watch_logs_exports {
        let mut array_32 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.engine_mode {
        object.key("EngineMode").string(var_34.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_35) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_35.as_str());
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_36) = &input.domain_memberships {
        let mut array_37 = object.key("DomainMemberships").start_array();
        for item_38 in var_36 {
            {
                #[allow(unused_mut)]
                let mut object_39 = array_37.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_domain_membership::ser_aws_rds_db_domain_membership(&mut object_39, item_38)?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.db_cluster_parameter_group {
        object
            .key("DbClusterParameterGroup")
            .string(var_40.as_str());
    }
    if let Some(var_41) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_41.as_str());
    }
    if let Some(var_42) = &input.db_cluster_option_group_memberships {
        let mut array_43 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_44 in var_42 {
            {
                #[allow(unused_mut)]
                let mut object_45 = array_43.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_option_group_membership::ser_aws_rds_db_cluster_option_group_membership(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_46.as_str());
    }
    if let Some(var_47) = &input.db_cluster_members {
        let mut array_48 = object.key("DbClusterMembers").start_array();
        for item_49 in var_47 {
            {
                #[allow(unused_mut)]
                let mut object_50 = array_48.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_member::ser_aws_rds_db_cluster_member(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub(crate) fn de_aws_rds_db_cluster_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsRdsDbClusterDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRdsDbClusterDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AllocatedStorage" => {
                                builder = builder.set_allocated_storage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "AvailabilityZones" => {
                                builder = builder.set_availability_zones(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "BackupRetentionPeriod" => {
                                builder = builder.set_backup_retention_period(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DatabaseName" => {
                                builder = builder.set_database_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Endpoint" => {
                                builder = builder.set_endpoint(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ReaderEndpoint" => {
                                builder = builder.set_reader_endpoint(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CustomEndpoints" => {
                                builder = builder.set_custom_endpoints(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "MultiAz" => {
                                builder = builder.set_multi_az(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Engine" => {
                                builder = builder.set_engine(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EngineVersion" => {
                                builder = builder.set_engine_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Port" => {
                                builder = builder.set_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MasterUsername" => {
                                builder = builder.set_master_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PreferredBackupWindow" => {
                                builder = builder.set_preferred_backup_window(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PreferredMaintenanceWindow" => {
                                builder = builder.set_preferred_maintenance_window(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ReadReplicaIdentifiers" => {
                                builder = builder.set_read_replica_identifiers(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "VpcSecurityGroups" => {
                                builder = builder.set_vpc_security_groups(
                                    crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_groups::de_aws_rds_db_instance_vpc_security_groups(tokens)?
                                );
                            }
                            "HostedZoneId" => {
                                builder = builder.set_hosted_zone_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "StorageEncrypted" => {
                                builder = builder.set_storage_encrypted(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "KmsKeyId" => {
                                builder = builder.set_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbClusterResourceId" => {
                                builder = builder.set_db_cluster_resource_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AssociatedRoles" => {
                                builder = builder.set_associated_roles(
                                    crate::protocol_serde::shape_aws_rds_db_cluster_associated_roles::de_aws_rds_db_cluster_associated_roles(tokens)?
                                );
                            }
                            "ClusterCreateTime" => {
                                builder = builder.set_cluster_create_time(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EnabledCloudWatchLogsExports" => {
                                builder = builder.set_enabled_cloud_watch_logs_exports(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "EngineMode" => {
                                builder = builder.set_engine_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DeletionProtection" => {
                                builder = builder.set_deletion_protection(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "HttpEndpointEnabled" => {
                                builder = builder.set_http_endpoint_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ActivityStreamStatus" => {
                                builder = builder.set_activity_stream_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CopyTagsToSnapshot" => {
                                builder = builder.set_copy_tags_to_snapshot(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CrossAccountClone" => {
                                builder = builder.set_cross_account_clone(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "DomainMemberships" => {
                                builder = builder.set_domain_memberships(
                                    crate::protocol_serde::shape_aws_rds_db_domain_memberships::de_aws_rds_db_domain_memberships(tokens)?
                                );
                            }
                            "DbClusterParameterGroup" => {
                                builder = builder.set_db_cluster_parameter_group(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbSubnetGroup" => {
                                builder = builder.set_db_subnet_group(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbClusterOptionGroupMemberships" => {
                                builder = builder.set_db_cluster_option_group_memberships(
                                    crate::protocol_serde::shape_aws_rds_db_cluster_option_group_memberships::de_aws_rds_db_cluster_option_group_memberships(tokens)?
                                );
                            }
                            "DbClusterIdentifier" => {
                                builder = builder.set_db_cluster_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbClusterMembers" => {
                                builder = builder.set_db_cluster_members(
                                    crate::protocol_serde::shape_aws_rds_db_cluster_members::de_aws_rds_db_cluster_members(tokens)?
                                );
                            }
                            "IamDatabaseAuthenticationEnabled" => {
                                builder = builder.set_iam_database_authentication_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
