// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_rds_db_cluster_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRdsDbClusterDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.availability_zones {
        let mut array_3 = object.key("AvailabilityZones").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.backup_retention_period {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.database_name {
        object.key("DatabaseName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.status {
        object.key("Status").string(var_7.as_str());
    }
    if let Some(var_8) = &input.endpoint {
        object.key("Endpoint").string(var_8.as_str());
    }
    if let Some(var_9) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_9.as_str());
    }
    if let Some(var_10) = &input.custom_endpoints {
        let mut array_11 = object.key("CustomEndpoints").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.multi_az {
        object.key("MultiAz").boolean(*var_13);
    }
    if let Some(var_14) = &input.engine {
        object.key("Engine").string(var_14.as_str());
    }
    if let Some(var_15) = &input.engine_version {
        object.key("EngineVersion").string(var_15.as_str());
    }
    if let Some(var_16) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.master_username {
        object.key("MasterUsername").string(var_17.as_str());
    }
    if let Some(var_18) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_18.as_str());
    }
    if let Some(var_19) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_19.as_str());
    }
    if let Some(var_20) = &input.read_replica_identifiers {
        let mut array_21 = object.key("ReadReplicaIdentifiers").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.vpc_security_groups {
        let mut array_24 = object.key("VpcSecurityGroups").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_group::ser_aws_rds_db_instance_vpc_security_group(
                    &mut object_26,
                    item_25,
                )?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_27.as_str());
    }
    if let Some(var_28) = &input.storage_encrypted {
        object.key("StorageEncrypted").boolean(*var_28);
    }
    if let Some(var_29) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_29.as_str());
    }
    if let Some(var_30) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_30.as_str());
    }
    if let Some(var_31) = &input.associated_roles {
        let mut array_32 = object.key("AssociatedRoles").start_array();
        for item_33 in var_31 {
            {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_associated_role::ser_aws_rds_db_cluster_associated_role(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_35.as_str());
    }
    if let Some(var_36) = &input.enabled_cloud_watch_logs_exports {
        let mut array_37 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.engine_mode {
        object.key("EngineMode").string(var_39.as_str());
    }
    if let Some(var_40) = &input.deletion_protection {
        object.key("DeletionProtection").boolean(*var_40);
    }
    if let Some(var_41) = &input.http_endpoint_enabled {
        object.key("HttpEndpointEnabled").boolean(*var_41);
    }
    if let Some(var_42) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_42.as_str());
    }
    if let Some(var_43) = &input.copy_tags_to_snapshot {
        object.key("CopyTagsToSnapshot").boolean(*var_43);
    }
    if let Some(var_44) = &input.cross_account_clone {
        object.key("CrossAccountClone").boolean(*var_44);
    }
    if let Some(var_45) = &input.domain_memberships {
        let mut array_46 = object.key("DomainMemberships").start_array();
        for item_47 in var_45 {
            {
                #[allow(unused_mut)]
                let mut object_48 = array_46.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_domain_membership::ser_aws_rds_db_domain_membership(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.db_cluster_parameter_group {
        object.key("DbClusterParameterGroup").string(var_49.as_str());
    }
    if let Some(var_50) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_50.as_str());
    }
    if let Some(var_51) = &input.db_cluster_option_group_memberships {
        let mut array_52 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_53 in var_51 {
            {
                #[allow(unused_mut)]
                let mut object_54 = array_52.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_option_group_membership::ser_aws_rds_db_cluster_option_group_membership(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_55.as_str());
    }
    if let Some(var_56) = &input.db_cluster_members {
        let mut array_57 = object.key("DbClusterMembers").start_array();
        for item_58 in var_56 {
            {
                #[allow(unused_mut)]
                let mut object_59 = array_57.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_cluster_member::ser_aws_rds_db_cluster_member(&mut object_59, item_58)?;
                object_59.finish();
            }
        }
        array_57.finish();
    }
    if let Some(var_60) = &input.iam_database_authentication_enabled {
        object.key("IamDatabaseAuthenticationEnabled").boolean(*var_60);
    }
    if let Some(var_61) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_61);
    }
    Ok(())
}

pub(crate) fn de_aws_rds_db_cluster_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsRdsDbClusterDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRdsDbClusterDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AllocatedStorage" => {
                            builder = builder.set_allocated_storage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "AvailabilityZones" => {
                            builder = builder.set_availability_zones(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "BackupRetentionPeriod" => {
                            builder = builder.set_backup_retention_period(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "DatabaseName" => {
                            builder = builder.set_database_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Status" => {
                            builder = builder.set_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Endpoint" => {
                            builder = builder.set_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReaderEndpoint" => {
                            builder = builder.set_reader_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CustomEndpoints" => {
                            builder = builder.set_custom_endpoints(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "MultiAz" => {
                            builder = builder.set_multi_az(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Engine" => {
                            builder = builder.set_engine(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EngineVersion" => {
                            builder = builder.set_engine_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Port" => {
                            builder = builder.set_port(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MasterUsername" => {
                            builder = builder.set_master_username(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PreferredBackupWindow" => {
                            builder = builder.set_preferred_backup_window(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PreferredMaintenanceWindow" => {
                            builder = builder.set_preferred_maintenance_window(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReadReplicaIdentifiers" => {
                            builder = builder.set_read_replica_identifiers(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "VpcSecurityGroups" => {
                            builder = builder.set_vpc_security_groups(
                                crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_groups::de_aws_rds_db_instance_vpc_security_groups(
                                    tokens,
                                )?,
                            );
                        }
                        "HostedZoneId" => {
                            builder = builder.set_hosted_zone_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StorageEncrypted" => {
                            builder = builder.set_storage_encrypted(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "KmsKeyId" => {
                            builder = builder.set_kms_key_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DbClusterResourceId" => {
                            builder = builder.set_db_cluster_resource_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AssociatedRoles" => {
                            builder = builder.set_associated_roles(
                                crate::protocol_serde::shape_aws_rds_db_cluster_associated_roles::de_aws_rds_db_cluster_associated_roles(tokens)?,
                            );
                        }
                        "ClusterCreateTime" => {
                            builder = builder.set_cluster_create_time(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EnabledCloudWatchLogsExports" => {
                            builder = builder.set_enabled_cloud_watch_logs_exports(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "EngineMode" => {
                            builder = builder.set_engine_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeletionProtection" => {
                            builder = builder.set_deletion_protection(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "HttpEndpointEnabled" => {
                            builder = builder.set_http_endpoint_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ActivityStreamStatus" => {
                            builder = builder.set_activity_stream_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CopyTagsToSnapshot" => {
                            builder = builder.set_copy_tags_to_snapshot(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CrossAccountClone" => {
                            builder = builder.set_cross_account_clone(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DomainMemberships" => {
                            builder = builder.set_domain_memberships(
                                crate::protocol_serde::shape_aws_rds_db_domain_memberships::de_aws_rds_db_domain_memberships(tokens)?,
                            );
                        }
                        "DbClusterParameterGroup" => {
                            builder = builder.set_db_cluster_parameter_group(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DbSubnetGroup" => {
                            builder = builder.set_db_subnet_group(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DbClusterOptionGroupMemberships" => {
                            builder = builder.set_db_cluster_option_group_memberships(
                                    crate::protocol_serde::shape_aws_rds_db_cluster_option_group_memberships::de_aws_rds_db_cluster_option_group_memberships(tokens)?
                                );
                        }
                        "DbClusterIdentifier" => {
                            builder = builder.set_db_cluster_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DbClusterMembers" => {
                            builder = builder.set_db_cluster_members(
                                crate::protocol_serde::shape_aws_rds_db_cluster_members::de_aws_rds_db_cluster_members(tokens)?,
                            );
                        }
                        "IamDatabaseAuthenticationEnabled" => {
                            builder = builder
                                .set_iam_database_authentication_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "AutoMinorVersionUpgrade" => {
                            builder =
                                builder.set_auto_minor_version_upgrade(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
