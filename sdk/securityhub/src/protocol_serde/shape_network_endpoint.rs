// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_network_endpoint(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NetworkEndpoint,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ip {
        object.key("Ip").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain {
        object.key("Domain").string(var_3.as_str());
    }
    if let Some(var_4) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.location {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Location").start_object();
        crate::protocol_serde::shape_network_geo_location::ser_network_geo_location(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.autonomous_system {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AutonomousSystem").start_object();
        crate::protocol_serde::shape_network_autonomous_system::ser_network_autonomous_system(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.connection {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Connection").start_object();
        crate::protocol_serde::shape_network_connection::ser_network_connection(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_network_endpoint<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::NetworkEndpoint>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::NetworkEndpointBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Ip" => {
                            builder = builder.set_ip(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Domain" => {
                            builder = builder.set_domain(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Port" => {
                            builder = builder.set_port(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Location" => {
                            builder = builder.set_location(crate::protocol_serde::shape_network_geo_location::de_network_geo_location(tokens)?);
                        }
                        "AutonomousSystem" => {
                            builder = builder.set_autonomous_system(
                                crate::protocol_serde::shape_network_autonomous_system::de_network_autonomous_system(tokens)?,
                            );
                        }
                        "Connection" => {
                            builder = builder.set_connection(crate::protocol_serde::shape_network_connection::de_network_connection(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
