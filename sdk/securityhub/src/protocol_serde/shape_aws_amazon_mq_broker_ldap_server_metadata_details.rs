// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_amazon_mq_broker_ldap_server_metadata_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.hosts {
        let mut array_2 = object.key("Hosts").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.role_base {
        object.key("RoleBase").string(var_4.as_str());
    }
    if let Some(var_5) = &input.role_name {
        object.key("RoleName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.role_search_matching {
        object.key("RoleSearchMatching").string(var_6.as_str());
    }
    if let Some(var_7) = &input.role_search_subtree {
        object.key("RoleSearchSubtree").boolean(*var_7);
    }
    if let Some(var_8) = &input.service_account_username {
        object.key("ServiceAccountUsername").string(var_8.as_str());
    }
    if let Some(var_9) = &input.user_base {
        object.key("UserBase").string(var_9.as_str());
    }
    if let Some(var_10) = &input.user_role_name {
        object.key("UserRoleName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.user_search_matching {
        object.key("UserSearchMatching").string(var_11.as_str());
    }
    if let Some(var_12) = &input.user_search_subtree {
        object.key("UserSearchSubtree").boolean(*var_12);
    }
    Ok(())
}

pub(crate) fn de_aws_amazon_mq_broker_ldap_server_metadata_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsAmazonMqBrokerLdapServerMetadataDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsAmazonMqBrokerLdapServerMetadataDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Hosts" => {
                            builder = builder.set_hosts(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "RoleBase" => {
                            builder = builder.set_role_base(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RoleName" => {
                            builder = builder.set_role_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RoleSearchMatching" => {
                            builder = builder.set_role_search_matching(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RoleSearchSubtree" => {
                            builder = builder.set_role_search_subtree(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ServiceAccountUsername" => {
                            builder = builder.set_service_account_username(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserBase" => {
                            builder = builder.set_user_base(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserRoleName" => {
                            builder = builder.set_user_role_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserSearchMatching" => {
                            builder = builder.set_user_search_matching(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserSearchSubtree" => {
                            builder = builder.set_user_search_subtree(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
