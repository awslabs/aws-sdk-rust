// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_code_build_project_environment(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsCodeBuildProjectEnvironment,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.certificate {
        object.key("Certificate").string(var_1.as_str());
    }
    if let Some(var_2) = &input.environment_variables {
        let mut array_3 = object.key("EnvironmentVariables").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_aws_code_build_project_environment_environment_variables_details::ser_aws_code_build_project_environment_environment_variables_details(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.privileged_mode {
        object.key("PrivilegedMode").boolean(*var_6);
    }
    if let Some(var_7) = &input.image_pull_credentials_type {
        object.key("ImagePullCredentialsType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.registry_credential {
        #[allow(unused_mut)]
        let mut object_9 = object.key("RegistryCredential").start_object();
        crate::protocol_serde::shape_aws_code_build_project_environment_registry_credential::ser_aws_code_build_project_environment_registry_credential(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.r#type {
        object.key("Type").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_code_build_project_environment<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsCodeBuildProjectEnvironment>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsCodeBuildProjectEnvironmentBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Certificate" => {
                            builder = builder.set_certificate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EnvironmentVariables" => {
                            builder = builder.set_environment_variables(
                                    crate::protocol_serde::shape_aws_code_build_project_environment_environment_variables_list::de_aws_code_build_project_environment_environment_variables_list(tokens)?
                                );
                        }
                        "PrivilegedMode" => {
                            builder = builder.set_privileged_mode(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ImagePullCredentialsType" => {
                            builder = builder.set_image_pull_credentials_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RegistryCredential" => {
                            builder = builder.set_registry_credential(
                                    crate::protocol_serde::shape_aws_code_build_project_environment_registry_credential::de_aws_code_build_project_environment_registry_credential(tokens)?
                                );
                        }
                        "Type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
