// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_api_gateway_v2_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsApiGatewayV2StageDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.created_date {
        object.key("CreatedDate").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.default_route_settings {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DefaultRouteSettings").start_object();
        crate::protocol_serde::shape_aws_api_gateway_v2_route_settings::ser_aws_api_gateway_v2_route_settings(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.deployment_id {
        object.key("DeploymentId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_7.as_str());
    }
    if let Some(var_8) = &input.route_settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("RouteSettings").start_object();
        crate::protocol_serde::shape_aws_api_gateway_v2_route_settings::ser_aws_api_gateway_v2_route_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.stage_name {
        object.key("StageName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.stage_variables {
        #[allow(unused_mut)]
        let mut object_12 = object.key("StageVariables").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.access_log_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("AccessLogSettings").start_object();
        crate::protocol_serde::shape_aws_api_gateway_access_log_settings::ser_aws_api_gateway_access_log_settings(&mut object_16, var_15)?;
        object_16.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_17) = &input.last_deployment_status_message {
        object
            .key("LastDeploymentStatusMessage")
            .string(var_17.as_str());
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
    Ok(())
}

pub(crate) fn de_aws_api_gateway_v2_stage_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsApiGatewayV2StageDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsApiGatewayV2StageDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ClientCertificateId" => {
                                builder = builder.set_client_certificate_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreatedDate" => {
                                builder = builder.set_created_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DefaultRouteSettings" => {
                                builder = builder.set_default_route_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_v2_route_settings::de_aws_api_gateway_v2_route_settings(tokens)?
                                );
                            }
                            "DeploymentId" => {
                                builder = builder.set_deployment_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastUpdatedDate" => {
                                builder = builder.set_last_updated_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RouteSettings" => {
                                builder = builder.set_route_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_v2_route_settings::de_aws_api_gateway_v2_route_settings(tokens)?
                                );
                            }
                            "StageName" => {
                                builder = builder.set_stage_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "StageVariables" => {
                                builder = builder.set_stage_variables(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "AccessLogSettings" => {
                                builder = builder.set_access_log_settings(
                                    crate::protocol_serde::shape_aws_api_gateway_access_log_settings::de_aws_api_gateway_access_log_settings(tokens)?
                                );
                            }
                            "AutoDeploy" => {
                                builder = builder.set_auto_deploy(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "LastDeploymentStatusMessage" => {
                                builder = builder.set_last_deployment_status_message(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ApiGatewayManaged" => {
                                builder = builder.set_api_gateway_managed(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
