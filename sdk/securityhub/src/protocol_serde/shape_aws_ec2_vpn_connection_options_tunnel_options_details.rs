// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_vpn_connection_options_tunnel_options_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2VpnConnectionOptionsTunnelOptionsDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dpd_timeout_seconds {
        object.key("DpdTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.ike_versions {
        let mut array_3 = object.key("IkeVersions").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_5.as_str());
    }
    if let Some(var_6) = &input.phase1_dh_group_numbers {
        let mut array_7 = object.key("Phase1DhGroupNumbers").start_array();
        for item_8 in var_6 {
            {
                array_7.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_8).into()),
                );
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.phase1_encryption_algorithms {
        let mut array_10 = object.key("Phase1EncryptionAlgorithms").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.phase1_integrity_algorithms {
        let mut array_13 = object.key("Phase1IntegrityAlgorithms").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.phase1_lifetime_seconds {
        object.key("Phase1LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.phase2_dh_group_numbers {
        let mut array_17 = object.key("Phase2DhGroupNumbers").start_array();
        for item_18 in var_16 {
            {
                array_17.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_18).into()),
                );
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.phase2_encryption_algorithms {
        let mut array_20 = object.key("Phase2EncryptionAlgorithms").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.phase2_integrity_algorithms {
        let mut array_23 = object.key("Phase2IntegrityAlgorithms").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.phase2_lifetime_seconds {
        object.key("Phase2LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.pre_shared_key {
        object.key("PreSharedKey").string(var_26.as_str());
    }
    if let Some(var_27) = &input.rekey_fuzz_percentage {
        object.key("RekeyFuzzPercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.rekey_margin_time_seconds {
        object.key("RekeyMarginTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.replay_window_size {
        object.key("ReplayWindowSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.tunnel_inside_cidr {
        object.key("TunnelInsideCidr").string(var_30.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_vpn_connection_options_tunnel_options_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2VpnConnectionOptionsTunnelOptionsDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2VpnConnectionOptionsTunnelOptionsDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DpdTimeoutSeconds" => {
                            builder = builder.set_dpd_timeout_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "IkeVersions" => {
                            builder = builder.set_ike_versions(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "OutsideIpAddress" => {
                            builder = builder.set_outside_ip_address(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Phase1DhGroupNumbers" => {
                            builder = builder.set_phase1_dh_group_numbers(crate::protocol_serde::shape_integer_list::de_integer_list(tokens)?);
                        }
                        "Phase1EncryptionAlgorithms" => {
                            builder = builder.set_phase1_encryption_algorithms(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "Phase1IntegrityAlgorithms" => {
                            builder = builder.set_phase1_integrity_algorithms(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "Phase1LifetimeSeconds" => {
                            builder = builder.set_phase1_lifetime_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Phase2DhGroupNumbers" => {
                            builder = builder.set_phase2_dh_group_numbers(crate::protocol_serde::shape_integer_list::de_integer_list(tokens)?);
                        }
                        "Phase2EncryptionAlgorithms" => {
                            builder = builder.set_phase2_encryption_algorithms(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "Phase2IntegrityAlgorithms" => {
                            builder = builder.set_phase2_integrity_algorithms(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "Phase2LifetimeSeconds" => {
                            builder = builder.set_phase2_lifetime_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PreSharedKey" => {
                            builder = builder.set_pre_shared_key(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RekeyFuzzPercentage" => {
                            builder = builder.set_rekey_fuzz_percentage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RekeyMarginTimeSeconds" => {
                            builder = builder.set_rekey_margin_time_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ReplayWindowSize" => {
                            builder = builder.set_replay_window_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "TunnelInsideCidr" => {
                            builder = builder.set_tunnel_inside_cidr(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
