// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_vpn_connection_options_tunnel_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2VpnConnectionOptionsTunnelOptionsDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.dpd_timeout_seconds != 0 {
        object.key("DpdTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dpd_timeout_seconds).into()),
        );
    }
    if let Some(var_1) = &input.ike_versions {
        let mut array_2 = object.key("IkeVersions").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_4.as_str());
    }
    if let Some(var_5) = &input.phase1_dh_group_numbers {
        let mut array_6 = object.key("Phase1DhGroupNumbers").start_array();
        for item_7 in var_5 {
            {
                array_6.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_7).into()),
                );
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.phase1_encryption_algorithms {
        let mut array_9 = object.key("Phase1EncryptionAlgorithms").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.phase1_integrity_algorithms {
        let mut array_12 = object.key("Phase1IntegrityAlgorithms").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if input.phase1_lifetime_seconds != 0 {
        object.key("Phase1LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase1_lifetime_seconds).into()),
        );
    }
    if let Some(var_14) = &input.phase2_dh_group_numbers {
        let mut array_15 = object.key("Phase2DhGroupNumbers").start_array();
        for item_16 in var_14 {
            {
                array_15.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_16).into()),
                );
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.phase2_encryption_algorithms {
        let mut array_18 = object.key("Phase2EncryptionAlgorithms").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.phase2_integrity_algorithms {
        let mut array_21 = object.key("Phase2IntegrityAlgorithms").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if input.phase2_lifetime_seconds != 0 {
        object.key("Phase2LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase2_lifetime_seconds).into()),
        );
    }
    if let Some(var_23) = &input.pre_shared_key {
        object.key("PreSharedKey").string(var_23.as_str());
    }
    if input.rekey_fuzz_percentage != 0 {
        object.key("RekeyFuzzPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_fuzz_percentage).into()),
        );
    }
    if input.rekey_margin_time_seconds != 0 {
        object.key("RekeyMarginTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_margin_time_seconds).into()),
        );
    }
    if input.replay_window_size != 0 {
        object.key("ReplayWindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.replay_window_size).into()),
        );
    }
    if let Some(var_24) = &input.tunnel_inside_cidr {
        object.key("TunnelInsideCidr").string(var_24.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_vpn_connection_options_tunnel_options_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEc2VpnConnectionOptionsTunnelOptionsDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2VpnConnectionOptionsTunnelOptionsDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DpdTimeoutSeconds" => {
                                builder = builder.set_dpd_timeout_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "IkeVersions" => {
                                builder = builder.set_ike_versions(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "OutsideIpAddress" => {
                                builder = builder.set_outside_ip_address(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Phase1DhGroupNumbers" => {
                                builder = builder.set_phase1_dh_group_numbers(
                                    crate::protocol_serde::shape_integer_list::de_integer_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "Phase1EncryptionAlgorithms" => {
                                builder = builder.set_phase1_encryption_algorithms(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Phase1IntegrityAlgorithms" => {
                                builder = builder.set_phase1_integrity_algorithms(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Phase1LifetimeSeconds" => {
                                builder = builder.set_phase1_lifetime_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Phase2DhGroupNumbers" => {
                                builder = builder.set_phase2_dh_group_numbers(
                                    crate::protocol_serde::shape_integer_list::de_integer_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "Phase2EncryptionAlgorithms" => {
                                builder = builder.set_phase2_encryption_algorithms(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Phase2IntegrityAlgorithms" => {
                                builder = builder.set_phase2_integrity_algorithms(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Phase2LifetimeSeconds" => {
                                builder = builder.set_phase2_lifetime_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "PreSharedKey" => {
                                builder = builder.set_pre_shared_key(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RekeyFuzzPercentage" => {
                                builder = builder.set_rekey_fuzz_percentage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "RekeyMarginTimeSeconds" => {
                                builder = builder.set_rekey_margin_time_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ReplayWindowSize" => {
                                builder = builder.set_replay_window_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "TunnelInsideCidr" => {
                                builder = builder.set_tunnel_inside_cidr(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
