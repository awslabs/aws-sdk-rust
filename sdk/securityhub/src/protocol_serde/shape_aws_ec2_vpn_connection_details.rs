// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_vpn_connection_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2VpnConnectionDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.vpn_connection_id {
        object.key("VpnConnectionId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.state {
        object.key("State").string(var_2.as_str());
    }
    if let Some(var_3) = &input.customer_gateway_id {
        object.key("CustomerGatewayId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.customer_gateway_configuration {
        object.key("CustomerGatewayConfiguration").string(var_4.as_str());
    }
    if let Some(var_5) = &input.r#type {
        object.key("Type").string(var_5.as_str());
    }
    if let Some(var_6) = &input.vpn_gateway_id {
        object.key("VpnGatewayId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.category {
        object.key("Category").string(var_7.as_str());
    }
    if let Some(var_8) = &input.vgw_telemetry {
        let mut array_9 = object.key("VgwTelemetry").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_ec2_vpn_connection_vgw_telemetry_details::ser_aws_ec2_vpn_connection_vgw_telemetry_details(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.options {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Options").start_object();
        crate::protocol_serde::shape_aws_ec2_vpn_connection_options_details::ser_aws_ec2_vpn_connection_options_details(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.routes {
        let mut array_15 = object.key("Routes").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_aws_ec2_vpn_connection_routes_details::ser_aws_ec2_vpn_connection_routes_details(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.transit_gateway_id {
        object.key("TransitGatewayId").string(var_18.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_vpn_connection_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2VpnConnectionDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2VpnConnectionDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "VpnConnectionId" => {
                                builder = builder.set_vpn_connection_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "State" => {
                                builder = builder.set_state(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "CustomerGatewayId" => {
                                builder = builder.set_customer_gateway_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "CustomerGatewayConfiguration" => {
                                builder = builder.set_customer_gateway_configuration(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "VpnGatewayId" => {
                                builder = builder.set_vpn_gateway_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "Category" => {
                                builder = builder.set_category(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "VgwTelemetry" => {
                                builder = builder.set_vgw_telemetry(
                                    crate::protocol_serde::shape_aws_ec2_vpn_connection_vgw_telemetry_list::de_aws_ec2_vpn_connection_vgw_telemetry_list(tokens)?
                                );
                            }
                            "Options" => {
                                builder = builder.set_options(
                                    crate::protocol_serde::shape_aws_ec2_vpn_connection_options_details::de_aws_ec2_vpn_connection_options_details(
                                        tokens,
                                    )?,
                                );
                            }
                            "Routes" => {
                                builder = builder.set_routes(
                                    crate::protocol_serde::shape_aws_ec2_vpn_connection_routes_list::de_aws_ec2_vpn_connection_routes_list(tokens)?,
                                );
                            }
                            "TransitGatewayId" => {
                                builder = builder.set_transit_gateway_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
