// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_network_interface_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2NetworkInterfaceDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.attachment {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Attachment").start_object();
        crate::protocol_serde::shape_aws_ec2_network_interface_attachment::ser_aws_ec2_network_interface_attachment(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.security_groups {
        let mut array_5 = object.key("SecurityGroups").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_aws_ec2_network_interface_security_group::ser_aws_ec2_network_interface_security_group(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_8) = &input.ip_v6_addresses {
        let mut array_9 = object.key("IpV6Addresses").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_ec2_network_interface_ip_v6_address_detail::ser_aws_ec2_network_interface_ip_v6_address_detail(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.private_ip_addresses {
        let mut array_13 = object.key("PrivateIpAddresses").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_aws_ec2_network_interface_private_ip_address_detail::ser_aws_ec2_network_interface_private_ip_address_detail(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.public_ip {
        object.key("PublicIp").string(var_17.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_network_interface_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEc2NetworkInterfaceDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::AwsEc2NetworkInterfaceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Attachment" => {
                                builder = builder.set_attachment(
                                    crate::protocol_serde::shape_aws_ec2_network_interface_attachment::de_aws_ec2_network_interface_attachment(tokens)?
                                );
                            }
                            "NetworkInterfaceId" => {
                                builder = builder.set_network_interface_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecurityGroups" => {
                                builder = builder.set_security_groups(
                                    crate::protocol_serde::shape_aws_ec2_network_interface_security_group_list::de_aws_ec2_network_interface_security_group_list(tokens)?
                                );
                            }
                            "SourceDestCheck" => {
                                builder = builder.set_source_dest_check(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "IpV6Addresses" => {
                                builder = builder.set_ip_v6_addresses(
                                    crate::protocol_serde::shape_aws_ec2_network_interface_ip_v6_address_list::de_aws_ec2_network_interface_ip_v6_address_list(tokens)?
                                );
                            }
                            "PrivateIpAddresses" => {
                                builder = builder.set_private_ip_addresses(
                                    crate::protocol_serde::shape_aws_ec2_network_interface_private_ip_address_list::de_aws_ec2_network_interface_private_ip_address_list(tokens)?
                                );
                            }
                            "PublicDnsName" => {
                                builder = builder.set_public_dns_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PublicIp" => {
                                builder = builder.set_public_ip(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
