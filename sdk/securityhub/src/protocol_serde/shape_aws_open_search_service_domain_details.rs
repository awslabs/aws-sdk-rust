// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_open_search_service_domain_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsOpenSearchServiceDomainDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("Arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.access_policies {
        object.key("AccessPolicies").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain_name {
        object.key("DomainName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.id {
        object.key("Id").string(var_4.as_str());
    }
    if let Some(var_5) = &input.domain_endpoint {
        object.key("DomainEndpoint").string(var_5.as_str());
    }
    if let Some(var_6) = &input.engine_version {
        object.key("EngineVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.encryption_at_rest_options {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EncryptionAtRestOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_encryption_at_rest_options_details::ser_aws_open_search_service_domain_encryption_at_rest_options_details(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.node_to_node_encryption_options {
        #[allow(unused_mut)]
        let mut object_10 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_node_to_node_encryption_options_details::ser_aws_open_search_service_domain_node_to_node_encryption_options_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.service_software_options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ServiceSoftwareOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_service_software_options_details::ser_aws_open_search_service_domain_service_software_options_details(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.cluster_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ClusterConfig").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_cluster_config_details::ser_aws_open_search_service_domain_cluster_config_details(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.domain_endpoint_options {
        #[allow(unused_mut)]
        let mut object_16 = object.key("DomainEndpointOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_domain_endpoint_options_details::ser_aws_open_search_service_domain_domain_endpoint_options_details(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.vpc_options {
        #[allow(unused_mut)]
        let mut object_18 = object.key("VpcOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_vpc_options_details::ser_aws_open_search_service_domain_vpc_options_details(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.log_publishing_options {
        #[allow(unused_mut)]
        let mut object_20 = object.key("LogPublishingOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_log_publishing_options_details::ser_aws_open_search_service_domain_log_publishing_options_details(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.domain_endpoints {
        #[allow(unused_mut)]
        let mut object_22 = object.key("DomainEndpoints").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.advanced_security_options {
        #[allow(unused_mut)]
        let mut object_26 = object.key("AdvancedSecurityOptions").start_object();
        crate::protocol_serde::shape_aws_open_search_service_domain_advanced_security_options_details::ser_aws_open_search_service_domain_advanced_security_options_details(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_open_search_service_domain_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsOpenSearchServiceDomainDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsOpenSearchServiceDomainDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Arn" => {
                            builder = builder.set_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AccessPolicies" => {
                            builder = builder.set_access_policies(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DomainName" => {
                            builder = builder.set_domain_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DomainEndpoint" => {
                            builder = builder.set_domain_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EngineVersion" => {
                            builder = builder.set_engine_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EncryptionAtRestOptions" => {
                            builder = builder.set_encryption_at_rest_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_encryption_at_rest_options_details::de_aws_open_search_service_domain_encryption_at_rest_options_details(tokens)?
                                );
                        }
                        "NodeToNodeEncryptionOptions" => {
                            builder = builder.set_node_to_node_encryption_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_node_to_node_encryption_options_details::de_aws_open_search_service_domain_node_to_node_encryption_options_details(tokens)?
                                );
                        }
                        "ServiceSoftwareOptions" => {
                            builder = builder.set_service_software_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_service_software_options_details::de_aws_open_search_service_domain_service_software_options_details(tokens)?
                                );
                        }
                        "ClusterConfig" => {
                            builder = builder.set_cluster_config(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_cluster_config_details::de_aws_open_search_service_domain_cluster_config_details(tokens)?
                                );
                        }
                        "DomainEndpointOptions" => {
                            builder = builder.set_domain_endpoint_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_domain_endpoint_options_details::de_aws_open_search_service_domain_domain_endpoint_options_details(tokens)?
                                );
                        }
                        "VpcOptions" => {
                            builder = builder.set_vpc_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_vpc_options_details::de_aws_open_search_service_domain_vpc_options_details(tokens)?
                                );
                        }
                        "LogPublishingOptions" => {
                            builder = builder.set_log_publishing_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_log_publishing_options_details::de_aws_open_search_service_domain_log_publishing_options_details(tokens)?
                                );
                        }
                        "DomainEndpoints" => {
                            builder = builder.set_domain_endpoints(crate::protocol_serde::shape_field_map::de_field_map(tokens)?);
                        }
                        "AdvancedSecurityOptions" => {
                            builder = builder.set_advanced_security_options(
                                    crate::protocol_serde::shape_aws_open_search_service_domain_advanced_security_options_details::de_aws_open_search_service_domain_advanced_security_options_details(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
