// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_vpc_endpoint_service_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2VpcEndpointServiceDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.acceptance_required {
        object.key("AcceptanceRequired").boolean(*var_1);
    }
    if let Some(var_2) = &input.availability_zones {
        let mut array_3 = object.key("AvailabilityZones").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.base_endpoint_dns_names {
        let mut array_6 = object.key("BaseEndpointDnsNames").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.manages_vpc_endpoints {
        object.key("ManagesVpcEndpoints").boolean(*var_8);
    }
    if let Some(var_9) = &input.gateway_load_balancer_arns {
        let mut array_10 = object.key("GatewayLoadBalancerArns").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.network_load_balancer_arns {
        let mut array_13 = object.key("NetworkLoadBalancerArns").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.service_id {
        object.key("ServiceId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.service_name {
        object.key("ServiceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.service_state {
        object.key("ServiceState").string(var_18.as_str());
    }
    if let Some(var_19) = &input.service_type {
        let mut array_20 = object.key("ServiceType").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_aws_ec2_vpc_endpoint_service_service_type_details::ser_aws_ec2_vpc_endpoint_service_service_type_details(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_vpc_endpoint_service_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2VpcEndpointServiceDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2VpcEndpointServiceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AcceptanceRequired" => {
                            builder = builder.set_acceptance_required(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "AvailabilityZones" => {
                            builder =
                                builder.set_availability_zones(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "BaseEndpointDnsNames" => {
                            builder = builder
                                .set_base_endpoint_dns_names(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "ManagesVpcEndpoints" => {
                            builder = builder.set_manages_vpc_endpoints(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "GatewayLoadBalancerArns" => {
                            builder = builder.set_gateway_load_balancer_arns(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "NetworkLoadBalancerArns" => {
                            builder = builder.set_network_load_balancer_arns(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "PrivateDnsName" => {
                            builder = builder.set_private_dns_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceId" => {
                            builder = builder.set_service_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceName" => {
                            builder = builder.set_service_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceState" => {
                            builder = builder.set_service_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceType" => {
                            builder = builder.set_service_type(
                                    crate::protocol_serde::shape_aws_ec2_vpc_endpoint_service_service_type_list::de_aws_ec2_vpc_endpoint_service_service_type_list(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
