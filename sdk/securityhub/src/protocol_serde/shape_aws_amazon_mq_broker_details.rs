// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_amazon_mq_broker_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsAmazonMqBrokerDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authentication_strategy {
        object.key("AuthenticationStrategy").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_2);
    }
    if let Some(var_3) = &input.broker_arn {
        object.key("BrokerArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.broker_name {
        object.key("BrokerName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.deployment_mode {
        object.key("DeploymentMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.encryption_options {
        #[allow(unused_mut)]
        let mut object_7 = object.key("EncryptionOptions").start_object();
        crate::protocol_serde::shape_aws_amazon_mq_broker_encryption_options_details::ser_aws_amazon_mq_broker_encryption_options_details(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.engine_type {
        object.key("EngineType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.engine_version {
        object.key("EngineVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.host_instance_type {
        object.key("HostInstanceType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.broker_id {
        object.key("BrokerId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.ldap_server_metadata {
        #[allow(unused_mut)]
        let mut object_13 = object.key("LdapServerMetadata").start_object();
        crate::protocol_serde::shape_aws_amazon_mq_broker_ldap_server_metadata_details::ser_aws_amazon_mq_broker_ldap_server_metadata_details(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.logs {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Logs").start_object();
        crate::protocol_serde::shape_aws_amazon_mq_broker_logs_details::ser_aws_amazon_mq_broker_logs_details(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.maintenance_window_start_time {
        #[allow(unused_mut)]
        let mut object_17 = object.key("MaintenanceWindowStartTime").start_object();
        crate::protocol_serde::shape_aws_amazon_mq_broker_maintenance_window_start_time_details::ser_aws_amazon_mq_broker_maintenance_window_start_time_details(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_18);
    }
    if let Some(var_19) = &input.security_groups {
        let mut array_20 = object.key("SecurityGroups").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.storage_type {
        object.key("StorageType").string(var_22.as_str());
    }
    if let Some(var_23) = &input.subnet_ids {
        let mut array_24 = object.key("SubnetIds").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.users {
        let mut array_27 = object.key("Users").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_aws_amazon_mq_broker_users_details::ser_aws_amazon_mq_broker_users_details(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_amazon_mq_broker_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsAmazonMqBrokerDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsAmazonMqBrokerDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AuthenticationStrategy" => {
                            builder = builder.set_authentication_strategy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AutoMinorVersionUpgrade" => {
                            builder =
                                builder.set_auto_minor_version_upgrade(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "BrokerArn" => {
                            builder = builder.set_broker_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BrokerName" => {
                            builder = builder.set_broker_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeploymentMode" => {
                            builder = builder.set_deployment_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EncryptionOptions" => {
                            builder = builder.set_encryption_options(
                                    crate::protocol_serde::shape_aws_amazon_mq_broker_encryption_options_details::de_aws_amazon_mq_broker_encryption_options_details(tokens)?
                                );
                        }
                        "EngineType" => {
                            builder = builder.set_engine_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EngineVersion" => {
                            builder = builder.set_engine_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "HostInstanceType" => {
                            builder = builder.set_host_instance_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BrokerId" => {
                            builder = builder.set_broker_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LdapServerMetadata" => {
                            builder = builder.set_ldap_server_metadata(
                                    crate::protocol_serde::shape_aws_amazon_mq_broker_ldap_server_metadata_details::de_aws_amazon_mq_broker_ldap_server_metadata_details(tokens)?
                                );
                        }
                        "Logs" => {
                            builder = builder.set_logs(
                                crate::protocol_serde::shape_aws_amazon_mq_broker_logs_details::de_aws_amazon_mq_broker_logs_details(tokens)?,
                            );
                        }
                        "MaintenanceWindowStartTime" => {
                            builder = builder.set_maintenance_window_start_time(
                                    crate::protocol_serde::shape_aws_amazon_mq_broker_maintenance_window_start_time_details::de_aws_amazon_mq_broker_maintenance_window_start_time_details(tokens)?
                                );
                        }
                        "PubliclyAccessible" => {
                            builder = builder.set_publicly_accessible(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SecurityGroups" => {
                            builder = builder.set_security_groups(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "StorageType" => {
                            builder = builder.set_storage_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SubnetIds" => {
                            builder = builder.set_subnet_ids(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "Users" => {
                            builder = builder
                                .set_users(crate::protocol_serde::shape_aws_amazon_mq_broker_users_list::de_aws_amazon_mq_broker_users_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
