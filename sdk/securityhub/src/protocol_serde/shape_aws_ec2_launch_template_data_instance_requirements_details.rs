// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_launch_template_data_instance_requirements_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2LaunchTemplateDataInstanceRequirementsDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.accelerator_count {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AcceleratorCount").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_accelerator_count_details::ser_aws_ec2_launch_template_data_instance_requirements_accelerator_count_details(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.accelerator_manufacturers {
        let mut array_4 = object.key("AcceleratorManufacturers").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.accelerator_names {
        let mut array_7 = object.key("AcceleratorNames").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.accelerator_total_memory_mib {
        #[allow(unused_mut)]
        let mut object_10 = object.key("AcceleratorTotalMemoryMiB").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_accelerator_total_memory_mib_details::ser_aws_ec2_launch_template_data_instance_requirements_accelerator_total_memory_mib_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.accelerator_types {
        let mut array_12 = object.key("AcceleratorTypes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.bare_metal {
        object.key("BareMetal").string(var_14.as_str());
    }
    if let Some(var_15) = &input.baseline_ebs_bandwidth_mbps {
        #[allow(unused_mut)]
        let mut object_16 = object.key("BaselineEbsBandwidthMbps").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_baseline_ebs_bandwidth_mbps_details::ser_aws_ec2_launch_template_data_instance_requirements_baseline_ebs_bandwidth_mbps_details(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.burstable_performance {
        object.key("BurstablePerformance").string(var_17.as_str());
    }
    if let Some(var_18) = &input.cpu_manufacturers {
        let mut array_19 = object.key("CpuManufacturers").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.excluded_instance_types {
        let mut array_22 = object.key("ExcludedInstanceTypes").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.instance_generations {
        let mut array_25 = object.key("InstanceGenerations").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.local_storage {
        object.key("LocalStorage").string(var_27.as_str());
    }
    if let Some(var_28) = &input.local_storage_types {
        let mut array_29 = object.key("LocalStorageTypes").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.memory_gib_per_v_cpu {
        #[allow(unused_mut)]
        let mut object_32 = object.key("MemoryGiBPerVCpu").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_memory_gib_per_v_cpu_details::ser_aws_ec2_launch_template_data_instance_requirements_memory_gib_per_v_cpu_details(&mut object_32, var_31)?;
        object_32.finish();
    }
    if let Some(var_33) = &input.memory_mib {
        #[allow(unused_mut)]
        let mut object_34 = object.key("MemoryMiB").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_memory_mib_details::ser_aws_ec2_launch_template_data_instance_requirements_memory_mib_details(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.network_interface_count {
        #[allow(unused_mut)]
        let mut object_36 = object.key("NetworkInterfaceCount").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_network_interface_count_details::ser_aws_ec2_launch_template_data_instance_requirements_network_interface_count_details(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.on_demand_max_price_percentage_over_lowest_price {
        object.key("OnDemandMaxPricePercentageOverLowestPrice").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.require_hibernate_support {
        object.key("RequireHibernateSupport").boolean(*var_38);
    }
    if let Some(var_39) = &input.spot_max_price_percentage_over_lowest_price {
        object.key("SpotMaxPricePercentageOverLowestPrice").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_39).into()),
        );
    }
    if let Some(var_40) = &input.total_local_storage_gb {
        #[allow(unused_mut)]
        let mut object_41 = object.key("TotalLocalStorageGB").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_total_local_storage_gb_details::ser_aws_ec2_launch_template_data_instance_requirements_total_local_storage_gb_details(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.v_cpu_count {
        #[allow(unused_mut)]
        let mut object_43 = object.key("VCpuCount").start_object();
        crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_v_cpu_count_details::ser_aws_ec2_launch_template_data_instance_requirements_v_cpu_count_details(&mut object_43, var_42)?;
        object_43.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_launch_template_data_instance_requirements_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2LaunchTemplateDataInstanceRequirementsDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2LaunchTemplateDataInstanceRequirementsDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AcceleratorCount" => {
                            builder = builder.set_accelerator_count(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_accelerator_count_details::de_aws_ec2_launch_template_data_instance_requirements_accelerator_count_details(tokens)?
                                );
                        }
                        "AcceleratorManufacturers" => {
                            builder = builder
                                .set_accelerator_manufacturers(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "AcceleratorNames" => {
                            builder =
                                builder.set_accelerator_names(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "AcceleratorTotalMemoryMiB" => {
                            builder = builder.set_accelerator_total_memory_mib(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_accelerator_total_memory_mib_details::de_aws_ec2_launch_template_data_instance_requirements_accelerator_total_memory_mib_details(tokens)?
                                );
                        }
                        "AcceleratorTypes" => {
                            builder =
                                builder.set_accelerator_types(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "BareMetal" => {
                            builder = builder.set_bare_metal(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BaselineEbsBandwidthMbps" => {
                            builder = builder.set_baseline_ebs_bandwidth_mbps(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_baseline_ebs_bandwidth_mbps_details::de_aws_ec2_launch_template_data_instance_requirements_baseline_ebs_bandwidth_mbps_details(tokens)?
                                );
                        }
                        "BurstablePerformance" => {
                            builder = builder.set_burstable_performance(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CpuManufacturers" => {
                            builder =
                                builder.set_cpu_manufacturers(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "ExcludedInstanceTypes" => {
                            builder = builder
                                .set_excluded_instance_types(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "InstanceGenerations" => {
                            builder = builder
                                .set_instance_generations(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "LocalStorage" => {
                            builder = builder.set_local_storage(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LocalStorageTypes" => {
                            builder = builder
                                .set_local_storage_types(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "MemoryGiBPerVCpu" => {
                            builder = builder.set_memory_gib_per_v_cpu(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_memory_gib_per_v_cpu_details::de_aws_ec2_launch_template_data_instance_requirements_memory_gib_per_v_cpu_details(tokens)?
                                );
                        }
                        "MemoryMiB" => {
                            builder = builder.set_memory_mib(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_memory_mib_details::de_aws_ec2_launch_template_data_instance_requirements_memory_mib_details(tokens)?
                                );
                        }
                        "NetworkInterfaceCount" => {
                            builder = builder.set_network_interface_count(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_network_interface_count_details::de_aws_ec2_launch_template_data_instance_requirements_network_interface_count_details(tokens)?
                                );
                        }
                        "OnDemandMaxPricePercentageOverLowestPrice" => {
                            builder = builder.set_on_demand_max_price_percentage_over_lowest_price(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RequireHibernateSupport" => {
                            builder =
                                builder.set_require_hibernate_support(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SpotMaxPricePercentageOverLowestPrice" => {
                            builder = builder.set_spot_max_price_percentage_over_lowest_price(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "TotalLocalStorageGB" => {
                            builder = builder.set_total_local_storage_gb(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_total_local_storage_gb_details::de_aws_ec2_launch_template_data_instance_requirements_total_local_storage_gb_details(tokens)?
                                );
                        }
                        "VCpuCount" => {
                            builder = builder.set_v_cpu_count(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_instance_requirements_v_cpu_count_details::de_aws_ec2_launch_template_data_instance_requirements_v_cpu_count_details(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
