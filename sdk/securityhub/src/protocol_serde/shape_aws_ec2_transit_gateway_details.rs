// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_transit_gateway_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2TransitGatewayDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.default_route_table_propagation {
        object
            .key("DefaultRouteTablePropagation")
            .string(var_3.as_str());
    }
    if let Some(var_4) = &input.auto_accept_shared_attachments {
        object
            .key("AutoAcceptSharedAttachments")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.default_route_table_association {
        object
            .key("DefaultRouteTableAssociation")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.transit_gateway_cidr_blocks {
        let mut array_7 = object.key("TransitGatewayCidrBlocks").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.association_default_route_table_id {
        object
            .key("AssociationDefaultRouteTableId")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.propagation_default_route_table_id {
        object
            .key("PropagationDefaultRouteTableId")
            .string(var_10.as_str());
    }
    if let Some(var_11) = &input.vpn_ecmp_support {
        object.key("VpnEcmpSupport").string(var_11.as_str());
    }
    if let Some(var_12) = &input.dns_support {
        object.key("DnsSupport").string(var_12.as_str());
    }
    if let Some(var_13) = &input.multicast_support {
        object.key("MulticastSupport").string(var_13.as_str());
    }
    if input.amazon_side_asn != 0 {
        object.key("AmazonSideAsn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.amazon_side_asn).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_transit_gateway_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEc2TransitGatewayDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2TransitGatewayDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DefaultRouteTablePropagation" => {
                                builder = builder.set_default_route_table_propagation(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AutoAcceptSharedAttachments" => {
                                builder = builder.set_auto_accept_shared_attachments(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DefaultRouteTableAssociation" => {
                                builder = builder.set_default_route_table_association(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TransitGatewayCidrBlocks" => {
                                builder = builder.set_transit_gateway_cidr_blocks(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "AssociationDefaultRouteTableId" => {
                                builder = builder.set_association_default_route_table_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PropagationDefaultRouteTableId" => {
                                builder = builder.set_propagation_default_route_table_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VpnEcmpSupport" => {
                                builder = builder.set_vpn_ecmp_support(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DnsSupport" => {
                                builder = builder.set_dns_support(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MulticastSupport" => {
                                builder = builder.set_multicast_support(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AmazonSideAsn" => {
                                builder = builder.set_amazon_side_asn(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
