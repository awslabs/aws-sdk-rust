// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_auto_scaling_launch_configuration_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsAutoScalingLaunchConfigurationDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.associate_public_ip_address {
        object.key("AssociatePublicIpAddress").boolean(*var_1);
    }
    if let Some(var_2) = &input.block_device_mappings {
        let mut array_3 = object.key("BlockDeviceMappings").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_block_device_mappings_details::ser_aws_auto_scaling_launch_configuration_block_device_mappings_details(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.classic_link_vpc_id {
        object.key("ClassicLinkVpcId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.classic_link_vpc_security_groups {
        let mut array_8 = object.key("ClassicLinkVpcSecurityGroups").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.created_time {
        object.key("CreatedTime").string(var_10.as_str());
    }
    if let Some(var_11) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_11);
    }
    if let Some(var_12) = &input.iam_instance_profile {
        object.key("IamInstanceProfile").string(var_12.as_str());
    }
    if let Some(var_13) = &input.image_id {
        object.key("ImageId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_monitoring {
        #[allow(unused_mut)]
        let mut object_15 = object.key("InstanceMonitoring").start_object();
        crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_instance_monitoring_details::ser_aws_auto_scaling_launch_configuration_instance_monitoring_details(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.instance_type {
        object.key("InstanceType").string(var_16.as_str());
    }
    if let Some(var_17) = &input.kernel_id {
        object.key("KernelId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.key_name {
        object.key("KeyName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.launch_configuration_name {
        object.key("LaunchConfigurationName").string(var_19.as_str());
    }
    if let Some(var_20) = &input.placement_tenancy {
        object.key("PlacementTenancy").string(var_20.as_str());
    }
    if let Some(var_21) = &input.ramdisk_id {
        object.key("RamdiskId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.security_groups {
        let mut array_23 = object.key("SecurityGroups").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.spot_price {
        object.key("SpotPrice").string(var_25.as_str());
    }
    if let Some(var_26) = &input.user_data {
        object.key("UserData").string(var_26.as_str());
    }
    if let Some(var_27) = &input.metadata_options {
        #[allow(unused_mut)]
        let mut object_28 = object.key("MetadataOptions").start_object();
        crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_metadata_options::ser_aws_auto_scaling_launch_configuration_metadata_options(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_auto_scaling_launch_configuration_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsAutoScalingLaunchConfigurationDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsAutoScalingLaunchConfigurationDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AssociatePublicIpAddress" => {
                            builder =
                                builder.set_associate_public_ip_address(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "BlockDeviceMappings" => {
                            builder = builder.set_block_device_mappings(
                                    crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_block_device_mappings_list::de_aws_auto_scaling_launch_configuration_block_device_mappings_list(tokens)?
                                );
                        }
                        "ClassicLinkVpcId" => {
                            builder = builder.set_classic_link_vpc_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ClassicLinkVpcSecurityGroups" => {
                            builder = builder.set_classic_link_vpc_security_groups(
                                crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?,
                            );
                        }
                        "CreatedTime" => {
                            builder = builder.set_created_time(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EbsOptimized" => {
                            builder = builder.set_ebs_optimized(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IamInstanceProfile" => {
                            builder = builder.set_iam_instance_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ImageId" => {
                            builder = builder.set_image_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "InstanceMonitoring" => {
                            builder = builder.set_instance_monitoring(
                                    crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_instance_monitoring_details::de_aws_auto_scaling_launch_configuration_instance_monitoring_details(tokens)?
                                );
                        }
                        "InstanceType" => {
                            builder = builder.set_instance_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KernelId" => {
                            builder = builder.set_kernel_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KeyName" => {
                            builder = builder.set_key_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LaunchConfigurationName" => {
                            builder = builder.set_launch_configuration_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PlacementTenancy" => {
                            builder = builder.set_placement_tenancy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RamdiskId" => {
                            builder = builder.set_ramdisk_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecurityGroups" => {
                            builder =
                                builder.set_security_groups(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "SpotPrice" => {
                            builder = builder.set_spot_price(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserData" => {
                            builder = builder.set_user_data(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MetadataOptions" => {
                            builder = builder.set_metadata_options(
                                    crate::protocol_serde::shape_aws_auto_scaling_launch_configuration_metadata_options::de_aws_auto_scaling_launch_configuration_metadata_options(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
