// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_security_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsSecurityFinding,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.schema_version {
        object.key("SchemaVersion").string(var_1.as_str());
    }
    if let Some(var_2) = &input.id {
        object.key("Id").string(var_2.as_str());
    }
    if let Some(var_3) = &input.product_arn {
        object.key("ProductArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.product_name {
        object.key("ProductName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.company_name {
        object.key("CompanyName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.region {
        object.key("Region").string(var_6.as_str());
    }
    if let Some(var_7) = &input.generator_id {
        object.key("GeneratorId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.types {
        let mut array_10 = object.key("Types").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_12.as_str());
    }
    if let Some(var_13) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_13.as_str());
    }
    if let Some(var_14) = &input.created_at {
        object.key("CreatedAt").string(var_14.as_str());
    }
    if let Some(var_15) = &input.updated_at {
        object.key("UpdatedAt").string(var_15.as_str());
    }
    if let Some(var_16) = &input.severity {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Severity").start_object();
        crate::protocol_serde::shape_severity::ser_severity(&mut object_17, var_16)?;
        object_17.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_18) = &input.title {
        object.key("Title").string(var_18.as_str());
    }
    if let Some(var_19) = &input.description {
        object.key("Description").string(var_19.as_str());
    }
    if let Some(var_20) = &input.remediation {
        #[allow(unused_mut)]
        let mut object_21 = object.key("Remediation").start_object();
        crate::protocol_serde::shape_remediation::ser_remediation(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.source_url {
        object.key("SourceUrl").string(var_22.as_str());
    }
    if let Some(var_23) = &input.product_fields {
        #[allow(unused_mut)]
        let mut object_24 = object.key("ProductFields").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.user_defined_fields {
        #[allow(unused_mut)]
        let mut object_28 = object.key("UserDefinedFields").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29.as_str()).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    if let Some(var_31) = &input.malware {
        let mut array_32 = object.key("Malware").start_array();
        for item_33 in var_31 {
            {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::protocol_serde::shape_malware::ser_malware(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.network {
        #[allow(unused_mut)]
        let mut object_36 = object.key("Network").start_object();
        crate::protocol_serde::shape_network::ser_network(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.network_path {
        let mut array_38 = object.key("NetworkPath").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_network_path_component::ser_network_path_component(
                    &mut object_40,
                    item_39,
                )?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.process {
        #[allow(unused_mut)]
        let mut object_42 = object.key("Process").start_object();
        crate::protocol_serde::shape_process_details::ser_process_details(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.threats {
        let mut array_44 = object.key("Threats").start_array();
        for item_45 in var_43 {
            {
                #[allow(unused_mut)]
                let mut object_46 = array_44.value().start_object();
                crate::protocol_serde::shape_threat::ser_threat(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.threat_intel_indicators {
        let mut array_48 = object.key("ThreatIntelIndicators").start_array();
        for item_49 in var_47 {
            {
                #[allow(unused_mut)]
                let mut object_50 = array_48.value().start_object();
                crate::protocol_serde::shape_threat_intel_indicator::ser_threat_intel_indicator(
                    &mut object_50,
                    item_49,
                )?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if let Some(var_51) = &input.resources {
        let mut array_52 = object.key("Resources").start_array();
        for item_53 in var_51 {
            {
                #[allow(unused_mut)]
                let mut object_54 = array_52.value().start_object();
                crate::protocol_serde::shape_resource::ser_resource(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.compliance {
        #[allow(unused_mut)]
        let mut object_56 = object.key("Compliance").start_object();
        crate::protocol_serde::shape_compliance::ser_compliance(&mut object_56, var_55)?;
        object_56.finish();
    }
    if let Some(var_57) = &input.verification_state {
        object.key("VerificationState").string(var_57.as_str());
    }
    if let Some(var_58) = &input.workflow_state {
        object.key("WorkflowState").string(var_58.as_str());
    }
    if let Some(var_59) = &input.workflow {
        #[allow(unused_mut)]
        let mut object_60 = object.key("Workflow").start_object();
        crate::protocol_serde::shape_workflow::ser_workflow(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.record_state {
        object.key("RecordState").string(var_61.as_str());
    }
    if let Some(var_62) = &input.related_findings {
        let mut array_63 = object.key("RelatedFindings").start_array();
        for item_64 in var_62 {
            {
                #[allow(unused_mut)]
                let mut object_65 = array_63.value().start_object();
                crate::protocol_serde::shape_related_finding::ser_related_finding(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.note {
        #[allow(unused_mut)]
        let mut object_67 = object.key("Note").start_object();
        crate::protocol_serde::shape_note::ser_note(&mut object_67, var_66)?;
        object_67.finish();
    }
    if let Some(var_68) = &input.vulnerabilities {
        let mut array_69 = object.key("Vulnerabilities").start_array();
        for item_70 in var_68 {
            {
                #[allow(unused_mut)]
                let mut object_71 = array_69.value().start_object();
                crate::protocol_serde::shape_vulnerability::ser_vulnerability(
                    &mut object_71,
                    item_70,
                )?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.patch_summary {
        #[allow(unused_mut)]
        let mut object_73 = object.key("PatchSummary").start_object();
        crate::protocol_serde::shape_patch_summary::ser_patch_summary(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.action {
        #[allow(unused_mut)]
        let mut object_75 = object.key("Action").start_object();
        crate::protocol_serde::shape_action::ser_action(&mut object_75, var_74)?;
        object_75.finish();
    }
    if let Some(var_76) = &input.finding_provider_fields {
        #[allow(unused_mut)]
        let mut object_77 = object.key("FindingProviderFields").start_object();
        crate::protocol_serde::shape_finding_provider_fields::ser_finding_provider_fields(
            &mut object_77,
            var_76,
        )?;
        object_77.finish();
    }
    if input.sample {
        object.key("Sample").boolean(input.sample);
    }
    Ok(())
}

pub(crate) fn de_aws_security_finding<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsSecurityFinding>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsSecurityFindingBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "SchemaVersion" => {
                                builder = builder.set_schema_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ProductArn" => {
                                builder = builder.set_product_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ProductName" => {
                                builder = builder.set_product_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CompanyName" => {
                                builder = builder.set_company_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Region" => {
                                builder = builder.set_region(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "GeneratorId" => {
                                builder = builder.set_generator_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AwsAccountId" => {
                                builder = builder.set_aws_account_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Types" => {
                                builder = builder.set_types(
                                    crate::protocol_serde::shape_type_list::de_type_list(tokens)?,
                                );
                            }
                            "FirstObservedAt" => {
                                builder = builder.set_first_observed_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastObservedAt" => {
                                builder = builder.set_last_observed_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreatedAt" => {
                                builder = builder.set_created_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "UpdatedAt" => {
                                builder = builder.set_updated_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Severity" => {
                                builder = builder.set_severity(
                                    crate::protocol_serde::shape_severity::de_severity(tokens)?,
                                );
                            }
                            "Confidence" => {
                                builder = builder.set_confidence(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Criticality" => {
                                builder = builder.set_criticality(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Title" => {
                                builder = builder.set_title(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Remediation" => {
                                builder = builder.set_remediation(
                                    crate::protocol_serde::shape_remediation::de_remediation(
                                        tokens,
                                    )?,
                                );
                            }
                            "SourceUrl" => {
                                builder = builder.set_source_url(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ProductFields" => {
                                builder = builder.set_product_fields(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "UserDefinedFields" => {
                                builder = builder.set_user_defined_fields(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "Malware" => {
                                builder = builder.set_malware(
                                    crate::protocol_serde::shape_malware_list::de_malware_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "Network" => {
                                builder = builder.set_network(
                                    crate::protocol_serde::shape_network::de_network(tokens)?,
                                );
                            }
                            "NetworkPath" => {
                                builder = builder.set_network_path(
                                    crate::protocol_serde::shape_network_path_list::de_network_path_list(tokens)?
                                );
                            }
                            "Process" => {
                                builder = builder.set_process(
                                    crate::protocol_serde::shape_process_details::de_process_details(tokens)?
                                );
                            }
                            "Threats" => {
                                builder = builder.set_threats(
                                    crate::protocol_serde::shape_threat_list::de_threat_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ThreatIntelIndicators" => {
                                builder = builder.set_threat_intel_indicators(
                                    crate::protocol_serde::shape_threat_intel_indicator_list::de_threat_intel_indicator_list(tokens)?
                                );
                            }
                            "Resources" => {
                                builder = builder.set_resources(
                                    crate::protocol_serde::shape_resource_list::de_resource_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "Compliance" => {
                                builder = builder.set_compliance(
                                    crate::protocol_serde::shape_compliance::de_compliance(tokens)?,
                                );
                            }
                            "VerificationState" => {
                                builder = builder.set_verification_state(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::VerificationState::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "WorkflowState" => {
                                builder = builder.set_workflow_state(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::WorkflowState::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "Workflow" => {
                                builder = builder.set_workflow(
                                    crate::protocol_serde::shape_workflow::de_workflow(tokens)?,
                                );
                            }
                            "RecordState" => {
                                builder = builder.set_record_state(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::RecordState::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "RelatedFindings" => {
                                builder = builder.set_related_findings(
                                    crate::protocol_serde::shape_related_finding_list::de_related_finding_list(tokens)?
                                );
                            }
                            "Note" => {
                                builder = builder
                                    .set_note(crate::protocol_serde::shape_note::de_note(tokens)?);
                            }
                            "Vulnerabilities" => {
                                builder = builder.set_vulnerabilities(
                                    crate::protocol_serde::shape_vulnerability_list::de_vulnerability_list(tokens)?
                                );
                            }
                            "PatchSummary" => {
                                builder = builder.set_patch_summary(
                                    crate::protocol_serde::shape_patch_summary::de_patch_summary(
                                        tokens,
                                    )?,
                                );
                            }
                            "Action" => {
                                builder = builder.set_action(
                                    crate::protocol_serde::shape_action::de_action(tokens)?,
                                );
                            }
                            "FindingProviderFields" => {
                                builder = builder.set_finding_provider_fields(
                                    crate::protocol_serde::shape_finding_provider_fields::de_finding_provider_fields(tokens)?
                                );
                            }
                            "Sample" => {
                                builder = builder.set_sample(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
