// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_composite_filter(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CompositeFilter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.string_filters {
        let mut array_2 = object.key("StringFilters").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_ocsf_string_filter::ser_ocsf_string_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.date_filters {
        let mut array_6 = object.key("DateFilters").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_ocsf_date_filter::ser_ocsf_date_filter(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.boolean_filters {
        let mut array_10 = object.key("BooleanFilters").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_ocsf_boolean_filter::ser_ocsf_boolean_filter(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.number_filters {
        let mut array_14 = object.key("NumberFilters").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_ocsf_number_filter::ser_ocsf_number_filter(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.map_filters {
        let mut array_18 = object.key("MapFilters").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_ocsf_map_filter::ser_ocsf_map_filter(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.ip_filters {
        let mut array_22 = object.key("IpFilters").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_ocsf_ip_filter::ser_ocsf_ip_filter(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.nested_composite_filters {
        let mut array_26 = object.key("NestedCompositeFilters").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_composite_filter::ser_composite_filter(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.operator {
        object.key("Operator").string(var_29.as_str());
    }
    Ok(())
}

pub(crate) fn de_composite_filter<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::CompositeFilter>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CompositeFilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StringFilters" => {
                            builder =
                                builder.set_string_filters(crate::protocol_serde::shape_ocsf_string_filter_list::de_ocsf_string_filter_list(tokens)?);
                        }
                        "DateFilters" => {
                            builder = builder.set_date_filters(crate::protocol_serde::shape_ocsf_date_filter_list::de_ocsf_date_filter_list(tokens)?);
                        }
                        "BooleanFilters" => {
                            builder = builder.set_boolean_filters(
                                crate::protocol_serde::shape_ocsf_boolean_filter_list::de_ocsf_boolean_filter_list(tokens)?,
                            );
                        }
                        "NumberFilters" => {
                            builder =
                                builder.set_number_filters(crate::protocol_serde::shape_ocsf_number_filter_list::de_ocsf_number_filter_list(tokens)?);
                        }
                        "MapFilters" => {
                            builder = builder.set_map_filters(crate::protocol_serde::shape_ocsf_map_filter_list::de_ocsf_map_filter_list(tokens)?);
                        }
                        "IpFilters" => {
                            builder = builder.set_ip_filters(crate::protocol_serde::shape_ocsf_ip_filter_list::de_ocsf_ip_filter_list(tokens)?);
                        }
                        "NestedCompositeFilters" => {
                            builder = builder
                                .set_nested_composite_filters(crate::protocol_serde::shape_composite_filter_list::de_composite_filter_list(tokens)?);
                        }
                        "Operator" => {
                            builder = builder.set_operator(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AllowedOperators::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
