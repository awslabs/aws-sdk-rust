// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_backup_backup_plan_rule_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsBackupBackupPlanRuleDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.target_backup_vault {
        object.key("TargetBackupVault").string(var_1.as_str());
    }
    if let Some(var_2) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rule_name {
        object.key("RuleName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.rule_id {
        object.key("RuleId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.enable_continuous_backup {
        object.key("EnableContinuousBackup").boolean(*var_6);
    }
    if let Some(var_7) = &input.completion_window_minutes {
        object.key("CompletionWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.copy_actions {
        let mut array_9 = object.key("CopyActions").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_backup_backup_plan_rule_copy_actions_details::ser_aws_backup_backup_plan_rule_copy_actions_details(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.lifecycle {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Lifecycle").start_object();
        crate::protocol_serde::shape_aws_backup_backup_plan_lifecycle_details::ser_aws_backup_backup_plan_lifecycle_details(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_backup_backup_plan_rule_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsBackupBackupPlanRuleDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsBackupBackupPlanRuleDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TargetBackupVault" => {
                                builder = builder.set_target_backup_vault(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "StartWindowMinutes" => {
                                builder = builder.set_start_window_minutes(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i64::try_from)
                                        .transpose()?,
                                );
                            }
                            "ScheduleExpression" => {
                                builder = builder.set_schedule_expression(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "RuleName" => {
                                builder = builder.set_rule_name(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "RuleId" => {
                                builder = builder.set_rule_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "EnableContinuousBackup" => {
                                builder =
                                    builder.set_enable_continuous_backup(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "CompletionWindowMinutes" => {
                                builder = builder.set_completion_window_minutes(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i64::try_from)
                                        .transpose()?,
                                );
                            }
                            "CopyActions" => {
                                builder = builder.set_copy_actions(
                                    crate::protocol_serde::shape_aws_backup_backup_plan_rule_copy_actions_list::de_aws_backup_backup_plan_rule_copy_actions_list(tokens)?
                                );
                            }
                            "Lifecycle" => {
                                builder = builder.set_lifecycle(
                                    crate::protocol_serde::shape_aws_backup_backup_plan_lifecycle_details::de_aws_backup_backup_plan_lifecycle_details(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
