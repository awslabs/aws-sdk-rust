// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::batch_update_findings::BatchUpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_1) = &input.finding_identifiers {
        let mut array_2 = object.key("FindingIdentifiers").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aws_security_finding_identifier::ser_aws_security_finding_identifier(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.note {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Note").start_object();
        crate::protocol_serde::shape_note_update::ser_note_update(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.related_findings {
        let mut array_8 = object.key("RelatedFindings").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_related_finding::ser_related_finding(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.severity {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Severity").start_object();
        crate::protocol_serde::shape_severity_update::ser_severity_update(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.types {
        let mut array_14 = object.key("Types").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.user_defined_fields {
        #[allow(unused_mut)]
        let mut object_17 = object.key("UserDefinedFields").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.verification_state {
        object.key("VerificationState").string(var_20.as_str());
    }
    if let Some(var_21) = &input.workflow {
        #[allow(unused_mut)]
        let mut object_22 = object.key("Workflow").start_object();
        crate::protocol_serde::shape_workflow_update::ser_workflow_update(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
