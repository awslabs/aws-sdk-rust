// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_app_sync_graph_ql_api_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsAppSyncGraphQlApiDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.api_id {
        object.key("ApiId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.id {
        object.key("Id").string(var_2.as_str());
    }
    if let Some(var_3) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OpenIdConnectConfig").start_object();
        crate::protocol_serde::shape_aws_app_sync_graph_ql_api_open_id_connect_config_details::ser_aws_app_sync_graph_ql_api_open_id_connect_config_details(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("LambdaAuthorizerConfig").start_object();
        crate::protocol_serde::shape_aws_app_sync_graph_ql_api_lambda_authorizer_config_details::ser_aws_app_sync_graph_ql_api_lambda_authorizer_config_details(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.xray_enabled {
        object.key("XrayEnabled").boolean(*var_8);
    }
    if let Some(var_9) = &input.arn {
        object.key("Arn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("UserPoolConfig").start_object();
        crate::protocol_serde::shape_aws_app_sync_graph_ql_api_user_pool_config_details::ser_aws_app_sync_graph_ql_api_user_pool_config_details(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.authentication_type {
        object.key("AuthenticationType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("LogConfig").start_object();
        crate::protocol_serde::shape_aws_app_sync_graph_ql_api_log_config_details::ser_aws_app_sync_graph_ql_api_log_config_details(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.additional_authentication_providers {
        let mut array_16 = object.key("AdditionalAuthenticationProviders").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_aws_app_sync_graph_ql_api_additional_authentication_providers_details::ser_aws_app_sync_graph_ql_api_additional_authentication_providers_details(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.waf_web_acl_arn {
        object.key("WafWebAclArn").string(var_19.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_app_sync_graph_ql_api_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsAppSyncGraphQlApiDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsAppSyncGraphQlApiDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ApiId" => {
                            builder = builder.set_api_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OpenIdConnectConfig" => {
                            builder = builder.set_open_id_connect_config(
                                    crate::protocol_serde::shape_aws_app_sync_graph_ql_api_open_id_connect_config_details::de_aws_app_sync_graph_ql_api_open_id_connect_config_details(tokens)?
                                );
                        }
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LambdaAuthorizerConfig" => {
                            builder = builder.set_lambda_authorizer_config(
                                    crate::protocol_serde::shape_aws_app_sync_graph_ql_api_lambda_authorizer_config_details::de_aws_app_sync_graph_ql_api_lambda_authorizer_config_details(tokens)?
                                );
                        }
                        "XrayEnabled" => {
                            builder = builder.set_xray_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Arn" => {
                            builder = builder.set_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserPoolConfig" => {
                            builder = builder.set_user_pool_config(
                                    crate::protocol_serde::shape_aws_app_sync_graph_ql_api_user_pool_config_details::de_aws_app_sync_graph_ql_api_user_pool_config_details(tokens)?
                                );
                        }
                        "AuthenticationType" => {
                            builder = builder.set_authentication_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LogConfig" => {
                            builder = builder.set_log_config(
                                    crate::protocol_serde::shape_aws_app_sync_graph_ql_api_log_config_details::de_aws_app_sync_graph_ql_api_log_config_details(tokens)?
                                );
                        }
                        "AdditionalAuthenticationProviders" => {
                            builder = builder.set_additional_authentication_providers(
                                    crate::protocol_serde::shape_aws_app_sync_graph_ql_api_additional_authentication_providers_list::de_aws_app_sync_graph_ql_api_additional_authentication_providers_list(tokens)?
                                );
                        }
                        "WafWebAclArn" => {
                            builder = builder.set_waf_web_acl_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
