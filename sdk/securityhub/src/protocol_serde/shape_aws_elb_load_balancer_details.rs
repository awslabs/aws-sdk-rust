// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_elb_load_balancer_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsElbLoadBalancerDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.availability_zones {
        let mut array_2 = object.key("AvailabilityZones").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.backend_server_descriptions {
        let mut array_5 = object.key("BackendServerDescriptions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_aws_elb_load_balancer_backend_server_description::ser_aws_elb_load_balancer_backend_server_description(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.canonical_hosted_zone_name {
        object.key("CanonicalHostedZoneName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.canonical_hosted_zone_name_id {
        object.key("CanonicalHostedZoneNameID").string(var_9.as_str());
    }
    if let Some(var_10) = &input.created_time {
        object.key("CreatedTime").string(var_10.as_str());
    }
    if let Some(var_11) = &input.dns_name {
        object.key("DnsName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.health_check {
        #[allow(unused_mut)]
        let mut object_13 = object.key("HealthCheck").start_object();
        crate::protocol_serde::shape_aws_elb_load_balancer_health_check::ser_aws_elb_load_balancer_health_check(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.instances {
        let mut array_15 = object.key("Instances").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_aws_elb_load_balancer_instance::ser_aws_elb_load_balancer_instance(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.listener_descriptions {
        let mut array_19 = object.key("ListenerDescriptions").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_aws_elb_load_balancer_listener_description::ser_aws_elb_load_balancer_listener_description(
                    &mut object_21,
                    item_20,
                )?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.load_balancer_attributes {
        #[allow(unused_mut)]
        let mut object_23 = object.key("LoadBalancerAttributes").start_object();
        crate::protocol_serde::shape_aws_elb_load_balancer_attributes::ser_aws_elb_load_balancer_attributes(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_24.as_str());
    }
    if let Some(var_25) = &input.policies {
        #[allow(unused_mut)]
        let mut object_26 = object.key("Policies").start_object();
        crate::protocol_serde::shape_aws_elb_load_balancer_policies::ser_aws_elb_load_balancer_policies(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.scheme {
        object.key("Scheme").string(var_27.as_str());
    }
    if let Some(var_28) = &input.security_groups {
        let mut array_29 = object.key("SecurityGroups").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.source_security_group {
        #[allow(unused_mut)]
        let mut object_32 = object.key("SourceSecurityGroup").start_object();
        crate::protocol_serde::shape_aws_elb_load_balancer_source_security_group::ser_aws_elb_load_balancer_source_security_group(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    if let Some(var_33) = &input.subnets {
        let mut array_34 = object.key("Subnets").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.vpc_id {
        object.key("VpcId").string(var_36.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_elb_load_balancer_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsElbLoadBalancerDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsElbLoadBalancerDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AvailabilityZones" => {
                            builder = builder.set_availability_zones(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "BackendServerDescriptions" => {
                            builder = builder.set_backend_server_descriptions(
                                    crate::protocol_serde::shape_aws_elb_load_balancer_backend_server_descriptions::de_aws_elb_load_balancer_backend_server_descriptions(tokens)?
                                );
                        }
                        "CanonicalHostedZoneName" => {
                            builder = builder.set_canonical_hosted_zone_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CanonicalHostedZoneNameID" => {
                            builder = builder.set_canonical_hosted_zone_name_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CreatedTime" => {
                            builder = builder.set_created_time(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DnsName" => {
                            builder = builder.set_dns_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "HealthCheck" => {
                            builder = builder.set_health_check(
                                crate::protocol_serde::shape_aws_elb_load_balancer_health_check::de_aws_elb_load_balancer_health_check(tokens)?,
                            );
                        }
                        "Instances" => {
                            builder = builder.set_instances(
                                crate::protocol_serde::shape_aws_elb_load_balancer_instances::de_aws_elb_load_balancer_instances(tokens)?,
                            );
                        }
                        "ListenerDescriptions" => {
                            builder = builder.set_listener_descriptions(
                                    crate::protocol_serde::shape_aws_elb_load_balancer_listener_descriptions::de_aws_elb_load_balancer_listener_descriptions(tokens)?
                                );
                        }
                        "LoadBalancerAttributes" => {
                            builder = builder.set_load_balancer_attributes(
                                crate::protocol_serde::shape_aws_elb_load_balancer_attributes::de_aws_elb_load_balancer_attributes(tokens)?,
                            );
                        }
                        "LoadBalancerName" => {
                            builder = builder.set_load_balancer_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Policies" => {
                            builder = builder.set_policies(
                                crate::protocol_serde::shape_aws_elb_load_balancer_policies::de_aws_elb_load_balancer_policies(tokens)?,
                            );
                        }
                        "Scheme" => {
                            builder = builder.set_scheme(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecurityGroups" => {
                            builder = builder.set_security_groups(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "SourceSecurityGroup" => {
                            builder = builder.set_source_security_group(
                                    crate::protocol_serde::shape_aws_elb_load_balancer_source_security_group::de_aws_elb_load_balancer_source_security_group(tokens)?
                                );
                        }
                        "Subnets" => {
                            builder = builder.set_subnets(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "VpcId" => {
                            builder = builder.set_vpc_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
