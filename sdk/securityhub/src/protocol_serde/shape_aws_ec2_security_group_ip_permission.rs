// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_security_group_ip_permission(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2SecurityGroupIpPermission,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ip_protocol {
        object.key("IpProtocol").string(var_1.as_str());
    }
    if let Some(var_2) = &input.from_port {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.to_port {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.user_id_group_pairs {
        let mut array_5 = object.key("UserIdGroupPairs").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_aws_ec2_security_group_user_id_group_pair::ser_aws_ec2_security_group_user_id_group_pair(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.ip_ranges {
        let mut array_9 = object.key("IpRanges").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_ec2_security_group_ip_range::ser_aws_ec2_security_group_ip_range(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.ipv6_ranges {
        let mut array_13 = object.key("Ipv6Ranges").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_aws_ec2_security_group_ipv6_range::ser_aws_ec2_security_group_ipv6_range(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.prefix_list_ids {
        let mut array_17 = object.key("PrefixListIds").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_aws_ec2_security_group_prefix_list_id::ser_aws_ec2_security_group_prefix_list_id(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_security_group_ip_permission<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2SecurityGroupIpPermission>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2SecurityGroupIpPermissionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "IpProtocol" => {
                            builder = builder.set_ip_protocol(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FromPort" => {
                            builder = builder.set_from_port(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ToPort" => {
                            builder = builder.set_to_port(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "UserIdGroupPairs" => {
                            builder = builder.set_user_id_group_pairs(
                                    crate::protocol_serde::shape_aws_ec2_security_group_user_id_group_pair_list::de_aws_ec2_security_group_user_id_group_pair_list(tokens)?
                                );
                        }
                        "IpRanges" => {
                            builder = builder.set_ip_ranges(
                                crate::protocol_serde::shape_aws_ec2_security_group_ip_range_list::de_aws_ec2_security_group_ip_range_list(tokens)?,
                            );
                        }
                        "Ipv6Ranges" => {
                            builder = builder.set_ipv6_ranges(
                                crate::protocol_serde::shape_aws_ec2_security_group_ipv6_range_list::de_aws_ec2_security_group_ipv6_range_list(
                                    tokens,
                                )?,
                            );
                        }
                        "PrefixListIds" => {
                            builder = builder.set_prefix_list_ids(
                                    crate::protocol_serde::shape_aws_ec2_security_group_prefix_list_id_list::de_aws_ec2_security_group_prefix_list_id_list(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
