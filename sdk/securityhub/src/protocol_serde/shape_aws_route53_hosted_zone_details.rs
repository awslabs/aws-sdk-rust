// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_route53_hosted_zone_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRoute53HostedZoneDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.hosted_zone {
        #[allow(unused_mut)]
        let mut object_2 = object.key("HostedZone").start_object();
        crate::protocol_serde::shape_aws_route53_hosted_zone_object_details::ser_aws_route53_hosted_zone_object_details(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.vpcs {
        let mut array_4 = object.key("Vpcs").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_aws_route53_hosted_zone_vpc_details::ser_aws_route53_hosted_zone_vpc_details(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.name_servers {
        let mut array_8 = object.key("NameServers").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.query_logging_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("QueryLoggingConfig").start_object();
        crate::protocol_serde::shape_aws_route53_query_logging_config_details::ser_aws_route53_query_logging_config_details(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_route53_hosted_zone_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsRoute53HostedZoneDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRoute53HostedZoneDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "HostedZone" => {
                                builder = builder.set_hosted_zone(
                                    crate::protocol_serde::shape_aws_route53_hosted_zone_object_details::de_aws_route53_hosted_zone_object_details(
                                        tokens,
                                    )?,
                                );
                            }
                            "Vpcs" => {
                                builder = builder.set_vpcs(
                                    crate::protocol_serde::shape_aws_route53_hosted_zone_vpcs_list::de_aws_route53_hosted_zone_vpcs_list(tokens)?,
                                );
                            }
                            "NameServers" => {
                                builder = builder.set_name_servers(
                                    crate::protocol_serde::shape_aws_route53_hosted_zone_name_servers_list::de_aws_route53_hosted_zone_name_servers_list(tokens)?
                                );
                            }
                            "QueryLoggingConfig" => {
                                builder = builder.set_query_logging_config(
                                    crate::protocol_serde::shape_aws_route53_query_logging_config_details::de_aws_route53_query_logging_config_details(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
