// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_launch_template_data_network_interface_set_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.associate_carrier_ip_address {
        object
            .key("AssociateCarrierIpAddress")
            .boolean(input.associate_carrier_ip_address);
    }
    if input.associate_public_ip_address {
        object
            .key("AssociatePublicIpAddress")
            .boolean(input.associate_public_ip_address);
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_2) = &input.groups {
        let mut array_3 = object.key("Groups").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.interface_type {
        object.key("InterfaceType").string(var_5.as_str());
    }
    if input.ipv4_prefix_count != 0 {
        object.key("Ipv4PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ipv4_prefix_count).into()),
        );
    }
    if let Some(var_6) = &input.ipv4_prefixes {
        let mut array_7 = object.key("Ipv4Prefixes").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_details(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if input.ipv6_address_count != 0 {
        object.key("Ipv6AddressCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ipv6_address_count).into()),
        );
    }
    if let Some(var_10) = &input.ipv6_addresses {
        let mut array_11 = object.key("Ipv6Addresses").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_details(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if input.ipv6_prefix_count != 0 {
        object.key("Ipv6PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ipv6_prefix_count).into()),
        );
    }
    if let Some(var_14) = &input.ipv6_prefixes {
        let mut array_15 = object.key("Ipv6Prefixes").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_details(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if input.network_card_index != 0 {
        object.key("NetworkCardIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.network_card_index).into()),
        );
    }
    if let Some(var_18) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_19.as_str());
    }
    if let Some(var_20) = &input.private_ip_addresses {
        let mut array_21 = object.key("PrivateIpAddresses").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_details::ser_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_details(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if input.secondary_private_ip_address_count != 0 {
        object.key("SecondaryPrivateIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.secondary_private_ip_address_count).into()),
        );
    }
    if let Some(var_24) = &input.subnet_id {
        object.key("SubnetId").string(var_24.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_launch_template_data_network_interface_set_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AssociateCarrierIpAddress" => {
                                builder = builder.set_associate_carrier_ip_address(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "AssociatePublicIpAddress" => {
                                builder = builder.set_associate_public_ip_address(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "DeleteOnTermination" => {
                                builder = builder.set_delete_on_termination(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DeviceIndex" => {
                                builder = builder.set_device_index(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Groups" => {
                                builder = builder.set_groups(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "InterfaceType" => {
                                builder = builder.set_interface_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Ipv4PrefixCount" => {
                                builder = builder.set_ipv4_prefix_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Ipv4Prefixes" => {
                                builder = builder.set_ipv4_prefixes(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_list::de_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_list(tokens)?
                                );
                            }
                            "Ipv6AddressCount" => {
                                builder = builder.set_ipv6_address_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Ipv6Addresses" => {
                                builder = builder.set_ipv6_addresses(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_list::de_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_list(tokens)?
                                );
                            }
                            "Ipv6PrefixCount" => {
                                builder = builder.set_ipv6_prefix_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Ipv6Prefixes" => {
                                builder = builder.set_ipv6_prefixes(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_list::de_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_list(tokens)?
                                );
                            }
                            "NetworkCardIndex" => {
                                builder = builder.set_network_card_index(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "NetworkInterfaceId" => {
                                builder = builder.set_network_interface_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PrivateIpAddress" => {
                                builder = builder.set_private_ip_address(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PrivateIpAddresses" => {
                                builder = builder.set_private_ip_addresses(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_list::de_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_list(tokens)?
                                );
                            }
                            "SecondaryPrivateIpAddressCount" => {
                                builder = builder.set_secondary_private_ip_address_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "SubnetId" => {
                                builder = builder.set_subnet_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
