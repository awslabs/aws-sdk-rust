// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_launch_template_data_network_interface_set_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.associate_carrier_ip_address {
        object.key("AssociateCarrierIpAddress").boolean(*var_1);
    }
    if let Some(var_2) = &input.associate_public_ip_address {
        object.key("AssociatePublicIpAddress").boolean(*var_2);
    }
    if let Some(var_3) = &input.delete_on_termination {
        object.key("DeleteOnTermination").boolean(*var_3);
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.device_index {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.groups {
        let mut array_7 = object.key("Groups").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.interface_type {
        object.key("InterfaceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.ipv4_prefix_count {
        object.key("Ipv4PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.ipv4_prefixes {
        let mut array_12 = object.key("Ipv4Prefixes").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_details(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.ipv6_address_count {
        object.key("Ipv6AddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.ipv6_addresses {
        let mut array_17 = object.key("Ipv6Addresses").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_details(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.ipv6_prefix_count {
        object.key("Ipv6PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.ipv6_prefixes {
        let mut array_22 = object.key("Ipv6Prefixes").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_details::ser_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_details(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.network_card_index {
        object.key("NetworkCardIndex").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_26.as_str());
    }
    if let Some(var_27) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_27.as_str());
    }
    if let Some(var_28) = &input.private_ip_addresses {
        let mut array_29 = object.key("PrivateIpAddresses").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_details::ser_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_details(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.secondary_private_ip_address_count {
        object.key("SecondaryPrivateIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.subnet_id {
        object.key("SubnetId").string(var_33.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_launch_template_data_network_interface_set_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AssociateCarrierIpAddress" => {
                            builder =
                                builder.set_associate_carrier_ip_address(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "AssociatePublicIpAddress" => {
                            builder =
                                builder.set_associate_public_ip_address(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DeleteOnTermination" => {
                            builder = builder.set_delete_on_termination(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Description" => {
                            builder = builder.set_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeviceIndex" => {
                            builder = builder.set_device_index(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Groups" => {
                            builder = builder.set_groups(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "InterfaceType" => {
                            builder = builder.set_interface_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Ipv4PrefixCount" => {
                            builder = builder.set_ipv4_prefix_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Ipv4Prefixes" => {
                            builder = builder.set_ipv4_prefixes(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_list::de_aws_ec2_launch_template_data_network_interface_set_ipv4_prefixes_list(tokens)?
                                );
                        }
                        "Ipv6AddressCount" => {
                            builder = builder.set_ipv6_address_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Ipv6Addresses" => {
                            builder = builder.set_ipv6_addresses(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_list::de_aws_ec2_launch_template_data_network_interface_set_ipv6_addresses_list(tokens)?
                                );
                        }
                        "Ipv6PrefixCount" => {
                            builder = builder.set_ipv6_prefix_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Ipv6Prefixes" => {
                            builder = builder.set_ipv6_prefixes(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_list::de_aws_ec2_launch_template_data_network_interface_set_ipv6_prefixes_list(tokens)?
                                );
                        }
                        "NetworkCardIndex" => {
                            builder = builder.set_network_card_index(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "NetworkInterfaceId" => {
                            builder = builder.set_network_interface_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PrivateIpAddress" => {
                            builder = builder.set_private_ip_address(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PrivateIpAddresses" => {
                            builder = builder.set_private_ip_addresses(
                                    crate::protocol_serde::shape_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_list::de_aws_ec2_launch_template_data_network_interface_set_private_ip_addresses_list(tokens)?
                                );
                        }
                        "SecondaryPrivateIpAddressCount" => {
                            builder = builder.set_secondary_private_ip_address_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SubnetId" => {
                            builder = builder.set_subnet_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
