// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_lambda_function_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsLambdaFunctionDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.code {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Code").start_object();
        crate::protocol_serde::shape_aws_lambda_function_code::ser_aws_lambda_function_code(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.code_sha256 {
        object.key("CodeSha256").string(var_3.as_str());
    }
    if let Some(var_4) = &input.dead_letter_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DeadLetterConfig").start_object();
        crate::protocol_serde::shape_aws_lambda_function_dead_letter_config::ser_aws_lambda_function_dead_letter_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.environment {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Environment").start_object();
        crate::protocol_serde::shape_aws_lambda_function_environment::ser_aws_lambda_function_environment(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.function_name {
        object.key("FunctionName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.handler {
        object.key("Handler").string(var_9.as_str());
    }
    if let Some(var_10) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.last_modified {
        object.key("LastModified").string(var_11.as_str());
    }
    if let Some(var_12) = &input.layers {
        let mut array_13 = object.key("Layers").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_aws_lambda_function_layer::ser_aws_lambda_function_layer(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.master_arn {
        object.key("MasterArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.revision_id {
        object.key("RevisionId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.role {
        object.key("Role").string(var_19.as_str());
    }
    if let Some(var_20) = &input.runtime {
        object.key("Runtime").string(var_20.as_str());
    }
    if let Some(var_21) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.tracing_config {
        #[allow(unused_mut)]
        let mut object_23 = object.key("TracingConfig").start_object();
        crate::protocol_serde::shape_aws_lambda_function_tracing_config::ser_aws_lambda_function_tracing_config(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_25 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_aws_lambda_function_vpc_config::ser_aws_lambda_function_vpc_config(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.version {
        object.key("Version").string(var_26.as_str());
    }
    if let Some(var_27) = &input.architectures {
        let mut array_28 = object.key("Architectures").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.package_type {
        object.key("PackageType").string(var_30.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_lambda_function_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsLambdaFunctionDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsLambdaFunctionDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Code" => {
                            builder = builder.set_code(crate::protocol_serde::shape_aws_lambda_function_code::de_aws_lambda_function_code(
                                tokens,
                            )?);
                        }
                        "CodeSha256" => {
                            builder = builder.set_code_sha256(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeadLetterConfig" => {
                            builder = builder.set_dead_letter_config(
                                crate::protocol_serde::shape_aws_lambda_function_dead_letter_config::de_aws_lambda_function_dead_letter_config(
                                    tokens,
                                )?,
                            );
                        }
                        "Environment" => {
                            builder = builder.set_environment(
                                crate::protocol_serde::shape_aws_lambda_function_environment::de_aws_lambda_function_environment(tokens)?,
                            );
                        }
                        "FunctionName" => {
                            builder = builder.set_function_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Handler" => {
                            builder = builder.set_handler(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KmsKeyArn" => {
                            builder = builder.set_kms_key_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LastModified" => {
                            builder = builder.set_last_modified(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Layers" => {
                            builder = builder
                                .set_layers(crate::protocol_serde::shape_aws_lambda_function_layer_list::de_aws_lambda_function_layer_list(tokens)?);
                        }
                        "MasterArn" => {
                            builder = builder.set_master_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MemorySize" => {
                            builder = builder.set_memory_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RevisionId" => {
                            builder = builder.set_revision_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Role" => {
                            builder = builder.set_role(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Runtime" => {
                            builder = builder.set_runtime(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Timeout" => {
                            builder = builder.set_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "TracingConfig" => {
                            builder = builder.set_tracing_config(
                                crate::protocol_serde::shape_aws_lambda_function_tracing_config::de_aws_lambda_function_tracing_config(tokens)?,
                            );
                        }
                        "VpcConfig" => {
                            builder = builder.set_vpc_config(
                                crate::protocol_serde::shape_aws_lambda_function_vpc_config::de_aws_lambda_function_vpc_config(tokens)?,
                            );
                        }
                        "Version" => {
                            builder = builder.set_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Architectures" => {
                            builder =
                                builder.set_architectures(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "PackageType" => {
                            builder = builder.set_package_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
