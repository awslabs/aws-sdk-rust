// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_vulnerability(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Vulnerability,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.vulnerable_packages {
        let mut array_3 = object.key("VulnerablePackages").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_software_package::ser_software_package(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.cvss {
        let mut array_7 = object.key("Cvss").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_cvss::ser_cvss(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.related_vulnerabilities {
        let mut array_11 = object.key("RelatedVulnerabilities").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.vendor {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Vendor").start_object();
        crate::protocol_serde::shape_vulnerability_vendor::ser_vulnerability_vendor(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.reference_urls {
        let mut array_16 = object.key("ReferenceUrls").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.fix_available {
        object.key("FixAvailable").string(var_18.as_str());
    }
    if let Some(var_19) = &input.epss_score {
        object.key("EpssScore").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.exploit_available {
        object.key("ExploitAvailable").string(var_20.as_str());
    }
    if let Some(var_21) = &input.code_vulnerabilities {
        let mut array_22 = object.key("CodeVulnerabilities").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_vulnerability_code_vulnerabilities::ser_vulnerability_code_vulnerabilities(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub(crate) fn de_vulnerability<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Vulnerability>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VulnerabilityBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VulnerablePackages" => {
                            builder = builder
                                .set_vulnerable_packages(crate::protocol_serde::shape_software_package_list::de_software_package_list(tokens)?);
                        }
                        "Cvss" => {
                            builder = builder.set_cvss(crate::protocol_serde::shape_cvss_list::de_cvss_list(tokens)?);
                        }
                        "RelatedVulnerabilities" => {
                            builder = builder.set_related_vulnerabilities(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "Vendor" => {
                            builder = builder.set_vendor(crate::protocol_serde::shape_vulnerability_vendor::de_vulnerability_vendor(tokens)?);
                        }
                        "ReferenceUrls" => {
                            builder = builder.set_reference_urls(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "FixAvailable" => {
                            builder = builder.set_fix_available(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VulnerabilityFixAvailable::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "EpssScore" => {
                            builder = builder.set_epss_score(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "ExploitAvailable" => {
                            builder = builder.set_exploit_available(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VulnerabilityExploitAvailable::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CodeVulnerabilities" => {
                            builder = builder.set_code_vulnerabilities(
                                crate::protocol_serde::shape_vulnerability_code_vulnerabilities_list::de_vulnerability_code_vulnerabilities_list(
                                    tokens,
                                )?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::vulnerability_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
