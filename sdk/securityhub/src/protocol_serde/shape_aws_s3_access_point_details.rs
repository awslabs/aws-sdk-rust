// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_s3_access_point_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsS3AccessPointDetails,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_point_arn {
        object.key("AccessPointArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.alias {
        object.key("Alias").string(var_2.as_str());
    }
    if let Some(var_3) = &input.bucket {
        object.key("Bucket").string(var_3.as_str());
    }
    if let Some(var_4) = &input.bucket_account_id {
        object.key("BucketAccountId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.network_origin {
        object.key("NetworkOrigin").string(var_6.as_str());
    }
    if let Some(var_7) = &input.public_access_block_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_account_public_access_block_details::ser_aws_s3_account_public_access_block_details(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_aws_s3_access_point_vpc_configuration_details::ser_aws_s3_access_point_vpc_configuration_details(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_s3_access_point_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AwsS3AccessPointDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsS3AccessPointDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AccessPointArn" => {
                            builder = builder.set_access_point_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Alias" => {
                            builder = builder.set_alias(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Bucket" => {
                            builder = builder.set_bucket(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BucketAccountId" => {
                            builder = builder.set_bucket_account_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NetworkOrigin" => {
                            builder = builder.set_network_origin(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PublicAccessBlockConfiguration" => {
                            builder = builder.set_public_access_block_configuration(
                                    crate::protocol_serde::shape_aws_s3_account_public_access_block_details::de_aws_s3_account_public_access_block_details(tokens)?
                                );
                        }
                        "VpcConfiguration" => {
                            builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_aws_s3_access_point_vpc_configuration_details::de_aws_s3_access_point_vpc_configuration_details(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
