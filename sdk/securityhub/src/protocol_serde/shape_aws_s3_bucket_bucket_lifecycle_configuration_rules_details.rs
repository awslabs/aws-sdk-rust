// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.abort_incomplete_multipart_upload {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details::ser_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.expiration_date {
        object.key("ExpirationDate").string(var_3.as_str());
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_4) = &input.filter {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Filter").start_object();
        crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details::ser_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.id {
        object.key("ID").string(var_6.as_str());
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_7) = &input.noncurrent_version_transitions {
        let mut array_8 = object.key("NoncurrentVersionTransitions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details::ser_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.prefix {
        object.key("Prefix").string(var_11.as_str());
    }
    if let Some(var_12) = &input.status {
        object.key("Status").string(var_12.as_str());
    }
    if let Some(var_13) = &input.transitions {
        let mut array_14 = object.key("Transitions").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details::ser_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_s3_bucket_bucket_lifecycle_configuration_rules_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsS3BucketBucketLifecycleConfigurationRulesDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsS3BucketBucketLifecycleConfigurationRulesDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AbortIncompleteMultipartUpload" => {
                                builder = builder.set_abort_incomplete_multipart_upload(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details::de_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(tokens)?
                                );
                            }
                            "ExpirationDate" => {
                                builder = builder.set_expiration_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpirationInDays" => {
                                builder = builder.set_expiration_in_days(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ExpiredObjectDeleteMarker" => {
                                builder = builder.set_expired_object_delete_marker(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Filter" => {
                                builder = builder.set_filter(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details::de_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(tokens)?
                                );
                            }
                            "ID" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NoncurrentVersionExpirationInDays" => {
                                builder = builder.set_noncurrent_version_expiration_in_days(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "NoncurrentVersionTransitions" => {
                                builder = builder.set_noncurrent_version_transitions(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_list::de_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_list(tokens)?
                                );
                            }
                            "Prefix" => {
                                builder = builder.set_prefix(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Transitions" => {
                                builder = builder.set_transitions(
                                    crate::protocol_serde::shape_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_list::de_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
