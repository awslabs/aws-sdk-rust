// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_certificate_manager_certificate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsCertificateManagerCertificateDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.created_at {
        object.key("CreatedAt").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain_name {
        object.key("DomainName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.domain_validation_options {
        let mut array_5 = object.key("DomainValidationOptions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_aws_certificate_manager_certificate_domain_validation_option::ser_aws_certificate_manager_certificate_domain_validation_option(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.extended_key_usages {
        let mut array_9 = object.key("ExtendedKeyUsages").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_aws_certificate_manager_certificate_extended_key_usage::ser_aws_certificate_manager_certificate_extended_key_usage(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.failure_reason {
        object.key("FailureReason").string(var_12.as_str());
    }
    if let Some(var_13) = &input.imported_at {
        object.key("ImportedAt").string(var_13.as_str());
    }
    if let Some(var_14) = &input.in_use_by {
        let mut array_15 = object.key("InUseBy").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.issued_at {
        object.key("IssuedAt").string(var_17.as_str());
    }
    if let Some(var_18) = &input.issuer {
        object.key("Issuer").string(var_18.as_str());
    }
    if let Some(var_19) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_19.as_str());
    }
    if let Some(var_20) = &input.key_usages {
        let mut array_21 = object.key("KeyUsages").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_aws_certificate_manager_certificate_key_usage::ser_aws_certificate_manager_certificate_key_usage(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.not_after {
        object.key("NotAfter").string(var_24.as_str());
    }
    if let Some(var_25) = &input.not_before {
        object.key("NotBefore").string(var_25.as_str());
    }
    if let Some(var_26) = &input.options {
        #[allow(unused_mut)]
        let mut object_27 = object.key("Options").start_object();
        crate::protocol_serde::shape_aws_certificate_manager_certificate_options::ser_aws_certificate_manager_certificate_options(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_28.as_str());
    }
    if let Some(var_29) = &input.renewal_summary {
        #[allow(unused_mut)]
        let mut object_30 = object.key("RenewalSummary").start_object();
        crate::protocol_serde::shape_aws_certificate_manager_certificate_renewal_summary::ser_aws_certificate_manager_certificate_renewal_summary(&mut object_30, var_29)?;
        object_30.finish();
    }
    if let Some(var_31) = &input.serial {
        object.key("Serial").string(var_31.as_str());
    }
    if let Some(var_32) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_32.as_str());
    }
    if let Some(var_33) = &input.status {
        object.key("Status").string(var_33.as_str());
    }
    if let Some(var_34) = &input.subject {
        object.key("Subject").string(var_34.as_str());
    }
    if let Some(var_35) = &input.subject_alternative_names {
        let mut array_36 = object.key("SubjectAlternativeNames").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.r#type {
        object.key("Type").string(var_38.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_certificate_manager_certificate_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsCertificateManagerCertificateDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::AwsCertificateManagerCertificateDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "CertificateAuthorityArn" => {
                                builder = builder.set_certificate_authority_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreatedAt" => {
                                builder = builder.set_created_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DomainName" => {
                                builder = builder.set_domain_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DomainValidationOptions" => {
                                builder = builder.set_domain_validation_options(
                                    crate::protocol_serde::shape_aws_certificate_manager_certificate_domain_validation_options::de_aws_certificate_manager_certificate_domain_validation_options(tokens)?
                                );
                            }
                            "ExtendedKeyUsages" => {
                                builder = builder.set_extended_key_usages(
                                    crate::protocol_serde::shape_aws_certificate_manager_certificate_extended_key_usages::de_aws_certificate_manager_certificate_extended_key_usages(tokens)?
                                );
                            }
                            "FailureReason" => {
                                builder = builder.set_failure_reason(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ImportedAt" => {
                                builder = builder.set_imported_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InUseBy" => {
                                builder = builder.set_in_use_by(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "IssuedAt" => {
                                builder = builder.set_issued_at(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Issuer" => {
                                builder = builder.set_issuer(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KeyAlgorithm" => {
                                builder = builder.set_key_algorithm(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KeyUsages" => {
                                builder = builder.set_key_usages(
                                    crate::protocol_serde::shape_aws_certificate_manager_certificate_key_usages::de_aws_certificate_manager_certificate_key_usages(tokens)?
                                );
                            }
                            "NotAfter" => {
                                builder = builder.set_not_after(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NotBefore" => {
                                builder = builder.set_not_before(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Options" => {
                                builder = builder.set_options(
                                    crate::protocol_serde::shape_aws_certificate_manager_certificate_options::de_aws_certificate_manager_certificate_options(tokens)?
                                );
                            }
                            "RenewalEligibility" => {
                                builder = builder.set_renewal_eligibility(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RenewalSummary" => {
                                builder = builder.set_renewal_summary(
                                    crate::protocol_serde::shape_aws_certificate_manager_certificate_renewal_summary::de_aws_certificate_manager_certificate_renewal_summary(tokens)?
                                );
                            }
                            "Serial" => {
                                builder = builder.set_serial(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SignatureAlgorithm" => {
                                builder = builder.set_signature_algorithm(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Subject" => {
                                builder = builder.set_subject(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SubjectAlternativeNames" => {
                                builder = builder.set_subject_alternative_names(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
