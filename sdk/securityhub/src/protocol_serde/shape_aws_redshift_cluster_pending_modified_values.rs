// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_redshift_cluster_pending_modified_values(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRedshiftClusterPendingModifiedValues,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.automated_snapshot_retention_period {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.cluster_type {
        object.key("ClusterType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.cluster_version {
        object.key("ClusterVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption_type {
        object.key("EncryptionType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.enhanced_vpc_routing {
        object.key("EnhancedVpcRouting").boolean(*var_6);
    }
    if let Some(var_7) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_8.as_str());
    }
    if let Some(var_9) = &input.node_type {
        object.key("NodeType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.number_of_nodes {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_11);
    }
    Ok(())
}

pub(crate) fn de_aws_redshift_cluster_pending_modified_values<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsRedshiftClusterPendingModifiedValues>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRedshiftClusterPendingModifiedValuesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AutomatedSnapshotRetentionPeriod" => {
                            builder = builder.set_automated_snapshot_retention_period(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ClusterIdentifier" => {
                            builder = builder.set_cluster_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ClusterType" => {
                            builder = builder.set_cluster_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ClusterVersion" => {
                            builder = builder.set_cluster_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EncryptionType" => {
                            builder = builder.set_encryption_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EnhancedVpcRouting" => {
                            builder = builder.set_enhanced_vpc_routing(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "MaintenanceTrackName" => {
                            builder = builder.set_maintenance_track_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MasterUserPassword" => {
                            builder = builder.set_master_user_password(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NodeType" => {
                            builder = builder.set_node_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NumberOfNodes" => {
                            builder = builder.set_number_of_nodes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PubliclyAccessible" => {
                            builder = builder.set_publicly_accessible(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
