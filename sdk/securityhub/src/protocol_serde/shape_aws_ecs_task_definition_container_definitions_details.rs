// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ecs_task_definition_container_definitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.command {
        let mut array_2 = object.key("Command").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_4) = &input.depends_on {
        let mut array_5 = object.key("DependsOn").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_depends_on_details::ser_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_8) = &input.dns_search_domains {
        let mut array_9 = object.key("DnsSearchDomains").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.dns_servers {
        let mut array_12 = object.key("DnsServers").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.docker_labels {
        #[allow(unused_mut)]
        let mut object_15 = object.key("DockerLabels").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.docker_security_options {
        let mut array_19 = object.key("DockerSecurityOptions").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.entry_point {
        let mut array_22 = object.key("EntryPoint").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.environment {
        let mut array_25 = object.key("Environment").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_details::ser_aws_ecs_task_definition_container_definitions_environment_details(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.environment_files {
        let mut array_29 = object.key("EnvironmentFiles").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_files_details::ser_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_32) = &input.extra_hosts {
        let mut array_33 = object.key("ExtraHosts").start_array();
        for item_34 in var_32 {
            {
                #[allow(unused_mut)]
                let mut object_35 = array_33.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_extra_hosts_details::ser_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.firelens_configuration {
        #[allow(unused_mut)]
        let mut object_37 = object.key("FirelensConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_firelens_configuration_details::ser_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.health_check {
        #[allow(unused_mut)]
        let mut object_39 = object.key("HealthCheck").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_health_check_details::ser_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_39, var_38)?;
        object_39.finish();
    }
    if let Some(var_40) = &input.hostname {
        object.key("Hostname").string(var_40.as_str());
    }
    if let Some(var_41) = &input.image {
        object.key("Image").string(var_41.as_str());
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_42) = &input.links {
        let mut array_43 = object.key("Links").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.linux_parameters {
        #[allow(unused_mut)]
        let mut object_46 = object.key("LinuxParameters").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_linux_parameters_details::ser_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_48 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_log_configuration_details::ser_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_48, var_47)?;
        object_48.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_49) = &input.mount_points {
        let mut array_50 = object.key("MountPoints").start_array();
        for item_51 in var_49 {
            {
                #[allow(unused_mut)]
                let mut object_52 = array_50.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_mount_points_details::ser_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.name {
        object.key("Name").string(var_53.as_str());
    }
    if let Some(var_54) = &input.port_mappings {
        let mut array_55 = object.key("PortMappings").start_array();
        for item_56 in var_54 {
            {
                #[allow(unused_mut)]
                let mut object_57 = array_55.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_port_mappings_details::ser_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_57, item_56)?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_58) = &input.repository_credentials {
        #[allow(unused_mut)]
        let mut object_59 = object.key("RepositoryCredentials").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_repository_credentials_details::ser_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_59, var_58)?;
        object_59.finish();
    }
    if let Some(var_60) = &input.resource_requirements {
        let mut array_61 = object.key("ResourceRequirements").start_array();
        for item_62 in var_60 {
            {
                #[allow(unused_mut)]
                let mut object_63 = array_61.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_resource_requirements_details::ser_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_63, item_62)?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.secrets {
        let mut array_65 = object.key("Secrets").start_array();
        for item_66 in var_64 {
            {
                #[allow(unused_mut)]
                let mut object_67 = array_65.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_secrets_details::ser_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_67, item_66)?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_68) = &input.system_controls {
        let mut array_69 = object.key("SystemControls").start_array();
        for item_70 in var_68 {
            {
                #[allow(unused_mut)]
                let mut object_71 = array_69.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_system_controls_details::ser_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_71, item_70)?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.ulimits {
        let mut array_73 = object.key("Ulimits").start_array();
        for item_74 in var_72 {
            {
                #[allow(unused_mut)]
                let mut object_75 = array_73.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_ulimits_details::ser_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_75, item_74)?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    if let Some(var_76) = &input.user {
        object.key("User").string(var_76.as_str());
    }
    if let Some(var_77) = &input.volumes_from {
        let mut array_78 = object.key("VolumesFrom").start_array();
        for item_79 in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_80 = array_78.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_volumes_from_details::ser_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.working_directory {
        object.key("WorkingDirectory").string(var_81.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ecs_task_definition_container_definitions_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsEcsTaskDefinitionContainerDefinitionsDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Command" => {
                                builder = builder.set_command(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Cpu" => {
                                builder = builder.set_cpu(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DependsOn" => {
                                builder = builder.set_depends_on(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_depends_on_list::de_aws_ecs_task_definition_container_definitions_depends_on_list(tokens)?
                                );
                            }
                            "DisableNetworking" => {
                                builder = builder.set_disable_networking(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "DnsSearchDomains" => {
                                builder = builder.set_dns_search_domains(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "DnsServers" => {
                                builder = builder.set_dns_servers(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "DockerLabels" => {
                                builder = builder.set_docker_labels(
                                    crate::protocol_serde::shape_field_map::de_field_map(tokens)?,
                                );
                            }
                            "DockerSecurityOptions" => {
                                builder = builder.set_docker_security_options(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "EntryPoint" => {
                                builder = builder.set_entry_point(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "Environment" => {
                                builder = builder.set_environment(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_list::de_aws_ecs_task_definition_container_definitions_environment_list(tokens)?
                                );
                            }
                            "EnvironmentFiles" => {
                                builder = builder.set_environment_files(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_files_list::de_aws_ecs_task_definition_container_definitions_environment_files_list(tokens)?
                                );
                            }
                            "Essential" => {
                                builder = builder.set_essential(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ExtraHosts" => {
                                builder = builder.set_extra_hosts(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_extra_hosts_list::de_aws_ecs_task_definition_container_definitions_extra_hosts_list(tokens)?
                                );
                            }
                            "FirelensConfiguration" => {
                                builder = builder.set_firelens_configuration(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_firelens_configuration_details::de_aws_ecs_task_definition_container_definitions_firelens_configuration_details(tokens)?
                                );
                            }
                            "HealthCheck" => {
                                builder = builder.set_health_check(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_health_check_details::de_aws_ecs_task_definition_container_definitions_health_check_details(tokens)?
                                );
                            }
                            "Hostname" => {
                                builder = builder.set_hostname(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Image" => {
                                builder = builder.set_image(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Interactive" => {
                                builder = builder.set_interactive(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Links" => {
                                builder = builder.set_links(
                                    crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?
                                );
                            }
                            "LinuxParameters" => {
                                builder = builder.set_linux_parameters(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_linux_parameters_details::de_aws_ecs_task_definition_container_definitions_linux_parameters_details(tokens)?
                                );
                            }
                            "LogConfiguration" => {
                                builder = builder.set_log_configuration(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_log_configuration_details::de_aws_ecs_task_definition_container_definitions_log_configuration_details(tokens)?
                                );
                            }
                            "Memory" => {
                                builder = builder.set_memory(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MemoryReservation" => {
                                builder = builder.set_memory_reservation(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MountPoints" => {
                                builder = builder.set_mount_points(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_mount_points_list::de_aws_ecs_task_definition_container_definitions_mount_points_list(tokens)?
                                );
                            }
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PortMappings" => {
                                builder = builder.set_port_mappings(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_port_mappings_list::de_aws_ecs_task_definition_container_definitions_port_mappings_list(tokens)?
                                );
                            }
                            "Privileged" => {
                                builder = builder.set_privileged(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "PseudoTerminal" => {
                                builder = builder.set_pseudo_terminal(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ReadonlyRootFilesystem" => {
                                builder = builder.set_readonly_root_filesystem(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "RepositoryCredentials" => {
                                builder = builder.set_repository_credentials(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_repository_credentials_details::de_aws_ecs_task_definition_container_definitions_repository_credentials_details(tokens)?
                                );
                            }
                            "ResourceRequirements" => {
                                builder = builder.set_resource_requirements(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_resource_requirements_list::de_aws_ecs_task_definition_container_definitions_resource_requirements_list(tokens)?
                                );
                            }
                            "Secrets" => {
                                builder = builder.set_secrets(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_secrets_list::de_aws_ecs_task_definition_container_definitions_secrets_list(tokens)?
                                );
                            }
                            "StartTimeout" => {
                                builder = builder.set_start_timeout(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "StopTimeout" => {
                                builder = builder.set_stop_timeout(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "SystemControls" => {
                                builder = builder.set_system_controls(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_system_controls_list::de_aws_ecs_task_definition_container_definitions_system_controls_list(tokens)?
                                );
                            }
                            "Ulimits" => {
                                builder = builder.set_ulimits(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_ulimits_list::de_aws_ecs_task_definition_container_definitions_ulimits_list(tokens)?
                                );
                            }
                            "User" => {
                                builder = builder.set_user(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VolumesFrom" => {
                                builder = builder.set_volumes_from(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_volumes_from_list::de_aws_ecs_task_definition_container_definitions_volumes_from_list(tokens)?
                                );
                            }
                            "WorkingDirectory" => {
                                builder = builder.set_working_directory(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
