// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ecs_task_definition_container_definitions_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.command {
        let mut array_2 = object.key("Command").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.cpu {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.depends_on {
        let mut array_6 = object.key("DependsOn").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_depends_on_details::ser_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.disable_networking {
        object.key("DisableNetworking").boolean(*var_9);
    }
    if let Some(var_10) = &input.dns_search_domains {
        let mut array_11 = object.key("DnsSearchDomains").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.dns_servers {
        let mut array_14 = object.key("DnsServers").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.docker_labels {
        #[allow(unused_mut)]
        let mut object_17 = object.key("DockerLabels").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.docker_security_options {
        let mut array_21 = object.key("DockerSecurityOptions").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.entry_point {
        let mut array_24 = object.key("EntryPoint").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.environment {
        let mut array_27 = object.key("Environment").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_details::ser_aws_ecs_task_definition_container_definitions_environment_details(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.environment_files {
        let mut array_31 = object.key("EnvironmentFiles").start_array();
        for item_32 in var_30 {
            {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_files_details::ser_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_33, item_32)?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.essential {
        object.key("Essential").boolean(*var_34);
    }
    if let Some(var_35) = &input.extra_hosts {
        let mut array_36 = object.key("ExtraHosts").start_array();
        for item_37 in var_35 {
            {
                #[allow(unused_mut)]
                let mut object_38 = array_36.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_extra_hosts_details::ser_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_38, item_37)?;
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.firelens_configuration {
        #[allow(unused_mut)]
        let mut object_40 = object.key("FirelensConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_firelens_configuration_details::ser_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.health_check {
        #[allow(unused_mut)]
        let mut object_42 = object.key("HealthCheck").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_health_check_details::ser_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.hostname {
        object.key("Hostname").string(var_43.as_str());
    }
    if let Some(var_44) = &input.image {
        object.key("Image").string(var_44.as_str());
    }
    if let Some(var_45) = &input.interactive {
        object.key("Interactive").boolean(*var_45);
    }
    if let Some(var_46) = &input.links {
        let mut array_47 = object.key("Links").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.linux_parameters {
        #[allow(unused_mut)]
        let mut object_50 = object.key("LinuxParameters").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_linux_parameters_details::ser_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_50, var_49)?;
        object_50.finish();
    }
    if let Some(var_51) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_52 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_log_configuration_details::ser_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_52, var_51)?;
        object_52.finish();
    }
    if let Some(var_53) = &input.memory {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_53).into()),
        );
    }
    if let Some(var_54) = &input.memory_reservation {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_54).into()),
        );
    }
    if let Some(var_55) = &input.mount_points {
        let mut array_56 = object.key("MountPoints").start_array();
        for item_57 in var_55 {
            {
                #[allow(unused_mut)]
                let mut object_58 = array_56.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_mount_points_details::ser_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.name {
        object.key("Name").string(var_59.as_str());
    }
    if let Some(var_60) = &input.port_mappings {
        let mut array_61 = object.key("PortMappings").start_array();
        for item_62 in var_60 {
            {
                #[allow(unused_mut)]
                let mut object_63 = array_61.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_port_mappings_details::ser_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_63, item_62)?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.privileged {
        object.key("Privileged").boolean(*var_64);
    }
    if let Some(var_65) = &input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(*var_65);
    }
    if let Some(var_66) = &input.readonly_root_filesystem {
        object.key("ReadonlyRootFilesystem").boolean(*var_66);
    }
    if let Some(var_67) = &input.repository_credentials {
        #[allow(unused_mut)]
        let mut object_68 = object.key("RepositoryCredentials").start_object();
        crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_repository_credentials_details::ser_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.resource_requirements {
        let mut array_70 = object.key("ResourceRequirements").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_resource_requirements_details::ser_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.secrets {
        let mut array_74 = object.key("Secrets").start_array();
        for item_75 in var_73 {
            {
                #[allow(unused_mut)]
                let mut object_76 = array_74.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_secrets_details::ser_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_76, item_75)?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.start_timeout {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.stop_timeout {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    if let Some(var_79) = &input.system_controls {
        let mut array_80 = object.key("SystemControls").start_array();
        for item_81 in var_79 {
            {
                #[allow(unused_mut)]
                let mut object_82 = array_80.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_system_controls_details::ser_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_82, item_81)?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.ulimits {
        let mut array_84 = object.key("Ulimits").start_array();
        for item_85 in var_83 {
            {
                #[allow(unused_mut)]
                let mut object_86 = array_84.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_ulimits_details::ser_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_86, item_85)?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.user {
        object.key("User").string(var_87.as_str());
    }
    if let Some(var_88) = &input.volumes_from {
        let mut array_89 = object.key("VolumesFrom").start_array();
        for item_90 in var_88 {
            {
                #[allow(unused_mut)]
                let mut object_91 = array_89.value().start_object();
                crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_volumes_from_details::ser_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_91, item_90)?;
                object_91.finish();
            }
        }
        array_89.finish();
    }
    if let Some(var_92) = &input.working_directory {
        object.key("WorkingDirectory").string(var_92.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_ecs_task_definition_container_definitions_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEcsTaskDefinitionContainerDefinitionsDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEcsTaskDefinitionContainerDefinitionsDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Command" => {
                            builder = builder.set_command(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "Cpu" => {
                            builder = builder.set_cpu(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "DependsOn" => {
                            builder = builder.set_depends_on(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_depends_on_list::de_aws_ecs_task_definition_container_definitions_depends_on_list(tokens)?
                                );
                        }
                        "DisableNetworking" => {
                            builder = builder.set_disable_networking(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DnsSearchDomains" => {
                            builder =
                                builder.set_dns_search_domains(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "DnsServers" => {
                            builder = builder.set_dns_servers(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "DockerLabels" => {
                            builder = builder.set_docker_labels(crate::protocol_serde::shape_field_map::de_field_map(tokens)?);
                        }
                        "DockerSecurityOptions" => {
                            builder = builder
                                .set_docker_security_options(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "EntryPoint" => {
                            builder = builder.set_entry_point(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "Environment" => {
                            builder = builder.set_environment(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_list::de_aws_ecs_task_definition_container_definitions_environment_list(tokens)?
                                );
                        }
                        "EnvironmentFiles" => {
                            builder = builder.set_environment_files(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_environment_files_list::de_aws_ecs_task_definition_container_definitions_environment_files_list(tokens)?
                                );
                        }
                        "Essential" => {
                            builder = builder.set_essential(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ExtraHosts" => {
                            builder = builder.set_extra_hosts(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_extra_hosts_list::de_aws_ecs_task_definition_container_definitions_extra_hosts_list(tokens)?
                                );
                        }
                        "FirelensConfiguration" => {
                            builder = builder.set_firelens_configuration(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_firelens_configuration_details::de_aws_ecs_task_definition_container_definitions_firelens_configuration_details(tokens)?
                                );
                        }
                        "HealthCheck" => {
                            builder = builder.set_health_check(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_health_check_details::de_aws_ecs_task_definition_container_definitions_health_check_details(tokens)?
                                );
                        }
                        "Hostname" => {
                            builder = builder.set_hostname(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Image" => {
                            builder = builder.set_image(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Interactive" => {
                            builder = builder.set_interactive(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Links" => {
                            builder = builder.set_links(crate::protocol_serde::shape_non_empty_string_list::de_non_empty_string_list(tokens)?);
                        }
                        "LinuxParameters" => {
                            builder = builder.set_linux_parameters(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_linux_parameters_details::de_aws_ecs_task_definition_container_definitions_linux_parameters_details(tokens)?
                                );
                        }
                        "LogConfiguration" => {
                            builder = builder.set_log_configuration(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_log_configuration_details::de_aws_ecs_task_definition_container_definitions_log_configuration_details(tokens)?
                                );
                        }
                        "Memory" => {
                            builder = builder.set_memory(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MemoryReservation" => {
                            builder = builder.set_memory_reservation(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MountPoints" => {
                            builder = builder.set_mount_points(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_mount_points_list::de_aws_ecs_task_definition_container_definitions_mount_points_list(tokens)?
                                );
                        }
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PortMappings" => {
                            builder = builder.set_port_mappings(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_port_mappings_list::de_aws_ecs_task_definition_container_definitions_port_mappings_list(tokens)?
                                );
                        }
                        "Privileged" => {
                            builder = builder.set_privileged(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PseudoTerminal" => {
                            builder = builder.set_pseudo_terminal(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ReadonlyRootFilesystem" => {
                            builder =
                                builder.set_readonly_root_filesystem(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RepositoryCredentials" => {
                            builder = builder.set_repository_credentials(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_repository_credentials_details::de_aws_ecs_task_definition_container_definitions_repository_credentials_details(tokens)?
                                );
                        }
                        "ResourceRequirements" => {
                            builder = builder.set_resource_requirements(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_resource_requirements_list::de_aws_ecs_task_definition_container_definitions_resource_requirements_list(tokens)?
                                );
                        }
                        "Secrets" => {
                            builder = builder.set_secrets(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_secrets_list::de_aws_ecs_task_definition_container_definitions_secrets_list(tokens)?
                                );
                        }
                        "StartTimeout" => {
                            builder = builder.set_start_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "StopTimeout" => {
                            builder = builder.set_stop_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SystemControls" => {
                            builder = builder.set_system_controls(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_system_controls_list::de_aws_ecs_task_definition_container_definitions_system_controls_list(tokens)?
                                );
                        }
                        "Ulimits" => {
                            builder = builder.set_ulimits(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_ulimits_list::de_aws_ecs_task_definition_container_definitions_ulimits_list(tokens)?
                                );
                        }
                        "User" => {
                            builder = builder.set_user(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VolumesFrom" => {
                            builder = builder.set_volumes_from(
                                    crate::protocol_serde::shape_aws_ecs_task_definition_container_definitions_volumes_from_list::de_aws_ecs_task_definition_container_definitions_volumes_from_list(tokens)?
                                );
                        }
                        "WorkingDirectory" => {
                            builder = builder.set_working_directory(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
