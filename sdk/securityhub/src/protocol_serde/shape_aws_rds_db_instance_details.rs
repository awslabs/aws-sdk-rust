// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_rds_db_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsRdsDbInstanceDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.associated_roles {
        let mut array_2 = object.key("AssociatedRoles").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_instance_associated_role::ser_aws_rds_db_instance_associated_role(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.ca_certificate_identifier {
        object.key("CACertificateIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_7.as_str());
    }
    if let Some(var_8) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_8.as_str());
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_9) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.db_name {
        object.key("DBName").string(var_10.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_11) = &input.endpoint {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Endpoint").start_object();
        crate::protocol_serde::shape_aws_rds_db_instance_endpoint::ser_aws_rds_db_instance_endpoint(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.engine {
        object.key("Engine").string(var_13.as_str());
    }
    if let Some(var_14) = &input.engine_version {
        object.key("EngineVersion").string(var_14.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_15) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_15.as_str());
    }
    if let Some(var_16) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_16.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_17) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.vpc_security_groups {
        let mut array_19 = object.key("VpcSecurityGroups").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_group::ser_aws_rds_db_instance_vpc_security_group(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_22) = &input.enhanced_monitoring_resource_arn {
        object
            .key("EnhancedMonitoringResourceArn")
            .string(var_22.as_str());
    }
    if let Some(var_23) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_23.as_str());
    }
    if let Some(var_24) = &input.master_username {
        object.key("MasterUsername").string(var_24.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_25) = &input.preferred_backup_window {
        object.key("PreferredBackupWindow").string(var_25.as_str());
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_26) = &input.db_security_groups {
        let mut array_27 = object.key("DbSecurityGroups").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.db_parameter_groups {
        let mut array_30 = object.key("DbParameterGroups").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_parameter_group::ser_aws_rds_db_parameter_group(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_33.as_str());
    }
    if let Some(var_34) = &input.db_subnet_group {
        #[allow(unused_mut)]
        let mut object_35 = object.key("DbSubnetGroup").start_object();
        crate::protocol_serde::shape_aws_rds_db_subnet_group::ser_aws_rds_db_subnet_group(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_36.as_str());
    }
    if let Some(var_37) = &input.pending_modified_values {
        #[allow(unused_mut)]
        let mut object_38 = object.key("PendingModifiedValues").start_object();
        crate::protocol_serde::shape_aws_rds_db_pending_modified_values::ser_aws_rds_db_pending_modified_values(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_39.as_str());
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_40) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_40.as_str());
    }
    if let Some(var_41) = &input.read_replica_db_instance_identifiers {
        let mut array_42 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43.as_str());
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.read_replica_db_cluster_identifiers {
        let mut array_45 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_46 in var_44 {
            {
                array_45.value().string(item_46.as_str());
            }
        }
        array_45.finish();
    }
    if let Some(var_47) = &input.license_model {
        object.key("LicenseModel").string(var_47.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_48) = &input.option_group_memberships {
        let mut array_49 = object.key("OptionGroupMemberships").start_array();
        for item_50 in var_48 {
            {
                #[allow(unused_mut)]
                let mut object_51 = array_49.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_option_group_membership::ser_aws_rds_db_option_group_membership(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.character_set_name {
        object.key("CharacterSetName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.secondary_availability_zone {
        object
            .key("SecondaryAvailabilityZone")
            .string(var_53.as_str());
    }
    if let Some(var_54) = &input.status_infos {
        let mut array_55 = object.key("StatusInfos").start_array();
        for item_56 in var_54 {
            {
                #[allow(unused_mut)]
                let mut object_57 = array_55.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_status_info::ser_aws_rds_db_status_info(
                    &mut object_57,
                    item_56,
                )?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if let Some(var_58) = &input.storage_type {
        object.key("StorageType").string(var_58.as_str());
    }
    if let Some(var_59) = &input.domain_memberships {
        let mut array_60 = object.key("DomainMemberships").start_array();
        for item_61 in var_59 {
            {
                #[allow(unused_mut)]
                let mut object_62 = array_60.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_domain_membership::ser_aws_rds_db_domain_membership(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_63) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_63.as_str());
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_64) = &input.timezone {
        object.key("Timezone").string(var_64.as_str());
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_65) = &input.performance_insights_kms_key_id {
        object
            .key("PerformanceInsightsKmsKeyId")
            .string(var_65.as_str());
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_66) = &input.enabled_cloud_watch_logs_exports {
        let mut array_67 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68.as_str());
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.processor_features {
        let mut array_70 = object.key("ProcessorFeatures").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::protocol_serde::shape_aws_rds_db_processor_feature::ser_aws_rds_db_processor_feature(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.listener_endpoint {
        #[allow(unused_mut)]
        let mut object_74 = object.key("ListenerEndpoint").start_object();
        crate::protocol_serde::shape_aws_rds_db_instance_endpoint::ser_aws_rds_db_instance_endpoint(&mut object_74, var_73)?;
        object_74.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_aws_rds_db_instance_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsRdsDbInstanceDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsRdsDbInstanceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AssociatedRoles" => {
                                builder = builder.set_associated_roles(
                                    crate::protocol_serde::shape_aws_rds_db_instance_associated_roles::de_aws_rds_db_instance_associated_roles(tokens)?
                                );
                            }
                            "CACertificateIdentifier" => {
                                builder = builder.set_ca_certificate_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DBClusterIdentifier" => {
                                builder = builder.set_db_cluster_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DBInstanceIdentifier" => {
                                builder = builder.set_db_instance_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DBInstanceClass" => {
                                builder = builder.set_db_instance_class(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbInstancePort" => {
                                builder = builder.set_db_instance_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DbiResourceId" => {
                                builder = builder.set_dbi_resource_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DBName" => {
                                builder = builder.set_db_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DeletionProtection" => {
                                builder = builder.set_deletion_protection(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Endpoint" => {
                                builder = builder.set_endpoint(
                                    crate::protocol_serde::shape_aws_rds_db_instance_endpoint::de_aws_rds_db_instance_endpoint(tokens)?
                                );
                            }
                            "Engine" => {
                                builder = builder.set_engine(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EngineVersion" => {
                                builder = builder.set_engine_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "IAMDatabaseAuthenticationEnabled" => {
                                builder = builder.set_iam_database_authentication_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "InstanceCreateTime" => {
                                builder = builder.set_instance_create_time(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KmsKeyId" => {
                                builder = builder.set_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PubliclyAccessible" => {
                                builder = builder.set_publicly_accessible(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "StorageEncrypted" => {
                                builder = builder.set_storage_encrypted(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "TdeCredentialArn" => {
                                builder = builder.set_tde_credential_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VpcSecurityGroups" => {
                                builder = builder.set_vpc_security_groups(
                                    crate::protocol_serde::shape_aws_rds_db_instance_vpc_security_groups::de_aws_rds_db_instance_vpc_security_groups(tokens)?
                                );
                            }
                            "MultiAz" => {
                                builder = builder.set_multi_az(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "EnhancedMonitoringResourceArn" => {
                                builder = builder.set_enhanced_monitoring_resource_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbInstanceStatus" => {
                                builder = builder.set_db_instance_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MasterUsername" => {
                                builder = builder.set_master_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AllocatedStorage" => {
                                builder = builder.set_allocated_storage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "PreferredBackupWindow" => {
                                builder = builder.set_preferred_backup_window(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "BackupRetentionPeriod" => {
                                builder = builder.set_backup_retention_period(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DbSecurityGroups" => {
                                builder = builder.set_db_security_groups(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "DbParameterGroups" => {
                                builder = builder.set_db_parameter_groups(
                                    crate::protocol_serde::shape_aws_rds_db_parameter_groups::de_aws_rds_db_parameter_groups(tokens)?
                                );
                            }
                            "AvailabilityZone" => {
                                builder = builder.set_availability_zone(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DbSubnetGroup" => {
                                builder = builder.set_db_subnet_group(
                                    crate::protocol_serde::shape_aws_rds_db_subnet_group::de_aws_rds_db_subnet_group(tokens)?
                                );
                            }
                            "PreferredMaintenanceWindow" => {
                                builder = builder.set_preferred_maintenance_window(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PendingModifiedValues" => {
                                builder = builder.set_pending_modified_values(
                                    crate::protocol_serde::shape_aws_rds_db_pending_modified_values::de_aws_rds_db_pending_modified_values(tokens)?
                                );
                            }
                            "LatestRestorableTime" => {
                                builder = builder.set_latest_restorable_time(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AutoMinorVersionUpgrade" => {
                                builder = builder.set_auto_minor_version_upgrade(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ReadReplicaSourceDBInstanceIdentifier" => {
                                builder = builder.set_read_replica_source_db_instance_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ReadReplicaDBInstanceIdentifiers" => {
                                builder = builder.set_read_replica_db_instance_identifiers(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ReadReplicaDBClusterIdentifiers" => {
                                builder = builder.set_read_replica_db_cluster_identifiers(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "LicenseModel" => {
                                builder = builder.set_license_model(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Iops" => {
                                builder = builder.set_iops(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "OptionGroupMemberships" => {
                                builder = builder.set_option_group_memberships(
                                    crate::protocol_serde::shape_aws_rds_db_option_group_memberships::de_aws_rds_db_option_group_memberships(tokens)?
                                );
                            }
                            "CharacterSetName" => {
                                builder = builder.set_character_set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecondaryAvailabilityZone" => {
                                builder = builder.set_secondary_availability_zone(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "StatusInfos" => {
                                builder = builder.set_status_infos(
                                    crate::protocol_serde::shape_aws_rds_db_status_infos::de_aws_rds_db_status_infos(tokens)?
                                );
                            }
                            "StorageType" => {
                                builder = builder.set_storage_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DomainMemberships" => {
                                builder = builder.set_domain_memberships(
                                    crate::protocol_serde::shape_aws_rds_db_domain_memberships::de_aws_rds_db_domain_memberships(tokens)?
                                );
                            }
                            "CopyTagsToSnapshot" => {
                                builder = builder.set_copy_tags_to_snapshot(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "MonitoringInterval" => {
                                builder = builder.set_monitoring_interval(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MonitoringRoleArn" => {
                                builder = builder.set_monitoring_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PromotionTier" => {
                                builder = builder.set_promotion_tier(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Timezone" => {
                                builder = builder.set_timezone(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PerformanceInsightsEnabled" => {
                                builder = builder.set_performance_insights_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "PerformanceInsightsKmsKeyId" => {
                                builder = builder.set_performance_insights_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PerformanceInsightsRetentionPeriod" => {
                                builder = builder.set_performance_insights_retention_period(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "EnabledCloudWatchLogsExports" => {
                                builder = builder.set_enabled_cloud_watch_logs_exports(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ProcessorFeatures" => {
                                builder = builder.set_processor_features(
                                    crate::protocol_serde::shape_aws_rds_db_processor_features::de_aws_rds_db_processor_features(tokens)?
                                );
                            }
                            "ListenerEndpoint" => {
                                builder = builder.set_listener_endpoint(
                                    crate::protocol_serde::shape_aws_rds_db_instance_endpoint::de_aws_rds_db_instance_endpoint(tokens)?
                                );
                            }
                            "MaxAllocatedStorage" => {
                                builder = builder.set_max_allocated_storage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
