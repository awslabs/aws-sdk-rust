// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_elbv2_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsElbv2LoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.availability_zones {
        let mut array_2 = object.key("AvailabilityZones").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_availability_zone::ser_availability_zone(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.canonical_hosted_zone_id {
        object.key("CanonicalHostedZoneId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.created_time {
        object.key("CreatedTime").string(var_6.as_str());
    }
    if let Some(var_7) = &input.dns_name {
        object.key("DNSName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.ip_address_type {
        object.key("IpAddressType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.scheme {
        object.key("Scheme").string(var_9.as_str());
    }
    if let Some(var_10) = &input.security_groups {
        let mut array_11 = object.key("SecurityGroups").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.state {
        #[allow(unused_mut)]
        let mut object_14 = object.key("State").start_object();
        crate::protocol_serde::shape_load_balancer_state::ser_load_balancer_state(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.r#type {
        object.key("Type").string(var_15.as_str());
    }
    if let Some(var_16) = &input.vpc_id {
        object.key("VpcId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.load_balancer_attributes {
        let mut array_18 = object.key("LoadBalancerAttributes").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_aws_elbv2_load_balancer_attribute::ser_aws_elbv2_load_balancer_attribute(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_elbv2_load_balancer_details<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AwsElbv2LoadBalancerDetails>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsElbv2LoadBalancerDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AvailabilityZones" => {
                                builder = builder.set_availability_zones(
                                    crate::protocol_serde::shape_availability_zones::de_availability_zones(tokens)?
                                );
                            }
                            "CanonicalHostedZoneId" => {
                                builder = builder.set_canonical_hosted_zone_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreatedTime" => {
                                builder = builder.set_created_time(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DNSName" => {
                                builder = builder.set_dns_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "IpAddressType" => {
                                builder = builder.set_ip_address_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Scheme" => {
                                builder = builder.set_scheme(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecurityGroups" => {
                                builder = builder.set_security_groups(
                                    crate::protocol_serde::shape_security_groups::de_security_groups(tokens)?
                                );
                            }
                            "State" => {
                                builder = builder.set_state(
                                    crate::protocol_serde::shape_load_balancer_state::de_load_balancer_state(tokens)?
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VpcId" => {
                                builder = builder.set_vpc_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LoadBalancerAttributes" => {
                                builder = builder.set_load_balancer_attributes(
                                    crate::protocol_serde::shape_aws_elbv2_load_balancer_attributes::de_aws_elbv2_load_balancer_attributes(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
