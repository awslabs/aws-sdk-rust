// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_dms_replication_task_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsDmsReplicationTaskDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_1.as_str());
    }
    if let Some(var_2) = &input.cdc_start_time {
        object.key("CdcStartTime").string(var_2.as_str());
    }
    if let Some(var_3) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_3.as_str());
    }
    if let Some(var_4) = &input.migration_type {
        object.key("MigrationType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.id {
        object.key("Id").string(var_5.as_str());
    }
    if let Some(var_6) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.replication_task_identifier {
        object.key("ReplicationTaskIdentifier").string(var_8.as_str());
    }
    if let Some(var_9) = &input.replication_task_settings {
        object.key("ReplicationTaskSettings").string(var_9.as_str());
    }
    if let Some(var_10) = &input.source_endpoint_arn {
        object.key("SourceEndpointArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.table_mappings {
        object.key("TableMappings").string(var_11.as_str());
    }
    if let Some(var_12) = &input.target_endpoint_arn {
        object.key("TargetEndpointArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.task_data {
        object.key("TaskData").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_aws_dms_replication_task_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsDmsReplicationTaskDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsDmsReplicationTaskDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CdcStartPosition" => {
                            builder = builder.set_cdc_start_position(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CdcStartTime" => {
                            builder = builder.set_cdc_start_time(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CdcStopPosition" => {
                            builder = builder.set_cdc_stop_position(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MigrationType" => {
                            builder = builder.set_migration_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ResourceIdentifier" => {
                            builder = builder.set_resource_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReplicationInstanceArn" => {
                            builder = builder.set_replication_instance_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReplicationTaskIdentifier" => {
                            builder = builder.set_replication_task_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReplicationTaskSettings" => {
                            builder = builder.set_replication_task_settings(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SourceEndpointArn" => {
                            builder = builder.set_source_endpoint_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TableMappings" => {
                            builder = builder.set_table_mappings(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TargetEndpointArn" => {
                            builder = builder.set_target_endpoint_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TaskData" => {
                            builder = builder.set_task_data(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
