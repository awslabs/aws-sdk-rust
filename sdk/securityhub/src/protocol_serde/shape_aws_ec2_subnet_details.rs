// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_ec2_subnet_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsEc2SubnetDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.assign_ipv6_address_on_creation {
        object.key("AssignIpv6AddressOnCreation").boolean(*var_1);
    }
    if let Some(var_2) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.available_ip_address_count {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.cidr_block {
        object.key("CidrBlock").string(var_5.as_str());
    }
    if let Some(var_6) = &input.default_for_az {
        object.key("DefaultForAz").boolean(*var_6);
    }
    if let Some(var_7) = &input.map_public_ip_on_launch {
        object.key("MapPublicIpOnLaunch").boolean(*var_7);
    }
    if let Some(var_8) = &input.owner_id {
        object.key("OwnerId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.state {
        object.key("State").string(var_9.as_str());
    }
    if let Some(var_10) = &input.subnet_arn {
        object.key("SubnetArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.subnet_id {
        object.key("SubnetId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.vpc_id {
        object.key("VpcId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.ipv6_cidr_block_association_set {
        let mut array_14 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_ipv6_cidr_block_association::ser_ipv6_cidr_block_association(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_ec2_subnet_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsEc2SubnetDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsEc2SubnetDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AssignIpv6AddressOnCreation" => {
                            builder = builder
                                .set_assign_ipv6_address_on_creation(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "AvailabilityZone" => {
                            builder = builder.set_availability_zone(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AvailabilityZoneId" => {
                            builder = builder.set_availability_zone_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AvailableIpAddressCount" => {
                            builder = builder.set_available_ip_address_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "CidrBlock" => {
                            builder = builder.set_cidr_block(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DefaultForAz" => {
                            builder = builder.set_default_for_az(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "MapPublicIpOnLaunch" => {
                            builder = builder.set_map_public_ip_on_launch(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "OwnerId" => {
                            builder = builder.set_owner_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "State" => {
                            builder = builder.set_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SubnetArn" => {
                            builder = builder.set_subnet_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SubnetId" => {
                            builder = builder.set_subnet_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VpcId" => {
                            builder = builder.set_vpc_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Ipv6CidrBlockAssociationSet" => {
                            builder = builder.set_ipv6_cidr_block_association_set(
                                crate::protocol_serde::shape_ipv6_cidr_block_association_list::de_ipv6_cidr_block_association_list(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
