// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permission to perform the action specified in the request.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Internal server error.</p>
    InternalException(crate::error::InternalException),
    /// <p>The account doesn't have permission to perform this action.</p>
    InvalidAccessException(crate::error::InvalidAccessException),
    /// <p>The request was rejected because you supplied an invalid or out-of-range value for an input parameter.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The request was rejected because it attempted to create resources beyond the current Amazon Web Services account or throttling limits. The error code describes the limit exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource specified in the request conflicts with an existing resource.</p>
    ResourceConflictException(crate::error::ResourceConflictException),
    /// <p>The request was rejected because we can't find the specified resource.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidAccessException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceConflictException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptAdministratorInvitationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptAdministratorInvitationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptAdministratorInvitationError> for Error {
    fn from(err: crate::error::AcceptAdministratorInvitationError) -> Self {
        match err {
            crate::error::AcceptAdministratorInvitationError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AcceptAdministratorInvitationError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::AcceptAdministratorInvitationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AcceptAdministratorInvitationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AcceptAdministratorInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptAdministratorInvitationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptInvitationError> for Error {
    fn from(err: crate::error::AcceptInvitationError) -> Self {
        match err {
            crate::error::AcceptInvitationError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AcceptInvitationError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::AcceptInvitationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AcceptInvitationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AcceptInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDisableStandardsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDisableStandardsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDisableStandardsError> for Error {
    fn from(err: crate::error::BatchDisableStandardsError) -> Self {
        match err {
            crate::error::BatchDisableStandardsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::BatchDisableStandardsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::BatchDisableStandardsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchDisableStandardsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchDisableStandardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchEnableStandardsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchEnableStandardsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchEnableStandardsError> for Error {
    fn from(err: crate::error::BatchEnableStandardsError) -> Self {
        match err {
            crate::error::BatchEnableStandardsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::BatchEnableStandardsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::BatchEnableStandardsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchEnableStandardsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchEnableStandardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchImportFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchImportFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchImportFindingsError> for Error {
    fn from(err: crate::error::BatchImportFindingsError) -> Self {
        match err {
            crate::error::BatchImportFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::BatchImportFindingsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::BatchImportFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchImportFindingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchImportFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUpdateFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdateFindingsError> for Error {
    fn from(err: crate::error::BatchUpdateFindingsError) -> Self {
        match err {
            crate::error::BatchUpdateFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::BatchUpdateFindingsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::BatchUpdateFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchUpdateFindingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchUpdateFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateActionTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateActionTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateActionTargetError> for Error {
    fn from(err: crate::error::CreateActionTargetError) -> Self {
        match err {
            crate::error::CreateActionTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateActionTargetError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::CreateActionTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateActionTargetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateActionTargetError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateActionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFindingAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFindingAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFindingAggregatorError> for Error {
    fn from(err: crate::error::CreateFindingAggregatorError) -> Self {
        match err {
            crate::error::CreateFindingAggregatorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFindingAggregatorError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateFindingAggregatorError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::CreateFindingAggregatorError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateFindingAggregatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFindingAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInsightError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateInsightError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInsightError> for Error {
    fn from(err: crate::error::CreateInsightError) -> Self {
        match err {
            crate::error::CreateInsightError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateInsightError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::CreateInsightError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateInsightError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateInsightError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateInsightError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMembersError> for Error {
    fn from(err: crate::error::CreateMembersError) -> Self {
        match err {
            crate::error::CreateMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::CreateMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateMembersError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeclineInvitationsError> for Error {
    fn from(err: crate::error::DeclineInvitationsError) -> Self {
        match err {
            crate::error::DeclineInvitationsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeclineInvitationsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeclineInvitationsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeclineInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeclineInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteActionTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteActionTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteActionTargetError> for Error {
    fn from(err: crate::error::DeleteActionTargetError) -> Self {
        match err {
            crate::error::DeleteActionTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteActionTargetError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeleteActionTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteActionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteActionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFindingAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFindingAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFindingAggregatorError> for Error {
    fn from(err: crate::error::DeleteFindingAggregatorError) -> Self {
        match err {
            crate::error::DeleteFindingAggregatorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFindingAggregatorError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteFindingAggregatorError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeleteFindingAggregatorError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteFindingAggregatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteFindingAggregatorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFindingAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInsightError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInsightError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInsightError> for Error {
    fn from(err: crate::error::DeleteInsightError) -> Self {
        match err {
            crate::error::DeleteInsightError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteInsightError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeleteInsightError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteInsightError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteInsightError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteInsightError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInvitationsError> for Error {
    fn from(err: crate::error::DeleteInvitationsError) -> Self {
        match err {
            crate::error::DeleteInvitationsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteInvitationsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeleteInvitationsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteInvitationsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMembersError> for Error {
    fn from(err: crate::error::DeleteMembersError) -> Self {
        match err {
            crate::error::DeleteMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DeleteMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeActionTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeActionTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeActionTargetsError> for Error {
    fn from(err: crate::error::DescribeActionTargetsError) -> Self {
        match err {
            crate::error::DescribeActionTargetsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeActionTargetsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeActionTargetsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeActionTargetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeActionTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeHubError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeHubError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeHubError> for Error {
    fn from(err: crate::error::DescribeHubError) -> Self {
        match err {
            crate::error::DescribeHubError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeHubError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeHubError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeHubError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeHubError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeHubError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConfigurationError> for Error {
    fn from(err: crate::error::DescribeOrganizationConfigurationError) -> Self {
        match err {
            crate::error::DescribeOrganizationConfigurationError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeProductsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeProductsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeProductsError> for Error {
    fn from(err: crate::error::DescribeProductsError) -> Self {
        match err {
            crate::error::DescribeProductsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeProductsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeProductsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeProductsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeProductsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStandardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStandardsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStandardsError> for Error {
    fn from(err: crate::error::DescribeStandardsError) -> Self {
        match err {
            crate::error::DescribeStandardsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeStandardsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeStandardsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeStandardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStandardsControlsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStandardsControlsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStandardsControlsError> for Error {
    fn from(err: crate::error::DescribeStandardsControlsError) -> Self {
        match err {
            crate::error::DescribeStandardsControlsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeStandardsControlsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DescribeStandardsControlsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeStandardsControlsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeStandardsControlsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisableImportFindingsForProductError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisableImportFindingsForProductError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableImportFindingsForProductError> for Error {
    fn from(err: crate::error::DisableImportFindingsForProductError) -> Self {
        match err {
            crate::error::DisableImportFindingsForProductError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisableImportFindingsForProductError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DisableImportFindingsForProductError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisableImportFindingsForProductError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisableImportFindingsForProductError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisableImportFindingsForProductError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisableOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisableOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::DisableOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::DisableOrganizationAdminAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableSecurityHubError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisableSecurityHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableSecurityHubError> for Error {
    fn from(err: crate::error::DisableSecurityHubError) -> Self {
        match err {
            crate::error::DisableSecurityHubError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisableSecurityHubError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DisableSecurityHubError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisableSecurityHubError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisableSecurityHubError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateFromAdministratorAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateFromAdministratorAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFromAdministratorAccountError> for Error {
    fn from(err: crate::error::DisassociateFromAdministratorAccountError) -> Self {
        match err {
            crate::error::DisassociateFromAdministratorAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisassociateFromAdministratorAccountError::InvalidAccessException(
                inner,
            ) => Error::InvalidAccessException(inner),
            crate::error::DisassociateFromAdministratorAccountError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::error::DisassociateFromAdministratorAccountError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateFromAdministratorAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFromMasterAccountError> for Error {
    fn from(err: crate::error::DisassociateFromMasterAccountError) -> Self {
        match err {
            crate::error::DisassociateFromMasterAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateMembersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateMembersError> for Error {
    fn from(err: crate::error::DisassociateMembersError) -> Self {
        match err {
            crate::error::DisassociateMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DisassociateMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::DisassociateMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisassociateMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisassociateMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::EnableImportFindingsForProductError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::EnableImportFindingsForProductError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableImportFindingsForProductError> for Error {
    fn from(err: crate::error::EnableImportFindingsForProductError) -> Self {
        match err {
            crate::error::EnableImportFindingsForProductError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::EnableImportFindingsForProductError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::EnableImportFindingsForProductError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::EnableImportFindingsForProductError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::EnableImportFindingsForProductError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::EnableImportFindingsForProductError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::EnableOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::EnableOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::EnableOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::EnableOrganizationAdminAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableSecurityHubError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EnableSecurityHubError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableSecurityHubError> for Error {
    fn from(err: crate::error::EnableSecurityHubError) -> Self {
        match err {
            crate::error::EnableSecurityHubError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EnableSecurityHubError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::EnableSecurityHubError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::EnableSecurityHubError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::EnableSecurityHubError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::EnableSecurityHubError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAdministratorAccountError> for Error {
    fn from(err: crate::error::GetAdministratorAccountError) -> Self {
        match err {
            crate::error::GetAdministratorAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetAdministratorAccountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetAdministratorAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetAdministratorAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetAdministratorAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAdministratorAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEnabledStandardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEnabledStandardsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEnabledStandardsError> for Error {
    fn from(err: crate::error::GetEnabledStandardsError) -> Self {
        match err {
            crate::error::GetEnabledStandardsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetEnabledStandardsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetEnabledStandardsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetEnabledStandardsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetEnabledStandardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFindingAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingAggregatorError> for Error {
    fn from(err: crate::error::GetFindingAggregatorError) -> Self {
        match err {
            crate::error::GetFindingAggregatorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFindingAggregatorError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetFindingAggregatorError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetFindingAggregatorError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetFindingAggregatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetFindingAggregatorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFindingAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingsError> for Error {
    fn from(err: crate::error::GetFindingsError) -> Self {
        match err {
            crate::error::GetFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetFindingsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetFindingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInsightResultsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInsightResultsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInsightResultsError> for Error {
    fn from(err: crate::error::GetInsightResultsError) -> Self {
        match err {
            crate::error::GetInsightResultsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetInsightResultsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetInsightResultsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInsightResultsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetInsightResultsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetInsightResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInsightsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInsightsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInsightsError> for Error {
    fn from(err: crate::error::GetInsightsError) -> Self {
        match err {
            crate::error::GetInsightsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetInsightsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetInsightsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInsightsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetInsightsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetInsightsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInvitationsCountError> for Error {
    fn from(err: crate::error::GetInvitationsCountError) -> Self {
        match err {
            crate::error::GetInvitationsCountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetInvitationsCountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetInvitationsCountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInvitationsCountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetInvitationsCountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMasterAccountError> for Error {
    fn from(err: crate::error::GetMasterAccountError) -> Self {
        match err {
            crate::error::GetMasterAccountError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetMasterAccountError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetMasterAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetMasterAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetMasterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMasterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMembersError> for Error {
    fn from(err: crate::error::GetMembersError) -> Self {
        match err {
            crate::error::GetMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::GetMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InviteMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InviteMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InviteMembersError> for Error {
    fn from(err: crate::error::InviteMembersError) -> Self {
        match err {
            crate::error::InviteMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::InviteMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::InviteMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::InviteMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::InviteMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::InviteMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEnabledProductsForImportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEnabledProductsForImportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnabledProductsForImportError> for Error {
    fn from(err: crate::error::ListEnabledProductsForImportError) -> Self {
        match err {
            crate::error::ListEnabledProductsForImportError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListEnabledProductsForImportError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::ListEnabledProductsForImportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListEnabledProductsForImportError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFindingAggregatorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFindingAggregatorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFindingAggregatorsError> for Error {
    fn from(err: crate::error::ListFindingAggregatorsError) -> Self {
        match err {
            crate::error::ListFindingAggregatorsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFindingAggregatorsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListFindingAggregatorsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::ListFindingAggregatorsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListFindingAggregatorsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListFindingAggregatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInvitationsError> for Error {
    fn from(err: crate::error::ListInvitationsError) -> Self {
        match err {
            crate::error::ListInvitationsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListInvitationsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::ListInvitationsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListInvitationsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMembersError> for Error {
    fn from(err: crate::error::ListMembersError) -> Self {
        match err {
            crate::error::ListMembersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListMembersError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::ListMembersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListMembersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOrganizationAdminAccountsError> for Error {
    fn from(err: crate::error::ListOrganizationAdminAccountsError) -> Self {
        match err {
            crate::error::ListOrganizationAdminAccountsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::TagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UntagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateActionTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateActionTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateActionTargetError> for Error {
    fn from(err: crate::error::UpdateActionTargetError) -> Self {
        match err {
            crate::error::UpdateActionTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateActionTargetError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateActionTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateActionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateActionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFindingAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFindingAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFindingAggregatorError> for Error {
    fn from(err: crate::error::UpdateFindingAggregatorError) -> Self {
        match err {
            crate::error::UpdateFindingAggregatorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFindingAggregatorError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateFindingAggregatorError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateFindingAggregatorError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateFindingAggregatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFindingAggregatorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFindingAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFindingsError> for Error {
    fn from(err: crate::error::UpdateFindingsError) -> Self {
        match err {
            crate::error::UpdateFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateFindingsError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateFindingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFindingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInsightError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateInsightError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInsightError> for Error {
    fn from(err: crate::error::UpdateInsightError) -> Self {
        match err {
            crate::error::UpdateInsightError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateInsightError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateInsightError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateInsightError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateInsightError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateInsightError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateOrganizationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOrganizationConfigurationError> for Error {
    fn from(err: crate::error::UpdateOrganizationConfigurationError) -> Self {
        match err {
            crate::error::UpdateOrganizationConfigurationError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateSecurityHubConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateSecurityHubConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSecurityHubConfigurationError> for Error {
    fn from(err: crate::error::UpdateSecurityHubConfigurationError) -> Self {
        match err {
            crate::error::UpdateSecurityHubConfigurationError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateSecurityHubConfigurationError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateSecurityHubConfigurationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateSecurityHubConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateSecurityHubConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateSecurityHubConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStandardsControlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateStandardsControlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateStandardsControlError> for Error {
    fn from(err: crate::error::UpdateStandardsControlError) -> Self {
        match err {
            crate::error::UpdateStandardsControlError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateStandardsControlError::InvalidAccessException(inner) => {
                Error::InvalidAccessException(inner)
            }
            crate::error::UpdateStandardsControlError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateStandardsControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateStandardsControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidAccessException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceConflictException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
