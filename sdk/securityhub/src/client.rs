// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS SecurityHub
///
/// Client for invoking operations on AWS SecurityHub. Each operation on AWS SecurityHub is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_securityhub::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_securityhub::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_securityhub::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcceptAdministratorInvitation`](crate::client::fluent_builders::AcceptAdministratorInvitation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`administrator_id(impl Into<String>)`](crate::client::fluent_builders::AcceptAdministratorInvitation::administrator_id) / [`set_administrator_id(Option<String>)`](crate::client::fluent_builders::AcceptAdministratorInvitation::set_administrator_id): <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
    ///   - [`invitation_id(impl Into<String>)`](crate::client::fluent_builders::AcceptAdministratorInvitation::invitation_id) / [`set_invitation_id(Option<String>)`](crate::client::fluent_builders::AcceptAdministratorInvitation::set_invitation_id): <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
    /// - On success, responds with [`AcceptAdministratorInvitationOutput`](crate::output::AcceptAdministratorInvitationOutput)

    /// - On failure, responds with [`SdkError<AcceptAdministratorInvitationError>`](crate::error::AcceptAdministratorInvitationError)
    pub fn accept_administrator_invitation(
        &self,
    ) -> crate::client::fluent_builders::AcceptAdministratorInvitation {
        crate::client::fluent_builders::AcceptAdministratorInvitation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AcceptInvitation`](crate::client::fluent_builders::AcceptInvitation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`master_id(impl Into<String>)`](crate::client::fluent_builders::AcceptInvitation::master_id) / [`set_master_id(Option<String>)`](crate::client::fluent_builders::AcceptInvitation::set_master_id): <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
    ///   - [`invitation_id(impl Into<String>)`](crate::client::fluent_builders::AcceptInvitation::invitation_id) / [`set_invitation_id(Option<String>)`](crate::client::fluent_builders::AcceptInvitation::set_invitation_id): <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
    /// - On success, responds with [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput)

    /// - On failure, responds with [`SdkError<AcceptInvitationError>`](crate::error::AcceptInvitationError)
    #[deprecated(
        note = "This API has been deprecated, use AcceptAdministratorInvitation API instead."
    )]
    pub fn accept_invitation(&self) -> crate::client::fluent_builders::AcceptInvitation {
        crate::client::fluent_builders::AcceptInvitation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchDisableStandards`](crate::client::fluent_builders::BatchDisableStandards) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`standards_subscription_arns(Vec<String>)`](crate::client::fluent_builders::BatchDisableStandards::standards_subscription_arns) / [`set_standards_subscription_arns(Option<Vec<String>>)`](crate::client::fluent_builders::BatchDisableStandards::set_standards_subscription_arns): <p>The ARNs of the standards subscriptions to disable.</p>
    /// - On success, responds with [`BatchDisableStandardsOutput`](crate::output::BatchDisableStandardsOutput) with field(s):
    ///   - [`standards_subscriptions(Option<Vec<StandardsSubscription>>)`](crate::output::BatchDisableStandardsOutput::standards_subscriptions): <p>The details of the standards subscriptions that were disabled.</p>
    /// - On failure, responds with [`SdkError<BatchDisableStandardsError>`](crate::error::BatchDisableStandardsError)
    pub fn batch_disable_standards(&self) -> crate::client::fluent_builders::BatchDisableStandards {
        crate::client::fluent_builders::BatchDisableStandards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchEnableStandards`](crate::client::fluent_builders::BatchEnableStandards) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`standards_subscription_requests(Vec<StandardsSubscriptionRequest>)`](crate::client::fluent_builders::BatchEnableStandards::standards_subscription_requests) / [`set_standards_subscription_requests(Option<Vec<StandardsSubscriptionRequest>>)`](crate::client::fluent_builders::BatchEnableStandards::set_standards_subscription_requests): <p>The list of standards checks to enable.</p>
    /// - On success, responds with [`BatchEnableStandardsOutput`](crate::output::BatchEnableStandardsOutput) with field(s):
    ///   - [`standards_subscriptions(Option<Vec<StandardsSubscription>>)`](crate::output::BatchEnableStandardsOutput::standards_subscriptions): <p>The details of the standards subscriptions that were enabled.</p>
    /// - On failure, responds with [`SdkError<BatchEnableStandardsError>`](crate::error::BatchEnableStandardsError)
    pub fn batch_enable_standards(&self) -> crate::client::fluent_builders::BatchEnableStandards {
        crate::client::fluent_builders::BatchEnableStandards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchImportFindings`](crate::client::fluent_builders::BatchImportFindings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`findings(Vec<AwsSecurityFinding>)`](crate::client::fluent_builders::BatchImportFindings::findings) / [`set_findings(Option<Vec<AwsSecurityFinding>>)`](crate::client::fluent_builders::BatchImportFindings::set_findings): <p>A list of findings to import. To successfully import a finding, it must follow the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">Amazon Web Services Security Finding Format</a>. Maximum of 100 findings per request.</p>
    /// - On success, responds with [`BatchImportFindingsOutput`](crate::output::BatchImportFindingsOutput) with field(s):
    ///   - [`failed_count(i32)`](crate::output::BatchImportFindingsOutput::failed_count): <p>The number of findings that failed to import.</p>
    ///   - [`success_count(i32)`](crate::output::BatchImportFindingsOutput::success_count): <p>The number of findings that were successfully imported.</p>
    ///   - [`failed_findings(Option<Vec<ImportFindingsError>>)`](crate::output::BatchImportFindingsOutput::failed_findings): <p>The list of findings that failed to import.</p>
    /// - On failure, responds with [`SdkError<BatchImportFindingsError>`](crate::error::BatchImportFindingsError)
    pub fn batch_import_findings(&self) -> crate::client::fluent_builders::BatchImportFindings {
        crate::client::fluent_builders::BatchImportFindings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchUpdateFindings`](crate::client::fluent_builders::BatchUpdateFindings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`finding_identifiers(Vec<AwsSecurityFindingIdentifier>)`](crate::client::fluent_builders::BatchUpdateFindings::finding_identifiers) / [`set_finding_identifiers(Option<Vec<AwsSecurityFindingIdentifier>>)`](crate::client::fluent_builders::BatchUpdateFindings::set_finding_identifiers): <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p>  <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
    ///   - [`note(NoteUpdate)`](crate::client::fluent_builders::BatchUpdateFindings::note) / [`set_note(Option<NoteUpdate>)`](crate::client::fluent_builders::BatchUpdateFindings::set_note): <p>The updated note.</p>
    ///   - [`severity(SeverityUpdate)`](crate::client::fluent_builders::BatchUpdateFindings::severity) / [`set_severity(Option<SeverityUpdate>)`](crate::client::fluent_builders::BatchUpdateFindings::set_severity): <p>Used to update the finding severity.</p>
    ///   - [`verification_state(VerificationState)`](crate::client::fluent_builders::BatchUpdateFindings::verification_state) / [`set_verification_state(Option<VerificationState>)`](crate::client::fluent_builders::BatchUpdateFindings::set_verification_state): <p>Indicates the veracity of a finding.</p>  <p>The available values for <code>VerificationState</code> are as follows.</p>  <ul>   <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li>   <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li>   <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li>   <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li>  </ul>
    ///   - [`confidence(i32)`](crate::client::fluent_builders::BatchUpdateFindings::confidence) / [`set_confidence(i32)`](crate::client::fluent_builders::BatchUpdateFindings::set_confidence): <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p>  <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
    ///   - [`criticality(i32)`](crate::client::fluent_builders::BatchUpdateFindings::criticality) / [`set_criticality(i32)`](crate::client::fluent_builders::BatchUpdateFindings::set_criticality): <p>The updated value for the level of importance assigned to the resources associated with the findings.</p>  <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
    ///   - [`types(Vec<String>)`](crate::client::fluent_builders::BatchUpdateFindings::types) / [`set_types(Option<Vec<String>>)`](crate::client::fluent_builders::BatchUpdateFindings::set_types): <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p>  <p>Valid namespace values are as follows.</p>  <ul>   <li> <p>Software and Configuration Checks</p> </li>   <li> <p>TTPs</p> </li>   <li> <p>Effects</p> </li>   <li> <p>Unusual Behaviors</p> </li>   <li> <p>Sensitive Data Identifications </p> </li>  </ul>
    ///   - [`user_defined_fields(HashMap<String, String>)`](crate::client::fluent_builders::BatchUpdateFindings::user_defined_fields) / [`set_user_defined_fields(Option<HashMap<String, String>>)`](crate::client::fluent_builders::BatchUpdateFindings::set_user_defined_fields): <p>A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.</p>
    ///   - [`workflow(WorkflowUpdate)`](crate::client::fluent_builders::BatchUpdateFindings::workflow) / [`set_workflow(Option<WorkflowUpdate>)`](crate::client::fluent_builders::BatchUpdateFindings::set_workflow): <p>Used to update the workflow status of a finding.</p>  <p>The workflow status indicates the progress of the investigation into the finding. </p>
    ///   - [`related_findings(Vec<RelatedFinding>)`](crate::client::fluent_builders::BatchUpdateFindings::related_findings) / [`set_related_findings(Option<Vec<RelatedFinding>>)`](crate::client::fluent_builders::BatchUpdateFindings::set_related_findings): <p>A list of findings that are related to the updated findings.</p>
    /// - On success, responds with [`BatchUpdateFindingsOutput`](crate::output::BatchUpdateFindingsOutput) with field(s):
    ///   - [`processed_findings(Option<Vec<AwsSecurityFindingIdentifier>>)`](crate::output::BatchUpdateFindingsOutput::processed_findings): <p>The list of findings that were updated successfully.</p>
    ///   - [`unprocessed_findings(Option<Vec<BatchUpdateFindingsUnprocessedFinding>>)`](crate::output::BatchUpdateFindingsOutput::unprocessed_findings): <p>The list of findings that were not updated.</p>
    /// - On failure, responds with [`SdkError<BatchUpdateFindingsError>`](crate::error::BatchUpdateFindingsError)
    pub fn batch_update_findings(&self) -> crate::client::fluent_builders::BatchUpdateFindings {
        crate::client::fluent_builders::BatchUpdateFindings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateActionTarget`](crate::client::fluent_builders::CreateActionTarget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateActionTarget::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateActionTarget::set_name): <p>The name of the custom action target. Can contain up to 20 characters.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateActionTarget::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateActionTarget::set_description): <p>The description for the custom action target.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::CreateActionTarget::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::CreateActionTarget::set_id): <p>The ID for the custom action target. Can contain up to 20 alphanumeric characters.</p>
    /// - On success, responds with [`CreateActionTargetOutput`](crate::output::CreateActionTargetOutput) with field(s):
    ///   - [`action_target_arn(Option<String>)`](crate::output::CreateActionTargetOutput::action_target_arn): <p>The ARN for the custom action target.</p>
    /// - On failure, responds with [`SdkError<CreateActionTargetError>`](crate::error::CreateActionTargetError)
    pub fn create_action_target(&self) -> crate::client::fluent_builders::CreateActionTarget {
        crate::client::fluent_builders::CreateActionTarget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFindingAggregator`](crate::client::fluent_builders::CreateFindingAggregator) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`region_linking_mode(impl Into<String>)`](crate::client::fluent_builders::CreateFindingAggregator::region_linking_mode) / [`set_region_linking_mode(Option<String>)`](crate::client::fluent_builders::CreateFindingAggregator::set_region_linking_mode): <p>Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.</p>  <p>The selected option also determines how to use the Regions provided in the Regions list.</p>  <p>The options are as follows:</p>  <ul>   <li> <p> <code>ALL_REGIONS</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>ALL_REGIONS_EXCEPT_SPECIFIED</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the <code>Regions</code> parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>SPECIFIED_REGIONS</code> - Indicates to aggregate findings only from the Regions listed in the <code>Regions</code> parameter. Security Hub does not automatically aggregate findings from new Regions. </p> </li>  </ul>
    ///   - [`regions(Vec<String>)`](crate::client::fluent_builders::CreateFindingAggregator::regions) / [`set_regions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateFindingAggregator::set_regions): <p>If <code>RegionLinkingMode</code> is <code>ALL_REGIONS_EXCEPT_SPECIFIED</code>, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.</p>  <p>If <code>RegionLinkingMode</code> is <code>SPECIFIED_REGIONS</code>, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region. </p>
    /// - On success, responds with [`CreateFindingAggregatorOutput`](crate::output::CreateFindingAggregatorOutput) with field(s):
    ///   - [`finding_aggregator_arn(Option<String>)`](crate::output::CreateFindingAggregatorOutput::finding_aggregator_arn): <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and stop finding aggregation.</p>
    ///   - [`finding_aggregation_region(Option<String>)`](crate::output::CreateFindingAggregatorOutput::finding_aggregation_region): <p>The aggregation Region.</p>
    ///   - [`region_linking_mode(Option<String>)`](crate::output::CreateFindingAggregatorOutput::region_linking_mode): <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    ///   - [`regions(Option<Vec<String>>)`](crate::output::CreateFindingAggregatorOutput::regions): <p>The list of excluded Regions or included Regions.</p>
    /// - On failure, responds with [`SdkError<CreateFindingAggregatorError>`](crate::error::CreateFindingAggregatorError)
    pub fn create_finding_aggregator(
        &self,
    ) -> crate::client::fluent_builders::CreateFindingAggregator {
        crate::client::fluent_builders::CreateFindingAggregator::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateInsight`](crate::client::fluent_builders::CreateInsight) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateInsight::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateInsight::set_name): <p>The name of the custom insight to create.</p>
    ///   - [`filters(AwsSecurityFindingFilters)`](crate::client::fluent_builders::CreateInsight::filters) / [`set_filters(Option<AwsSecurityFindingFilters>)`](crate::client::fluent_builders::CreateInsight::set_filters): <p>One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.</p>
    ///   - [`group_by_attribute(impl Into<String>)`](crate::client::fluent_builders::CreateInsight::group_by_attribute) / [`set_group_by_attribute(Option<String>)`](crate::client::fluent_builders::CreateInsight::set_group_by_attribute): <p>The attribute used to group the findings for the insight. The grouping attribute identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.</p>
    /// - On success, responds with [`CreateInsightOutput`](crate::output::CreateInsightOutput) with field(s):
    ///   - [`insight_arn(Option<String>)`](crate::output::CreateInsightOutput::insight_arn): <p>The ARN of the insight created.</p>
    /// - On failure, responds with [`SdkError<CreateInsightError>`](crate::error::CreateInsightError)
    pub fn create_insight(&self) -> crate::client::fluent_builders::CreateInsight {
        crate::client::fluent_builders::CreateInsight::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMembers`](crate::client::fluent_builders::CreateMembers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_details(Vec<AccountDetails>)`](crate::client::fluent_builders::CreateMembers::account_details) / [`set_account_details(Option<Vec<AccountDetails>>)`](crate::client::fluent_builders::CreateMembers::set_account_details): <p>The list of accounts to associate with the Security Hub administrator account. For each account, the list includes the account ID and optionally the email address.</p>
    /// - On success, responds with [`CreateMembersOutput`](crate::output::CreateMembersOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::CreateMembersOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts that were not processed. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<CreateMembersError>`](crate::error::CreateMembersError)
    pub fn create_members(&self) -> crate::client::fluent_builders::CreateMembers {
        crate::client::fluent_builders::CreateMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeclineInvitations`](crate::client::fluent_builders::DeclineInvitations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::DeclineInvitations::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DeclineInvitations::set_account_ids): <p>The list of account IDs for the accounts from which to decline the invitations to Security Hub.</p>
    /// - On success, responds with [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::DeclineInvitationsOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts that were not processed. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<DeclineInvitationsError>`](crate::error::DeclineInvitationsError)
    pub fn decline_invitations(&self) -> crate::client::fluent_builders::DeclineInvitations {
        crate::client::fluent_builders::DeclineInvitations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteActionTarget`](crate::client::fluent_builders::DeleteActionTarget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_target_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteActionTarget::action_target_arn) / [`set_action_target_arn(Option<String>)`](crate::client::fluent_builders::DeleteActionTarget::set_action_target_arn): <p>The ARN of the custom action target to delete.</p>
    /// - On success, responds with [`DeleteActionTargetOutput`](crate::output::DeleteActionTargetOutput) with field(s):
    ///   - [`action_target_arn(Option<String>)`](crate::output::DeleteActionTargetOutput::action_target_arn): <p>The ARN of the custom action target that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteActionTargetError>`](crate::error::DeleteActionTargetError)
    pub fn delete_action_target(&self) -> crate::client::fluent_builders::DeleteActionTarget {
        crate::client::fluent_builders::DeleteActionTarget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFindingAggregator`](crate::client::fluent_builders::DeleteFindingAggregator) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`finding_aggregator_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteFindingAggregator::finding_aggregator_arn) / [`set_finding_aggregator_arn(Option<String>)`](crate::client::fluent_builders::DeleteFindingAggregator::set_finding_aggregator_arn): <p>The ARN of the finding aggregator to delete. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
    /// - On success, responds with [`DeleteFindingAggregatorOutput`](crate::output::DeleteFindingAggregatorOutput)

    /// - On failure, responds with [`SdkError<DeleteFindingAggregatorError>`](crate::error::DeleteFindingAggregatorError)
    pub fn delete_finding_aggregator(
        &self,
    ) -> crate::client::fluent_builders::DeleteFindingAggregator {
        crate::client::fluent_builders::DeleteFindingAggregator::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteInsight`](crate::client::fluent_builders::DeleteInsight) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`insight_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteInsight::insight_arn) / [`set_insight_arn(Option<String>)`](crate::client::fluent_builders::DeleteInsight::set_insight_arn): <p>The ARN of the insight to delete.</p>
    /// - On success, responds with [`DeleteInsightOutput`](crate::output::DeleteInsightOutput) with field(s):
    ///   - [`insight_arn(Option<String>)`](crate::output::DeleteInsightOutput::insight_arn): <p>The ARN of the insight that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteInsightError>`](crate::error::DeleteInsightError)
    pub fn delete_insight(&self) -> crate::client::fluent_builders::DeleteInsight {
        crate::client::fluent_builders::DeleteInsight::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteInvitations`](crate::client::fluent_builders::DeleteInvitations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::DeleteInvitations::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DeleteInvitations::set_account_ids): <p>The list of the account IDs that sent the invitations to delete.</p>
    /// - On success, responds with [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::DeleteInvitationsOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts for which the invitations were not deleted. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<DeleteInvitationsError>`](crate::error::DeleteInvitationsError)
    pub fn delete_invitations(&self) -> crate::client::fluent_builders::DeleteInvitations {
        crate::client::fluent_builders::DeleteInvitations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMembers`](crate::client::fluent_builders::DeleteMembers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::DeleteMembers::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DeleteMembers::set_account_ids): <p>The list of account IDs for the member accounts to delete.</p>
    /// - On success, responds with [`DeleteMembersOutput`](crate::output::DeleteMembersOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::DeleteMembersOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts that were not deleted. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<DeleteMembersError>`](crate::error::DeleteMembersError)
    pub fn delete_members(&self) -> crate::client::fluent_builders::DeleteMembers {
        crate::client::fluent_builders::DeleteMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeActionTargets`](crate::client::fluent_builders::DescribeActionTargets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeActionTargets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_target_arns(Vec<String>)`](crate::client::fluent_builders::DescribeActionTargets::action_target_arns) / [`set_action_target_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeActionTargets::set_action_target_arns): <p>A list of custom action target ARNs for the custom action targets to retrieve.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeActionTargets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeActionTargets::set_next_token): <p>The token that is required for pagination. On your first call to the <code>DescribeActionTargets</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeActionTargets::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeActionTargets::set_max_results): <p>The maximum number of results to return.</p>
    /// - On success, responds with [`DescribeActionTargetsOutput`](crate::output::DescribeActionTargetsOutput) with field(s):
    ///   - [`action_targets(Option<Vec<ActionTarget>>)`](crate::output::DescribeActionTargetsOutput::action_targets): <p>A list of <code>ActionTarget</code> objects. Each object includes the <code>ActionTargetArn</code>, <code>Description</code>, and <code>Name</code> of a custom action target available in Security Hub.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeActionTargetsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<DescribeActionTargetsError>`](crate::error::DescribeActionTargetsError)
    pub fn describe_action_targets(&self) -> crate::client::fluent_builders::DescribeActionTargets {
        crate::client::fluent_builders::DescribeActionTargets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeHub`](crate::client::fluent_builders::DescribeHub) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`hub_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeHub::hub_arn) / [`set_hub_arn(Option<String>)`](crate::client::fluent_builders::DescribeHub::set_hub_arn): <p>The ARN of the Hub resource to retrieve.</p>
    /// - On success, responds with [`DescribeHubOutput`](crate::output::DescribeHubOutput) with field(s):
    ///   - [`hub_arn(Option<String>)`](crate::output::DescribeHubOutput::hub_arn): <p>The ARN of the Hub resource that was retrieved.</p>
    ///   - [`subscribed_at(Option<String>)`](crate::output::DescribeHubOutput::subscribed_at): <p>The date and time when Security Hub was enabled in the account.</p>
    ///   - [`auto_enable_controls(bool)`](crate::output::DescribeHubOutput::auto_enable_controls): <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>  <p>If set to <code>true</code>, then new controls for enabled standards are enabled automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    /// - On failure, responds with [`SdkError<DescribeHubError>`](crate::error::DescribeHubError)
    pub fn describe_hub(&self) -> crate::client::fluent_builders::DescribeHub {
        crate::client::fluent_builders::DescribeHub::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeOrganizationConfiguration`](crate::client::fluent_builders::DescribeOrganizationConfiguration) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeOrganizationConfiguration::send) it.

    /// - On success, responds with [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput) with field(s):
    ///   - [`auto_enable(bool)`](crate::output::DescribeOrganizationConfigurationOutput::auto_enable): <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>  <p>If set to <code>true</code>, then Security Hub is enabled for new accounts. If set to false, then new accounts are not added automatically.</p>
    ///   - [`member_account_limit_reached(bool)`](crate::output::DescribeOrganizationConfigurationOutput::member_account_limit_reached): <p>Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator account.</p>
    ///   - [`auto_enable_standards(Option<AutoEnableStandards>)`](crate::output::DescribeOrganizationConfigurationOutput::auto_enable_standards): <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> for new member accounts in the organization.</p>  <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>  <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// - On failure, responds with [`SdkError<DescribeOrganizationConfigurationError>`](crate::error::DescribeOrganizationConfigurationError)
    pub fn describe_organization_configuration(
        &self,
    ) -> crate::client::fluent_builders::DescribeOrganizationConfiguration {
        crate::client::fluent_builders::DescribeOrganizationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeProducts`](crate::client::fluent_builders::DescribeProducts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeProducts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeProducts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeProducts::set_next_token): <p>The token that is required for pagination. On your first call to the <code>DescribeProducts</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeProducts::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeProducts::set_max_results): <p>The maximum number of results to return.</p>
    ///   - [`product_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeProducts::product_arn) / [`set_product_arn(Option<String>)`](crate::client::fluent_builders::DescribeProducts::set_product_arn): <p>The ARN of the integration to return.</p>
    /// - On success, responds with [`DescribeProductsOutput`](crate::output::DescribeProductsOutput) with field(s):
    ///   - [`products(Option<Vec<Product>>)`](crate::output::DescribeProductsOutput::products): <p>A list of products, including details for each product.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeProductsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<DescribeProductsError>`](crate::error::DescribeProductsError)
    pub fn describe_products(&self) -> crate::client::fluent_builders::DescribeProducts {
        crate::client::fluent_builders::DescribeProducts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStandards`](crate::client::fluent_builders::DescribeStandards) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeStandards::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeStandards::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeStandards::set_next_token): <p>The token that is required for pagination. On your first call to the <code>DescribeStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeStandards::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeStandards::set_max_results): <p>The maximum number of standards to return.</p>
    /// - On success, responds with [`DescribeStandardsOutput`](crate::output::DescribeStandardsOutput) with field(s):
    ///   - [`standards(Option<Vec<Standard>>)`](crate::output::DescribeStandardsOutput::standards): <p>A list of available standards.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeStandardsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<DescribeStandardsError>`](crate::error::DescribeStandardsError)
    pub fn describe_standards(&self) -> crate::client::fluent_builders::DescribeStandards {
        crate::client::fluent_builders::DescribeStandards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStandardsControls`](crate::client::fluent_builders::DescribeStandardsControls) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeStandardsControls::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`standards_subscription_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeStandardsControls::standards_subscription_arn) / [`set_standards_subscription_arn(Option<String>)`](crate::client::fluent_builders::DescribeStandardsControls::set_standards_subscription_arn): <p>The ARN of a resource that represents your subscription to a supported standard. To get the subscription ARNs of the standards you have enabled, use the <code>GetEnabledStandards</code> operation.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeStandardsControls::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeStandardsControls::set_next_token): <p>The token that is required for pagination. On your first call to the <code>DescribeStandardsControls</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeStandardsControls::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeStandardsControls::set_max_results): <p>The maximum number of security standard controls to return.</p>
    /// - On success, responds with [`DescribeStandardsControlsOutput`](crate::output::DescribeStandardsControlsOutput) with field(s):
    ///   - [`controls(Option<Vec<StandardsControl>>)`](crate::output::DescribeStandardsControlsOutput::controls): <p>A list of security standards controls.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeStandardsControlsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<DescribeStandardsControlsError>`](crate::error::DescribeStandardsControlsError)
    pub fn describe_standards_controls(
        &self,
    ) -> crate::client::fluent_builders::DescribeStandardsControls {
        crate::client::fluent_builders::DescribeStandardsControls::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableImportFindingsForProduct`](crate::client::fluent_builders::DisableImportFindingsForProduct) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`product_subscription_arn(impl Into<String>)`](crate::client::fluent_builders::DisableImportFindingsForProduct::product_subscription_arn) / [`set_product_subscription_arn(Option<String>)`](crate::client::fluent_builders::DisableImportFindingsForProduct::set_product_subscription_arn): <p>The ARN of the integrated product to disable the integration for.</p>
    /// - On success, responds with [`DisableImportFindingsForProductOutput`](crate::output::DisableImportFindingsForProductOutput)

    /// - On failure, responds with [`SdkError<DisableImportFindingsForProductError>`](crate::error::DisableImportFindingsForProductError)
    pub fn disable_import_findings_for_product(
        &self,
    ) -> crate::client::fluent_builders::DisableImportFindingsForProduct {
        crate::client::fluent_builders::DisableImportFindingsForProduct::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableOrganizationAdminAccount`](crate::client::fluent_builders::DisableOrganizationAdminAccount) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`admin_account_id(impl Into<String>)`](crate::client::fluent_builders::DisableOrganizationAdminAccount::admin_account_id) / [`set_admin_account_id(Option<String>)`](crate::client::fluent_builders::DisableOrganizationAdminAccount::set_admin_account_id): <p>The Amazon Web Services account identifier of the Security Hub administrator account.</p>
    /// - On success, responds with [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput)

    /// - On failure, responds with [`SdkError<DisableOrganizationAdminAccountError>`](crate::error::DisableOrganizationAdminAccountError)
    pub fn disable_organization_admin_account(
        &self,
    ) -> crate::client::fluent_builders::DisableOrganizationAdminAccount {
        crate::client::fluent_builders::DisableOrganizationAdminAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableSecurityHub`](crate::client::fluent_builders::DisableSecurityHub) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DisableSecurityHub::send) it.

    /// - On success, responds with [`DisableSecurityHubOutput`](crate::output::DisableSecurityHubOutput)

    /// - On failure, responds with [`SdkError<DisableSecurityHubError>`](crate::error::DisableSecurityHubError)
    pub fn disable_security_hub(&self) -> crate::client::fluent_builders::DisableSecurityHub {
        crate::client::fluent_builders::DisableSecurityHub::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateFromAdministratorAccount`](crate::client::fluent_builders::DisassociateFromAdministratorAccount) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DisassociateFromAdministratorAccount::send) it.

    /// - On success, responds with [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput)

    /// - On failure, responds with [`SdkError<DisassociateFromAdministratorAccountError>`](crate::error::DisassociateFromAdministratorAccountError)
    pub fn disassociate_from_administrator_account(
        &self,
    ) -> crate::client::fluent_builders::DisassociateFromAdministratorAccount {
        crate::client::fluent_builders::DisassociateFromAdministratorAccount::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DisassociateFromMasterAccount`](crate::client::fluent_builders::DisassociateFromMasterAccount) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DisassociateFromMasterAccount::send) it.

    /// - On success, responds with [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput)

    /// - On failure, responds with [`SdkError<DisassociateFromMasterAccountError>`](crate::error::DisassociateFromMasterAccountError)
    #[deprecated(
        note = "This API has been deprecated, use DisassociateFromAdministratorAccount API instead."
    )]
    pub fn disassociate_from_master_account(
        &self,
    ) -> crate::client::fluent_builders::DisassociateFromMasterAccount {
        crate::client::fluent_builders::DisassociateFromMasterAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateMembers`](crate::client::fluent_builders::DisassociateMembers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::DisassociateMembers::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DisassociateMembers::set_account_ids): <p>The account IDs of the member accounts to disassociate from the administrator account.</p>
    /// - On success, responds with [`DisassociateMembersOutput`](crate::output::DisassociateMembersOutput)

    /// - On failure, responds with [`SdkError<DisassociateMembersError>`](crate::error::DisassociateMembersError)
    pub fn disassociate_members(&self) -> crate::client::fluent_builders::DisassociateMembers {
        crate::client::fluent_builders::DisassociateMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableImportFindingsForProduct`](crate::client::fluent_builders::EnableImportFindingsForProduct) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`product_arn(impl Into<String>)`](crate::client::fluent_builders::EnableImportFindingsForProduct::product_arn) / [`set_product_arn(Option<String>)`](crate::client::fluent_builders::EnableImportFindingsForProduct::set_product_arn): <p>The ARN of the product to enable the integration for.</p>
    /// - On success, responds with [`EnableImportFindingsForProductOutput`](crate::output::EnableImportFindingsForProductOutput) with field(s):
    ///   - [`product_subscription_arn(Option<String>)`](crate::output::EnableImportFindingsForProductOutput::product_subscription_arn): <p>The ARN of your subscription to the product to enable integrations for.</p>
    /// - On failure, responds with [`SdkError<EnableImportFindingsForProductError>`](crate::error::EnableImportFindingsForProductError)
    pub fn enable_import_findings_for_product(
        &self,
    ) -> crate::client::fluent_builders::EnableImportFindingsForProduct {
        crate::client::fluent_builders::EnableImportFindingsForProduct::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableOrganizationAdminAccount`](crate::client::fluent_builders::EnableOrganizationAdminAccount) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`admin_account_id(impl Into<String>)`](crate::client::fluent_builders::EnableOrganizationAdminAccount::admin_account_id) / [`set_admin_account_id(Option<String>)`](crate::client::fluent_builders::EnableOrganizationAdminAccount::set_admin_account_id): <p>The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account.</p>
    /// - On success, responds with [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput)

    /// - On failure, responds with [`SdkError<EnableOrganizationAdminAccountError>`](crate::error::EnableOrganizationAdminAccountError)
    pub fn enable_organization_admin_account(
        &self,
    ) -> crate::client::fluent_builders::EnableOrganizationAdminAccount {
        crate::client::fluent_builders::EnableOrganizationAdminAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableSecurityHub`](crate::client::fluent_builders::EnableSecurityHub) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::EnableSecurityHub::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::EnableSecurityHub::set_tags): <p>The tags to add to the hub resource when you enable Security Hub.</p>
    ///   - [`enable_default_standards(bool)`](crate::client::fluent_builders::EnableSecurityHub::enable_default_standards) / [`set_enable_default_standards(bool)`](crate::client::fluent_builders::EnableSecurityHub::set_enable_default_standards): <p>Whether to enable the security standards that Security Hub has designated as automatically enabled. If you do not provide a value for <code>EnableDefaultStandards</code>, it is set to <code>true</code>. To not enable the automatically enabled standards, set <code>EnableDefaultStandards</code> to <code>false</code>.</p>
    /// - On success, responds with [`EnableSecurityHubOutput`](crate::output::EnableSecurityHubOutput)

    /// - On failure, responds with [`SdkError<EnableSecurityHubError>`](crate::error::EnableSecurityHubError)
    pub fn enable_security_hub(&self) -> crate::client::fluent_builders::EnableSecurityHub {
        crate::client::fluent_builders::EnableSecurityHub::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAdministratorAccount`](crate::client::fluent_builders::GetAdministratorAccount) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetAdministratorAccount::send) it.

    /// - On success, responds with [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput) with field(s):
    ///   - [`administrator(Option<Invitation>)`](crate::output::GetAdministratorAccountOutput::administrator): <p>Details about an invitation.</p>
    /// - On failure, responds with [`SdkError<GetAdministratorAccountError>`](crate::error::GetAdministratorAccountError)
    pub fn get_administrator_account(
        &self,
    ) -> crate::client::fluent_builders::GetAdministratorAccount {
        crate::client::fluent_builders::GetAdministratorAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEnabledStandards`](crate::client::fluent_builders::GetEnabledStandards) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetEnabledStandards::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`standards_subscription_arns(Vec<String>)`](crate::client::fluent_builders::GetEnabledStandards::standards_subscription_arns) / [`set_standards_subscription_arns(Option<Vec<String>>)`](crate::client::fluent_builders::GetEnabledStandards::set_standards_subscription_arns): <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetEnabledStandards::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetEnabledStandards::set_next_token): <p>The token that is required for pagination. On your first call to the <code>GetEnabledStandards</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetEnabledStandards::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetEnabledStandards::set_max_results): <p>The maximum number of results to return in the response.</p>
    /// - On success, responds with [`GetEnabledStandardsOutput`](crate::output::GetEnabledStandardsOutput) with field(s):
    ///   - [`standards_subscriptions(Option<Vec<StandardsSubscription>>)`](crate::output::GetEnabledStandardsOutput::standards_subscriptions): <p>The list of <code>StandardsSubscriptions</code> objects that include information about the enabled standards.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetEnabledStandardsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetEnabledStandardsError>`](crate::error::GetEnabledStandardsError)
    pub fn get_enabled_standards(&self) -> crate::client::fluent_builders::GetEnabledStandards {
        crate::client::fluent_builders::GetEnabledStandards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetFindingAggregator`](crate::client::fluent_builders::GetFindingAggregator) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`finding_aggregator_arn(impl Into<String>)`](crate::client::fluent_builders::GetFindingAggregator::finding_aggregator_arn) / [`set_finding_aggregator_arn(Option<String>)`](crate::client::fluent_builders::GetFindingAggregator::set_finding_aggregator_arn): <p>The ARN of the finding aggregator to return details for. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
    /// - On success, responds with [`GetFindingAggregatorOutput`](crate::output::GetFindingAggregatorOutput) with field(s):
    ///   - [`finding_aggregator_arn(Option<String>)`](crate::output::GetFindingAggregatorOutput::finding_aggregator_arn): <p>The ARN of the finding aggregator.</p>
    ///   - [`finding_aggregation_region(Option<String>)`](crate::output::GetFindingAggregatorOutput::finding_aggregation_region): <p>The aggregation Region.</p>
    ///   - [`region_linking_mode(Option<String>)`](crate::output::GetFindingAggregatorOutput::region_linking_mode): <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    ///   - [`regions(Option<Vec<String>>)`](crate::output::GetFindingAggregatorOutput::regions): <p>The list of excluded Regions or included Regions.</p>
    /// - On failure, responds with [`SdkError<GetFindingAggregatorError>`](crate::error::GetFindingAggregatorError)
    pub fn get_finding_aggregator(&self) -> crate::client::fluent_builders::GetFindingAggregator {
        crate::client::fluent_builders::GetFindingAggregator::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetFindings`](crate::client::fluent_builders::GetFindings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetFindings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(AwsSecurityFindingFilters)`](crate::client::fluent_builders::GetFindings::filters) / [`set_filters(Option<AwsSecurityFindingFilters>)`](crate::client::fluent_builders::GetFindings::set_filters): <p>The finding attributes used to define a condition to filter the returned findings.</p>  <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to 20 filter values.</p>  <p>Note that in the available filter fields, <code>WorkflowState</code> is deprecated. To search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    ///   - [`sort_criteria(Vec<SortCriterion>)`](crate::client::fluent_builders::GetFindings::sort_criteria) / [`set_sort_criteria(Option<Vec<SortCriterion>>)`](crate::client::fluent_builders::GetFindings::set_sort_criteria): <p>The finding attributes used to sort the list of returned findings.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetFindings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetFindings::set_next_token): <p>The token that is required for pagination. On your first call to the <code>GetFindings</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetFindings::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetFindings::set_max_results): <p>The maximum number of findings to return.</p>
    /// - On success, responds with [`GetFindingsOutput`](crate::output::GetFindingsOutput) with field(s):
    ///   - [`findings(Option<Vec<AwsSecurityFinding>>)`](crate::output::GetFindingsOutput::findings): <p>The findings that matched the filters specified in the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetFindingsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetFindingsError>`](crate::error::GetFindingsError)
    pub fn get_findings(&self) -> crate::client::fluent_builders::GetFindings {
        crate::client::fluent_builders::GetFindings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetInsightResults`](crate::client::fluent_builders::GetInsightResults) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`insight_arn(impl Into<String>)`](crate::client::fluent_builders::GetInsightResults::insight_arn) / [`set_insight_arn(Option<String>)`](crate::client::fluent_builders::GetInsightResults::set_insight_arn): <p>The ARN of the insight for which to return results.</p>
    /// - On success, responds with [`GetInsightResultsOutput`](crate::output::GetInsightResultsOutput) with field(s):
    ///   - [`insight_results(Option<InsightResults>)`](crate::output::GetInsightResultsOutput::insight_results): <p>The insight results returned by the operation.</p>
    /// - On failure, responds with [`SdkError<GetInsightResultsError>`](crate::error::GetInsightResultsError)
    pub fn get_insight_results(&self) -> crate::client::fluent_builders::GetInsightResults {
        crate::client::fluent_builders::GetInsightResults::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetInsights`](crate::client::fluent_builders::GetInsights) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetInsights::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`insight_arns(Vec<String>)`](crate::client::fluent_builders::GetInsights::insight_arns) / [`set_insight_arns(Option<Vec<String>>)`](crate::client::fluent_builders::GetInsights::set_insight_arns): <p>The ARNs of the insights to describe. If you do not provide any insight ARNs, then <code>GetInsights</code> returns all of your custom insights. It does not return any managed insights.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetInsights::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetInsights::set_next_token): <p>The token that is required for pagination. On your first call to the <code>GetInsights</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetInsights::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetInsights::set_max_results): <p>The maximum number of items to return in the response.</p>
    /// - On success, responds with [`GetInsightsOutput`](crate::output::GetInsightsOutput) with field(s):
    ///   - [`insights(Option<Vec<Insight>>)`](crate::output::GetInsightsOutput::insights): <p>The insights returned by the operation.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetInsightsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<GetInsightsError>`](crate::error::GetInsightsError)
    pub fn get_insights(&self) -> crate::client::fluent_builders::GetInsights {
        crate::client::fluent_builders::GetInsights::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetInvitationsCount`](crate::client::fluent_builders::GetInvitationsCount) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetInvitationsCount::send) it.

    /// - On success, responds with [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput) with field(s):
    ///   - [`invitations_count(i32)`](crate::output::GetInvitationsCountOutput::invitations_count): <p>The number of all membership invitations sent to this Security Hub member account, not including the currently accepted invitation.</p>
    /// - On failure, responds with [`SdkError<GetInvitationsCountError>`](crate::error::GetInvitationsCountError)
    pub fn get_invitations_count(&self) -> crate::client::fluent_builders::GetInvitationsCount {
        crate::client::fluent_builders::GetInvitationsCount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMasterAccount`](crate::client::fluent_builders::GetMasterAccount) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetMasterAccount::send) it.

    /// - On success, responds with [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput) with field(s):
    ///   - [`master(Option<Invitation>)`](crate::output::GetMasterAccountOutput::master): <p>A list of details about the Security Hub administrator account for the current member account. </p>
    /// - On failure, responds with [`SdkError<GetMasterAccountError>`](crate::error::GetMasterAccountError)
    #[deprecated(note = "This API has been deprecated, use GetAdministratorAccount API instead.")]
    pub fn get_master_account(&self) -> crate::client::fluent_builders::GetMasterAccount {
        crate::client::fluent_builders::GetMasterAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMembers`](crate::client::fluent_builders::GetMembers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::GetMembers::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetMembers::set_account_ids): <p>The list of account IDs for the Security Hub member accounts to return the details for. </p>
    /// - On success, responds with [`GetMembersOutput`](crate::output::GetMembersOutput) with field(s):
    ///   - [`members(Option<Vec<Member>>)`](crate::output::GetMembersOutput::members): <p>The list of details about the Security Hub member accounts.</p>
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::GetMembersOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts that could not be processed. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<GetMembersError>`](crate::error::GetMembersError)
    pub fn get_members(&self) -> crate::client::fluent_builders::GetMembers {
        crate::client::fluent_builders::GetMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InviteMembers`](crate::client::fluent_builders::InviteMembers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::InviteMembers::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::InviteMembers::set_account_ids): <p>The list of account IDs of the Amazon Web Services accounts to invite to Security Hub as members. </p>
    /// - On success, responds with [`InviteMembersOutput`](crate::output::InviteMembersOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec<Result>>)`](crate::output::InviteMembersOutput::unprocessed_accounts): <p>The list of Amazon Web Services accounts that could not be processed. For each account, the list includes the account ID and the email address.</p>
    /// - On failure, responds with [`SdkError<InviteMembersError>`](crate::error::InviteMembersError)
    pub fn invite_members(&self) -> crate::client::fluent_builders::InviteMembers {
        crate::client::fluent_builders::InviteMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEnabledProductsForImport`](crate::client::fluent_builders::ListEnabledProductsForImport) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEnabledProductsForImport::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEnabledProductsForImport::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEnabledProductsForImport::set_next_token): <p>The token that is required for pagination. On your first call to the <code>ListEnabledProductsForImport</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEnabledProductsForImport::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListEnabledProductsForImport::set_max_results): <p>The maximum number of items to return in the response.</p>
    /// - On success, responds with [`ListEnabledProductsForImportOutput`](crate::output::ListEnabledProductsForImportOutput) with field(s):
    ///   - [`product_subscriptions(Option<Vec<String>>)`](crate::output::ListEnabledProductsForImportOutput::product_subscriptions): <p>The list of ARNs for the resources that represent your subscriptions to products. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEnabledProductsForImportOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListEnabledProductsForImportError>`](crate::error::ListEnabledProductsForImportError)
    pub fn list_enabled_products_for_import(
        &self,
    ) -> crate::client::fluent_builders::ListEnabledProductsForImport {
        crate::client::fluent_builders::ListEnabledProductsForImport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFindingAggregators`](crate::client::fluent_builders::ListFindingAggregators) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFindingAggregators::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFindingAggregators::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFindingAggregators::set_next_token): <p>The token returned with the previous set of results. Identifies the next set of results to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFindingAggregators::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListFindingAggregators::set_max_results): <p>The maximum number of results to return. This operation currently only returns a single result.</p>
    /// - On success, responds with [`ListFindingAggregatorsOutput`](crate::output::ListFindingAggregatorsOutput) with field(s):
    ///   - [`finding_aggregators(Option<Vec<FindingAggregator>>)`](crate::output::ListFindingAggregatorsOutput::finding_aggregators): <p>The list of finding aggregators. This operation currently only returns a single result.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFindingAggregatorsOutput::next_token): <p>If there are more results, this is the token to provide in the next call to <code>ListFindingAggregators</code>.</p>  <p>This operation currently only returns a single result. </p>
    /// - On failure, responds with [`SdkError<ListFindingAggregatorsError>`](crate::error::ListFindingAggregatorsError)
    pub fn list_finding_aggregators(
        &self,
    ) -> crate::client::fluent_builders::ListFindingAggregators {
        crate::client::fluent_builders::ListFindingAggregators::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListInvitations`](crate::client::fluent_builders::ListInvitations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListInvitations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListInvitations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListInvitations::set_max_results): <p>The maximum number of items to return in the response. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListInvitations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListInvitations::set_next_token): <p>The token that is required for pagination. On your first call to the <code>ListInvitations</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    /// - On success, responds with [`ListInvitationsOutput`](crate::output::ListInvitationsOutput) with field(s):
    ///   - [`invitations(Option<Vec<Invitation>>)`](crate::output::ListInvitationsOutput::invitations): <p>The details of the invitations returned by the operation.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListInvitationsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListInvitationsError>`](crate::error::ListInvitationsError)
    pub fn list_invitations(&self) -> crate::client::fluent_builders::ListInvitations {
        crate::client::fluent_builders::ListInvitations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMembers`](crate::client::fluent_builders::ListMembers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMembers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`only_associated(bool)`](crate::client::fluent_builders::ListMembers::only_associated) / [`set_only_associated(bool)`](crate::client::fluent_builders::ListMembers::set_only_associated): <p>Specifies which member accounts to include in the response based on their relationship status with the administrator account. The default value is <code>TRUE</code>.</p>  <p>If <code>OnlyAssociated</code> is set to <code>TRUE</code>, the response includes member accounts whose relationship status with the administrator account is set to <code>ENABLED</code>.</p>  <p>If <code>OnlyAssociated</code> is set to <code>FALSE</code>, the response includes all existing member accounts. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMembers::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListMembers::set_max_results): <p>The maximum number of items to return in the response. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMembers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMembers::set_next_token): <p>The token that is required for pagination. On your first call to the <code>ListMembers</code> operation, set the value of this parameter to <code>NULL</code>.</p>  <p>For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.</p>
    /// - On success, responds with [`ListMembersOutput`](crate::output::ListMembersOutput) with field(s):
    ///   - [`members(Option<Vec<Member>>)`](crate::output::ListMembersOutput::members): <p>Member details returned by the operation.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListMembersOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListMembersError>`](crate::error::ListMembersError)
    pub fn list_members(&self) -> crate::client::fluent_builders::ListMembers {
        crate::client::fluent_builders::ListMembers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOrganizationAdminAccounts`](crate::client::fluent_builders::ListOrganizationAdminAccounts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListOrganizationAdminAccounts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListOrganizationAdminAccounts::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListOrganizationAdminAccounts::set_max_results): <p>The maximum number of items to return in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListOrganizationAdminAccounts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListOrganizationAdminAccounts::set_next_token): <p>The token that is required for pagination. On your first call to the <code>ListOrganizationAdminAccounts</code> operation, set the value of this parameter to <code>NULL</code>. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response. </p>
    /// - On success, responds with [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput) with field(s):
    ///   - [`admin_accounts(Option<Vec<AdminAccount>>)`](crate::output::ListOrganizationAdminAccountsOutput::admin_accounts): <p>The list of Security Hub administrator accounts.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListOrganizationAdminAccountsOutput::next_token): <p>The pagination token to use to request the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListOrganizationAdminAccountsError>`](crate::error::ListOrganizationAdminAccountsError)
    pub fn list_organization_admin_accounts(
        &self,
    ) -> crate::client::fluent_builders::ListOrganizationAdminAccounts {
        crate::client::fluent_builders::ListOrganizationAdminAccounts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource to retrieve tags for.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags associated with a resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource to apply the tags to.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to add to the resource. You can add up to 50 tags at a time. The tag keys can be no longer than 128 characters. The tag values can be no longer than 256 characters.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource to remove the tags from.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys associated with the tags to remove from the resource. You can remove up to 50 tags at a time.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateActionTarget`](crate::client::fluent_builders::UpdateActionTarget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action_target_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateActionTarget::action_target_arn) / [`set_action_target_arn(Option<String>)`](crate::client::fluent_builders::UpdateActionTarget::set_action_target_arn): <p>The ARN of the custom action target to update.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateActionTarget::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateActionTarget::set_name): <p>The updated name of the custom action target.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateActionTarget::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateActionTarget::set_description): <p>The updated description for the custom action target.</p>
    /// - On success, responds with [`UpdateActionTargetOutput`](crate::output::UpdateActionTargetOutput)

    /// - On failure, responds with [`SdkError<UpdateActionTargetError>`](crate::error::UpdateActionTargetError)
    pub fn update_action_target(&self) -> crate::client::fluent_builders::UpdateActionTarget {
        crate::client::fluent_builders::UpdateActionTarget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFindingAggregator`](crate::client::fluent_builders::UpdateFindingAggregator) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`finding_aggregator_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFindingAggregator::finding_aggregator_arn) / [`set_finding_aggregator_arn(Option<String>)`](crate::client::fluent_builders::UpdateFindingAggregator::set_finding_aggregator_arn): <p>The ARN of the finding aggregator. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
    ///   - [`region_linking_mode(impl Into<String>)`](crate::client::fluent_builders::UpdateFindingAggregator::region_linking_mode) / [`set_region_linking_mode(Option<String>)`](crate::client::fluent_builders::UpdateFindingAggregator::set_region_linking_mode): <p>Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.</p>  <p>The selected option also determines how to use the Regions provided in the Regions list.</p>  <p>The options are as follows:</p>  <ul>   <li> <p> <code>ALL_REGIONS</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>ALL_REGIONS_EXCEPT_SPECIFIED</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the <code>Regions</code> parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. </p> </li>   <li> <p> <code>SPECIFIED_REGIONS</code> - Indicates to aggregate findings only from the Regions listed in the <code>Regions</code> parameter. Security Hub does not automatically aggregate findings from new Regions. </p> </li>  </ul>
    ///   - [`regions(Vec<String>)`](crate::client::fluent_builders::UpdateFindingAggregator::regions) / [`set_regions(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateFindingAggregator::set_regions): <p>If <code>RegionLinkingMode</code> is <code>ALL_REGIONS_EXCEPT_SPECIFIED</code>, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.</p>  <p>If <code>RegionLinkingMode</code> is <code>SPECIFIED_REGIONS</code>, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.</p>
    /// - On success, responds with [`UpdateFindingAggregatorOutput`](crate::output::UpdateFindingAggregatorOutput) with field(s):
    ///   - [`finding_aggregator_arn(Option<String>)`](crate::output::UpdateFindingAggregatorOutput::finding_aggregator_arn): <p>The ARN of the finding aggregator.</p>
    ///   - [`finding_aggregation_region(Option<String>)`](crate::output::UpdateFindingAggregatorOutput::finding_aggregation_region): <p>The aggregation Region.</p>
    ///   - [`region_linking_mode(Option<String>)`](crate::output::UpdateFindingAggregatorOutput::region_linking_mode): <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
    ///   - [`regions(Option<Vec<String>>)`](crate::output::UpdateFindingAggregatorOutput::regions): <p>The list of excluded Regions or included Regions.</p>
    /// - On failure, responds with [`SdkError<UpdateFindingAggregatorError>`](crate::error::UpdateFindingAggregatorError)
    pub fn update_finding_aggregator(
        &self,
    ) -> crate::client::fluent_builders::UpdateFindingAggregator {
        crate::client::fluent_builders::UpdateFindingAggregator::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFindings`](crate::client::fluent_builders::UpdateFindings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(AwsSecurityFindingFilters)`](crate::client::fluent_builders::UpdateFindings::filters) / [`set_filters(Option<AwsSecurityFindingFilters>)`](crate::client::fluent_builders::UpdateFindings::set_filters): <p>A collection of attributes that specify which findings you want to update.</p>
    ///   - [`note(NoteUpdate)`](crate::client::fluent_builders::UpdateFindings::note) / [`set_note(Option<NoteUpdate>)`](crate::client::fluent_builders::UpdateFindings::set_note): <p>The updated note for the finding.</p>
    ///   - [`record_state(RecordState)`](crate::client::fluent_builders::UpdateFindings::record_state) / [`set_record_state(Option<RecordState>)`](crate::client::fluent_builders::UpdateFindings::set_record_state): <p>The updated record state for the finding.</p>
    /// - On success, responds with [`UpdateFindingsOutput`](crate::output::UpdateFindingsOutput)

    /// - On failure, responds with [`SdkError<UpdateFindingsError>`](crate::error::UpdateFindingsError)
    pub fn update_findings(&self) -> crate::client::fluent_builders::UpdateFindings {
        crate::client::fluent_builders::UpdateFindings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateInsight`](crate::client::fluent_builders::UpdateInsight) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`insight_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateInsight::insight_arn) / [`set_insight_arn(Option<String>)`](crate::client::fluent_builders::UpdateInsight::set_insight_arn): <p>The ARN of the insight that you want to update.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateInsight::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateInsight::set_name): <p>The updated name for the insight.</p>
    ///   - [`filters(AwsSecurityFindingFilters)`](crate::client::fluent_builders::UpdateInsight::filters) / [`set_filters(Option<AwsSecurityFindingFilters>)`](crate::client::fluent_builders::UpdateInsight::set_filters): <p>The updated filters that define this insight.</p>
    ///   - [`group_by_attribute(impl Into<String>)`](crate::client::fluent_builders::UpdateInsight::group_by_attribute) / [`set_group_by_attribute(Option<String>)`](crate::client::fluent_builders::UpdateInsight::set_group_by_attribute): <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    /// - On success, responds with [`UpdateInsightOutput`](crate::output::UpdateInsightOutput)

    /// - On failure, responds with [`SdkError<UpdateInsightError>`](crate::error::UpdateInsightError)
    pub fn update_insight(&self) -> crate::client::fluent_builders::UpdateInsight {
        crate::client::fluent_builders::UpdateInsight::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateOrganizationConfiguration`](crate::client::fluent_builders::UpdateOrganizationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_enable(bool)`](crate::client::fluent_builders::UpdateOrganizationConfiguration::auto_enable) / [`set_auto_enable(bool)`](crate::client::fluent_builders::UpdateOrganizationConfiguration::set_auto_enable): <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>  <p>By default, this is <code>false</code>, and new accounts are not added automatically.</p>  <p>To automatically enable Security Hub for new accounts, set this to <code>true</code>.</p>
    ///   - [`auto_enable_standards(AutoEnableStandards)`](crate::client::fluent_builders::UpdateOrganizationConfiguration::auto_enable_standards) / [`set_auto_enable_standards(Option<AutoEnableStandards>)`](crate::client::fluent_builders::UpdateOrganizationConfiguration::set_auto_enable_standards): <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> for new member accounts in the organization.</p>  <p>By default, this parameter is equal to <code>DEFAULT</code>, and new member accounts are automatically enabled with default Security Hub standards.</p>  <p>To opt out of enabling default standards for new member accounts, set this parameter equal to <code>NONE</code>.</p>
    /// - On success, responds with [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput)

    /// - On failure, responds with [`SdkError<UpdateOrganizationConfigurationError>`](crate::error::UpdateOrganizationConfigurationError)
    pub fn update_organization_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateOrganizationConfiguration {
        crate::client::fluent_builders::UpdateOrganizationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSecurityHubConfiguration`](crate::client::fluent_builders::UpdateSecurityHubConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_enable_controls(bool)`](crate::client::fluent_builders::UpdateSecurityHubConfiguration::auto_enable_controls) / [`set_auto_enable_controls(bool)`](crate::client::fluent_builders::UpdateSecurityHubConfiguration::set_auto_enable_controls): <p>Whether to automatically enable new controls when they are added to standards that are enabled.</p>  <p>By default, this is set to <code>true</code>, and new controls are enabled automatically. To not automatically enable new controls, set this to <code>false</code>. </p>
    /// - On success, responds with [`UpdateSecurityHubConfigurationOutput`](crate::output::UpdateSecurityHubConfigurationOutput)

    /// - On failure, responds with [`SdkError<UpdateSecurityHubConfigurationError>`](crate::error::UpdateSecurityHubConfigurationError)
    pub fn update_security_hub_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateSecurityHubConfiguration {
        crate::client::fluent_builders::UpdateSecurityHubConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateStandardsControl`](crate::client::fluent_builders::UpdateStandardsControl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`standards_control_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateStandardsControl::standards_control_arn) / [`set_standards_control_arn(Option<String>)`](crate::client::fluent_builders::UpdateStandardsControl::set_standards_control_arn): <p>The ARN of the security standard control to enable or disable.</p>
    ///   - [`control_status(ControlStatus)`](crate::client::fluent_builders::UpdateStandardsControl::control_status) / [`set_control_status(Option<ControlStatus>)`](crate::client::fluent_builders::UpdateStandardsControl::set_control_status): <p>The updated status of the security standard control.</p>
    ///   - [`disabled_reason(impl Into<String>)`](crate::client::fluent_builders::UpdateStandardsControl::disabled_reason) / [`set_disabled_reason(Option<String>)`](crate::client::fluent_builders::UpdateStandardsControl::set_disabled_reason): <p>A description of the reason why you are disabling a security standard control. If you are disabling a control, then this is required.</p>
    /// - On success, responds with [`UpdateStandardsControlOutput`](crate::output::UpdateStandardsControlOutput)

    /// - On failure, responds with [`SdkError<UpdateStandardsControlError>`](crate::error::UpdateStandardsControlError)
    pub fn update_standards_control(
        &self,
    ) -> crate::client::fluent_builders::UpdateStandardsControl {
        crate::client::fluent_builders::UpdateStandardsControl::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
