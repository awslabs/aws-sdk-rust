// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_repository_link::_update_repository_link_output::UpdateRepositoryLinkOutputBuilder;

pub use crate::operation::update_repository_link::_update_repository_link_input::UpdateRepositoryLinkInputBuilder;

impl crate::operation::update_repository_link::builders::UpdateRepositoryLinkInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_repository_link::UpdateRepositoryLinkOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_repository_link::UpdateRepositoryLinkError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_repository_link();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRepositoryLink`.
///
/// <p>Updates the association between your connection and a specified external Git repository. A repository link allows Git sync to monitor and sync changes to files in a specified Git repository.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRepositoryLinkFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_repository_link::builders::UpdateRepositoryLinkInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_repository_link::UpdateRepositoryLinkOutput,
        crate::operation::update_repository_link::UpdateRepositoryLinkError,
    > for UpdateRepositoryLinkFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_repository_link::UpdateRepositoryLinkOutput,
            crate::operation::update_repository_link::UpdateRepositoryLinkError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateRepositoryLinkFluentBuilder {
    /// Creates a new `UpdateRepositoryLink`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRepositoryLink as a reference.
    pub fn as_input(&self) -> &crate::operation::update_repository_link::builders::UpdateRepositoryLinkInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_repository_link::UpdateRepositoryLinkOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_repository_link::UpdateRepositoryLinkError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_repository_link::UpdateRepositoryLink::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_repository_link::UpdateRepositoryLink::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_repository_link::UpdateRepositoryLinkOutput,
        crate::operation::update_repository_link::UpdateRepositoryLinkError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection for the repository link to be updated. The updated connection ARN must have the same providerType (such as GitHub) as the original connection ARN for the repo link.</p>
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connection_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection for the repository link to be updated. The updated connection ARN must have the same providerType (such as GitHub) as the original connection ARN for the repo link.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connection_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection for the repository link to be updated. The updated connection ARN must have the same providerType (such as GitHub) as the original connection ARN for the repo link.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connection_arn()
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository link to be updated.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.encryption_key_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository link to be updated.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_encryption_key_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository link to be updated.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_encryption_key_arn()
    }
    /// <p>The ID of the repository link to be updated.</p>
    pub fn repository_link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.repository_link_id(input.into());
        self
    }
    /// <p>The ID of the repository link to be updated.</p>
    pub fn set_repository_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_repository_link_id(input);
        self
    }
    /// <p>The ID of the repository link to be updated.</p>
    pub fn get_repository_link_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_repository_link_id()
    }
}
