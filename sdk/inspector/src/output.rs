// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAssessmentTargetOutput {}
impl std::fmt::Debug for UpdateAssessmentTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssessmentTargetOutput");
        formatter.finish()
    }
}
/// See [`UpdateAssessmentTargetOutput`](crate::output::UpdateAssessmentTargetOutput)
pub mod update_assessment_target_output {
    /// A builder for [`UpdateAssessmentTargetOutput`](crate::output::UpdateAssessmentTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateAssessmentTargetOutput`](crate::output::UpdateAssessmentTargetOutput)
        pub fn build(self) -> crate::output::UpdateAssessmentTargetOutput {
            crate::output::UpdateAssessmentTargetOutput {}
        }
    }
}
impl UpdateAssessmentTargetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentTargetOutput`](crate::output::UpdateAssessmentTargetOutput)
    pub fn builder() -> crate::output::update_assessment_target_output::Builder {
        crate::output::update_assessment_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsubscribeFromEventOutput {}
impl std::fmt::Debug for UnsubscribeFromEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsubscribeFromEventOutput");
        formatter.finish()
    }
}
/// See [`UnsubscribeFromEventOutput`](crate::output::UnsubscribeFromEventOutput)
pub mod unsubscribe_from_event_output {
    /// A builder for [`UnsubscribeFromEventOutput`](crate::output::UnsubscribeFromEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UnsubscribeFromEventOutput`](crate::output::UnsubscribeFromEventOutput)
        pub fn build(self) -> crate::output::UnsubscribeFromEventOutput {
            crate::output::UnsubscribeFromEventOutput {}
        }
    }
}
impl UnsubscribeFromEventOutput {
    /// Creates a new builder-style object to manufacture [`UnsubscribeFromEventOutput`](crate::output::UnsubscribeFromEventOutput)
    pub fn builder() -> crate::output::unsubscribe_from_event_output::Builder {
        crate::output::unsubscribe_from_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SubscribeToEventOutput {}
impl std::fmt::Debug for SubscribeToEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SubscribeToEventOutput");
        formatter.finish()
    }
}
/// See [`SubscribeToEventOutput`](crate::output::SubscribeToEventOutput)
pub mod subscribe_to_event_output {
    /// A builder for [`SubscribeToEventOutput`](crate::output::SubscribeToEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SubscribeToEventOutput`](crate::output::SubscribeToEventOutput)
        pub fn build(self) -> crate::output::SubscribeToEventOutput {
            crate::output::SubscribeToEventOutput {}
        }
    }
}
impl SubscribeToEventOutput {
    /// Creates a new builder-style object to manufacture [`SubscribeToEventOutput`](crate::output::SubscribeToEventOutput)
    pub fn builder() -> crate::output::subscribe_to_event_output::Builder {
        crate::output::subscribe_to_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopAssessmentRunOutput {}
impl std::fmt::Debug for StopAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopAssessmentRunOutput");
        formatter.finish()
    }
}
/// See [`StopAssessmentRunOutput`](crate::output::StopAssessmentRunOutput)
pub mod stop_assessment_run_output {
    /// A builder for [`StopAssessmentRunOutput`](crate::output::StopAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopAssessmentRunOutput`](crate::output::StopAssessmentRunOutput)
        pub fn build(self) -> crate::output::StopAssessmentRunOutput {
            crate::output::StopAssessmentRunOutput {}
        }
    }
}
impl StopAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`StopAssessmentRunOutput`](crate::output::StopAssessmentRunOutput)
    pub fn builder() -> crate::output::stop_assessment_run_output::Builder {
        crate::output::stop_assessment_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartAssessmentRunOutput {
    /// <p>The ARN of the assessment run that has been started.</p>
    pub assessment_run_arn: std::option::Option<std::string::String>,
}
impl StartAssessmentRunOutput {
    /// <p>The ARN of the assessment run that has been started.</p>
    pub fn assessment_run_arn(&self) -> std::option::Option<&str> {
        self.assessment_run_arn.as_deref()
    }
}
impl std::fmt::Debug for StartAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartAssessmentRunOutput");
        formatter.field("assessment_run_arn", &self.assessment_run_arn);
        formatter.finish()
    }
}
/// See [`StartAssessmentRunOutput`](crate::output::StartAssessmentRunOutput)
pub mod start_assessment_run_output {
    /// A builder for [`StartAssessmentRunOutput`](crate::output::StartAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_run_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the assessment run that has been started.</p>
        pub fn assessment_run_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.assessment_run_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the assessment run that has been started.</p>
        pub fn set_assessment_run_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.assessment_run_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`StartAssessmentRunOutput`](crate::output::StartAssessmentRunOutput)
        pub fn build(self) -> crate::output::StartAssessmentRunOutput {
            crate::output::StartAssessmentRunOutput {
                assessment_run_arn: self.assessment_run_arn,
            }
        }
    }
}
impl StartAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`StartAssessmentRunOutput`](crate::output::StartAssessmentRunOutput)
    pub fn builder() -> crate::output::start_assessment_run_output::Builder {
        crate::output::start_assessment_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetTagsForResourceOutput {}
impl std::fmt::Debug for SetTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetTagsForResourceOutput");
        formatter.finish()
    }
}
/// See [`SetTagsForResourceOutput`](crate::output::SetTagsForResourceOutput)
pub mod set_tags_for_resource_output {
    /// A builder for [`SetTagsForResourceOutput`](crate::output::SetTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetTagsForResourceOutput`](crate::output::SetTagsForResourceOutput)
        pub fn build(self) -> crate::output::SetTagsForResourceOutput {
            crate::output::SetTagsForResourceOutput {}
        }
    }
}
impl SetTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`SetTagsForResourceOutput`](crate::output::SetTagsForResourceOutput)
    pub fn builder() -> crate::output::set_tags_for_resource_output::Builder {
        crate::output::set_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveAttributesFromFindingsOutput {
    /// <p>Attributes details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl RemoveAttributesFromFindingsOutput {
    /// <p>Attributes details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for RemoveAttributesFromFindingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveAttributesFromFindingsOutput");
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`RemoveAttributesFromFindingsOutput`](crate::output::RemoveAttributesFromFindingsOutput)
pub mod remove_attributes_from_findings_output {
    /// A builder for [`RemoveAttributesFromFindingsOutput`](crate::output::RemoveAttributesFromFindingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Attributes details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Attributes details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveAttributesFromFindingsOutput`](crate::output::RemoveAttributesFromFindingsOutput)
        pub fn build(self) -> crate::output::RemoveAttributesFromFindingsOutput {
            crate::output::RemoveAttributesFromFindingsOutput {
                failed_items: self.failed_items,
            }
        }
    }
}
impl RemoveAttributesFromFindingsOutput {
    /// Creates a new builder-style object to manufacture [`RemoveAttributesFromFindingsOutput`](crate::output::RemoveAttributesFromFindingsOutput)
    pub fn builder() -> crate::output::remove_attributes_from_findings_output::Builder {
        crate::output::remove_attributes_from_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterCrossAccountAccessRoleOutput {}
impl std::fmt::Debug for RegisterCrossAccountAccessRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterCrossAccountAccessRoleOutput");
        formatter.finish()
    }
}
/// See [`RegisterCrossAccountAccessRoleOutput`](crate::output::RegisterCrossAccountAccessRoleOutput)
pub mod register_cross_account_access_role_output {
    /// A builder for [`RegisterCrossAccountAccessRoleOutput`](crate::output::RegisterCrossAccountAccessRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RegisterCrossAccountAccessRoleOutput`](crate::output::RegisterCrossAccountAccessRoleOutput)
        pub fn build(self) -> crate::output::RegisterCrossAccountAccessRoleOutput {
            crate::output::RegisterCrossAccountAccessRoleOutput {}
        }
    }
}
impl RegisterCrossAccountAccessRoleOutput {
    /// Creates a new builder-style object to manufacture [`RegisterCrossAccountAccessRoleOutput`](crate::output::RegisterCrossAccountAccessRoleOutput)
    pub fn builder() -> crate::output::register_cross_account_access_role_output::Builder {
        crate::output::register_cross_account_access_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PreviewAgentsOutput {
    /// <p>The resulting list of agents.</p>
    pub agent_previews: std::option::Option<std::vec::Vec<crate::model::AgentPreview>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl PreviewAgentsOutput {
    /// <p>The resulting list of agents.</p>
    pub fn agent_previews(&self) -> std::option::Option<&[crate::model::AgentPreview]> {
        self.agent_previews.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for PreviewAgentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PreviewAgentsOutput");
        formatter.field("agent_previews", &self.agent_previews);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`PreviewAgentsOutput`](crate::output::PreviewAgentsOutput)
pub mod preview_agents_output {
    /// A builder for [`PreviewAgentsOutput`](crate::output::PreviewAgentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agent_previews: std::option::Option<std::vec::Vec<crate::model::AgentPreview>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `agent_previews`.
        ///
        /// To override the contents of this collection use [`set_agent_previews`](Self::set_agent_previews).
        ///
        /// <p>The resulting list of agents.</p>
        pub fn agent_previews(mut self, input: impl Into<crate::model::AgentPreview>) -> Self {
            let mut v = self.agent_previews.unwrap_or_default();
            v.push(input.into());
            self.agent_previews = Some(v);
            self
        }
        /// <p>The resulting list of agents.</p>
        pub fn set_agent_previews(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AgentPreview>>,
        ) -> Self {
            self.agent_previews = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`PreviewAgentsOutput`](crate::output::PreviewAgentsOutput)
        pub fn build(self) -> crate::output::PreviewAgentsOutput {
            crate::output::PreviewAgentsOutput {
                agent_previews: self.agent_previews,
                next_token: self.next_token,
            }
        }
    }
}
impl PreviewAgentsOutput {
    /// Creates a new builder-style object to manufacture [`PreviewAgentsOutput`](crate::output::PreviewAgentsOutput)
    pub fn builder() -> crate::output::preview_agents_output::Builder {
        crate::output::preview_agents_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A collection of key and value pairs.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A collection of key and value pairs.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>A collection of key and value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRulesPackagesOutput {
    /// <p>The list of ARNs that specifies the rules packages returned by the action.</p>
    pub rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListRulesPackagesOutput {
    /// <p>The list of ARNs that specifies the rules packages returned by the action.</p>
    pub fn rules_package_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.rules_package_arns.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListRulesPackagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRulesPackagesOutput");
        formatter.field("rules_package_arns", &self.rules_package_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListRulesPackagesOutput`](crate::output::ListRulesPackagesOutput)
pub mod list_rules_packages_output {
    /// A builder for [`ListRulesPackagesOutput`](crate::output::ListRulesPackagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `rules_package_arns`.
        ///
        /// To override the contents of this collection use [`set_rules_package_arns`](Self::set_rules_package_arns).
        ///
        /// <p>The list of ARNs that specifies the rules packages returned by the action.</p>
        pub fn rules_package_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.rules_package_arns.unwrap_or_default();
            v.push(input.into());
            self.rules_package_arns = Some(v);
            self
        }
        /// <p>The list of ARNs that specifies the rules packages returned by the action.</p>
        pub fn set_rules_package_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.rules_package_arns = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRulesPackagesOutput`](crate::output::ListRulesPackagesOutput)
        pub fn build(self) -> crate::output::ListRulesPackagesOutput {
            crate::output::ListRulesPackagesOutput {
                rules_package_arns: self.rules_package_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListRulesPackagesOutput {
    /// Creates a new builder-style object to manufacture [`ListRulesPackagesOutput`](crate::output::ListRulesPackagesOutput)
    pub fn builder() -> crate::output::list_rules_packages_output::Builder {
        crate::output::list_rules_packages_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFindingsOutput {
    /// <p>A list of ARNs that specifies the findings returned by the action.</p>
    pub finding_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListFindingsOutput {
    /// <p>A list of ARNs that specifies the findings returned by the action.</p>
    pub fn finding_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.finding_arns.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListFindingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListFindingsOutput");
        formatter.field("finding_arns", &self.finding_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListFindingsOutput`](crate::output::ListFindingsOutput)
pub mod list_findings_output {
    /// A builder for [`ListFindingsOutput`](crate::output::ListFindingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) finding_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `finding_arns`.
        ///
        /// To override the contents of this collection use [`set_finding_arns`](Self::set_finding_arns).
        ///
        /// <p>A list of ARNs that specifies the findings returned by the action.</p>
        pub fn finding_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.finding_arns.unwrap_or_default();
            v.push(input.into());
            self.finding_arns = Some(v);
            self
        }
        /// <p>A list of ARNs that specifies the findings returned by the action.</p>
        pub fn set_finding_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.finding_arns = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListFindingsOutput`](crate::output::ListFindingsOutput)
        pub fn build(self) -> crate::output::ListFindingsOutput {
            crate::output::ListFindingsOutput {
                finding_arns: self.finding_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ListFindingsOutput`](crate::output::ListFindingsOutput)
    pub fn builder() -> crate::output::list_findings_output::Builder {
        crate::output::list_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListExclusionsOutput {
    /// <p>A list of exclusions' ARNs returned by the action.</p>
    pub exclusion_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>When a response is generated, if there is more data to be listed, this parameters is
    /// present in the response and contains the value to use for the nextToken parameter in a
    /// subsequent pagination request. If there is no more data to be listed, this parameter is set
    /// to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListExclusionsOutput {
    /// <p>A list of exclusions' ARNs returned by the action.</p>
    pub fn exclusion_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_arns.as_deref()
    }
    /// <p>When a response is generated, if there is more data to be listed, this parameters is
    /// present in the response and contains the value to use for the nextToken parameter in a
    /// subsequent pagination request. If there is no more data to be listed, this parameter is set
    /// to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListExclusionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListExclusionsOutput");
        formatter.field("exclusion_arns", &self.exclusion_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListExclusionsOutput`](crate::output::ListExclusionsOutput)
pub mod list_exclusions_output {
    /// A builder for [`ListExclusionsOutput`](crate::output::ListExclusionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) exclusion_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `exclusion_arns`.
        ///
        /// To override the contents of this collection use [`set_exclusion_arns`](Self::set_exclusion_arns).
        ///
        /// <p>A list of exclusions' ARNs returned by the action.</p>
        pub fn exclusion_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.exclusion_arns.unwrap_or_default();
            v.push(input.into());
            self.exclusion_arns = Some(v);
            self
        }
        /// <p>A list of exclusions' ARNs returned by the action.</p>
        pub fn set_exclusion_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.exclusion_arns = input;
            self
        }
        /// <p>When a response is generated, if there is more data to be listed, this parameters is
        /// present in the response and contains the value to use for the nextToken parameter in a
        /// subsequent pagination request. If there is no more data to be listed, this parameter is set
        /// to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When a response is generated, if there is more data to be listed, this parameters is
        /// present in the response and contains the value to use for the nextToken parameter in a
        /// subsequent pagination request. If there is no more data to be listed, this parameter is set
        /// to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListExclusionsOutput`](crate::output::ListExclusionsOutput)
        pub fn build(self) -> crate::output::ListExclusionsOutput {
            crate::output::ListExclusionsOutput {
                exclusion_arns: self.exclusion_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListExclusionsOutput {
    /// Creates a new builder-style object to manufacture [`ListExclusionsOutput`](crate::output::ListExclusionsOutput)
    pub fn builder() -> crate::output::list_exclusions_output::Builder {
        crate::output::list_exclusions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEventSubscriptionsOutput {
    /// <p>Details of the returned event subscriptions.</p>
    pub subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListEventSubscriptionsOutput {
    /// <p>Details of the returned event subscriptions.</p>
    pub fn subscriptions(&self) -> std::option::Option<&[crate::model::Subscription]> {
        self.subscriptions.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListEventSubscriptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEventSubscriptionsOutput");
        formatter.field("subscriptions", &self.subscriptions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEventSubscriptionsOutput`](crate::output::ListEventSubscriptionsOutput)
pub mod list_event_subscriptions_output {
    /// A builder for [`ListEventSubscriptionsOutput`](crate::output::ListEventSubscriptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `subscriptions`.
        ///
        /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
        ///
        /// <p>Details of the returned event subscriptions.</p>
        pub fn subscriptions(mut self, input: impl Into<crate::model::Subscription>) -> Self {
            let mut v = self.subscriptions.unwrap_or_default();
            v.push(input.into());
            self.subscriptions = Some(v);
            self
        }
        /// <p>Details of the returned event subscriptions.</p>
        pub fn set_subscriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        ) -> Self {
            self.subscriptions = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEventSubscriptionsOutput`](crate::output::ListEventSubscriptionsOutput)
        pub fn build(self) -> crate::output::ListEventSubscriptionsOutput {
            crate::output::ListEventSubscriptionsOutput {
                subscriptions: self.subscriptions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEventSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventSubscriptionsOutput`](crate::output::ListEventSubscriptionsOutput)
    pub fn builder() -> crate::output::list_event_subscriptions_output::Builder {
        crate::output::list_event_subscriptions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAssessmentTemplatesOutput {
    /// <p>A list of ARNs that specifies the assessment templates returned by the
    /// action.</p>
    pub assessment_template_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAssessmentTemplatesOutput {
    /// <p>A list of ARNs that specifies the assessment templates returned by the
    /// action.</p>
    pub fn assessment_template_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.assessment_template_arns.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAssessmentTemplatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAssessmentTemplatesOutput");
        formatter.field("assessment_template_arns", &self.assessment_template_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAssessmentTemplatesOutput`](crate::output::ListAssessmentTemplatesOutput)
pub mod list_assessment_templates_output {
    /// A builder for [`ListAssessmentTemplatesOutput`](crate::output::ListAssessmentTemplatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_template_arns:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `assessment_template_arns`.
        ///
        /// To override the contents of this collection use [`set_assessment_template_arns`](Self::set_assessment_template_arns).
        ///
        /// <p>A list of ARNs that specifies the assessment templates returned by the
        /// action.</p>
        pub fn assessment_template_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.assessment_template_arns.unwrap_or_default();
            v.push(input.into());
            self.assessment_template_arns = Some(v);
            self
        }
        /// <p>A list of ARNs that specifies the assessment templates returned by the
        /// action.</p>
        pub fn set_assessment_template_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assessment_template_arns = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentTemplatesOutput`](crate::output::ListAssessmentTemplatesOutput)
        pub fn build(self) -> crate::output::ListAssessmentTemplatesOutput {
            crate::output::ListAssessmentTemplatesOutput {
                assessment_template_arns: self.assessment_template_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAssessmentTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentTemplatesOutput`](crate::output::ListAssessmentTemplatesOutput)
    pub fn builder() -> crate::output::list_assessment_templates_output::Builder {
        crate::output::list_assessment_templates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAssessmentTargetsOutput {
    /// <p>A list of ARNs that specifies the assessment targets that are returned by the
    /// action.</p>
    pub assessment_target_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAssessmentTargetsOutput {
    /// <p>A list of ARNs that specifies the assessment targets that are returned by the
    /// action.</p>
    pub fn assessment_target_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.assessment_target_arns.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAssessmentTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAssessmentTargetsOutput");
        formatter.field("assessment_target_arns", &self.assessment_target_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAssessmentTargetsOutput`](crate::output::ListAssessmentTargetsOutput)
pub mod list_assessment_targets_output {
    /// A builder for [`ListAssessmentTargetsOutput`](crate::output::ListAssessmentTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_target_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `assessment_target_arns`.
        ///
        /// To override the contents of this collection use [`set_assessment_target_arns`](Self::set_assessment_target_arns).
        ///
        /// <p>A list of ARNs that specifies the assessment targets that are returned by the
        /// action.</p>
        pub fn assessment_target_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.assessment_target_arns.unwrap_or_default();
            v.push(input.into());
            self.assessment_target_arns = Some(v);
            self
        }
        /// <p>A list of ARNs that specifies the assessment targets that are returned by the
        /// action.</p>
        pub fn set_assessment_target_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assessment_target_arns = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentTargetsOutput`](crate::output::ListAssessmentTargetsOutput)
        pub fn build(self) -> crate::output::ListAssessmentTargetsOutput {
            crate::output::ListAssessmentTargetsOutput {
                assessment_target_arns: self.assessment_target_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAssessmentTargetsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentTargetsOutput`](crate::output::ListAssessmentTargetsOutput)
    pub fn builder() -> crate::output::list_assessment_targets_output::Builder {
        crate::output::list_assessment_targets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAssessmentRunsOutput {
    /// <p>A list of ARNs that specifies the assessment runs that are returned by the
    /// action.</p>
    pub assessment_run_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAssessmentRunsOutput {
    /// <p>A list of ARNs that specifies the assessment runs that are returned by the
    /// action.</p>
    pub fn assessment_run_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.assessment_run_arns.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAssessmentRunsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAssessmentRunsOutput");
        formatter.field("assessment_run_arns", &self.assessment_run_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAssessmentRunsOutput`](crate::output::ListAssessmentRunsOutput)
pub mod list_assessment_runs_output {
    /// A builder for [`ListAssessmentRunsOutput`](crate::output::ListAssessmentRunsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_run_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `assessment_run_arns`.
        ///
        /// To override the contents of this collection use [`set_assessment_run_arns`](Self::set_assessment_run_arns).
        ///
        /// <p>A list of ARNs that specifies the assessment runs that are returned by the
        /// action.</p>
        pub fn assessment_run_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.assessment_run_arns.unwrap_or_default();
            v.push(input.into());
            self.assessment_run_arns = Some(v);
            self
        }
        /// <p>A list of ARNs that specifies the assessment runs that are returned by the
        /// action.</p>
        pub fn set_assessment_run_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assessment_run_arns = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentRunsOutput`](crate::output::ListAssessmentRunsOutput)
        pub fn build(self) -> crate::output::ListAssessmentRunsOutput {
            crate::output::ListAssessmentRunsOutput {
                assessment_run_arns: self.assessment_run_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAssessmentRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentRunsOutput`](crate::output::ListAssessmentRunsOutput)
    pub fn builder() -> crate::output::list_assessment_runs_output::Builder {
        crate::output::list_assessment_runs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAssessmentRunAgentsOutput {
    /// <p>A list of ARNs that specifies the agents returned by the action.</p>
    pub assessment_run_agents: std::option::Option<std::vec::Vec<crate::model::AssessmentRunAgent>>,
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAssessmentRunAgentsOutput {
    /// <p>A list of ARNs that specifies the agents returned by the action.</p>
    pub fn assessment_run_agents(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentRunAgent]> {
        self.assessment_run_agents.as_deref()
    }
    /// <p> When a response is generated, if there is more data to be listed, this parameter is
    /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
    /// data to be listed, this parameter is set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAssessmentRunAgentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAssessmentRunAgentsOutput");
        formatter.field("assessment_run_agents", &self.assessment_run_agents);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAssessmentRunAgentsOutput`](crate::output::ListAssessmentRunAgentsOutput)
pub mod list_assessment_run_agents_output {
    /// A builder for [`ListAssessmentRunAgentsOutput`](crate::output::ListAssessmentRunAgentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_run_agents:
            std::option::Option<std::vec::Vec<crate::model::AssessmentRunAgent>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `assessment_run_agents`.
        ///
        /// To override the contents of this collection use [`set_assessment_run_agents`](Self::set_assessment_run_agents).
        ///
        /// <p>A list of ARNs that specifies the agents returned by the action.</p>
        pub fn assessment_run_agents(
            mut self,
            input: impl Into<crate::model::AssessmentRunAgent>,
        ) -> Self {
            let mut v = self.assessment_run_agents.unwrap_or_default();
            v.push(input.into());
            self.assessment_run_agents = Some(v);
            self
        }
        /// <p>A list of ARNs that specifies the agents returned by the action.</p>
        pub fn set_assessment_run_agents(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentRunAgent>>,
        ) -> Self {
            self.assessment_run_agents = input;
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> When a response is generated, if there is more data to be listed, this parameter is
        /// present in the response and contains the value to use for the <b>nextToken</b> parameter in a subsequent pagination request. If there is no more
        /// data to be listed, this parameter is set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentRunAgentsOutput`](crate::output::ListAssessmentRunAgentsOutput)
        pub fn build(self) -> crate::output::ListAssessmentRunAgentsOutput {
            crate::output::ListAssessmentRunAgentsOutput {
                assessment_run_agents: self.assessment_run_agents,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAssessmentRunAgentsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentRunAgentsOutput`](crate::output::ListAssessmentRunAgentsOutput)
    pub fn builder() -> crate::output::list_assessment_run_agents_output::Builder {
        crate::output::list_assessment_run_agents_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTelemetryMetadataOutput {
    /// <p>Telemetry details.</p>
    pub telemetry_metadata: std::option::Option<std::vec::Vec<crate::model::TelemetryMetadata>>,
}
impl GetTelemetryMetadataOutput {
    /// <p>Telemetry details.</p>
    pub fn telemetry_metadata(&self) -> std::option::Option<&[crate::model::TelemetryMetadata]> {
        self.telemetry_metadata.as_deref()
    }
}
impl std::fmt::Debug for GetTelemetryMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTelemetryMetadataOutput");
        formatter.field("telemetry_metadata", &self.telemetry_metadata);
        formatter.finish()
    }
}
/// See [`GetTelemetryMetadataOutput`](crate::output::GetTelemetryMetadataOutput)
pub mod get_telemetry_metadata_output {
    /// A builder for [`GetTelemetryMetadataOutput`](crate::output::GetTelemetryMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) telemetry_metadata:
            std::option::Option<std::vec::Vec<crate::model::TelemetryMetadata>>,
    }
    impl Builder {
        /// Appends an item to `telemetry_metadata`.
        ///
        /// To override the contents of this collection use [`set_telemetry_metadata`](Self::set_telemetry_metadata).
        ///
        /// <p>Telemetry details.</p>
        pub fn telemetry_metadata(
            mut self,
            input: impl Into<crate::model::TelemetryMetadata>,
        ) -> Self {
            let mut v = self.telemetry_metadata.unwrap_or_default();
            v.push(input.into());
            self.telemetry_metadata = Some(v);
            self
        }
        /// <p>Telemetry details.</p>
        pub fn set_telemetry_metadata(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TelemetryMetadata>>,
        ) -> Self {
            self.telemetry_metadata = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTelemetryMetadataOutput`](crate::output::GetTelemetryMetadataOutput)
        pub fn build(self) -> crate::output::GetTelemetryMetadataOutput {
            crate::output::GetTelemetryMetadataOutput {
                telemetry_metadata: self.telemetry_metadata,
            }
        }
    }
}
impl GetTelemetryMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetTelemetryMetadataOutput`](crate::output::GetTelemetryMetadataOutput)
    pub fn builder() -> crate::output::get_telemetry_metadata_output::Builder {
        crate::output::get_telemetry_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetExclusionsPreviewOutput {
    /// <p>Specifies the status of the request to generate an exclusions preview.</p>
    pub preview_status: std::option::Option<crate::model::PreviewStatus>,
    /// <p>Information about the exclusions included in the preview.</p>
    pub exclusion_previews: std::option::Option<std::vec::Vec<crate::model::ExclusionPreview>>,
    /// <p>When a response is generated, if there is more data to be listed, this parameters is
    /// present in the response and contains the value to use for the nextToken parameter in a
    /// subsequent pagination request. If there is no more data to be listed, this parameter is set
    /// to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl GetExclusionsPreviewOutput {
    /// <p>Specifies the status of the request to generate an exclusions preview.</p>
    pub fn preview_status(&self) -> std::option::Option<&crate::model::PreviewStatus> {
        self.preview_status.as_ref()
    }
    /// <p>Information about the exclusions included in the preview.</p>
    pub fn exclusion_previews(&self) -> std::option::Option<&[crate::model::ExclusionPreview]> {
        self.exclusion_previews.as_deref()
    }
    /// <p>When a response is generated, if there is more data to be listed, this parameters is
    /// present in the response and contains the value to use for the nextToken parameter in a
    /// subsequent pagination request. If there is no more data to be listed, this parameter is set
    /// to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for GetExclusionsPreviewOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetExclusionsPreviewOutput");
        formatter.field("preview_status", &self.preview_status);
        formatter.field("exclusion_previews", &self.exclusion_previews);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetExclusionsPreviewOutput`](crate::output::GetExclusionsPreviewOutput)
pub mod get_exclusions_preview_output {
    /// A builder for [`GetExclusionsPreviewOutput`](crate::output::GetExclusionsPreviewOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) preview_status: std::option::Option<crate::model::PreviewStatus>,
        pub(crate) exclusion_previews:
            std::option::Option<std::vec::Vec<crate::model::ExclusionPreview>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Specifies the status of the request to generate an exclusions preview.</p>
        pub fn preview_status(mut self, input: crate::model::PreviewStatus) -> Self {
            self.preview_status = Some(input);
            self
        }
        /// <p>Specifies the status of the request to generate an exclusions preview.</p>
        pub fn set_preview_status(
            mut self,
            input: std::option::Option<crate::model::PreviewStatus>,
        ) -> Self {
            self.preview_status = input;
            self
        }
        /// Appends an item to `exclusion_previews`.
        ///
        /// To override the contents of this collection use [`set_exclusion_previews`](Self::set_exclusion_previews).
        ///
        /// <p>Information about the exclusions included in the preview.</p>
        pub fn exclusion_previews(
            mut self,
            input: impl Into<crate::model::ExclusionPreview>,
        ) -> Self {
            let mut v = self.exclusion_previews.unwrap_or_default();
            v.push(input.into());
            self.exclusion_previews = Some(v);
            self
        }
        /// <p>Information about the exclusions included in the preview.</p>
        pub fn set_exclusion_previews(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExclusionPreview>>,
        ) -> Self {
            self.exclusion_previews = input;
            self
        }
        /// <p>When a response is generated, if there is more data to be listed, this parameters is
        /// present in the response and contains the value to use for the nextToken parameter in a
        /// subsequent pagination request. If there is no more data to be listed, this parameter is set
        /// to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When a response is generated, if there is more data to be listed, this parameters is
        /// present in the response and contains the value to use for the nextToken parameter in a
        /// subsequent pagination request. If there is no more data to be listed, this parameter is set
        /// to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetExclusionsPreviewOutput`](crate::output::GetExclusionsPreviewOutput)
        pub fn build(self) -> crate::output::GetExclusionsPreviewOutput {
            crate::output::GetExclusionsPreviewOutput {
                preview_status: self.preview_status,
                exclusion_previews: self.exclusion_previews,
                next_token: self.next_token,
            }
        }
    }
}
impl GetExclusionsPreviewOutput {
    /// Creates a new builder-style object to manufacture [`GetExclusionsPreviewOutput`](crate::output::GetExclusionsPreviewOutput)
    pub fn builder() -> crate::output::get_exclusions_preview_output::Builder {
        crate::output::get_exclusions_preview_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAssessmentReportOutput {
    /// <p>Specifies the status of the request to generate an assessment report. </p>
    pub status: std::option::Option<crate::model::ReportStatus>,
    /// <p>Specifies the URL where you can find the generated assessment report. This parameter
    /// is only returned if the report is successfully generated.</p>
    pub url: std::option::Option<std::string::String>,
}
impl GetAssessmentReportOutput {
    /// <p>Specifies the status of the request to generate an assessment report. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::ReportStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies the URL where you can find the generated assessment report. This parameter
    /// is only returned if the report is successfully generated.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl std::fmt::Debug for GetAssessmentReportOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAssessmentReportOutput");
        formatter.field("status", &self.status);
        formatter.field("url", &self.url);
        formatter.finish()
    }
}
/// See [`GetAssessmentReportOutput`](crate::output::GetAssessmentReportOutput)
pub mod get_assessment_report_output {
    /// A builder for [`GetAssessmentReportOutput`](crate::output::GetAssessmentReportOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ReportStatus>,
        pub(crate) url: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Specifies the status of the request to generate an assessment report. </p>
        pub fn status(mut self, input: crate::model::ReportStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Specifies the status of the request to generate an assessment report. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ReportStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>Specifies the URL where you can find the generated assessment report. This parameter
        /// is only returned if the report is successfully generated.</p>
        pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
            self.url = Some(input.into());
            self
        }
        /// <p>Specifies the URL where you can find the generated assessment report. This parameter
        /// is only returned if the report is successfully generated.</p>
        pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.url = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAssessmentReportOutput`](crate::output::GetAssessmentReportOutput)
        pub fn build(self) -> crate::output::GetAssessmentReportOutput {
            crate::output::GetAssessmentReportOutput {
                status: self.status,
                url: self.url,
            }
        }
    }
}
impl GetAssessmentReportOutput {
    /// Creates a new builder-style object to manufacture [`GetAssessmentReportOutput`](crate::output::GetAssessmentReportOutput)
    pub fn builder() -> crate::output::get_assessment_report_output::Builder {
        crate::output::get_assessment_report_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeRulesPackagesOutput {
    /// <p>Information about the rules package.</p>
    pub rules_packages: std::option::Option<std::vec::Vec<crate::model::RulesPackage>>,
    /// <p>Rules package details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeRulesPackagesOutput {
    /// <p>Information about the rules package.</p>
    pub fn rules_packages(&self) -> std::option::Option<&[crate::model::RulesPackage]> {
        self.rules_packages.as_deref()
    }
    /// <p>Rules package details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeRulesPackagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeRulesPackagesOutput");
        formatter.field("rules_packages", &self.rules_packages);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeRulesPackagesOutput`](crate::output::DescribeRulesPackagesOutput)
pub mod describe_rules_packages_output {
    /// A builder for [`DescribeRulesPackagesOutput`](crate::output::DescribeRulesPackagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rules_packages: std::option::Option<std::vec::Vec<crate::model::RulesPackage>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `rules_packages`.
        ///
        /// To override the contents of this collection use [`set_rules_packages`](Self::set_rules_packages).
        ///
        /// <p>Information about the rules package.</p>
        pub fn rules_packages(mut self, input: impl Into<crate::model::RulesPackage>) -> Self {
            let mut v = self.rules_packages.unwrap_or_default();
            v.push(input.into());
            self.rules_packages = Some(v);
            self
        }
        /// <p>Information about the rules package.</p>
        pub fn set_rules_packages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RulesPackage>>,
        ) -> Self {
            self.rules_packages = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Rules package details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Rules package details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRulesPackagesOutput`](crate::output::DescribeRulesPackagesOutput)
        pub fn build(self) -> crate::output::DescribeRulesPackagesOutput {
            crate::output::DescribeRulesPackagesOutput {
                rules_packages: self.rules_packages,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeRulesPackagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRulesPackagesOutput`](crate::output::DescribeRulesPackagesOutput)
    pub fn builder() -> crate::output::describe_rules_packages_output::Builder {
        crate::output::describe_rules_packages_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeResourceGroupsOutput {
    /// <p>Information about a resource group.</p>
    pub resource_groups: std::option::Option<std::vec::Vec<crate::model::ResourceGroup>>,
    /// <p>Resource group details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeResourceGroupsOutput {
    /// <p>Information about a resource group.</p>
    pub fn resource_groups(&self) -> std::option::Option<&[crate::model::ResourceGroup]> {
        self.resource_groups.as_deref()
    }
    /// <p>Resource group details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeResourceGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeResourceGroupsOutput");
        formatter.field("resource_groups", &self.resource_groups);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeResourceGroupsOutput`](crate::output::DescribeResourceGroupsOutput)
pub mod describe_resource_groups_output {
    /// A builder for [`DescribeResourceGroupsOutput`](crate::output::DescribeResourceGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_groups: std::option::Option<std::vec::Vec<crate::model::ResourceGroup>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `resource_groups`.
        ///
        /// To override the contents of this collection use [`set_resource_groups`](Self::set_resource_groups).
        ///
        /// <p>Information about a resource group.</p>
        pub fn resource_groups(mut self, input: impl Into<crate::model::ResourceGroup>) -> Self {
            let mut v = self.resource_groups.unwrap_or_default();
            v.push(input.into());
            self.resource_groups = Some(v);
            self
        }
        /// <p>Information about a resource group.</p>
        pub fn set_resource_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceGroup>>,
        ) -> Self {
            self.resource_groups = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Resource group details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Resource group details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeResourceGroupsOutput`](crate::output::DescribeResourceGroupsOutput)
        pub fn build(self) -> crate::output::DescribeResourceGroupsOutput {
            crate::output::DescribeResourceGroupsOutput {
                resource_groups: self.resource_groups,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeResourceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceGroupsOutput`](crate::output::DescribeResourceGroupsOutput)
    pub fn builder() -> crate::output::describe_resource_groups_output::Builder {
        crate::output::describe_resource_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFindingsOutput {
    /// <p>Information about the finding.</p>
    pub findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
    /// <p>Finding details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeFindingsOutput {
    /// <p>Information about the finding.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::Finding]> {
        self.findings.as_deref()
    }
    /// <p>Finding details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeFindingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFindingsOutput");
        formatter.field("findings", &self.findings);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeFindingsOutput`](crate::output::DescribeFindingsOutput)
pub mod describe_findings_output {
    /// A builder for [`DescribeFindingsOutput`](crate::output::DescribeFindingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>Information about the finding.</p>
        pub fn findings(mut self, input: impl Into<crate::model::Finding>) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input.into());
            self.findings = Some(v);
            self
        }
        /// <p>Information about the finding.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        ) -> Self {
            self.findings = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Finding details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Finding details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFindingsOutput`](crate::output::DescribeFindingsOutput)
        pub fn build(self) -> crate::output::DescribeFindingsOutput {
            crate::output::DescribeFindingsOutput {
                findings: self.findings,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeFindingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFindingsOutput`](crate::output::DescribeFindingsOutput)
    pub fn builder() -> crate::output::describe_findings_output::Builder {
        crate::output::describe_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExclusionsOutput {
    /// <p>Information about the exclusions.</p>
    pub exclusions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::Exclusion>,
    >,
    /// <p>Exclusion details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeExclusionsOutput {
    /// <p>Information about the exclusions.</p>
    pub fn exclusions(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::model::Exclusion>>
    {
        self.exclusions.as_ref()
    }
    /// <p>Exclusion details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeExclusionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExclusionsOutput");
        formatter.field("exclusions", &self.exclusions);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeExclusionsOutput`](crate::output::DescribeExclusionsOutput)
pub mod describe_exclusions_output {
    /// A builder for [`DescribeExclusionsOutput`](crate::output::DescribeExclusionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) exclusions: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::Exclusion>,
        >,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `exclusions`.
        ///
        /// To override the contents of this collection use [`set_exclusions`](Self::set_exclusions).
        ///
        /// <p>Information about the exclusions.</p>
        pub fn exclusions(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::Exclusion>,
        ) -> Self {
            let mut hash_map = self.exclusions.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.exclusions = Some(hash_map);
            self
        }
        /// <p>Information about the exclusions.</p>
        pub fn set_exclusions(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::Exclusion>,
            >,
        ) -> Self {
            self.exclusions = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Exclusion details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Exclusion details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExclusionsOutput`](crate::output::DescribeExclusionsOutput)
        pub fn build(self) -> crate::output::DescribeExclusionsOutput {
            crate::output::DescribeExclusionsOutput {
                exclusions: self.exclusions,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeExclusionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExclusionsOutput`](crate::output::DescribeExclusionsOutput)
    pub fn builder() -> crate::output::describe_exclusions_output::Builder {
        crate::output::describe_exclusions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCrossAccountAccessRoleOutput {
    /// <p>The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS
    /// account.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the IAM role has the necessary policies
    /// attached to enable Amazon Inspector to access your AWS account.</p>
    pub valid: std::option::Option<bool>,
    /// <p>The date when the cross-account access role was registered.</p>
    pub registered_at: std::option::Option<aws_smithy_types::Instant>,
}
impl DescribeCrossAccountAccessRoleOutput {
    /// <p>The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS
    /// account.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A Boolean value that specifies whether the IAM role has the necessary policies
    /// attached to enable Amazon Inspector to access your AWS account.</p>
    pub fn valid(&self) -> std::option::Option<bool> {
        self.valid
    }
    /// <p>The date when the cross-account access role was registered.</p>
    pub fn registered_at(&self) -> std::option::Option<&aws_smithy_types::Instant> {
        self.registered_at.as_ref()
    }
}
impl std::fmt::Debug for DescribeCrossAccountAccessRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCrossAccountAccessRoleOutput");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("valid", &self.valid);
        formatter.field("registered_at", &self.registered_at);
        formatter.finish()
    }
}
/// See [`DescribeCrossAccountAccessRoleOutput`](crate::output::DescribeCrossAccountAccessRoleOutput)
pub mod describe_cross_account_access_role_output {
    /// A builder for [`DescribeCrossAccountAccessRoleOutput`](crate::output::DescribeCrossAccountAccessRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) valid: std::option::Option<bool>,
        pub(crate) registered_at: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS
        /// account.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS
        /// account.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>A Boolean value that specifies whether the IAM role has the necessary policies
        /// attached to enable Amazon Inspector to access your AWS account.</p>
        pub fn valid(mut self, input: bool) -> Self {
            self.valid = Some(input);
            self
        }
        /// <p>A Boolean value that specifies whether the IAM role has the necessary policies
        /// attached to enable Amazon Inspector to access your AWS account.</p>
        pub fn set_valid(mut self, input: std::option::Option<bool>) -> Self {
            self.valid = input;
            self
        }
        /// <p>The date when the cross-account access role was registered.</p>
        pub fn registered_at(mut self, input: aws_smithy_types::Instant) -> Self {
            self.registered_at = Some(input);
            self
        }
        /// <p>The date when the cross-account access role was registered.</p>
        pub fn set_registered_at(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.registered_at = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCrossAccountAccessRoleOutput`](crate::output::DescribeCrossAccountAccessRoleOutput)
        pub fn build(self) -> crate::output::DescribeCrossAccountAccessRoleOutput {
            crate::output::DescribeCrossAccountAccessRoleOutput {
                role_arn: self.role_arn,
                valid: self.valid,
                registered_at: self.registered_at,
            }
        }
    }
}
impl DescribeCrossAccountAccessRoleOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCrossAccountAccessRoleOutput`](crate::output::DescribeCrossAccountAccessRoleOutput)
    pub fn builder() -> crate::output::describe_cross_account_access_role_output::Builder {
        crate::output::describe_cross_account_access_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAssessmentTemplatesOutput {
    /// <p>Information about the assessment templates.</p>
    pub assessment_templates: std::option::Option<std::vec::Vec<crate::model::AssessmentTemplate>>,
    /// <p>Assessment template details that cannot be described. An error code is provided for
    /// each failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeAssessmentTemplatesOutput {
    /// <p>Information about the assessment templates.</p>
    pub fn assessment_templates(&self) -> std::option::Option<&[crate::model::AssessmentTemplate]> {
        self.assessment_templates.as_deref()
    }
    /// <p>Assessment template details that cannot be described. An error code is provided for
    /// each failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeAssessmentTemplatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAssessmentTemplatesOutput");
        formatter.field("assessment_templates", &self.assessment_templates);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeAssessmentTemplatesOutput`](crate::output::DescribeAssessmentTemplatesOutput)
pub mod describe_assessment_templates_output {
    /// A builder for [`DescribeAssessmentTemplatesOutput`](crate::output::DescribeAssessmentTemplatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_templates:
            std::option::Option<std::vec::Vec<crate::model::AssessmentTemplate>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `assessment_templates`.
        ///
        /// To override the contents of this collection use [`set_assessment_templates`](Self::set_assessment_templates).
        ///
        /// <p>Information about the assessment templates.</p>
        pub fn assessment_templates(
            mut self,
            input: impl Into<crate::model::AssessmentTemplate>,
        ) -> Self {
            let mut v = self.assessment_templates.unwrap_or_default();
            v.push(input.into());
            self.assessment_templates = Some(v);
            self
        }
        /// <p>Information about the assessment templates.</p>
        pub fn set_assessment_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentTemplate>>,
        ) -> Self {
            self.assessment_templates = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Assessment template details that cannot be described. An error code is provided for
        /// each failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Assessment template details that cannot be described. An error code is provided for
        /// each failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAssessmentTemplatesOutput`](crate::output::DescribeAssessmentTemplatesOutput)
        pub fn build(self) -> crate::output::DescribeAssessmentTemplatesOutput {
            crate::output::DescribeAssessmentTemplatesOutput {
                assessment_templates: self.assessment_templates,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeAssessmentTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssessmentTemplatesOutput`](crate::output::DescribeAssessmentTemplatesOutput)
    pub fn builder() -> crate::output::describe_assessment_templates_output::Builder {
        crate::output::describe_assessment_templates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAssessmentTargetsOutput {
    /// <p>Information about the assessment targets.</p>
    pub assessment_targets: std::option::Option<std::vec::Vec<crate::model::AssessmentTarget>>,
    /// <p>Assessment target details that cannot be described. An error code is provided for
    /// each failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeAssessmentTargetsOutput {
    /// <p>Information about the assessment targets.</p>
    pub fn assessment_targets(&self) -> std::option::Option<&[crate::model::AssessmentTarget]> {
        self.assessment_targets.as_deref()
    }
    /// <p>Assessment target details that cannot be described. An error code is provided for
    /// each failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeAssessmentTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAssessmentTargetsOutput");
        formatter.field("assessment_targets", &self.assessment_targets);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeAssessmentTargetsOutput`](crate::output::DescribeAssessmentTargetsOutput)
pub mod describe_assessment_targets_output {
    /// A builder for [`DescribeAssessmentTargetsOutput`](crate::output::DescribeAssessmentTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_targets:
            std::option::Option<std::vec::Vec<crate::model::AssessmentTarget>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `assessment_targets`.
        ///
        /// To override the contents of this collection use [`set_assessment_targets`](Self::set_assessment_targets).
        ///
        /// <p>Information about the assessment targets.</p>
        pub fn assessment_targets(
            mut self,
            input: impl Into<crate::model::AssessmentTarget>,
        ) -> Self {
            let mut v = self.assessment_targets.unwrap_or_default();
            v.push(input.into());
            self.assessment_targets = Some(v);
            self
        }
        /// <p>Information about the assessment targets.</p>
        pub fn set_assessment_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentTarget>>,
        ) -> Self {
            self.assessment_targets = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Assessment target details that cannot be described. An error code is provided for
        /// each failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Assessment target details that cannot be described. An error code is provided for
        /// each failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAssessmentTargetsOutput`](crate::output::DescribeAssessmentTargetsOutput)
        pub fn build(self) -> crate::output::DescribeAssessmentTargetsOutput {
            crate::output::DescribeAssessmentTargetsOutput {
                assessment_targets: self.assessment_targets,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeAssessmentTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssessmentTargetsOutput`](crate::output::DescribeAssessmentTargetsOutput)
    pub fn builder() -> crate::output::describe_assessment_targets_output::Builder {
        crate::output::describe_assessment_targets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAssessmentRunsOutput {
    /// <p>Information about the assessment run.</p>
    pub assessment_runs: std::option::Option<std::vec::Vec<crate::model::AssessmentRun>>,
    /// <p>Assessment run details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl DescribeAssessmentRunsOutput {
    /// <p>Information about the assessment run.</p>
    pub fn assessment_runs(&self) -> std::option::Option<&[crate::model::AssessmentRun]> {
        self.assessment_runs.as_deref()
    }
    /// <p>Assessment run details that cannot be described. An error code is provided for each
    /// failed item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for DescribeAssessmentRunsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAssessmentRunsOutput");
        formatter.field("assessment_runs", &self.assessment_runs);
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`DescribeAssessmentRunsOutput`](crate::output::DescribeAssessmentRunsOutput)
pub mod describe_assessment_runs_output {
    /// A builder for [`DescribeAssessmentRunsOutput`](crate::output::DescribeAssessmentRunsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_runs: std::option::Option<std::vec::Vec<crate::model::AssessmentRun>>,
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Appends an item to `assessment_runs`.
        ///
        /// To override the contents of this collection use [`set_assessment_runs`](Self::set_assessment_runs).
        ///
        /// <p>Information about the assessment run.</p>
        pub fn assessment_runs(mut self, input: impl Into<crate::model::AssessmentRun>) -> Self {
            let mut v = self.assessment_runs.unwrap_or_default();
            v.push(input.into());
            self.assessment_runs = Some(v);
            self
        }
        /// <p>Information about the assessment run.</p>
        pub fn set_assessment_runs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentRun>>,
        ) -> Self {
            self.assessment_runs = input;
            self
        }
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Assessment run details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Assessment run details that cannot be described. An error code is provided for each
        /// failed item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAssessmentRunsOutput`](crate::output::DescribeAssessmentRunsOutput)
        pub fn build(self) -> crate::output::DescribeAssessmentRunsOutput {
            crate::output::DescribeAssessmentRunsOutput {
                assessment_runs: self.assessment_runs,
                failed_items: self.failed_items,
            }
        }
    }
}
impl DescribeAssessmentRunsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssessmentRunsOutput`](crate::output::DescribeAssessmentRunsOutput)
    pub fn builder() -> crate::output::describe_assessment_runs_output::Builder {
        crate::output::describe_assessment_runs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAssessmentTemplateOutput {}
impl std::fmt::Debug for DeleteAssessmentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAssessmentTemplateOutput");
        formatter.finish()
    }
}
/// See [`DeleteAssessmentTemplateOutput`](crate::output::DeleteAssessmentTemplateOutput)
pub mod delete_assessment_template_output {
    /// A builder for [`DeleteAssessmentTemplateOutput`](crate::output::DeleteAssessmentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAssessmentTemplateOutput`](crate::output::DeleteAssessmentTemplateOutput)
        pub fn build(self) -> crate::output::DeleteAssessmentTemplateOutput {
            crate::output::DeleteAssessmentTemplateOutput {}
        }
    }
}
impl DeleteAssessmentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentTemplateOutput`](crate::output::DeleteAssessmentTemplateOutput)
    pub fn builder() -> crate::output::delete_assessment_template_output::Builder {
        crate::output::delete_assessment_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAssessmentTargetOutput {}
impl std::fmt::Debug for DeleteAssessmentTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAssessmentTargetOutput");
        formatter.finish()
    }
}
/// See [`DeleteAssessmentTargetOutput`](crate::output::DeleteAssessmentTargetOutput)
pub mod delete_assessment_target_output {
    /// A builder for [`DeleteAssessmentTargetOutput`](crate::output::DeleteAssessmentTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAssessmentTargetOutput`](crate::output::DeleteAssessmentTargetOutput)
        pub fn build(self) -> crate::output::DeleteAssessmentTargetOutput {
            crate::output::DeleteAssessmentTargetOutput {}
        }
    }
}
impl DeleteAssessmentTargetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentTargetOutput`](crate::output::DeleteAssessmentTargetOutput)
    pub fn builder() -> crate::output::delete_assessment_target_output::Builder {
        crate::output::delete_assessment_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAssessmentRunOutput {}
impl std::fmt::Debug for DeleteAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAssessmentRunOutput");
        formatter.finish()
    }
}
/// See [`DeleteAssessmentRunOutput`](crate::output::DeleteAssessmentRunOutput)
pub mod delete_assessment_run_output {
    /// A builder for [`DeleteAssessmentRunOutput`](crate::output::DeleteAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAssessmentRunOutput`](crate::output::DeleteAssessmentRunOutput)
        pub fn build(self) -> crate::output::DeleteAssessmentRunOutput {
            crate::output::DeleteAssessmentRunOutput {}
        }
    }
}
impl DeleteAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentRunOutput`](crate::output::DeleteAssessmentRunOutput)
    pub fn builder() -> crate::output::delete_assessment_run_output::Builder {
        crate::output::delete_assessment_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateResourceGroupOutput {
    /// <p>The ARN that specifies the resource group that is created.</p>
    pub resource_group_arn: std::option::Option<std::string::String>,
}
impl CreateResourceGroupOutput {
    /// <p>The ARN that specifies the resource group that is created.</p>
    pub fn resource_group_arn(&self) -> std::option::Option<&str> {
        self.resource_group_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateResourceGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateResourceGroupOutput");
        formatter.field("resource_group_arn", &self.resource_group_arn);
        formatter.finish()
    }
}
/// See [`CreateResourceGroupOutput`](crate::output::CreateResourceGroupOutput)
pub mod create_resource_group_output {
    /// A builder for [`CreateResourceGroupOutput`](crate::output::CreateResourceGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_group_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN that specifies the resource group that is created.</p>
        pub fn resource_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_group_arn = Some(input.into());
            self
        }
        /// <p>The ARN that specifies the resource group that is created.</p>
        pub fn set_resource_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_group_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateResourceGroupOutput`](crate::output::CreateResourceGroupOutput)
        pub fn build(self) -> crate::output::CreateResourceGroupOutput {
            crate::output::CreateResourceGroupOutput {
                resource_group_arn: self.resource_group_arn,
            }
        }
    }
}
impl CreateResourceGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateResourceGroupOutput`](crate::output::CreateResourceGroupOutput)
    pub fn builder() -> crate::output::create_resource_group_output::Builder {
        crate::output::create_resource_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateExclusionsPreviewOutput {
    /// <p>Specifies the unique identifier of the requested exclusions preview. You can use the
    /// unique identifier to retrieve the exclusions preview when running the GetExclusionsPreview
    /// API.</p>
    pub preview_token: std::option::Option<std::string::String>,
}
impl CreateExclusionsPreviewOutput {
    /// <p>Specifies the unique identifier of the requested exclusions preview. You can use the
    /// unique identifier to retrieve the exclusions preview when running the GetExclusionsPreview
    /// API.</p>
    pub fn preview_token(&self) -> std::option::Option<&str> {
        self.preview_token.as_deref()
    }
}
impl std::fmt::Debug for CreateExclusionsPreviewOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExclusionsPreviewOutput");
        formatter.field("preview_token", &self.preview_token);
        formatter.finish()
    }
}
/// See [`CreateExclusionsPreviewOutput`](crate::output::CreateExclusionsPreviewOutput)
pub mod create_exclusions_preview_output {
    /// A builder for [`CreateExclusionsPreviewOutput`](crate::output::CreateExclusionsPreviewOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) preview_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Specifies the unique identifier of the requested exclusions preview. You can use the
        /// unique identifier to retrieve the exclusions preview when running the GetExclusionsPreview
        /// API.</p>
        pub fn preview_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.preview_token = Some(input.into());
            self
        }
        /// <p>Specifies the unique identifier of the requested exclusions preview. You can use the
        /// unique identifier to retrieve the exclusions preview when running the GetExclusionsPreview
        /// API.</p>
        pub fn set_preview_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preview_token = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateExclusionsPreviewOutput`](crate::output::CreateExclusionsPreviewOutput)
        pub fn build(self) -> crate::output::CreateExclusionsPreviewOutput {
            crate::output::CreateExclusionsPreviewOutput {
                preview_token: self.preview_token,
            }
        }
    }
}
impl CreateExclusionsPreviewOutput {
    /// Creates a new builder-style object to manufacture [`CreateExclusionsPreviewOutput`](crate::output::CreateExclusionsPreviewOutput)
    pub fn builder() -> crate::output::create_exclusions_preview_output::Builder {
        crate::output::create_exclusions_preview_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAssessmentTemplateOutput {
    /// <p>The ARN that specifies the assessment template that is created.</p>
    pub assessment_template_arn: std::option::Option<std::string::String>,
}
impl CreateAssessmentTemplateOutput {
    /// <p>The ARN that specifies the assessment template that is created.</p>
    pub fn assessment_template_arn(&self) -> std::option::Option<&str> {
        self.assessment_template_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateAssessmentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssessmentTemplateOutput");
        formatter.field("assessment_template_arn", &self.assessment_template_arn);
        formatter.finish()
    }
}
/// See [`CreateAssessmentTemplateOutput`](crate::output::CreateAssessmentTemplateOutput)
pub mod create_assessment_template_output {
    /// A builder for [`CreateAssessmentTemplateOutput`](crate::output::CreateAssessmentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_template_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN that specifies the assessment template that is created.</p>
        pub fn assessment_template_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.assessment_template_arn = Some(input.into());
            self
        }
        /// <p>The ARN that specifies the assessment template that is created.</p>
        pub fn set_assessment_template_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.assessment_template_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAssessmentTemplateOutput`](crate::output::CreateAssessmentTemplateOutput)
        pub fn build(self) -> crate::output::CreateAssessmentTemplateOutput {
            crate::output::CreateAssessmentTemplateOutput {
                assessment_template_arn: self.assessment_template_arn,
            }
        }
    }
}
impl CreateAssessmentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentTemplateOutput`](crate::output::CreateAssessmentTemplateOutput)
    pub fn builder() -> crate::output::create_assessment_template_output::Builder {
        crate::output::create_assessment_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAssessmentTargetOutput {
    /// <p>The ARN that specifies the assessment target that is created.</p>
    pub assessment_target_arn: std::option::Option<std::string::String>,
}
impl CreateAssessmentTargetOutput {
    /// <p>The ARN that specifies the assessment target that is created.</p>
    pub fn assessment_target_arn(&self) -> std::option::Option<&str> {
        self.assessment_target_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateAssessmentTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssessmentTargetOutput");
        formatter.field("assessment_target_arn", &self.assessment_target_arn);
        formatter.finish()
    }
}
/// See [`CreateAssessmentTargetOutput`](crate::output::CreateAssessmentTargetOutput)
pub mod create_assessment_target_output {
    /// A builder for [`CreateAssessmentTargetOutput`](crate::output::CreateAssessmentTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_target_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN that specifies the assessment target that is created.</p>
        pub fn assessment_target_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.assessment_target_arn = Some(input.into());
            self
        }
        /// <p>The ARN that specifies the assessment target that is created.</p>
        pub fn set_assessment_target_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.assessment_target_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAssessmentTargetOutput`](crate::output::CreateAssessmentTargetOutput)
        pub fn build(self) -> crate::output::CreateAssessmentTargetOutput {
            crate::output::CreateAssessmentTargetOutput {
                assessment_target_arn: self.assessment_target_arn,
            }
        }
    }
}
impl CreateAssessmentTargetOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentTargetOutput`](crate::output::CreateAssessmentTargetOutput)
    pub fn builder() -> crate::output::create_assessment_target_output::Builder {
        crate::output::create_assessment_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddAttributesToFindingsOutput {
    /// <p>Attribute details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub failed_items: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    >,
}
impl AddAttributesToFindingsOutput {
    /// <p>Attribute details that cannot be described. An error code is provided for each failed
    /// item.</p>
    pub fn failed_items(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
    > {
        self.failed_items.as_ref()
    }
}
impl std::fmt::Debug for AddAttributesToFindingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddAttributesToFindingsOutput");
        formatter.field("failed_items", &self.failed_items);
        formatter.finish()
    }
}
/// See [`AddAttributesToFindingsOutput`](crate::output::AddAttributesToFindingsOutput)
pub mod add_attributes_to_findings_output {
    /// A builder for [`AddAttributesToFindingsOutput`](crate::output::AddAttributesToFindingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_items: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `failed_items`.
        ///
        /// To override the contents of this collection use [`set_failed_items`](Self::set_failed_items).
        ///
        /// <p>Attribute details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn failed_items(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::FailedItemDetails>,
        ) -> Self {
            let mut hash_map = self.failed_items.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.failed_items = Some(hash_map);
            self
        }
        /// <p>Attribute details that cannot be described. An error code is provided for each failed
        /// item.</p>
        pub fn set_failed_items(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FailedItemDetails>,
            >,
        ) -> Self {
            self.failed_items = input;
            self
        }
        /// Consumes the builder and constructs a [`AddAttributesToFindingsOutput`](crate::output::AddAttributesToFindingsOutput)
        pub fn build(self) -> crate::output::AddAttributesToFindingsOutput {
            crate::output::AddAttributesToFindingsOutput {
                failed_items: self.failed_items,
            }
        }
    }
}
impl AddAttributesToFindingsOutput {
    /// Creates a new builder-style object to manufacture [`AddAttributesToFindingsOutput`](crate::output::AddAttributesToFindingsOutput)
    pub fn builder() -> crate::output::add_attributes_to_findings_output::Builder {
        crate::output::add_attributes_to_findings_output::Builder::default()
    }
}
