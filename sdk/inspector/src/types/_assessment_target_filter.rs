// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used as the request parameter in the <code>ListAssessmentTargets</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssessmentTargetFilter {
    /// <p>For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTargetName</b> property of the <code>AssessmentTarget</code> data type.</p>
    #[doc(hidden)]
    pub assessment_target_name_pattern: std::option::Option<std::string::String>,
}
impl AssessmentTargetFilter {
    /// <p>For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTargetName</b> property of the <code>AssessmentTarget</code> data type.</p>
    pub fn assessment_target_name_pattern(&self) -> std::option::Option<&str> {
        self.assessment_target_name_pattern.as_deref()
    }
}
impl AssessmentTargetFilter {
    /// Creates a new builder-style object to manufacture [`AssessmentTargetFilter`](crate::types::AssessmentTargetFilter).
    pub fn builder() -> crate::types::builders::AssessmentTargetFilterBuilder {
        crate::types::builders::AssessmentTargetFilterBuilder::default()
    }
}

/// A builder for [`AssessmentTargetFilter`](crate::types::AssessmentTargetFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssessmentTargetFilterBuilder {
    pub(crate) assessment_target_name_pattern: std::option::Option<std::string::String>,
}
impl AssessmentTargetFilterBuilder {
    /// <p>For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTargetName</b> property of the <code>AssessmentTarget</code> data type.</p>
    pub fn assessment_target_name_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_target_name_pattern = Some(input.into());
        self
    }
    /// <p>For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the <b>assessmentTargetName</b> property of the <code>AssessmentTarget</code> data type.</p>
    pub fn set_assessment_target_name_pattern(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_target_name_pattern = input;
        self
    }
    /// Consumes the builder and constructs a [`AssessmentTargetFilter`](crate::types::AssessmentTargetFilter).
    pub fn build(self) -> crate::types::AssessmentTargetFilter {
        crate::types::AssessmentTargetFilter {
            assessment_target_name_pattern: self.assessment_target_name_pattern,
        }
    }
}
