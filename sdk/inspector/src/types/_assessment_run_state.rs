// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AssessmentRunState`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let assessmentrunstate = unimplemented!();
/// match assessmentrunstate {
///     AssessmentRunState::Canceled => { /* ... */ },
///     AssessmentRunState::CollectingData => { /* ... */ },
///     AssessmentRunState::Completed => { /* ... */ },
///     AssessmentRunState::CompletedWithErrors => { /* ... */ },
///     AssessmentRunState::Created => { /* ... */ },
///     AssessmentRunState::DataCollected => { /* ... */ },
///     AssessmentRunState::Error => { /* ... */ },
///     AssessmentRunState::EvaluatingRules => { /* ... */ },
///     AssessmentRunState::Failed => { /* ... */ },
///     AssessmentRunState::StartDataCollectionInProgress => { /* ... */ },
///     AssessmentRunState::StartDataCollectionPending => { /* ... */ },
///     AssessmentRunState::StartEvaluatingRulesPending => { /* ... */ },
///     AssessmentRunState::StopDataCollectionPending => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `assessmentrunstate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AssessmentRunState::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AssessmentRunState::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AssessmentRunState::NewFeature` is defined.
/// Specifically, when `assessmentrunstate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AssessmentRunState::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AssessmentRunState {
    #[allow(missing_docs)] // documentation missing in model
    Canceled,
    #[allow(missing_docs)] // documentation missing in model
    CollectingData,
    #[allow(missing_docs)] // documentation missing in model
    Completed,
    #[allow(missing_docs)] // documentation missing in model
    CompletedWithErrors,
    #[allow(missing_docs)] // documentation missing in model
    Created,
    #[allow(missing_docs)] // documentation missing in model
    DataCollected,
    #[allow(missing_docs)] // documentation missing in model
    Error,
    #[allow(missing_docs)] // documentation missing in model
    EvaluatingRules,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    StartDataCollectionInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StartDataCollectionPending,
    #[allow(missing_docs)] // documentation missing in model
    StartEvaluatingRulesPending,
    #[allow(missing_docs)] // documentation missing in model
    StopDataCollectionPending,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AssessmentRunState {
    fn from(s: &str) -> Self {
        match s {
            "CANCELED" => AssessmentRunState::Canceled,
            "COLLECTING_DATA" => AssessmentRunState::CollectingData,
            "COMPLETED" => AssessmentRunState::Completed,
            "COMPLETED_WITH_ERRORS" => AssessmentRunState::CompletedWithErrors,
            "CREATED" => AssessmentRunState::Created,
            "DATA_COLLECTED" => AssessmentRunState::DataCollected,
            "ERROR" => AssessmentRunState::Error,
            "EVALUATING_RULES" => AssessmentRunState::EvaluatingRules,
            "FAILED" => AssessmentRunState::Failed,
            "START_DATA_COLLECTION_IN_PROGRESS" => {
                AssessmentRunState::StartDataCollectionInProgress
            }
            "START_DATA_COLLECTION_PENDING" => AssessmentRunState::StartDataCollectionPending,
            "START_EVALUATING_RULES_PENDING" => AssessmentRunState::StartEvaluatingRulesPending,
            "STOP_DATA_COLLECTION_PENDING" => AssessmentRunState::StopDataCollectionPending,
            other => AssessmentRunState::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AssessmentRunState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AssessmentRunState::from(s))
    }
}
impl AssessmentRunState {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AssessmentRunState::Canceled => "CANCELED",
            AssessmentRunState::CollectingData => "COLLECTING_DATA",
            AssessmentRunState::Completed => "COMPLETED",
            AssessmentRunState::CompletedWithErrors => "COMPLETED_WITH_ERRORS",
            AssessmentRunState::Created => "CREATED",
            AssessmentRunState::DataCollected => "DATA_COLLECTED",
            AssessmentRunState::Error => "ERROR",
            AssessmentRunState::EvaluatingRules => "EVALUATING_RULES",
            AssessmentRunState::Failed => "FAILED",
            AssessmentRunState::StartDataCollectionInProgress => {
                "START_DATA_COLLECTION_IN_PROGRESS"
            }
            AssessmentRunState::StartDataCollectionPending => "START_DATA_COLLECTION_PENDING",
            AssessmentRunState::StartEvaluatingRulesPending => "START_EVALUATING_RULES_PENDING",
            AssessmentRunState::StopDataCollectionPending => "STOP_DATA_COLLECTION_PENDING",
            AssessmentRunState::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CANCELED",
            "COLLECTING_DATA",
            "COMPLETED",
            "COMPLETED_WITH_ERRORS",
            "CREATED",
            "DATA_COLLECTED",
            "ERROR",
            "EVALUATING_RULES",
            "FAILED",
            "START_DATA_COLLECTION_IN_PROGRESS",
            "START_DATA_COLLECTION_PENDING",
            "START_EVALUATING_RULES_PENDING",
            "STOP_DATA_COLLECTION_PENDING",
        ]
    }
}
impl AsRef<str> for AssessmentRunState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
