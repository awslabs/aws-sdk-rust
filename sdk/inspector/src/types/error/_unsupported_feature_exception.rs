// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used by the <code>GetAssessmentReport</code> API. The request was rejected because you tried to generate a report for an assessment run that existed before reporting was supported in Amazon Inspector. You can only generate reports for assessment runs that took place or will take place after generating reports in Amazon Inspector became available.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnsupportedFeatureException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub can_retry: std::option::Option<bool>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl UnsupportedFeatureException {
    #[allow(missing_docs)] // documentation missing in model
    pub fn can_retry(&self) -> std::option::Option<bool> {
        self.can_retry
    }
}
impl UnsupportedFeatureException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnsupportedFeatureException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedFeatureException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for UnsupportedFeatureException {}
impl aws_http::request_id::RequestId for crate::types::error::UnsupportedFeatureException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for UnsupportedFeatureException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl UnsupportedFeatureException {
    /// Creates a new builder-style object to manufacture [`UnsupportedFeatureException`](crate::types::error::UnsupportedFeatureException).
    pub fn builder() -> crate::types::error::builders::UnsupportedFeatureExceptionBuilder {
        crate::types::error::builders::UnsupportedFeatureExceptionBuilder::default()
    }
}

/// A builder for [`UnsupportedFeatureException`](crate::types::error::UnsupportedFeatureException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnsupportedFeatureExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) can_retry: std::option::Option<bool>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl UnsupportedFeatureExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn can_retry(mut self, input: bool) -> Self {
        self.can_retry = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_can_retry(mut self, input: std::option::Option<bool>) -> Self {
        self.can_retry = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`UnsupportedFeatureException`](crate::types::error::UnsupportedFeatureException).
    pub fn build(self) -> crate::types::error::UnsupportedFeatureException {
        crate::types::error::UnsupportedFeatureException {
            message: self.message,
            can_retry: self.can_retry,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
