// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the network interfaces interacting with an EC2 instance. This data type is used as one of the elements of the <code>AssetAttributes</code> data type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterface {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The ID of a subnet associated with the network interface.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The ID of a VPC associated with the network interface.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The name of a private DNS associated with the network interface.</p>
    #[doc(hidden)]
    pub private_dns_name: std::option::Option<std::string::String>,
    /// <p>The private IP address associated with the network interface.</p>
    #[doc(hidden)]
    pub private_ip_address: std::option::Option<std::string::String>,
    /// <p>A list of the private IP addresses associated with the network interface. Includes the privateDnsName and privateIpAddress.</p>
    #[doc(hidden)]
    pub private_ip_addresses: std::option::Option<std::vec::Vec<crate::types::PrivateIp>>,
    /// <p>The name of a public DNS associated with the network interface.</p>
    #[doc(hidden)]
    pub public_dns_name: std::option::Option<std::string::String>,
    /// <p>The public IP address from which the network interface is reachable.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>The IP addresses associated with the network interface.</p>
    #[doc(hidden)]
    pub ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of the security groups associated with the network interface. Includes the groupId and groupName.</p>
    #[doc(hidden)]
    pub security_groups: std::option::Option<std::vec::Vec<crate::types::SecurityGroup>>,
}
impl NetworkInterface {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The ID of a subnet associated with the network interface.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The ID of a VPC associated with the network interface.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The name of a private DNS associated with the network interface.</p>
    pub fn private_dns_name(&self) -> std::option::Option<&str> {
        self.private_dns_name.as_deref()
    }
    /// <p>The private IP address associated with the network interface.</p>
    pub fn private_ip_address(&self) -> std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
    /// <p>A list of the private IP addresses associated with the network interface. Includes the privateDnsName and privateIpAddress.</p>
    pub fn private_ip_addresses(&self) -> std::option::Option<&[crate::types::PrivateIp]> {
        self.private_ip_addresses.as_deref()
    }
    /// <p>The name of a public DNS associated with the network interface.</p>
    pub fn public_dns_name(&self) -> std::option::Option<&str> {
        self.public_dns_name.as_deref()
    }
    /// <p>The public IP address from which the network interface is reachable.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>The IP addresses associated with the network interface.</p>
    pub fn ipv6_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.ipv6_addresses.as_deref()
    }
    /// <p>A list of the security groups associated with the network interface. Includes the groupId and groupName.</p>
    pub fn security_groups(&self) -> std::option::Option<&[crate::types::SecurityGroup]> {
        self.security_groups.as_deref()
    }
}
impl NetworkInterface {
    /// Creates a new builder-style object to manufacture [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn builder() -> crate::types::builders::NetworkInterfaceBuilder {
        crate::types::builders::NetworkInterfaceBuilder::default()
    }
}

/// A builder for [`NetworkInterface`](crate::types::NetworkInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfaceBuilder {
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) private_dns_name: std::option::Option<std::string::String>,
    pub(crate) private_ip_address: std::option::Option<std::string::String>,
    pub(crate) private_ip_addresses: std::option::Option<std::vec::Vec<crate::types::PrivateIp>>,
    pub(crate) public_dns_name: std::option::Option<std::string::String>,
    pub(crate) public_ip: std::option::Option<std::string::String>,
    pub(crate) ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_groups: std::option::Option<std::vec::Vec<crate::types::SecurityGroup>>,
}
impl NetworkInterfaceBuilder {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The ID of a subnet associated with the network interface.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of a subnet associated with the network interface.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of a VPC associated with the network interface.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of a VPC associated with the network interface.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The name of a private DNS associated with the network interface.</p>
    pub fn private_dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_dns_name = Some(input.into());
        self
    }
    /// <p>The name of a private DNS associated with the network interface.</p>
    pub fn set_private_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_dns_name = input;
        self
    }
    /// <p>The private IP address associated with the network interface.</p>
    pub fn private_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_ip_address = Some(input.into());
        self
    }
    /// <p>The private IP address associated with the network interface.</p>
    pub fn set_private_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_ip_address = input;
        self
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>A list of the private IP addresses associated with the network interface. Includes the privateDnsName and privateIpAddress.</p>
    pub fn private_ip_addresses(mut self, input: crate::types::PrivateIp) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input);
        self.private_ip_addresses = Some(v);
        self
    }
    /// <p>A list of the private IP addresses associated with the network interface. Includes the privateDnsName and privateIpAddress.</p>
    pub fn set_private_ip_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PrivateIp>>,
    ) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// <p>The name of a public DNS associated with the network interface.</p>
    pub fn public_dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_dns_name = Some(input.into());
        self
    }
    /// <p>The name of a public DNS associated with the network interface.</p>
    pub fn set_public_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_dns_name = input;
        self
    }
    /// <p>The public IP address from which the network interface is reachable.</p>
    pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_ip = Some(input.into());
        self
    }
    /// <p>The public IP address from which the network interface is reachable.</p>
    pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>The IP addresses associated with the network interface.</p>
    pub fn ipv6_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv6_addresses = Some(v);
        self
    }
    /// <p>The IP addresses associated with the network interface.</p>
    pub fn set_ipv6_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>A list of the security groups associated with the network interface. Includes the groupId and groupName.</p>
    pub fn security_groups(mut self, input: crate::types::SecurityGroup) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input);
        self.security_groups = Some(v);
        self
    }
    /// <p>A list of the security groups associated with the network interface. Includes the groupId and groupName.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SecurityGroup>>,
    ) -> Self {
        self.security_groups = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn build(self) -> crate::types::NetworkInterface {
        crate::types::NetworkInterface {
            network_interface_id: self.network_interface_id,
            subnet_id: self.subnet_id,
            vpc_id: self.vpc_id,
            private_dns_name: self.private_dns_name,
            private_ip_address: self.private_ip_address,
            private_ip_addresses: self.private_ip_addresses,
            public_dns_name: self.public_dns_name,
            public_ip: self.public_ip,
            ipv6_addresses: self.ipv6_addresses,
            security_groups: self.security_groups,
        }
    }
}
