// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the <code>ListEventSubscriptions</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Subscription {
    /// <p>The ARN of the assessment template that is used during the event for which the SNS notification is sent.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
    /// <p>The list of existing event subscriptions.</p>
    #[doc(hidden)]
    pub event_subscriptions: std::option::Option<std::vec::Vec<crate::types::EventSubscription>>,
}
impl Subscription {
    /// <p>The ARN of the assessment template that is used during the event for which the SNS notification is sent.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
    /// <p>The list of existing event subscriptions.</p>
    pub fn event_subscriptions(&self) -> std::option::Option<&[crate::types::EventSubscription]> {
        self.event_subscriptions.as_deref()
    }
}
impl Subscription {
    /// Creates a new builder-style object to manufacture [`Subscription`](crate::types::Subscription).
    pub fn builder() -> crate::types::builders::SubscriptionBuilder {
        crate::types::builders::SubscriptionBuilder::default()
    }
}

/// A builder for [`Subscription`](crate::types::Subscription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubscriptionBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) topic_arn: std::option::Option<std::string::String>,
    pub(crate) event_subscriptions:
        std::option::Option<std::vec::Vec<crate::types::EventSubscription>>,
}
impl SubscriptionBuilder {
    /// <p>The ARN of the assessment template that is used during the event for which the SNS notification is sent.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the assessment template that is used during the event for which the SNS notification is sent.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// Appends an item to `event_subscriptions`.
    ///
    /// To override the contents of this collection use [`set_event_subscriptions`](Self::set_event_subscriptions).
    ///
    /// <p>The list of existing event subscriptions.</p>
    pub fn event_subscriptions(mut self, input: crate::types::EventSubscription) -> Self {
        let mut v = self.event_subscriptions.unwrap_or_default();
        v.push(input);
        self.event_subscriptions = Some(v);
        self
    }
    /// <p>The list of existing event subscriptions.</p>
    pub fn set_event_subscriptions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EventSubscription>>,
    ) -> Self {
        self.event_subscriptions = input;
        self
    }
    /// Consumes the builder and constructs a [`Subscription`](crate::types::Subscription).
    pub fn build(self) -> crate::types::Subscription {
        crate::types::Subscription {
            resource_arn: self.resource_arn,
            topic_arn: self.topic_arn,
            event_subscriptions: self.event_subscriptions,
        }
    }
}
