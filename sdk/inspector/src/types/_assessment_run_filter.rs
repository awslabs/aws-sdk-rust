// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used as the request parameter in the <code>ListAssessmentRuns</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssessmentRunFilter {
    /// <p>For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the <b>assessmentRunName</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub name_pattern: std::option::Option<std::string::String>,
    /// <p>For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the <b>assessmentRunState</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub states: std::option::Option<std::vec::Vec<crate::types::AssessmentRunState>>,
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub duration_range: std::option::Option<crate::types::DurationRange>,
    /// <p>For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>rulesPackages</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>startTime</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub start_time_range: std::option::Option<crate::types::TimestampRange>,
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>completedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub completion_time_range: std::option::Option<crate::types::TimestampRange>,
    /// <p>For a record to match a filter, the value that is specified for this data type property must match the <b>stateChangedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    #[doc(hidden)]
    pub state_change_time_range: std::option::Option<crate::types::TimestampRange>,
}
impl AssessmentRunFilter {
    /// <p>For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the <b>assessmentRunName</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn name_pattern(&self) -> std::option::Option<&str> {
        self.name_pattern.as_deref()
    }
    /// <p>For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the <b>assessmentRunState</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn states(&self) -> std::option::Option<&[crate::types::AssessmentRunState]> {
        self.states.as_deref()
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn duration_range(&self) -> std::option::Option<&crate::types::DurationRange> {
        self.duration_range.as_ref()
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>rulesPackages</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn rules_package_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.rules_package_arns.as_deref()
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>startTime</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn start_time_range(&self) -> std::option::Option<&crate::types::TimestampRange> {
        self.start_time_range.as_ref()
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>completedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn completion_time_range(&self) -> std::option::Option<&crate::types::TimestampRange> {
        self.completion_time_range.as_ref()
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must match the <b>stateChangedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn state_change_time_range(&self) -> std::option::Option<&crate::types::TimestampRange> {
        self.state_change_time_range.as_ref()
    }
}
impl AssessmentRunFilter {
    /// Creates a new builder-style object to manufacture [`AssessmentRunFilter`](crate::types::AssessmentRunFilter).
    pub fn builder() -> crate::types::builders::AssessmentRunFilterBuilder {
        crate::types::builders::AssessmentRunFilterBuilder::default()
    }
}

/// A builder for [`AssessmentRunFilter`](crate::types::AssessmentRunFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssessmentRunFilterBuilder {
    pub(crate) name_pattern: std::option::Option<std::string::String>,
    pub(crate) states: std::option::Option<std::vec::Vec<crate::types::AssessmentRunState>>,
    pub(crate) duration_range: std::option::Option<crate::types::DurationRange>,
    pub(crate) rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) start_time_range: std::option::Option<crate::types::TimestampRange>,
    pub(crate) completion_time_range: std::option::Option<crate::types::TimestampRange>,
    pub(crate) state_change_time_range: std::option::Option<crate::types::TimestampRange>,
}
impl AssessmentRunFilterBuilder {
    /// <p>For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the <b>assessmentRunName</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn name_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_pattern = Some(input.into());
        self
    }
    /// <p>For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the <b>assessmentRunName</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_name_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_pattern = input;
        self
    }
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the <b>assessmentRunState</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn states(mut self, input: crate::types::AssessmentRunState) -> Self {
        let mut v = self.states.unwrap_or_default();
        v.push(input);
        self.states = Some(v);
        self
    }
    /// <p>For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the <b>assessmentRunState</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssessmentRunState>>,
    ) -> Self {
        self.states = input;
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn duration_range(mut self, input: crate::types::DurationRange) -> Self {
        self.duration_range = Some(input);
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>durationInSeconds</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_duration_range(
        mut self,
        input: std::option::Option<crate::types::DurationRange>,
    ) -> Self {
        self.duration_range = input;
        self
    }
    /// Appends an item to `rules_package_arns`.
    ///
    /// To override the contents of this collection use [`set_rules_package_arns`](Self::set_rules_package_arns).
    ///
    /// <p>For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>rulesPackages</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn rules_package_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.rules_package_arns.unwrap_or_default();
        v.push(input.into());
        self.rules_package_arns = Some(v);
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>rulesPackages</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_rules_package_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.rules_package_arns = input;
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>startTime</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn start_time_range(mut self, input: crate::types::TimestampRange) -> Self {
        self.start_time_range = Some(input);
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>startTime</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_start_time_range(
        mut self,
        input: std::option::Option<crate::types::TimestampRange>,
    ) -> Self {
        self.start_time_range = input;
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>completedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn completion_time_range(mut self, input: crate::types::TimestampRange) -> Self {
        self.completion_time_range = Some(input);
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the <b>completedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_completion_time_range(
        mut self,
        input: std::option::Option<crate::types::TimestampRange>,
    ) -> Self {
        self.completion_time_range = input;
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must match the <b>stateChangedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn state_change_time_range(mut self, input: crate::types::TimestampRange) -> Self {
        self.state_change_time_range = Some(input);
        self
    }
    /// <p>For a record to match a filter, the value that is specified for this data type property must match the <b>stateChangedAt</b> property of the <code>AssessmentRun</code> data type.</p>
    pub fn set_state_change_time_range(
        mut self,
        input: std::option::Option<crate::types::TimestampRange>,
    ) -> Self {
        self.state_change_time_range = input;
        self
    }
    /// Consumes the builder and constructs a [`AssessmentRunFilter`](crate::types::AssessmentRunFilter).
    pub fn build(self) -> crate::types::AssessmentRunFilter {
        crate::types::AssessmentRunFilter {
            name_pattern: self.name_pattern,
            states: self.states,
            duration_range: self.duration_range,
            rules_package_arns: self.rules_package_arns,
            start_time_range: self.start_time_range,
            completion_time_range: self.completion_time_range,
            state_change_time_range: self.state_change_time_range,
        }
    }
}
