// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used in the <code>Finding</code> data type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InspectorServiceAttributes {
    /// <p>The schema version of this data type.</p>
    #[doc(hidden)]
    pub schema_version: i32,
    /// <p>The ARN of the assessment run during which the finding is generated.</p>
    #[doc(hidden)]
    pub assessment_run_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the rules package that is used to generate the finding.</p>
    #[doc(hidden)]
    pub rules_package_arn: std::option::Option<std::string::String>,
}
impl InspectorServiceAttributes {
    /// <p>The schema version of this data type.</p>
    pub fn schema_version(&self) -> i32 {
        self.schema_version
    }
    /// <p>The ARN of the assessment run during which the finding is generated.</p>
    pub fn assessment_run_arn(&self) -> std::option::Option<&str> {
        self.assessment_run_arn.as_deref()
    }
    /// <p>The ARN of the rules package that is used to generate the finding.</p>
    pub fn rules_package_arn(&self) -> std::option::Option<&str> {
        self.rules_package_arn.as_deref()
    }
}
impl InspectorServiceAttributes {
    /// Creates a new builder-style object to manufacture [`InspectorServiceAttributes`](crate::types::InspectorServiceAttributes).
    pub fn builder() -> crate::types::builders::InspectorServiceAttributesBuilder {
        crate::types::builders::InspectorServiceAttributesBuilder::default()
    }
}

/// A builder for [`InspectorServiceAttributes`](crate::types::InspectorServiceAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InspectorServiceAttributesBuilder {
    pub(crate) schema_version: std::option::Option<i32>,
    pub(crate) assessment_run_arn: std::option::Option<std::string::String>,
    pub(crate) rules_package_arn: std::option::Option<std::string::String>,
}
impl InspectorServiceAttributesBuilder {
    /// <p>The schema version of this data type.</p>
    pub fn schema_version(mut self, input: i32) -> Self {
        self.schema_version = Some(input);
        self
    }
    /// <p>The schema version of this data type.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<i32>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The ARN of the assessment run during which the finding is generated.</p>
    pub fn assessment_run_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_run_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the assessment run during which the finding is generated.</p>
    pub fn set_assessment_run_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_run_arn = input;
        self
    }
    /// <p>The ARN of the rules package that is used to generate the finding.</p>
    pub fn rules_package_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rules_package_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the rules package that is used to generate the finding.</p>
    pub fn set_rules_package_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rules_package_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`InspectorServiceAttributes`](crate::types::InspectorServiceAttributes).
    pub fn build(self) -> crate::types::InspectorServiceAttributes {
        crate::types::InspectorServiceAttributes {
            schema_version: self.schema_version.unwrap_or_default(),
            assessment_run_arn: self.assessment_run_arn,
            rules_package_arn: self.rules_package_arn,
        }
    }
}
