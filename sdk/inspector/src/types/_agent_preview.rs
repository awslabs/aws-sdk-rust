// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used as a response element in the <code>PreviewAgents</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentPreview {
    /// <p>The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub hostname: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the EC2 instance where the agent is installed.</p>
    pub agent_id: ::std::string::String,
    /// <p>The Auto Scaling group for the EC2 instance where the agent is installed.</p>
    pub auto_scaling_group: ::std::option::Option<::std::string::String>,
    /// <p>The health status of the Amazon Inspector Agent.</p>
    pub agent_health: ::std::option::Option<crate::types::AgentHealth>,
    /// <p>The version of the Amazon Inspector Agent.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub operating_system: ::std::option::Option<::std::string::String>,
    /// <p>The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub kernel_version: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub ipv4_address: ::std::option::Option<::std::string::String>,
}
impl AgentPreview {
    /// <p>The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn hostname(&self) -> ::std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The ID of the EC2 instance where the agent is installed.</p>
    pub fn agent_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_id.deref()
    }
    /// <p>The Auto Scaling group for the EC2 instance where the agent is installed.</p>
    pub fn auto_scaling_group(&self) -> ::std::option::Option<&str> {
        self.auto_scaling_group.as_deref()
    }
    /// <p>The health status of the Amazon Inspector Agent.</p>
    pub fn agent_health(&self) -> ::std::option::Option<&crate::types::AgentHealth> {
        self.agent_health.as_ref()
    }
    /// <p>The version of the Amazon Inspector Agent.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn operating_system(&self) -> ::std::option::Option<&str> {
        self.operating_system.as_deref()
    }
    /// <p>The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn kernel_version(&self) -> ::std::option::Option<&str> {
        self.kernel_version.as_deref()
    }
    /// <p>The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn ipv4_address(&self) -> ::std::option::Option<&str> {
        self.ipv4_address.as_deref()
    }
}
impl AgentPreview {
    /// Creates a new builder-style object to manufacture [`AgentPreview`](crate::types::AgentPreview).
    pub fn builder() -> crate::types::builders::AgentPreviewBuilder {
        crate::types::builders::AgentPreviewBuilder::default()
    }
}

/// A builder for [`AgentPreview`](crate::types::AgentPreview).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentPreviewBuilder {
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) auto_scaling_group: ::std::option::Option<::std::string::String>,
    pub(crate) agent_health: ::std::option::Option<crate::types::AgentHealth>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) operating_system: ::std::option::Option<::std::string::String>,
    pub(crate) kernel_version: ::std::option::Option<::std::string::String>,
    pub(crate) ipv4_address: ::std::option::Option<::std::string::String>,
}
impl AgentPreviewBuilder {
    /// <p>The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// <p>The ID of the EC2 instance where the agent is installed.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the EC2 instance where the agent is installed.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The ID of the EC2 instance where the agent is installed.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The Auto Scaling group for the EC2 instance where the agent is installed.</p>
    pub fn auto_scaling_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_scaling_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Auto Scaling group for the EC2 instance where the agent is installed.</p>
    pub fn set_auto_scaling_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_scaling_group = input;
        self
    }
    /// <p>The Auto Scaling group for the EC2 instance where the agent is installed.</p>
    pub fn get_auto_scaling_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_scaling_group
    }
    /// <p>The health status of the Amazon Inspector Agent.</p>
    pub fn agent_health(mut self, input: crate::types::AgentHealth) -> Self {
        self.agent_health = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health status of the Amazon Inspector Agent.</p>
    pub fn set_agent_health(mut self, input: ::std::option::Option<crate::types::AgentHealth>) -> Self {
        self.agent_health = input;
        self
    }
    /// <p>The health status of the Amazon Inspector Agent.</p>
    pub fn get_agent_health(&self) -> &::std::option::Option<crate::types::AgentHealth> {
        &self.agent_health
    }
    /// <p>The version of the Amazon Inspector Agent.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Amazon Inspector Agent.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the Amazon Inspector Agent.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn operating_system(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operating_system = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn set_operating_system(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn get_operating_system(&self) -> &::std::option::Option<::std::string::String> {
        &self.operating_system
    }
    /// <p>The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn kernel_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kernel_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn set_kernel_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kernel_version = input;
        self
    }
    /// <p>The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn get_kernel_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.kernel_version
    }
    /// <p>The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn ipv4_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv4_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn set_ipv4_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv4_address = input;
        self
    }
    /// <p>The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.</p>
    pub fn get_ipv4_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv4_address
    }
    /// Consumes the builder and constructs a [`AgentPreview`](crate::types::AgentPreview).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_id`](crate::types::builders::AgentPreviewBuilder::agent_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentPreview, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentPreview {
            hostname: self.hostname,
            agent_id: self.agent_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_id",
                    "agent_id was not specified but it is required when building AgentPreview",
                )
            })?,
            auto_scaling_group: self.auto_scaling_group,
            agent_health: self.agent_health,
            agent_version: self.agent_version,
            operating_system: self.operating_system,
            kernel_version: self.kernel_version,
            ipv4_address: self.ipv4_address,
        })
    }
}
