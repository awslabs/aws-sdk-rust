// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about what is excluded from an assessment run given the current state of the assessment template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExclusionPreview {
    /// <p>The name of the exclusion preview.</p>
    pub title: ::std::string::String,
    /// <p>The description of the exclusion preview.</p>
    pub description: ::std::string::String,
    /// <p>The recommendation for the exclusion preview.</p>
    pub recommendation: ::std::string::String,
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub scopes: ::std::vec::Vec<crate::types::Scope>,
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>,
}
impl ExclusionPreview {
    /// <p>The name of the exclusion preview.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn recommendation(&self) -> &str {
        use std::ops::Deref;
        self.recommendation.deref()
    }
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn scopes(&self) -> &[crate::types::Scope] {
        use std::ops::Deref;
        self.scopes.deref()
    }
    /// <p>The system-defined attributes for the exclusion preview.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[crate::types::Attribute] {
        self.attributes.as_deref().unwrap_or_default()
    }
}
impl ExclusionPreview {
    /// Creates a new builder-style object to manufacture [`ExclusionPreview`](crate::types::ExclusionPreview).
    pub fn builder() -> crate::types::builders::ExclusionPreviewBuilder {
        crate::types::builders::ExclusionPreviewBuilder::default()
    }
}

/// A builder for [`ExclusionPreview`](crate::types::ExclusionPreview).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExclusionPreviewBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<crate::types::Scope>>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>,
}
impl ExclusionPreviewBuilder {
    /// <p>The name of the exclusion preview.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the exclusion preview.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The name of the exclusion preview.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description of the exclusion preview.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The recommendation for the exclusion preview.</p>
    /// This field is required.
    pub fn recommendation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn set_recommendation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation = input;
        self
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn get_recommendation(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn scopes(mut self, input: crate::types::Scope) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Scope>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Scope>> {
        &self.scopes
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn attributes(mut self, input: crate::types::Attribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Attribute>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`ExclusionPreview`](crate::types::ExclusionPreview).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::ExclusionPreviewBuilder::title)
    /// - [`description`](crate::types::builders::ExclusionPreviewBuilder::description)
    /// - [`recommendation`](crate::types::builders::ExclusionPreviewBuilder::recommendation)
    /// - [`scopes`](crate::types::builders::ExclusionPreviewBuilder::scopes)
    pub fn build(self) -> ::std::result::Result<crate::types::ExclusionPreview, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExclusionPreview {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building ExclusionPreview",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building ExclusionPreview",
                )
            })?,
            recommendation: self.recommendation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommendation",
                    "recommendation was not specified but it is required when building ExclusionPreview",
                )
            })?,
            scopes: self.scopes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scopes",
                    "scopes was not specified but it is required when building ExclusionPreview",
                )
            })?,
            attributes: self.attributes,
        })
    }
}
