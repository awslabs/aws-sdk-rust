// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about what is excluded from an assessment run given the current state of the assessment template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExclusionPreview {
    /// <p>The name of the exclusion preview.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The description of the exclusion preview.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The recommendation for the exclusion preview.</p>
    #[doc(hidden)]
    pub recommendation: std::option::Option<std::string::String>,
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    #[doc(hidden)]
    pub scopes: std::option::Option<std::vec::Vec<crate::types::Scope>>,
    /// <p>The system-defined attributes for the exclusion preview.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl ExclusionPreview {
    /// <p>The name of the exclusion preview.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn recommendation(&self) -> std::option::Option<&str> {
        self.recommendation.as_deref()
    }
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn scopes(&self) -> std::option::Option<&[crate::types::Scope]> {
        self.scopes.as_deref()
    }
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::Attribute]> {
        self.attributes.as_deref()
    }
}
impl ExclusionPreview {
    /// Creates a new builder-style object to manufacture [`ExclusionPreview`](crate::types::ExclusionPreview).
    pub fn builder() -> crate::types::builders::ExclusionPreviewBuilder {
        crate::types::builders::ExclusionPreviewBuilder::default()
    }
}

/// A builder for [`ExclusionPreview`](crate::types::ExclusionPreview).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExclusionPreviewBuilder {
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) recommendation: std::option::Option<std::string::String>,
    pub(crate) scopes: std::option::Option<std::vec::Vec<crate::types::Scope>>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl ExclusionPreviewBuilder {
    /// <p>The name of the exclusion preview.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The name of the exclusion preview.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the exclusion preview.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn recommendation(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation = Some(input.into());
        self
    }
    /// <p>The recommendation for the exclusion preview.</p>
    pub fn set_recommendation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recommendation = input;
        self
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn scopes(mut self, input: crate::types::Scope) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = Some(v);
        self
    }
    /// <p>The AWS resources for which the exclusion preview pertains.</p>
    pub fn set_scopes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Scope>>,
    ) -> Self {
        self.scopes = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn attributes(mut self, input: crate::types::Attribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>The system-defined attributes for the exclusion preview.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`ExclusionPreview`](crate::types::ExclusionPreview).
    pub fn build(self) -> crate::types::ExclusionPreview {
        crate::types::ExclusionPreview {
            title: self.title,
            description: self.description,
            recommendation: self.recommendation,
            scopes: self.scopes,
            attributes: self.attributes,
        }
    }
}
