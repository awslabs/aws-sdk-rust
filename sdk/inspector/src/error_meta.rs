// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have required permissions to access the requested resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You started an assessment run, but one of the instances is already participating in another assessment run.</p>
    AgentsAlreadyRunningAssessmentException(crate::error::AgentsAlreadyRunningAssessmentException),
    /// <p>You cannot perform a specified action if an assessment run is currently in progress.</p>
    AssessmentRunInProgressException(crate::error::AssessmentRunInProgressException),
    /// <p>Internal server error.</p>
    InternalException(crate::error::InternalException),
    /// <p>Amazon Inspector cannot assume the cross-account role that it needs to list your EC2 instances during the assessment run.</p>
    InvalidCrossAccountRoleException(crate::error::InvalidCrossAccountRoleException),
    /// <p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error code describes the limit exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The request was rejected because it referenced an entity that does not exist. The error code describes the entity.</p>
    NoSuchEntityException(crate::error::NoSuchEntityException),
    /// <p>The request is rejected. The specified assessment template is currently generating an exclusions preview.</p>
    PreviewGenerationInProgressException(crate::error::PreviewGenerationInProgressException),
    /// <p>The serice is temporary unavailable.</p>
    ServiceTemporarilyUnavailableException(crate::error::ServiceTemporarilyUnavailableException),
    /// <p>Used by the <code>GetAssessmentReport</code> API. The request was rejected because you tried to generate a report for an assessment run that existed before reporting was supported in Amazon Inspector. You can only generate reports for assessment runs that took place or will take place after generating reports in Amazon Inspector became available.</p>
    UnsupportedFeatureException(crate::error::UnsupportedFeatureException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AgentsAlreadyRunningAssessmentException(inner) => inner.fmt(f),
            Error::AssessmentRunInProgressException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidCrossAccountRoleException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NoSuchEntityException(inner) => inner.fmt(f),
            Error::PreviewGenerationInProgressException(inner) => inner.fmt(f),
            Error::ServiceTemporarilyUnavailableException(inner) => inner.fmt(f),
            Error::UnsupportedFeatureException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddAttributesToFindingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddAttributesToFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddAttributesToFindingsError> for Error {
    fn from(err: crate::error::AddAttributesToFindingsError) -> Self {
        match err {
            crate::error::AddAttributesToFindingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AddAttributesToFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AddAttributesToFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AddAttributesToFindingsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AddAttributesToFindingsError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::AddAttributesToFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssessmentTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssessmentTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssessmentTargetError> for Error {
    fn from(err: crate::error::CreateAssessmentTargetError) -> Self {
        match err {
            crate::error::CreateAssessmentTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAssessmentTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateAssessmentTargetError::InvalidCrossAccountRoleException(inner) => {
                Error::InvalidCrossAccountRoleException(inner)
            }
            crate::error::CreateAssessmentTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateAssessmentTargetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAssessmentTargetError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateAssessmentTargetError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::CreateAssessmentTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssessmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssessmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssessmentTemplateError> for Error {
    fn from(err: crate::error::CreateAssessmentTemplateError) -> Self {
        match err {
            crate::error::CreateAssessmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAssessmentTemplateError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateAssessmentTemplateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateAssessmentTemplateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAssessmentTemplateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateAssessmentTemplateError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::CreateAssessmentTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExclusionsPreviewError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateExclusionsPreviewError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateExclusionsPreviewError> for Error {
    fn from(err: crate::error::CreateExclusionsPreviewError) -> Self {
        match err {
            crate::error::CreateExclusionsPreviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateExclusionsPreviewError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateExclusionsPreviewError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateExclusionsPreviewError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateExclusionsPreviewError::PreviewGenerationInProgressException(
                inner,
            ) => Error::PreviewGenerationInProgressException(inner),
            crate::error::CreateExclusionsPreviewError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::CreateExclusionsPreviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourceGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResourceGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourceGroupError> for Error {
    fn from(err: crate::error::CreateResourceGroupError) -> Self {
        match err {
            crate::error::CreateResourceGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateResourceGroupError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateResourceGroupError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateResourceGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResourceGroupError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::CreateResourceGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentRunError> for Error {
    fn from(err: crate::error::DeleteAssessmentRunError) -> Self {
        match err {
            crate::error::DeleteAssessmentRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentRunError::AssessmentRunInProgressException(inner) => {
                Error::AssessmentRunInProgressException(inner)
            }
            crate::error::DeleteAssessmentRunError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteAssessmentRunError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteAssessmentRunError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAssessmentRunError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::DeleteAssessmentRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentTargetError> for Error {
    fn from(err: crate::error::DeleteAssessmentTargetError) -> Self {
        match err {
            crate::error::DeleteAssessmentTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentTargetError::AssessmentRunInProgressException(inner) => {
                Error::AssessmentRunInProgressException(inner)
            }
            crate::error::DeleteAssessmentTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteAssessmentTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteAssessmentTargetError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAssessmentTargetError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::DeleteAssessmentTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentTemplateError> for Error {
    fn from(err: crate::error::DeleteAssessmentTemplateError) -> Self {
        match err {
            crate::error::DeleteAssessmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentTemplateError::AssessmentRunInProgressException(
                inner,
            ) => Error::AssessmentRunInProgressException(inner),
            crate::error::DeleteAssessmentTemplateError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteAssessmentTemplateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteAssessmentTemplateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAssessmentTemplateError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::DeleteAssessmentTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentRunsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentRunsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssessmentRunsError> for Error {
    fn from(err: crate::error::DescribeAssessmentRunsError) -> Self {
        match err {
            crate::error::DescribeAssessmentRunsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeAssessmentRunsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeAssessmentRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssessmentTargetsError> for Error {
    fn from(err: crate::error::DescribeAssessmentTargetsError) -> Self {
        match err {
            crate::error::DescribeAssessmentTargetsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeAssessmentTargetsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeAssessmentTargetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAssessmentTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssessmentTemplatesError> for Error {
    fn from(err: crate::error::DescribeAssessmentTemplatesError) -> Self {
        match err {
            crate::error::DescribeAssessmentTemplatesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeAssessmentTemplatesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeAssessmentTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeCrossAccountAccessRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCrossAccountAccessRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCrossAccountAccessRoleError> for Error {
    fn from(err: crate::error::DescribeCrossAccountAccessRoleError) -> Self {
        match err {
            crate::error::DescribeCrossAccountAccessRoleError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeCrossAccountAccessRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExclusionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExclusionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExclusionsError> for Error {
    fn from(err: crate::error::DescribeExclusionsError) -> Self {
        match err {
            crate::error::DescribeExclusionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeExclusionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeExclusionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFindingsError> for Error {
    fn from(err: crate::error::DescribeFindingsError) -> Self {
        match err {
            crate::error::DescribeFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourceGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourceGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourceGroupsError> for Error {
    fn from(err: crate::error::DescribeResourceGroupsError) -> Self {
        match err {
            crate::error::DescribeResourceGroupsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeResourceGroupsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeResourceGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRulesPackagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRulesPackagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRulesPackagesError> for Error {
    fn from(err: crate::error::DescribeRulesPackagesError) -> Self {
        match err {
            crate::error::DescribeRulesPackagesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeRulesPackagesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeRulesPackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAssessmentReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAssessmentReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAssessmentReportError> for Error {
    fn from(err: crate::error::GetAssessmentReportError) -> Self {
        match err {
            crate::error::GetAssessmentReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAssessmentReportError::AssessmentRunInProgressException(inner) => {
                Error::AssessmentRunInProgressException(inner)
            }
            crate::error::GetAssessmentReportError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetAssessmentReportError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetAssessmentReportError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetAssessmentReportError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::GetAssessmentReportError::UnsupportedFeatureException(inner) => {
                Error::UnsupportedFeatureException(inner)
            }
            crate::error::GetAssessmentReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExclusionsPreviewError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetExclusionsPreviewError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExclusionsPreviewError> for Error {
    fn from(err: crate::error::GetExclusionsPreviewError) -> Self {
        match err {
            crate::error::GetExclusionsPreviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetExclusionsPreviewError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetExclusionsPreviewError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetExclusionsPreviewError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetExclusionsPreviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTelemetryMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTelemetryMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTelemetryMetadataError> for Error {
    fn from(err: crate::error::GetTelemetryMetadataError) -> Self {
        match err {
            crate::error::GetTelemetryMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTelemetryMetadataError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetTelemetryMetadataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetTelemetryMetadataError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetTelemetryMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentRunAgentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentRunAgentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentRunAgentsError> for Error {
    fn from(err: crate::error::ListAssessmentRunAgentsError) -> Self {
        match err {
            crate::error::ListAssessmentRunAgentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentRunAgentsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListAssessmentRunAgentsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAssessmentRunAgentsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAssessmentRunAgentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentRunsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentRunsError> for Error {
    fn from(err: crate::error::ListAssessmentRunsError) -> Self {
        match err {
            crate::error::ListAssessmentRunsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentRunsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListAssessmentRunsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAssessmentRunsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAssessmentRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentTargetsError> for Error {
    fn from(err: crate::error::ListAssessmentTargetsError) -> Self {
        match err {
            crate::error::ListAssessmentTargetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentTargetsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListAssessmentTargetsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAssessmentTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentTemplatesError> for Error {
    fn from(err: crate::error::ListAssessmentTemplatesError) -> Self {
        match err {
            crate::error::ListAssessmentTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentTemplatesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListAssessmentTemplatesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAssessmentTemplatesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAssessmentTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEventSubscriptionsError> for Error {
    fn from(err: crate::error::ListEventSubscriptionsError) -> Self {
        match err {
            crate::error::ListEventSubscriptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEventSubscriptionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListEventSubscriptionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListEventSubscriptionsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListEventSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExclusionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExclusionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExclusionsError> for Error {
    fn from(err: crate::error::ListExclusionsError) -> Self {
        match err {
            crate::error::ListExclusionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListExclusionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListExclusionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListExclusionsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListExclusionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFindingsError> for Error {
    fn from(err: crate::error::ListFindingsError) -> Self {
        match err {
            crate::error::ListFindingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFindingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListFindingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListFindingsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRulesPackagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRulesPackagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRulesPackagesError> for Error {
    fn from(err: crate::error::ListRulesPackagesError) -> Self {
        match err {
            crate::error::ListRulesPackagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListRulesPackagesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListRulesPackagesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListRulesPackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListTagsForResourceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PreviewAgentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PreviewAgentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PreviewAgentsError> for Error {
    fn from(err: crate::error::PreviewAgentsError) -> Self {
        match err {
            crate::error::PreviewAgentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PreviewAgentsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::PreviewAgentsError::InvalidCrossAccountRoleException(inner) => {
                Error::InvalidCrossAccountRoleException(inner)
            }
            crate::error::PreviewAgentsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PreviewAgentsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PreviewAgentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RegisterCrossAccountAccessRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterCrossAccountAccessRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterCrossAccountAccessRoleError> for Error {
    fn from(err: crate::error::RegisterCrossAccountAccessRoleError) -> Self {
        match err {
            crate::error::RegisterCrossAccountAccessRoleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::RegisterCrossAccountAccessRoleError::InternalException(inner) => Error::InternalException(inner),
            crate::error::RegisterCrossAccountAccessRoleError::InvalidCrossAccountRoleException(inner) => Error::InvalidCrossAccountRoleException(inner),
            crate::error::RegisterCrossAccountAccessRoleError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::RegisterCrossAccountAccessRoleError::ServiceTemporarilyUnavailableException(inner) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::RegisterCrossAccountAccessRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveAttributesFromFindingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveAttributesFromFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveAttributesFromFindingsError> for Error {
    fn from(err: crate::error::RemoveAttributesFromFindingsError) -> Self {
        match err {
            crate::error::RemoveAttributesFromFindingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::RemoveAttributesFromFindingsError::InternalException(inner) => Error::InternalException(inner),
            crate::error::RemoveAttributesFromFindingsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::RemoveAttributesFromFindingsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::error::RemoveAttributesFromFindingsError::ServiceTemporarilyUnavailableException(inner) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::RemoveAttributesFromFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetTagsForResourceError> for Error {
    fn from(err: crate::error::SetTagsForResourceError) -> Self {
        match err {
            crate::error::SetTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetTagsForResourceError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::SetTagsForResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SetTagsForResourceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::SetTagsForResourceError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::SetTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAssessmentRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAssessmentRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAssessmentRunError> for Error {
    fn from(err: crate::error::StartAssessmentRunError) -> Self {
        match err {
            crate::error::StartAssessmentRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartAssessmentRunError::AgentsAlreadyRunningAssessmentException(
                inner,
            ) => Error::AgentsAlreadyRunningAssessmentException(inner),
            crate::error::StartAssessmentRunError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::StartAssessmentRunError::InvalidCrossAccountRoleException(inner) => {
                Error::InvalidCrossAccountRoleException(inner)
            }
            crate::error::StartAssessmentRunError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StartAssessmentRunError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartAssessmentRunError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::StartAssessmentRunError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::StartAssessmentRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopAssessmentRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopAssessmentRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopAssessmentRunError> for Error {
    fn from(err: crate::error::StopAssessmentRunError) -> Self {
        match err {
            crate::error::StopAssessmentRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopAssessmentRunError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::StopAssessmentRunError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StopAssessmentRunError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::StopAssessmentRunError::ServiceTemporarilyUnavailableException(inner) => {
                Error::ServiceTemporarilyUnavailableException(inner)
            }
            crate::error::StopAssessmentRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubscribeToEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SubscribeToEventError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubscribeToEventError> for Error {
    fn from(err: crate::error::SubscribeToEventError) -> Self {
        match err {
            crate::error::SubscribeToEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SubscribeToEventError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::SubscribeToEventError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SubscribeToEventError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::SubscribeToEventError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::SubscribeToEventError::ServiceTemporarilyUnavailableException(inner) => {
                Error::ServiceTemporarilyUnavailableException(inner)
            }
            crate::error::SubscribeToEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnsubscribeFromEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UnsubscribeFromEventError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UnsubscribeFromEventError> for Error {
    fn from(err: crate::error::UnsubscribeFromEventError) -> Self {
        match err {
            crate::error::UnsubscribeFromEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UnsubscribeFromEventError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UnsubscribeFromEventError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UnsubscribeFromEventError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UnsubscribeFromEventError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::UnsubscribeFromEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentTargetError> for Error {
    fn from(err: crate::error::UpdateAssessmentTargetError) -> Self {
        match err {
            crate::error::UpdateAssessmentTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentTargetError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateAssessmentTargetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateAssessmentTargetError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateAssessmentTargetError::ServiceTemporarilyUnavailableException(
                inner,
            ) => Error::ServiceTemporarilyUnavailableException(inner),
            crate::error::UpdateAssessmentTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AgentsAlreadyRunningAssessmentException(e) => e.request_id(),
            Self::AssessmentRunInProgressException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidCrossAccountRoleException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NoSuchEntityException(e) => e.request_id(),
            Self::PreviewGenerationInProgressException(e) => e.request_id(),
            Self::ServiceTemporarilyUnavailableException(e) => e.request_id(),
            Self::UnsupportedFeatureException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
