// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExclusionsInput {
    /// <p>The ARN of the assessment run that generated the exclusions that you want to list.</p>
    pub assessment_run_arn: ::std::option::Option<::std::string::String>,
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListExclusionsInput {
    /// <p>The ARN of the assessment run that generated the exclusions that you want to list.</p>
    pub fn assessment_run_arn(&self) -> ::std::option::Option<&str> {
        self.assessment_run_arn.as_deref()
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListExclusionsInput {
    /// Creates a new builder-style object to manufacture [`ListExclusionsInput`](crate::operation::list_exclusions::ListExclusionsInput).
    pub fn builder() -> crate::operation::list_exclusions::builders::ListExclusionsInputBuilder {
        crate::operation::list_exclusions::builders::ListExclusionsInputBuilder::default()
    }
}

/// A builder for [`ListExclusionsInput`](crate::operation::list_exclusions::ListExclusionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListExclusionsInputBuilder {
    pub(crate) assessment_run_arn: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListExclusionsInputBuilder {
    /// <p>The ARN of the assessment run that generated the exclusions that you want to list.</p>
    /// This field is required.
    pub fn assessment_run_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_run_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the assessment run that generated the exclusions that you want to list.</p>
    pub fn set_assessment_run_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_run_arn = input;
        self
    }
    /// <p>The ARN of the assessment run that generated the exclusions that you want to list.</p>
    pub fn get_assessment_run_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_run_arn
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListExclusionsInput`](crate::operation::list_exclusions::ListExclusionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_exclusions::ListExclusionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_exclusions::ListExclusionsInput {
            assessment_run_arn: self.assessment_run_arn,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
