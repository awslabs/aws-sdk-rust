// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssessmentTemplateInput {
    /// <p>The ARN that specifies the assessment target for which you want to create the assessment template.</p>
    #[doc(hidden)]
    pub assessment_target_arn: std::option::Option<std::string::String>,
    /// <p>The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.</p>
    #[doc(hidden)]
    pub assessment_template_name: std::option::Option<std::string::String>,
    /// <p>The duration of the assessment run in seconds.</p>
    #[doc(hidden)]
    pub duration_in_seconds: i32,
    /// <p>The ARNs that specify the rules packages that you want to attach to the assessment template.</p>
    #[doc(hidden)]
    pub rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an <code>Attribute</code> object). Within an assessment template, each key must be unique.</p>
    #[doc(hidden)]
    pub user_attributes_for_findings: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl CreateAssessmentTemplateInput {
    /// <p>The ARN that specifies the assessment target for which you want to create the assessment template.</p>
    pub fn assessment_target_arn(&self) -> std::option::Option<&str> {
        self.assessment_target_arn.as_deref()
    }
    /// <p>The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.</p>
    pub fn assessment_template_name(&self) -> std::option::Option<&str> {
        self.assessment_template_name.as_deref()
    }
    /// <p>The duration of the assessment run in seconds.</p>
    pub fn duration_in_seconds(&self) -> i32 {
        self.duration_in_seconds
    }
    /// <p>The ARNs that specify the rules packages that you want to attach to the assessment template.</p>
    pub fn rules_package_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.rules_package_arns.as_deref()
    }
    /// <p>The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an <code>Attribute</code> object). Within an assessment template, each key must be unique.</p>
    pub fn user_attributes_for_findings(&self) -> std::option::Option<&[crate::types::Attribute]> {
        self.user_attributes_for_findings.as_deref()
    }
}
impl CreateAssessmentTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentTemplateInput`](crate::operation::create_assessment_template::CreateAssessmentTemplateInput).
    pub fn builder(
    ) -> crate::operation::create_assessment_template::builders::CreateAssessmentTemplateInputBuilder
    {
        crate::operation::create_assessment_template::builders::CreateAssessmentTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateAssessmentTemplateInput`](crate::operation::create_assessment_template::CreateAssessmentTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssessmentTemplateInputBuilder {
    pub(crate) assessment_target_arn: std::option::Option<std::string::String>,
    pub(crate) assessment_template_name: std::option::Option<std::string::String>,
    pub(crate) duration_in_seconds: std::option::Option<i32>,
    pub(crate) rules_package_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) user_attributes_for_findings:
        std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl CreateAssessmentTemplateInputBuilder {
    /// <p>The ARN that specifies the assessment target for which you want to create the assessment template.</p>
    pub fn assessment_target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_target_arn = Some(input.into());
        self
    }
    /// <p>The ARN that specifies the assessment target for which you want to create the assessment template.</p>
    pub fn set_assessment_target_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_target_arn = input;
        self
    }
    /// <p>The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.</p>
    pub fn assessment_template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_template_name = Some(input.into());
        self
    }
    /// <p>The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.</p>
    pub fn set_assessment_template_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_template_name = input;
        self
    }
    /// <p>The duration of the assessment run in seconds.</p>
    pub fn duration_in_seconds(mut self, input: i32) -> Self {
        self.duration_in_seconds = Some(input);
        self
    }
    /// <p>The duration of the assessment run in seconds.</p>
    pub fn set_duration_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// Appends an item to `rules_package_arns`.
    ///
    /// To override the contents of this collection use [`set_rules_package_arns`](Self::set_rules_package_arns).
    ///
    /// <p>The ARNs that specify the rules packages that you want to attach to the assessment template.</p>
    pub fn rules_package_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.rules_package_arns.unwrap_or_default();
        v.push(input.into());
        self.rules_package_arns = Some(v);
        self
    }
    /// <p>The ARNs that specify the rules packages that you want to attach to the assessment template.</p>
    pub fn set_rules_package_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.rules_package_arns = input;
        self
    }
    /// Appends an item to `user_attributes_for_findings`.
    ///
    /// To override the contents of this collection use [`set_user_attributes_for_findings`](Self::set_user_attributes_for_findings).
    ///
    /// <p>The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an <code>Attribute</code> object). Within an assessment template, each key must be unique.</p>
    pub fn user_attributes_for_findings(mut self, input: crate::types::Attribute) -> Self {
        let mut v = self.user_attributes_for_findings.unwrap_or_default();
        v.push(input);
        self.user_attributes_for_findings = Some(v);
        self
    }
    /// <p>The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an <code>Attribute</code> object). Within an assessment template, each key must be unique.</p>
    pub fn set_user_attributes_for_findings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
    ) -> Self {
        self.user_attributes_for_findings = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssessmentTemplateInput`](crate::operation::create_assessment_template::CreateAssessmentTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_assessment_template::CreateAssessmentTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_assessment_template::CreateAssessmentTemplateInput {
                assessment_target_arn: self.assessment_target_arn,
                assessment_template_name: self.assessment_template_name,
                duration_in_seconds: self.duration_in_seconds.unwrap_or_default(),
                rules_package_arns: self.rules_package_arns,
                user_attributes_for_findings: self.user_attributes_for_findings,
            },
        )
    }
}
