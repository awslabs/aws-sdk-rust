// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_resource_group::_create_resource_group_output::CreateResourceGroupOutputBuilder;

pub use crate::operation::create_resource_group::_create_resource_group_input::CreateResourceGroupInputBuilder;

impl CreateResourceGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_resource_group::CreateResourceGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resource_group::CreateResourceGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_resource_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateResourceGroup`.
///
/// <p>Creates a resource group using the specified set of tags (key and value pairs) that are used to select the EC2 instances to be included in an Amazon Inspector assessment target. The created resource group is then used to create an Amazon Inspector assessment target. For more information, see <code>CreateAssessmentTarget</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateResourceGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_resource_group::builders::CreateResourceGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_resource_group::CreateResourceGroupOutput,
        crate::operation::create_resource_group::CreateResourceGroupError,
    > for CreateResourceGroupFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_resource_group::CreateResourceGroupOutput,
            crate::operation::create_resource_group::CreateResourceGroupError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateResourceGroupFluentBuilder {
    /// Creates a new `CreateResourceGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateResourceGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::create_resource_group::builders::CreateResourceGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_resource_group::CreateResourceGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resource_group::CreateResourceGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_resource_group::CreateResourceGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_resource_group::CreateResourceGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_resource_group::CreateResourceGroupOutput,
        crate::operation::create_resource_group::CreateResourceGroupError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `resourceGroupTags`.
    ///
    /// To override the contents of this collection use [`set_resource_group_tags`](Self::set_resource_group_tags).
    ///
    /// <p>A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'.</p>
    /// <p>For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.</p>
    pub fn resource_group_tags(mut self, input: crate::types::ResourceGroupTag) -> Self {
        self.inner = self.inner.resource_group_tags(input);
        self
    }
    /// <p>A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'.</p>
    /// <p>For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.</p>
    pub fn set_resource_group_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceGroupTag>>) -> Self {
        self.inner = self.inner.set_resource_group_tags(input);
        self
    }
    /// <p>A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'.</p>
    /// <p>For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.</p>
    pub fn get_resource_group_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceGroupTag>> {
        self.inner.get_resource_group_tags()
    }
}
