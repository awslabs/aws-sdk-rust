// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubscribeToEventInput {
    /// <p>The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The event for which you want to receive SNS notifications.</p>
    #[doc(hidden)]
    pub event: std::option::Option<crate::types::InspectorEvent>,
    /// <p>The ARN of the SNS topic to which the SNS notifications are sent.</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
}
impl SubscribeToEventInput {
    /// <p>The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The event for which you want to receive SNS notifications.</p>
    pub fn event(&self) -> std::option::Option<&crate::types::InspectorEvent> {
        self.event.as_ref()
    }
    /// <p>The ARN of the SNS topic to which the SNS notifications are sent.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
}
impl SubscribeToEventInput {
    /// Creates a new builder-style object to manufacture [`SubscribeToEventInput`](crate::operation::subscribe_to_event::SubscribeToEventInput).
    pub fn builder() -> crate::operation::subscribe_to_event::builders::SubscribeToEventInputBuilder
    {
        crate::operation::subscribe_to_event::builders::SubscribeToEventInputBuilder::default()
    }
}

/// A builder for [`SubscribeToEventInput`](crate::operation::subscribe_to_event::SubscribeToEventInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubscribeToEventInputBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) event: std::option::Option<crate::types::InspectorEvent>,
    pub(crate) topic_arn: std::option::Option<std::string::String>,
}
impl SubscribeToEventInputBuilder {
    /// <p>The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The event for which you want to receive SNS notifications.</p>
    pub fn event(mut self, input: crate::types::InspectorEvent) -> Self {
        self.event = Some(input);
        self
    }
    /// <p>The event for which you want to receive SNS notifications.</p>
    pub fn set_event(mut self, input: std::option::Option<crate::types::InspectorEvent>) -> Self {
        self.event = input;
        self
    }
    /// <p>The ARN of the SNS topic to which the SNS notifications are sent.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the SNS topic to which the SNS notifications are sent.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`SubscribeToEventInput`](crate::operation::subscribe_to_event::SubscribeToEventInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::subscribe_to_event::SubscribeToEventInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::subscribe_to_event::SubscribeToEventInput {
                resource_arn: self.resource_arn,
                event: self.event,
                topic_arn: self.topic_arn,
            },
        )
    }
}
