// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_assessment_run::_start_assessment_run_output::StartAssessmentRunOutputBuilder;

pub use crate::operation::start_assessment_run::_start_assessment_run_input::StartAssessmentRunInputBuilder;

impl StartAssessmentRunInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_assessment_run::StartAssessmentRunOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_assessment_run::StartAssessmentRunError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_assessment_run();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartAssessmentRun`.
///
/// <p>Starts the assessment run specified by the ARN of the assessment template. For this API to function properly, you must not exceed the limit of running up to 500 concurrent agents per AWS account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartAssessmentRunFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_assessment_run::builders::StartAssessmentRunInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_assessment_run::StartAssessmentRunOutput,
        crate::operation::start_assessment_run::StartAssessmentRunError,
    > for StartAssessmentRunFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_assessment_run::StartAssessmentRunOutput,
            crate::operation::start_assessment_run::StartAssessmentRunError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartAssessmentRunFluentBuilder {
    /// Creates a new `StartAssessmentRun`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartAssessmentRun as a reference.
    pub fn as_input(&self) -> &crate::operation::start_assessment_run::builders::StartAssessmentRunInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_assessment_run::StartAssessmentRunOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_assessment_run::StartAssessmentRunError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_assessment_run::StartAssessmentRun::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_assessment_run::StartAssessmentRun::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_assessment_run::StartAssessmentRunOutput,
        crate::operation::start_assessment_run::StartAssessmentRunError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the assessment template of the assessment run that you want to start.</p>
    pub fn assessment_template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assessment_template_arn(input.into());
        self
    }
    /// <p>The ARN of the assessment template of the assessment run that you want to start.</p>
    pub fn set_assessment_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_template_arn(input);
        self
    }
    /// <p>The ARN of the assessment template of the assessment run that you want to start.</p>
    pub fn get_assessment_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assessment_template_arn()
    }
    /// <p>You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.</p>
    pub fn assessment_run_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assessment_run_name(input.into());
        self
    }
    /// <p>You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.</p>
    pub fn set_assessment_run_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_run_name(input);
        self
    }
    /// <p>You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.</p>
    pub fn get_assessment_run_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assessment_run_name()
    }
}
