// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_exclusions_preview::_get_exclusions_preview_output::GetExclusionsPreviewOutputBuilder;

pub use crate::operation::get_exclusions_preview::_get_exclusions_preview_input::GetExclusionsPreviewInputBuilder;

/// Fluent builder constructing a request to `GetExclusionsPreview`.
///
/// <p>Retrieves the exclusions preview (a list of ExclusionPreview objects) specified by the preview token. You can obtain the preview token by running the CreateExclusionsPreview API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetExclusionsPreviewFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_exclusions_preview::builders::GetExclusionsPreviewInputBuilder,
}
impl GetExclusionsPreviewFluentBuilder {
    /// Creates a new `GetExclusionsPreview`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_exclusions_preview::GetExclusionsPreview,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_exclusions_preview::GetExclusionsPreviewError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_exclusions_preview::GetExclusionsPreviewOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_exclusions_preview::GetExclusionsPreviewError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_exclusions_preview::paginator::GetExclusionsPreviewPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_exclusions_preview::paginator::GetExclusionsPreviewPaginator {
        crate::operation::get_exclusions_preview::paginator::GetExclusionsPreviewPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    pub fn assessment_template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.assessment_template_arn(input.into());
        self
    }
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    pub fn set_assessment_template_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_assessment_template_arn(input);
        self
    }
    /// <p>The unique identifier associated of the exclusions preview.</p>
    pub fn preview_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preview_token(input.into());
        self
    }
    /// <p>The unique identifier associated of the exclusions preview.</p>
    pub fn set_preview_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_preview_token(input);
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    pub fn locale(mut self, input: crate::types::Locale) -> Self {
        self.inner = self.inner.locale(input);
        self
    }
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    pub fn set_locale(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.inner = self.inner.set_locale(input);
        self
    }
}
