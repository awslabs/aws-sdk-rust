// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExclusionsPreviewInput {
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    #[doc(hidden)]
    pub assessment_template_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier associated of the exclusions preview.</p>
    #[doc(hidden)]
    pub preview_token: std::option::Option<std::string::String>,
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    #[doc(hidden)]
    pub locale: std::option::Option<crate::types::Locale>,
}
impl GetExclusionsPreviewInput {
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    pub fn assessment_template_arn(&self) -> std::option::Option<&str> {
        self.assessment_template_arn.as_deref()
    }
    /// <p>The unique identifier associated of the exclusions preview.</p>
    pub fn preview_token(&self) -> std::option::Option<&str> {
        self.preview_token.as_deref()
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    pub fn locale(&self) -> std::option::Option<&crate::types::Locale> {
        self.locale.as_ref()
    }
}
impl GetExclusionsPreviewInput {
    /// Creates a new builder-style object to manufacture [`GetExclusionsPreviewInput`](crate::operation::get_exclusions_preview::GetExclusionsPreviewInput).
    pub fn builder(
    ) -> crate::operation::get_exclusions_preview::builders::GetExclusionsPreviewInputBuilder {
        crate::operation::get_exclusions_preview::builders::GetExclusionsPreviewInputBuilder::default()
    }
}

/// A builder for [`GetExclusionsPreviewInput`](crate::operation::get_exclusions_preview::GetExclusionsPreviewInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetExclusionsPreviewInputBuilder {
    pub(crate) assessment_template_arn: std::option::Option<std::string::String>,
    pub(crate) preview_token: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) locale: std::option::Option<crate::types::Locale>,
}
impl GetExclusionsPreviewInputBuilder {
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    pub fn assessment_template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_template_arn = Some(input.into());
        self
    }
    /// <p>The ARN that specifies the assessment template for which the exclusions preview was requested.</p>
    pub fn set_assessment_template_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_template_arn = input;
        self
    }
    /// <p>The unique identifier associated of the exclusions preview.</p>
    pub fn preview_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.preview_token = Some(input.into());
        self
    }
    /// <p>The unique identifier associated of the exclusions preview.</p>
    pub fn set_preview_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.preview_token = input;
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    pub fn locale(mut self, input: crate::types::Locale) -> Self {
        self.locale = Some(input);
        self
    }
    /// <p>The locale into which you want to translate the exclusion's title, description, and recommendation.</p>
    pub fn set_locale(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.locale = input;
        self
    }
    /// Consumes the builder and constructs a [`GetExclusionsPreviewInput`](crate::operation::get_exclusions_preview::GetExclusionsPreviewInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_exclusions_preview::GetExclusionsPreviewInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_exclusions_preview::GetExclusionsPreviewInput {
                assessment_template_arn: self.assessment_template_arn,
                preview_token: self.preview_token,
                next_token: self.next_token,
                max_results: self.max_results,
                locale: self.locale,
            },
        )
    }
}
