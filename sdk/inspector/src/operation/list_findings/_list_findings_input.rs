// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFindingsInput {
    /// <p>The ARNs of the assessment runs that generate the findings that you want to list.</p>
    pub assessment_run_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>You can use this parameter to specify a subset of data to be included in the action's response.</p>
    /// <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    pub filter: ::std::option::Option<crate::types::FindingFilter>,
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListFindingsInput {
    /// <p>The ARNs of the assessment runs that generate the findings that you want to list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assessment_run_arns.is_none()`.
    pub fn assessment_run_arns(&self) -> &[::std::string::String] {
        self.assessment_run_arns.as_deref().unwrap_or_default()
    }
    /// <p>You can use this parameter to specify a subset of data to be included in the action's response.</p>
    /// <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::FindingFilter> {
        self.filter.as_ref()
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListFindingsInput {
    /// Creates a new builder-style object to manufacture [`ListFindingsInput`](crate::operation::list_findings::ListFindingsInput).
    pub fn builder() -> crate::operation::list_findings::builders::ListFindingsInputBuilder {
        crate::operation::list_findings::builders::ListFindingsInputBuilder::default()
    }
}

/// A builder for [`ListFindingsInput`](crate::operation::list_findings::ListFindingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListFindingsInputBuilder {
    pub(crate) assessment_run_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filter: ::std::option::Option<crate::types::FindingFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListFindingsInputBuilder {
    /// Appends an item to `assessment_run_arns`.
    ///
    /// To override the contents of this collection use [`set_assessment_run_arns`](Self::set_assessment_run_arns).
    ///
    /// <p>The ARNs of the assessment runs that generate the findings that you want to list.</p>
    pub fn assessment_run_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.assessment_run_arns.unwrap_or_default();
        v.push(input.into());
        self.assessment_run_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the assessment runs that generate the findings that you want to list.</p>
    pub fn set_assessment_run_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.assessment_run_arns = input;
        self
    }
    /// <p>The ARNs of the assessment runs that generate the findings that you want to list.</p>
    pub fn get_assessment_run_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.assessment_run_arns
    }
    /// <p>You can use this parameter to specify a subset of data to be included in the action's response.</p>
    /// <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    pub fn filter(mut self, input: crate::types::FindingFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can use this parameter to specify a subset of data to be included in the action's response.</p>
    /// <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::FindingFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>You can use this parameter to specify a subset of data to be included in the action's response.</p>
    /// <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::FindingFilter> {
        &self.filter
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListFindingsInput`](crate::operation::list_findings::ListFindingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_findings::ListFindingsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_findings::ListFindingsInput {
            assessment_run_arns: self.assessment_run_arns,
            filter: self.filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
