// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_assessment_run_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AssessmentRunFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name_pattern {
        object.key("namePattern").string(var_1.as_str());
    }
    if let Some(var_2) = &input.states {
        let mut array_3 = object.key("states").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.duration_range {
        #[allow(unused_mut)]
        let mut object_6 = object.key("durationRange").start_object();
        crate::protocol_serde::shape_duration_range::ser_duration_range(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.rules_package_arns {
        let mut array_8 = object.key("rulesPackageArns").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.start_time_range {
        #[allow(unused_mut)]
        let mut object_11 = object.key("startTimeRange").start_object();
        crate::protocol_serde::shape_timestamp_range::ser_timestamp_range(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.completion_time_range {
        #[allow(unused_mut)]
        let mut object_13 = object.key("completionTimeRange").start_object();
        crate::protocol_serde::shape_timestamp_range::ser_timestamp_range(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.state_change_time_range {
        #[allow(unused_mut)]
        let mut object_15 = object.key("stateChangeTimeRange").start_object();
        crate::protocol_serde::shape_timestamp_range::ser_timestamp_range(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
