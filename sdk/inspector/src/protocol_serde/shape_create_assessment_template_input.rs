// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_assessment_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_assessment_template::CreateAssessmentTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.assessment_target_arn {
        object.key("assessmentTargetArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.assessment_template_name {
        object.key("assessmentTemplateName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.duration_in_seconds {
        object.key("durationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.rules_package_arns {
        let mut array_5 = object.key("rulesPackageArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.user_attributes_for_findings {
        let mut array_8 = object.key("userAttributesForFindings").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_attribute::ser_attribute(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
