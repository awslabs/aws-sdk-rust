// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_finding_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FindingFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.agent_ids {
        let mut array_2 = object.key("agentIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.auto_scaling_groups {
        let mut array_5 = object.key("autoScalingGroups").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.rule_names {
        let mut array_8 = object.key("ruleNames").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.severities {
        let mut array_11 = object.key("severities").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.rules_package_arns {
        let mut array_14 = object.key("rulesPackageArns").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.attributes {
        let mut array_17 = object.key("attributes").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_attribute::ser_attribute(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.user_attributes {
        let mut array_21 = object.key("userAttributes").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_attribute::ser_attribute(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.creation_time_range {
        #[allow(unused_mut)]
        let mut object_25 = object.key("creationTimeRange").start_object();
        crate::protocol_serde::shape_timestamp_range::ser_timestamp_range(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}
