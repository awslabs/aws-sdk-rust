// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_unsubscribe_from_event_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::unsubscribe_from_event::UnsubscribeFromEventOutput,
    crate::operation::unsubscribe_from_event::UnsubscribeFromEventError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?
            };
            tmp
        }),
        "InternalException" => crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::InternalException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_exception::de_internal_exception_json_err(_response_body, output)
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?
            };
            tmp
        }),
        "InvalidInputException" => crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::InvalidInputException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidInputExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_input_exception::de_invalid_input_exception_json_err(_response_body, output)
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_input_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?
            };
            tmp
        }),
        "NoSuchEntityException" => crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::NoSuchEntityException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NoSuchEntityExceptionBuilder::default();
                output = crate::protocol_serde::shape_no_such_entity_exception::de_no_such_entity_exception_json_err(_response_body, output)
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::no_such_entity_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?
            };
            tmp
        }),
        "ServiceTemporarilyUnavailableException" => {
            crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::ServiceTemporarilyUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceTemporarilyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_service_temporarily_unavailable_exception::de_service_temporarily_unavailable_exception_json_err(_response_body, output).map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::service_temporarily_unavailable_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::unhandled)?
                };
                tmp
            })
        }
        _ => crate::operation::unsubscribe_from_event::UnsubscribeFromEventError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_unsubscribe_from_event_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::unsubscribe_from_event::UnsubscribeFromEventOutput,
    crate::operation::unsubscribe_from_event::UnsubscribeFromEventError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::unsubscribe_from_event::builders::UnsubscribeFromEventOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_unsubscribe_from_event_input(
    input: &crate::operation::unsubscribe_from_event::UnsubscribeFromEventInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_unsubscribe_from_event_input::ser_unsubscribe_from_event_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
