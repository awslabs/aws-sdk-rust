// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_add_tags_to_stream;

pub(crate) mod shape_create_stream;

pub(crate) mod shape_decrease_stream_retention_period;

pub(crate) mod shape_delete_resource_policy;

pub(crate) mod shape_delete_stream;

pub(crate) mod shape_deregister_stream_consumer;

pub(crate) mod shape_describe_limits;

pub(crate) mod shape_describe_stream;

pub(crate) mod shape_describe_stream_consumer;

pub(crate) mod shape_describe_stream_summary;

pub(crate) mod shape_disable_enhanced_monitoring;

pub(crate) mod shape_enable_enhanced_monitoring;

pub(crate) mod shape_get_records;

pub(crate) mod shape_get_resource_policy;

pub(crate) mod shape_get_shard_iterator;

pub(crate) mod shape_increase_stream_retention_period;

pub(crate) mod shape_list_shards;

pub(crate) mod shape_list_stream_consumers;

pub(crate) mod shape_list_streams;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_tags_for_stream;

pub(crate) mod shape_merge_shards;

pub(crate) mod shape_put_record;

pub(crate) mod shape_put_records;

pub(crate) mod shape_put_resource_policy;

pub(crate) mod shape_register_stream_consumer;

pub(crate) mod shape_remove_tags_from_stream;

pub(crate) mod shape_split_shard;

pub(crate) mod shape_start_stream_encryption;

pub(crate) mod shape_stop_stream_encryption;

pub(crate) mod shape_subscribe_to_shard;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_max_record_size;

pub(crate) mod shape_update_shard_count;

pub(crate) mod shape_update_stream_mode;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_add_tags_to_stream_input;

pub(crate) mod shape_create_stream_input;

pub(crate) mod shape_decrease_stream_retention_period_input;

pub(crate) mod shape_delete_resource_policy_input;

pub(crate) mod shape_delete_stream_input;

pub(crate) mod shape_deregister_stream_consumer_input;

pub(crate) mod shape_describe_stream_consumer_input;

pub(crate) mod shape_describe_stream_input;

pub(crate) mod shape_describe_stream_summary_input;

pub(crate) mod shape_disable_enhanced_monitoring_input;

pub(crate) mod shape_enable_enhanced_monitoring_input;

pub(crate) mod shape_expired_iterator_exception;

pub(crate) mod shape_expired_next_token_exception;

pub(crate) mod shape_get_records_input;

pub(crate) mod shape_get_resource_policy_input;

pub(crate) mod shape_get_shard_iterator_input;

pub(crate) mod shape_increase_stream_retention_period_input;

pub(crate) mod shape_internal_failure_exception;

pub(crate) mod shape_invalid_argument_exception;

pub(crate) mod shape_kms_access_denied_exception;

pub(crate) mod shape_kms_disabled_exception;

pub(crate) mod shape_kms_invalid_state_exception;

pub(crate) mod shape_kms_not_found_exception;

pub(crate) mod shape_kms_opt_in_required;

pub(crate) mod shape_kms_throttling_exception;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_list_shards_input;

pub(crate) mod shape_list_stream_consumers_input;

pub(crate) mod shape_list_streams_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_list_tags_for_stream_input;

pub(crate) mod shape_merge_shards_input;

pub(crate) mod shape_provisioned_throughput_exceeded_exception;

pub(crate) mod shape_put_record_input;

pub(crate) mod shape_put_records_input;

pub(crate) mod shape_put_resource_policy_input;

pub(crate) mod shape_register_stream_consumer_input;

pub(crate) mod shape_remove_tags_from_stream_input;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_split_shard_input;

pub(crate) mod shape_start_stream_encryption_input;

pub(crate) mod shape_stop_stream_encryption_input;

pub(crate) mod shape_subscribe_to_shard_input;

pub(crate) mod shape_subscribe_to_shard_output;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_max_record_size_input;

pub(crate) mod shape_update_shard_count_input;

pub(crate) mod shape_update_stream_mode_input;

pub(crate) mod shape_validation_exception;

pub fn parse_event_stream_error_metadata(
    payload: &::bytes::Bytes,
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(payload, &::aws_smithy_runtime_api::http::Headers::new())
}

pub(crate) mod shape_child_shard_list;

pub(crate) mod shape_consumer;

pub(crate) mod shape_consumer_description;

pub(crate) mod shape_consumer_list;

pub(crate) mod shape_metrics_name_list;

pub(crate) mod shape_put_records_request_entry;

pub(crate) mod shape_put_records_result_entry_list;

pub(crate) mod shape_record_list;

pub(crate) mod shape_shard_filter;

pub(crate) mod shape_shard_list;

pub(crate) mod shape_starting_position;

pub(crate) mod shape_stream_description;

pub(crate) mod shape_stream_description_summary;

pub(crate) mod shape_stream_mode_details;

pub(crate) mod shape_stream_name_list;

pub(crate) mod shape_stream_summary_list;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_child_shard;

pub(crate) mod shape_enhanced_monitoring_list;

pub(crate) mod shape_put_records_result_entry;

pub(crate) mod shape_record;

pub(crate) mod shape_shard;

pub(crate) mod shape_stream_summary;

pub(crate) mod shape_subscribe_to_shard_event;

pub(crate) mod shape_tag;

pub(crate) mod shape_enhanced_metrics;

pub(crate) mod shape_hash_key_range;

pub(crate) mod shape_sequence_number_range;

pub(crate) mod shape_shard_id_list;
