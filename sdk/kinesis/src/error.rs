// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddTagsToStreamError {
    pub kind: AddTagsToStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddTagsToStreamErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddTagsToStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddTagsToStreamErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            AddTagsToStreamErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            AddTagsToStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            AddTagsToStreamErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            AddTagsToStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddTagsToStreamError {
    fn code(&self) -> Option<&str> {
        AddTagsToStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddTagsToStreamError {
    pub fn new(kind: AddTagsToStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddTagsToStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddTagsToStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for AddTagsToStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddTagsToStreamErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            AddTagsToStreamErrorKind::ResourceInUseError(_inner) => Some(_inner),
            AddTagsToStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            AddTagsToStreamErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            AddTagsToStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateStreamError {
    pub kind: CreateStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateStreamErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateStreamErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            CreateStreamErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            CreateStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            CreateStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateStreamError {
    fn code(&self) -> Option<&str> {
        CreateStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateStreamError {
    pub fn new(kind: CreateStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for CreateStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateStreamErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            CreateStreamErrorKind::ResourceInUseError(_inner) => Some(_inner),
            CreateStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            CreateStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DecreaseStreamRetentionPeriodError {
    pub kind: DecreaseStreamRetentionPeriodErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DecreaseStreamRetentionPeriodErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DecreaseStreamRetentionPeriodError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DecreaseStreamRetentionPeriodErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            DecreaseStreamRetentionPeriodErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            DecreaseStreamRetentionPeriodErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DecreaseStreamRetentionPeriodErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DecreaseStreamRetentionPeriodErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DecreaseStreamRetentionPeriodError {
    fn code(&self) -> Option<&str> {
        DecreaseStreamRetentionPeriodError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DecreaseStreamRetentionPeriodError {
    pub fn new(kind: DecreaseStreamRetentionPeriodErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DecreaseStreamRetentionPeriodErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DecreaseStreamRetentionPeriodErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DecreaseStreamRetentionPeriodError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DecreaseStreamRetentionPeriodErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            DecreaseStreamRetentionPeriodErrorKind::ResourceInUseError(_inner) => Some(_inner),
            DecreaseStreamRetentionPeriodErrorKind::LimitExceededError(_inner) => Some(_inner),
            DecreaseStreamRetentionPeriodErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DecreaseStreamRetentionPeriodErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteStreamError {
    pub kind: DeleteStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteStreamErrorKind {
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteStreamErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            DeleteStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DeleteStreamErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DeleteStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteStreamError {
    fn code(&self) -> Option<&str> {
        DeleteStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteStreamError {
    pub fn new(kind: DeleteStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DeleteStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteStreamErrorKind::ResourceInUseError(_inner) => Some(_inner),
            DeleteStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            DeleteStreamErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DeleteStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterStreamConsumerError {
    pub kind: DeregisterStreamConsumerErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterStreamConsumerErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterStreamConsumerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterStreamConsumerErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            DeregisterStreamConsumerErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DeregisterStreamConsumerErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DeregisterStreamConsumerErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterStreamConsumerError {
    fn code(&self) -> Option<&str> {
        DeregisterStreamConsumerError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterStreamConsumerError {
    pub fn new(kind: DeregisterStreamConsumerErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterStreamConsumerErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterStreamConsumerErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DeregisterStreamConsumerError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterStreamConsumerErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            DeregisterStreamConsumerErrorKind::LimitExceededError(_inner) => Some(_inner),
            DeregisterStreamConsumerErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DeregisterStreamConsumerErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeLimitsError {
    pub kind: DescribeLimitsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeLimitsErrorKind {
    LimitExceededError(crate::error::LimitExceededError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeLimitsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeLimitsErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DescribeLimitsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeLimitsError {
    fn code(&self) -> Option<&str> {
        DescribeLimitsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeLimitsError {
    pub fn new(kind: DescribeLimitsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeLimitsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeLimitsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DescribeLimitsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeLimitsErrorKind::LimitExceededError(_inner) => Some(_inner),
            DescribeLimitsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeStreamError {
    pub kind: DescribeStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeStreamErrorKind {
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DescribeStreamErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DescribeStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeStreamError {
    fn code(&self) -> Option<&str> {
        DescribeStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeStreamError {
    pub fn new(kind: DescribeStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DescribeStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            DescribeStreamErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DescribeStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeStreamConsumerError {
    pub kind: DescribeStreamConsumerErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeStreamConsumerErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeStreamConsumerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeStreamConsumerErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            DescribeStreamConsumerErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DescribeStreamConsumerErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DescribeStreamConsumerErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeStreamConsumerError {
    fn code(&self) -> Option<&str> {
        DescribeStreamConsumerError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeStreamConsumerError {
    pub fn new(kind: DescribeStreamConsumerErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeStreamConsumerErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeStreamConsumerErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DescribeStreamConsumerError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeStreamConsumerErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            DescribeStreamConsumerErrorKind::LimitExceededError(_inner) => Some(_inner),
            DescribeStreamConsumerErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DescribeStreamConsumerErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeStreamSummaryError {
    pub kind: DescribeStreamSummaryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeStreamSummaryErrorKind {
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeStreamSummaryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeStreamSummaryErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DescribeStreamSummaryErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DescribeStreamSummaryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeStreamSummaryError {
    fn code(&self) -> Option<&str> {
        DescribeStreamSummaryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeStreamSummaryError {
    pub fn new(kind: DescribeStreamSummaryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeStreamSummaryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeStreamSummaryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DescribeStreamSummaryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeStreamSummaryErrorKind::LimitExceededError(_inner) => Some(_inner),
            DescribeStreamSummaryErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DescribeStreamSummaryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisableEnhancedMonitoringError {
    pub kind: DisableEnhancedMonitoringErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisableEnhancedMonitoringErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisableEnhancedMonitoringError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisableEnhancedMonitoringErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            DisableEnhancedMonitoringErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            DisableEnhancedMonitoringErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            DisableEnhancedMonitoringErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DisableEnhancedMonitoringErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisableEnhancedMonitoringError {
    fn code(&self) -> Option<&str> {
        DisableEnhancedMonitoringError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisableEnhancedMonitoringError {
    pub fn new(kind: DisableEnhancedMonitoringErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisableEnhancedMonitoringErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisableEnhancedMonitoringErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DisableEnhancedMonitoringError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisableEnhancedMonitoringErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            DisableEnhancedMonitoringErrorKind::ResourceInUseError(_inner) => Some(_inner),
            DisableEnhancedMonitoringErrorKind::LimitExceededError(_inner) => Some(_inner),
            DisableEnhancedMonitoringErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DisableEnhancedMonitoringErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct EnableEnhancedMonitoringError {
    pub kind: EnableEnhancedMonitoringErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum EnableEnhancedMonitoringErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for EnableEnhancedMonitoringError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            EnableEnhancedMonitoringErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            EnableEnhancedMonitoringErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            EnableEnhancedMonitoringErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            EnableEnhancedMonitoringErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            EnableEnhancedMonitoringErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for EnableEnhancedMonitoringError {
    fn code(&self) -> Option<&str> {
        EnableEnhancedMonitoringError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl EnableEnhancedMonitoringError {
    pub fn new(kind: EnableEnhancedMonitoringErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: EnableEnhancedMonitoringErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: EnableEnhancedMonitoringErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for EnableEnhancedMonitoringError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            EnableEnhancedMonitoringErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            EnableEnhancedMonitoringErrorKind::ResourceInUseError(_inner) => Some(_inner),
            EnableEnhancedMonitoringErrorKind::LimitExceededError(_inner) => Some(_inner),
            EnableEnhancedMonitoringErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            EnableEnhancedMonitoringErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetRecordsError {
    pub kind: GetRecordsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetRecordsErrorKind {
    KMSAccessDeniedError(crate::error::KMSAccessDeniedError),
    KMSDisabledError(crate::error::KMSDisabledError),
    KMSNotFoundError(crate::error::KMSNotFoundError),
    ExpiredIteratorError(crate::error::ExpiredIteratorError),
    KMSOptInRequired(crate::error::KMSOptInRequired),
    KMSThrottlingError(crate::error::KMSThrottlingError),
    ProvisionedThroughputExceededError(crate::error::ProvisionedThroughputExceededError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetRecordsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetRecordsErrorKind::KMSAccessDeniedError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::KMSDisabledError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::KMSNotFoundError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::ExpiredIteratorError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::KMSOptInRequired(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::KMSThrottlingError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::ProvisionedThroughputExceededError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::KMSInvalidStateError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            GetRecordsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetRecordsError {
    fn code(&self) -> Option<&str> {
        GetRecordsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetRecordsError {
    pub fn new(kind: GetRecordsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetRecordsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetRecordsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for GetRecordsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetRecordsErrorKind::KMSAccessDeniedError(_inner) => Some(_inner),
            GetRecordsErrorKind::KMSDisabledError(_inner) => Some(_inner),
            GetRecordsErrorKind::KMSNotFoundError(_inner) => Some(_inner),
            GetRecordsErrorKind::ExpiredIteratorError(_inner) => Some(_inner),
            GetRecordsErrorKind::KMSOptInRequired(_inner) => Some(_inner),
            GetRecordsErrorKind::KMSThrottlingError(_inner) => Some(_inner),
            GetRecordsErrorKind::ProvisionedThroughputExceededError(_inner) => Some(_inner),
            GetRecordsErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            GetRecordsErrorKind::KMSInvalidStateError(_inner) => Some(_inner),
            GetRecordsErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            GetRecordsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetShardIteratorError {
    pub kind: GetShardIteratorErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetShardIteratorErrorKind {
    ProvisionedThroughputExceededError(crate::error::ProvisionedThroughputExceededError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetShardIteratorError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetShardIteratorErrorKind::ProvisionedThroughputExceededError(_inner) => _inner.fmt(f),
            GetShardIteratorErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            GetShardIteratorErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            GetShardIteratorErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetShardIteratorError {
    fn code(&self) -> Option<&str> {
        GetShardIteratorError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetShardIteratorError {
    pub fn new(kind: GetShardIteratorErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetShardIteratorErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetShardIteratorErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for GetShardIteratorError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetShardIteratorErrorKind::ProvisionedThroughputExceededError(_inner) => Some(_inner),
            GetShardIteratorErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            GetShardIteratorErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            GetShardIteratorErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct IncreaseStreamRetentionPeriodError {
    pub kind: IncreaseStreamRetentionPeriodErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum IncreaseStreamRetentionPeriodErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for IncreaseStreamRetentionPeriodError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            IncreaseStreamRetentionPeriodErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            IncreaseStreamRetentionPeriodErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            IncreaseStreamRetentionPeriodErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            IncreaseStreamRetentionPeriodErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            IncreaseStreamRetentionPeriodErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for IncreaseStreamRetentionPeriodError {
    fn code(&self) -> Option<&str> {
        IncreaseStreamRetentionPeriodError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl IncreaseStreamRetentionPeriodError {
    pub fn new(kind: IncreaseStreamRetentionPeriodErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: IncreaseStreamRetentionPeriodErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: IncreaseStreamRetentionPeriodErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for IncreaseStreamRetentionPeriodError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            IncreaseStreamRetentionPeriodErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            IncreaseStreamRetentionPeriodErrorKind::ResourceInUseError(_inner) => Some(_inner),
            IncreaseStreamRetentionPeriodErrorKind::LimitExceededError(_inner) => Some(_inner),
            IncreaseStreamRetentionPeriodErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            IncreaseStreamRetentionPeriodErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListShardsError {
    pub kind: ListShardsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListShardsErrorKind {
    ExpiredNextTokenError(crate::error::ExpiredNextTokenError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListShardsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListShardsErrorKind::ExpiredNextTokenError(_inner) => _inner.fmt(f),
            ListShardsErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            ListShardsErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            ListShardsErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            ListShardsErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListShardsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListShardsError {
    fn code(&self) -> Option<&str> {
        ListShardsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListShardsError {
    pub fn new(kind: ListShardsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListShardsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListShardsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListShardsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListShardsErrorKind::ExpiredNextTokenError(_inner) => Some(_inner),
            ListShardsErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            ListShardsErrorKind::ResourceInUseError(_inner) => Some(_inner),
            ListShardsErrorKind::LimitExceededError(_inner) => Some(_inner),
            ListShardsErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            ListShardsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListStreamConsumersError {
    pub kind: ListStreamConsumersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListStreamConsumersErrorKind {
    ExpiredNextTokenError(crate::error::ExpiredNextTokenError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListStreamConsumersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListStreamConsumersErrorKind::ExpiredNextTokenError(_inner) => _inner.fmt(f),
            ListStreamConsumersErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            ListStreamConsumersErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            ListStreamConsumersErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            ListStreamConsumersErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListStreamConsumersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListStreamConsumersError {
    fn code(&self) -> Option<&str> {
        ListStreamConsumersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListStreamConsumersError {
    pub fn new(kind: ListStreamConsumersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListStreamConsumersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListStreamConsumersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListStreamConsumersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListStreamConsumersErrorKind::ExpiredNextTokenError(_inner) => Some(_inner),
            ListStreamConsumersErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            ListStreamConsumersErrorKind::ResourceInUseError(_inner) => Some(_inner),
            ListStreamConsumersErrorKind::LimitExceededError(_inner) => Some(_inner),
            ListStreamConsumersErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            ListStreamConsumersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListStreamsError {
    pub kind: ListStreamsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListStreamsErrorKind {
    LimitExceededError(crate::error::LimitExceededError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListStreamsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListStreamsErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            ListStreamsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListStreamsError {
    fn code(&self) -> Option<&str> {
        ListStreamsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListStreamsError {
    pub fn new(kind: ListStreamsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListStreamsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListStreamsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListStreamsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListStreamsErrorKind::LimitExceededError(_inner) => Some(_inner),
            ListStreamsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListTagsForStreamError {
    pub kind: ListTagsForStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListTagsForStreamErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListTagsForStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListTagsForStreamErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            ListTagsForStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            ListTagsForStreamErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListTagsForStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListTagsForStreamError {
    fn code(&self) -> Option<&str> {
        ListTagsForStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListTagsForStreamError {
    pub fn new(kind: ListTagsForStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListTagsForStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListTagsForStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListTagsForStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListTagsForStreamErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            ListTagsForStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            ListTagsForStreamErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            ListTagsForStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct MergeShardsError {
    pub kind: MergeShardsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum MergeShardsErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for MergeShardsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            MergeShardsErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            MergeShardsErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            MergeShardsErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            MergeShardsErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            MergeShardsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for MergeShardsError {
    fn code(&self) -> Option<&str> {
        MergeShardsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl MergeShardsError {
    pub fn new(kind: MergeShardsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: MergeShardsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: MergeShardsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for MergeShardsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            MergeShardsErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            MergeShardsErrorKind::ResourceInUseError(_inner) => Some(_inner),
            MergeShardsErrorKind::LimitExceededError(_inner) => Some(_inner),
            MergeShardsErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            MergeShardsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutRecordError {
    pub kind: PutRecordErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutRecordErrorKind {
    KMSAccessDeniedError(crate::error::KMSAccessDeniedError),
    KMSDisabledError(crate::error::KMSDisabledError),
    KMSNotFoundError(crate::error::KMSNotFoundError),
    KMSOptInRequired(crate::error::KMSOptInRequired),
    KMSThrottlingError(crate::error::KMSThrottlingError),
    ProvisionedThroughputExceededError(crate::error::ProvisionedThroughputExceededError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutRecordError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutRecordErrorKind::KMSAccessDeniedError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::KMSDisabledError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::KMSNotFoundError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::KMSOptInRequired(_inner) => _inner.fmt(f),
            PutRecordErrorKind::KMSThrottlingError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::ProvisionedThroughputExceededError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::KMSInvalidStateError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            PutRecordErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutRecordError {
    fn code(&self) -> Option<&str> {
        PutRecordError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutRecordError {
    pub fn new(kind: PutRecordErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutRecordErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutRecordErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for PutRecordError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutRecordErrorKind::KMSAccessDeniedError(_inner) => Some(_inner),
            PutRecordErrorKind::KMSDisabledError(_inner) => Some(_inner),
            PutRecordErrorKind::KMSNotFoundError(_inner) => Some(_inner),
            PutRecordErrorKind::KMSOptInRequired(_inner) => Some(_inner),
            PutRecordErrorKind::KMSThrottlingError(_inner) => Some(_inner),
            PutRecordErrorKind::ProvisionedThroughputExceededError(_inner) => Some(_inner),
            PutRecordErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            PutRecordErrorKind::KMSInvalidStateError(_inner) => Some(_inner),
            PutRecordErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            PutRecordErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutRecordsError {
    pub kind: PutRecordsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutRecordsErrorKind {
    KMSAccessDeniedError(crate::error::KMSAccessDeniedError),
    KMSDisabledError(crate::error::KMSDisabledError),
    KMSNotFoundError(crate::error::KMSNotFoundError),
    KMSOptInRequired(crate::error::KMSOptInRequired),
    KMSThrottlingError(crate::error::KMSThrottlingError),
    ProvisionedThroughputExceededError(crate::error::ProvisionedThroughputExceededError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutRecordsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutRecordsErrorKind::KMSAccessDeniedError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::KMSDisabledError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::KMSNotFoundError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::KMSOptInRequired(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::KMSThrottlingError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::ProvisionedThroughputExceededError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::KMSInvalidStateError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            PutRecordsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutRecordsError {
    fn code(&self) -> Option<&str> {
        PutRecordsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutRecordsError {
    pub fn new(kind: PutRecordsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutRecordsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutRecordsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for PutRecordsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutRecordsErrorKind::KMSAccessDeniedError(_inner) => Some(_inner),
            PutRecordsErrorKind::KMSDisabledError(_inner) => Some(_inner),
            PutRecordsErrorKind::KMSNotFoundError(_inner) => Some(_inner),
            PutRecordsErrorKind::KMSOptInRequired(_inner) => Some(_inner),
            PutRecordsErrorKind::KMSThrottlingError(_inner) => Some(_inner),
            PutRecordsErrorKind::ProvisionedThroughputExceededError(_inner) => Some(_inner),
            PutRecordsErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            PutRecordsErrorKind::KMSInvalidStateError(_inner) => Some(_inner),
            PutRecordsErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            PutRecordsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterStreamConsumerError {
    pub kind: RegisterStreamConsumerErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterStreamConsumerErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterStreamConsumerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterStreamConsumerErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            RegisterStreamConsumerErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            RegisterStreamConsumerErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            RegisterStreamConsumerErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            RegisterStreamConsumerErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterStreamConsumerError {
    fn code(&self) -> Option<&str> {
        RegisterStreamConsumerError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterStreamConsumerError {
    pub fn new(kind: RegisterStreamConsumerErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterStreamConsumerErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterStreamConsumerErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for RegisterStreamConsumerError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterStreamConsumerErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            RegisterStreamConsumerErrorKind::ResourceInUseError(_inner) => Some(_inner),
            RegisterStreamConsumerErrorKind::LimitExceededError(_inner) => Some(_inner),
            RegisterStreamConsumerErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            RegisterStreamConsumerErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemoveTagsFromStreamError {
    pub kind: RemoveTagsFromStreamErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemoveTagsFromStreamErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemoveTagsFromStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemoveTagsFromStreamErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            RemoveTagsFromStreamErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            RemoveTagsFromStreamErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            RemoveTagsFromStreamErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            RemoveTagsFromStreamErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemoveTagsFromStreamError {
    fn code(&self) -> Option<&str> {
        RemoveTagsFromStreamError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemoveTagsFromStreamError {
    pub fn new(kind: RemoveTagsFromStreamErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemoveTagsFromStreamErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemoveTagsFromStreamErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for RemoveTagsFromStreamError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemoveTagsFromStreamErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            RemoveTagsFromStreamErrorKind::ResourceInUseError(_inner) => Some(_inner),
            RemoveTagsFromStreamErrorKind::LimitExceededError(_inner) => Some(_inner),
            RemoveTagsFromStreamErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            RemoveTagsFromStreamErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SplitShardError {
    pub kind: SplitShardErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SplitShardErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SplitShardError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SplitShardErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            SplitShardErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            SplitShardErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            SplitShardErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            SplitShardErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SplitShardError {
    fn code(&self) -> Option<&str> {
        SplitShardError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SplitShardError {
    pub fn new(kind: SplitShardErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SplitShardErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SplitShardErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for SplitShardError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SplitShardErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            SplitShardErrorKind::ResourceInUseError(_inner) => Some(_inner),
            SplitShardErrorKind::LimitExceededError(_inner) => Some(_inner),
            SplitShardErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            SplitShardErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartStreamEncryptionError {
    pub kind: StartStreamEncryptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartStreamEncryptionErrorKind {
    KMSAccessDeniedError(crate::error::KMSAccessDeniedError),
    KMSDisabledError(crate::error::KMSDisabledError),
    KMSNotFoundError(crate::error::KMSNotFoundError),
    KMSOptInRequired(crate::error::KMSOptInRequired),
    KMSThrottlingError(crate::error::KMSThrottlingError),
    InvalidArgumentError(crate::error::InvalidArgumentError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartStreamEncryptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartStreamEncryptionErrorKind::KMSAccessDeniedError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::KMSDisabledError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::KMSNotFoundError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::KMSOptInRequired(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::KMSThrottlingError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::KMSInvalidStateError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            StartStreamEncryptionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartStreamEncryptionError {
    fn code(&self) -> Option<&str> {
        StartStreamEncryptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartStreamEncryptionError {
    pub fn new(kind: StartStreamEncryptionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartStreamEncryptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartStreamEncryptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for StartStreamEncryptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartStreamEncryptionErrorKind::KMSAccessDeniedError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::KMSDisabledError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::KMSNotFoundError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::KMSOptInRequired(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::KMSThrottlingError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::KMSInvalidStateError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::ResourceInUseError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::LimitExceededError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            StartStreamEncryptionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopStreamEncryptionError {
    pub kind: StopStreamEncryptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopStreamEncryptionErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopStreamEncryptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopStreamEncryptionErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            StopStreamEncryptionErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            StopStreamEncryptionErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            StopStreamEncryptionErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            StopStreamEncryptionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StopStreamEncryptionError {
    fn code(&self) -> Option<&str> {
        StopStreamEncryptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopStreamEncryptionError {
    pub fn new(kind: StopStreamEncryptionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopStreamEncryptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopStreamEncryptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for StopStreamEncryptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopStreamEncryptionErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            StopStreamEncryptionErrorKind::ResourceInUseError(_inner) => Some(_inner),
            StopStreamEncryptionErrorKind::LimitExceededError(_inner) => Some(_inner),
            StopStreamEncryptionErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            StopStreamEncryptionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateShardCountError {
    pub kind: UpdateShardCountErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateShardCountErrorKind {
    InvalidArgumentError(crate::error::InvalidArgumentError),
    ResourceInUseError(crate::error::ResourceInUseError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateShardCountError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateShardCountErrorKind::InvalidArgumentError(_inner) => _inner.fmt(f),
            UpdateShardCountErrorKind::ResourceInUseError(_inner) => _inner.fmt(f),
            UpdateShardCountErrorKind::LimitExceededError(_inner) => _inner.fmt(f),
            UpdateShardCountErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            UpdateShardCountErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateShardCountError {
    fn code(&self) -> Option<&str> {
        UpdateShardCountError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateShardCountError {
    pub fn new(kind: UpdateShardCountErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateShardCountErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateShardCountErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for UpdateShardCountError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateShardCountErrorKind::InvalidArgumentError(_inner) => Some(_inner),
            UpdateShardCountErrorKind::ResourceInUseError(_inner) => Some(_inner),
            UpdateShardCountErrorKind::LimitExceededError(_inner) => Some(_inner),
            UpdateShardCountErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            UpdateShardCountErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The requested resource could not be found. The stream might not be specified
/// correctly.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundError [ResourceNotFoundException]")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundError {}
/// See [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
pub mod resource_not_found_error {
    /// A builder for [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
        pub fn build(self) -> crate::error::ResourceNotFoundError {
            crate::error::ResourceNotFoundError {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundError {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    pub fn builder() -> crate::error::resource_not_found_error::Builder {
        crate::error::resource_not_found_error::Builder::default()
    }
}

/// <p>The requested resource exceeds the maximum number allowed, or the number of
/// concurrent stream requests exceeds the maximum number allowed. </p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct LimitExceededError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for LimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LimitExceededError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl LimitExceededError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for LimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "LimitExceededError [LimitExceededException]")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for LimitExceededError {}
/// See [`LimitExceededError`](crate::error::LimitExceededError)
pub mod limit_exceeded_error {
    /// A builder for [`LimitExceededError`](crate::error::LimitExceededError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`LimitExceededError`](crate::error::LimitExceededError)
        pub fn build(self) -> crate::error::LimitExceededError {
            crate::error::LimitExceededError {
                message: self.message,
            }
        }
    }
}
impl LimitExceededError {
    /// Creates a new builder-style object to manufacture [`LimitExceededError`](crate::error::LimitExceededError)
    pub fn builder() -> crate::error::limit_exceeded_error::Builder {
        crate::error::limit_exceeded_error::Builder::default()
    }
}

/// <p>The resource is not available for this operation. For successful operation, the
/// resource must be in the <code>ACTIVE</code> state.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceInUseError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceInUseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceInUseError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceInUseError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceInUseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceInUseError [ResourceInUseException]")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceInUseError {}
/// See [`ResourceInUseError`](crate::error::ResourceInUseError)
pub mod resource_in_use_error {
    /// A builder for [`ResourceInUseError`](crate::error::ResourceInUseError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`ResourceInUseError`](crate::error::ResourceInUseError)
        pub fn build(self) -> crate::error::ResourceInUseError {
            crate::error::ResourceInUseError {
                message: self.message,
            }
        }
    }
}
impl ResourceInUseError {
    /// Creates a new builder-style object to manufacture [`ResourceInUseError`](crate::error::ResourceInUseError)
    pub fn builder() -> crate::error::resource_in_use_error::Builder {
        crate::error::resource_in_use_error::Builder::default()
    }
}

/// <p>A specified parameter exceeds its restrictions, is not supported, or can't be used.
/// For more information, see the returned message.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidArgumentError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidArgumentError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidArgumentError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidArgumentError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidArgumentError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidArgumentError [InvalidArgumentException]")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidArgumentError {}
/// See [`InvalidArgumentError`](crate::error::InvalidArgumentError)
pub mod invalid_argument_error {
    /// A builder for [`InvalidArgumentError`](crate::error::InvalidArgumentError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`InvalidArgumentError`](crate::error::InvalidArgumentError)
        pub fn build(self) -> crate::error::InvalidArgumentError {
            crate::error::InvalidArgumentError {
                message: self.message,
            }
        }
    }
}
impl InvalidArgumentError {
    /// Creates a new builder-style object to manufacture [`InvalidArgumentError`](crate::error::InvalidArgumentError)
    pub fn builder() -> crate::error::invalid_argument_error::Builder {
        crate::error::invalid_argument_error::Builder::default()
    }
}

/// <p>The request was rejected because the state of the specified resource isn't valid
/// for this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use of a
/// Customer Master Key</a> in the <i>AWS Key Management Service Developer
/// Guide</i>.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSInvalidStateError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSInvalidStateError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSInvalidStateError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSInvalidStateError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSInvalidStateError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSInvalidStateError [KMSInvalidStateException]")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSInvalidStateError {}
/// See [`KMSInvalidStateError`](crate::error::KMSInvalidStateError)
pub mod kms_invalid_state_error {
    /// A builder for [`KMSInvalidStateError`](crate::error::KMSInvalidStateError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSInvalidStateError`](crate::error::KMSInvalidStateError)
        pub fn build(self) -> crate::error::KMSInvalidStateError {
            crate::error::KMSInvalidStateError {
                message: self.message,
            }
        }
    }
}
impl KMSInvalidStateError {
    /// Creates a new builder-style object to manufacture [`KMSInvalidStateError`](crate::error::KMSInvalidStateError)
    pub fn builder() -> crate::error::kms_invalid_state_error::Builder {
        crate::error::kms_invalid_state_error::Builder::default()
    }
}

/// <p>The request was denied due to request throttling. For more information about
/// throttling, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a> in
/// the <i>AWS Key Management Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSThrottlingError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSThrottlingError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSThrottlingError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSThrottlingError [KMSThrottlingException]")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSThrottlingError {}
/// See [`KMSThrottlingError`](crate::error::KMSThrottlingError)
pub mod kms_throttling_error {
    /// A builder for [`KMSThrottlingError`](crate::error::KMSThrottlingError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSThrottlingError`](crate::error::KMSThrottlingError)
        pub fn build(self) -> crate::error::KMSThrottlingError {
            crate::error::KMSThrottlingError {
                message: self.message,
            }
        }
    }
}
impl KMSThrottlingError {
    /// Creates a new builder-style object to manufacture [`KMSThrottlingError`](crate::error::KMSThrottlingError)
    pub fn builder() -> crate::error::kms_throttling_error::Builder {
        crate::error::kms_throttling_error::Builder::default()
    }
}

/// <p>The AWS access key ID needs a subscription for the service.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSOptInRequired {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSOptInRequired {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSOptInRequired");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSOptInRequired {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSOptInRequired {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSOptInRequired")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSOptInRequired {}
/// See [`KMSOptInRequired`](crate::error::KMSOptInRequired)
pub mod kms_opt_in_required {
    /// A builder for [`KMSOptInRequired`](crate::error::KMSOptInRequired)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSOptInRequired`](crate::error::KMSOptInRequired)
        pub fn build(self) -> crate::error::KMSOptInRequired {
            crate::error::KMSOptInRequired {
                message: self.message,
            }
        }
    }
}
impl KMSOptInRequired {
    /// Creates a new builder-style object to manufacture [`KMSOptInRequired`](crate::error::KMSOptInRequired)
    pub fn builder() -> crate::error::kms_opt_in_required::Builder {
        crate::error::kms_opt_in_required::Builder::default()
    }
}

/// <p>The request was rejected because the specified entity or resource can't be
/// found.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSNotFoundError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSNotFoundError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSNotFoundError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSNotFoundError [KMSNotFoundException]")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSNotFoundError {}
/// See [`KMSNotFoundError`](crate::error::KMSNotFoundError)
pub mod kms_not_found_error {
    /// A builder for [`KMSNotFoundError`](crate::error::KMSNotFoundError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSNotFoundError`](crate::error::KMSNotFoundError)
        pub fn build(self) -> crate::error::KMSNotFoundError {
            crate::error::KMSNotFoundError {
                message: self.message,
            }
        }
    }
}
impl KMSNotFoundError {
    /// Creates a new builder-style object to manufacture [`KMSNotFoundError`](crate::error::KMSNotFoundError)
    pub fn builder() -> crate::error::kms_not_found_error::Builder {
        crate::error::kms_not_found_error::Builder::default()
    }
}

/// <p>The request was rejected because the specified customer master key (CMK) isn't
/// enabled.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSDisabledError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSDisabledError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSDisabledError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSDisabledError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSDisabledError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSDisabledError [KMSDisabledException]")?;
        if let Some(inner_9) = &self.message {
            write!(f, ": {}", inner_9)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSDisabledError {}
/// See [`KMSDisabledError`](crate::error::KMSDisabledError)
pub mod kms_disabled_error {
    /// A builder for [`KMSDisabledError`](crate::error::KMSDisabledError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSDisabledError`](crate::error::KMSDisabledError)
        pub fn build(self) -> crate::error::KMSDisabledError {
            crate::error::KMSDisabledError {
                message: self.message,
            }
        }
    }
}
impl KMSDisabledError {
    /// Creates a new builder-style object to manufacture [`KMSDisabledError`](crate::error::KMSDisabledError)
    pub fn builder() -> crate::error::kms_disabled_error::Builder {
        crate::error::kms_disabled_error::Builder::default()
    }
}

/// <p>The ciphertext references a key that doesn't exist or that you don't have access
/// to.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct KMSAccessDeniedError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for KMSAccessDeniedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("KMSAccessDeniedError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl KMSAccessDeniedError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for KMSAccessDeniedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "KMSAccessDeniedError [KMSAccessDeniedException]")?;
        if let Some(inner_10) = &self.message {
            write!(f, ": {}", inner_10)?;
        }
        Ok(())
    }
}
impl std::error::Error for KMSAccessDeniedError {}
/// See [`KMSAccessDeniedError`](crate::error::KMSAccessDeniedError)
pub mod kms_access_denied_error {
    /// A builder for [`KMSAccessDeniedError`](crate::error::KMSAccessDeniedError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`KMSAccessDeniedError`](crate::error::KMSAccessDeniedError)
        pub fn build(self) -> crate::error::KMSAccessDeniedError {
            crate::error::KMSAccessDeniedError {
                message: self.message,
            }
        }
    }
}
impl KMSAccessDeniedError {
    /// Creates a new builder-style object to manufacture [`KMSAccessDeniedError`](crate::error::KMSAccessDeniedError)
    pub fn builder() -> crate::error::kms_access_denied_error::Builder {
        crate::error::kms_access_denied_error::Builder::default()
    }
}

/// <p>The request rate for the stream is too high, or the requested data is too large for
/// the available throughput. Reduce the frequency or size of your requests. For more
/// information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams Limits</a> in the
/// <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error Retries and
/// Exponential Backoff in AWS</a> in the <i>AWS General
/// Reference</i>.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ProvisionedThroughputExceededError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ProvisionedThroughputExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProvisionedThroughputExceededError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ProvisionedThroughputExceededError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ProvisionedThroughputExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "ProvisionedThroughputExceededError [ProvisionedThroughputExceededException]"
        )?;
        if let Some(inner_11) = &self.message {
            write!(f, ": {}", inner_11)?;
        }
        Ok(())
    }
}
impl std::error::Error for ProvisionedThroughputExceededError {}
/// See [`ProvisionedThroughputExceededError`](crate::error::ProvisionedThroughputExceededError)
pub mod provisioned_throughput_exceeded_error {
    /// A builder for [`ProvisionedThroughputExceededError`](crate::error::ProvisionedThroughputExceededError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionedThroughputExceededError`](crate::error::ProvisionedThroughputExceededError)
        pub fn build(self) -> crate::error::ProvisionedThroughputExceededError {
            crate::error::ProvisionedThroughputExceededError {
                message: self.message,
            }
        }
    }
}
impl ProvisionedThroughputExceededError {
    /// Creates a new builder-style object to manufacture [`ProvisionedThroughputExceededError`](crate::error::ProvisionedThroughputExceededError)
    pub fn builder() -> crate::error::provisioned_throughput_exceeded_error::Builder {
        crate::error::provisioned_throughput_exceeded_error::Builder::default()
    }
}

/// <p>The pagination token passed to the operation is expired.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ExpiredNextTokenError {
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExpiredNextTokenError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExpiredNextTokenError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ExpiredNextTokenError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ExpiredNextTokenError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ExpiredNextTokenError [ExpiredNextTokenException]")?;
        if let Some(inner_12) = &self.message {
            write!(f, ": {}", inner_12)?;
        }
        Ok(())
    }
}
impl std::error::Error for ExpiredNextTokenError {}
/// See [`ExpiredNextTokenError`](crate::error::ExpiredNextTokenError)
pub mod expired_next_token_error {
    /// A builder for [`ExpiredNextTokenError`](crate::error::ExpiredNextTokenError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExpiredNextTokenError`](crate::error::ExpiredNextTokenError)
        pub fn build(self) -> crate::error::ExpiredNextTokenError {
            crate::error::ExpiredNextTokenError {
                message: self.message,
            }
        }
    }
}
impl ExpiredNextTokenError {
    /// Creates a new builder-style object to manufacture [`ExpiredNextTokenError`](crate::error::ExpiredNextTokenError)
    pub fn builder() -> crate::error::expired_next_token_error::Builder {
        crate::error::expired_next_token_error::Builder::default()
    }
}

/// <p>The provided iterator exceeds the maximum age allowed.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ExpiredIteratorError {
    /// <p>A message that provides information about the error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExpiredIteratorError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExpiredIteratorError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ExpiredIteratorError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ExpiredIteratorError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ExpiredIteratorError [ExpiredIteratorException]")?;
        if let Some(inner_13) = &self.message {
            write!(f, ": {}", inner_13)?;
        }
        Ok(())
    }
}
impl std::error::Error for ExpiredIteratorError {}
/// See [`ExpiredIteratorError`](crate::error::ExpiredIteratorError)
pub mod expired_iterator_error {
    /// A builder for [`ExpiredIteratorError`](crate::error::ExpiredIteratorError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message that provides information about the error.</p>
        pub fn message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        pub fn set_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.message = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExpiredIteratorError`](crate::error::ExpiredIteratorError)
        pub fn build(self) -> crate::error::ExpiredIteratorError {
            crate::error::ExpiredIteratorError {
                message: self.message,
            }
        }
    }
}
impl ExpiredIteratorError {
    /// Creates a new builder-style object to manufacture [`ExpiredIteratorError`](crate::error::ExpiredIteratorError)
    pub fn builder() -> crate::error::expired_iterator_error::Builder {
        crate::error::expired_iterator_error::Builder::default()
    }
}
