// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output parameter of the GetRecords API. The existing child shard of the current shard.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChildShard {
    /// <p>The shard ID of the existing child shard of the current shard.</p>
    #[doc(hidden)]
    pub shard_id: std::option::Option<std::string::String>,
    /// <p>The current shard that is the parent of the existing child shard.</p>
    #[doc(hidden)]
    pub parent_shards: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>
    #[doc(hidden)]
    pub hash_key_range: std::option::Option<crate::types::HashKeyRange>,
}
impl ChildShard {
    /// <p>The shard ID of the existing child shard of the current shard.</p>
    pub fn shard_id(&self) -> std::option::Option<&str> {
        self.shard_id.as_deref()
    }
    /// <p>The current shard that is the parent of the existing child shard.</p>
    pub fn parent_shards(&self) -> std::option::Option<&[std::string::String]> {
        self.parent_shards.as_deref()
    }
    /// <p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>
    pub fn hash_key_range(&self) -> std::option::Option<&crate::types::HashKeyRange> {
        self.hash_key_range.as_ref()
    }
}
impl ChildShard {
    /// Creates a new builder-style object to manufacture [`ChildShard`](crate::types::ChildShard).
    pub fn builder() -> crate::types::builders::ChildShardBuilder {
        crate::types::builders::ChildShardBuilder::default()
    }
}

/// A builder for [`ChildShard`](crate::types::ChildShard).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChildShardBuilder {
    pub(crate) shard_id: std::option::Option<std::string::String>,
    pub(crate) parent_shards: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) hash_key_range: std::option::Option<crate::types::HashKeyRange>,
}
impl ChildShardBuilder {
    /// <p>The shard ID of the existing child shard of the current shard.</p>
    pub fn shard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.shard_id = Some(input.into());
        self
    }
    /// <p>The shard ID of the existing child shard of the current shard.</p>
    pub fn set_shard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.shard_id = input;
        self
    }
    /// Appends an item to `parent_shards`.
    ///
    /// To override the contents of this collection use [`set_parent_shards`](Self::set_parent_shards).
    ///
    /// <p>The current shard that is the parent of the existing child shard.</p>
    pub fn parent_shards(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.parent_shards.unwrap_or_default();
        v.push(input.into());
        self.parent_shards = Some(v);
        self
    }
    /// <p>The current shard that is the parent of the existing child shard.</p>
    pub fn set_parent_shards(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.parent_shards = input;
        self
    }
    /// <p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>
    pub fn hash_key_range(mut self, input: crate::types::HashKeyRange) -> Self {
        self.hash_key_range = Some(input);
        self
    }
    /// <p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>
    pub fn set_hash_key_range(
        mut self,
        input: std::option::Option<crate::types::HashKeyRange>,
    ) -> Self {
        self.hash_key_range = input;
        self
    }
    /// Consumes the builder and constructs a [`ChildShard`](crate::types::ChildShard).
    pub fn build(self) -> crate::types::ChildShard {
        crate::types::ChildShard {
            shard_id: self.shard_id,
            parent_shards: self.parent_shards,
            hash_key_range: self.hash_key_range,
        }
    }
}
