// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of a stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamSummary {
    /// <p>The name of a stream.</p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the stream.</p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The status of the stream.</p>
    #[doc(hidden)]
    pub stream_status: std::option::Option<crate::types::StreamStatus>,
    /// <p> Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams. </p>
    #[doc(hidden)]
    pub stream_mode_details: std::option::Option<crate::types::StreamModeDetails>,
    /// <p>The timestamp at which the stream was created.</p>
    #[doc(hidden)]
    pub stream_creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl StreamSummary {
    /// <p>The name of a stream.</p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
    /// <p>The ARN of the stream.</p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The status of the stream.</p>
    pub fn stream_status(&self) -> std::option::Option<&crate::types::StreamStatus> {
        self.stream_status.as_ref()
    }
    /// <p> Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams. </p>
    pub fn stream_mode_details(&self) -> std::option::Option<&crate::types::StreamModeDetails> {
        self.stream_mode_details.as_ref()
    }
    /// <p>The timestamp at which the stream was created.</p>
    pub fn stream_creation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.stream_creation_timestamp.as_ref()
    }
}
impl StreamSummary {
    /// Creates a new builder-style object to manufacture [`StreamSummary`](crate::types::StreamSummary).
    pub fn builder() -> crate::types::builders::StreamSummaryBuilder {
        crate::types::builders::StreamSummaryBuilder::default()
    }
}

/// A builder for [`StreamSummary`](crate::types::StreamSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamSummaryBuilder {
    pub(crate) stream_name: std::option::Option<std::string::String>,
    pub(crate) stream_arn: std::option::Option<std::string::String>,
    pub(crate) stream_status: std::option::Option<crate::types::StreamStatus>,
    pub(crate) stream_mode_details: std::option::Option<crate::types::StreamModeDetails>,
    pub(crate) stream_creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl StreamSummaryBuilder {
    /// <p>The name of a stream.</p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_name = Some(input.into());
        self
    }
    /// <p>The name of a stream.</p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The status of the stream.</p>
    pub fn stream_status(mut self, input: crate::types::StreamStatus) -> Self {
        self.stream_status = Some(input);
        self
    }
    /// <p>The status of the stream.</p>
    pub fn set_stream_status(
        mut self,
        input: std::option::Option<crate::types::StreamStatus>,
    ) -> Self {
        self.stream_status = input;
        self
    }
    /// <p> Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams. </p>
    pub fn stream_mode_details(mut self, input: crate::types::StreamModeDetails) -> Self {
        self.stream_mode_details = Some(input);
        self
    }
    /// <p> Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams. </p>
    pub fn set_stream_mode_details(
        mut self,
        input: std::option::Option<crate::types::StreamModeDetails>,
    ) -> Self {
        self.stream_mode_details = input;
        self
    }
    /// <p>The timestamp at which the stream was created.</p>
    pub fn stream_creation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.stream_creation_timestamp = Some(input);
        self
    }
    /// <p>The timestamp at which the stream was created.</p>
    pub fn set_stream_creation_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.stream_creation_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamSummary`](crate::types::StreamSummary).
    pub fn build(self) -> crate::types::StreamSummary {
        crate::types::StreamSummary {
            stream_name: self.stream_name,
            stream_arn: self.stream_arn,
            stream_status: self.stream_status,
            stream_mode_details: self.stream_mode_details,
            stream_creation_timestamp: self.stream_creation_timestamp,
        }
    }
}
