// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Kinesis
///
/// Client for invoking operations on Amazon Kinesis. Each operation on Amazon Kinesis is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kinesis::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_kinesis::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_kinesis::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddTagsToStream`](crate::client::fluent_builders::AddTagsToStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::AddTagsToStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::AddTagsToStream::set_stream_name): <p>The name of the stream.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::AddTagsToStream::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::AddTagsToStream::set_tags): <p>A set of up to 10 key-value pairs to use to create the tags.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::AddTagsToStream::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::AddTagsToStream::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`AddTagsToStreamOutput`](crate::output::AddTagsToStreamOutput)

    /// - On failure, responds with [`SdkError<AddTagsToStreamError>`](crate::error::AddTagsToStreamError)
    pub fn add_tags_to_stream(&self) -> crate::client::fluent_builders::AddTagsToStream {
        crate::client::fluent_builders::AddTagsToStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateStream`](crate::client::fluent_builders::CreateStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::CreateStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::CreateStream::set_stream_name): <p>A name to identify the stream. The stream name is scoped to the Amazon Web Services account used by the application that creates the stream. It is also scoped by Amazon Web Services Region. That is, two streams in two different Amazon Web Services accounts can have the same name. Two streams in the same Amazon Web Services account but in two different Regions can also have the same name.</p>
    ///   - [`shard_count(i32)`](crate::client::fluent_builders::CreateStream::shard_count) / [`set_shard_count(Option<i32>)`](crate::client::fluent_builders::CreateStream::set_shard_count): <p>The number of shards that the stream will use. The throughput of the stream is a function of the number of shards; more shards are required for greater provisioned throughput.</p>
    ///   - [`stream_mode_details(StreamModeDetails)`](crate::client::fluent_builders::CreateStream::stream_mode_details) / [`set_stream_mode_details(Option<StreamModeDetails>)`](crate::client::fluent_builders::CreateStream::set_stream_mode_details): <p> Indicates the capacity mode of the data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams.</p>
    /// - On success, responds with [`CreateStreamOutput`](crate::output::CreateStreamOutput)

    /// - On failure, responds with [`SdkError<CreateStreamError>`](crate::error::CreateStreamError)
    pub fn create_stream(&self) -> crate::client::fluent_builders::CreateStream {
        crate::client::fluent_builders::CreateStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DecreaseStreamRetentionPeriod`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::set_stream_name): <p>The name of the stream to modify.</p>
    ///   - [`retention_period_hours(i32)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::retention_period_hours) / [`set_retention_period_hours(Option<i32>)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::set_retention_period_hours): <p>The new retention period of the stream, in hours. Must be less than the current retention period.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DecreaseStreamRetentionPeriod::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`DecreaseStreamRetentionPeriodOutput`](crate::output::DecreaseStreamRetentionPeriodOutput)

    /// - On failure, responds with [`SdkError<DecreaseStreamRetentionPeriodError>`](crate::error::DecreaseStreamRetentionPeriodError)
    pub fn decrease_stream_retention_period(
        &self,
    ) -> crate::client::fluent_builders::DecreaseStreamRetentionPeriod {
        crate::client::fluent_builders::DecreaseStreamRetentionPeriod::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteStream`](crate::client::fluent_builders::DeleteStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::DeleteStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::DeleteStream::set_stream_name): <p>The name of the stream to delete.</p>
    ///   - [`enforce_consumer_deletion(bool)`](crate::client::fluent_builders::DeleteStream::enforce_consumer_deletion) / [`set_enforce_consumer_deletion(Option<bool>)`](crate::client::fluent_builders::DeleteStream::set_enforce_consumer_deletion): <p>If this parameter is unset (<code>null</code>) or if you set it to <code>false</code>, and the stream has registered consumers, the call to <code>DeleteStream</code> fails with a <code>ResourceInUseException</code>. </p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteStream::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DeleteStream::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`DeleteStreamOutput`](crate::output::DeleteStreamOutput)

    /// - On failure, responds with [`SdkError<DeleteStreamError>`](crate::error::DeleteStreamError)
    pub fn delete_stream(&self) -> crate::client::fluent_builders::DeleteStream {
        crate::client::fluent_builders::DeleteStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterStreamConsumer`](crate::client::fluent_builders::DeregisterStreamConsumer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::set_stream_arn): <p>The ARN of the Kinesis data stream that the consumer is registered with. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    ///   - [`consumer_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::consumer_name) / [`set_consumer_name(Option<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::set_consumer_name): <p>The name that you gave to the consumer.</p>
    ///   - [`consumer_arn(impl Into<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::consumer_arn) / [`set_consumer_arn(Option<String>)`](crate::client::fluent_builders::DeregisterStreamConsumer::set_consumer_arn): <p>The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.</p>
    /// - On success, responds with [`DeregisterStreamConsumerOutput`](crate::output::DeregisterStreamConsumerOutput)

    /// - On failure, responds with [`SdkError<DeregisterStreamConsumerError>`](crate::error::DeregisterStreamConsumerError)
    pub fn deregister_stream_consumer(
        &self,
    ) -> crate::client::fluent_builders::DeregisterStreamConsumer {
        crate::client::fluent_builders::DeregisterStreamConsumer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLimits`](crate::client::fluent_builders::DescribeLimits) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeLimits::send) it.

    /// - On success, responds with [`DescribeLimitsOutput`](crate::output::DescribeLimitsOutput) with field(s):
    ///   - [`shard_limit(Option<i32>)`](crate::output::DescribeLimitsOutput::shard_limit): <p>The maximum number of shards.</p>
    ///   - [`open_shard_count(Option<i32>)`](crate::output::DescribeLimitsOutput::open_shard_count): <p>The number of open shards.</p>
    ///   - [`on_demand_stream_count(Option<i32>)`](crate::output::DescribeLimitsOutput::on_demand_stream_count): <p> Indicates the number of data streams with the on-demand capacity mode.</p>
    ///   - [`on_demand_stream_count_limit(Option<i32>)`](crate::output::DescribeLimitsOutput::on_demand_stream_count_limit): <p> The maximum number of data streams with the on-demand capacity mode. </p>
    /// - On failure, responds with [`SdkError<DescribeLimitsError>`](crate::error::DescribeLimitsError)
    pub fn describe_limits(&self) -> crate::client::fluent_builders::DescribeLimits {
        crate::client::fluent_builders::DescribeLimits::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStream`](crate::client::fluent_builders::DescribeStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::DescribeStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::DescribeStream::set_stream_name): <p>The name of the stream to describe.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeStream::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeStream::set_limit): <p>The maximum number of shards to return in a single call. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.</p>
    ///   - [`exclusive_start_shard_id(impl Into<String>)`](crate::client::fluent_builders::DescribeStream::exclusive_start_shard_id) / [`set_exclusive_start_shard_id(Option<String>)`](crate::client::fluent_builders::DescribeStream::set_exclusive_start_shard_id): <p>The shard ID of the shard to start with.</p>  <p>Specify this parameter to indicate that you want to describe the stream starting with the shard whose ID immediately follows <code>ExclusiveStartShardId</code>.</p>  <p>If you don't specify this parameter, the default behavior for <code>DescribeStream</code> is to describe the stream starting with the first shard in the stream.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeStream::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DescribeStream::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`DescribeStreamOutput`](crate::output::DescribeStreamOutput) with field(s):
    ///   - [`stream_description(Option<StreamDescription>)`](crate::output::DescribeStreamOutput::stream_description): <p>The current status of the stream, the stream Amazon Resource Name (ARN), an array of shard objects that comprise the stream, and whether there are more shards available.</p>
    /// - On failure, responds with [`SdkError<DescribeStreamError>`](crate::error::DescribeStreamError)
    pub fn describe_stream(&self) -> crate::client::fluent_builders::DescribeStream {
        crate::client::fluent_builders::DescribeStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStreamConsumer`](crate::client::fluent_builders::DescribeStreamConsumer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::set_stream_arn): <p>The ARN of the Kinesis data stream that the consumer is registered with. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    ///   - [`consumer_name(impl Into<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::consumer_name) / [`set_consumer_name(Option<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::set_consumer_name): <p>The name that you gave to the consumer.</p>
    ///   - [`consumer_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::consumer_arn) / [`set_consumer_arn(Option<String>)`](crate::client::fluent_builders::DescribeStreamConsumer::set_consumer_arn): <p>The ARN returned by Kinesis Data Streams when you registered the consumer.</p>
    /// - On success, responds with [`DescribeStreamConsumerOutput`](crate::output::DescribeStreamConsumerOutput) with field(s):
    ///   - [`consumer_description(Option<ConsumerDescription>)`](crate::output::DescribeStreamConsumerOutput::consumer_description): <p>An object that represents the details of the consumer.</p>
    /// - On failure, responds with [`SdkError<DescribeStreamConsumerError>`](crate::error::DescribeStreamConsumerError)
    pub fn describe_stream_consumer(
        &self,
    ) -> crate::client::fluent_builders::DescribeStreamConsumer {
        crate::client::fluent_builders::DescribeStreamConsumer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStreamSummary`](crate::client::fluent_builders::DescribeStreamSummary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::DescribeStreamSummary::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::DescribeStreamSummary::set_stream_name): <p>The name of the stream to describe.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeStreamSummary::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DescribeStreamSummary::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`DescribeStreamSummaryOutput`](crate::output::DescribeStreamSummaryOutput) with field(s):
    ///   - [`stream_description_summary(Option<StreamDescriptionSummary>)`](crate::output::DescribeStreamSummaryOutput::stream_description_summary): <p>A <code>StreamDescriptionSummary</code> containing information about the stream.</p>
    /// - On failure, responds with [`SdkError<DescribeStreamSummaryError>`](crate::error::DescribeStreamSummaryError)
    pub fn describe_stream_summary(&self) -> crate::client::fluent_builders::DescribeStreamSummary {
        crate::client::fluent_builders::DescribeStreamSummary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableEnhancedMonitoring`](crate::client::fluent_builders::DisableEnhancedMonitoring) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::set_stream_name): <p>The name of the Kinesis data stream for which to disable enhanced monitoring.</p>
    ///   - [`shard_level_metrics(Vec<MetricsName>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::shard_level_metrics) / [`set_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::set_shard_level_metrics): <p>List of shard-level metrics to disable.</p>  <p>The following are the valid shard-level metrics. The value "<code>ALL</code>" disables every metric.</p>  <ul>   <li> <p> <code>IncomingBytes</code> </p> </li>   <li> <p> <code>IncomingRecords</code> </p> </li>   <li> <p> <code>OutgoingBytes</code> </p> </li>   <li> <p> <code>OutgoingRecords</code> </p> </li>   <li> <p> <code>WriteProvisionedThroughputExceeded</code> </p> </li>   <li> <p> <code>ReadProvisionedThroughputExceeded</code> </p> </li>   <li> <p> <code>IteratorAgeMilliseconds</code> </p> </li>   <li> <p> <code>ALL</code> </p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html">Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DisableEnhancedMonitoring::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`DisableEnhancedMonitoringOutput`](crate::output::DisableEnhancedMonitoringOutput) with field(s):
    ///   - [`stream_name(Option<String>)`](crate::output::DisableEnhancedMonitoringOutput::stream_name): <p>The name of the Kinesis data stream.</p>
    ///   - [`current_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::output::DisableEnhancedMonitoringOutput::current_shard_level_metrics): <p>Represents the current state of the metrics that are in the enhanced state before the operation.</p>
    ///   - [`desired_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::output::DisableEnhancedMonitoringOutput::desired_shard_level_metrics): <p>Represents the list of all the metrics that would be in the enhanced state after the operation.</p>
    ///   - [`stream_arn(Option<String>)`](crate::output::DisableEnhancedMonitoringOutput::stream_arn): <p>The ARN of the stream.</p>
    /// - On failure, responds with [`SdkError<DisableEnhancedMonitoringError>`](crate::error::DisableEnhancedMonitoringError)
    pub fn disable_enhanced_monitoring(
        &self,
    ) -> crate::client::fluent_builders::DisableEnhancedMonitoring {
        crate::client::fluent_builders::DisableEnhancedMonitoring::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableEnhancedMonitoring`](crate::client::fluent_builders::EnableEnhancedMonitoring) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::set_stream_name): <p>The name of the stream for which to enable enhanced monitoring.</p>
    ///   - [`shard_level_metrics(Vec<MetricsName>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::shard_level_metrics) / [`set_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::set_shard_level_metrics): <p>List of shard-level metrics to enable.</p>  <p>The following are the valid shard-level metrics. The value "<code>ALL</code>" enables every metric.</p>  <ul>   <li> <p> <code>IncomingBytes</code> </p> </li>   <li> <p> <code>IncomingRecords</code> </p> </li>   <li> <p> <code>OutgoingBytes</code> </p> </li>   <li> <p> <code>OutgoingRecords</code> </p> </li>   <li> <p> <code>WriteProvisionedThroughputExceeded</code> </p> </li>   <li> <p> <code>ReadProvisionedThroughputExceeded</code> </p> </li>   <li> <p> <code>IteratorAgeMilliseconds</code> </p> </li>   <li> <p> <code>ALL</code> </p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html">Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::EnableEnhancedMonitoring::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`EnableEnhancedMonitoringOutput`](crate::output::EnableEnhancedMonitoringOutput) with field(s):
    ///   - [`stream_name(Option<String>)`](crate::output::EnableEnhancedMonitoringOutput::stream_name): <p>The name of the Kinesis data stream.</p>
    ///   - [`current_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::output::EnableEnhancedMonitoringOutput::current_shard_level_metrics): <p>Represents the current state of the metrics that are in the enhanced state before the operation.</p>
    ///   - [`desired_shard_level_metrics(Option<Vec<MetricsName>>)`](crate::output::EnableEnhancedMonitoringOutput::desired_shard_level_metrics): <p>Represents the list of all the metrics that would be in the enhanced state after the operation.</p>
    ///   - [`stream_arn(Option<String>)`](crate::output::EnableEnhancedMonitoringOutput::stream_arn): <p>The ARN of the stream.</p>
    /// - On failure, responds with [`SdkError<EnableEnhancedMonitoringError>`](crate::error::EnableEnhancedMonitoringError)
    pub fn enable_enhanced_monitoring(
        &self,
    ) -> crate::client::fluent_builders::EnableEnhancedMonitoring {
        crate::client::fluent_builders::EnableEnhancedMonitoring::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRecords`](crate::client::fluent_builders::GetRecords) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`shard_iterator(impl Into<String>)`](crate::client::fluent_builders::GetRecords::shard_iterator) / [`set_shard_iterator(Option<String>)`](crate::client::fluent_builders::GetRecords::set_shard_iterator): <p>The position in the shard from which you want to start sequentially reading data records. A shard iterator specifies this position using the sequence number of a data record in the shard.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::GetRecords::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::GetRecords::set_limit): <p>The maximum number of records to return. Specify a value of up to 10,000. If you specify a value that is greater than 10,000, <code>GetRecords</code> throws <code>InvalidArgumentException</code>. The default value is 10,000.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::GetRecords::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::GetRecords::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`GetRecordsOutput`](crate::output::GetRecordsOutput) with field(s):
    ///   - [`records(Option<Vec<Record>>)`](crate::output::GetRecordsOutput::records): <p>The data records retrieved from the shard.</p>
    ///   - [`next_shard_iterator(Option<String>)`](crate::output::GetRecordsOutput::next_shard_iterator): <p>The next position in the shard from which to start sequentially reading data records. If set to <code>null</code>, the shard has been closed and the requested iterator does not return any more data. </p>
    ///   - [`millis_behind_latest(Option<i64>)`](crate::output::GetRecordsOutput::millis_behind_latest): <p>The number of milliseconds the <code>GetRecords</code> response is from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates that record processing is caught up, and there are no new records to process at this moment.</p>
    ///   - [`child_shards(Option<Vec<ChildShard>>)`](crate::output::GetRecordsOutput::child_shards): <p>The list of the current shard's child shards, returned in the <code>GetRecords</code> API's response only when the end of the current shard is reached.</p>
    /// - On failure, responds with [`SdkError<GetRecordsError>`](crate::error::GetRecordsError)
    pub fn get_records(&self) -> crate::client::fluent_builders::GetRecords {
        crate::client::fluent_builders::GetRecords::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetShardIterator`](crate::client::fluent_builders::GetShardIterator) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::GetShardIterator::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::GetShardIterator::set_stream_name): <p>The name of the Amazon Kinesis data stream.</p>
    ///   - [`shard_id(impl Into<String>)`](crate::client::fluent_builders::GetShardIterator::shard_id) / [`set_shard_id(Option<String>)`](crate::client::fluent_builders::GetShardIterator::set_shard_id): <p>The shard ID of the Kinesis Data Streams shard to get the iterator for.</p>
    ///   - [`shard_iterator_type(ShardIteratorType)`](crate::client::fluent_builders::GetShardIterator::shard_iterator_type) / [`set_shard_iterator_type(Option<ShardIteratorType>)`](crate::client::fluent_builders::GetShardIterator::set_shard_iterator_type): <p>Determines how the shard iterator is used to start reading data records from the shard.</p>  <p>The following are the valid Amazon Kinesis shard iterator types:</p>  <ul>   <li> <p>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific sequence number, provided in the value <code>StartingSequenceNumber</code>.</p> </li>   <li> <p>AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number, provided in the value <code>StartingSequenceNumber</code>.</p> </li>   <li> <p>AT_TIMESTAMP - Start reading from the position denoted by a specific time stamp, provided in the value <code>Timestamp</code>.</p> </li>   <li> <p>TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.</p> </li>   <li> <p>LATEST - Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard.</p> </li>  </ul>
    ///   - [`starting_sequence_number(impl Into<String>)`](crate::client::fluent_builders::GetShardIterator::starting_sequence_number) / [`set_starting_sequence_number(Option<String>)`](crate::client::fluent_builders::GetShardIterator::set_starting_sequence_number): <p>The sequence number of the data record in the shard from which to start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.</p>
    ///   - [`timestamp(DateTime)`](crate::client::fluent_builders::GetShardIterator::timestamp) / [`set_timestamp(Option<DateTime>)`](crate::client::fluent_builders::GetShardIterator::set_timestamp): <p>The time stamp of the data record from which to start reading. Used with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds. For example, <code>2016-04-04T19:58:46.480-00:00</code> or <code>1459799926.480</code>. If a record with this exact time stamp does not exist, the iterator returned is for the next (later) record. If the time stamp is older than the current trim horizon, the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON).</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::GetShardIterator::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::GetShardIterator::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`GetShardIteratorOutput`](crate::output::GetShardIteratorOutput) with field(s):
    ///   - [`shard_iterator(Option<String>)`](crate::output::GetShardIteratorOutput::shard_iterator): <p>The position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard.</p>
    /// - On failure, responds with [`SdkError<GetShardIteratorError>`](crate::error::GetShardIteratorError)
    pub fn get_shard_iterator(&self) -> crate::client::fluent_builders::GetShardIterator {
        crate::client::fluent_builders::GetShardIterator::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`IncreaseStreamRetentionPeriod`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::set_stream_name): <p>The name of the stream to modify.</p>
    ///   - [`retention_period_hours(i32)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::retention_period_hours) / [`set_retention_period_hours(Option<i32>)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::set_retention_period_hours): <p>The new retention period of the stream, in hours. Must be more than the current retention period.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::IncreaseStreamRetentionPeriod::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`IncreaseStreamRetentionPeriodOutput`](crate::output::IncreaseStreamRetentionPeriodOutput)

    /// - On failure, responds with [`SdkError<IncreaseStreamRetentionPeriodError>`](crate::error::IncreaseStreamRetentionPeriodError)
    pub fn increase_stream_retention_period(
        &self,
    ) -> crate::client::fluent_builders::IncreaseStreamRetentionPeriod {
        crate::client::fluent_builders::IncreaseStreamRetentionPeriod::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListShards`](crate::client::fluent_builders::ListShards) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::ListShards::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::ListShards::set_stream_name): <p>The name of the data stream whose shards you want to list. </p>  <p>You cannot specify this parameter if you specify the <code>NextToken</code> parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListShards::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListShards::set_next_token): <p>When the number of shards in the data stream is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of shards in the data stream, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListShards</code> to list the next set of shards.</p>  <p>Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if you specify <code>NextToken</code> because the latter unambiguously identifies the stream.</p>  <p>You can optionally specify a value for the <code>MaxResults</code> parameter when you specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value that is less than the number of shards that the operation returns if you don't specify <code>MaxResults</code>, the response will contain a new <code>NextToken</code> value. You can use the new <code>NextToken</code> value in a subsequent call to the <code>ListShards</code> operation.</p> <important>   <p>Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code> in the response to a call to <code>ListShards</code>, you have 300 seconds to use that value. If you specify an expired token in a call to <code>ListShards</code>, you get <code>ExpiredNextTokenException</code>.</p>  </important>
    ///   - [`exclusive_start_shard_id(impl Into<String>)`](crate::client::fluent_builders::ListShards::exclusive_start_shard_id) / [`set_exclusive_start_shard_id(Option<String>)`](crate::client::fluent_builders::ListShards::set_exclusive_start_shard_id): <p>Specify this parameter to indicate that you want to list the shards starting with the shard whose ID immediately follows <code>ExclusiveStartShardId</code>.</p>  <p>If you don't specify this parameter, the default behavior is for <code>ListShards</code> to list the shards starting with the first one in the stream.</p>  <p>You cannot specify this parameter if you specify <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListShards::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListShards::set_max_results): <p>The maximum number of shards to return in a single call to <code>ListShards</code>. The maximum number of shards to return in a single call. The default value is 1000. If you specify a value greater than 1000, at most 1000 results are returned. </p>  <p>When the number of shards to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListShards</code> to list the next set of shards.</p>
    ///   - [`stream_creation_timestamp(DateTime)`](crate::client::fluent_builders::ListShards::stream_creation_timestamp) / [`set_stream_creation_timestamp(Option<DateTime>)`](crate::client::fluent_builders::ListShards::set_stream_creation_timestamp): <p>Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the shards for.</p>  <p>You cannot specify this parameter if you specify the <code>NextToken</code> parameter.</p>
    ///   - [`shard_filter(ShardFilter)`](crate::client::fluent_builders::ListShards::shard_filter) / [`set_shard_filter(Option<ShardFilter>)`](crate::client::fluent_builders::ListShards::set_shard_filter): <p>Enables you to filter out the response of the <code>ListShards</code> API. You can only specify one filter at a time. </p>  <p>If you use the <code>ShardFilter</code> parameter when invoking the ListShards API, the <code>Type</code> is the required property and must be specified. If you specify the <code>AT_TRIM_HORIZON</code>, <code>FROM_TRIM_HORIZON</code>, or <code>AT_LATEST</code> types, you do not need to specify either the <code>ShardId</code> or the <code>Timestamp</code> optional properties. </p>  <p>If you specify the <code>AFTER_SHARD_ID</code> type, you must also provide the value for the optional <code>ShardId</code> property. The <code>ShardId</code> property is identical in fuctionality to the <code>ExclusiveStartShardId</code> parameter of the <code>ListShards</code> API. When <code>ShardId</code> property is specified, the response includes the shards starting with the shard whose ID immediately follows the <code>ShardId</code> that you provided. </p>  <p>If you specify the <code>AT_TIMESTAMP</code> or <code>FROM_TIMESTAMP_ID</code> type, you must also provide the value for the optional <code>Timestamp</code> property. If you specify the AT_TIMESTAMP type, then all shards that were open at the provided timestamp are returned. If you specify the FROM_TIMESTAMP type, then all shards starting from the provided timestamp to TIP are returned. </p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::ListShards::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::ListShards::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`ListShardsOutput`](crate::output::ListShardsOutput) with field(s):
    ///   - [`shards(Option<Vec<Shard>>)`](crate::output::ListShardsOutput::shards): <p>An array of JSON objects. Each object represents one shard and specifies the IDs of the shard, the shard's parent, and the shard that's adjacent to the shard's parent. Each object also contains the starting and ending hash keys and the starting and ending sequence numbers for the shard.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListShardsOutput::next_token): <p>When the number of shards in the data stream is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of shards in the data stream, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListShards</code> to list the next set of shards. For more information about the use of this pagination token when calling the <code>ListShards</code> operation, see <code>ListShardsInput$NextToken</code>.</p> <important>   <p>Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code> in the response to a call to <code>ListShards</code>, you have 300 seconds to use that value. If you specify an expired token in a call to <code>ListShards</code>, you get <code>ExpiredNextTokenException</code>.</p>  </important>
    /// - On failure, responds with [`SdkError<ListShardsError>`](crate::error::ListShardsError)
    pub fn list_shards(&self) -> crate::client::fluent_builders::ListShards {
        crate::client::fluent_builders::ListShards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListStreamConsumers`](crate::client::fluent_builders::ListStreamConsumers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListStreamConsumers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::ListStreamConsumers::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::ListStreamConsumers::set_stream_arn): <p>The ARN of the Kinesis data stream for which you want to list the registered consumers. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListStreamConsumers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListStreamConsumers::set_next_token): <p>When the number of consumers that are registered with the data stream is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of consumers that are registered with the data stream, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListStreamConsumers</code> to list the next set of registered consumers.</p>  <p>Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if you specify <code>NextToken</code> because the latter unambiguously identifies the stream.</p>  <p>You can optionally specify a value for the <code>MaxResults</code> parameter when you specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value that is less than the number of consumers that the operation returns if you don't specify <code>MaxResults</code>, the response will contain a new <code>NextToken</code> value. You can use the new <code>NextToken</code> value in a subsequent call to the <code>ListStreamConsumers</code> operation to list the next set of consumers.</p> <important>   <p>Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code> in the response to a call to <code>ListStreamConsumers</code>, you have 300 seconds to use that value. If you specify an expired token in a call to <code>ListStreamConsumers</code>, you get <code>ExpiredNextTokenException</code>.</p>  </important>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListStreamConsumers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListStreamConsumers::set_max_results): <p>The maximum number of consumers that you want a single call of <code>ListStreamConsumers</code> to return. The default value is 100. If you specify a value greater than 100, at most 100 results are returned. </p>
    ///   - [`stream_creation_timestamp(DateTime)`](crate::client::fluent_builders::ListStreamConsumers::stream_creation_timestamp) / [`set_stream_creation_timestamp(Option<DateTime>)`](crate::client::fluent_builders::ListStreamConsumers::set_stream_creation_timestamp): <p>Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the consumers for. </p>  <p>You can't specify this parameter if you specify the NextToken parameter. </p>
    /// - On success, responds with [`ListStreamConsumersOutput`](crate::output::ListStreamConsumersOutput) with field(s):
    ///   - [`consumers(Option<Vec<Consumer>>)`](crate::output::ListStreamConsumersOutput::consumers): <p>An array of JSON objects. Each object represents one registered consumer.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListStreamConsumersOutput::next_token): <p>When the number of consumers that are registered with the data stream is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of registered consumers, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListStreamConsumers</code> to list the next set of registered consumers. For more information about the use of this pagination token when calling the <code>ListStreamConsumers</code> operation, see <code>ListStreamConsumersInput$NextToken</code>.</p> <important>   <p>Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code> in the response to a call to <code>ListStreamConsumers</code>, you have 300 seconds to use that value. If you specify an expired token in a call to <code>ListStreamConsumers</code>, you get <code>ExpiredNextTokenException</code>.</p>  </important>
    /// - On failure, responds with [`SdkError<ListStreamConsumersError>`](crate::error::ListStreamConsumersError)
    pub fn list_stream_consumers(&self) -> crate::client::fluent_builders::ListStreamConsumers {
        crate::client::fluent_builders::ListStreamConsumers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListStreams`](crate::client::fluent_builders::ListStreams) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListStreams::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListStreams::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListStreams::set_limit): <p>The maximum number of streams to list. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.</p>
    ///   - [`exclusive_start_stream_name(impl Into<String>)`](crate::client::fluent_builders::ListStreams::exclusive_start_stream_name) / [`set_exclusive_start_stream_name(Option<String>)`](crate::client::fluent_builders::ListStreams::set_exclusive_start_stream_name): <p>The name of the stream to start the list with.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListStreams::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListStreams::set_next_token): <p></p>
    /// - On success, responds with [`ListStreamsOutput`](crate::output::ListStreamsOutput) with field(s):
    ///   - [`stream_names(Option<Vec<String>>)`](crate::output::ListStreamsOutput::stream_names): <p>The names of the streams that are associated with the Amazon Web Services account making the <code>ListStreams</code> request.</p>
    ///   - [`has_more_streams(Option<bool>)`](crate::output::ListStreamsOutput::has_more_streams): <p>If set to <code>true</code>, there are more streams available to list.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListStreamsOutput::next_token): <p></p>
    ///   - [`stream_summaries(Option<Vec<StreamSummary>>)`](crate::output::ListStreamsOutput::stream_summaries): <p></p>
    /// - On failure, responds with [`SdkError<ListStreamsError>`](crate::error::ListStreamsError)
    pub fn list_streams(&self) -> crate::client::fluent_builders::ListStreams {
        crate::client::fluent_builders::ListStreams::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForStream`](crate::client::fluent_builders::ListTagsForStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::ListTagsForStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::ListTagsForStream::set_stream_name): <p>The name of the stream.</p>
    ///   - [`exclusive_start_tag_key(impl Into<String>)`](crate::client::fluent_builders::ListTagsForStream::exclusive_start_tag_key) / [`set_exclusive_start_tag_key(Option<String>)`](crate::client::fluent_builders::ListTagsForStream::set_exclusive_start_tag_key): <p>The key to use as the starting point for the list of tags. If this parameter is set, <code>ListTagsForStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListTagsForStream::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListTagsForStream::set_limit): <p>The number of tags to return. If this number is less than the total number of tags associated with the stream, <code>HasMoreTags</code> is set to <code>true</code>. To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the response.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForStream::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForStream::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForStreamOutput::tags): <p>A list of tags associated with <code>StreamName</code>, starting with the first tag after <code>ExclusiveStartTagKey</code> and up to the specified <code>Limit</code>. </p>
    ///   - [`has_more_tags(Option<bool>)`](crate::output::ListTagsForStreamOutput::has_more_tags): <p>If set to <code>true</code>, more tags are available. To request additional tags, set <code>ExclusiveStartTagKey</code> to the key of the last tag returned.</p>
    /// - On failure, responds with [`SdkError<ListTagsForStreamError>`](crate::error::ListTagsForStreamError)
    pub fn list_tags_for_stream(&self) -> crate::client::fluent_builders::ListTagsForStream {
        crate::client::fluent_builders::ListTagsForStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`MergeShards`](crate::client::fluent_builders::MergeShards) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::MergeShards::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::MergeShards::set_stream_name): <p>The name of the stream for the merge.</p>
    ///   - [`shard_to_merge(impl Into<String>)`](crate::client::fluent_builders::MergeShards::shard_to_merge) / [`set_shard_to_merge(Option<String>)`](crate::client::fluent_builders::MergeShards::set_shard_to_merge): <p>The shard ID of the shard to combine with the adjacent shard for the merge.</p>
    ///   - [`adjacent_shard_to_merge(impl Into<String>)`](crate::client::fluent_builders::MergeShards::adjacent_shard_to_merge) / [`set_adjacent_shard_to_merge(Option<String>)`](crate::client::fluent_builders::MergeShards::set_adjacent_shard_to_merge): <p>The shard ID of the adjacent shard for the merge.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::MergeShards::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::MergeShards::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`MergeShardsOutput`](crate::output::MergeShardsOutput)

    /// - On failure, responds with [`SdkError<MergeShardsError>`](crate::error::MergeShardsError)
    pub fn merge_shards(&self) -> crate::client::fluent_builders::MergeShards {
        crate::client::fluent_builders::MergeShards::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRecord`](crate::client::fluent_builders::PutRecord) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::PutRecord::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::PutRecord::set_stream_name): <p>The name of the stream to put the data record into.</p>
    ///   - [`data(Blob)`](crate::client::fluent_builders::PutRecord::data) / [`set_data(Option<Blob>)`](crate::client::fluent_builders::PutRecord::set_data): <p>The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).</p>
    ///   - [`partition_key(impl Into<String>)`](crate::client::fluent_builders::PutRecord::partition_key) / [`set_partition_key(Option<String>)`](crate::client::fluent_builders::PutRecord::set_partition_key): <p>Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.</p>
    ///   - [`explicit_hash_key(impl Into<String>)`](crate::client::fluent_builders::PutRecord::explicit_hash_key) / [`set_explicit_hash_key(Option<String>)`](crate::client::fluent_builders::PutRecord::set_explicit_hash_key): <p>The hash value used to explicitly determine the shard the data record is assigned to by overriding the partition key hash.</p>
    ///   - [`sequence_number_for_ordering(impl Into<String>)`](crate::client::fluent_builders::PutRecord::sequence_number_for_ordering) / [`set_sequence_number_for_ordering(Option<String>)`](crate::client::fluent_builders::PutRecord::set_sequence_number_for_ordering): <p>Guarantees strictly increasing sequence numbers, for puts from the same client and to the same partition key. Usage: set the <code>SequenceNumberForOrdering</code> of record <i>n</i> to the sequence number of record <i>n-1</i> (as returned in the result when putting record <i>n-1</i>). If this parameter is not set, records are coarsely ordered based on arrival time.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::PutRecord::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::PutRecord::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`PutRecordOutput`](crate::output::PutRecordOutput) with field(s):
    ///   - [`shard_id(Option<String>)`](crate::output::PutRecordOutput::shard_id): <p>The shard ID of the shard where the data record was placed.</p>
    ///   - [`sequence_number(Option<String>)`](crate::output::PutRecordOutput::sequence_number): <p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>
    ///   - [`encryption_type(Option<EncryptionType>)`](crate::output::PutRecordOutput::encryption_type): <p>The encryption type to use on the record. This parameter can be one of the following values:</p>  <ul>   <li> <p> <code>NONE</code>: Do not encrypt the records in the stream.</p> </li>   <li> <p> <code>KMS</code>: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<PutRecordError>`](crate::error::PutRecordError)
    pub fn put_record(&self) -> crate::client::fluent_builders::PutRecord {
        crate::client::fluent_builders::PutRecord::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRecords`](crate::client::fluent_builders::PutRecords) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`records(Vec<PutRecordsRequestEntry>)`](crate::client::fluent_builders::PutRecords::records) / [`set_records(Option<Vec<PutRecordsRequestEntry>>)`](crate::client::fluent_builders::PutRecords::set_records): <p>The records associated with the request.</p>
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::PutRecords::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::PutRecords::set_stream_name): <p>The stream name associated with the request.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::PutRecords::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::PutRecords::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`PutRecordsOutput`](crate::output::PutRecordsOutput) with field(s):
    ///   - [`failed_record_count(Option<i32>)`](crate::output::PutRecordsOutput::failed_record_count): <p>The number of unsuccessfully processed records in a <code>PutRecords</code> request.</p>
    ///   - [`records(Option<Vec<PutRecordsResultEntry>>)`](crate::output::PutRecordsOutput::records): <p>An array of successfully and unsuccessfully processed record results. A record that is successfully added to a stream includes <code>SequenceNumber</code> and <code>ShardId</code> in the result. A record that fails to be added to a stream includes <code>ErrorCode</code> and <code>ErrorMessage</code> in the result.</p>
    ///   - [`encryption_type(Option<EncryptionType>)`](crate::output::PutRecordsOutput::encryption_type): <p>The encryption type used on the records. This parameter can be one of the following values:</p>  <ul>   <li> <p> <code>NONE</code>: Do not encrypt the records.</p> </li>   <li> <p> <code>KMS</code>: Use server-side encryption on the records using a customer-managed Amazon Web Services KMS key.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<PutRecordsError>`](crate::error::PutRecordsError)
    pub fn put_records(&self) -> crate::client::fluent_builders::PutRecords {
        crate::client::fluent_builders::PutRecords::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterStreamConsumer`](crate::client::fluent_builders::RegisterStreamConsumer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::RegisterStreamConsumer::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::RegisterStreamConsumer::set_stream_arn): <p>The ARN of the Kinesis data stream that you want to register the consumer with. For more info, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    ///   - [`consumer_name(impl Into<String>)`](crate::client::fluent_builders::RegisterStreamConsumer::consumer_name) / [`set_consumer_name(Option<String>)`](crate::client::fluent_builders::RegisterStreamConsumer::set_consumer_name): <p>For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.</p>
    /// - On success, responds with [`RegisterStreamConsumerOutput`](crate::output::RegisterStreamConsumerOutput) with field(s):
    ///   - [`consumer(Option<Consumer>)`](crate::output::RegisterStreamConsumerOutput::consumer): <p>An object that represents the details of the consumer you registered. When you register a consumer, it gets an ARN that is generated by Kinesis Data Streams.</p>
    /// - On failure, responds with [`SdkError<RegisterStreamConsumerError>`](crate::error::RegisterStreamConsumerError)
    pub fn register_stream_consumer(
        &self,
    ) -> crate::client::fluent_builders::RegisterStreamConsumer {
        crate::client::fluent_builders::RegisterStreamConsumer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveTagsFromStream`](crate::client::fluent_builders::RemoveTagsFromStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::RemoveTagsFromStream::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::RemoveTagsFromStream::set_stream_name): <p>The name of the stream.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::RemoveTagsFromStream::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTagsFromStream::set_tag_keys): <p>A list of tag keys. Each corresponding tag is removed from the stream.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveTagsFromStream::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::RemoveTagsFromStream::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`RemoveTagsFromStreamOutput`](crate::output::RemoveTagsFromStreamOutput)

    /// - On failure, responds with [`SdkError<RemoveTagsFromStreamError>`](crate::error::RemoveTagsFromStreamError)
    pub fn remove_tags_from_stream(&self) -> crate::client::fluent_builders::RemoveTagsFromStream {
        crate::client::fluent_builders::RemoveTagsFromStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SplitShard`](crate::client::fluent_builders::SplitShard) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::SplitShard::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::SplitShard::set_stream_name): <p>The name of the stream for the shard split.</p>
    ///   - [`shard_to_split(impl Into<String>)`](crate::client::fluent_builders::SplitShard::shard_to_split) / [`set_shard_to_split(Option<String>)`](crate::client::fluent_builders::SplitShard::set_shard_to_split): <p>The shard ID of the shard to split.</p>
    ///   - [`new_starting_hash_key(impl Into<String>)`](crate::client::fluent_builders::SplitShard::new_starting_hash_key) / [`set_new_starting_hash_key(Option<String>)`](crate::client::fluent_builders::SplitShard::set_new_starting_hash_key): <p>A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for <code>NewStartingHashKey</code> must be in the range of hash keys being mapped into the shard. The <code>NewStartingHashKey</code> hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::SplitShard::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::SplitShard::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`SplitShardOutput`](crate::output::SplitShardOutput)

    /// - On failure, responds with [`SdkError<SplitShardError>`](crate::error::SplitShardError)
    pub fn split_shard(&self) -> crate::client::fluent_builders::SplitShard {
        crate::client::fluent_builders::SplitShard::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartStreamEncryption`](crate::client::fluent_builders::StartStreamEncryption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::StartStreamEncryption::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::StartStreamEncryption::set_stream_name): <p>The name of the stream for which to start encrypting records.</p>
    ///   - [`encryption_type(EncryptionType)`](crate::client::fluent_builders::StartStreamEncryption::encryption_type) / [`set_encryption_type(Option<EncryptionType>)`](crate::client::fluent_builders::StartStreamEncryption::set_encryption_type): <p>The encryption type to use. The only valid value is <code>KMS</code>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::StartStreamEncryption::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::StartStreamEncryption::set_key_id): <p>The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias <code>aws/kinesis</code>.</p>  <ul>   <li> <p>Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p> </li>   <li> <p>Alias ARN example: <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code> </p> </li>   <li> <p>Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code> </p> </li>   <li> <p>Alias name example: <code>alias/MyAliasName</code> </p> </li>   <li> <p>Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> </p> </li>  </ul>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::StartStreamEncryption::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::StartStreamEncryption::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`StartStreamEncryptionOutput`](crate::output::StartStreamEncryptionOutput)

    /// - On failure, responds with [`SdkError<StartStreamEncryptionError>`](crate::error::StartStreamEncryptionError)
    pub fn start_stream_encryption(&self) -> crate::client::fluent_builders::StartStreamEncryption {
        crate::client::fluent_builders::StartStreamEncryption::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopStreamEncryption`](crate::client::fluent_builders::StopStreamEncryption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::StopStreamEncryption::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::StopStreamEncryption::set_stream_name): <p>The name of the stream on which to stop encrypting records.</p>
    ///   - [`encryption_type(EncryptionType)`](crate::client::fluent_builders::StopStreamEncryption::encryption_type) / [`set_encryption_type(Option<EncryptionType>)`](crate::client::fluent_builders::StopStreamEncryption::set_encryption_type): <p>The encryption type. The only valid value is <code>KMS</code>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::StopStreamEncryption::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::StopStreamEncryption::set_key_id): <p>The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias <code>aws/kinesis</code>.</p>  <ul>   <li> <p>Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p> </li>   <li> <p>Alias ARN example: <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code> </p> </li>   <li> <p>Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code> </p> </li>   <li> <p>Alias name example: <code>alias/MyAliasName</code> </p> </li>   <li> <p>Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> </p> </li>  </ul>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::StopStreamEncryption::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::StopStreamEncryption::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`StopStreamEncryptionOutput`](crate::output::StopStreamEncryptionOutput)

    /// - On failure, responds with [`SdkError<StopStreamEncryptionError>`](crate::error::StopStreamEncryptionError)
    pub fn stop_stream_encryption(&self) -> crate::client::fluent_builders::StopStreamEncryption {
        crate::client::fluent_builders::StopStreamEncryption::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateShardCount`](crate::client::fluent_builders::UpdateShardCount) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::UpdateShardCount::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::UpdateShardCount::set_stream_name): <p>The name of the stream.</p>
    ///   - [`target_shard_count(i32)`](crate::client::fluent_builders::UpdateShardCount::target_shard_count) / [`set_target_shard_count(Option<i32>)`](crate::client::fluent_builders::UpdateShardCount::set_target_shard_count): <p>The new number of shards. This value has the following default limits. By default, you cannot do the following: </p>  <ul>   <li> <p>Set this value to more than double your current shard count for a stream.</p> </li>   <li> <p>Set this value below half your current shard count for a stream.</p> </li>   <li> <p>Set this value to more than 10000 shards in a stream (the default limit for shard count per stream is 10000 per account per region), unless you request a limit increase.</p> </li>   <li> <p>Scale a stream with more than 10000 shards down unless you set this value to less than 10000 shards.</p> </li>  </ul>
    ///   - [`scaling_type(ScalingType)`](crate::client::fluent_builders::UpdateShardCount::scaling_type) / [`set_scaling_type(Option<ScalingType>)`](crate::client::fluent_builders::UpdateShardCount::set_scaling_type): <p>The scaling type. Uniform scaling creates shards of equal size.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateShardCount::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::UpdateShardCount::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`UpdateShardCountOutput`](crate::output::UpdateShardCountOutput) with field(s):
    ///   - [`stream_name(Option<String>)`](crate::output::UpdateShardCountOutput::stream_name): <p>The name of the stream.</p>
    ///   - [`current_shard_count(Option<i32>)`](crate::output::UpdateShardCountOutput::current_shard_count): <p>The current number of shards.</p>
    ///   - [`target_shard_count(Option<i32>)`](crate::output::UpdateShardCountOutput::target_shard_count): <p>The updated number of shards.</p>
    ///   - [`stream_arn(Option<String>)`](crate::output::UpdateShardCountOutput::stream_arn): <p>The ARN of the stream.</p>
    /// - On failure, responds with [`SdkError<UpdateShardCountError>`](crate::error::UpdateShardCountError)
    pub fn update_shard_count(&self) -> crate::client::fluent_builders::UpdateShardCount {
        crate::client::fluent_builders::UpdateShardCount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateStreamMode`](crate::client::fluent_builders::UpdateStreamMode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateStreamMode::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::UpdateStreamMode::set_stream_arn): <p> Specifies the ARN of the data stream whose capacity mode you want to update. </p>
    ///   - [`stream_mode_details(StreamModeDetails)`](crate::client::fluent_builders::UpdateStreamMode::stream_mode_details) / [`set_stream_mode_details(Option<StreamModeDetails>)`](crate::client::fluent_builders::UpdateStreamMode::set_stream_mode_details): <p> Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an <b>on-demand</b> capacity mode and a <b>provisioned</b> capacity mode for your data streams. </p>
    /// - On success, responds with [`UpdateStreamModeOutput`](crate::output::UpdateStreamModeOutput)

    /// - On failure, responds with [`SdkError<UpdateStreamModeError>`](crate::error::UpdateStreamModeError)
    pub fn update_stream_mode(&self) -> crate::client::fluent_builders::UpdateStreamMode {
        crate::client::fluent_builders::UpdateStreamMode::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
