// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_shard_count::_update_shard_count_output::UpdateShardCountOutputBuilder;

pub use crate::operation::update_shard_count::_update_shard_count_input::UpdateShardCountInputBuilder;

/// Fluent builder constructing a request to `UpdateShardCount`.
///
/// <p>Updates the shard count of the specified stream to the specified number of shards. This API is only supported for the data streams with the provisioned capacity mode.</p> <note>
/// <p>When invoking this API, it is recommended you use the <code>StreamARN</code> input parameter rather than the <code>StreamName</code> input parameter.</p>
/// </note>
/// <p>Updating the shard count is an asynchronous operation. Upon receiving the request, Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could take a few minutes to complete. You can continue to read and write data to your stream while its status is <code>UPDATING</code>.</p>
/// <p>To update the shard count, Kinesis Data Streams performs splits or merges on individual shards. This can cause short-lived shards to be created, in addition to the final shards. These short-lived shards count towards your total shard limit for your account in the Region.</p>
/// <p>When using this operation, we recommend that you specify a target shard count that is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling action might take longer to complete. </p>
/// <p>This operation has the following default limits. By default, you cannot do the following:</p>
/// <ul>
/// <li> <p>Scale more than ten times per rolling 24-hour period per stream</p> </li>
/// <li> <p>Scale up to more than double your current shard count for a stream</p> </li>
/// <li> <p>Scale down below half your current shard count for a stream</p> </li>
/// <li> <p>Scale up to more than 10000 shards in a stream</p> </li>
/// <li> <p>Scale a stream with more than 10000 shards down unless the result is less than 10000 shards</p> </li>
/// <li> <p>Scale up to more than the shard limit for your account</p> </li>
/// </ul>
/// <p>For the default limits for an Amazon Web Services account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an increase in the call rate limit, the shard limit for this API, or your overall shard limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits form</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateShardCountFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_shard_count::builders::UpdateShardCountInputBuilder,
}
impl UpdateShardCountFluentBuilder {
    /// Creates a new `UpdateShardCount`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_shard_count::UpdateShardCount,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_shard_count::UpdateShardCountError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_shard_count::UpdateShardCountOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_shard_count::UpdateShardCountError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the stream.</p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_name(input.into());
        self
    }
    /// <p>The name of the stream.</p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_name(input);
        self
    }
    /// <p>The new number of shards. This value has the following default limits. By default, you cannot do the following: </p>
    /// <ul>
    /// <li> <p>Set this value to more than double your current shard count for a stream.</p> </li>
    /// <li> <p>Set this value below half your current shard count for a stream.</p> </li>
    /// <li> <p>Set this value to more than 10000 shards in a stream (the default limit for shard count per stream is 10000 per account per region), unless you request a limit increase.</p> </li>
    /// <li> <p>Scale a stream with more than 10000 shards down unless you set this value to less than 10000 shards.</p> </li>
    /// </ul>
    pub fn target_shard_count(mut self, input: i32) -> Self {
        self.inner = self.inner.target_shard_count(input);
        self
    }
    /// <p>The new number of shards. This value has the following default limits. By default, you cannot do the following: </p>
    /// <ul>
    /// <li> <p>Set this value to more than double your current shard count for a stream.</p> </li>
    /// <li> <p>Set this value below half your current shard count for a stream.</p> </li>
    /// <li> <p>Set this value to more than 10000 shards in a stream (the default limit for shard count per stream is 10000 per account per region), unless you request a limit increase.</p> </li>
    /// <li> <p>Scale a stream with more than 10000 shards down unless you set this value to less than 10000 shards.</p> </li>
    /// </ul>
    pub fn set_target_shard_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_target_shard_count(input);
        self
    }
    /// <p>The scaling type. Uniform scaling creates shards of equal size.</p>
    pub fn scaling_type(mut self, input: crate::types::ScalingType) -> Self {
        self.inner = self.inner.scaling_type(input);
        self
    }
    /// <p>The scaling type. Uniform scaling creates shards of equal size.</p>
    pub fn set_scaling_type(
        mut self,
        input: std::option::Option<crate::types::ScalingType>,
    ) -> Self {
        self.inner = self.inner.set_scaling_type(input);
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_arn(input.into());
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_arn(input);
        self
    }
}
