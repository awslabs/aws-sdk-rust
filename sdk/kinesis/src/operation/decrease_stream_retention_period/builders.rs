// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::decrease_stream_retention_period::_decrease_stream_retention_period_output::DecreaseStreamRetentionPeriodOutputBuilder;

pub use crate::operation::decrease_stream_retention_period::_decrease_stream_retention_period_input::DecreaseStreamRetentionPeriodInputBuilder;

/// Fluent builder constructing a request to `DecreaseStreamRetentionPeriod`.
///
/// <p>Decreases the Kinesis data stream's retention period, which is the length of time data records are accessible after they are added to the stream. The minimum value of a stream's retention period is 24 hours.</p> <note>
/// <p>When invoking this API, it is recommended you use the <code>StreamARN</code> input parameter rather than the <code>StreamName</code> input parameter.</p>
/// </note>
/// <p>This operation may result in lost data. For example, if the stream's retention period is 48 hours and is decreased to 24 hours, any data already in the stream that is older than 24 hours is inaccessible.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DecreaseStreamRetentionPeriodFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::decrease_stream_retention_period::builders::DecreaseStreamRetentionPeriodInputBuilder
            }
impl DecreaseStreamRetentionPeriodFluentBuilder {
    /// Creates a new `DecreaseStreamRetentionPeriod`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::decrease_stream_retention_period::DecreaseStreamRetentionPeriod,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::decrease_stream_retention_period::DecreaseStreamRetentionPeriodError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::decrease_stream_retention_period::DecreaseStreamRetentionPeriodOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::decrease_stream_retention_period::DecreaseStreamRetentionPeriodError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the stream to modify.</p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_name(input.into());
        self
    }
    /// <p>The name of the stream to modify.</p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_name(input);
        self
    }
    /// <p>The new retention period of the stream, in hours. Must be less than the current retention period.</p>
    pub fn retention_period_hours(mut self, input: i32) -> Self {
        self.inner = self.inner.retention_period_hours(input);
        self
    }
    /// <p>The new retention period of the stream, in hours. Must be less than the current retention period.</p>
    pub fn set_retention_period_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_retention_period_hours(input);
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_arn(input.into());
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_arn(input);
        self
    }
}
