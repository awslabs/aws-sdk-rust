// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output for <code>PutRecord</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRecordOutput {
    /// <p>The shard ID of the shard where the data record was placed.</p>
    #[doc(hidden)]
    pub shard_id: std::option::Option<std::string::String>,
    /// <p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>
    #[doc(hidden)]
    pub sequence_number: std::option::Option<std::string::String>,
    /// <p>The encryption type to use on the record. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Do not encrypt the records in the stream.</p> </li>
    /// <li> <p> <code>KMS</code>: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub encryption_type: std::option::Option<crate::types::EncryptionType>,
    _request_id: Option<String>,
}
impl PutRecordOutput {
    /// <p>The shard ID of the shard where the data record was placed.</p>
    pub fn shard_id(&self) -> std::option::Option<&str> {
        self.shard_id.as_deref()
    }
    /// <p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>
    pub fn sequence_number(&self) -> std::option::Option<&str> {
        self.sequence_number.as_deref()
    }
    /// <p>The encryption type to use on the record. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Do not encrypt the records in the stream.</p> </li>
    /// <li> <p> <code>KMS</code>: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.</p> </li>
    /// </ul>
    pub fn encryption_type(&self) -> std::option::Option<&crate::types::EncryptionType> {
        self.encryption_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutRecordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutRecordOutput {
    /// Creates a new builder-style object to manufacture [`PutRecordOutput`](crate::operation::put_record::PutRecordOutput).
    pub fn builder() -> crate::operation::put_record::builders::PutRecordOutputBuilder {
        crate::operation::put_record::builders::PutRecordOutputBuilder::default()
    }
}

/// A builder for [`PutRecordOutput`](crate::operation::put_record::PutRecordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutRecordOutputBuilder {
    pub(crate) shard_id: std::option::Option<std::string::String>,
    pub(crate) sequence_number: std::option::Option<std::string::String>,
    pub(crate) encryption_type: std::option::Option<crate::types::EncryptionType>,
    _request_id: Option<String>,
}
impl PutRecordOutputBuilder {
    /// <p>The shard ID of the shard where the data record was placed.</p>
    pub fn shard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.shard_id = Some(input.into());
        self
    }
    /// <p>The shard ID of the shard where the data record was placed.</p>
    pub fn set_shard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.shard_id = input;
        self
    }
    /// <p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>
    pub fn sequence_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_number = Some(input.into());
        self
    }
    /// <p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>
    pub fn set_sequence_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sequence_number = input;
        self
    }
    /// <p>The encryption type to use on the record. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Do not encrypt the records in the stream.</p> </li>
    /// <li> <p> <code>KMS</code>: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.</p> </li>
    /// </ul>
    pub fn encryption_type(mut self, input: crate::types::EncryptionType) -> Self {
        self.encryption_type = Some(input);
        self
    }
    /// <p>The encryption type to use on the record. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Do not encrypt the records in the stream.</p> </li>
    /// <li> <p> <code>KMS</code>: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.</p> </li>
    /// </ul>
    pub fn set_encryption_type(
        mut self,
        input: std::option::Option<crate::types::EncryptionType>,
    ) -> Self {
        self.encryption_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutRecordOutput`](crate::operation::put_record::PutRecordOutput).
    pub fn build(self) -> crate::operation::put_record::PutRecordOutput {
        crate::operation::put_record::PutRecordOutput {
            shard_id: self.shard_id,
            sequence_number: self.sequence_number,
            encryption_type: self.encryption_type,
            _request_id: self._request_id,
        }
    }
}
