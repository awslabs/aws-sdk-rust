// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Specifies that you do not have the permissions required to perform this operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The provided iterator exceeds the maximum age allowed.</p>
    ExpiredIteratorException(crate::error::ExpiredIteratorException),
    /// <p>The pagination token passed to the operation is expired.</p>
    ExpiredNextTokenException(crate::error::ExpiredNextTokenException),
    /// <p>A specified parameter exceeds its restrictions, is not supported, or can't be used. For more information, see the returned message.</p>
    InvalidArgumentException(crate::error::InvalidArgumentException),
    /// <p>The ciphertext references a key that doesn't exist or that you don't have access to.</p>
    KmsAccessDeniedException(crate::error::KmsAccessDeniedException),
    /// <p>The request was rejected because the specified customer master key (CMK) isn't enabled.</p>
    KmsDisabledException(crate::error::KmsDisabledException),
    /// <p>The request was rejected because the state of the specified resource isn't valid for this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use of a Customer Master Key</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    KmsInvalidStateException(crate::error::KmsInvalidStateException),
    /// <p>The request was rejected because the specified entity or resource can't be found.</p>
    KmsNotFoundException(crate::error::KmsNotFoundException),
    /// <p>The Amazon Web Services access key ID needs a subscription for the service.</p>
    KmsOptInRequired(crate::error::KmsOptInRequired),
    /// <p>The request was denied due to request throttling. For more information about throttling, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    KmsThrottlingException(crate::error::KmsThrottlingException),
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The request rate for the stream is too high, or the requested data is too large for the available throughput. Reduce the frequency or size of your requests. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error Retries and Exponential Backoff in Amazon Web Services</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ProvisionedThroughputExceededException(crate::error::ProvisionedThroughputExceededException),
    /// <p>The resource is not available for this operation. For successful operation, the resource must be in the <code>ACTIVE</code> state.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The requested resource could not be found. The stream might not be specified correctly.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Specifies that you tried to invoke this API for a data stream with the on-demand capacity mode. This API is only supported for data streams with the provisioned capacity mode. </p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ExpiredIteratorException(inner) => inner.fmt(f),
            Error::ExpiredNextTokenException(inner) => inner.fmt(f),
            Error::InvalidArgumentException(inner) => inner.fmt(f),
            Error::KmsAccessDeniedException(inner) => inner.fmt(f),
            Error::KmsDisabledException(inner) => inner.fmt(f),
            Error::KmsInvalidStateException(inner) => inner.fmt(f),
            Error::KmsNotFoundException(inner) => inner.fmt(f),
            Error::KmsOptInRequired(inner) => inner.fmt(f),
            Error::KmsThrottlingException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ProvisionedThroughputExceededException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsToStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToStreamError> for Error {
    fn from(err: crate::error::AddTagsToStreamError) -> Self {
        match err {
            crate::error::AddTagsToStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AddTagsToStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::AddTagsToStreamError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::AddTagsToStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddTagsToStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AddTagsToStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateStreamError> for Error {
    fn from(err: crate::error::CreateStreamError) -> Self {
        match err {
            crate::error::CreateStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateStreamError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DecreaseStreamRetentionPeriodError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DecreaseStreamRetentionPeriodError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DecreaseStreamRetentionPeriodError> for Error {
    fn from(err: crate::error::DecreaseStreamRetentionPeriodError) -> Self {
        match err {
            crate::error::DecreaseStreamRetentionPeriodError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DecreaseStreamRetentionPeriodError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DecreaseStreamRetentionPeriodError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DecreaseStreamRetentionPeriodError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DecreaseStreamRetentionPeriodError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DecreaseStreamRetentionPeriodError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteStreamError> for Error {
    fn from(err: crate::error::DeleteStreamError) -> Self {
        match err {
            crate::error::DeleteStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeleteStreamError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterStreamConsumerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterStreamConsumerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterStreamConsumerError> for Error {
    fn from(err: crate::error::DeregisterStreamConsumerError) -> Self {
        match err {
            crate::error::DeregisterStreamConsumerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeregisterStreamConsumerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeregisterStreamConsumerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeregisterStreamConsumerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeLimitsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLimitsError> for Error {
    fn from(err: crate::error::DescribeLimitsError) -> Self {
        match err {
            crate::error::DescribeLimitsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStreamError> for Error {
    fn from(err: crate::error::DescribeStreamError) -> Self {
        match err {
            crate::error::DescribeStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStreamConsumerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStreamConsumerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStreamConsumerError> for Error {
    fn from(err: crate::error::DescribeStreamConsumerError) -> Self {
        match err {
            crate::error::DescribeStreamConsumerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeStreamConsumerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeStreamConsumerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeStreamConsumerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStreamSummaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStreamSummaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStreamSummaryError> for Error {
    fn from(err: crate::error::DescribeStreamSummaryError) -> Self {
        match err {
            crate::error::DescribeStreamSummaryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeStreamSummaryError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeStreamSummaryError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeStreamSummaryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeStreamSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableEnhancedMonitoringError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisableEnhancedMonitoringError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableEnhancedMonitoringError> for Error {
    fn from(err: crate::error::DisableEnhancedMonitoringError) -> Self {
        match err {
            crate::error::DisableEnhancedMonitoringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisableEnhancedMonitoringError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DisableEnhancedMonitoringError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DisableEnhancedMonitoringError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DisableEnhancedMonitoringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisableEnhancedMonitoringError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableEnhancedMonitoringError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EnableEnhancedMonitoringError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableEnhancedMonitoringError> for Error {
    fn from(err: crate::error::EnableEnhancedMonitoringError) -> Self {
        match err {
            crate::error::EnableEnhancedMonitoringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EnableEnhancedMonitoringError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::EnableEnhancedMonitoringError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::EnableEnhancedMonitoringError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::EnableEnhancedMonitoringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::EnableEnhancedMonitoringError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRecordsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRecordsError> for Error {
    fn from(err: crate::error::GetRecordsError) -> Self {
        match err {
            crate::error::GetRecordsError::KmsAccessDeniedException(inner) => {
                Error::KmsAccessDeniedException(inner)
            }
            crate::error::GetRecordsError::KmsDisabledException(inner) => {
                Error::KmsDisabledException(inner)
            }
            crate::error::GetRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRecordsError::KmsNotFoundException(inner) => {
                Error::KmsNotFoundException(inner)
            }
            crate::error::GetRecordsError::ExpiredIteratorException(inner) => {
                Error::ExpiredIteratorException(inner)
            }
            crate::error::GetRecordsError::KmsOptInRequired(inner) => {
                Error::KmsOptInRequired(inner)
            }
            crate::error::GetRecordsError::KmsThrottlingException(inner) => {
                Error::KmsThrottlingException(inner)
            }
            crate::error::GetRecordsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::GetRecordsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetRecordsError::KmsInvalidStateException(inner) => {
                Error::KmsInvalidStateException(inner)
            }
            crate::error::GetRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetShardIteratorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetShardIteratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetShardIteratorError> for Error {
    fn from(err: crate::error::GetShardIteratorError) -> Self {
        match err {
            crate::error::GetShardIteratorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetShardIteratorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::GetShardIteratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetShardIteratorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetShardIteratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::IncreaseStreamRetentionPeriodError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::IncreaseStreamRetentionPeriodError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::IncreaseStreamRetentionPeriodError> for Error {
    fn from(err: crate::error::IncreaseStreamRetentionPeriodError) -> Self {
        match err {
            crate::error::IncreaseStreamRetentionPeriodError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::IncreaseStreamRetentionPeriodError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::IncreaseStreamRetentionPeriodError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::IncreaseStreamRetentionPeriodError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::IncreaseStreamRetentionPeriodError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::IncreaseStreamRetentionPeriodError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListShardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListShardsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListShardsError> for Error {
    fn from(err: crate::error::ListShardsError) -> Self {
        match err {
            crate::error::ListShardsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListShardsError::ExpiredNextTokenException(inner) => {
                Error::ExpiredNextTokenException(inner)
            }
            crate::error::ListShardsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListShardsError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::ListShardsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListShardsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListShardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStreamConsumersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListStreamConsumersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListStreamConsumersError> for Error {
    fn from(err: crate::error::ListStreamConsumersError) -> Self {
        match err {
            crate::error::ListStreamConsumersError::ExpiredNextTokenException(inner) => {
                Error::ExpiredNextTokenException(inner)
            }
            crate::error::ListStreamConsumersError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListStreamConsumersError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::ListStreamConsumersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListStreamConsumersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListStreamConsumersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStreamsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListStreamsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListStreamsError> for Error {
    fn from(err: crate::error::ListStreamsError) -> Self {
        match err {
            crate::error::ListStreamsError::ExpiredNextTokenException(inner) => {
                Error::ExpiredNextTokenException(inner)
            }
            crate::error::ListStreamsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListStreamsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListStreamsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForStreamError> for Error {
    fn from(err: crate::error::ListTagsForStreamError) -> Self {
        match err {
            crate::error::ListTagsForStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListTagsForStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListTagsForStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::MergeShardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::MergeShardsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::MergeShardsError> for Error {
    fn from(err: crate::error::MergeShardsError) -> Self {
        match err {
            crate::error::MergeShardsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::MergeShardsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::MergeShardsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::MergeShardsError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::MergeShardsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::MergeShardsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::MergeShardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRecordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRecordError> for Error {
    fn from(err: crate::error::PutRecordError) -> Self {
        match err {
            crate::error::PutRecordError::KmsAccessDeniedException(inner) => {
                Error::KmsAccessDeniedException(inner)
            }
            crate::error::PutRecordError::KmsDisabledException(inner) => {
                Error::KmsDisabledException(inner)
            }
            crate::error::PutRecordError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutRecordError::KmsNotFoundException(inner) => {
                Error::KmsNotFoundException(inner)
            }
            crate::error::PutRecordError::KmsOptInRequired(inner) => Error::KmsOptInRequired(inner),
            crate::error::PutRecordError::KmsThrottlingException(inner) => {
                Error::KmsThrottlingException(inner)
            }
            crate::error::PutRecordError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::PutRecordError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::PutRecordError::KmsInvalidStateException(inner) => {
                Error::KmsInvalidStateException(inner)
            }
            crate::error::PutRecordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRecordsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRecordsError> for Error {
    fn from(err: crate::error::PutRecordsError) -> Self {
        match err {
            crate::error::PutRecordsError::KmsAccessDeniedException(inner) => {
                Error::KmsAccessDeniedException(inner)
            }
            crate::error::PutRecordsError::KmsDisabledException(inner) => {
                Error::KmsDisabledException(inner)
            }
            crate::error::PutRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutRecordsError::KmsNotFoundException(inner) => {
                Error::KmsNotFoundException(inner)
            }
            crate::error::PutRecordsError::KmsOptInRequired(inner) => {
                Error::KmsOptInRequired(inner)
            }
            crate::error::PutRecordsError::KmsThrottlingException(inner) => {
                Error::KmsThrottlingException(inner)
            }
            crate::error::PutRecordsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::PutRecordsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::PutRecordsError::KmsInvalidStateException(inner) => {
                Error::KmsInvalidStateException(inner)
            }
            crate::error::PutRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterStreamConsumerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterStreamConsumerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterStreamConsumerError> for Error {
    fn from(err: crate::error::RegisterStreamConsumerError) -> Self {
        match err {
            crate::error::RegisterStreamConsumerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::RegisterStreamConsumerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::RegisterStreamConsumerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterStreamConsumerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterStreamConsumerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromStreamError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromStreamError> for Error {
    fn from(err: crate::error::RemoveTagsFromStreamError) -> Self {
        match err {
            crate::error::RemoveTagsFromStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RemoveTagsFromStreamError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::RemoveTagsFromStreamError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::RemoveTagsFromStreamError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RemoveTagsFromStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RemoveTagsFromStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SplitShardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SplitShardError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SplitShardError> for Error {
    fn from(err: crate::error::SplitShardError) -> Self {
        match err {
            crate::error::SplitShardError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SplitShardError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SplitShardError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::SplitShardError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::SplitShardError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::SplitShardError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SplitShardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartStreamEncryptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartStreamEncryptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartStreamEncryptionError> for Error {
    fn from(err: crate::error::StartStreamEncryptionError) -> Self {
        match err {
            crate::error::StartStreamEncryptionError::KmsAccessDeniedException(inner) => {
                Error::KmsAccessDeniedException(inner)
            }
            crate::error::StartStreamEncryptionError::KmsDisabledException(inner) => {
                Error::KmsDisabledException(inner)
            }
            crate::error::StartStreamEncryptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartStreamEncryptionError::KmsNotFoundException(inner) => {
                Error::KmsNotFoundException(inner)
            }
            crate::error::StartStreamEncryptionError::KmsOptInRequired(inner) => {
                Error::KmsOptInRequired(inner)
            }
            crate::error::StartStreamEncryptionError::KmsThrottlingException(inner) => {
                Error::KmsThrottlingException(inner)
            }
            crate::error::StartStreamEncryptionError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::StartStreamEncryptionError::KmsInvalidStateException(inner) => {
                Error::KmsInvalidStateException(inner)
            }
            crate::error::StartStreamEncryptionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StartStreamEncryptionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartStreamEncryptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartStreamEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopStreamEncryptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopStreamEncryptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopStreamEncryptionError> for Error {
    fn from(err: crate::error::StopStreamEncryptionError) -> Self {
        match err {
            crate::error::StopStreamEncryptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopStreamEncryptionError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::StopStreamEncryptionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StopStreamEncryptionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StopStreamEncryptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopStreamEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateShardCountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateShardCountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateShardCountError> for Error {
    fn from(err: crate::error::UpdateShardCountError) -> Self {
        match err {
            crate::error::UpdateShardCountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateShardCountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateShardCountError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateShardCountError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdateShardCountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateShardCountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateShardCountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStreamModeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateStreamModeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateStreamModeError> for Error {
    fn from(err: crate::error::UpdateStreamModeError) -> Self {
        match err {
            crate::error::UpdateStreamModeError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateStreamModeError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdateStreamModeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateStreamModeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateStreamModeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ExpiredIteratorException(e) => e.request_id(),
            Self::ExpiredNextTokenException(e) => e.request_id(),
            Self::InvalidArgumentException(e) => e.request_id(),
            Self::KmsAccessDeniedException(e) => e.request_id(),
            Self::KmsDisabledException(e) => e.request_id(),
            Self::KmsInvalidStateException(e) => e.request_id(),
            Self::KmsNotFoundException(e) => e.request_id(),
            Self::KmsOptInRequired(e) => e.request_id(),
            Self::KmsThrottlingException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ProvisionedThroughputExceededException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
