// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(Debug)]
pub struct SubscribeToShardEventStreamUnmarshaller;

impl SubscribeToShardEventStreamUnmarshaller {
    pub fn new() -> Self {
        SubscribeToShardEventStreamUnmarshaller
    }
}
impl ::aws_smithy_eventstream::frame::UnmarshallMessage for SubscribeToShardEventStreamUnmarshaller {
    type Output = crate::types::SubscribeToShardEventStream;
    type Error = crate::types::error::SubscribeToShardEventStreamError;
    fn unmarshall(
        &self,
        message: &::aws_smithy_types::event_stream::Message,
    ) -> std::result::Result<::aws_smithy_eventstream::frame::UnmarshalledMessage<Self::Output, Self::Error>, ::aws_smithy_eventstream::error::Error>
    {
        let response_headers = ::aws_smithy_eventstream::smithy::parse_response_headers(message)?;
        match response_headers.message_type.as_str() {
            "event" => match response_headers.smithy_type.as_str() {
                "SubscribeToShardEvent" => {
                    let parsed = crate::protocol_serde::shape_subscribe_to_shard_event::de_subscribe_to_shard_event_payload(&message.payload()[..])
                        .map_err(|err| {
                        ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall SubscribeToShardEvent: {err}"))
                    })?;
                    Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                        crate::types::SubscribeToShardEventStream::SubscribeToShardEvent(parsed),
                    ))
                }
                _unknown_variant => Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                    crate::types::SubscribeToShardEventStream::Unknown,
                )),
            },
            "exception" => {
                let generic = match crate::protocol_serde::parse_event_stream_error_metadata(message.payload()) {
                    Ok(builder) => builder.build(),
                    Err(err) => {
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::unhandled(err),
                        ))
                    }
                };
                match response_headers.smithy_type.as_str() {
                    "ResourceNotFoundException" => {
                        let mut builder = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall ResourceNotFoundException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::ResourceNotFoundException(builder.build()),
                        ));
                    }
                    "ResourceInUseException" => {
                        let mut builder = crate::types::error::builders::ResourceInUseExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_resource_in_use_exception::de_resource_in_use_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall ResourceInUseException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::ResourceInUseException(builder.build()),
                        ));
                    }
                    "KMSDisabledException" => {
                        let mut builder = crate::types::error::builders::KmsDisabledExceptionBuilder::default();
                        builder =
                            crate::protocol_serde::shape_kms_disabled_exception::de_kms_disabled_exception_json_err(&message.payload()[..], builder)
                                .map_err(|err| {
                                    ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSDisabledException: {err}"))
                                })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsDisabledException(builder.build()),
                        ));
                    }
                    "KMSInvalidStateException" => {
                        let mut builder = crate::types::error::builders::KmsInvalidStateExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_kms_invalid_state_exception::de_kms_invalid_state_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSInvalidStateException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsInvalidStateException(builder.build()),
                        ));
                    }
                    "KMSAccessDeniedException" => {
                        let mut builder = crate::types::error::builders::KmsAccessDeniedExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_kms_access_denied_exception::de_kms_access_denied_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSAccessDeniedException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsAccessDeniedException(builder.build()),
                        ));
                    }
                    "KMSNotFoundException" => {
                        let mut builder = crate::types::error::builders::KmsNotFoundExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_kms_not_found_exception::de_kms_not_found_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSNotFoundException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsNotFoundException(builder.build()),
                        ));
                    }
                    "KMSOptInRequired" => {
                        let mut builder = crate::types::error::builders::KmsOptInRequiredBuilder::default();
                        builder = crate::protocol_serde::shape_kms_opt_in_required::de_kms_opt_in_required_json_err(&message.payload()[..], builder)
                            .map_err(|err| {
                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSOptInRequired: {err}"))
                            })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsOptInRequired(builder.build()),
                        ));
                    }
                    "KMSThrottlingException" => {
                        let mut builder = crate::types::error::builders::KmsThrottlingExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_kms_throttling_exception::de_kms_throttling_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall KMSThrottlingException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::KmsThrottlingException(builder.build()),
                        ));
                    }
                    "InternalFailureException" => {
                        let mut builder = crate::types::error::builders::InternalFailureExceptionBuilder::default();
                        builder = crate::protocol_serde::shape_internal_failure_exception::de_internal_failure_exception_json_err(
                            &message.payload()[..],
                            builder,
                        )
                        .map_err(|err| {
                            ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall InternalFailureException: {err}"))
                        })?;
                        builder.set_meta(Some(generic));
                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::types::error::SubscribeToShardEventStreamError::InternalFailureException(builder.build()),
                        ));
                    }
                    _ => {}
                }
                Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                    crate::types::error::SubscribeToShardEventStreamError::generic(generic),
                ))
            }
            value => {
                return Err(::aws_smithy_eventstream::error::Error::unmarshalling(format!(
                    "unrecognized :message-type: {value}"
                )));
            }
        }
    }
}
