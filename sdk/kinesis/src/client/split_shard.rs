// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SplitShard`](crate::operation::split_shard::builders::SplitShardFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_name(impl Into<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::stream_name) / [`set_stream_name(Option<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::set_stream_name): <p>The name of the stream for the shard split.</p>
    ///   - [`shard_to_split(impl Into<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::shard_to_split) / [`set_shard_to_split(Option<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::set_shard_to_split): <p>The shard ID of the shard to split.</p>
    ///   - [`new_starting_hash_key(impl Into<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::new_starting_hash_key) / [`set_new_starting_hash_key(Option<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::set_new_starting_hash_key): <p>A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for <code>NewStartingHashKey</code> must be in the range of hash keys being mapped into the shard. The <code>NewStartingHashKey</code> hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::stream_arn) / [`set_stream_arn(Option<String>)`](crate::operation::split_shard::builders::SplitShardFluentBuilder::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`SplitShardOutput`](crate::operation::split_shard::SplitShardOutput)
    /// - On failure, responds with [`SdkError<SplitShardError>`](crate::operation::split_shard::SplitShardError)
    pub fn split_shard(&self) -> crate::operation::split_shard::builders::SplitShardFluentBuilder {
        crate::operation::split_shard::builders::SplitShardFluentBuilder::new(self.handle.clone())
    }
}
