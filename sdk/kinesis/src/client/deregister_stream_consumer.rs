// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterStreamConsumer`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stream_arn(impl Into<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::stream_arn) / [`set_stream_arn(Option<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::set_stream_arn): <p>The ARN of the Kinesis data stream that the consumer is registered with. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    ///   - [`consumer_name(impl Into<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::consumer_name) / [`set_consumer_name(Option<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::set_consumer_name): <p>The name that you gave to the consumer.</p>
    ///   - [`consumer_arn(impl Into<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::consumer_arn) / [`set_consumer_arn(Option<String>)`](crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::set_consumer_arn): <p>The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.</p>
    /// - On success, responds with [`DeregisterStreamConsumerOutput`](crate::operation::deregister_stream_consumer::DeregisterStreamConsumerOutput)
    /// - On failure, responds with [`SdkError<DeregisterStreamConsumerError>`](crate::operation::deregister_stream_consumer::DeregisterStreamConsumerError)
    pub fn deregister_stream_consumer(
        &self,
    ) -> crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder
    {
        crate::operation::deregister_stream_consumer::builders::DeregisterStreamConsumerFluentBuilder::new(self.handle.clone())
    }
}
