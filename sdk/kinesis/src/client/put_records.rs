// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutRecords`](crate::client::fluent_builders::PutRecords) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`records(Vec<PutRecordsRequestEntry>)`](crate::client::fluent_builders::PutRecords::records) / [`set_records(Option<Vec<PutRecordsRequestEntry>>)`](crate::client::fluent_builders::PutRecords::set_records): <p>The records associated with the request.</p>
    ///   - [`stream_name(impl Into<String>)`](crate::client::fluent_builders::PutRecords::stream_name) / [`set_stream_name(Option<String>)`](crate::client::fluent_builders::PutRecords::set_stream_name): <p>The stream name associated with the request.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::PutRecords::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::PutRecords::set_stream_arn): <p>The ARN of the stream.</p>
    /// - On success, responds with [`PutRecordsOutput`](crate::output::PutRecordsOutput) with field(s):
    ///   - [`failed_record_count(Option<i32>)`](crate::output::PutRecordsOutput::failed_record_count): <p>The number of unsuccessfully processed records in a <code>PutRecords</code> request.</p>
    ///   - [`records(Option<Vec<PutRecordsResultEntry>>)`](crate::output::PutRecordsOutput::records): <p>An array of successfully and unsuccessfully processed record results. A record that is successfully added to a stream includes <code>SequenceNumber</code> and <code>ShardId</code> in the result. A record that fails to be added to a stream includes <code>ErrorCode</code> and <code>ErrorMessage</code> in the result.</p>
    ///   - [`encryption_type(Option<EncryptionType>)`](crate::output::PutRecordsOutput::encryption_type): <p>The encryption type used on the records. This parameter can be one of the following values:</p>  <ul>   <li> <p> <code>NONE</code>: Do not encrypt the records.</p> </li>   <li> <p> <code>KMS</code>: Use server-side encryption on the records using a customer-managed Amazon Web Services KMS key.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<PutRecordsError>`](crate::error::PutRecordsError)
    pub fn put_records(&self) -> crate::client::fluent_builders::PutRecords {
        crate::client::fluent_builders::PutRecords::new(self.handle.clone())
    }
}
