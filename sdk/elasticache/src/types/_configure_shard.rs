// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Node group (shard) configuration options when adding or removing replicas. Each node group (shard) configuration has the following members: NodeGroupId, NewReplicaCount, and PreferredAvailabilityZones. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigureShard {
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    pub node_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of replicas you want in this node group at the end of this operation. The maximum value for <code>NewReplicaCount</code> is 5. The minimum value depends upon the type of Redis replication group you are working with.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ: 1</p> </li>
    /// <li> <p>If Multi-AZ: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub new_replica_count: ::std::option::Option<i32>,
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.</p>
    pub preferred_availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    pub preferred_outpost_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfigureShard {
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    pub fn node_group_id(&self) -> ::std::option::Option<&str> {
        self.node_group_id.as_deref()
    }
    /// <p>The number of replicas you want in this node group at the end of this operation. The maximum value for <code>NewReplicaCount</code> is 5. The minimum value depends upon the type of Redis replication group you are working with.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ: 1</p> </li>
    /// <li> <p>If Multi-AZ: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn new_replica_count(&self) -> ::std::option::Option<i32> {
        self.new_replica_count
    }
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.preferred_availability_zones.is_none()`.
    pub fn preferred_availability_zones(&self) -> &[::std::string::String] {
        self.preferred_availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.preferred_outpost_arns.is_none()`.
    pub fn preferred_outpost_arns(&self) -> &[::std::string::String] {
        self.preferred_outpost_arns.as_deref().unwrap_or_default()
    }
}
impl ConfigureShard {
    /// Creates a new builder-style object to manufacture [`ConfigureShard`](crate::types::ConfigureShard).
    pub fn builder() -> crate::types::builders::ConfigureShardBuilder {
        crate::types::builders::ConfigureShardBuilder::default()
    }
}

/// A builder for [`ConfigureShard`](crate::types::ConfigureShard).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigureShardBuilder {
    pub(crate) node_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) new_replica_count: ::std::option::Option<i32>,
    pub(crate) preferred_availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) preferred_outpost_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfigureShardBuilder {
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    /// This field is required.
    pub fn node_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    pub fn set_node_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_group_id = input;
        self
    }
    /// <p>The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html">Finding a Shard's Id</a>.</p>
    pub fn get_node_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_group_id
    }
    /// <p>The number of replicas you want in this node group at the end of this operation. The maximum value for <code>NewReplicaCount</code> is 5. The minimum value depends upon the type of Redis replication group you are working with.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ: 1</p> </li>
    /// <li> <p>If Multi-AZ: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    /// This field is required.
    pub fn new_replica_count(mut self, input: i32) -> Self {
        self.new_replica_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of replicas you want in this node group at the end of this operation. The maximum value for <code>NewReplicaCount</code> is 5. The minimum value depends upon the type of Redis replication group you are working with.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ: 1</p> </li>
    /// <li> <p>If Multi-AZ: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn set_new_replica_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.new_replica_count = input;
        self
    }
    /// <p>The number of replicas you want in this node group at the end of this operation. The maximum value for <code>NewReplicaCount</code> is 5. The minimum value depends upon the type of Redis replication group you are working with.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ: 1</p> </li>
    /// <li> <p>If Multi-AZ: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn get_new_replica_count(&self) -> &::std::option::Option<i32> {
        &self.new_replica_count
    }
    /// Appends an item to `preferred_availability_zones`.
    ///
    /// To override the contents of this collection use [`set_preferred_availability_zones`](Self::set_preferred_availability_zones).
    ///
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.</p>
    pub fn preferred_availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.preferred_availability_zones.unwrap_or_default();
        v.push(input.into());
        self.preferred_availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.</p>
    pub fn set_preferred_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.preferred_availability_zones = input;
        self
    }
    /// <p>A list of <code>PreferredAvailabilityZone</code> strings that specify which availability zones the replication group's nodes are to be in. The nummber of <code>PreferredAvailabilityZone</code> values must equal the value of <code>NewReplicaCount</code> plus 1 to account for the primary node. If this member of <code>ReplicaConfiguration</code> is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.</p>
    pub fn get_preferred_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.preferred_availability_zones
    }
    /// Appends an item to `preferred_outpost_arns`.
    ///
    /// To override the contents of this collection use [`set_preferred_outpost_arns`](Self::set_preferred_outpost_arns).
    ///
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    pub fn preferred_outpost_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.preferred_outpost_arns.unwrap_or_default();
        v.push(input.into());
        self.preferred_outpost_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    pub fn set_preferred_outpost_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.preferred_outpost_arns = input;
        self
    }
    /// <p>The outpost ARNs in which the cache cluster is created.</p>
    pub fn get_preferred_outpost_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.preferred_outpost_arns
    }
    /// Consumes the builder and constructs a [`ConfigureShard`](crate::types::ConfigureShard).
    pub fn build(self) -> crate::types::ConfigureShard {
        crate::types::ConfigureShard {
            node_group_id: self.node_group_id,
            new_replica_count: self.new_replica_count,
            preferred_availability_zones: self.preferred_availability_zones,
            preferred_outpost_arns: self.preferred_outpost_arns,
        }
    }
}
