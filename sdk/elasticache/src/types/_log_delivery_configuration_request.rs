// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the destination, format and type of the logs. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LogDeliveryConfigurationRequest {
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a> or engine-log..</p>
    #[doc(hidden)]
    pub log_type: std::option::Option<crate::types::LogType>,
    /// <p>Specify either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code> as the destination type.</p>
    #[doc(hidden)]
    pub destination_type: std::option::Option<crate::types::DestinationType>,
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    #[doc(hidden)]
    pub destination_details: std::option::Option<crate::types::DestinationDetails>,
    /// <p>Specifies either JSON or TEXT</p>
    #[doc(hidden)]
    pub log_format: std::option::Option<crate::types::LogFormat>,
    /// <p>Specify if log delivery is enabled. Default <code>true</code>.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
}
impl LogDeliveryConfigurationRequest {
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a> or engine-log..</p>
    pub fn log_type(&self) -> std::option::Option<&crate::types::LogType> {
        self.log_type.as_ref()
    }
    /// <p>Specify either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code> as the destination type.</p>
    pub fn destination_type(&self) -> std::option::Option<&crate::types::DestinationType> {
        self.destination_type.as_ref()
    }
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    pub fn destination_details(&self) -> std::option::Option<&crate::types::DestinationDetails> {
        self.destination_details.as_ref()
    }
    /// <p>Specifies either JSON or TEXT</p>
    pub fn log_format(&self) -> std::option::Option<&crate::types::LogFormat> {
        self.log_format.as_ref()
    }
    /// <p>Specify if log delivery is enabled. Default <code>true</code>.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
}
impl LogDeliveryConfigurationRequest {
    /// Creates a new builder-style object to manufacture [`LogDeliveryConfigurationRequest`](crate::types::LogDeliveryConfigurationRequest).
    pub fn builder() -> crate::types::builders::LogDeliveryConfigurationRequestBuilder {
        crate::types::builders::LogDeliveryConfigurationRequestBuilder::default()
    }
}

/// A builder for [`LogDeliveryConfigurationRequest`](crate::types::LogDeliveryConfigurationRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LogDeliveryConfigurationRequestBuilder {
    pub(crate) log_type: std::option::Option<crate::types::LogType>,
    pub(crate) destination_type: std::option::Option<crate::types::DestinationType>,
    pub(crate) destination_details: std::option::Option<crate::types::DestinationDetails>,
    pub(crate) log_format: std::option::Option<crate::types::LogFormat>,
    pub(crate) enabled: std::option::Option<bool>,
}
impl LogDeliveryConfigurationRequestBuilder {
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a> or engine-log..</p>
    pub fn log_type(mut self, input: crate::types::LogType) -> Self {
        self.log_type = Some(input);
        self
    }
    /// <p>Refers to <a href="https://redis.io/commands/slowlog">slow-log</a> or engine-log..</p>
    pub fn set_log_type(mut self, input: std::option::Option<crate::types::LogType>) -> Self {
        self.log_type = input;
        self
    }
    /// <p>Specify either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code> as the destination type.</p>
    pub fn destination_type(mut self, input: crate::types::DestinationType) -> Self {
        self.destination_type = Some(input);
        self
    }
    /// <p>Specify either <code>cloudwatch-logs</code> or <code>kinesis-firehose</code> as the destination type.</p>
    pub fn set_destination_type(
        mut self,
        input: std::option::Option<crate::types::DestinationType>,
    ) -> Self {
        self.destination_type = input;
        self
    }
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    pub fn destination_details(mut self, input: crate::types::DestinationDetails) -> Self {
        self.destination_details = Some(input);
        self
    }
    /// <p>Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.</p>
    pub fn set_destination_details(
        mut self,
        input: std::option::Option<crate::types::DestinationDetails>,
    ) -> Self {
        self.destination_details = input;
        self
    }
    /// <p>Specifies either JSON or TEXT</p>
    pub fn log_format(mut self, input: crate::types::LogFormat) -> Self {
        self.log_format = Some(input);
        self
    }
    /// <p>Specifies either JSON or TEXT</p>
    pub fn set_log_format(mut self, input: std::option::Option<crate::types::LogFormat>) -> Self {
        self.log_format = input;
        self
    }
    /// <p>Specify if log delivery is enabled. Default <code>true</code>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specify if log delivery is enabled. Default <code>true</code>.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`LogDeliveryConfigurationRequest`](crate::types::LogDeliveryConfigurationRequest).
    pub fn build(self) -> crate::types::LogDeliveryConfigurationRequest {
        crate::types::LogDeliveryConfigurationRequest {
            log_type: self.log_type,
            destination_type: self.destination_type,
            destination_details: self.destination_details,
            log_format: self.log_format,
            enabled: self.enabled,
        }
    }
}
