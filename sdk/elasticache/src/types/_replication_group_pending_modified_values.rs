// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings to be applied to the Redis replication group, either immediately or during the next maintenance window.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationGroupPendingModifiedValues {
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code> was specified), or during the next maintenance window.</p>
    pub primary_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    pub automatic_failover_status: ::std::option::Option<crate::types::PendingAutomaticFailoverStatus>,
    /// <p>The status of an online resharding operation.</p>
    pub resharding: ::std::option::Option<crate::types::ReshardingStatus>,
    /// <p>The auth token status</p>
    pub auth_token_status: ::std::option::Option<crate::types::AuthTokenUpdateStatus>,
    /// <p>The user group being modified.</p>
    pub user_groups: ::std::option::Option<crate::types::UserGroupsUpdateStatus>,
    /// <p>The log delivery configurations being modified </p>
    pub log_delivery_configurations: ::std::option::Option<::std::vec::Vec<crate::types::PendingLogDeliveryConfiguration>>,
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    pub transit_encryption_enabled: ::std::option::Option<bool>,
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    pub transit_encryption_mode: ::std::option::Option<crate::types::TransitEncryptionMode>,
    /// <p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p>
    pub cluster_mode: ::std::option::Option<crate::types::ClusterMode>,
}
impl ReplicationGroupPendingModifiedValues {
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code> was specified), or during the next maintenance window.</p>
    pub fn primary_cluster_id(&self) -> ::std::option::Option<&str> {
        self.primary_cluster_id.as_deref()
    }
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    pub fn automatic_failover_status(&self) -> ::std::option::Option<&crate::types::PendingAutomaticFailoverStatus> {
        self.automatic_failover_status.as_ref()
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn resharding(&self) -> ::std::option::Option<&crate::types::ReshardingStatus> {
        self.resharding.as_ref()
    }
    /// <p>The auth token status</p>
    pub fn auth_token_status(&self) -> ::std::option::Option<&crate::types::AuthTokenUpdateStatus> {
        self.auth_token_status.as_ref()
    }
    /// <p>The user group being modified.</p>
    pub fn user_groups(&self) -> ::std::option::Option<&crate::types::UserGroupsUpdateStatus> {
        self.user_groups.as_ref()
    }
    /// <p>The log delivery configurations being modified </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_delivery_configurations.is_none()`.
    pub fn log_delivery_configurations(&self) -> &[crate::types::PendingLogDeliveryConfiguration] {
        self.log_delivery_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    pub fn transit_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.transit_encryption_enabled
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    pub fn transit_encryption_mode(&self) -> ::std::option::Option<&crate::types::TransitEncryptionMode> {
        self.transit_encryption_mode.as_ref()
    }
    /// <p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p>
    pub fn cluster_mode(&self) -> ::std::option::Option<&crate::types::ClusterMode> {
        self.cluster_mode.as_ref()
    }
}
impl ReplicationGroupPendingModifiedValues {
    /// Creates a new builder-style object to manufacture [`ReplicationGroupPendingModifiedValues`](crate::types::ReplicationGroupPendingModifiedValues).
    pub fn builder() -> crate::types::builders::ReplicationGroupPendingModifiedValuesBuilder {
        crate::types::builders::ReplicationGroupPendingModifiedValuesBuilder::default()
    }
}

/// A builder for [`ReplicationGroupPendingModifiedValues`](crate::types::ReplicationGroupPendingModifiedValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicationGroupPendingModifiedValuesBuilder {
    pub(crate) primary_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) automatic_failover_status: ::std::option::Option<crate::types::PendingAutomaticFailoverStatus>,
    pub(crate) resharding: ::std::option::Option<crate::types::ReshardingStatus>,
    pub(crate) auth_token_status: ::std::option::Option<crate::types::AuthTokenUpdateStatus>,
    pub(crate) user_groups: ::std::option::Option<crate::types::UserGroupsUpdateStatus>,
    pub(crate) log_delivery_configurations: ::std::option::Option<::std::vec::Vec<crate::types::PendingLogDeliveryConfiguration>>,
    pub(crate) transit_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) transit_encryption_mode: ::std::option::Option<crate::types::TransitEncryptionMode>,
    pub(crate) cluster_mode: ::std::option::Option<crate::types::ClusterMode>,
}
impl ReplicationGroupPendingModifiedValuesBuilder {
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code> was specified), or during the next maintenance window.</p>
    pub fn primary_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code> was specified), or during the next maintenance window.</p>
    pub fn set_primary_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_cluster_id = input;
        self
    }
    /// <p>The primary cluster ID that is applied immediately (if <code>--apply-immediately</code> was specified), or during the next maintenance window.</p>
    pub fn get_primary_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_cluster_id
    }
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    pub fn automatic_failover_status(mut self, input: crate::types::PendingAutomaticFailoverStatus) -> Self {
        self.automatic_failover_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    pub fn set_automatic_failover_status(mut self, input: ::std::option::Option<crate::types::PendingAutomaticFailoverStatus>) -> Self {
        self.automatic_failover_status = input;
        self
    }
    /// <p>Indicates the status of automatic failover for this Redis replication group.</p>
    pub fn get_automatic_failover_status(&self) -> &::std::option::Option<crate::types::PendingAutomaticFailoverStatus> {
        &self.automatic_failover_status
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn resharding(mut self, input: crate::types::ReshardingStatus) -> Self {
        self.resharding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn set_resharding(mut self, input: ::std::option::Option<crate::types::ReshardingStatus>) -> Self {
        self.resharding = input;
        self
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn get_resharding(&self) -> &::std::option::Option<crate::types::ReshardingStatus> {
        &self.resharding
    }
    /// <p>The auth token status</p>
    pub fn auth_token_status(mut self, input: crate::types::AuthTokenUpdateStatus) -> Self {
        self.auth_token_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The auth token status</p>
    pub fn set_auth_token_status(mut self, input: ::std::option::Option<crate::types::AuthTokenUpdateStatus>) -> Self {
        self.auth_token_status = input;
        self
    }
    /// <p>The auth token status</p>
    pub fn get_auth_token_status(&self) -> &::std::option::Option<crate::types::AuthTokenUpdateStatus> {
        &self.auth_token_status
    }
    /// <p>The user group being modified.</p>
    pub fn user_groups(mut self, input: crate::types::UserGroupsUpdateStatus) -> Self {
        self.user_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user group being modified.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<crate::types::UserGroupsUpdateStatus>) -> Self {
        self.user_groups = input;
        self
    }
    /// <p>The user group being modified.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<crate::types::UserGroupsUpdateStatus> {
        &self.user_groups
    }
    /// Appends an item to `log_delivery_configurations`.
    ///
    /// To override the contents of this collection use [`set_log_delivery_configurations`](Self::set_log_delivery_configurations).
    ///
    /// <p>The log delivery configurations being modified </p>
    pub fn log_delivery_configurations(mut self, input: crate::types::PendingLogDeliveryConfiguration) -> Self {
        let mut v = self.log_delivery_configurations.unwrap_or_default();
        v.push(input);
        self.log_delivery_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The log delivery configurations being modified </p>
    pub fn set_log_delivery_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PendingLogDeliveryConfiguration>>,
    ) -> Self {
        self.log_delivery_configurations = input;
        self
    }
    /// <p>The log delivery configurations being modified </p>
    pub fn get_log_delivery_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PendingLogDeliveryConfiguration>> {
        &self.log_delivery_configurations
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    pub fn transit_encryption_enabled(mut self, input: bool) -> Self {
        self.transit_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    pub fn set_transit_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.transit_encryption_enabled = input;
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    pub fn get_transit_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.transit_encryption_enabled
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    pub fn transit_encryption_mode(mut self, input: crate::types::TransitEncryptionMode) -> Self {
        self.transit_encryption_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    pub fn set_transit_encryption_mode(mut self, input: ::std::option::Option<crate::types::TransitEncryptionMode>) -> Self {
        self.transit_encryption_mode = input;
        self
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    pub fn get_transit_encryption_mode(&self) -> &::std::option::Option<crate::types::TransitEncryptionMode> {
        &self.transit_encryption_mode
    }
    /// <p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p>
    pub fn cluster_mode(mut self, input: crate::types::ClusterMode) -> Self {
        self.cluster_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p>
    pub fn set_cluster_mode(mut self, input: ::std::option::Option<crate::types::ClusterMode>) -> Self {
        self.cluster_mode = input;
        self
    }
    /// <p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p>
    pub fn get_cluster_mode(&self) -> &::std::option::Option<crate::types::ClusterMode> {
        &self.cluster_mode
    }
    /// Consumes the builder and constructs a [`ReplicationGroupPendingModifiedValues`](crate::types::ReplicationGroupPendingModifiedValues).
    pub fn build(self) -> crate::types::ReplicationGroupPendingModifiedValues {
        crate::types::ReplicationGroupPendingModifiedValues {
            primary_cluster_id: self.primary_cluster_id,
            automatic_failover_status: self.automatic_failover_status,
            resharding: self.resharding,
            auth_token_status: self.auth_token_status,
            user_groups: self.user_groups,
            log_delivery_configurations: self.log_delivery_configurations,
            transit_encryption_enabled: self.transit_encryption_enabled,
            transit_encryption_mode: self.transit_encryption_mode,
            cluster_mode: self.cluster_mode,
        }
    }
}
