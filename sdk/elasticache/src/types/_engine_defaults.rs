// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>DescribeEngineDefaultParameters</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EngineDefaults {
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    /// <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.0</code> | <code>redis6.x</code> | <code>redis7</code> </p>
    pub cache_parameter_group_family: ::std::option::Option<::std::string::String>,
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Contains a list of engine default parameters.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    pub cache_node_type_specific_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CacheNodeTypeSpecificParameter>>,
}
impl EngineDefaults {
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    /// <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.0</code> | <code>redis6.x</code> | <code>redis7</code> </p>
    pub fn cache_parameter_group_family(&self) -> ::std::option::Option<&str> {
        self.cache_parameter_group_family.as_deref()
    }
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Contains a list of engine default parameters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::Parameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_node_type_specific_parameters.is_none()`.
    pub fn cache_node_type_specific_parameters(&self) -> &[crate::types::CacheNodeTypeSpecificParameter] {
        self.cache_node_type_specific_parameters.as_deref().unwrap_or_default()
    }
}
impl EngineDefaults {
    /// Creates a new builder-style object to manufacture [`EngineDefaults`](crate::types::EngineDefaults).
    pub fn builder() -> crate::types::builders::EngineDefaultsBuilder {
        crate::types::builders::EngineDefaultsBuilder::default()
    }
}

/// A builder for [`EngineDefaults`](crate::types::EngineDefaults).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EngineDefaultsBuilder {
    pub(crate) cache_parameter_group_family: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    pub(crate) cache_node_type_specific_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CacheNodeTypeSpecificParameter>>,
}
impl EngineDefaultsBuilder {
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    /// <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.0</code> | <code>redis6.x</code> | <code>redis7</code> </p>
    pub fn cache_parameter_group_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_parameter_group_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    /// <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.0</code> | <code>redis6.x</code> | <code>redis7</code> </p>
    pub fn set_cache_parameter_group_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_parameter_group_family = input;
        self
    }
    /// <p>Specifies the name of the cache parameter group family to which the engine default parameters apply.</p>
    /// <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.0</code> | <code>redis6.x</code> | <code>redis7</code> </p>
    pub fn get_cache_parameter_group_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_parameter_group_family
    }
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Provides an identifier to allow retrieval of paginated results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Contains a list of engine default parameters.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of engine default parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Contains a list of engine default parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        &self.parameters
    }
    /// Appends an item to `cache_node_type_specific_parameters`.
    ///
    /// To override the contents of this collection use [`set_cache_node_type_specific_parameters`](Self::set_cache_node_type_specific_parameters).
    ///
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    pub fn cache_node_type_specific_parameters(mut self, input: crate::types::CacheNodeTypeSpecificParameter) -> Self {
        let mut v = self.cache_node_type_specific_parameters.unwrap_or_default();
        v.push(input);
        self.cache_node_type_specific_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    pub fn set_cache_node_type_specific_parameters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CacheNodeTypeSpecificParameter>>,
    ) -> Self {
        self.cache_node_type_specific_parameters = input;
        self
    }
    /// <p>A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.</p>
    pub fn get_cache_node_type_specific_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheNodeTypeSpecificParameter>> {
        &self.cache_node_type_specific_parameters
    }
    /// Consumes the builder and constructs a [`EngineDefaults`](crate::types::EngineDefaults).
    pub fn build(self) -> crate::types::EngineDefaults {
        crate::types::EngineDefaults {
            cache_parameter_group_family: self.cache_parameter_group_family,
            marker: self.marker,
            parameters: self.parameters,
            cache_node_type_specific_parameters: self.cache_node_type_specific_parameters,
        }
    }
}
