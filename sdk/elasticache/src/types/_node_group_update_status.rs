// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the service update on the node group </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeGroupUpdateStatus {
    /// <p>The ID of the node group</p>
    pub node_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the service update on the node group member</p>
    pub node_group_member_update_status: ::std::option::Option<::std::vec::Vec<crate::types::NodeGroupMemberUpdateStatus>>,
}
impl NodeGroupUpdateStatus {
    /// <p>The ID of the node group</p>
    pub fn node_group_id(&self) -> ::std::option::Option<&str> {
        self.node_group_id.as_deref()
    }
    /// <p>The status of the service update on the node group member</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_group_member_update_status.is_none()`.
    pub fn node_group_member_update_status(&self) -> &[crate::types::NodeGroupMemberUpdateStatus] {
        self.node_group_member_update_status.as_deref().unwrap_or_default()
    }
}
impl NodeGroupUpdateStatus {
    /// Creates a new builder-style object to manufacture [`NodeGroupUpdateStatus`](crate::types::NodeGroupUpdateStatus).
    pub fn builder() -> crate::types::builders::NodeGroupUpdateStatusBuilder {
        crate::types::builders::NodeGroupUpdateStatusBuilder::default()
    }
}

/// A builder for [`NodeGroupUpdateStatus`](crate::types::NodeGroupUpdateStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NodeGroupUpdateStatusBuilder {
    pub(crate) node_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_group_member_update_status: ::std::option::Option<::std::vec::Vec<crate::types::NodeGroupMemberUpdateStatus>>,
}
impl NodeGroupUpdateStatusBuilder {
    /// <p>The ID of the node group</p>
    pub fn node_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the node group</p>
    pub fn set_node_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_group_id = input;
        self
    }
    /// <p>The ID of the node group</p>
    pub fn get_node_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_group_id
    }
    /// Appends an item to `node_group_member_update_status`.
    ///
    /// To override the contents of this collection use [`set_node_group_member_update_status`](Self::set_node_group_member_update_status).
    ///
    /// <p>The status of the service update on the node group member</p>
    pub fn node_group_member_update_status(mut self, input: crate::types::NodeGroupMemberUpdateStatus) -> Self {
        let mut v = self.node_group_member_update_status.unwrap_or_default();
        v.push(input);
        self.node_group_member_update_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>The status of the service update on the node group member</p>
    pub fn set_node_group_member_update_status(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::NodeGroupMemberUpdateStatus>>,
    ) -> Self {
        self.node_group_member_update_status = input;
        self
    }
    /// <p>The status of the service update on the node group member</p>
    pub fn get_node_group_member_update_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NodeGroupMemberUpdateStatus>> {
        &self.node_group_member_update_status
    }
    /// Consumes the builder and constructs a [`NodeGroupUpdateStatus`](crate::types::NodeGroupUpdateStatus).
    pub fn build(self) -> crate::types::NodeGroupUpdateStatus {
        crate::types::NodeGroupUpdateStatus {
            node_group_id: self.node_group_id,
            node_group_member_update_status: self.node_group_member_update_status,
        }
    }
}
