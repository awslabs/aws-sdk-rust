// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the authentication mode to use.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthenticationMode {
    /// <p>Specifies the authentication type. Possible options are IAM authentication, password and no password.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::InputAuthenticationType>,
    /// <p>Specifies the passwords to use for authentication if <code>Type</code> is set to <code>password</code>.</p>
    #[doc(hidden)]
    pub passwords: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AuthenticationMode {
    /// <p>Specifies the authentication type. Possible options are IAM authentication, password and no password.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::InputAuthenticationType> {
        self.r#type.as_ref()
    }
    /// <p>Specifies the passwords to use for authentication if <code>Type</code> is set to <code>password</code>.</p>
    pub fn passwords(&self) -> std::option::Option<&[std::string::String]> {
        self.passwords.as_deref()
    }
}
impl AuthenticationMode {
    /// Creates a new builder-style object to manufacture [`AuthenticationMode`](crate::types::AuthenticationMode).
    pub fn builder() -> crate::types::builders::AuthenticationModeBuilder {
        crate::types::builders::AuthenticationModeBuilder::default()
    }
}

/// A builder for [`AuthenticationMode`](crate::types::AuthenticationMode).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthenticationModeBuilder {
    pub(crate) r#type: std::option::Option<crate::types::InputAuthenticationType>,
    pub(crate) passwords: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AuthenticationModeBuilder {
    /// <p>Specifies the authentication type. Possible options are IAM authentication, password and no password.</p>
    pub fn r#type(mut self, input: crate::types::InputAuthenticationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Specifies the authentication type. Possible options are IAM authentication, password and no password.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::InputAuthenticationType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `passwords`.
    ///
    /// To override the contents of this collection use [`set_passwords`](Self::set_passwords).
    ///
    /// <p>Specifies the passwords to use for authentication if <code>Type</code> is set to <code>password</code>.</p>
    pub fn passwords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.passwords.unwrap_or_default();
        v.push(input.into());
        self.passwords = Some(v);
        self
    }
    /// <p>Specifies the passwords to use for authentication if <code>Type</code> is set to <code>password</code>.</p>
    pub fn set_passwords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.passwords = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthenticationMode`](crate::types::AuthenticationMode).
    pub fn build(self) -> crate::types::AuthenticationMode {
        crate::types::AuthenticationMode {
            r#type: self.r#type,
            passwords: self.passwords,
        }
    }
}
