// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates whether the user requires a password to authenticate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Authentication {
    /// <p>Indicates whether the user requires a password to authenticate.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::AuthenticationType>,
    /// <p>The number of passwords belonging to the user. The maximum is two.</p>
    #[doc(hidden)]
    pub password_count: std::option::Option<i32>,
}
impl Authentication {
    /// <p>Indicates whether the user requires a password to authenticate.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::AuthenticationType> {
        self.r#type.as_ref()
    }
    /// <p>The number of passwords belonging to the user. The maximum is two.</p>
    pub fn password_count(&self) -> std::option::Option<i32> {
        self.password_count
    }
}
impl Authentication {
    /// Creates a new builder-style object to manufacture [`Authentication`](crate::types::Authentication).
    pub fn builder() -> crate::types::builders::AuthenticationBuilder {
        crate::types::builders::AuthenticationBuilder::default()
    }
}

/// A builder for [`Authentication`](crate::types::Authentication).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthenticationBuilder {
    pub(crate) r#type: std::option::Option<crate::types::AuthenticationType>,
    pub(crate) password_count: std::option::Option<i32>,
}
impl AuthenticationBuilder {
    /// <p>Indicates whether the user requires a password to authenticate.</p>
    pub fn r#type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Indicates whether the user requires a password to authenticate.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::AuthenticationType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The number of passwords belonging to the user. The maximum is two.</p>
    pub fn password_count(mut self, input: i32) -> Self {
        self.password_count = Some(input);
        self
    }
    /// <p>The number of passwords belonging to the user. The maximum is two.</p>
    pub fn set_password_count(mut self, input: std::option::Option<i32>) -> Self {
        self.password_count = input;
        self
    }
    /// Consumes the builder and constructs a [`Authentication`](crate::types::Authentication).
    pub fn build(self) -> crate::types::Authentication {
        crate::types::Authentication {
            r#type: self.r#type,
            password_count: self.password_count,
        }
    }
}
