// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single node within a node group (shard).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeGroupMember {
    /// <p>The ID of the cluster to which the node belongs.</p>
    #[doc(hidden)]
    pub cache_cluster_id: std::option::Option<std::string::String>,
    /// <p>The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).</p>
    #[doc(hidden)]
    pub cache_node_id: std::option::Option<std::string::String>,
    /// <p>The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Redis (cluster mode disabled) clusters.</p>
    #[doc(hidden)]
    pub read_endpoint: std::option::Option<crate::types::Endpoint>,
    /// <p>The name of the Availability Zone in which the node is located.</p>
    #[doc(hidden)]
    pub preferred_availability_zone: std::option::Option<std::string::String>,
    /// <p>The outpost ARN of the node group member.</p>
    #[doc(hidden)]
    pub preferred_outpost_arn: std::option::Option<std::string::String>,
    /// <p>The role that is currently assigned to the node - <code>primary</code> or <code>replica</code>. This member is only applicable for Redis (cluster mode disabled) replication groups.</p>
    #[doc(hidden)]
    pub current_role: std::option::Option<std::string::String>,
}
impl NodeGroupMember {
    /// <p>The ID of the cluster to which the node belongs.</p>
    pub fn cache_cluster_id(&self) -> std::option::Option<&str> {
        self.cache_cluster_id.as_deref()
    }
    /// <p>The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).</p>
    pub fn cache_node_id(&self) -> std::option::Option<&str> {
        self.cache_node_id.as_deref()
    }
    /// <p>The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Redis (cluster mode disabled) clusters.</p>
    pub fn read_endpoint(&self) -> std::option::Option<&crate::types::Endpoint> {
        self.read_endpoint.as_ref()
    }
    /// <p>The name of the Availability Zone in which the node is located.</p>
    pub fn preferred_availability_zone(&self) -> std::option::Option<&str> {
        self.preferred_availability_zone.as_deref()
    }
    /// <p>The outpost ARN of the node group member.</p>
    pub fn preferred_outpost_arn(&self) -> std::option::Option<&str> {
        self.preferred_outpost_arn.as_deref()
    }
    /// <p>The role that is currently assigned to the node - <code>primary</code> or <code>replica</code>. This member is only applicable for Redis (cluster mode disabled) replication groups.</p>
    pub fn current_role(&self) -> std::option::Option<&str> {
        self.current_role.as_deref()
    }
}
impl NodeGroupMember {
    /// Creates a new builder-style object to manufacture [`NodeGroupMember`](crate::types::NodeGroupMember).
    pub fn builder() -> crate::types::builders::NodeGroupMemberBuilder {
        crate::types::builders::NodeGroupMemberBuilder::default()
    }
}

/// A builder for [`NodeGroupMember`](crate::types::NodeGroupMember).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeGroupMemberBuilder {
    pub(crate) cache_cluster_id: std::option::Option<std::string::String>,
    pub(crate) cache_node_id: std::option::Option<std::string::String>,
    pub(crate) read_endpoint: std::option::Option<crate::types::Endpoint>,
    pub(crate) preferred_availability_zone: std::option::Option<std::string::String>,
    pub(crate) preferred_outpost_arn: std::option::Option<std::string::String>,
    pub(crate) current_role: std::option::Option<std::string::String>,
}
impl NodeGroupMemberBuilder {
    /// <p>The ID of the cluster to which the node belongs.</p>
    pub fn cache_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cache_cluster_id = Some(input.into());
        self
    }
    /// <p>The ID of the cluster to which the node belongs.</p>
    pub fn set_cache_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cache_cluster_id = input;
        self
    }
    /// <p>The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).</p>
    pub fn cache_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cache_node_id = Some(input.into());
        self
    }
    /// <p>The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).</p>
    pub fn set_cache_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cache_node_id = input;
        self
    }
    /// <p>The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Redis (cluster mode disabled) clusters.</p>
    pub fn read_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.read_endpoint = Some(input);
        self
    }
    /// <p>The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Redis (cluster mode disabled) clusters.</p>
    pub fn set_read_endpoint(mut self, input: std::option::Option<crate::types::Endpoint>) -> Self {
        self.read_endpoint = input;
        self
    }
    /// <p>The name of the Availability Zone in which the node is located.</p>
    pub fn preferred_availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_availability_zone = Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone in which the node is located.</p>
    pub fn set_preferred_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_availability_zone = input;
        self
    }
    /// <p>The outpost ARN of the node group member.</p>
    pub fn preferred_outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_outpost_arn = Some(input.into());
        self
    }
    /// <p>The outpost ARN of the node group member.</p>
    pub fn set_preferred_outpost_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_outpost_arn = input;
        self
    }
    /// <p>The role that is currently assigned to the node - <code>primary</code> or <code>replica</code>. This member is only applicable for Redis (cluster mode disabled) replication groups.</p>
    pub fn current_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_role = Some(input.into());
        self
    }
    /// <p>The role that is currently assigned to the node - <code>primary</code> or <code>replica</code>. This member is only applicable for Redis (cluster mode disabled) replication groups.</p>
    pub fn set_current_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_role = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeGroupMember`](crate::types::NodeGroupMember).
    pub fn build(self) -> crate::types::NodeGroupMember {
        crate::types::NodeGroupMember {
            cache_cluster_id: self.cache_cluster_id,
            cache_node_id: self.cache_node_id,
            read_endpoint: self.read_endpoint,
            preferred_availability_zone: self.preferred_availability_zone,
            preferred_outpost_arn: self.preferred_outpost_arn,
            current_role: self.current_role,
        }
    }
}
