// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p>
/// <ul>
/// <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlobalReplicationGroup {
    /// <p>The name of the Global datastore</p>
    pub global_replication_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The optional description of the Global datastore</p>
    pub global_replication_group_description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Global datastore</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The cache node type of the Global datastore</p>
    pub cache_node_type: ::std::option::Option<::std::string::String>,
    /// <p>The Elasticache engine. For Redis only.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The Elasticache Redis engine version.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The replication groups that comprise the Global datastore.</p>
    pub members: ::std::option::Option<::std::vec::Vec<crate::types::GlobalReplicationGroupMember>>,
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    pub cluster_enabled: ::std::option::Option<bool>,
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    pub global_node_groups: ::std::option::Option<::std::vec::Vec<crate::types::GlobalNodeGroup>>,
    /// <p>A flag that enables using an <code>AuthToken</code> (password) when issuing Redis commands.</p>
    /// <p>Default: <code>false</code> </p>
    pub auth_token_enabled: ::std::option::Option<bool>,
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub transit_encryption_enabled: ::std::option::Option<bool>,
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    /// <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub at_rest_encryption_enabled: ::std::option::Option<bool>,
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl GlobalReplicationGroup {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(&self) -> ::std::option::Option<&str> {
        self.global_replication_group_id.as_deref()
    }
    /// <p>The optional description of the Global datastore</p>
    pub fn global_replication_group_description(&self) -> ::std::option::Option<&str> {
        self.global_replication_group_description.as_deref()
    }
    /// <p>The status of the Global datastore</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The cache node type of the Global datastore</p>
    pub fn cache_node_type(&self) -> ::std::option::Option<&str> {
        self.cache_node_type.as_deref()
    }
    /// <p>The Elasticache engine. For Redis only.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The Elasticache Redis engine version.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The replication groups that comprise the Global datastore.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.members.is_none()`.
    pub fn members(&self) -> &[crate::types::GlobalReplicationGroupMember] {
        self.members.as_deref().unwrap_or_default()
    }
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    pub fn cluster_enabled(&self) -> ::std::option::Option<bool> {
        self.cluster_enabled
    }
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_node_groups.is_none()`.
    pub fn global_node_groups(&self) -> &[crate::types::GlobalNodeGroup] {
        self.global_node_groups.as_deref().unwrap_or_default()
    }
    /// <p>A flag that enables using an <code>AuthToken</code> (password) when issuing Redis commands.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn auth_token_enabled(&self) -> ::std::option::Option<bool> {
        self.auth_token_enabled
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn transit_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.transit_encryption_enabled
    }
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    /// <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn at_rest_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.at_rest_encryption_enabled
    }
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl GlobalReplicationGroup {
    /// Creates a new builder-style object to manufacture [`GlobalReplicationGroup`](crate::types::GlobalReplicationGroup).
    pub fn builder() -> crate::types::builders::GlobalReplicationGroupBuilder {
        crate::types::builders::GlobalReplicationGroupBuilder::default()
    }
}

/// A builder for [`GlobalReplicationGroup`](crate::types::GlobalReplicationGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GlobalReplicationGroupBuilder {
    pub(crate) global_replication_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) global_replication_group_description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) cache_node_type: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) members: ::std::option::Option<::std::vec::Vec<crate::types::GlobalReplicationGroupMember>>,
    pub(crate) cluster_enabled: ::std::option::Option<bool>,
    pub(crate) global_node_groups: ::std::option::Option<::std::vec::Vec<crate::types::GlobalNodeGroup>>,
    pub(crate) auth_token_enabled: ::std::option::Option<bool>,
    pub(crate) transit_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) at_rest_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl GlobalReplicationGroupBuilder {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn set_global_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_replication_group_id = input;
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn get_global_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_replication_group_id
    }
    /// <p>The optional description of the Global datastore</p>
    pub fn global_replication_group_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_replication_group_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional description of the Global datastore</p>
    pub fn set_global_replication_group_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_replication_group_description = input;
        self
    }
    /// <p>The optional description of the Global datastore</p>
    pub fn get_global_replication_group_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_replication_group_description
    }
    /// <p>The status of the Global datastore</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the Global datastore</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Global datastore</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The cache node type of the Global datastore</p>
    pub fn cache_node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cache node type of the Global datastore</p>
    pub fn set_cache_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_node_type = input;
        self
    }
    /// <p>The cache node type of the Global datastore</p>
    pub fn get_cache_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_node_type
    }
    /// <p>The Elasticache engine. For Redis only.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Elasticache engine. For Redis only.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The Elasticache engine. For Redis only.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The Elasticache Redis engine version.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Elasticache Redis engine version.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The Elasticache Redis engine version.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// Appends an item to `members`.
    ///
    /// To override the contents of this collection use [`set_members`](Self::set_members).
    ///
    /// <p>The replication groups that comprise the Global datastore.</p>
    pub fn members(mut self, input: crate::types::GlobalReplicationGroupMember) -> Self {
        let mut v = self.members.unwrap_or_default();
        v.push(input);
        self.members = ::std::option::Option::Some(v);
        self
    }
    /// <p>The replication groups that comprise the Global datastore.</p>
    pub fn set_members(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlobalReplicationGroupMember>>) -> Self {
        self.members = input;
        self
    }
    /// <p>The replication groups that comprise the Global datastore.</p>
    pub fn get_members(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlobalReplicationGroupMember>> {
        &self.members
    }
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    pub fn cluster_enabled(mut self, input: bool) -> Self {
        self.cluster_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    pub fn set_cluster_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cluster_enabled = input;
        self
    }
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    pub fn get_cluster_enabled(&self) -> &::std::option::Option<bool> {
        &self.cluster_enabled
    }
    /// Appends an item to `global_node_groups`.
    ///
    /// To override the contents of this collection use [`set_global_node_groups`](Self::set_global_node_groups).
    ///
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    pub fn global_node_groups(mut self, input: crate::types::GlobalNodeGroup) -> Self {
        let mut v = self.global_node_groups.unwrap_or_default();
        v.push(input);
        self.global_node_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    pub fn set_global_node_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlobalNodeGroup>>) -> Self {
        self.global_node_groups = input;
        self
    }
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    pub fn get_global_node_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlobalNodeGroup>> {
        &self.global_node_groups
    }
    /// <p>A flag that enables using an <code>AuthToken</code> (password) when issuing Redis commands.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn auth_token_enabled(mut self, input: bool) -> Self {
        self.auth_token_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that enables using an <code>AuthToken</code> (password) when issuing Redis commands.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_auth_token_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auth_token_enabled = input;
        self
    }
    /// <p>A flag that enables using an <code>AuthToken</code> (password) when issuing Redis commands.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn get_auth_token_enabled(&self) -> &::std::option::Option<bool> {
        &self.auth_token_enabled
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn transit_encryption_enabled(mut self, input: bool) -> Self {
        self.transit_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn set_transit_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.transit_encryption_enabled = input;
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true.</p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn get_transit_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.transit_encryption_enabled
    }
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    /// <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn at_rest_encryption_enabled(mut self, input: bool) -> Self {
        self.at_rest_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    /// <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn set_at_rest_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.at_rest_encryption_enabled = input;
        self
    }
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    /// <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p>
    /// <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    pub fn get_at_rest_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.at_rest_encryption_enabled
    }
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`GlobalReplicationGroup`](crate::types::GlobalReplicationGroup).
    pub fn build(self) -> crate::types::GlobalReplicationGroup {
        crate::types::GlobalReplicationGroup {
            global_replication_group_id: self.global_replication_group_id,
            global_replication_group_description: self.global_replication_group_description,
            status: self.status,
            cache_node_type: self.cache_node_type,
            engine: self.engine,
            engine_version: self.engine_version,
            members: self.members,
            cluster_enabled: self.cluster_enabled,
            global_node_groups: self.global_node_groups,
            auth_token_enabled: self.auth_token_enabled,
            transit_encryption_enabled: self.transit_encryption_enabled,
            at_rest_encryption_enabled: self.at_rest_encryption_enabled,
            arn: self.arn,
        }
    }
}
