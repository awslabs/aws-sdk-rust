// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of the replication groups </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegionalConfiguration {
    /// <p>The name of the secondary cluster</p>
    pub replication_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon region where the cluster is stored</p>
    pub replication_group_region: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    pub resharding_configuration: ::std::option::Option<::std::vec::Vec<crate::types::ReshardingConfiguration>>,
}
impl RegionalConfiguration {
    /// <p>The name of the secondary cluster</p>
    pub fn replication_group_id(&self) -> ::std::option::Option<&str> {
        self.replication_group_id.as_deref()
    }
    /// <p>The Amazon region where the cluster is stored</p>
    pub fn replication_group_region(&self) -> ::std::option::Option<&str> {
        self.replication_group_region.as_deref()
    }
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resharding_configuration.is_none()`.
    pub fn resharding_configuration(&self) -> &[crate::types::ReshardingConfiguration] {
        self.resharding_configuration.as_deref().unwrap_or_default()
    }
}
impl RegionalConfiguration {
    /// Creates a new builder-style object to manufacture [`RegionalConfiguration`](crate::types::RegionalConfiguration).
    pub fn builder() -> crate::types::builders::RegionalConfigurationBuilder {
        crate::types::builders::RegionalConfigurationBuilder::default()
    }
}

/// A builder for [`RegionalConfiguration`](crate::types::RegionalConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegionalConfigurationBuilder {
    pub(crate) replication_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_group_region: ::std::option::Option<::std::string::String>,
    pub(crate) resharding_configuration: ::std::option::Option<::std::vec::Vec<crate::types::ReshardingConfiguration>>,
}
impl RegionalConfigurationBuilder {
    /// <p>The name of the secondary cluster</p>
    /// This field is required.
    pub fn replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the secondary cluster</p>
    pub fn set_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_group_id = input;
        self
    }
    /// <p>The name of the secondary cluster</p>
    pub fn get_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_group_id
    }
    /// <p>The Amazon region where the cluster is stored</p>
    /// This field is required.
    pub fn replication_group_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_group_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon region where the cluster is stored</p>
    pub fn set_replication_group_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_group_region = input;
        self
    }
    /// <p>The Amazon region where the cluster is stored</p>
    pub fn get_replication_group_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_group_region
    }
    /// Appends an item to `resharding_configuration`.
    ///
    /// To override the contents of this collection use [`set_resharding_configuration`](Self::set_resharding_configuration).
    ///
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    pub fn resharding_configuration(mut self, input: crate::types::ReshardingConfiguration) -> Self {
        let mut v = self.resharding_configuration.unwrap_or_default();
        v.push(input);
        self.resharding_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    pub fn set_resharding_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReshardingConfiguration>>) -> Self {
        self.resharding_configuration = input;
        self
    }
    /// <p>A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster. </p>
    pub fn get_resharding_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReshardingConfiguration>> {
        &self.resharding_configuration
    }
    /// Consumes the builder and constructs a [`RegionalConfiguration`](crate::types::RegionalConfiguration).
    pub fn build(self) -> crate::types::RegionalConfiguration {
        crate::types::RegionalConfiguration {
            replication_group_id: self.replication_group_id,
            replication_group_region: self.replication_group_region,
            resharding_configuration: self.resharding_configuration,
        }
    }
}
