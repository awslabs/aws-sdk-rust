// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Node group (shard) configuration options. Each node group (shard) configuration has the following: <code>Slots</code>, <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeGroupConfiguration {
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.</p>
    pub node_group_id: ::std::option::Option<::std::string::String>,
    /// <p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format <code>startkey-endkey</code>.</p>
    /// <p>Example: <code>"0-3999"</code> </p>
    pub slots: ::std::option::Option<::std::string::String>,
    /// <p>The number of read replica nodes in this node group (shard).</p>
    pub replica_count: ::std::option::Option<i32>,
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    pub primary_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of <code>ReplicaCount</code> or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    pub replica_availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The outpost ARN of the primary node.</p>
    pub primary_outpost_arn: ::std::option::Option<::std::string::String>,
    /// <p>The outpost ARN of the node replicas.</p>
    pub replica_outpost_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NodeGroupConfiguration {
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.</p>
    pub fn node_group_id(&self) -> ::std::option::Option<&str> {
        self.node_group_id.as_deref()
    }
    /// <p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format <code>startkey-endkey</code>.</p>
    /// <p>Example: <code>"0-3999"</code> </p>
    pub fn slots(&self) -> ::std::option::Option<&str> {
        self.slots.as_deref()
    }
    /// <p>The number of read replica nodes in this node group (shard).</p>
    pub fn replica_count(&self) -> ::std::option::Option<i32> {
        self.replica_count
    }
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    pub fn primary_availability_zone(&self) -> ::std::option::Option<&str> {
        self.primary_availability_zone.as_deref()
    }
    /// <p>A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of <code>ReplicaCount</code> or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replica_availability_zones.is_none()`.
    pub fn replica_availability_zones(&self) -> &[::std::string::String] {
        self.replica_availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The outpost ARN of the primary node.</p>
    pub fn primary_outpost_arn(&self) -> ::std::option::Option<&str> {
        self.primary_outpost_arn.as_deref()
    }
    /// <p>The outpost ARN of the node replicas.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replica_outpost_arns.is_none()`.
    pub fn replica_outpost_arns(&self) -> &[::std::string::String] {
        self.replica_outpost_arns.as_deref().unwrap_or_default()
    }
}
impl NodeGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`NodeGroupConfiguration`](crate::types::NodeGroupConfiguration).
    pub fn builder() -> crate::types::builders::NodeGroupConfigurationBuilder {
        crate::types::builders::NodeGroupConfigurationBuilder::default()
    }
}

/// A builder for [`NodeGroupConfiguration`](crate::types::NodeGroupConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NodeGroupConfigurationBuilder {
    pub(crate) node_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) slots: ::std::option::Option<::std::string::String>,
    pub(crate) replica_count: ::std::option::Option<i32>,
    pub(crate) primary_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) replica_availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) primary_outpost_arn: ::std::option::Option<::std::string::String>,
    pub(crate) replica_outpost_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NodeGroupConfigurationBuilder {
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.</p>
    pub fn node_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.</p>
    pub fn set_node_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_group_id = input;
        self
    }
    /// <p>Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.</p>
    pub fn get_node_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_group_id
    }
    /// <p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format <code>startkey-endkey</code>.</p>
    /// <p>Example: <code>"0-3999"</code> </p>
    pub fn slots(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slots = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format <code>startkey-endkey</code>.</p>
    /// <p>Example: <code>"0-3999"</code> </p>
    pub fn set_slots(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slots = input;
        self
    }
    /// <p>A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format <code>startkey-endkey</code>.</p>
    /// <p>Example: <code>"0-3999"</code> </p>
    pub fn get_slots(&self) -> &::std::option::Option<::std::string::String> {
        &self.slots
    }
    /// <p>The number of read replica nodes in this node group (shard).</p>
    pub fn replica_count(mut self, input: i32) -> Self {
        self.replica_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of read replica nodes in this node group (shard).</p>
    pub fn set_replica_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.replica_count = input;
        self
    }
    /// <p>The number of read replica nodes in this node group (shard).</p>
    pub fn get_replica_count(&self) -> &::std::option::Option<i32> {
        &self.replica_count
    }
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    pub fn primary_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    pub fn set_primary_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_availability_zone = input;
        self
    }
    /// <p>The Availability Zone where the primary node of this node group (shard) is launched.</p>
    pub fn get_primary_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_availability_zone
    }
    /// Appends an item to `replica_availability_zones`.
    ///
    /// To override the contents of this collection use [`set_replica_availability_zones`](Self::set_replica_availability_zones).
    ///
    /// <p>A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of <code>ReplicaCount</code> or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    pub fn replica_availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replica_availability_zones.unwrap_or_default();
        v.push(input.into());
        self.replica_availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of <code>ReplicaCount</code> or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    pub fn set_replica_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replica_availability_zones = input;
        self
    }
    /// <p>A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of <code>ReplicaCount</code> or <code>ReplicasPerNodeGroup</code> if not specified.</p>
    pub fn get_replica_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replica_availability_zones
    }
    /// <p>The outpost ARN of the primary node.</p>
    pub fn primary_outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The outpost ARN of the primary node.</p>
    pub fn set_primary_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_outpost_arn = input;
        self
    }
    /// <p>The outpost ARN of the primary node.</p>
    pub fn get_primary_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_outpost_arn
    }
    /// Appends an item to `replica_outpost_arns`.
    ///
    /// To override the contents of this collection use [`set_replica_outpost_arns`](Self::set_replica_outpost_arns).
    ///
    /// <p>The outpost ARN of the node replicas.</p>
    pub fn replica_outpost_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replica_outpost_arns.unwrap_or_default();
        v.push(input.into());
        self.replica_outpost_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The outpost ARN of the node replicas.</p>
    pub fn set_replica_outpost_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replica_outpost_arns = input;
        self
    }
    /// <p>The outpost ARN of the node replicas.</p>
    pub fn get_replica_outpost_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replica_outpost_arns
    }
    /// Consumes the builder and constructs a [`NodeGroupConfiguration`](crate::types::NodeGroupConfiguration).
    pub fn build(self) -> crate::types::NodeGroupConfiguration {
        crate::types::NodeGroupConfiguration {
            node_group_id: self.node_group_id,
            slots: self.slots,
            replica_count: self.replica_count,
            primary_availability_zone: self.primary_availability_zone,
            replica_availability_zones: self.replica_availability_zones,
            primary_outpost_arn: self.primary_outpost_arn,
            replica_outpost_arns: self.replica_outpost_arns,
        }
    }
}
