// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_configure_shard(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::ConfigureShard,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("NodeGroupId");
    if let Some(var_2) = &input.node_group_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("NewReplicaCount");
    if let Some(var_4) = &input.new_replica_count {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_6) = &input.preferred_availability_zones {
        let mut list_8 = scope_5.start_list(false, Some("PreferredAvailabilityZone"));
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7);
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("PreferredOutpostArns");
    if let Some(var_11) = &input.preferred_outpost_arns {
        let mut list_13 = scope_10.start_list(false, Some("PreferredOutpostArn"));
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    Ok(())
}
