// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_configure_shard(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::ConfigureShard,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("NodeGroupId");
    if let Some(var_2) = &input.node_group_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("NewReplicaCount");
    {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.new_replica_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_5) = &input.preferred_availability_zones {
        let mut list_7 = scope_4.start_list(false, Some("PreferredAvailabilityZone"));
        for item_6 in var_5 {
            #[allow(unused_mut)]
            let mut entry_8 = list_7.entry();
            entry_8.string(item_6);
        }
        list_7.finish();
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("PreferredOutpostArns");
    if let Some(var_10) = &input.preferred_outpost_arns {
        let mut list_12 = scope_9.start_list(false, Some("PreferredOutpostArn"));
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            entry_13.string(item_11);
        }
        list_12.finish();
    }
    Ok(())
}
