// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_cache_cluster(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CacheCluster, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CacheCluster::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CacheClusterId") /* CacheClusterId com.amazonaws.elasticache#CacheCluster$CacheClusterId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_cluster_id(var_1);
            }
            ,
            s if s.matches("ConfigurationEndpoint") /* ConfigurationEndpoint com.amazonaws.elasticache#CacheCluster$ConfigurationEndpoint */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_endpoint::de_endpoint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_configuration_endpoint(var_2);
            }
            ,
            s if s.matches("ClientDownloadLandingPage") /* ClientDownloadLandingPage com.amazonaws.elasticache#CacheCluster$ClientDownloadLandingPage */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_download_landing_page(var_3);
            }
            ,
            s if s.matches("CacheNodeType") /* CacheNodeType com.amazonaws.elasticache#CacheCluster$CacheNodeType */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_node_type(var_4);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.elasticache#CacheCluster$Engine */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_5);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.elasticache#CacheCluster$EngineVersion */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_6);
            }
            ,
            s if s.matches("CacheClusterStatus") /* CacheClusterStatus com.amazonaws.elasticache#CacheCluster$CacheClusterStatus */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_cluster_status(var_7);
            }
            ,
            s if s.matches("NumCacheNodes") /* NumCacheNodes com.amazonaws.elasticache#CacheCluster$NumCacheNodes */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticache#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_num_cache_nodes(var_8);
            }
            ,
            s if s.matches("PreferredAvailabilityZone") /* PreferredAvailabilityZone com.amazonaws.elasticache#CacheCluster$PreferredAvailabilityZone */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_availability_zone(var_9);
            }
            ,
            s if s.matches("PreferredOutpostArn") /* PreferredOutpostArn com.amazonaws.elasticache#CacheCluster$PreferredOutpostArn */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_outpost_arn(var_10);
            }
            ,
            s if s.matches("CacheClusterCreateTime") /* CacheClusterCreateTime com.amazonaws.elasticache#CacheCluster$CacheClusterCreateTime */ =>  {
                let var_11 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticache#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_cache_cluster_create_time(var_11);
            }
            ,
            s if s.matches("PreferredMaintenanceWindow") /* PreferredMaintenanceWindow com.amazonaws.elasticache#CacheCluster$PreferredMaintenanceWindow */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_maintenance_window(var_12);
            }
            ,
            s if s.matches("PendingModifiedValues") /* PendingModifiedValues com.amazonaws.elasticache#CacheCluster$PendingModifiedValues */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_pending_modified_values::de_pending_modified_values(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_modified_values(var_13);
            }
            ,
            s if s.matches("NotificationConfiguration") /* NotificationConfiguration com.amazonaws.elasticache#CacheCluster$NotificationConfiguration */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_notification_configuration::de_notification_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_notification_configuration(var_14);
            }
            ,
            s if s.matches("CacheSecurityGroups") /* CacheSecurityGroups com.amazonaws.elasticache#CacheCluster$CacheSecurityGroups */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_cache_security_group_membership_list::de_cache_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cache_security_groups(var_15);
            }
            ,
            s if s.matches("CacheParameterGroup") /* CacheParameterGroup com.amazonaws.elasticache#CacheCluster$CacheParameterGroup */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_cache_parameter_group_status::de_cache_parameter_group_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cache_parameter_group(var_16);
            }
            ,
            s if s.matches("CacheSubnetGroupName") /* CacheSubnetGroupName com.amazonaws.elasticache#CacheCluster$CacheSubnetGroupName */ =>  {
                let var_17 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_subnet_group_name(var_17);
            }
            ,
            s if s.matches("CacheNodes") /* CacheNodes com.amazonaws.elasticache#CacheCluster$CacheNodes */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_cache_node_list::de_cache_node_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cache_nodes(var_18);
            }
            ,
            s if s.matches("AutoMinorVersionUpgrade") /* AutoMinorVersionUpgrade com.amazonaws.elasticache#CacheCluster$AutoMinorVersionUpgrade */ =>  {
                let var_19 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticache#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_minor_version_upgrade(var_19);
            }
            ,
            s if s.matches("SecurityGroups") /* SecurityGroups com.amazonaws.elasticache#CacheCluster$SecurityGroups */ =>  {
                let var_20 =
                    Some(
                        crate::protocol_serde::shape_security_group_membership_list::de_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_20);
            }
            ,
            s if s.matches("ReplicationGroupId") /* ReplicationGroupId com.amazonaws.elasticache#CacheCluster$ReplicationGroupId */ =>  {
                let var_21 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replication_group_id(var_21);
            }
            ,
            s if s.matches("SnapshotRetentionLimit") /* SnapshotRetentionLimit com.amazonaws.elasticache#CacheCluster$SnapshotRetentionLimit */ =>  {
                let var_22 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticache#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_snapshot_retention_limit(var_22);
            }
            ,
            s if s.matches("SnapshotWindow") /* SnapshotWindow com.amazonaws.elasticache#CacheCluster$SnapshotWindow */ =>  {
                let var_23 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_window(var_23);
            }
            ,
            s if s.matches("AuthTokenEnabled") /* AuthTokenEnabled com.amazonaws.elasticache#CacheCluster$AuthTokenEnabled */ =>  {
                let var_24 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticache#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auth_token_enabled(var_24);
            }
            ,
            s if s.matches("AuthTokenLastModifiedDate") /* AuthTokenLastModifiedDate com.amazonaws.elasticache#CacheCluster$AuthTokenLastModifiedDate */ =>  {
                let var_25 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticache#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_auth_token_last_modified_date(var_25);
            }
            ,
            s if s.matches("TransitEncryptionEnabled") /* TransitEncryptionEnabled com.amazonaws.elasticache#CacheCluster$TransitEncryptionEnabled */ =>  {
                let var_26 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticache#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_transit_encryption_enabled(var_26);
            }
            ,
            s if s.matches("AtRestEncryptionEnabled") /* AtRestEncryptionEnabled com.amazonaws.elasticache#CacheCluster$AtRestEncryptionEnabled */ =>  {
                let var_27 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticache#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_at_rest_encryption_enabled(var_27);
            }
            ,
            s if s.matches("ARN") /* ARN com.amazonaws.elasticache#CacheCluster$ARN */ =>  {
                let var_28 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_28);
            }
            ,
            s if s.matches("ReplicationGroupLogDeliveryEnabled") /* ReplicationGroupLogDeliveryEnabled com.amazonaws.elasticache#CacheCluster$ReplicationGroupLogDeliveryEnabled */ =>  {
                let var_29 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticache#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_replication_group_log_delivery_enabled(var_29);
            }
            ,
            s if s.matches("LogDeliveryConfigurations") /* LogDeliveryConfigurations com.amazonaws.elasticache#CacheCluster$LogDeliveryConfigurations */ =>  {
                let var_30 =
                    Some(
                        crate::protocol_serde::shape_log_delivery_configuration_list::de_log_delivery_configuration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_log_delivery_configurations(var_30);
            }
            ,
            s if s.matches("NetworkType") /* NetworkType com.amazonaws.elasticache#CacheCluster$NetworkType */ =>  {
                let var_31 =
                    Some(
                        Result::<crate::types::NetworkType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::NetworkType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_network_type(var_31);
            }
            ,
            s if s.matches("IpDiscovery") /* IpDiscovery com.amazonaws.elasticache#CacheCluster$IpDiscovery */ =>  {
                let var_32 =
                    Some(
                        Result::<crate::types::IpDiscovery, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpDiscovery::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_discovery(var_32);
            }
            ,
            s if s.matches("TransitEncryptionMode") /* TransitEncryptionMode com.amazonaws.elasticache#CacheCluster$TransitEncryptionMode */ =>  {
                let var_33 =
                    Some(
                        Result::<crate::types::TransitEncryptionMode, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TransitEncryptionMode::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_encryption_mode(var_33);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
