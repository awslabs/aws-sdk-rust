// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_update_actions_input_input(
    input: &crate::operation::describe_update_actions::DescribeUpdateActionsInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DescribeUpdateActions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ServiceUpdateName");
    if let Some(var_2) = &input.service_update_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReplicationGroupIds");
    if let Some(var_4) = &input.replication_group_ids {
        let mut list_6 = scope_3.start_list(false, None);
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("CacheClusterIds");
    if let Some(var_9) = &input.cache_cluster_ids {
        let mut list_11 = scope_8.start_list(false, None);
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            entry_12.string(item_10);
        }
        list_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Engine");
    if let Some(var_14) = &input.engine {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_16) = &input.service_update_status {
        let mut list_18 = scope_15.start_list(false, None);
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            entry_19.string(item_17.as_str());
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ServiceUpdateTimeRange");
    if let Some(var_21) = &input.service_update_time_range {
        crate::protocol_serde::shape_time_range_filter::ser_time_range_filter(scope_20, var_21)?;
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("UpdateActionStatus");
    if let Some(var_23) = &input.update_action_status {
        let mut list_25 = scope_22.start_list(false, None);
        for item_24 in var_23 {
            #[allow(unused_mut)]
            let mut entry_26 = list_25.entry();
            entry_26.string(item_24.as_str());
        }
        list_25.finish();
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("ShowNodeLevelUpdateStatus");
    if let Some(var_28) = &input.show_node_level_update_status {
        scope_27.boolean(*var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("MaxRecords");
    if let Some(var_30) = &input.max_records {
        scope_29.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_30).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("Marker");
    if let Some(var_32) = &input.marker {
        scope_31.string(var_32);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
