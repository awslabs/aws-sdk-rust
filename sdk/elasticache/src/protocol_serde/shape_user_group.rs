// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_user_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::UserGroup, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::UserGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("UserGroupId") /* UserGroupId com.amazonaws.elasticache#UserGroup$UserGroupId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_group_id(var_1);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.elasticache#UserGroup$Status */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.elasticache#UserGroup$Engine */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_3);
            }
            ,
            s if s.matches("UserIds") /* UserIds com.amazonaws.elasticache#UserGroup$UserIds */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_user_id_list::de_user_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_ids(var_4);
            }
            ,
            s if s.matches("MinimumEngineVersion") /* MinimumEngineVersion com.amazonaws.elasticache#UserGroup$MinimumEngineVersion */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_minimum_engine_version(var_5);
            }
            ,
            s if s.matches("PendingChanges") /* PendingChanges com.amazonaws.elasticache#UserGroup$PendingChanges */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_user_group_pending_changes::de_user_group_pending_changes(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_changes(var_6);
            }
            ,
            s if s.matches("ReplicationGroups") /* ReplicationGroups com.amazonaws.elasticache#UserGroup$ReplicationGroups */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_ug_replication_group_id_list::de_ug_replication_group_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_replication_groups(var_7);
            }
            ,
            s if s.matches("ARN") /* ARN com.amazonaws.elasticache#UserGroup$ARN */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
