// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_cache_subnet_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CacheSubnetGroup, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CacheSubnetGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CacheSubnetGroupName") /* CacheSubnetGroupName com.amazonaws.elasticache#CacheSubnetGroup$CacheSubnetGroupName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_subnet_group_name(var_1);
            }
            ,
            s if s.matches("CacheSubnetGroupDescription") /* CacheSubnetGroupDescription com.amazonaws.elasticache#CacheSubnetGroup$CacheSubnetGroupDescription */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_subnet_group_description(var_2);
            }
            ,
            s if s.matches("VpcId") /* VpcId com.amazonaws.elasticache#CacheSubnetGroup$VpcId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_3);
            }
            ,
            s if s.matches("Subnets") /* Subnets com.amazonaws.elasticache#CacheSubnetGroup$Subnets */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_subnet_list::de_subnet_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnets(var_4);
            }
            ,
            s if s.matches("ARN") /* ARN com.amazonaws.elasticache#CacheSubnetGroup$ARN */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_5);
            }
            ,
            s if s.matches("SupportedNetworkTypes") /* SupportedNetworkTypes com.amazonaws.elasticache#CacheSubnetGroup$SupportedNetworkTypes */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_network_type_list::de_network_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_network_types(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
