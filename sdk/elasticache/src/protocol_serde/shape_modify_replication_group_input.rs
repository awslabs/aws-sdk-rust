// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_replication_group_input_input(
    input: &crate::operation::modify_replication_group::ModifyReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ReplicationGroupId");
    if let Some(var_2) = &input.replication_group_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_4) = &input.replication_group_description {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PrimaryClusterId");
    if let Some(var_6) = &input.primary_cluster_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SnapshottingClusterId");
    if let Some(var_8) = &input.snapshotting_cluster_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_10) = &input.automatic_failover_enabled {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MultiAZEnabled");
    if let Some(var_12) = &input.multi_az_enabled {
        scope_11.boolean(*var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("NodeGroupId");
    if let Some(var_14) = &input.node_group_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_16) = &input.cache_security_group_names {
        let mut list_18 = scope_15.start_list(false, Some("CacheSecurityGroupName"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            entry_19.string(item_17);
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("SecurityGroupIds");
    if let Some(var_21) = &input.security_group_ids {
        let mut list_23 = scope_20.start_list(false, Some("SecurityGroupId"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            entry_24.string(item_22);
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_26) = &input.preferred_maintenance_window {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("NotificationTopicArn");
    if let Some(var_28) = &input.notification_topic_arn {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("CacheParameterGroupName");
    if let Some(var_30) = &input.cache_parameter_group_name {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("NotificationTopicStatus");
    if let Some(var_32) = &input.notification_topic_status {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_33.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("EngineVersion");
    if let Some(var_35) = &input.engine_version {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_37) = &input.auto_minor_version_upgrade {
        scope_36.boolean(*var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_39) = &input.snapshot_retention_limit {
        scope_38.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_39).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("SnapshotWindow");
    if let Some(var_41) = &input.snapshot_window {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("CacheNodeType");
    if let Some(var_43) = &input.cache_node_type {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("AuthToken");
    if let Some(var_45) = &input.auth_token {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_47) = &input.auth_token_update_strategy {
        scope_46.string(var_47.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("UserGroupIdsToAdd");
    if let Some(var_49) = &input.user_group_ids_to_add {
        let mut list_51 = scope_48.start_list(false, None);
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            entry_52.string(item_50);
        }
        list_51.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("UserGroupIdsToRemove");
    if let Some(var_54) = &input.user_group_ids_to_remove {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            entry_57.string(item_55);
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("RemoveUserGroups");
    if let Some(var_59) = &input.remove_user_groups {
        scope_58.boolean(*var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_61) = &input.log_delivery_configurations {
        let mut list_63 = scope_60.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_62 in var_61 {
            #[allow(unused_mut)]
            let mut entry_64 = list_63.entry();
            crate::protocol_serde::shape_log_delivery_configuration_request::ser_log_delivery_configuration_request(entry_64, item_62)?;
        }
        list_63.finish();
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("IpDiscovery");
    if let Some(var_66) = &input.ip_discovery {
        scope_65.string(var_66.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_68) = &input.transit_encryption_enabled {
        scope_67.boolean(*var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("TransitEncryptionMode");
    if let Some(var_70) = &input.transit_encryption_mode {
        scope_69.string(var_70.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
