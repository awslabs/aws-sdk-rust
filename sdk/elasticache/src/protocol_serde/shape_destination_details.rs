// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_destination_details(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::DestinationDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("CloudWatchLogsDetails");
    if let Some(var_2) = &input.cloud_watch_logs_details {
        crate::protocol_serde::shape_cloud_watch_logs_destination_details::ser_cloud_watch_logs_destination_details(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("KinesisFirehoseDetails");
    if let Some(var_4) = &input.kinesis_firehose_details {
        crate::protocol_serde::shape_kinesis_firehose_destination_details::ser_kinesis_firehose_destination_details(scope_3, var_4)?;
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_destination_details(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::DestinationDetails, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DestinationDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CloudWatchLogsDetails") /* CloudWatchLogsDetails com.amazonaws.elasticache#DestinationDetails$CloudWatchLogsDetails */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_cloud_watch_logs_destination_details::de_cloud_watch_logs_destination_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cloud_watch_logs_details(var_5);
            }
            ,
            s if s.matches("KinesisFirehoseDetails") /* KinesisFirehoseDetails com.amazonaws.elasticache#DestinationDetails$KinesisFirehoseDetails */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_kinesis_firehose_destination_details::de_kinesis_firehose_destination_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_kinesis_firehose_details(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
