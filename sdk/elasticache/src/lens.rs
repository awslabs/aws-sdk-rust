// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_cache_clusters_output_marker(
    input: &crate::output::DescribeCacheClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cache_engine_versions_output_marker(
    input: &crate::output::DescribeCacheEngineVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cache_parameter_groups_output_marker(
    input: &crate::output::DescribeCacheParameterGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cache_parameters_output_marker(
    input: &crate::output::DescribeCacheParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cache_security_groups_output_marker(
    input: &crate::output::DescribeCacheSecurityGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cache_subnet_groups_output_marker(
    input: &crate::output::DescribeCacheSubnetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_engine_default_parameters_output_engine_defaults_marker(
    input: &crate::output::DescribeEngineDefaultParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.engine_defaults {
        None => return None,
        Some(t) => t,
    };
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_events_output_marker(
    input: &crate::output::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_global_replication_groups_output_marker(
    input: &crate::output::DescribeGlobalReplicationGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_replication_groups_output_marker(
    input: &crate::output::DescribeReplicationGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_cache_nodes_output_marker(
    input: &crate::output::DescribeReservedCacheNodesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_cache_nodes_offerings_output_marker(
    input: &crate::output::DescribeReservedCacheNodesOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_service_updates_output_marker(
    input: &crate::output::DescribeServiceUpdatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_snapshots_output_marker(
    input: &crate::output::DescribeSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_update_actions_output_marker(
    input: &crate::output::DescribeUpdateActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_user_groups_output_marker(
    input: &crate::output::DescribeUserGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_users_output_marker(
    input: &crate::output::DescribeUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_clusters_output_cache_clusters(
    input: crate::output::DescribeCacheClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CacheCluster>> {
    let input = match input.cache_clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_engine_versions_output_cache_engine_versions(
    input: crate::output::DescribeCacheEngineVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CacheEngineVersion>> {
    let input = match input.cache_engine_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_parameter_groups_output_cache_parameter_groups(
    input: crate::output::DescribeCacheParameterGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CacheParameterGroup>> {
    let input = match input.cache_parameter_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_parameters_output_parameters(
    input: crate::output::DescribeCacheParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_security_groups_output_cache_security_groups(
    input: crate::output::DescribeCacheSecurityGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CacheSecurityGroup>> {
    let input = match input.cache_security_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cache_subnet_groups_output_cache_subnet_groups(
    input: crate::output::DescribeCacheSubnetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CacheSubnetGroup>> {
    let input = match input.cache_subnet_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_engine_default_parameters_output_engine_defaults_parameters(
    input: crate::output::DescribeEngineDefaultParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.engine_defaults {
        None => return None,
        Some(t) => t,
    };
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_events_output_events(
    input: crate::output::DescribeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_global_replication_groups_output_global_replication_groups(
    input: crate::output::DescribeGlobalReplicationGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GlobalReplicationGroup>> {
    let input = match input.global_replication_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_replication_groups_output_replication_groups(
    input: crate::output::DescribeReplicationGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReplicationGroup>> {
    let input = match input.replication_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_cache_nodes_output_reserved_cache_nodes(
    input: crate::output::DescribeReservedCacheNodesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedCacheNode>> {
    let input = match input.reserved_cache_nodes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_cache_nodes_offerings_output_reserved_cache_nodes_offerings(
    input: crate::output::DescribeReservedCacheNodesOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedCacheNodesOffering>> {
    let input = match input.reserved_cache_nodes_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_service_updates_output_service_updates(
    input: crate::output::DescribeServiceUpdatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServiceUpdate>> {
    let input = match input.service_updates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_snapshots_output_snapshots(
    input: crate::output::DescribeSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Snapshot>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_update_actions_output_update_actions(
    input: crate::output::DescribeUpdateActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UpdateAction>> {
    let input = match input.update_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_user_groups_output_user_groups(
    input: crate::output::DescribeUserGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserGroup>> {
    let input = match input.user_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_users_output_users(
    input: crate::output::DescribeUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::User>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
