// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`IncreaseNodeGroupsInGlobalReplicationGroup`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_replication_group_id(impl Into<String>)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::global_replication_group_id) / [`set_global_replication_group_id(Option<String>)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::set_global_replication_group_id): <p>The name of the Global datastore</p>
    ///   - [`node_group_count(i32)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::node_group_count) / [`set_node_group_count(i32)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::set_node_group_count): <p>The number of node groups you wish to add</p>
    ///   - [`regional_configurations(Vec<RegionalConfiguration>)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::regional_configurations) / [`set_regional_configurations(Option<Vec<RegionalConfiguration>>)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::set_regional_configurations): <p>Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    ///   - [`apply_immediately(bool)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::apply_immediately) / [`set_apply_immediately(bool)`](crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::set_apply_immediately): <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    /// - On success, responds with [`IncreaseNodeGroupsInGlobalReplicationGroupOutput`](crate::output::IncreaseNodeGroupsInGlobalReplicationGroupOutput) with field(s):
    ///   - [`global_replication_group(Option<GlobalReplicationGroup>)`](crate::output::IncreaseNodeGroupsInGlobalReplicationGroupOutput::global_replication_group): <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p>  <ul>   <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<IncreaseNodeGroupsInGlobalReplicationGroupError>`](crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError)
    pub fn increase_node_groups_in_global_replication_group(
        &self,
    ) -> crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup {
        crate::client::fluent_builders::IncreaseNodeGroupsInGlobalReplicationGroup::new(
            self.handle.clone(),
        )
    }
}
