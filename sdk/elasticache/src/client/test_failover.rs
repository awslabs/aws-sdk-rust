// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestFailover`](crate::client::fluent_builders::TestFailover) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_group_id(impl Into<String>)`](crate::client::fluent_builders::TestFailover::replication_group_id) / [`set_replication_group_id(Option<String>)`](crate::client::fluent_builders::TestFailover::set_replication_group_id): <p>The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.</p>
    ///   - [`node_group_id(impl Into<String>)`](crate::client::fluent_builders::TestFailover::node_group_id) / [`set_node_group_id(Option<String>)`](crate::client::fluent_builders::TestFailover::set_node_group_id): <p>The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.</p>
    /// - On success, responds with [`TestFailoverOutput`](crate::output::TestFailoverOutput) with field(s):
    ///   - [`replication_group(Option<ReplicationGroup>)`](crate::output::TestFailoverOutput::replication_group): <p>Contains all of the attributes of a specific Redis replication group.</p>
    /// - On failure, responds with [`SdkError<TestFailoverError>`](crate::error::TestFailoverError)
    pub fn test_failover(&self) -> crate::client::fluent_builders::TestFailover {
        crate::client::fluent_builders::TestFailover::new(self.handle.clone())
    }
}
