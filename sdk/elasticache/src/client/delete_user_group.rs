// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteUserGroup`](crate::client::fluent_builders::DeleteUserGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_group_id(impl Into<String>)`](crate::client::fluent_builders::DeleteUserGroup::user_group_id) / [`set_user_group_id(Option<String>)`](crate::client::fluent_builders::DeleteUserGroup::set_user_group_id): <p>The ID of the user group.</p>
    /// - On success, responds with [`DeleteUserGroupOutput`](crate::output::DeleteUserGroupOutput) with field(s):
    ///   - [`user_group_id(Option<String>)`](crate::output::DeleteUserGroupOutput::user_group_id): <p>The ID of the user group.</p>
    ///   - [`status(Option<String>)`](crate::output::DeleteUserGroupOutput::status): <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    ///   - [`engine(Option<String>)`](crate::output::DeleteUserGroupOutput::engine): <p>The current supported value is Redis. </p>
    ///   - [`user_ids(Option<Vec<String>>)`](crate::output::DeleteUserGroupOutput::user_ids): <p>The list of user IDs that belong to the user group.</p>
    ///   - [`minimum_engine_version(Option<String>)`](crate::output::DeleteUserGroupOutput::minimum_engine_version): <p>The minimum engine version required, which is Redis 6.0</p>
    ///   - [`pending_changes(Option<UserGroupPendingChanges>)`](crate::output::DeleteUserGroupOutput::pending_changes): <p>A list of updates being applied to the user group.</p>
    ///   - [`replication_groups(Option<Vec<String>>)`](crate::output::DeleteUserGroupOutput::replication_groups): <p>A list of replication groups that the user group can access.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteUserGroupOutput::arn): <p>The Amazon Resource Name (ARN) of the user group.</p>
    /// - On failure, responds with [`SdkError<DeleteUserGroupError>`](crate::error::DeleteUserGroupError)
    pub fn delete_user_group(&self) -> crate::client::fluent_builders::DeleteUserGroup {
        crate::client::fluent_builders::DeleteUserGroup::new(self.handle.clone())
    }
}
