// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyReplicationGroup`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_group_id(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::replication_group_id) / [`set_replication_group_id(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_replication_group_id):<br>required: **true**<br><p>The identifier of the replication group to modify.</p><br>
    ///   - [`replication_group_description(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::replication_group_description) / [`set_replication_group_description(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_replication_group_description):<br>required: **false**<br><p>A description for the replication group. Maximum length is 255 characters.</p><br>
    ///   - [`primary_cluster_id(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::primary_cluster_id) / [`set_primary_cluster_id(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_primary_cluster_id):<br>required: **false**<br><p>For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</p><br>
    ///   - [`snapshotting_cluster_id(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::snapshotting_cluster_id) / [`set_snapshotting_cluster_id(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_snapshotting_cluster_id):<br>required: **false**<br><p>The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p><br>
    ///   - [`automatic_failover_enabled(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::automatic_failover_enabled) / [`set_automatic_failover_enabled(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_automatic_failover_enabled):<br>required: **false**<br><p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>  <p>Valid values: <code>true</code> | <code>false</code> </p><br>
    ///   - [`multi_az_enabled(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::multi_az_enabled) / [`set_multi_az_enabled(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_multi_az_enabled):<br>required: **false**<br><p>A flag to indicate MultiAZ is enabled.</p><br>
    ///   - [`node_group_id(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::node_group_id) / [`set_node_group_id(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_node_group_id):<br>required: **false**<br><p>Deprecated. This parameter is not used.</p><br>
    ///   - [`cache_security_group_names(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::cache_security_group_names) / [`set_cache_security_group_names(Option<Vec::<String>>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_cache_security_group_names):<br>required: **false**<br><p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>  <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>  <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p><br>
    ///   - [`security_group_ids(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec::<String>>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_security_group_ids):<br>required: **false**<br><p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>  <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p><br>
    ///   - [`preferred_maintenance_window(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::preferred_maintenance_window) / [`set_preferred_maintenance_window(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_preferred_maintenance_window):<br>required: **false**<br><p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>  <p>Valid values for <code>ddd</code> are:</p>  <ul>   <li> <p> <code>sun</code> </p> </li>   <li> <p> <code>mon</code> </p> </li>   <li> <p> <code>tue</code> </p> </li>   <li> <p> <code>wed</code> </p> </li>   <li> <p> <code>thu</code> </p> </li>   <li> <p> <code>fri</code> </p> </li>   <li> <p> <code>sat</code> </p> </li>  </ul>  <p>Example: <code>sun:23:00-mon:01:30</code> </p><br>
    ///   - [`notification_topic_arn(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::notification_topic_arn) / [`set_notification_topic_arn(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_notification_topic_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note>   <p>The Amazon SNS topic owner must be same as the replication group owner. </p>  </note><br>
    ///   - [`cache_parameter_group_name(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::cache_parameter_group_name) / [`set_cache_parameter_group_name(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_cache_parameter_group_name):<br>required: **false**<br><p>The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p><br>
    ///   - [`notification_topic_status(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::notification_topic_status) / [`set_notification_topic_status(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_notification_topic_status):<br>required: **false**<br><p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p>  <p>Valid values: <code>active</code> | <code>inactive</code> </p><br>
    ///   - [`apply_immediately(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::apply_immediately) / [`set_apply_immediately(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_apply_immediately):<br>required: **false**<br><p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>  <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>  <p>Valid values: <code>true</code> | <code>false</code> </p>  <p>Default: <code>false</code> </p><br>
    ///   - [`engine_version(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::engine_version) / [`set_engine_version(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_engine_version):<br>required: **false**<br><p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>  <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p><br>
    ///   - [`auto_minor_version_upgrade(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::auto_minor_version_upgrade) / [`set_auto_minor_version_upgrade(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_auto_minor_version_upgrade):<br>required: **false**<br><p>&nbsp;If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.&nbsp; </p><br>
    ///   - [`snapshot_retention_limit(i32)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::snapshot_retention_limit) / [`set_snapshot_retention_limit(Option<i32>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_snapshot_retention_limit):<br>required: **false**<br><p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>  <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p><br>
    ///   - [`snapshot_window(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::snapshot_window) / [`set_snapshot_window(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_snapshot_window):<br>required: **false**<br><p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>  <p>Example: <code>05:00-09:00</code> </p>  <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p><br>
    ///   - [`cache_node_type(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::cache_node_type) / [`set_cache_node_type(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_cache_node_type):<br>required: **false**<br><p>A valid cache node type that you want to scale this replication group to.</p><br>
    ///   - [`auth_token(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::auth_token) / [`set_auth_token(Option<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_auth_token):<br>required: **false**<br><p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p>  <ul>   <li> <p>Must be only printable ASCII characters</p> </li>   <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li>   <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li>  </ul>  <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p><br>
    ///   - [`auth_token_update_strategy(AuthTokenUpdateStrategyType)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::auth_token_update_strategy) / [`set_auth_token_update_strategy(Option<AuthTokenUpdateStrategyType>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_auth_token_update_strategy):<br>required: **false**<br><p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p>  <ul>   <li> <p>Rotate</p> </li>   <li> <p>Set</p> </li>  </ul>  <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p><br>
    ///   - [`user_group_ids_to_add(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::user_group_ids_to_add) / [`set_user_group_ids_to_add(Option<Vec::<String>>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_user_group_ids_to_add):<br>required: **false**<br><p>The ID of the user group you are associating with the replication group.</p><br>
    ///   - [`user_group_ids_to_remove(impl Into<String>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::user_group_ids_to_remove) / [`set_user_group_ids_to_remove(Option<Vec::<String>>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_user_group_ids_to_remove):<br>required: **false**<br><p>The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</p><br>
    ///   - [`remove_user_groups(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::remove_user_groups) / [`set_remove_user_groups(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_remove_user_groups):<br>required: **false**<br><p>Removes the user group associated with this replication group.</p><br>
    ///   - [`log_delivery_configurations(LogDeliveryConfigurationRequest)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::log_delivery_configurations) / [`set_log_delivery_configurations(Option<Vec::<LogDeliveryConfigurationRequest>>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_log_delivery_configurations):<br>required: **false**<br><p>Specifies the destination, format and type of the logs.</p><br>
    ///   - [`ip_discovery(IpDiscovery)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::ip_discovery) / [`set_ip_discovery(Option<IpDiscovery>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_ip_discovery):<br>required: **false**<br><p>The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</p><br>
    ///   - [`transit_encryption_enabled(bool)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::transit_encryption_enabled) / [`set_transit_encryption_enabled(Option<bool>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_transit_encryption_enabled):<br>required: **false**<br><p>A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</p><br>
    ///   - [`transit_encryption_mode(TransitEncryptionMode)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::transit_encryption_mode) / [`set_transit_encryption_mode(Option<TransitEncryptionMode>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_transit_encryption_mode):<br>required: **false**<br><p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>  <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p>  <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code>, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p><br>
    ///   - [`cluster_mode(ClusterMode)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::cluster_mode) / [`set_cluster_mode(Option<ClusterMode>)`](crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::set_cluster_mode):<br>required: **false**<br><p>Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</p><br>
    /// - On success, responds with [`ModifyReplicationGroupOutput`](crate::operation::modify_replication_group::ModifyReplicationGroupOutput) with field(s):
    ///   - [`replication_group(Option<ReplicationGroup>)`](crate::operation::modify_replication_group::ModifyReplicationGroupOutput::replication_group): <p>Contains all of the attributes of a specific Redis replication group.</p>
    /// - On failure, responds with [`SdkError<ModifyReplicationGroupError>`](crate::operation::modify_replication_group::ModifyReplicationGroupError)
    pub fn modify_replication_group(&self) -> crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder {
        crate::operation::modify_replication_group::builders::ModifyReplicationGroupFluentBuilder::new(self.handle.clone())
    }
}
