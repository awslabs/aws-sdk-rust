// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteGlobalReplicationGroup`](crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_replication_group_id(impl Into<String>)`](crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder::global_replication_group_id) / [`set_global_replication_group_id(Option<String>)`](crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder::set_global_replication_group_id):<br>required: **true**<br><p>The name of the Global datastore</p><br>
    ///   - [`retain_primary_replication_group(bool)`](crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder::retain_primary_replication_group) / [`set_retain_primary_replication_group(Option<bool>)`](crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder::set_retain_primary_replication_group):<br>required: **true**<br><p>The primary replication group is retained as a standalone replication group. </p><br>
    /// - On success, responds with [`DeleteGlobalReplicationGroupOutput`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupOutput) with field(s):
    ///   - [`global_replication_group(Option<GlobalReplicationGroup>)`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupOutput::global_replication_group): <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p>  <ul>   <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DeleteGlobalReplicationGroupError>`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupError)
    pub fn delete_global_replication_group(
        &self,
    ) -> crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder {
        crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupFluentBuilder::new(self.handle.clone())
    }
}
