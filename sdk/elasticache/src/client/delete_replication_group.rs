// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteReplicationGroup`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_group_id(impl Into<String>)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::replication_group_id) / [`set_replication_group_id(Option<String>)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::set_replication_group_id):<br>required: **true**<br><p>The identifier for the cluster to be deleted. This parameter is not case sensitive.</p><br>
    ///   - [`retain_primary_cluster(bool)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::retain_primary_cluster) / [`set_retain_primary_cluster(Option<bool>)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::set_retain_primary_cluster):<br>required: **false**<br><p>If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.</p><br>
    ///   - [`final_snapshot_identifier(impl Into<String>)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::final_snapshot_identifier) / [`set_final_snapshot_identifier(Option<String>)`](crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::set_final_snapshot_identifier):<br>required: **false**<br><p>The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.</p><br>
    /// - On success, responds with [`DeleteReplicationGroupOutput`](crate::operation::delete_replication_group::DeleteReplicationGroupOutput) with field(s):
    ///   - [`replication_group(Option<ReplicationGroup>)`](crate::operation::delete_replication_group::DeleteReplicationGroupOutput::replication_group): <p>Contains all of the attributes of a specific Redis replication group.</p>
    /// - On failure, responds with [`SdkError<DeleteReplicationGroupError>`](crate::operation::delete_replication_group::DeleteReplicationGroupError)
    pub fn delete_replication_group(&self) -> crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder {
        crate::operation::delete_replication_group::builders::DeleteReplicationGroupFluentBuilder::new(self.handle.clone())
    }
}
