// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The customer has exceeded the allowed rate of API calls.</p>
    ApiCallRateForCustomerExceededFault(crate::error::ApiCallRateForCustomerExceededFault),
    /// <p>The specified Amazon EC2 security group is already authorized for the specified cache security group.</p>
    AuthorizationAlreadyExistsFault(crate::error::AuthorizationAlreadyExistsFault),
    /// <p>The specified Amazon EC2 security group is not authorized for the specified cache security group.</p>
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    /// <p>You already have a cluster with the given identifier.</p>
    CacheClusterAlreadyExistsFault(crate::error::CacheClusterAlreadyExistsFault),
    /// <p>The requested cluster ID does not refer to an existing cluster.</p>
    CacheClusterNotFoundFault(crate::error::CacheClusterNotFoundFault),
    /// <p>A cache parameter group with the requested name already exists.</p>
    CacheParameterGroupAlreadyExistsFault(crate::error::CacheParameterGroupAlreadyExistsFault),
    /// <p>The requested cache parameter group name does not refer to an existing cache parameter group.</p>
    CacheParameterGroupNotFoundFault(crate::error::CacheParameterGroupNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the maximum number of cache security groups.</p>
    CacheParameterGroupQuotaExceededFault(crate::error::CacheParameterGroupQuotaExceededFault),
    /// <p>A cache security group with the specified name already exists.</p>
    CacheSecurityGroupAlreadyExistsFault(crate::error::CacheSecurityGroupAlreadyExistsFault),
    /// <p>The requested cache security group name does not refer to an existing cache security group.</p>
    CacheSecurityGroupNotFoundFault(crate::error::CacheSecurityGroupNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the allowed number of cache security groups.</p>
    CacheSecurityGroupQuotaExceededFault(crate::error::CacheSecurityGroupQuotaExceededFault),
    /// <p>The requested cache subnet group name is already in use by an existing cache subnet group.</p>
    CacheSubnetGroupAlreadyExistsFault(crate::error::CacheSubnetGroupAlreadyExistsFault),
    /// <p>The requested cache subnet group is currently in use.</p>
    CacheSubnetGroupInUse(crate::error::CacheSubnetGroupInUse),
    /// <p>The requested cache subnet group name does not refer to an existing cache subnet group.</p>
    CacheSubnetGroupNotFoundFault(crate::error::CacheSubnetGroupNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the allowed number of cache subnet groups.</p>
    CacheSubnetGroupQuotaExceededFault(crate::error::CacheSubnetGroupQuotaExceededFault),
    /// <p>The request cannot be processed because it would exceed the allowed number of subnets in a cache subnet group.</p>
    CacheSubnetQuotaExceededFault(crate::error::CacheSubnetQuotaExceededFault),
    /// <p>The request cannot be processed because it would exceed the allowed number of clusters per customer.</p>
    ClusterQuotaForCustomerExceededFault(crate::error::ClusterQuotaForCustomerExceededFault),
    /// <p>The default user assigned to the user group.</p>
    DefaultUserAssociatedToUserGroupFault(crate::error::DefaultUserAssociatedToUserGroupFault),
    /// <p>You must add default user to a user group.</p>
    DefaultUserRequired(crate::error::DefaultUserRequired),
    /// <p>A user with this username already exists.</p>
    DuplicateUserNameFault(crate::error::DuplicateUserNameFault),
    /// <p>The Global datastore name already exists.</p>
    GlobalReplicationGroupAlreadyExistsFault(
        crate::error::GlobalReplicationGroupAlreadyExistsFault,
    ),
    /// <p>The Global datastore does not exist</p>
    GlobalReplicationGroupNotFoundFault(crate::error::GlobalReplicationGroupNotFoundFault),
    /// <p>The requested cache node type is not available in the specified Availability Zone. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ErrorMessages.html#ErrorMessages.INSUFFICIENT_CACHE_CLUSTER_CAPACITY">InsufficientCacheClusterCapacity</a> in the ElastiCache User Guide.</p>
    InsufficientCacheClusterCapacityFault(crate::error::InsufficientCacheClusterCapacityFault),
    /// <p>The requested Amazon Resource Name (ARN) does not refer to an existing resource.</p>
    InvalidArnFault(crate::error::InvalidArnFault),
    /// <p>The requested cluster is not in the <code>available</code> state.</p>
    InvalidCacheClusterStateFault(crate::error::InvalidCacheClusterStateFault),
    /// <p>The current state of the cache parameter group does not allow the requested operation to occur.</p>
    InvalidCacheParameterGroupStateFault(crate::error::InvalidCacheParameterGroupStateFault),
    /// <p>The current state of the cache security group does not allow deletion.</p>
    InvalidCacheSecurityGroupStateFault(crate::error::InvalidCacheSecurityGroupStateFault),
    /// <p>The Global datastore is not available or in primary-only state.</p>
    InvalidGlobalReplicationGroupStateFault(crate::error::InvalidGlobalReplicationGroupStateFault),
    /// <p>The KMS key supplied is not valid.</p>
    InvalidKmsKeyFault(crate::error::InvalidKmsKeyFault),
    /// <p>Two or more incompatible parameters were specified.</p>
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    /// <p>The value for a parameter is invalid.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>The requested replication group is not in the <code>available</code> state.</p>
    InvalidReplicationGroupStateFault(crate::error::InvalidReplicationGroupStateFault),
    /// <p>The current state of the snapshot does not allow the requested operation to occur.</p>
    InvalidSnapshotStateFault(crate::error::InvalidSnapshotStateFault),
    /// <p>An invalid subnet identifier was specified.</p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p>The user group is not in an active state.</p>
    InvalidUserGroupStateFault(crate::error::InvalidUserGroupStateFault),
    /// <p>The user is not in active state.</p>
    InvalidUserStateFault(crate::error::InvalidUserStateFault),
    /// <p>The VPC network is in an invalid state.</p>
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    /// <p>The operation was not performed because no changes were required.</p>
    NoOperationFault(crate::error::NoOperationFault),
    /// <p>The node group specified by the <code>NodeGroupId</code> parameter could not be found. Please verify that the node group exists and that you spelled the <code>NodeGroupId</code> value correctly.</p>
    NodeGroupNotFoundFault(crate::error::NodeGroupNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the maximum allowed number of node groups (shards) in a single replication group. The default maximum is 90</p>
    NodeGroupsPerReplicationGroupQuotaExceededFault(
        crate::error::NodeGroupsPerReplicationGroupQuotaExceededFault,
    ),
    /// <p>The request cannot be processed because it would exceed the allowed number of cache nodes in a single cluster.</p>
    NodeQuotaForClusterExceededFault(crate::error::NodeQuotaForClusterExceededFault),
    /// <p>The request cannot be processed because it would exceed the allowed number of cache nodes per customer.</p>
    NodeQuotaForCustomerExceededFault(crate::error::NodeQuotaForCustomerExceededFault),
    /// <p>The specified replication group already exists.</p>
    ReplicationGroupAlreadyExistsFault(crate::error::ReplicationGroupAlreadyExistsFault),
    /// <p>The targeted replication group is not available. </p>
    ReplicationGroupAlreadyUnderMigrationFault(
        crate::error::ReplicationGroupAlreadyUnderMigrationFault,
    ),
    /// <p>The specified replication group does not exist.</p>
    ReplicationGroupNotFoundFault(crate::error::ReplicationGroupNotFoundFault),
    /// <p>The designated replication group is not available for data migration.</p>
    ReplicationGroupNotUnderMigrationFault(crate::error::ReplicationGroupNotUnderMigrationFault),
    /// <p>You already have a reservation with the given identifier.</p>
    ReservedCacheNodeAlreadyExistsFault(crate::error::ReservedCacheNodeAlreadyExistsFault),
    /// <p>The requested reserved cache node was not found.</p>
    ReservedCacheNodeNotFoundFault(crate::error::ReservedCacheNodeNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the user's cache node quota.</p>
    ReservedCacheNodeQuotaExceededFault(crate::error::ReservedCacheNodeQuotaExceededFault),
    /// <p>The requested cache node offering does not exist.</p>
    ReservedCacheNodesOfferingNotFoundFault(crate::error::ReservedCacheNodesOfferingNotFoundFault),
    /// <p>The specified service linked role (SLR) was not found.</p>
    ServiceLinkedRoleNotFoundFault(crate::error::ServiceLinkedRoleNotFoundFault),
    /// <p>The service update doesn't exist</p>
    ServiceUpdateNotFoundFault(crate::error::ServiceUpdateNotFoundFault),
    /// <p>You already have a snapshot with the given name.</p>
    SnapshotAlreadyExistsFault(crate::error::SnapshotAlreadyExistsFault),
    /// <p>You attempted one of the following operations:</p>
    /// <ul>
    /// <li> <p>Creating a snapshot of a Redis cluster running on a <code>cache.t1.micro</code> cache node.</p> </li>
    /// <li> <p>Creating a snapshot of a cluster that is running Memcached rather than Redis.</p> </li>
    /// </ul>
    /// <p>Neither of these are supported by ElastiCache.</p>
    SnapshotFeatureNotSupportedFault(crate::error::SnapshotFeatureNotSupportedFault),
    /// <p>The requested snapshot name does not refer to an existing snapshot.</p>
    SnapshotNotFoundFault(crate::error::SnapshotNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the maximum number of snapshots.</p>
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    /// <p>The requested subnet is being used by another cache subnet group.</p>
    SubnetInUse(crate::error::SubnetInUse),
    /// <p>At least one subnet ID does not match the other subnet IDs. This mismatch typically occurs when a user sets one subnet ID to a regional Availability Zone and a different one to an outpost. Or when a user sets the subnet ID to an Outpost when not subscribed on this service.</p>
    SubnetNotAllowedFault(crate::error::SubnetNotAllowedFault),
    /// <p>The requested tag was not found on this resource.</p>
    TagNotFoundFault(crate::error::TagNotFoundFault),
    /// <p>The request cannot be processed because it would cause the resource to have more than the allowed number of tags. The maximum number of tags permitted on a resource is 50.</p>
    TagQuotaPerResourceExceeded(crate::error::TagQuotaPerResourceExceeded),
    /// <p>The <code>TestFailover</code> action is not available.</p>
    TestFailoverNotAvailableFault(crate::error::TestFailoverNotAvailableFault),
    /// <p>A user with this ID already exists.</p>
    UserAlreadyExistsFault(crate::error::UserAlreadyExistsFault),
    /// <p>The user group with this ID already exists.</p>
    UserGroupAlreadyExistsFault(crate::error::UserGroupAlreadyExistsFault),
    /// <p>The user group was not found or does not exist</p>
    UserGroupNotFoundFault(crate::error::UserGroupNotFoundFault),
    /// <p>The number of users exceeds the user group limit.</p>
    UserGroupQuotaExceededFault(crate::error::UserGroupQuotaExceededFault),
    /// <p>The user does not exist or could not be found.</p>
    UserNotFoundFault(crate::error::UserNotFoundFault),
    /// <p>The quota of users has been exceeded.</p>
    UserQuotaExceededFault(crate::error::UserQuotaExceededFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ApiCallRateForCustomerExceededFault(inner) => inner.fmt(f),
            Error::AuthorizationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::CacheClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheClusterNotFoundFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupInUse(inner) => inner.fmt(f),
            Error::CacheSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::ClusterQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::DefaultUserAssociatedToUserGroupFault(inner) => inner.fmt(f),
            Error::DefaultUserRequired(inner) => inner.fmt(f),
            Error::DuplicateUserNameFault(inner) => inner.fmt(f),
            Error::GlobalReplicationGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalReplicationGroupNotFoundFault(inner) => inner.fmt(f),
            Error::InsufficientCacheClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidArnFault(inner) => inner.fmt(f),
            Error::InvalidCacheClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidCacheParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidCacheSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalReplicationGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidKmsKeyFault(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidReplicationGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidUserGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidUserStateFault(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::NoOperationFault(inner) => inner.fmt(f),
            Error::NodeGroupNotFoundFault(inner) => inner.fmt(f),
            Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::NodeQuotaForClusterExceededFault(inner) => inner.fmt(f),
            Error::NodeQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::ReplicationGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReplicationGroupAlreadyUnderMigrationFault(inner) => inner.fmt(f),
            Error::ReplicationGroupNotFoundFault(inner) => inner.fmt(f),
            Error::ReplicationGroupNotUnderMigrationFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceUpdateNotFoundFault(inner) => inner.fmt(f),
            Error::SnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::SnapshotFeatureNotSupportedFault(inner) => inner.fmt(f),
            Error::SnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetInUse(inner) => inner.fmt(f),
            Error::SubnetNotAllowedFault(inner) => inner.fmt(f),
            Error::TagNotFoundFault(inner) => inner.fmt(f),
            Error::TagQuotaPerResourceExceeded(inner) => inner.fmt(f),
            Error::TestFailoverNotAvailableFault(inner) => inner.fmt(f),
            Error::UserAlreadyExistsFault(inner) => inner.fmt(f),
            Error::UserGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::UserGroupNotFoundFault(inner) => inner.fmt(f),
            Error::UserGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::UserNotFoundFault(inner) => inner.fmt(f),
            Error::UserQuotaExceededFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::InvalidArnFault(inner) => {
                Error::InvalidArnFault(inner)
            }
            crate::error::AddTagsToResourceError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::AddTagsToResourceError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::ReservedCacheNodeNotFoundFault(inner) => {
                Error::ReservedCacheNodeNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::AddTagsToResourceError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AuthorizeCacheSecurityGroupIngressError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AuthorizeCacheSecurityGroupIngressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AuthorizeCacheSecurityGroupIngressError> for Error {
    fn from(err: crate::error::AuthorizeCacheSecurityGroupIngressError) -> Self {
        match err {
            crate::error::AuthorizeCacheSecurityGroupIngressError::AuthorizationAlreadyExistsFault(inner) => Error::AuthorizationAlreadyExistsFault(inner),
            crate::error::AuthorizeCacheSecurityGroupIngressError::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
            crate::error::AuthorizeCacheSecurityGroupIngressError::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
            crate::error::AuthorizeCacheSecurityGroupIngressError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::AuthorizeCacheSecurityGroupIngressError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::AuthorizeCacheSecurityGroupIngressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchApplyUpdateActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchApplyUpdateActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchApplyUpdateActionError> for Error {
    fn from(err: crate::error::BatchApplyUpdateActionError) -> Self {
        match err {
            crate::error::BatchApplyUpdateActionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::BatchApplyUpdateActionError::ServiceUpdateNotFoundFault(inner) => {
                Error::ServiceUpdateNotFoundFault(inner)
            }
            crate::error::BatchApplyUpdateActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchStopUpdateActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchStopUpdateActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchStopUpdateActionError> for Error {
    fn from(err: crate::error::BatchStopUpdateActionError) -> Self {
        match err {
            crate::error::BatchStopUpdateActionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::BatchStopUpdateActionError::ServiceUpdateNotFoundFault(inner) => {
                Error::ServiceUpdateNotFoundFault(inner)
            }
            crate::error::BatchStopUpdateActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteMigrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CompleteMigrationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CompleteMigrationError> for Error {
    fn from(err: crate::error::CompleteMigrationError) -> Self {
        match err {
            crate::error::CompleteMigrationError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::CompleteMigrationError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::CompleteMigrationError::ReplicationGroupNotUnderMigrationFault(inner) => {
                Error::ReplicationGroupNotUnderMigrationFault(inner)
            }
            crate::error::CompleteMigrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopySnapshotError> for Error {
    fn from(err: crate::error::CopySnapshotError) -> Self {
        match err {
            crate::error::CopySnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CopySnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CopySnapshotError::InvalidSnapshotStateFault(inner) => {
                Error::InvalidSnapshotStateFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopySnapshotError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CopySnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCacheClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCacheClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCacheClusterError> for Error {
    fn from(err: crate::error::CreateCacheClusterError) -> Self {
        match err {
            crate::error::CreateCacheClusterError::CacheClusterAlreadyExistsFault(inner) => {
                Error::CacheClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateCacheClusterError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateCacheClusterError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::CreateCacheClusterError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateCacheClusterError::ClusterQuotaForCustomerExceededFault(inner) => {
                Error::ClusterQuotaForCustomerExceededFault(inner)
            }
            crate::error::CreateCacheClusterError::InsufficientCacheClusterCapacityFault(inner) => {
                Error::InsufficientCacheClusterCapacityFault(inner)
            }
            crate::error::CreateCacheClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateCacheClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateCacheClusterError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::CreateCacheClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateCacheClusterError::NodeQuotaForClusterExceededFault(inner) => {
                Error::NodeQuotaForClusterExceededFault(inner)
            }
            crate::error::CreateCacheClusterError::NodeQuotaForCustomerExceededFault(inner) => {
                Error::NodeQuotaForCustomerExceededFault(inner)
            }
            crate::error::CreateCacheClusterError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::CreateCacheClusterError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateCacheClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCacheParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCacheParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCacheParameterGroupError> for Error {
    fn from(err: crate::error::CreateCacheParameterGroupError) -> Self {
        match err {
            crate::error::CreateCacheParameterGroupError::CacheParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::CacheParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateCacheParameterGroupError::CacheParameterGroupQuotaExceededFault(
                inner,
            ) => Error::CacheParameterGroupQuotaExceededFault(inner),
            crate::error::CreateCacheParameterGroupError::InvalidCacheParameterGroupStateFault(
                inner,
            ) => Error::InvalidCacheParameterGroupStateFault(inner),
            crate::error::CreateCacheParameterGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateCacheParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateCacheParameterGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateCacheParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCacheSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCacheSecurityGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCacheSecurityGroupError> for Error {
    fn from(err: crate::error::CreateCacheSecurityGroupError) -> Self {
        match err {
            crate::error::CreateCacheSecurityGroupError::CacheSecurityGroupAlreadyExistsFault(
                inner,
            ) => Error::CacheSecurityGroupAlreadyExistsFault(inner),
            crate::error::CreateCacheSecurityGroupError::CacheSecurityGroupQuotaExceededFault(
                inner,
            ) => Error::CacheSecurityGroupQuotaExceededFault(inner),
            crate::error::CreateCacheSecurityGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateCacheSecurityGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateCacheSecurityGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateCacheSecurityGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCacheSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCacheSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCacheSubnetGroupError> for Error {
    fn from(err: crate::error::CreateCacheSubnetGroupError) -> Self {
        match err {
            crate::error::CreateCacheSubnetGroupError::CacheSubnetGroupAlreadyExistsFault(
                inner,
            ) => Error::CacheSubnetGroupAlreadyExistsFault(inner),
            crate::error::CreateCacheSubnetGroupError::CacheSubnetGroupQuotaExceededFault(
                inner,
            ) => Error::CacheSubnetGroupQuotaExceededFault(inner),
            crate::error::CreateCacheSubnetGroupError::CacheSubnetQuotaExceededFault(inner) => {
                Error::CacheSubnetQuotaExceededFault(inner)
            }
            crate::error::CreateCacheSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateCacheSubnetGroupError::SubnetNotAllowedFault(inner) => {
                Error::SubnetNotAllowedFault(inner)
            }
            crate::error::CreateCacheSubnetGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateCacheSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGlobalReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGlobalReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::CreateGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::CreateGlobalReplicationGroupError::GlobalReplicationGroupAlreadyExistsFault(inner) => Error::GlobalReplicationGroupAlreadyExistsFault(inner),
            crate::error::CreateGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::CreateGlobalReplicationGroupError::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
            crate::error::CreateGlobalReplicationGroupError::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
            crate::error::CreateGlobalReplicationGroupError::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
            crate::error::CreateGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationGroupError> for Error {
    fn from(err: crate::error::CreateReplicationGroupError) -> Self {
        match err {
            crate::error::CreateReplicationGroupError::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::CacheSubnetGroupNotFoundFault(inner) => Error::CacheSubnetGroupNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
            crate::error::CreateReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
            crate::error::CreateReplicationGroupError::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
            crate::error::CreateReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::CreateReplicationGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::CreateReplicationGroupError::InvalidUserGroupStateFault(inner) => Error::InvalidUserGroupStateFault(inner),
            crate::error::CreateReplicationGroupError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::CreateReplicationGroupError::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
            crate::error::CreateReplicationGroupError::NodeQuotaForClusterExceededFault(inner) => Error::NodeQuotaForClusterExceededFault(inner),
            crate::error::CreateReplicationGroupError::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
            crate::error::CreateReplicationGroupError::ReplicationGroupAlreadyExistsFault(inner) => Error::ReplicationGroupAlreadyExistsFault(inner),
            crate::error::CreateReplicationGroupError::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
            crate::error::CreateReplicationGroupError::UserGroupNotFoundFault(inner) => Error::UserGroupNotFoundFault(inner),
            crate::error::CreateReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSnapshotError> for Error {
    fn from(err: crate::error::CreateSnapshotError) -> Self {
        match err {
            crate::error::CreateSnapshotError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::CreateSnapshotError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::CreateSnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateSnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateSnapshotError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::CreateSnapshotError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::CreateSnapshotError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::CreateSnapshotError::SnapshotFeatureNotSupportedFault(inner) => {
                Error::SnapshotFeatureNotSupportedFault(inner)
            }
            crate::error::CreateSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateSnapshotError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::CreateUserError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateUserError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateUserError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateUserError::UserAlreadyExistsFault(inner) => {
                Error::UserAlreadyExistsFault(inner)
            }
            crate::error::CreateUserError::UserQuotaExceededFault(inner) => {
                Error::UserQuotaExceededFault(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserGroupError> for Error {
    fn from(err: crate::error::CreateUserGroupError) -> Self {
        match err {
            crate::error::CreateUserGroupError::DefaultUserRequired(inner) => {
                Error::DefaultUserRequired(inner)
            }
            crate::error::CreateUserGroupError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::CreateUserGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateUserGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateUserGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateUserGroupError::UserGroupAlreadyExistsFault(inner) => {
                Error::UserGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateUserGroupError::UserGroupQuotaExceededFault(inner) => {
                Error::UserGroupQuotaExceededFault(inner)
            }
            crate::error::CreateUserGroupError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::CreateUserGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DecreaseReplicaCountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DecreaseReplicaCountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DecreaseReplicaCountError> for Error {
    fn from(err: crate::error::DecreaseReplicaCountError) -> Self {
        match err {
            crate::error::DecreaseReplicaCountError::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
            crate::error::DecreaseReplicaCountError::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
            crate::error::DecreaseReplicaCountError::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
            crate::error::DecreaseReplicaCountError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DecreaseReplicaCountError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DecreaseReplicaCountError::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
            crate::error::DecreaseReplicaCountError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::DecreaseReplicaCountError::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
            crate::error::DecreaseReplicaCountError::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
            crate::error::DecreaseReplicaCountError::NoOperationFault(inner) => Error::NoOperationFault(inner),
            crate::error::DecreaseReplicaCountError::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
            crate::error::DecreaseReplicaCountError::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
            crate::error::DecreaseReplicaCountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCacheClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCacheClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCacheClusterError> for Error {
    fn from(err: crate::error::DeleteCacheClusterError) -> Self {
        match err {
            crate::error::DeleteCacheClusterError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::DeleteCacheClusterError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::DeleteCacheClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DeleteCacheClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteCacheClusterError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteCacheClusterError::SnapshotFeatureNotSupportedFault(inner) => {
                Error::SnapshotFeatureNotSupportedFault(inner)
            }
            crate::error::DeleteCacheClusterError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteCacheClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCacheParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCacheParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCacheParameterGroupError> for Error {
    fn from(err: crate::error::DeleteCacheParameterGroupError) -> Self {
        match err {
            crate::error::DeleteCacheParameterGroupError::CacheParameterGroupNotFoundFault(
                inner,
            ) => Error::CacheParameterGroupNotFoundFault(inner),
            crate::error::DeleteCacheParameterGroupError::InvalidCacheParameterGroupStateFault(
                inner,
            ) => Error::InvalidCacheParameterGroupStateFault(inner),
            crate::error::DeleteCacheParameterGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DeleteCacheParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteCacheParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCacheSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCacheSecurityGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCacheSecurityGroupError> for Error {
    fn from(err: crate::error::DeleteCacheSecurityGroupError) -> Self {
        match err {
            crate::error::DeleteCacheSecurityGroupError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::DeleteCacheSecurityGroupError::InvalidCacheSecurityGroupStateFault(
                inner,
            ) => Error::InvalidCacheSecurityGroupStateFault(inner),
            crate::error::DeleteCacheSecurityGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DeleteCacheSecurityGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteCacheSecurityGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCacheSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCacheSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCacheSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteCacheSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteCacheSubnetGroupError::CacheSubnetGroupInUse(inner) => {
                Error::CacheSubnetGroupInUse(inner)
            }
            crate::error::DeleteCacheSubnetGroupError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::DeleteCacheSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGlobalReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGlobalReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::DeleteGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::DeleteGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::DeleteGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::DeleteGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationGroupError> for Error {
    fn from(err: crate::error::DeleteReplicationGroupError) -> Self {
        match err {
            crate::error::DeleteReplicationGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DeleteReplicationGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteReplicationGroupError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::DeleteReplicationGroupError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::DeleteReplicationGroupError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteReplicationGroupError::SnapshotFeatureNotSupportedFault(inner) => {
                Error::SnapshotFeatureNotSupportedFault(inner)
            }
            crate::error::DeleteReplicationGroupError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSnapshotError> for Error {
    fn from(err: crate::error::DeleteSnapshotError) -> Self {
        match err {
            crate::error::DeleteSnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DeleteSnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteSnapshotError::InvalidSnapshotStateFault(inner) => {
                Error::InvalidSnapshotStateFault(inner)
            }
            crate::error::DeleteSnapshotError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::DeleteSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::DefaultUserAssociatedToUserGroupFault(inner) => {
                Error::DefaultUserAssociatedToUserGroupFault(inner)
            }
            crate::error::DeleteUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteUserError::InvalidUserStateFault(inner) => {
                Error::InvalidUserStateFault(inner)
            }
            crate::error::DeleteUserError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteUserError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserGroupError> for Error {
    fn from(err: crate::error::DeleteUserGroupError) -> Self {
        match err {
            crate::error::DeleteUserGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteUserGroupError::InvalidUserGroupStateFault(inner) => {
                Error::InvalidUserGroupStateFault(inner)
            }
            crate::error::DeleteUserGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteUserGroupError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::DeleteUserGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheClustersError> for Error {
    fn from(err: crate::error::DescribeCacheClustersError) -> Self {
        match err {
            crate::error::DescribeCacheClustersError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::DescribeCacheClustersError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeCacheClustersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeCacheClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheEngineVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheEngineVersionsError> for Error {
    fn from(err: crate::error::DescribeCacheEngineVersionsError) -> Self {
        match err {
            crate::error::DescribeCacheEngineVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheParameterGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeCacheParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeCacheParameterGroupsError::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
            crate::error::DescribeCacheParameterGroupsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeCacheParameterGroupsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeCacheParameterGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheParametersError> for Error {
    fn from(err: crate::error::DescribeCacheParametersError) -> Self {
        match err {
            crate::error::DescribeCacheParametersError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeCacheParametersError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeCacheParametersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeCacheParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheSecurityGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheSecurityGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheSecurityGroupsError> for Error {
    fn from(err: crate::error::DescribeCacheSecurityGroupsError) -> Self {
        match err {
            crate::error::DescribeCacheSecurityGroupsError::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
            crate::error::DescribeCacheSecurityGroupsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeCacheSecurityGroupsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeCacheSecurityGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheSubnetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeCacheSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeCacheSubnetGroupsError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::DescribeCacheSubnetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultParametersError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeEngineDefaultParametersError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeEngineDefaultParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeEventsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeGlobalReplicationGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeGlobalReplicationGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGlobalReplicationGroupsError> for Error {
    fn from(err: crate::error::DescribeGlobalReplicationGroupsError) -> Self {
        match err {
            crate::error::DescribeGlobalReplicationGroupsError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::DescribeGlobalReplicationGroupsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeGlobalReplicationGroupsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeGlobalReplicationGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReplicationGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReplicationGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationGroupsError> for Error {
    fn from(err: crate::error::DescribeReplicationGroupsError) -> Self {
        match err {
            crate::error::DescribeReplicationGroupsError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeReplicationGroupsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeReplicationGroupsError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::DescribeReplicationGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedCacheNodesError> for Error {
    fn from(err: crate::error::DescribeReservedCacheNodesError) -> Self {
        match err {
            crate::error::DescribeReservedCacheNodesError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeReservedCacheNodesError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeReservedCacheNodesError::ReservedCacheNodeNotFoundFault(
                inner,
            ) => Error::ReservedCacheNodeNotFoundFault(inner),
            crate::error::DescribeReservedCacheNodesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedCacheNodesOfferingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedCacheNodesOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedCacheNodesOfferingsError> for Error {
    fn from(err: crate::error::DescribeReservedCacheNodesOfferingsError) -> Self {
        match err {
            crate::error::DescribeReservedCacheNodesOfferingsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeReservedCacheNodesOfferingsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeReservedCacheNodesOfferingsError::ReservedCacheNodesOfferingNotFoundFault(inner) => Error::ReservedCacheNodesOfferingNotFoundFault(inner),
            crate::error::DescribeReservedCacheNodesOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeServiceUpdatesError> for Error {
    fn from(err: crate::error::DescribeServiceUpdatesError) -> Self {
        match err {
            crate::error::DescribeServiceUpdatesError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeServiceUpdatesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeServiceUpdatesError::ServiceUpdateNotFoundFault(inner) => {
                Error::ServiceUpdateNotFoundFault(inner)
            }
            crate::error::DescribeServiceUpdatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSnapshotsError> for Error {
    fn from(err: crate::error::DescribeSnapshotsError) -> Self {
        match err {
            crate::error::DescribeSnapshotsError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::DescribeSnapshotsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeSnapshotsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeSnapshotsError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::DescribeSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUpdateActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUpdateActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUpdateActionsError> for Error {
    fn from(err: crate::error::DescribeUpdateActionsError) -> Self {
        match err {
            crate::error::DescribeUpdateActionsError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeUpdateActionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeUpdateActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserGroupsError> for Error {
    fn from(err: crate::error::DescribeUserGroupsError) -> Self {
        match err {
            crate::error::DescribeUserGroupsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeUserGroupsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeUserGroupsError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::DescribeUserGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUsersError> for Error {
    fn from(err: crate::error::DescribeUsersError) -> Self {
        match err {
            crate::error::DescribeUsersError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeUsersError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeUsersError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::DescribeUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DisassociateGlobalReplicationGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateGlobalReplicationGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::DisassociateGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::DisassociateGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::DisassociateGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::DisassociateGlobalReplicationGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DisassociateGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DisassociateGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::FailoverGlobalReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::FailoverGlobalReplicationGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::FailoverGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::FailoverGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::FailoverGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::FailoverGlobalReplicationGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::FailoverGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::FailoverGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::IncreaseReplicaCountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::IncreaseReplicaCountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::IncreaseReplicaCountError> for Error {
    fn from(err: crate::error::IncreaseReplicaCountError) -> Self {
        match err {
            crate::error::IncreaseReplicaCountError::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
            crate::error::IncreaseReplicaCountError::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
            crate::error::IncreaseReplicaCountError::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
            crate::error::IncreaseReplicaCountError::InvalidKmsKeyFault(inner) => Error::InvalidKmsKeyFault(inner),
            crate::error::IncreaseReplicaCountError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::IncreaseReplicaCountError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::IncreaseReplicaCountError::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
            crate::error::IncreaseReplicaCountError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::IncreaseReplicaCountError::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
            crate::error::IncreaseReplicaCountError::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
            crate::error::IncreaseReplicaCountError::NoOperationFault(inner) => Error::NoOperationFault(inner),
            crate::error::IncreaseReplicaCountError::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
            crate::error::IncreaseReplicaCountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAllowedNodeTypeModificationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAllowedNodeTypeModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAllowedNodeTypeModificationsError> for Error {
    fn from(err: crate::error::ListAllowedNodeTypeModificationsError) -> Self {
        match err {
            crate::error::ListAllowedNodeTypeModificationsError::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
            crate::error::ListAllowedNodeTypeModificationsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::ListAllowedNodeTypeModificationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListAllowedNodeTypeModificationsError::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
            crate::error::ListAllowedNodeTypeModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::InvalidArnFault(inner) => {
                Error::InvalidArnFault(inner)
            }
            crate::error::ListTagsForResourceError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::ListTagsForResourceError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::ReservedCacheNodeNotFoundFault(inner) => {
                Error::ReservedCacheNodeNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyCacheClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyCacheClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCacheClusterError> for Error {
    fn from(err: crate::error::ModifyCacheClusterError) -> Self {
        match err {
            crate::error::ModifyCacheClusterError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::ModifyCacheClusterError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyCacheClusterError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::ModifyCacheClusterError::InsufficientCacheClusterCapacityFault(inner) => {
                Error::InsufficientCacheClusterCapacityFault(inner)
            }
            crate::error::ModifyCacheClusterError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::ModifyCacheClusterError::InvalidCacheSecurityGroupStateFault(inner) => {
                Error::InvalidCacheSecurityGroupStateFault(inner)
            }
            crate::error::ModifyCacheClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::ModifyCacheClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ModifyCacheClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyCacheClusterError::NodeQuotaForClusterExceededFault(inner) => {
                Error::NodeQuotaForClusterExceededFault(inner)
            }
            crate::error::ModifyCacheClusterError::NodeQuotaForCustomerExceededFault(inner) => {
                Error::NodeQuotaForCustomerExceededFault(inner)
            }
            crate::error::ModifyCacheClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyCacheParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyCacheParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCacheParameterGroupError> for Error {
    fn from(err: crate::error::ModifyCacheParameterGroupError) -> Self {
        match err {
            crate::error::ModifyCacheParameterGroupError::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
            crate::error::ModifyCacheParameterGroupError::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
            crate::error::ModifyCacheParameterGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::ModifyCacheParameterGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::ModifyCacheParameterGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ModifyCacheParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyCacheSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyCacheSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCacheSubnetGroupError> for Error {
    fn from(err: crate::error::ModifyCacheSubnetGroupError) -> Self {
        match err {
            crate::error::ModifyCacheSubnetGroupError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyCacheSubnetGroupError::CacheSubnetQuotaExceededFault(inner) => {
                Error::CacheSubnetQuotaExceededFault(inner)
            }
            crate::error::ModifyCacheSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::ModifyCacheSubnetGroupError::SubnetInUse(inner) => {
                Error::SubnetInUse(inner)
            }
            crate::error::ModifyCacheSubnetGroupError::SubnetNotAllowedFault(inner) => {
                Error::SubnetNotAllowedFault(inner)
            }
            crate::error::ModifyCacheSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyGlobalReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyGlobalReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::ModifyGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::ModifyGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::ModifyGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::ModifyGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ModifyGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyReplicationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyReplicationGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyReplicationGroupError> for Error {
    fn from(err: crate::error::ModifyReplicationGroupError) -> Self {
        match err {
            crate::error::ModifyReplicationGroupError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::ModifyReplicationGroupError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyReplicationGroupError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::ModifyReplicationGroupError::InsufficientCacheClusterCapacityFault(
                inner,
            ) => Error::InsufficientCacheClusterCapacityFault(inner),
            crate::error::ModifyReplicationGroupError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::ModifyReplicationGroupError::InvalidCacheSecurityGroupStateFault(
                inner,
            ) => Error::InvalidCacheSecurityGroupStateFault(inner),
            crate::error::ModifyReplicationGroupError::InvalidKmsKeyFault(inner) => {
                Error::InvalidKmsKeyFault(inner)
            }
            crate::error::ModifyReplicationGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::ModifyReplicationGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ModifyReplicationGroupError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::ModifyReplicationGroupError::InvalidUserGroupStateFault(inner) => {
                Error::InvalidUserGroupStateFault(inner)
            }
            crate::error::ModifyReplicationGroupError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyReplicationGroupError::NodeQuotaForClusterExceededFault(inner) => {
                Error::NodeQuotaForClusterExceededFault(inner)
            }
            crate::error::ModifyReplicationGroupError::NodeQuotaForCustomerExceededFault(inner) => {
                Error::NodeQuotaForCustomerExceededFault(inner)
            }
            crate::error::ModifyReplicationGroupError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::ModifyReplicationGroupError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::ModifyReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ModifyReplicationGroupShardConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ModifyReplicationGroupShardConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyReplicationGroupShardConfigurationError> for Error {
    fn from(err: crate::error::ModifyReplicationGroupShardConfigurationError) -> Self {
        match err {
            crate::error::ModifyReplicationGroupShardConfigurationError::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidKmsKeyFault(inner) => Error::InvalidKmsKeyFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
            crate::error::ModifyReplicationGroupShardConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyUserError> for Error {
    fn from(err: crate::error::ModifyUserError) -> Self {
        match err {
            crate::error::ModifyUserError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::ModifyUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ModifyUserError::InvalidUserStateFault(inner) => {
                Error::InvalidUserStateFault(inner)
            }
            crate::error::ModifyUserError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::ModifyUserError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::ModifyUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyUserGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyUserGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyUserGroupError> for Error {
    fn from(err: crate::error::ModifyUserGroupError) -> Self {
        match err {
            crate::error::ModifyUserGroupError::DefaultUserRequired(inner) => {
                Error::DefaultUserRequired(inner)
            }
            crate::error::ModifyUserGroupError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::ModifyUserGroupError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::ModifyUserGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ModifyUserGroupError::InvalidUserGroupStateFault(inner) => {
                Error::InvalidUserGroupStateFault(inner)
            }
            crate::error::ModifyUserGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::ModifyUserGroupError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::ModifyUserGroupError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::ModifyUserGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::PurchaseReservedCacheNodesOfferingError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedCacheNodesOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseReservedCacheNodesOfferingError> for Error {
    fn from(err: crate::error::PurchaseReservedCacheNodesOfferingError) -> Self {
        match err {
            crate::error::PurchaseReservedCacheNodesOfferingError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::ReservedCacheNodeAlreadyExistsFault(inner) => Error::ReservedCacheNodeAlreadyExistsFault(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::ReservedCacheNodeQuotaExceededFault(inner) => Error::ReservedCacheNodeQuotaExceededFault(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::ReservedCacheNodesOfferingNotFoundFault(inner) => Error::ReservedCacheNodesOfferingNotFoundFault(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
            crate::error::PurchaseReservedCacheNodesOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RebalanceSlotsInGlobalReplicationGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RebalanceSlotsInGlobalReplicationGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebalanceSlotsInGlobalReplicationGroupError> for Error {
    fn from(err: crate::error::RebalanceSlotsInGlobalReplicationGroupError) -> Self {
        match err {
            crate::error::RebalanceSlotsInGlobalReplicationGroupError::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
            crate::error::RebalanceSlotsInGlobalReplicationGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::RebalanceSlotsInGlobalReplicationGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::RebalanceSlotsInGlobalReplicationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootCacheClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootCacheClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootCacheClusterError> for Error {
    fn from(err: crate::error::RebootCacheClusterError) -> Self {
        match err {
            crate::error::RebootCacheClusterError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::RebootCacheClusterError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::RebootCacheClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::CacheClusterNotFoundFault(inner) => {
                Error::CacheClusterNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::CacheParameterGroupNotFoundFault(inner) => {
                Error::CacheParameterGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::CacheSecurityGroupNotFoundFault(inner) => {
                Error::CacheSecurityGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::CacheSubnetGroupNotFoundFault(inner) => {
                Error::CacheSubnetGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidArnFault(inner) => {
                Error::InvalidArnFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::ReservedCacheNodeNotFoundFault(inner) => {
                Error::ReservedCacheNodeNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::TagNotFoundFault(inner) => {
                Error::TagNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::UserGroupNotFoundFault(inner) => {
                Error::UserGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetCacheParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetCacheParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetCacheParameterGroupError> for Error {
    fn from(err: crate::error::ResetCacheParameterGroupError) -> Self {
        match err {
            crate::error::ResetCacheParameterGroupError::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
            crate::error::ResetCacheParameterGroupError::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
            crate::error::ResetCacheParameterGroupError::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
            crate::error::ResetCacheParameterGroupError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::ResetCacheParameterGroupError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ResetCacheParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RevokeCacheSecurityGroupIngressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RevokeCacheSecurityGroupIngressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeCacheSecurityGroupIngressError> for Error {
    fn from(err: crate::error::RevokeCacheSecurityGroupIngressError) -> Self {
        match err {
            crate::error::RevokeCacheSecurityGroupIngressError::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
            crate::error::RevokeCacheSecurityGroupIngressError::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
            crate::error::RevokeCacheSecurityGroupIngressError::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
            crate::error::RevokeCacheSecurityGroupIngressError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::RevokeCacheSecurityGroupIngressError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::RevokeCacheSecurityGroupIngressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMigrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartMigrationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMigrationError> for Error {
    fn from(err: crate::error::StartMigrationError) -> Self {
        match err {
            crate::error::StartMigrationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StartMigrationError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::StartMigrationError::ReplicationGroupAlreadyUnderMigrationFault(
                inner,
            ) => Error::ReplicationGroupAlreadyUnderMigrationFault(inner),
            crate::error::StartMigrationError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::StartMigrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestFailoverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TestFailoverError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestFailoverError> for Error {
    fn from(err: crate::error::TestFailoverError) -> Self {
        match err {
            crate::error::TestFailoverError::ApiCallRateForCustomerExceededFault(inner) => {
                Error::ApiCallRateForCustomerExceededFault(inner)
            }
            crate::error::TestFailoverError::InvalidCacheClusterStateFault(inner) => {
                Error::InvalidCacheClusterStateFault(inner)
            }
            crate::error::TestFailoverError::InvalidKmsKeyFault(inner) => {
                Error::InvalidKmsKeyFault(inner)
            }
            crate::error::TestFailoverError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::TestFailoverError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::TestFailoverError::InvalidReplicationGroupStateFault(inner) => {
                Error::InvalidReplicationGroupStateFault(inner)
            }
            crate::error::TestFailoverError::NodeGroupNotFoundFault(inner) => {
                Error::NodeGroupNotFoundFault(inner)
            }
            crate::error::TestFailoverError::ReplicationGroupNotFoundFault(inner) => {
                Error::ReplicationGroupNotFoundFault(inner)
            }
            crate::error::TestFailoverError::TestFailoverNotAvailableFault(inner) => {
                Error::TestFailoverNotAvailableFault(inner)
            }
            crate::error::TestFailoverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ApiCallRateForCustomerExceededFault(e) => e.request_id(),
            Self::AuthorizationAlreadyExistsFault(e) => e.request_id(),
            Self::AuthorizationNotFoundFault(e) => e.request_id(),
            Self::CacheClusterAlreadyExistsFault(e) => e.request_id(),
            Self::CacheClusterNotFoundFault(e) => e.request_id(),
            Self::CacheParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::CacheParameterGroupNotFoundFault(e) => e.request_id(),
            Self::CacheParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::CacheSecurityGroupAlreadyExistsFault(e) => e.request_id(),
            Self::CacheSecurityGroupNotFoundFault(e) => e.request_id(),
            Self::CacheSecurityGroupQuotaExceededFault(e) => e.request_id(),
            Self::CacheSubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::CacheSubnetGroupInUse(e) => e.request_id(),
            Self::CacheSubnetGroupNotFoundFault(e) => e.request_id(),
            Self::CacheSubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::CacheSubnetQuotaExceededFault(e) => e.request_id(),
            Self::ClusterQuotaForCustomerExceededFault(e) => e.request_id(),
            Self::DefaultUserAssociatedToUserGroupFault(e) => e.request_id(),
            Self::DefaultUserRequired(e) => e.request_id(),
            Self::DuplicateUserNameFault(e) => e.request_id(),
            Self::GlobalReplicationGroupAlreadyExistsFault(e) => e.request_id(),
            Self::GlobalReplicationGroupNotFoundFault(e) => e.request_id(),
            Self::InsufficientCacheClusterCapacityFault(e) => e.request_id(),
            Self::InvalidArnFault(e) => e.request_id(),
            Self::InvalidCacheClusterStateFault(e) => e.request_id(),
            Self::InvalidCacheParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidCacheSecurityGroupStateFault(e) => e.request_id(),
            Self::InvalidGlobalReplicationGroupStateFault(e) => e.request_id(),
            Self::InvalidKmsKeyFault(e) => e.request_id(),
            Self::InvalidParameterCombinationException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidReplicationGroupStateFault(e) => e.request_id(),
            Self::InvalidSnapshotStateFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidUserGroupStateFault(e) => e.request_id(),
            Self::InvalidUserStateFault(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::NoOperationFault(e) => e.request_id(),
            Self::NodeGroupNotFoundFault(e) => e.request_id(),
            Self::NodeGroupsPerReplicationGroupQuotaExceededFault(e) => e.request_id(),
            Self::NodeQuotaForClusterExceededFault(e) => e.request_id(),
            Self::NodeQuotaForCustomerExceededFault(e) => e.request_id(),
            Self::ReplicationGroupAlreadyExistsFault(e) => e.request_id(),
            Self::ReplicationGroupAlreadyUnderMigrationFault(e) => e.request_id(),
            Self::ReplicationGroupNotFoundFault(e) => e.request_id(),
            Self::ReplicationGroupNotUnderMigrationFault(e) => e.request_id(),
            Self::ReservedCacheNodeAlreadyExistsFault(e) => e.request_id(),
            Self::ReservedCacheNodeNotFoundFault(e) => e.request_id(),
            Self::ReservedCacheNodeQuotaExceededFault(e) => e.request_id(),
            Self::ReservedCacheNodesOfferingNotFoundFault(e) => e.request_id(),
            Self::ServiceLinkedRoleNotFoundFault(e) => e.request_id(),
            Self::ServiceUpdateNotFoundFault(e) => e.request_id(),
            Self::SnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::SnapshotFeatureNotSupportedFault(e) => e.request_id(),
            Self::SnapshotNotFoundFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SubnetInUse(e) => e.request_id(),
            Self::SubnetNotAllowedFault(e) => e.request_id(),
            Self::TagNotFoundFault(e) => e.request_id(),
            Self::TagQuotaPerResourceExceeded(e) => e.request_id(),
            Self::TestFailoverNotAvailableFault(e) => e.request_id(),
            Self::UserAlreadyExistsFault(e) => e.request_id(),
            Self::UserGroupAlreadyExistsFault(e) => e.request_id(),
            Self::UserGroupNotFoundFault(e) => e.request_id(),
            Self::UserGroupQuotaExceededFault(e) => e.request_id(),
            Self::UserNotFoundFault(e) => e.request_id(),
            Self::UserQuotaExceededFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
