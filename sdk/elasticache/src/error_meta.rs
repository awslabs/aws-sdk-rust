// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ApiCallRateForCustomerExceededFault(crate::error::ApiCallRateForCustomerExceededFault),
    AuthorizationAlreadyExistsFault(crate::error::AuthorizationAlreadyExistsFault),
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    CacheClusterAlreadyExistsFault(crate::error::CacheClusterAlreadyExistsFault),
    CacheClusterNotFoundFault(crate::error::CacheClusterNotFoundFault),
    CacheParameterGroupAlreadyExistsFault(crate::error::CacheParameterGroupAlreadyExistsFault),
    CacheParameterGroupNotFoundFault(crate::error::CacheParameterGroupNotFoundFault),
    CacheParameterGroupQuotaExceededFault(crate::error::CacheParameterGroupQuotaExceededFault),
    CacheSecurityGroupAlreadyExistsFault(crate::error::CacheSecurityGroupAlreadyExistsFault),
    CacheSecurityGroupNotFoundFault(crate::error::CacheSecurityGroupNotFoundFault),
    CacheSecurityGroupQuotaExceededFault(crate::error::CacheSecurityGroupQuotaExceededFault),
    CacheSubnetGroupAlreadyExistsFault(crate::error::CacheSubnetGroupAlreadyExistsFault),
    CacheSubnetGroupInUse(crate::error::CacheSubnetGroupInUse),
    CacheSubnetGroupNotFoundFault(crate::error::CacheSubnetGroupNotFoundFault),
    CacheSubnetGroupQuotaExceededFault(crate::error::CacheSubnetGroupQuotaExceededFault),
    CacheSubnetQuotaExceededFault(crate::error::CacheSubnetQuotaExceededFault),
    ClusterQuotaForCustomerExceededFault(crate::error::ClusterQuotaForCustomerExceededFault),
    DefaultUserAssociatedToUserGroupFault(crate::error::DefaultUserAssociatedToUserGroupFault),
    DefaultUserRequired(crate::error::DefaultUserRequired),
    DuplicateUserNameFault(crate::error::DuplicateUserNameFault),
    GlobalReplicationGroupAlreadyExistsFault(
        crate::error::GlobalReplicationGroupAlreadyExistsFault,
    ),
    GlobalReplicationGroupNotFoundFault(crate::error::GlobalReplicationGroupNotFoundFault),
    InsufficientCacheClusterCapacityFault(crate::error::InsufficientCacheClusterCapacityFault),
    InvalidArnFault(crate::error::InvalidArnFault),
    InvalidCacheClusterStateFault(crate::error::InvalidCacheClusterStateFault),
    InvalidCacheParameterGroupStateFault(crate::error::InvalidCacheParameterGroupStateFault),
    InvalidCacheSecurityGroupStateFault(crate::error::InvalidCacheSecurityGroupStateFault),
    InvalidGlobalReplicationGroupStateFault(crate::error::InvalidGlobalReplicationGroupStateFault),
    InvalidKmsKeyFault(crate::error::InvalidKmsKeyFault),
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    InvalidReplicationGroupStateFault(crate::error::InvalidReplicationGroupStateFault),
    InvalidSnapshotStateFault(crate::error::InvalidSnapshotStateFault),
    InvalidSubnet(crate::error::InvalidSubnet),
    InvalidUserGroupStateFault(crate::error::InvalidUserGroupStateFault),
    InvalidUserStateFault(crate::error::InvalidUserStateFault),
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    NoOperationFault(crate::error::NoOperationFault),
    NodeGroupNotFoundFault(crate::error::NodeGroupNotFoundFault),
    NodeGroupsPerReplicationGroupQuotaExceededFault(
        crate::error::NodeGroupsPerReplicationGroupQuotaExceededFault,
    ),
    NodeQuotaForClusterExceededFault(crate::error::NodeQuotaForClusterExceededFault),
    NodeQuotaForCustomerExceededFault(crate::error::NodeQuotaForCustomerExceededFault),
    ReplicationGroupAlreadyExistsFault(crate::error::ReplicationGroupAlreadyExistsFault),
    ReplicationGroupAlreadyUnderMigrationFault(
        crate::error::ReplicationGroupAlreadyUnderMigrationFault,
    ),
    ReplicationGroupNotFoundFault(crate::error::ReplicationGroupNotFoundFault),
    ReplicationGroupNotUnderMigrationFault(crate::error::ReplicationGroupNotUnderMigrationFault),
    ReservedCacheNodeAlreadyExistsFault(crate::error::ReservedCacheNodeAlreadyExistsFault),
    ReservedCacheNodeNotFoundFault(crate::error::ReservedCacheNodeNotFoundFault),
    ReservedCacheNodeQuotaExceededFault(crate::error::ReservedCacheNodeQuotaExceededFault),
    ReservedCacheNodesOfferingNotFoundFault(crate::error::ReservedCacheNodesOfferingNotFoundFault),
    ServiceLinkedRoleNotFoundFault(crate::error::ServiceLinkedRoleNotFoundFault),
    ServiceUpdateNotFoundFault(crate::error::ServiceUpdateNotFoundFault),
    SnapshotAlreadyExistsFault(crate::error::SnapshotAlreadyExistsFault),
    SnapshotFeatureNotSupportedFault(crate::error::SnapshotFeatureNotSupportedFault),
    SnapshotNotFoundFault(crate::error::SnapshotNotFoundFault),
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    SubnetInUse(crate::error::SubnetInUse),
    SubnetNotAllowedFault(crate::error::SubnetNotAllowedFault),
    TagNotFoundFault(crate::error::TagNotFoundFault),
    TagQuotaPerResourceExceeded(crate::error::TagQuotaPerResourceExceeded),
    TestFailoverNotAvailableFault(crate::error::TestFailoverNotAvailableFault),
    UserAlreadyExistsFault(crate::error::UserAlreadyExistsFault),
    UserGroupAlreadyExistsFault(crate::error::UserGroupAlreadyExistsFault),
    UserGroupNotFoundFault(crate::error::UserGroupNotFoundFault),
    UserGroupQuotaExceededFault(crate::error::UserGroupQuotaExceededFault),
    UserNotFoundFault(crate::error::UserNotFoundFault),
    UserQuotaExceededFault(crate::error::UserQuotaExceededFault),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ApiCallRateForCustomerExceededFault(inner) => inner.fmt(f),
            Error::AuthorizationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::CacheClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheClusterNotFoundFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheSecurityGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupInUse(inner) => inner.fmt(f),
            Error::CacheSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::CacheSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::CacheSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::ClusterQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::DefaultUserAssociatedToUserGroupFault(inner) => inner.fmt(f),
            Error::DefaultUserRequired(inner) => inner.fmt(f),
            Error::DuplicateUserNameFault(inner) => inner.fmt(f),
            Error::GlobalReplicationGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalReplicationGroupNotFoundFault(inner) => inner.fmt(f),
            Error::InsufficientCacheClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidArnFault(inner) => inner.fmt(f),
            Error::InvalidCacheClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidCacheParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidCacheSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalReplicationGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidKmsKeyFault(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidReplicationGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidUserGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidUserStateFault(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::NoOperationFault(inner) => inner.fmt(f),
            Error::NodeGroupNotFoundFault(inner) => inner.fmt(f),
            Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::NodeQuotaForClusterExceededFault(inner) => inner.fmt(f),
            Error::NodeQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::ReplicationGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReplicationGroupAlreadyUnderMigrationFault(inner) => inner.fmt(f),
            Error::ReplicationGroupNotFoundFault(inner) => inner.fmt(f),
            Error::ReplicationGroupNotUnderMigrationFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodeQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedCacheNodesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceUpdateNotFoundFault(inner) => inner.fmt(f),
            Error::SnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::SnapshotFeatureNotSupportedFault(inner) => inner.fmt(f),
            Error::SnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetInUse(inner) => inner.fmt(f),
            Error::SubnetNotAllowedFault(inner) => inner.fmt(f),
            Error::TagNotFoundFault(inner) => inner.fmt(f),
            Error::TagQuotaPerResourceExceeded(inner) => inner.fmt(f),
            Error::TestFailoverNotAvailableFault(inner) => inner.fmt(f),
            Error::UserAlreadyExistsFault(inner) => inner.fmt(f),
            Error::UserGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::UserGroupNotFoundFault(inner) => inner.fmt(f),
            Error::UserGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::UserNotFoundFault(inner) => inner.fmt(f),
            Error::UserQuotaExceededFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsToResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsToResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsToResourceErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::CacheParameterGroupNotFoundFault(
                    inner,
                ) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::AddTagsToResourceErrorKind::CacheSecurityGroupNotFoundFault(
                    inner,
                ) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::AddTagsToResourceErrorKind::CacheSubnetGroupNotFoundFault(inner) => {
                    Error::CacheSubnetGroupNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::InvalidArnFault(inner) => {
                    Error::InvalidArnFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::InvalidReplicationGroupStateFault(
                    inner,
                ) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::AddTagsToResourceErrorKind::ReplicationGroupNotFoundFault(inner) => {
                    Error::ReplicationGroupNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::ReservedCacheNodeNotFoundFault(inner) => {
                    Error::ReservedCacheNodeNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::SnapshotNotFoundFault(inner) => {
                    Error::SnapshotNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::TagQuotaPerResourceExceeded(inner) => {
                    Error::TagQuotaPerResourceExceeded(inner)
                }
                crate::error::AddTagsToResourceErrorKind::UserGroupNotFoundFault(inner) => {
                    Error::UserGroupNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AuthorizeCacheSecurityGroupIngressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AuthorizeCacheSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::AuthorizationAlreadyExistsFault(inner) => Error::AuthorizationAlreadyExistsFault(inner),
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::AuthorizeCacheSecurityGroupIngressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchApplyUpdateActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchApplyUpdateActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchApplyUpdateActionErrorKind::InvalidParameterValueException(
                    inner,
                ) => Error::InvalidParameterValueException(inner),
                crate::error::BatchApplyUpdateActionErrorKind::ServiceUpdateNotFoundFault(
                    inner,
                ) => Error::ServiceUpdateNotFoundFault(inner),
                crate::error::BatchApplyUpdateActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchStopUpdateActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchStopUpdateActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchStopUpdateActionErrorKind::InvalidParameterValueException(
                    inner,
                ) => Error::InvalidParameterValueException(inner),
                crate::error::BatchStopUpdateActionErrorKind::ServiceUpdateNotFoundFault(inner) => {
                    Error::ServiceUpdateNotFoundFault(inner)
                }
                crate::error::BatchStopUpdateActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CompleteMigrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CompleteMigrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CompleteMigrationErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::CompleteMigrationErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::CompleteMigrationErrorKind::ReplicationGroupNotUnderMigrationFault(inner) => Error::ReplicationGroupNotUnderMigrationFault(inner),
                crate::error::CompleteMigrationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopySnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopySnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopySnapshotErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::CopySnapshotErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::CopySnapshotErrorKind::InvalidSnapshotStateFault(inner) => {
                    Error::InvalidSnapshotStateFault(inner)
                }
                crate::error::CopySnapshotErrorKind::SnapshotAlreadyExistsFault(inner) => {
                    Error::SnapshotAlreadyExistsFault(inner)
                }
                crate::error::CopySnapshotErrorKind::SnapshotNotFoundFault(inner) => {
                    Error::SnapshotNotFoundFault(inner)
                }
                crate::error::CopySnapshotErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::CopySnapshotErrorKind::TagQuotaPerResourceExceeded(inner) => {
                    Error::TagQuotaPerResourceExceeded(inner)
                }
                crate::error::CopySnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCacheClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCacheClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCacheClusterErrorKind::CacheClusterAlreadyExistsFault(inner) => Error::CacheClusterAlreadyExistsFault(inner),
                crate::error::CreateCacheClusterErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::CreateCacheClusterErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::CreateCacheClusterErrorKind::CacheSubnetGroupNotFoundFault(inner) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::CreateCacheClusterErrorKind::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
                crate::error::CreateCacheClusterErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::CreateCacheClusterErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateCacheClusterErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::CreateCacheClusterErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::CreateCacheClusterErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::CreateCacheClusterErrorKind::NodeQuotaForClusterExceededFault(inner) => Error::NodeQuotaForClusterExceededFault(inner),
                crate::error::CreateCacheClusterErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::CreateCacheClusterErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::CreateCacheClusterErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::CreateCacheClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCacheParameterGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCacheParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCacheParameterGroupErrorKind::CacheParameterGroupAlreadyExistsFault(inner) => Error::CacheParameterGroupAlreadyExistsFault(inner),
                crate::error::CreateCacheParameterGroupErrorKind::CacheParameterGroupQuotaExceededFault(inner) => Error::CacheParameterGroupQuotaExceededFault(inner),
                crate::error::CreateCacheParameterGroupErrorKind::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
                crate::error::CreateCacheParameterGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateCacheParameterGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::CreateCacheParameterGroupErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::CreateCacheParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCacheSecurityGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCacheSecurityGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCacheSecurityGroupErrorKind::CacheSecurityGroupAlreadyExistsFault(inner) => Error::CacheSecurityGroupAlreadyExistsFault(inner),
                crate::error::CreateCacheSecurityGroupErrorKind::CacheSecurityGroupQuotaExceededFault(inner) => Error::CacheSecurityGroupQuotaExceededFault(inner),
                crate::error::CreateCacheSecurityGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateCacheSecurityGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::CreateCacheSecurityGroupErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::CreateCacheSecurityGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCacheSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCacheSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCacheSubnetGroupErrorKind::CacheSubnetGroupAlreadyExistsFault(inner) => Error::CacheSubnetGroupAlreadyExistsFault(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::CacheSubnetGroupQuotaExceededFault(inner) => Error::CacheSubnetGroupQuotaExceededFault(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::CacheSubnetQuotaExceededFault(inner) => Error::CacheSubnetQuotaExceededFault(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::SubnetNotAllowedFault(inner) => Error::SubnetNotAllowedFault(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::CreateCacheSubnetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateGlobalReplicationGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateGlobalReplicationGroupErrorKind::GlobalReplicationGroupAlreadyExistsFault(inner) => Error::GlobalReplicationGroupAlreadyExistsFault(inner),
                crate::error::CreateGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::CreateGlobalReplicationGroupErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::CreateGlobalReplicationGroupErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::CreateGlobalReplicationGroupErrorKind::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
                crate::error::CreateGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReplicationGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateReplicationGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateReplicationGroupErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::CacheSubnetGroupNotFoundFault(inner) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
                crate::error::CreateReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidUserGroupStateFault(inner) => Error::InvalidUserGroupStateFault(inner),
                crate::error::CreateReplicationGroupErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::CreateReplicationGroupErrorKind::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
                crate::error::CreateReplicationGroupErrorKind::NodeQuotaForClusterExceededFault(inner) => Error::NodeQuotaForClusterExceededFault(inner),
                crate::error::CreateReplicationGroupErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::CreateReplicationGroupErrorKind::ReplicationGroupAlreadyExistsFault(inner) => Error::ReplicationGroupAlreadyExistsFault(inner),
                crate::error::CreateReplicationGroupErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::CreateReplicationGroupErrorKind::UserGroupNotFoundFault(inner) => Error::UserGroupNotFoundFault(inner),
                crate::error::CreateReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSnapshotErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::InvalidCacheClusterStateFault(inner) => {
                    Error::InvalidCacheClusterStateFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateSnapshotErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::CreateSnapshotErrorKind::InvalidReplicationGroupStateFault(inner) => {
                    Error::InvalidReplicationGroupStateFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::ReplicationGroupNotFoundFault(inner) => {
                    Error::ReplicationGroupNotFoundFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::SnapshotAlreadyExistsFault(inner) => {
                    Error::SnapshotAlreadyExistsFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::SnapshotFeatureNotSupportedFault(inner) => {
                    Error::SnapshotFeatureNotSupportedFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::CreateSnapshotErrorKind::TagQuotaPerResourceExceeded(inner) => {
                    Error::TagQuotaPerResourceExceeded(inner)
                }
                crate::error::CreateSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserErrorKind::DuplicateUserNameFault(inner) => {
                    Error::DuplicateUserNameFault(inner)
                }
                crate::error::CreateUserErrorKind::InvalidParameterCombinationException(inner) => {
                    Error::InvalidParameterCombinationException(inner)
                }
                crate::error::CreateUserErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::CreateUserErrorKind::TagQuotaPerResourceExceeded(inner) => {
                    Error::TagQuotaPerResourceExceeded(inner)
                }
                crate::error::CreateUserErrorKind::UserAlreadyExistsFault(inner) => {
                    Error::UserAlreadyExistsFault(inner)
                }
                crate::error::CreateUserErrorKind::UserQuotaExceededFault(inner) => {
                    Error::UserQuotaExceededFault(inner)
                }
                crate::error::CreateUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserGroupErrorKind::DefaultUserRequired(inner) => {
                    Error::DefaultUserRequired(inner)
                }
                crate::error::CreateUserGroupErrorKind::DuplicateUserNameFault(inner) => {
                    Error::DuplicateUserNameFault(inner)
                }
                crate::error::CreateUserGroupErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::CreateUserGroupErrorKind::TagQuotaPerResourceExceeded(inner) => {
                    Error::TagQuotaPerResourceExceeded(inner)
                }
                crate::error::CreateUserGroupErrorKind::UserGroupAlreadyExistsFault(inner) => {
                    Error::UserGroupAlreadyExistsFault(inner)
                }
                crate::error::CreateUserGroupErrorKind::UserGroupQuotaExceededFault(inner) => {
                    Error::UserGroupQuotaExceededFault(inner)
                }
                crate::error::CreateUserGroupErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::CreateUserGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DecreaseNodeGroupsInGlobalReplicationGroupError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DecreaseNodeGroupsInGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::DecreaseNodeGroupsInGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::DecreaseNodeGroupsInGlobalReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DecreaseNodeGroupsInGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DecreaseNodeGroupsInGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DecreaseReplicaCountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DecreaseReplicaCountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DecreaseReplicaCountErrorKind::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DecreaseReplicaCountErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DecreaseReplicaCountErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::NoOperationFault(inner) => Error::NoOperationFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
                crate::error::DecreaseReplicaCountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCacheClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCacheClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCacheClusterErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::DeleteCacheClusterErrorKind::InvalidCacheClusterStateFault(inner) => {
                    Error::InvalidCacheClusterStateFault(inner)
                }
                crate::error::DeleteCacheClusterErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DeleteCacheClusterErrorKind::InvalidParameterValueException(
                    inner,
                ) => Error::InvalidParameterValueException(inner),
                crate::error::DeleteCacheClusterErrorKind::SnapshotAlreadyExistsFault(inner) => {
                    Error::SnapshotAlreadyExistsFault(inner)
                }
                crate::error::DeleteCacheClusterErrorKind::SnapshotFeatureNotSupportedFault(
                    inner,
                ) => Error::SnapshotFeatureNotSupportedFault(inner),
                crate::error::DeleteCacheClusterErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::DeleteCacheClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCacheParameterGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteCacheParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteCacheParameterGroupErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::DeleteCacheParameterGroupErrorKind::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
                crate::error::DeleteCacheParameterGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DeleteCacheParameterGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DeleteCacheParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCacheSecurityGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteCacheSecurityGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteCacheSecurityGroupErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::DeleteCacheSecurityGroupErrorKind::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
                crate::error::DeleteCacheSecurityGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DeleteCacheSecurityGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DeleteCacheSecurityGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCacheSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCacheSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCacheSubnetGroupErrorKind::CacheSubnetGroupInUse(inner) => {
                    Error::CacheSubnetGroupInUse(inner)
                }
                crate::error::DeleteCacheSubnetGroupErrorKind::CacheSubnetGroupNotFoundFault(
                    inner,
                ) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::DeleteCacheSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteGlobalReplicationGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::DeleteGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::DeleteGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DeleteGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReplicationGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteReplicationGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DeleteReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DeleteReplicationGroupErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::DeleteReplicationGroupErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::DeleteReplicationGroupErrorKind::SnapshotAlreadyExistsFault(inner) => Error::SnapshotAlreadyExistsFault(inner),
                crate::error::DeleteReplicationGroupErrorKind::SnapshotFeatureNotSupportedFault(inner) => Error::SnapshotFeatureNotSupportedFault(inner),
                crate::error::DeleteReplicationGroupErrorKind::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
                crate::error::DeleteReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSnapshotErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DeleteSnapshotErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::DeleteSnapshotErrorKind::InvalidSnapshotStateFault(inner) => {
                    Error::InvalidSnapshotStateFault(inner)
                }
                crate::error::DeleteSnapshotErrorKind::SnapshotNotFoundFault(inner) => {
                    Error::SnapshotNotFoundFault(inner)
                }
                crate::error::DeleteSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserErrorKind::DefaultUserAssociatedToUserGroupFault(inner) => {
                    Error::DefaultUserAssociatedToUserGroupFault(inner)
                }
                crate::error::DeleteUserErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::DeleteUserErrorKind::InvalidUserStateFault(inner) => {
                    Error::InvalidUserStateFault(inner)
                }
                crate::error::DeleteUserErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::DeleteUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserGroupErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::DeleteUserGroupErrorKind::InvalidUserGroupStateFault(inner) => {
                    Error::InvalidUserGroupStateFault(inner)
                }
                crate::error::DeleteUserGroupErrorKind::UserGroupNotFoundFault(inner) => {
                    Error::UserGroupNotFoundFault(inner)
                }
                crate::error::DeleteUserGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCacheClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCacheClustersErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::DescribeCacheClustersErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeCacheClustersErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeCacheClustersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheEngineVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCacheEngineVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCacheEngineVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheParameterGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCacheParameterGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCacheParameterGroupsErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::DescribeCacheParameterGroupsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeCacheParameterGroupsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeCacheParameterGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheParametersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCacheParametersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCacheParametersErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::DescribeCacheParametersErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeCacheParametersErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeCacheParametersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheSecurityGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCacheSecurityGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCacheSecurityGroupsErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::DescribeCacheSecurityGroupsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeCacheSecurityGroupsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeCacheSecurityGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCacheSubnetGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCacheSubnetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCacheSubnetGroupsErrorKind::CacheSubnetGroupNotFoundFault(
                    inner,
                ) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::DescribeCacheSubnetGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEngineDefaultParametersErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeEngineDefaultParametersErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeEngineDefaultParametersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventsErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeEventsErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::DescribeEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeGlobalReplicationGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeGlobalReplicationGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeGlobalReplicationGroupsErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::DescribeGlobalReplicationGroupsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeGlobalReplicationGroupsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeGlobalReplicationGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplicationGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReplicationGroupsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeReplicationGroupsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeReplicationGroupsErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::DescribeReplicationGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReservedCacheNodesErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeReservedCacheNodesErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeReservedCacheNodesErrorKind::ReservedCacheNodeNotFoundFault(inner) => Error::ReservedCacheNodeNotFoundFault(inner),
                crate::error::DescribeReservedCacheNodesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesOfferingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedCacheNodesOfferingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReservedCacheNodesOfferingsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeReservedCacheNodesOfferingsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeReservedCacheNodesOfferingsErrorKind::ReservedCacheNodesOfferingNotFoundFault(inner) => Error::ReservedCacheNodesOfferingNotFoundFault(inner),
                crate::error::DescribeReservedCacheNodesOfferingsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeServiceUpdatesErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeServiceUpdatesErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeServiceUpdatesErrorKind::ServiceUpdateNotFoundFault(inner) => Error::ServiceUpdateNotFoundFault(inner),
                crate::error::DescribeServiceUpdatesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSnapshotsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSnapshotsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSnapshotsErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::DescribeSnapshotsErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeSnapshotsErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::DescribeSnapshotsErrorKind::SnapshotNotFoundFault(inner) => {
                    Error::SnapshotNotFoundFault(inner)
                }
                crate::error::DescribeSnapshotsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUpdateActionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUpdateActionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeUpdateActionsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeUpdateActionsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DescribeUpdateActionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserGroupsErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeUserGroupsErrorKind::UserGroupNotFoundFault(inner) => {
                    Error::UserGroupNotFoundFault(inner)
                }
                crate::error::DescribeUserGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUsersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUsersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUsersErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::DescribeUsersErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::DescribeUsersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateGlobalReplicationGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisassociateGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::DisassociateGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::DisassociateGlobalReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::DisassociateGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::DisassociateGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FailoverGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::FailoverGlobalReplicationGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::FailoverGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::FailoverGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::FailoverGlobalReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::FailoverGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::FailoverGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::IncreaseNodeGroupsInGlobalReplicationGroupError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::IncreaseNodeGroupsInGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::IncreaseNodeGroupsInGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::IncreaseNodeGroupsInGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::IncreaseNodeGroupsInGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::IncreaseReplicaCountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::IncreaseReplicaCountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::IncreaseReplicaCountErrorKind::ClusterQuotaForCustomerExceededFault(inner) => Error::ClusterQuotaForCustomerExceededFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidKmsKeyFault(inner) => Error::InvalidKmsKeyFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::NoOperationFault(inner) => Error::NoOperationFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::IncreaseReplicaCountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAllowedNodeTypeModificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAllowedNodeTypeModificationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListAllowedNodeTypeModificationsErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::ListAllowedNodeTypeModificationsErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ListAllowedNodeTypeModificationsErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ListAllowedNodeTypeModificationsErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::ListAllowedNodeTypeModificationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::CacheParameterGroupNotFoundFault(
                    inner,
                ) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::CacheSecurityGroupNotFoundFault(
                    inner,
                ) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::CacheSubnetGroupNotFoundFault(
                    inner,
                ) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::InvalidArnFault(inner) => {
                    Error::InvalidArnFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InvalidReplicationGroupStateFault(
                    inner,
                ) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::ListTagsForResourceErrorKind::ReplicationGroupNotFoundFault(
                    inner,
                ) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::ReservedCacheNodeNotFoundFault(
                    inner,
                ) => Error::ReservedCacheNodeNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::SnapshotNotFoundFault(inner) => {
                    Error::SnapshotNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::UserGroupNotFoundFault(inner) => {
                    Error::UserGroupNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCacheClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyCacheClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyCacheClusterErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::ModifyCacheClusterErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::ModifyCacheClusterErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::ModifyCacheClusterErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::ModifyCacheClusterErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::ModifyCacheClusterErrorKind::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
                crate::error::ModifyCacheClusterErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ModifyCacheClusterErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ModifyCacheClusterErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::ModifyCacheClusterErrorKind::NodeQuotaForClusterExceededFault(inner) => Error::NodeQuotaForClusterExceededFault(inner),
                crate::error::ModifyCacheClusterErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::ModifyCacheClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCacheParameterGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyCacheParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyCacheParameterGroupErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::ModifyCacheParameterGroupErrorKind::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
                crate::error::ModifyCacheParameterGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::ModifyCacheParameterGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ModifyCacheParameterGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ModifyCacheParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCacheSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyCacheSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyCacheSubnetGroupErrorKind::CacheSubnetGroupNotFoundFault(
                    inner,
                ) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::ModifyCacheSubnetGroupErrorKind::CacheSubnetQuotaExceededFault(
                    inner,
                ) => Error::CacheSubnetQuotaExceededFault(inner),
                crate::error::ModifyCacheSubnetGroupErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::ModifyCacheSubnetGroupErrorKind::SubnetInUse(inner) => {
                    Error::SubnetInUse(inner)
                }
                crate::error::ModifyCacheSubnetGroupErrorKind::SubnetNotAllowedFault(inner) => {
                    Error::SubnetNotAllowedFault(inner)
                }
                crate::error::ModifyCacheSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyGlobalReplicationGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::ModifyGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::ModifyGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ModifyGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyReplicationGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyReplicationGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyReplicationGroupErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidKmsKeyFault(inner) => Error::InvalidKmsKeyFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidUserGroupStateFault(inner) => Error::InvalidUserGroupStateFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::NodeQuotaForClusterExceededFault(inner) => Error::NodeQuotaForClusterExceededFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::UserGroupNotFoundFault(inner) => Error::UserGroupNotFoundFault(inner),
                crate::error::ModifyReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::ModifyReplicationGroupShardConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyReplicationGroupShardConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InsufficientCacheClusterCapacityFault(inner) => Error::InsufficientCacheClusterCapacityFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidCacheClusterStateFault(inner) => Error::InvalidCacheClusterStateFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidKmsKeyFault(inner) => Error::InvalidKmsKeyFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::NodeGroupsPerReplicationGroupQuotaExceededFault(inner) => Error::NodeGroupsPerReplicationGroupQuotaExceededFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::NodeQuotaForCustomerExceededFault(inner) => Error::NodeQuotaForCustomerExceededFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::ModifyReplicationGroupShardConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyUserErrorKind::InvalidParameterCombinationException(inner) => {
                    Error::InvalidParameterCombinationException(inner)
                }
                crate::error::ModifyUserErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::ModifyUserErrorKind::InvalidUserStateFault(inner) => {
                    Error::InvalidUserStateFault(inner)
                }
                crate::error::ModifyUserErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::ModifyUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyUserGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyUserGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyUserGroupErrorKind::DefaultUserRequired(inner) => {
                    Error::DefaultUserRequired(inner)
                }
                crate::error::ModifyUserGroupErrorKind::DuplicateUserNameFault(inner) => {
                    Error::DuplicateUserNameFault(inner)
                }
                crate::error::ModifyUserGroupErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::ModifyUserGroupErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::ModifyUserGroupErrorKind::InvalidUserGroupStateFault(inner) => {
                    Error::InvalidUserGroupStateFault(inner)
                }
                crate::error::ModifyUserGroupErrorKind::UserGroupNotFoundFault(inner) => {
                    Error::UserGroupNotFoundFault(inner)
                }
                crate::error::ModifyUserGroupErrorKind::UserNotFoundFault(inner) => {
                    Error::UserNotFoundFault(inner)
                }
                crate::error::ModifyUserGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseReservedCacheNodesOfferingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PurchaseReservedCacheNodesOfferingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::ReservedCacheNodeAlreadyExistsFault(inner) => Error::ReservedCacheNodeAlreadyExistsFault(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::ReservedCacheNodeQuotaExceededFault(inner) => Error::ReservedCacheNodeQuotaExceededFault(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::ReservedCacheNodesOfferingNotFoundFault(inner) => Error::ReservedCacheNodesOfferingNotFoundFault(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
                crate::error::PurchaseReservedCacheNodesOfferingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebalanceSlotsInGlobalReplicationGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RebalanceSlotsInGlobalReplicationGroupError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RebalanceSlotsInGlobalReplicationGroupErrorKind::GlobalReplicationGroupNotFoundFault(inner) => Error::GlobalReplicationGroupNotFoundFault(inner),
                crate::error::RebalanceSlotsInGlobalReplicationGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::RebalanceSlotsInGlobalReplicationGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::RebalanceSlotsInGlobalReplicationGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebootCacheClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RebootCacheClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RebootCacheClusterErrorKind::CacheClusterNotFoundFault(inner) => {
                    Error::CacheClusterNotFoundFault(inner)
                }
                crate::error::RebootCacheClusterErrorKind::InvalidCacheClusterStateFault(inner) => {
                    Error::InvalidCacheClusterStateFault(inner)
                }
                crate::error::RebootCacheClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RemoveTagsFromResourceErrorKind::CacheClusterNotFoundFault(inner) => Error::CacheClusterNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::CacheSubnetGroupNotFoundFault(inner) => Error::CacheSubnetGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::InvalidArnFault(inner) => Error::InvalidArnFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::ReservedCacheNodeNotFoundFault(inner) => Error::ReservedCacheNodeNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::SnapshotNotFoundFault(inner) => Error::SnapshotNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::TagNotFoundFault(inner) => Error::TagNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::UserGroupNotFoundFault(inner) => Error::UserGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::UserNotFoundFault(inner) => Error::UserNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetCacheParameterGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetCacheParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ResetCacheParameterGroupErrorKind::CacheParameterGroupNotFoundFault(inner) => Error::CacheParameterGroupNotFoundFault(inner),
                crate::error::ResetCacheParameterGroupErrorKind::InvalidCacheParameterGroupStateFault(inner) => Error::InvalidCacheParameterGroupStateFault(inner),
                crate::error::ResetCacheParameterGroupErrorKind::InvalidGlobalReplicationGroupStateFault(inner) => Error::InvalidGlobalReplicationGroupStateFault(inner),
                crate::error::ResetCacheParameterGroupErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::ResetCacheParameterGroupErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::ResetCacheParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeCacheSecurityGroupIngressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RevokeCacheSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::CacheSecurityGroupNotFoundFault(inner) => Error::CacheSecurityGroupNotFoundFault(inner),
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::InvalidCacheSecurityGroupStateFault(inner) => Error::InvalidCacheSecurityGroupStateFault(inner),
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::RevokeCacheSecurityGroupIngressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartMigrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartMigrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartMigrationErrorKind::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
                crate::error::StartMigrationErrorKind::InvalidReplicationGroupStateFault(inner) => Error::InvalidReplicationGroupStateFault(inner),
                crate::error::StartMigrationErrorKind::ReplicationGroupAlreadyUnderMigrationFault(inner) => Error::ReplicationGroupAlreadyUnderMigrationFault(inner),
                crate::error::StartMigrationErrorKind::ReplicationGroupNotFoundFault(inner) => Error::ReplicationGroupNotFoundFault(inner),
                crate::error::StartMigrationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestFailoverError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestFailoverError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestFailoverErrorKind::ApiCallRateForCustomerExceededFault(inner) => {
                    Error::ApiCallRateForCustomerExceededFault(inner)
                }
                crate::error::TestFailoverErrorKind::InvalidCacheClusterStateFault(inner) => {
                    Error::InvalidCacheClusterStateFault(inner)
                }
                crate::error::TestFailoverErrorKind::InvalidKmsKeyFault(inner) => {
                    Error::InvalidKmsKeyFault(inner)
                }
                crate::error::TestFailoverErrorKind::InvalidParameterCombinationException(
                    inner,
                ) => Error::InvalidParameterCombinationException(inner),
                crate::error::TestFailoverErrorKind::InvalidParameterValueException(inner) => {
                    Error::InvalidParameterValueException(inner)
                }
                crate::error::TestFailoverErrorKind::InvalidReplicationGroupStateFault(inner) => {
                    Error::InvalidReplicationGroupStateFault(inner)
                }
                crate::error::TestFailoverErrorKind::NodeGroupNotFoundFault(inner) => {
                    Error::NodeGroupNotFoundFault(inner)
                }
                crate::error::TestFailoverErrorKind::ReplicationGroupNotFoundFault(inner) => {
                    Error::ReplicationGroupNotFoundFault(inner)
                }
                crate::error::TestFailoverErrorKind::TestFailoverNotAvailableFault(inner) => {
                    Error::TestFailoverNotAvailableFault(inner)
                }
                crate::error::TestFailoverErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
