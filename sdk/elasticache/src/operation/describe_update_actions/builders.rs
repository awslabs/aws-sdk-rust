// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_update_actions::_describe_update_actions_output::DescribeUpdateActionsOutputBuilder;

pub use crate::operation::describe_update_actions::_describe_update_actions_input::DescribeUpdateActionsInputBuilder;

/// Fluent builder constructing a request to `DescribeUpdateActions`.
///
/// <p>Returns details of the update actions </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeUpdateActionsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_update_actions::builders::DescribeUpdateActionsInputBuilder,
}
impl DescribeUpdateActionsFluentBuilder {
    /// Creates a new `DescribeUpdateActions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_update_actions::DescribeUpdateActions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_update_actions::DescribeUpdateActionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_update_actions::DescribeUpdateActionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_update_actions::DescribeUpdateActionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_update_actions::paginator::DescribeUpdateActionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_update_actions::paginator::DescribeUpdateActionsPaginator {
        crate::operation::describe_update_actions::paginator::DescribeUpdateActionsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_update_name(input.into());
        self
    }
    /// <p>The unique ID of the service update</p>
    pub fn set_service_update_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_update_name(input);
        self
    }
    /// Appends an item to `ReplicationGroupIds`.
    ///
    /// To override the contents of this collection use [`set_replication_group_ids`](Self::set_replication_group_ids).
    ///
    /// <p>The replication group IDs</p>
    pub fn replication_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.replication_group_ids(input.into());
        self
    }
    /// <p>The replication group IDs</p>
    pub fn set_replication_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_replication_group_ids(input);
        self
    }
    /// Appends an item to `CacheClusterIds`.
    ///
    /// To override the contents of this collection use [`set_cache_cluster_ids`](Self::set_cache_cluster_ids).
    ///
    /// <p>The cache cluster IDs</p>
    pub fn cache_cluster_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cache_cluster_ids(input.into());
        self
    }
    /// <p>The cache cluster IDs</p>
    pub fn set_cache_cluster_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_cache_cluster_ids(input);
        self
    }
    /// <p>The Elasticache engine to which the update applies. Either Redis or Memcached </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The Elasticache engine to which the update applies. Either Redis or Memcached </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// Appends an item to `ServiceUpdateStatus`.
    ///
    /// To override the contents of this collection use [`set_service_update_status`](Self::set_service_update_status).
    ///
    /// <p>The status of the service update</p>
    pub fn service_update_status(mut self, input: crate::types::ServiceUpdateStatus) -> Self {
        self.inner = self.inner.service_update_status(input);
        self
    }
    /// <p>The status of the service update</p>
    pub fn set_service_update_status(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ServiceUpdateStatus>>,
    ) -> Self {
        self.inner = self.inner.set_service_update_status(input);
        self
    }
    /// <p>The range of time specified to search for service updates that are in available status</p>
    pub fn service_update_time_range(mut self, input: crate::types::TimeRangeFilter) -> Self {
        self.inner = self.inner.service_update_time_range(input);
        self
    }
    /// <p>The range of time specified to search for service updates that are in available status</p>
    pub fn set_service_update_time_range(
        mut self,
        input: std::option::Option<crate::types::TimeRangeFilter>,
    ) -> Self {
        self.inner = self.inner.set_service_update_time_range(input);
        self
    }
    /// Appends an item to `UpdateActionStatus`.
    ///
    /// To override the contents of this collection use [`set_update_action_status`](Self::set_update_action_status).
    ///
    /// <p>The status of the update action.</p>
    pub fn update_action_status(mut self, input: crate::types::UpdateActionStatus) -> Self {
        self.inner = self.inner.update_action_status(input);
        self
    }
    /// <p>The status of the update action.</p>
    pub fn set_update_action_status(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UpdateActionStatus>>,
    ) -> Self {
        self.inner = self.inner.set_update_action_status(input);
        self
    }
    /// <p>Dictates whether to include node level update status in the response </p>
    pub fn show_node_level_update_status(mut self, input: bool) -> Self {
        self.inner = self.inner.show_node_level_update_status(input);
        self
    }
    /// <p>Dictates whether to include node level update status in the response </p>
    pub fn set_show_node_level_update_status(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_show_node_level_update_status(input);
        self
    }
    /// <p>The maximum number of records to include in the response</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
}
