// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeUpdateActionsOutput {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Returns a list of update actions</p>
    #[doc(hidden)]
    pub update_actions: std::option::Option<std::vec::Vec<crate::types::UpdateAction>>,
    _request_id: Option<String>,
}
impl DescribeUpdateActionsOutput {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Returns a list of update actions</p>
    pub fn update_actions(&self) -> std::option::Option<&[crate::types::UpdateAction]> {
        self.update_actions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeUpdateActionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeUpdateActionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUpdateActionsOutput`](crate::operation::describe_update_actions::DescribeUpdateActionsOutput).
    pub fn builder(
    ) -> crate::operation::describe_update_actions::builders::DescribeUpdateActionsOutputBuilder
    {
        crate::operation::describe_update_actions::builders::DescribeUpdateActionsOutputBuilder::default()
    }
}

/// A builder for [`DescribeUpdateActionsOutput`](crate::operation::describe_update_actions::DescribeUpdateActionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeUpdateActionsOutputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) update_actions: std::option::Option<std::vec::Vec<crate::types::UpdateAction>>,
    _request_id: Option<String>,
}
impl DescribeUpdateActionsOutputBuilder {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Appends an item to `update_actions`.
    ///
    /// To override the contents of this collection use [`set_update_actions`](Self::set_update_actions).
    ///
    /// <p>Returns a list of update actions</p>
    pub fn update_actions(mut self, input: crate::types::UpdateAction) -> Self {
        let mut v = self.update_actions.unwrap_or_default();
        v.push(input);
        self.update_actions = Some(v);
        self
    }
    /// <p>Returns a list of update actions</p>
    pub fn set_update_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UpdateAction>>,
    ) -> Self {
        self.update_actions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeUpdateActionsOutput`](crate::operation::describe_update_actions::DescribeUpdateActionsOutput).
    pub fn build(self) -> crate::operation::describe_update_actions::DescribeUpdateActionsOutput {
        crate::operation::describe_update_actions::DescribeUpdateActionsOutput {
            marker: self.marker,
            update_actions: self.update_actions,
            _request_id: self._request_id,
        }
    }
}
