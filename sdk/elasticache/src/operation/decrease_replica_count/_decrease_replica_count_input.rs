// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DecreaseReplicaCountInput {
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    pub replication_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ is enabled: 1</p> </li>
    /// <li> <p>If Multi-AZ is not enabled: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub new_replica_count: ::std::option::Option<i32>,
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    pub replica_configuration: ::std::option::Option<::std::vec::Vec<crate::types::ConfigureShard>>,
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    pub replicas_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</p>
    pub apply_immediately: ::std::option::Option<bool>,
}
impl DecreaseReplicaCountInput {
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    pub fn replication_group_id(&self) -> ::std::option::Option<&str> {
        self.replication_group_id.as_deref()
    }
    /// <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ is enabled: 1</p> </li>
    /// <li> <p>If Multi-AZ is not enabled: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn new_replica_count(&self) -> ::std::option::Option<i32> {
        self.new_replica_count
    }
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replica_configuration.is_none()`.
    pub fn replica_configuration(&self) -> &[crate::types::ConfigureShard] {
        self.replica_configuration.as_deref().unwrap_or_default()
    }
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replicas_to_remove.is_none()`.
    pub fn replicas_to_remove(&self) -> &[::std::string::String] {
        self.replicas_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</p>
    pub fn apply_immediately(&self) -> ::std::option::Option<bool> {
        self.apply_immediately
    }
}
impl DecreaseReplicaCountInput {
    /// Creates a new builder-style object to manufacture [`DecreaseReplicaCountInput`](crate::operation::decrease_replica_count::DecreaseReplicaCountInput).
    pub fn builder() -> crate::operation::decrease_replica_count::builders::DecreaseReplicaCountInputBuilder {
        crate::operation::decrease_replica_count::builders::DecreaseReplicaCountInputBuilder::default()
    }
}

/// A builder for [`DecreaseReplicaCountInput`](crate::operation::decrease_replica_count::DecreaseReplicaCountInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DecreaseReplicaCountInputBuilder {
    pub(crate) replication_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) new_replica_count: ::std::option::Option<i32>,
    pub(crate) replica_configuration: ::std::option::Option<::std::vec::Vec<crate::types::ConfigureShard>>,
    pub(crate) replicas_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) apply_immediately: ::std::option::Option<bool>,
}
impl DecreaseReplicaCountInputBuilder {
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    /// This field is required.
    pub fn replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    pub fn set_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_group_id = input;
        self
    }
    /// <p>The id of the replication group from which you want to remove replica nodes.</p>
    pub fn get_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_group_id
    }
    /// <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ is enabled: 1</p> </li>
    /// <li> <p>If Multi-AZ is not enabled: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn new_replica_count(mut self, input: i32) -> Self {
        self.new_replica_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ is enabled: 1</p> </li>
    /// <li> <p>If Multi-AZ is not enabled: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn set_new_replica_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.new_replica_count = input;
        self
    }
    /// <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p>
    /// <p>The minimum number of replicas in a shard or replication group is:</p>
    /// <ul>
    /// <li> <p>Redis (cluster mode disabled)</p>
    /// <ul>
    /// <li> <p>If Multi-AZ is enabled: 1</p> </li>
    /// <li> <p>If Multi-AZ is not enabled: 0</p> </li>
    /// </ul> </li>
    /// <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li>
    /// </ul>
    pub fn get_new_replica_count(&self) -> &::std::option::Option<i32> {
        &self.new_replica_count
    }
    /// Appends an item to `replica_configuration`.
    ///
    /// To override the contents of this collection use [`set_replica_configuration`](Self::set_replica_configuration).
    ///
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    pub fn replica_configuration(mut self, input: crate::types::ConfigureShard) -> Self {
        let mut v = self.replica_configuration.unwrap_or_default();
        v.push(input);
        self.replica_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    pub fn set_replica_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigureShard>>) -> Self {
        self.replica_configuration = input;
        self
    }
    /// <p>A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</p>
    pub fn get_replica_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigureShard>> {
        &self.replica_configuration
    }
    /// Appends an item to `replicas_to_remove`.
    ///
    /// To override the contents of this collection use [`set_replicas_to_remove`](Self::set_replicas_to_remove).
    ///
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    pub fn replicas_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replicas_to_remove.unwrap_or_default();
        v.push(input.into());
        self.replicas_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    pub fn set_replicas_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replicas_to_remove = input;
        self
    }
    /// <p>A list of the node ids to remove from the replication group or node group (shard).</p>
    pub fn get_replicas_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replicas_to_remove
    }
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</p>
    /// This field is required.
    pub fn apply_immediately(mut self, input: bool) -> Self {
        self.apply_immediately = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</p>
    pub fn set_apply_immediately(mut self, input: ::std::option::Option<bool>) -> Self {
        self.apply_immediately = input;
        self
    }
    /// <p>If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</p>
    pub fn get_apply_immediately(&self) -> &::std::option::Option<bool> {
        &self.apply_immediately
    }
    /// Consumes the builder and constructs a [`DecreaseReplicaCountInput`](crate::operation::decrease_replica_count::DecreaseReplicaCountInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::decrease_replica_count::DecreaseReplicaCountInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::decrease_replica_count::DecreaseReplicaCountInput {
            replication_group_id: self.replication_group_id,
            new_replica_count: self.new_replica_count,
            replica_configuration: self.replica_configuration,
            replicas_to_remove: self.replicas_to_remove,
            apply_immediately: self.apply_immediately,
        })
    }
}
