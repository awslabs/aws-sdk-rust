// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeServiceUpdatesOutput {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A list of service updates</p>
    pub service_updates: ::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdate>>,
    _request_id: Option<String>,
}
impl DescribeServiceUpdatesOutput {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A list of service updates</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_updates.is_none()`.
    pub fn service_updates(&self) -> &[crate::types::ServiceUpdate] {
        self.service_updates.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeServiceUpdatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServiceUpdatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServiceUpdatesOutput`](crate::operation::describe_service_updates::DescribeServiceUpdatesOutput).
    pub fn builder() -> crate::operation::describe_service_updates::builders::DescribeServiceUpdatesOutputBuilder {
        crate::operation::describe_service_updates::builders::DescribeServiceUpdatesOutputBuilder::default()
    }
}

/// A builder for [`DescribeServiceUpdatesOutput`](crate::operation::describe_service_updates::DescribeServiceUpdatesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeServiceUpdatesOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) service_updates: ::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdate>>,
    _request_id: Option<String>,
}
impl DescribeServiceUpdatesOutputBuilder {
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `service_updates`.
    ///
    /// To override the contents of this collection use [`set_service_updates`](Self::set_service_updates).
    ///
    /// <p>A list of service updates</p>
    pub fn service_updates(mut self, input: crate::types::ServiceUpdate) -> Self {
        let mut v = self.service_updates.unwrap_or_default();
        v.push(input);
        self.service_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of service updates</p>
    pub fn set_service_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdate>>) -> Self {
        self.service_updates = input;
        self
    }
    /// <p>A list of service updates</p>
    pub fn get_service_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdate>> {
        &self.service_updates
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeServiceUpdatesOutput`](crate::operation::describe_service_updates::DescribeServiceUpdatesOutput).
    pub fn build(self) -> crate::operation::describe_service_updates::DescribeServiceUpdatesOutput {
        crate::operation::describe_service_updates::DescribeServiceUpdatesOutput {
            marker: self.marker,
            service_updates: self.service_updates,
            _request_id: self._request_id,
        }
    }
}
