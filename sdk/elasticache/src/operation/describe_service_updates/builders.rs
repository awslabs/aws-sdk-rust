// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_service_updates::_describe_service_updates_output::DescribeServiceUpdatesOutputBuilder;

pub use crate::operation::describe_service_updates::_describe_service_updates_input::DescribeServiceUpdatesInputBuilder;

impl crate::operation::describe_service_updates::builders::DescribeServiceUpdatesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_service_updates::DescribeServiceUpdatesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_service_updates();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeServiceUpdates`.
///
/// <p>Returns details of the service updates</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeServiceUpdatesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_service_updates::builders::DescribeServiceUpdatesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
        crate::operation::describe_service_updates::DescribeServiceUpdatesError,
    > for DescribeServiceUpdatesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
            crate::operation::describe_service_updates::DescribeServiceUpdatesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeServiceUpdatesFluentBuilder {
    /// Creates a new `DescribeServiceUpdates`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeServiceUpdates as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_service_updates::builders::DescribeServiceUpdatesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_service_updates::DescribeServiceUpdatesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_service_updates::DescribeServiceUpdates::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_service_updates::DescribeServiceUpdates::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
        crate::operation::describe_service_updates::DescribeServiceUpdatesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_service_updates::paginator::DescribeServiceUpdatesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_service_updates::paginator::DescribeServiceUpdatesPaginator {
        crate::operation::describe_service_updates::paginator::DescribeServiceUpdatesPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_update_name(input.into());
        self
    }
    /// <p>The unique ID of the service update</p>
    pub fn set_service_update_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_update_name(input);
        self
    }
    /// <p>The unique ID of the service update</p>
    pub fn get_service_update_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_update_name()
    }
    ///
    /// Appends an item to `ServiceUpdateStatus`.
    ///
    /// To override the contents of this collection use [`set_service_update_status`](Self::set_service_update_status).
    ///
    /// <p>The status of the service update</p>
    pub fn service_update_status(mut self, input: crate::types::ServiceUpdateStatus) -> Self {
        self.inner = self.inner.service_update_status(input);
        self
    }
    /// <p>The status of the service update</p>
    pub fn set_service_update_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdateStatus>>) -> Self {
        self.inner = self.inner.set_service_update_status(input);
        self
    }
    /// <p>The status of the service update</p>
    pub fn get_service_update_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdateStatus>> {
        self.inner.get_service_update_status()
    }
    /// <p>The maximum number of records to include in the response</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_records()
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
}
