// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchStopUpdateActionOutput {
    /// <p>Update actions that have been processed successfully</p>
    pub processed_update_actions: ::std::option::Option<::std::vec::Vec<crate::types::ProcessedUpdateAction>>,
    /// <p>Update actions that haven't been processed successfully</p>
    pub unprocessed_update_actions: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedUpdateAction>>,
    _request_id: Option<String>,
}
impl BatchStopUpdateActionOutput {
    /// <p>Update actions that have been processed successfully</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.processed_update_actions.is_none()`.
    pub fn processed_update_actions(&self) -> &[crate::types::ProcessedUpdateAction] {
        self.processed_update_actions.as_deref().unwrap_or_default()
    }
    /// <p>Update actions that haven't been processed successfully</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_update_actions.is_none()`.
    pub fn unprocessed_update_actions(&self) -> &[crate::types::UnprocessedUpdateAction] {
        self.unprocessed_update_actions.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchStopUpdateActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchStopUpdateActionOutput {
    /// Creates a new builder-style object to manufacture [`BatchStopUpdateActionOutput`](crate::operation::batch_stop_update_action::BatchStopUpdateActionOutput).
    pub fn builder() -> crate::operation::batch_stop_update_action::builders::BatchStopUpdateActionOutputBuilder {
        crate::operation::batch_stop_update_action::builders::BatchStopUpdateActionOutputBuilder::default()
    }
}

/// A builder for [`BatchStopUpdateActionOutput`](crate::operation::batch_stop_update_action::BatchStopUpdateActionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchStopUpdateActionOutputBuilder {
    pub(crate) processed_update_actions: ::std::option::Option<::std::vec::Vec<crate::types::ProcessedUpdateAction>>,
    pub(crate) unprocessed_update_actions: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedUpdateAction>>,
    _request_id: Option<String>,
}
impl BatchStopUpdateActionOutputBuilder {
    /// Appends an item to `processed_update_actions`.
    ///
    /// To override the contents of this collection use [`set_processed_update_actions`](Self::set_processed_update_actions).
    ///
    /// <p>Update actions that have been processed successfully</p>
    pub fn processed_update_actions(mut self, input: crate::types::ProcessedUpdateAction) -> Self {
        let mut v = self.processed_update_actions.unwrap_or_default();
        v.push(input);
        self.processed_update_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Update actions that have been processed successfully</p>
    pub fn set_processed_update_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProcessedUpdateAction>>) -> Self {
        self.processed_update_actions = input;
        self
    }
    /// <p>Update actions that have been processed successfully</p>
    pub fn get_processed_update_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProcessedUpdateAction>> {
        &self.processed_update_actions
    }
    /// Appends an item to `unprocessed_update_actions`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_update_actions`](Self::set_unprocessed_update_actions).
    ///
    /// <p>Update actions that haven't been processed successfully</p>
    pub fn unprocessed_update_actions(mut self, input: crate::types::UnprocessedUpdateAction) -> Self {
        let mut v = self.unprocessed_update_actions.unwrap_or_default();
        v.push(input);
        self.unprocessed_update_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Update actions that haven't been processed successfully</p>
    pub fn set_unprocessed_update_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedUpdateAction>>) -> Self {
        self.unprocessed_update_actions = input;
        self
    }
    /// <p>Update actions that haven't been processed successfully</p>
    pub fn get_unprocessed_update_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UnprocessedUpdateAction>> {
        &self.unprocessed_update_actions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchStopUpdateActionOutput`](crate::operation::batch_stop_update_action::BatchStopUpdateActionOutput).
    pub fn build(self) -> crate::operation::batch_stop_update_action::BatchStopUpdateActionOutput {
        crate::operation::batch_stop_update_action::BatchStopUpdateActionOutput {
            processed_update_actions: self.processed_update_actions,
            unprocessed_update_actions: self.unprocessed_update_actions,
            _request_id: self._request_id,
        }
    }
}
