// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>DescribeCacheSecurityGroups</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCacheSecurityGroupsInput {
    /// <p>The name of the cache security group to return details for.</p>
    pub cache_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl DescribeCacheSecurityGroupsInput {
    /// <p>The name of the cache security group to return details for.</p>
    pub fn cache_security_group_name(&self) -> ::std::option::Option<&str> {
        self.cache_security_group_name.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeCacheSecurityGroupsInput {
    /// Creates a new builder-style object to manufacture [`DescribeCacheSecurityGroupsInput`](crate::operation::describe_cache_security_groups::DescribeCacheSecurityGroupsInput).
    pub fn builder() -> crate::operation::describe_cache_security_groups::builders::DescribeCacheSecurityGroupsInputBuilder {
        crate::operation::describe_cache_security_groups::builders::DescribeCacheSecurityGroupsInputBuilder::default()
    }
}

/// A builder for [`DescribeCacheSecurityGroupsInput`](crate::operation::describe_cache_security_groups::DescribeCacheSecurityGroupsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeCacheSecurityGroupsInputBuilder {
    pub(crate) cache_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl DescribeCacheSecurityGroupsInputBuilder {
    /// <p>The name of the cache security group to return details for.</p>
    pub fn cache_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cache security group to return details for.</p>
    pub fn set_cache_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_security_group_name = input;
        self
    }
    /// <p>The name of the cache security group to return details for.</p>
    pub fn get_cache_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_security_group_name
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`DescribeCacheSecurityGroupsInput`](crate::operation::describe_cache_security_groups::DescribeCacheSecurityGroupsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_cache_security_groups::DescribeCacheSecurityGroupsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_cache_security_groups::DescribeCacheSecurityGroupsInput {
            cache_security_group_name: self.cache_security_group_name,
            max_records: self.max_records,
            marker: self.marker,
        })
    }
}
