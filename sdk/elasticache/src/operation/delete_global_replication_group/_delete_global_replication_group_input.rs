// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    #[doc(hidden)]
    pub global_replication_group_id: std::option::Option<std::string::String>,
    /// <p>The primary replication group is retained as a standalone replication group. </p>
    #[doc(hidden)]
    pub retain_primary_replication_group: bool,
}
impl DeleteGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(&self) -> std::option::Option<&str> {
        self.global_replication_group_id.as_deref()
    }
    /// <p>The primary replication group is retained as a standalone replication group. </p>
    pub fn retain_primary_replication_group(&self) -> bool {
        self.retain_primary_replication_group
    }
}
impl DeleteGlobalReplicationGroupInput {
    /// Creates a new builder-style object to manufacture [`DeleteGlobalReplicationGroupInput`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupInput).
    pub fn builder() -> crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupInputBuilder{
        crate::operation::delete_global_replication_group::builders::DeleteGlobalReplicationGroupInputBuilder::default()
    }
}

/// A builder for [`DeleteGlobalReplicationGroupInput`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteGlobalReplicationGroupInputBuilder {
    pub(crate) global_replication_group_id: std::option::Option<std::string::String>,
    pub(crate) retain_primary_replication_group: std::option::Option<bool>,
}
impl DeleteGlobalReplicationGroupInputBuilder {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_replication_group_id = Some(input.into());
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn set_global_replication_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_replication_group_id = input;
        self
    }
    /// <p>The primary replication group is retained as a standalone replication group. </p>
    pub fn retain_primary_replication_group(mut self, input: bool) -> Self {
        self.retain_primary_replication_group = Some(input);
        self
    }
    /// <p>The primary replication group is retained as a standalone replication group. </p>
    pub fn set_retain_primary_replication_group(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.retain_primary_replication_group = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteGlobalReplicationGroupInput`](crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_global_replication_group::DeleteGlobalReplicationGroupInput {
                global_replication_group_id: self.global_replication_group_id,
                retain_primary_replication_group: self
                    .retain_primary_replication_group
                    .unwrap_or_default(),
            },
        )
    }
}
