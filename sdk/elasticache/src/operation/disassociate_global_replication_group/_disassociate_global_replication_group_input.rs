// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    pub global_replication_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    pub replication_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon region of secondary cluster you wish to remove from the Global datastore</p>
    pub replication_group_region: ::std::option::Option<::std::string::String>,
}
impl DisassociateGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(&self) -> ::std::option::Option<&str> {
        self.global_replication_group_id.as_deref()
    }
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    pub fn replication_group_id(&self) -> ::std::option::Option<&str> {
        self.replication_group_id.as_deref()
    }
    /// <p>The Amazon region of secondary cluster you wish to remove from the Global datastore</p>
    pub fn replication_group_region(&self) -> ::std::option::Option<&str> {
        self.replication_group_region.as_deref()
    }
}
impl DisassociateGlobalReplicationGroupInput {
    /// Creates a new builder-style object to manufacture [`DisassociateGlobalReplicationGroupInput`](crate::operation::disassociate_global_replication_group::DisassociateGlobalReplicationGroupInput).
    pub fn builder() -> crate::operation::disassociate_global_replication_group::builders::DisassociateGlobalReplicationGroupInputBuilder {
        crate::operation::disassociate_global_replication_group::builders::DisassociateGlobalReplicationGroupInputBuilder::default()
    }
}

/// A builder for [`DisassociateGlobalReplicationGroupInput`](crate::operation::disassociate_global_replication_group::DisassociateGlobalReplicationGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisassociateGlobalReplicationGroupInputBuilder {
    pub(crate) global_replication_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_group_region: ::std::option::Option<::std::string::String>,
}
impl DisassociateGlobalReplicationGroupInputBuilder {
    /// <p>The name of the Global datastore</p>
    /// This field is required.
    pub fn global_replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn set_global_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_replication_group_id = input;
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn get_global_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_replication_group_id
    }
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    /// This field is required.
    pub fn replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    pub fn set_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_group_id = input;
        self
    }
    /// <p>The name of the secondary cluster you wish to remove from the Global datastore</p>
    pub fn get_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_group_id
    }
    /// <p>The Amazon region of secondary cluster you wish to remove from the Global datastore</p>
    /// This field is required.
    pub fn replication_group_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_group_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon region of secondary cluster you wish to remove from the Global datastore</p>
    pub fn set_replication_group_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_group_region = input;
        self
    }
    /// <p>The Amazon region of secondary cluster you wish to remove from the Global datastore</p>
    pub fn get_replication_group_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_group_region
    }
    /// Consumes the builder and constructs a [`DisassociateGlobalReplicationGroupInput`](crate::operation::disassociate_global_replication_group::DisassociateGlobalReplicationGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_global_replication_group::DisassociateGlobalReplicationGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::disassociate_global_replication_group::DisassociateGlobalReplicationGroupInput {
                global_replication_group_id: self.global_replication_group_id,
                replication_group_id: self.replication_group_id,
                replication_group_region: self.replication_group_region,
            },
        )
    }
}
