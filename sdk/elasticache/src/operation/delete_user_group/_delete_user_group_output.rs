// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteUserGroupOutput {
    /// <p>The ID of the user group.</p>
    #[doc(hidden)]
    pub user_group_id: std::option::Option<std::string::String>,
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The current supported value is Redis. </p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The list of user IDs that belong to the user group.</p>
    #[doc(hidden)]
    pub user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The minimum engine version required, which is Redis 6.0</p>
    #[doc(hidden)]
    pub minimum_engine_version: std::option::Option<std::string::String>,
    /// <p>A list of updates being applied to the user group.</p>
    #[doc(hidden)]
    pub pending_changes: std::option::Option<crate::types::UserGroupPendingChanges>,
    /// <p>A list of replication groups that the user group can access.</p>
    #[doc(hidden)]
    pub replication_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteUserGroupOutput {
    /// <p>The ID of the user group.</p>
    pub fn user_group_id(&self) -> std::option::Option<&str> {
        self.user_group_id.as_deref()
    }
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn user_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.user_ids.as_deref()
    }
    /// <p>The minimum engine version required, which is Redis 6.0</p>
    pub fn minimum_engine_version(&self) -> std::option::Option<&str> {
        self.minimum_engine_version.as_deref()
    }
    /// <p>A list of updates being applied to the user group.</p>
    pub fn pending_changes(&self) -> std::option::Option<&crate::types::UserGroupPendingChanges> {
        self.pending_changes.as_ref()
    }
    /// <p>A list of replication groups that the user group can access.</p>
    pub fn replication_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.replication_groups.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteUserGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteUserGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserGroupOutput`](crate::operation::delete_user_group::DeleteUserGroupOutput).
    pub fn builder() -> crate::operation::delete_user_group::builders::DeleteUserGroupOutputBuilder
    {
        crate::operation::delete_user_group::builders::DeleteUserGroupOutputBuilder::default()
    }
}

/// A builder for [`DeleteUserGroupOutput`](crate::operation::delete_user_group::DeleteUserGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteUserGroupOutputBuilder {
    pub(crate) user_group_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) minimum_engine_version: std::option::Option<std::string::String>,
    pub(crate) pending_changes: std::option::Option<crate::types::UserGroupPendingChanges>,
    pub(crate) replication_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteUserGroupOutputBuilder {
    /// <p>The ID of the user group.</p>
    pub fn user_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the user group.</p>
    pub fn set_user_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_group_id = input;
        self
    }
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Indicates user group status. Can be "creating", "active", "modifying", "deleting".</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// Appends an item to `user_ids`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn user_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_ids.unwrap_or_default();
        v.push(input.into());
        self.user_ids = Some(v);
        self
    }
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn set_user_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_ids = input;
        self
    }
    /// <p>The minimum engine version required, which is Redis 6.0</p>
    pub fn minimum_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.minimum_engine_version = Some(input.into());
        self
    }
    /// <p>The minimum engine version required, which is Redis 6.0</p>
    pub fn set_minimum_engine_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.minimum_engine_version = input;
        self
    }
    /// <p>A list of updates being applied to the user group.</p>
    pub fn pending_changes(mut self, input: crate::types::UserGroupPendingChanges) -> Self {
        self.pending_changes = Some(input);
        self
    }
    /// <p>A list of updates being applied to the user group.</p>
    pub fn set_pending_changes(
        mut self,
        input: std::option::Option<crate::types::UserGroupPendingChanges>,
    ) -> Self {
        self.pending_changes = input;
        self
    }
    /// Appends an item to `replication_groups`.
    ///
    /// To override the contents of this collection use [`set_replication_groups`](Self::set_replication_groups).
    ///
    /// <p>A list of replication groups that the user group can access.</p>
    pub fn replication_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.replication_groups.unwrap_or_default();
        v.push(input.into());
        self.replication_groups = Some(v);
        self
    }
    /// <p>A list of replication groups that the user group can access.</p>
    pub fn set_replication_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.replication_groups = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user group.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteUserGroupOutput`](crate::operation::delete_user_group::DeleteUserGroupOutput).
    pub fn build(self) -> crate::operation::delete_user_group::DeleteUserGroupOutput {
        crate::operation::delete_user_group::DeleteUserGroupOutput {
            user_group_id: self.user_group_id,
            status: self.status,
            engine: self.engine,
            user_ids: self.user_ids,
            minimum_engine_version: self.minimum_engine_version,
            pending_changes: self.pending_changes,
            replication_groups: self.replication_groups,
            arn: self.arn,
            _request_id: self._request_id,
        }
    }
}
