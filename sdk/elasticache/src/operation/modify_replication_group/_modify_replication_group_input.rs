// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>ModifyReplicationGroups</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyReplicationGroupInput {
    /// <p>The identifier of the replication group to modify.</p>
    #[doc(hidden)]
    pub replication_group_id: std::option::Option<std::string::String>,
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    #[doc(hidden)]
    pub replication_group_description: std::option::Option<std::string::String>,
    /// <p>For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</p>
    #[doc(hidden)]
    pub primary_cluster_id: std::option::Option<std::string::String>,
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    #[doc(hidden)]
    pub snapshotting_cluster_id: std::option::Option<std::string::String>,
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    #[doc(hidden)]
    pub automatic_failover_enabled: std::option::Option<bool>,
    /// <p>A flag to indicate MultiAZ is enabled.</p>
    #[doc(hidden)]
    pub multi_az_enabled: std::option::Option<bool>,
    /// <p>Deprecated. This parameter is not used.</p>
    #[deprecated]
    #[doc(hidden)]
    pub node_group_id: std::option::Option<std::string::String>,
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    /// <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    #[doc(hidden)]
    pub cache_security_group_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    /// <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>
    /// <p>Valid values for <code>ddd</code> are:</p>
    /// <ul>
    /// <li> <p> <code>sun</code> </p> </li>
    /// <li> <p> <code>mon</code> </p> </li>
    /// <li> <p> <code>tue</code> </p> </li>
    /// <li> <p> <code>wed</code> </p> </li>
    /// <li> <p> <code>thu</code> </p> </li>
    /// <li> <p> <code>fri</code> </p> </li>
    /// <li> <p> <code>sat</code> </p> </li>
    /// </ul>
    /// <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note>
    /// <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    /// </note>
    #[doc(hidden)]
    pub notification_topic_arn: std::option::Option<std::string::String>,
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    #[doc(hidden)]
    pub cache_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p>
    /// <p>Valid values: <code>active</code> | <code>inactive</code> </p>
    #[doc(hidden)]
    pub notification_topic_status: std::option::Option<std::string::String>,
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    /// <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    /// <p>Default: <code>false</code> </p>
    #[doc(hidden)]
    pub apply_immediately: bool,
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    /// <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>&nbsp;If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.&nbsp; </p>
    #[doc(hidden)]
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    /// <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    #[doc(hidden)]
    pub snapshot_retention_limit: std::option::Option<i32>,
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    /// <p>Example: <code>05:00-09:00</code> </p>
    /// <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
    #[doc(hidden)]
    pub snapshot_window: std::option::Option<std::string::String>,
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    #[doc(hidden)]
    pub cache_node_type: std::option::Option<std::string::String>,
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p>
    /// <ul>
    /// <li> <p>Must be only printable ASCII characters</p> </li>
    /// <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li>
    /// <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li>
    /// </ul>
    /// <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    #[doc(hidden)]
    pub auth_token: std::option::Option<std::string::String>,
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p>
    /// <ul>
    /// <li> <p>Rotate</p> </li>
    /// <li> <p>Set</p> </li>
    /// </ul>
    /// <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
    #[doc(hidden)]
    pub auth_token_update_strategy: std::option::Option<crate::types::AuthTokenUpdateStrategyType>,
    /// <p>The ID of the user group you are associating with the replication group.</p>
    #[doc(hidden)]
    pub user_group_ids_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</p>
    #[doc(hidden)]
    pub user_group_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Removes the user group associated with this replication group.</p>
    #[doc(hidden)]
    pub remove_user_groups: std::option::Option<bool>,
    /// <p>Specifies the destination, format and type of the logs.</p>
    #[doc(hidden)]
    pub log_delivery_configurations:
        std::option::Option<std::vec::Vec<crate::types::LogDeliveryConfigurationRequest>>,
    /// <p>The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="https://aws.amazon.com/ec2/nitro/">Nitro system</a>.</p>
    #[doc(hidden)]
    pub ip_discovery: std::option::Option<crate::types::IpDiscovery>,
    /// <p>A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</p>
    #[doc(hidden)]
    pub transit_encryption_enabled: std::option::Option<bool>,
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    /// <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p>
    /// <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code> first, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p>
    #[doc(hidden)]
    pub transit_encryption_mode: std::option::Option<crate::types::TransitEncryptionMode>,
}
impl ModifyReplicationGroupInput {
    /// <p>The identifier of the replication group to modify.</p>
    pub fn replication_group_id(&self) -> std::option::Option<&str> {
        self.replication_group_id.as_deref()
    }
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    pub fn replication_group_description(&self) -> std::option::Option<&str> {
        self.replication_group_description.as_deref()
    }
    /// <p>For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</p>
    pub fn primary_cluster_id(&self) -> std::option::Option<&str> {
        self.primary_cluster_id.as_deref()
    }
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    pub fn snapshotting_cluster_id(&self) -> std::option::Option<&str> {
        self.snapshotting_cluster_id.as_deref()
    }
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    pub fn automatic_failover_enabled(&self) -> std::option::Option<bool> {
        self.automatic_failover_enabled
    }
    /// <p>A flag to indicate MultiAZ is enabled.</p>
    pub fn multi_az_enabled(&self) -> std::option::Option<bool> {
        self.multi_az_enabled
    }
    /// <p>Deprecated. This parameter is not used.</p>
    #[deprecated]
    pub fn node_group_id(&self) -> std::option::Option<&str> {
        self.node_group_id.as_deref()
    }
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    /// <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    pub fn cache_security_group_names(&self) -> std::option::Option<&[std::string::String]> {
        self.cache_security_group_names.as_deref()
    }
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    /// <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>
    /// <p>Valid values for <code>ddd</code> are:</p>
    /// <ul>
    /// <li> <p> <code>sun</code> </p> </li>
    /// <li> <p> <code>mon</code> </p> </li>
    /// <li> <p> <code>tue</code> </p> </li>
    /// <li> <p> <code>wed</code> </p> </li>
    /// <li> <p> <code>thu</code> </p> </li>
    /// <li> <p> <code>fri</code> </p> </li>
    /// <li> <p> <code>sat</code> </p> </li>
    /// </ul>
    /// <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note>
    /// <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    /// </note>
    pub fn notification_topic_arn(&self) -> std::option::Option<&str> {
        self.notification_topic_arn.as_deref()
    }
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    pub fn cache_parameter_group_name(&self) -> std::option::Option<&str> {
        self.cache_parameter_group_name.as_deref()
    }
    /// <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p>
    /// <p>Valid values: <code>active</code> | <code>inactive</code> </p>
    pub fn notification_topic_status(&self) -> std::option::Option<&str> {
        self.notification_topic_status.as_deref()
    }
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    /// <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    /// <p>Default: <code>false</code> </p>
    pub fn apply_immediately(&self) -> bool {
        self.apply_immediately
    }
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    /// <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>&nbsp;If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.&nbsp; </p>
    pub fn auto_minor_version_upgrade(&self) -> std::option::Option<bool> {
        self.auto_minor_version_upgrade
    }
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    /// <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    pub fn snapshot_retention_limit(&self) -> std::option::Option<i32> {
        self.snapshot_retention_limit
    }
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    /// <p>Example: <code>05:00-09:00</code> </p>
    /// <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
    pub fn snapshot_window(&self) -> std::option::Option<&str> {
        self.snapshot_window.as_deref()
    }
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    pub fn cache_node_type(&self) -> std::option::Option<&str> {
        self.cache_node_type.as_deref()
    }
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p>
    /// <ul>
    /// <li> <p>Must be only printable ASCII characters</p> </li>
    /// <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li>
    /// <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li>
    /// </ul>
    /// <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    pub fn auth_token(&self) -> std::option::Option<&str> {
        self.auth_token.as_deref()
    }
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p>
    /// <ul>
    /// <li> <p>Rotate</p> </li>
    /// <li> <p>Set</p> </li>
    /// </ul>
    /// <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
    pub fn auth_token_update_strategy(
        &self,
    ) -> std::option::Option<&crate::types::AuthTokenUpdateStrategyType> {
        self.auth_token_update_strategy.as_ref()
    }
    /// <p>The ID of the user group you are associating with the replication group.</p>
    pub fn user_group_ids_to_add(&self) -> std::option::Option<&[std::string::String]> {
        self.user_group_ids_to_add.as_deref()
    }
    /// <p>The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</p>
    pub fn user_group_ids_to_remove(&self) -> std::option::Option<&[std::string::String]> {
        self.user_group_ids_to_remove.as_deref()
    }
    /// <p>Removes the user group associated with this replication group.</p>
    pub fn remove_user_groups(&self) -> std::option::Option<bool> {
        self.remove_user_groups
    }
    /// <p>Specifies the destination, format and type of the logs.</p>
    pub fn log_delivery_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::LogDeliveryConfigurationRequest]> {
        self.log_delivery_configurations.as_deref()
    }
    /// <p>The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="https://aws.amazon.com/ec2/nitro/">Nitro system</a>.</p>
    pub fn ip_discovery(&self) -> std::option::Option<&crate::types::IpDiscovery> {
        self.ip_discovery.as_ref()
    }
    /// <p>A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</p>
    pub fn transit_encryption_enabled(&self) -> std::option::Option<bool> {
        self.transit_encryption_enabled
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    /// <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p>
    /// <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code> first, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p>
    pub fn transit_encryption_mode(
        &self,
    ) -> std::option::Option<&crate::types::TransitEncryptionMode> {
        self.transit_encryption_mode.as_ref()
    }
}
impl ModifyReplicationGroupInput {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationGroupInput`](crate::operation::modify_replication_group::ModifyReplicationGroupInput).
    pub fn builder(
    ) -> crate::operation::modify_replication_group::builders::ModifyReplicationGroupInputBuilder
    {
        crate::operation::modify_replication_group::builders::ModifyReplicationGroupInputBuilder::default()
    }
}

/// A builder for [`ModifyReplicationGroupInput`](crate::operation::modify_replication_group::ModifyReplicationGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyReplicationGroupInputBuilder {
    pub(crate) replication_group_id: std::option::Option<std::string::String>,
    pub(crate) replication_group_description: std::option::Option<std::string::String>,
    pub(crate) primary_cluster_id: std::option::Option<std::string::String>,
    pub(crate) snapshotting_cluster_id: std::option::Option<std::string::String>,
    pub(crate) automatic_failover_enabled: std::option::Option<bool>,
    pub(crate) multi_az_enabled: std::option::Option<bool>,
    pub(crate) node_group_id: std::option::Option<std::string::String>,
    pub(crate) cache_security_group_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) notification_topic_arn: std::option::Option<std::string::String>,
    pub(crate) cache_parameter_group_name: std::option::Option<std::string::String>,
    pub(crate) notification_topic_status: std::option::Option<std::string::String>,
    pub(crate) apply_immediately: std::option::Option<bool>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
    pub(crate) snapshot_retention_limit: std::option::Option<i32>,
    pub(crate) snapshot_window: std::option::Option<std::string::String>,
    pub(crate) cache_node_type: std::option::Option<std::string::String>,
    pub(crate) auth_token: std::option::Option<std::string::String>,
    pub(crate) auth_token_update_strategy:
        std::option::Option<crate::types::AuthTokenUpdateStrategyType>,
    pub(crate) user_group_ids_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) user_group_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) remove_user_groups: std::option::Option<bool>,
    pub(crate) log_delivery_configurations:
        std::option::Option<std::vec::Vec<crate::types::LogDeliveryConfigurationRequest>>,
    pub(crate) ip_discovery: std::option::Option<crate::types::IpDiscovery>,
    pub(crate) transit_encryption_enabled: std::option::Option<bool>,
    pub(crate) transit_encryption_mode: std::option::Option<crate::types::TransitEncryptionMode>,
}
impl ModifyReplicationGroupInputBuilder {
    /// <p>The identifier of the replication group to modify.</p>
    pub fn replication_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_group_id = Some(input.into());
        self
    }
    /// <p>The identifier of the replication group to modify.</p>
    pub fn set_replication_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_group_id = input;
        self
    }
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    pub fn replication_group_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_group_description = Some(input.into());
        self
    }
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    pub fn set_replication_group_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_group_description = input;
        self
    }
    /// <p>For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</p>
    pub fn primary_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_cluster_id = Some(input.into());
        self
    }
    /// <p>For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</p>
    pub fn set_primary_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_cluster_id = input;
        self
    }
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    pub fn snapshotting_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshotting_cluster_id = Some(input.into());
        self
    }
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    pub fn set_snapshotting_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshotting_cluster_id = input;
        self
    }
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    pub fn automatic_failover_enabled(mut self, input: bool) -> Self {
        self.automatic_failover_enabled = Some(input);
        self
    }
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    pub fn set_automatic_failover_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.automatic_failover_enabled = input;
        self
    }
    /// <p>A flag to indicate MultiAZ is enabled.</p>
    pub fn multi_az_enabled(mut self, input: bool) -> Self {
        self.multi_az_enabled = Some(input);
        self
    }
    /// <p>A flag to indicate MultiAZ is enabled.</p>
    pub fn set_multi_az_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az_enabled = input;
        self
    }
    /// <p>Deprecated. This parameter is not used.</p>
    #[deprecated]
    pub fn node_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_group_id = Some(input.into());
        self
    }
    /// <p>Deprecated. This parameter is not used.</p>
    #[deprecated]
    pub fn set_node_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_group_id = input;
        self
    }
    /// Appends an item to `cache_security_group_names`.
    ///
    /// To override the contents of this collection use [`set_cache_security_group_names`](Self::set_cache_security_group_names).
    ///
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    /// <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    pub fn cache_security_group_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.cache_security_group_names.unwrap_or_default();
        v.push(input.into());
        self.cache_security_group_names = Some(v);
        self
    }
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    /// <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    pub fn set_cache_security_group_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.cache_security_group_names = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    /// <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    /// <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>
    /// <p>Valid values for <code>ddd</code> are:</p>
    /// <ul>
    /// <li> <p> <code>sun</code> </p> </li>
    /// <li> <p> <code>mon</code> </p> </li>
    /// <li> <p> <code>tue</code> </p> </li>
    /// <li> <p> <code>wed</code> </p> </li>
    /// <li> <p> <code>thu</code> </p> </li>
    /// <li> <p> <code>fri</code> </p> </li>
    /// <li> <p> <code>sat</code> </p> </li>
    /// </ul>
    /// <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>
    /// <p>Valid values for <code>ddd</code> are:</p>
    /// <ul>
    /// <li> <p> <code>sun</code> </p> </li>
    /// <li> <p> <code>mon</code> </p> </li>
    /// <li> <p> <code>tue</code> </p> </li>
    /// <li> <p> <code>wed</code> </p> </li>
    /// <li> <p> <code>thu</code> </p> </li>
    /// <li> <p> <code>fri</code> </p> </li>
    /// <li> <p> <code>sat</code> </p> </li>
    /// </ul>
    /// <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note>
    /// <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    /// </note>
    pub fn notification_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_topic_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note>
    /// <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    /// </note>
    pub fn set_notification_topic_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_topic_arn = input;
        self
    }
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    pub fn cache_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cache_parameter_group_name = Some(input.into());
        self
    }
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    pub fn set_cache_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cache_parameter_group_name = input;
        self
    }
    /// <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p>
    /// <p>Valid values: <code>active</code> | <code>inactive</code> </p>
    pub fn notification_topic_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_topic_status = Some(input.into());
        self
    }
    /// <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p>
    /// <p>Valid values: <code>active</code> | <code>inactive</code> </p>
    pub fn set_notification_topic_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_topic_status = input;
        self
    }
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    /// <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    /// <p>Default: <code>false</code> </p>
    pub fn apply_immediately(mut self, input: bool) -> Self {
        self.apply_immediately = Some(input);
        self
    }
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    /// <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    /// <p>Valid values: <code>true</code> | <code>false</code> </p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
        self.apply_immediately = input;
        self
    }
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    /// <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    /// <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>&nbsp;If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.&nbsp; </p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = Some(input);
        self
    }
    /// <p>&nbsp;If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.&nbsp; </p>
    pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    /// <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    pub fn snapshot_retention_limit(mut self, input: i32) -> Self {
        self.snapshot_retention_limit = Some(input);
        self
    }
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    /// <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    pub fn set_snapshot_retention_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.snapshot_retention_limit = input;
        self
    }
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    /// <p>Example: <code>05:00-09:00</code> </p>
    /// <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
    pub fn snapshot_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_window = Some(input.into());
        self
    }
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    /// <p>Example: <code>05:00-09:00</code> </p>
    /// <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
    pub fn set_snapshot_window(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_window = input;
        self
    }
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    pub fn cache_node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.cache_node_type = Some(input.into());
        self
    }
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    pub fn set_cache_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cache_node_type = input;
        self
    }
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p>
    /// <ul>
    /// <li> <p>Must be only printable ASCII characters</p> </li>
    /// <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li>
    /// <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li>
    /// </ul>
    /// <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    pub fn auth_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.auth_token = Some(input.into());
        self
    }
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p>
    /// <ul>
    /// <li> <p>Must be only printable ASCII characters</p> </li>
    /// <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li>
    /// <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li>
    /// </ul>
    /// <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    pub fn set_auth_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auth_token = input;
        self
    }
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p>
    /// <ul>
    /// <li> <p>Rotate</p> </li>
    /// <li> <p>Set</p> </li>
    /// </ul>
    /// <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
    pub fn auth_token_update_strategy(
        mut self,
        input: crate::types::AuthTokenUpdateStrategyType,
    ) -> Self {
        self.auth_token_update_strategy = Some(input);
        self
    }
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p>
    /// <ul>
    /// <li> <p>Rotate</p> </li>
    /// <li> <p>Set</p> </li>
    /// </ul>
    /// <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
    pub fn set_auth_token_update_strategy(
        mut self,
        input: std::option::Option<crate::types::AuthTokenUpdateStrategyType>,
    ) -> Self {
        self.auth_token_update_strategy = input;
        self
    }
    /// Appends an item to `user_group_ids_to_add`.
    ///
    /// To override the contents of this collection use [`set_user_group_ids_to_add`](Self::set_user_group_ids_to_add).
    ///
    /// <p>The ID of the user group you are associating with the replication group.</p>
    pub fn user_group_ids_to_add(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_group_ids_to_add.unwrap_or_default();
        v.push(input.into());
        self.user_group_ids_to_add = Some(v);
        self
    }
    /// <p>The ID of the user group you are associating with the replication group.</p>
    pub fn set_user_group_ids_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_group_ids_to_add = input;
        self
    }
    /// Appends an item to `user_group_ids_to_remove`.
    ///
    /// To override the contents of this collection use [`set_user_group_ids_to_remove`](Self::set_user_group_ids_to_remove).
    ///
    /// <p>The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</p>
    pub fn user_group_ids_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_group_ids_to_remove.unwrap_or_default();
        v.push(input.into());
        self.user_group_ids_to_remove = Some(v);
        self
    }
    /// <p>The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</p>
    pub fn set_user_group_ids_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_group_ids_to_remove = input;
        self
    }
    /// <p>Removes the user group associated with this replication group.</p>
    pub fn remove_user_groups(mut self, input: bool) -> Self {
        self.remove_user_groups = Some(input);
        self
    }
    /// <p>Removes the user group associated with this replication group.</p>
    pub fn set_remove_user_groups(mut self, input: std::option::Option<bool>) -> Self {
        self.remove_user_groups = input;
        self
    }
    /// Appends an item to `log_delivery_configurations`.
    ///
    /// To override the contents of this collection use [`set_log_delivery_configurations`](Self::set_log_delivery_configurations).
    ///
    /// <p>Specifies the destination, format and type of the logs.</p>
    pub fn log_delivery_configurations(
        mut self,
        input: crate::types::LogDeliveryConfigurationRequest,
    ) -> Self {
        let mut v = self.log_delivery_configurations.unwrap_or_default();
        v.push(input);
        self.log_delivery_configurations = Some(v);
        self
    }
    /// <p>Specifies the destination, format and type of the logs.</p>
    pub fn set_log_delivery_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LogDeliveryConfigurationRequest>>,
    ) -> Self {
        self.log_delivery_configurations = input;
        self
    }
    /// <p>The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="https://aws.amazon.com/ec2/nitro/">Nitro system</a>.</p>
    pub fn ip_discovery(mut self, input: crate::types::IpDiscovery) -> Self {
        self.ip_discovery = Some(input);
        self
    }
    /// <p>The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="https://aws.amazon.com/ec2/nitro/">Nitro system</a>.</p>
    pub fn set_ip_discovery(
        mut self,
        input: std::option::Option<crate::types::IpDiscovery>,
    ) -> Self {
        self.ip_discovery = input;
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</p>
    pub fn transit_encryption_enabled(mut self, input: bool) -> Self {
        self.transit_encryption_enabled = Some(input);
        self
    }
    /// <p>A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</p>
    pub fn set_transit_encryption_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.transit_encryption_enabled = input;
        self
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    /// <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p>
    /// <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code> first, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p>
    pub fn transit_encryption_mode(mut self, input: crate::types::TransitEncryptionMode) -> Self {
        self.transit_encryption_mode = Some(input);
        self
    }
    /// <p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p>
    /// <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p>
    /// <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code> first, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p>
    pub fn set_transit_encryption_mode(
        mut self,
        input: std::option::Option<crate::types::TransitEncryptionMode>,
    ) -> Self {
        self.transit_encryption_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyReplicationGroupInput`](crate::operation::modify_replication_group::ModifyReplicationGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_replication_group::ModifyReplicationGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::modify_replication_group::ModifyReplicationGroupInput {
                replication_group_id: self.replication_group_id,
                replication_group_description: self.replication_group_description,
                primary_cluster_id: self.primary_cluster_id,
                snapshotting_cluster_id: self.snapshotting_cluster_id,
                automatic_failover_enabled: self.automatic_failover_enabled,
                multi_az_enabled: self.multi_az_enabled,
                node_group_id: self.node_group_id,
                cache_security_group_names: self.cache_security_group_names,
                security_group_ids: self.security_group_ids,
                preferred_maintenance_window: self.preferred_maintenance_window,
                notification_topic_arn: self.notification_topic_arn,
                cache_parameter_group_name: self.cache_parameter_group_name,
                notification_topic_status: self.notification_topic_status,
                apply_immediately: self.apply_immediately.unwrap_or_default(),
                engine_version: self.engine_version,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                snapshot_retention_limit: self.snapshot_retention_limit,
                snapshot_window: self.snapshot_window,
                cache_node_type: self.cache_node_type,
                auth_token: self.auth_token,
                auth_token_update_strategy: self.auth_token_update_strategy,
                user_group_ids_to_add: self.user_group_ids_to_add,
                user_group_ids_to_remove: self.user_group_ids_to_remove,
                remove_user_groups: self.remove_user_groups,
                log_delivery_configurations: self.log_delivery_configurations,
                ip_discovery: self.ip_discovery,
                transit_encryption_enabled: self.transit_encryption_enabled,
                transit_encryption_mode: self.transit_encryption_mode,
            },
        )
    }
}
