// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>RevokeCacheSecurityGroupIngress</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RevokeCacheSecurityGroupIngressInput {
    /// <p>The name of the cache security group to revoke ingress from.</p>
    pub cache_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    pub ec2_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</p>
    pub ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl RevokeCacheSecurityGroupIngressInput {
    /// <p>The name of the cache security group to revoke ingress from.</p>
    pub fn cache_security_group_name(&self) -> ::std::option::Option<&str> {
        self.cache_security_group_name.as_deref()
    }
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    pub fn ec2_security_group_name(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_name.as_deref()
    }
    /// <p>The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</p>
    pub fn ec2_security_group_owner_id(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_owner_id.as_deref()
    }
}
impl RevokeCacheSecurityGroupIngressInput {
    /// Creates a new builder-style object to manufacture [`RevokeCacheSecurityGroupIngressInput`](crate::operation::revoke_cache_security_group_ingress::RevokeCacheSecurityGroupIngressInput).
    pub fn builder() -> crate::operation::revoke_cache_security_group_ingress::builders::RevokeCacheSecurityGroupIngressInputBuilder {
        crate::operation::revoke_cache_security_group_ingress::builders::RevokeCacheSecurityGroupIngressInputBuilder::default()
    }
}

/// A builder for [`RevokeCacheSecurityGroupIngressInput`](crate::operation::revoke_cache_security_group_ingress::RevokeCacheSecurityGroupIngressInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RevokeCacheSecurityGroupIngressInputBuilder {
    pub(crate) cache_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl RevokeCacheSecurityGroupIngressInputBuilder {
    /// <p>The name of the cache security group to revoke ingress from.</p>
    /// This field is required.
    pub fn cache_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cache security group to revoke ingress from.</p>
    pub fn set_cache_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_security_group_name = input;
        self
    }
    /// <p>The name of the cache security group to revoke ingress from.</p>
    pub fn get_cache_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_security_group_name
    }
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    /// This field is required.
    pub fn ec2_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    pub fn set_ec2_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_name = input;
        self
    }
    /// <p>The name of the Amazon EC2 security group to revoke access from.</p>
    pub fn get_ec2_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_name
    }
    /// <p>The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</p>
    /// This field is required.
    pub fn ec2_security_group_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</p>
    pub fn set_ec2_security_group_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = input;
        self
    }
    /// <p>The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</p>
    pub fn get_ec2_security_group_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_owner_id
    }
    /// Consumes the builder and constructs a [`RevokeCacheSecurityGroupIngressInput`](crate::operation::revoke_cache_security_group_ingress::RevokeCacheSecurityGroupIngressInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::revoke_cache_security_group_ingress::RevokeCacheSecurityGroupIngressInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::revoke_cache_security_group_ingress::RevokeCacheSecurityGroupIngressInput {
                cache_security_group_name: self.cache_security_group_name,
                ec2_security_group_name: self.ec2_security_group_name,
                ec2_security_group_owner_id: self.ec2_security_group_owner_id,
            },
        )
    }
}
