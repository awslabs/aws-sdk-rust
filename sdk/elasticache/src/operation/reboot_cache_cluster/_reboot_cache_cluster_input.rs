// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>RebootCacheCluster</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RebootCacheClusterInput {
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    pub cache_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    pub cache_node_ids_to_reboot: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RebootCacheClusterInput {
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    pub fn cache_cluster_id(&self) -> ::std::option::Option<&str> {
        self.cache_cluster_id.as_deref()
    }
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_node_ids_to_reboot.is_none()`.
    pub fn cache_node_ids_to_reboot(&self) -> &[::std::string::String] {
        self.cache_node_ids_to_reboot.as_deref().unwrap_or_default()
    }
}
impl RebootCacheClusterInput {
    /// Creates a new builder-style object to manufacture [`RebootCacheClusterInput`](crate::operation::reboot_cache_cluster::RebootCacheClusterInput).
    pub fn builder() -> crate::operation::reboot_cache_cluster::builders::RebootCacheClusterInputBuilder {
        crate::operation::reboot_cache_cluster::builders::RebootCacheClusterInputBuilder::default()
    }
}

/// A builder for [`RebootCacheClusterInput`](crate::operation::reboot_cache_cluster::RebootCacheClusterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RebootCacheClusterInputBuilder {
    pub(crate) cache_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) cache_node_ids_to_reboot: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RebootCacheClusterInputBuilder {
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// This field is required.
    pub fn cache_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    pub fn set_cache_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_cluster_id = input;
        self
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    pub fn get_cache_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_cluster_id
    }
    /// Appends an item to `cache_node_ids_to_reboot`.
    ///
    /// To override the contents of this collection use [`set_cache_node_ids_to_reboot`](Self::set_cache_node_ids_to_reboot).
    ///
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    pub fn cache_node_ids_to_reboot(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cache_node_ids_to_reboot.unwrap_or_default();
        v.push(input.into());
        self.cache_node_ids_to_reboot = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    pub fn set_cache_node_ids_to_reboot(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cache_node_ids_to_reboot = input;
        self
    }
    /// <p>A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</p>
    pub fn get_cache_node_ids_to_reboot(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cache_node_ids_to_reboot
    }
    /// Consumes the builder and constructs a [`RebootCacheClusterInput`](crate::operation::reboot_cache_cluster::RebootCacheClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::reboot_cache_cluster::RebootCacheClusterInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::reboot_cache_cluster::RebootCacheClusterInput {
            cache_cluster_id: self.cache_cluster_id,
            cache_node_ids_to_reboot: self.cache_node_ids_to_reboot,
        })
    }
}
