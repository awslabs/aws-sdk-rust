// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::purchase_reserved_cache_nodes_offering::_purchase_reserved_cache_nodes_offering_output::PurchaseReservedCacheNodesOfferingOutputBuilder;

pub use crate::operation::purchase_reserved_cache_nodes_offering::_purchase_reserved_cache_nodes_offering_input::PurchaseReservedCacheNodesOfferingInputBuilder;

/// Fluent builder constructing a request to `PurchaseReservedCacheNodesOffering`.
///
/// <p>Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Redis or <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Memcached.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseReservedCacheNodesOfferingFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::purchase_reserved_cache_nodes_offering::builders::PurchaseReservedCacheNodesOfferingInputBuilder
            }
impl PurchaseReservedCacheNodesOfferingFluentBuilder {
    /// Creates a new `PurchaseReservedCacheNodesOffering`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::purchase_reserved_cache_nodes_offering::PurchaseReservedCacheNodesOffering, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::purchase_reserved_cache_nodes_offering::PurchaseReservedCacheNodesOfferingError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::purchase_reserved_cache_nodes_offering::PurchaseReservedCacheNodesOfferingOutput, aws_smithy_http::result::SdkError<crate::operation::purchase_reserved_cache_nodes_offering::PurchaseReservedCacheNodesOfferingError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the reserved cache node offering to purchase.</p>
    /// <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
    pub fn reserved_cache_nodes_offering_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.reserved_cache_nodes_offering_id(input.into());
        self
    }
    /// <p>The ID of the reserved cache node offering to purchase.</p>
    /// <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
    pub fn set_reserved_cache_nodes_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reserved_cache_nodes_offering_id(input);
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p> <note>
    /// <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p>
    /// </note>
    /// <p>Example: myreservationID</p>
    pub fn reserved_cache_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reserved_cache_node_id(input.into());
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p> <note>
    /// <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p>
    /// </note>
    /// <p>Example: myreservationID</p>
    pub fn set_reserved_cache_node_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reserved_cache_node_id(input);
        self
    }
    /// <p>The number of cache node instances to reserve.</p>
    /// <p>Default: <code>1</code> </p>
    pub fn cache_node_count(mut self, input: i32) -> Self {
        self.inner = self.inner.cache_node_count(input);
        self
    }
    /// <p>The number of cache node instances to reserve.</p>
    /// <p>Default: <code>1</code> </p>
    pub fn set_cache_node_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_cache_node_count(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
