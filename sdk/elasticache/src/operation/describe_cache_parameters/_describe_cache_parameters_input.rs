// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>DescribeCacheParameters</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCacheParametersInput {
    /// <p>The name of a specific cache parameter group to return details for.</p>
    pub cache_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The parameter types to return.</p>
    /// <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl DescribeCacheParametersInput {
    /// <p>The name of a specific cache parameter group to return details for.</p>
    pub fn cache_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.cache_parameter_group_name.as_deref()
    }
    /// <p>The parameter types to return.</p>
    /// <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeCacheParametersInput {
    /// Creates a new builder-style object to manufacture [`DescribeCacheParametersInput`](crate::operation::describe_cache_parameters::DescribeCacheParametersInput).
    pub fn builder() -> crate::operation::describe_cache_parameters::builders::DescribeCacheParametersInputBuilder {
        crate::operation::describe_cache_parameters::builders::DescribeCacheParametersInputBuilder::default()
    }
}

/// A builder for [`DescribeCacheParametersInput`](crate::operation::describe_cache_parameters::DescribeCacheParametersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeCacheParametersInputBuilder {
    pub(crate) cache_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl DescribeCacheParametersInputBuilder {
    /// <p>The name of a specific cache parameter group to return details for.</p>
    /// This field is required.
    pub fn cache_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a specific cache parameter group to return details for.</p>
    pub fn set_cache_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_parameter_group_name = input;
        self
    }
    /// <p>The name of a specific cache parameter group to return details for.</p>
    pub fn get_cache_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_parameter_group_name
    }
    /// <p>The parameter types to return.</p>
    /// <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter types to return.</p>
    /// <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The parameter types to return.</p>
    /// <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: minimum 20; maximum 100.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`DescribeCacheParametersInput`](crate::operation::describe_cache_parameters::DescribeCacheParametersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_cache_parameters::DescribeCacheParametersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_cache_parameters::DescribeCacheParametersInput {
            cache_parameter_group_name: self.cache_parameter_group_name,
            source: self.source,
            max_records: self.max_records,
            marker: self.marker,
        })
    }
}
