// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUserInput {
    /// <p>The ID of the user.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The username of the user.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>The current supported value is Redis. </p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub passwords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Access permissions string used for this user.</p>
    pub access_string: ::std::option::Option<::std::string::String>,
    /// <p>Indicates a password is not required for this user.</p>
    pub no_password_required: ::std::option::Option<bool>,
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies how to authenticate the user.</p>
    pub authentication_mode: ::std::option::Option<crate::types::AuthenticationMode>,
}
impl CreateUserInput {
    /// <p>The ID of the user.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The username of the user.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.passwords.is_none()`.
    pub fn passwords(&self) -> &[::std::string::String] {
        self.passwords.as_deref().unwrap_or_default()
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn access_string(&self) -> ::std::option::Option<&str> {
        self.access_string.as_deref()
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn no_password_required(&self) -> ::std::option::Option<bool> {
        self.no_password_required
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn authentication_mode(&self) -> ::std::option::Option<&crate::types::AuthenticationMode> {
        self.authentication_mode.as_ref()
    }
}
impl CreateUserInput {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn builder() -> crate::operation::create_user::builders::CreateUserInputBuilder {
        crate::operation::create_user::builders::CreateUserInputBuilder::default()
    }
}

/// A builder for [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateUserInputBuilder {
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) passwords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) access_string: ::std::option::Option<::std::string::String>,
    pub(crate) no_password_required: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) authentication_mode: ::std::option::Option<crate::types::AuthenticationMode>,
}
impl CreateUserInputBuilder {
    /// <p>The ID of the user.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The ID of the user.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The username of the user.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username of the user.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The username of the user.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The current supported value is Redis. </p>
    /// This field is required.
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// Appends an item to `passwords`.
    ///
    /// To override the contents of this collection use [`set_passwords`](Self::set_passwords).
    ///
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn passwords(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.passwords.unwrap_or_default();
        v.push(input.into());
        self.passwords = ::std::option::Option::Some(v);
        self
    }
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn set_passwords(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.passwords = input;
        self
    }
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn get_passwords(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.passwords
    }
    /// <p>Access permissions string used for this user.</p>
    /// This field is required.
    pub fn access_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn set_access_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_string = input;
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn get_access_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_string
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn no_password_required(mut self, input: bool) -> Self {
        self.no_password_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn set_no_password_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_password_required = input;
        self
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn get_no_password_required(&self) -> &::std::option::Option<bool> {
        &self.no_password_required
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn authentication_mode(mut self, input: crate::types::AuthenticationMode) -> Self {
        self.authentication_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn set_authentication_mode(mut self, input: ::std::option::Option<crate::types::AuthenticationMode>) -> Self {
        self.authentication_mode = input;
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn get_authentication_mode(&self) -> &::std::option::Option<crate::types::AuthenticationMode> {
        &self.authentication_mode
    }
    /// Consumes the builder and constructs a [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_user::CreateUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_user::CreateUserInput {
            user_id: self.user_id,
            user_name: self.user_name,
            engine: self.engine,
            passwords: self.passwords,
            access_string: self.access_string,
            no_password_required: self.no_password_required,
            tags: self.tags,
            authentication_mode: self.authentication_mode,
        })
    }
}
