// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserInput {
    /// <p>The ID of the user.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The username of the user.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The current supported value is Redis. </p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    #[doc(hidden)]
    pub passwords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Access permissions string used for this user.</p>
    #[doc(hidden)]
    pub access_string: std::option::Option<std::string::String>,
    /// <p>Indicates a password is not required for this user.</p>
    #[doc(hidden)]
    pub no_password_required: std::option::Option<bool>,
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies how to authenticate the user.</p>
    #[doc(hidden)]
    pub authentication_mode: std::option::Option<crate::types::AuthenticationMode>,
}
impl CreateUserInput {
    /// <p>The ID of the user.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The username of the user.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn passwords(&self) -> std::option::Option<&[std::string::String]> {
        self.passwords.as_deref()
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn access_string(&self) -> std::option::Option<&str> {
        self.access_string.as_deref()
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn no_password_required(&self) -> std::option::Option<bool> {
        self.no_password_required
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn authentication_mode(&self) -> std::option::Option<&crate::types::AuthenticationMode> {
        self.authentication_mode.as_ref()
    }
}
impl CreateUserInput {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn builder() -> crate::operation::create_user::builders::CreateUserInputBuilder {
        crate::operation::create_user::builders::CreateUserInputBuilder::default()
    }
}

/// A builder for [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateUserInputBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) passwords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) access_string: std::option::Option<std::string::String>,
    pub(crate) no_password_required: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) authentication_mode: std::option::Option<crate::types::AuthenticationMode>,
}
impl CreateUserInputBuilder {
    /// <p>The ID of the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The username of the user.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The username of the user.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// Appends an item to `passwords`.
    ///
    /// To override the contents of this collection use [`set_passwords`](Self::set_passwords).
    ///
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn passwords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.passwords.unwrap_or_default();
        v.push(input.into());
        self.passwords = Some(v);
        self
    }
    /// <p>Passwords used for this user. You can create up to two passwords for each user.</p>
    pub fn set_passwords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.passwords = input;
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn access_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_string = Some(input.into());
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn set_access_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_string = input;
        self
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn no_password_required(mut self, input: bool) -> Self {
        self.no_password_required = Some(input);
        self
    }
    /// <p>Indicates a password is not required for this user.</p>
    pub fn set_no_password_required(mut self, input: std::option::Option<bool>) -> Self {
        self.no_password_required = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn authentication_mode(mut self, input: crate::types::AuthenticationMode) -> Self {
        self.authentication_mode = Some(input);
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn set_authentication_mode(
        mut self,
        input: std::option::Option<crate::types::AuthenticationMode>,
    ) -> Self {
        self.authentication_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_user::CreateUserInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_user::CreateUserInput {
            user_id: self.user_id,
            user_name: self.user_name,
            engine: self.engine,
            passwords: self.passwords,
            access_string: self.access_string,
            no_password_required: self.no_password_required,
            tags: self.tags,
            authentication_mode: self.authentication_mode,
        })
    }
}
