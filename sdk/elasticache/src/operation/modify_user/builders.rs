// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_user::_modify_user_output::ModifyUserOutputBuilder;

pub use crate::operation::modify_user::_modify_user_input::ModifyUserInputBuilder;

/// Fluent builder constructing a request to `ModifyUser`.
///
/// <p>Changes user password(s) and/or access string.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyUserFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_user::builders::ModifyUserInputBuilder,
}
impl ModifyUserFluentBuilder {
    /// Creates a new `ModifyUser`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_user::ModifyUser,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::modify_user::ModifyUserError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_user::ModifyUserOutput,
        aws_smithy_http::result::SdkError<crate::operation::modify_user::ModifyUserError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_id(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_id(input);
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn access_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.access_string(input.into());
        self
    }
    /// <p>Access permissions string used for this user.</p>
    pub fn set_access_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_access_string(input);
        self
    }
    /// <p>Adds additional user permissions to the access string.</p>
    pub fn append_access_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.append_access_string(input.into());
        self
    }
    /// <p>Adds additional user permissions to the access string.</p>
    pub fn set_append_access_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_append_access_string(input);
        self
    }
    /// Appends an item to `Passwords`.
    ///
    /// To override the contents of this collection use [`set_passwords`](Self::set_passwords).
    ///
    /// <p>The passwords belonging to the user. You are allowed up to two.</p>
    pub fn passwords(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.passwords(input.into());
        self
    }
    /// <p>The passwords belonging to the user. You are allowed up to two.</p>
    pub fn set_passwords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_passwords(input);
        self
    }
    /// <p>Indicates no password is required for the user.</p>
    pub fn no_password_required(mut self, input: bool) -> Self {
        self.inner = self.inner.no_password_required(input);
        self
    }
    /// <p>Indicates no password is required for the user.</p>
    pub fn set_no_password_required(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_no_password_required(input);
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn authentication_mode(mut self, input: crate::types::AuthenticationMode) -> Self {
        self.inner = self.inner.authentication_mode(input);
        self
    }
    /// <p>Specifies how to authenticate the user.</p>
    pub fn set_authentication_mode(
        mut self,
        input: std::option::Option<crate::types::AuthenticationMode>,
    ) -> Self {
        self.inner = self.inner.set_authentication_mode(input);
        self
    }
}
