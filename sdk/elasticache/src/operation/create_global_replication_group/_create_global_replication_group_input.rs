// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGlobalReplicationGroupInput {
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p>
    /// <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
    pub global_replication_group_id_suffix: ::std::option::Option<::std::string::String>,
    /// <p>Provides details of the Global datastore</p>
    pub global_replication_group_description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    pub primary_replication_group_id: ::std::option::Option<::std::string::String>,
}
impl CreateGlobalReplicationGroupInput {
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p>
    /// <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
    pub fn global_replication_group_id_suffix(&self) -> ::std::option::Option<&str> {
        self.global_replication_group_id_suffix.as_deref()
    }
    /// <p>Provides details of the Global datastore</p>
    pub fn global_replication_group_description(&self) -> ::std::option::Option<&str> {
        self.global_replication_group_description.as_deref()
    }
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    pub fn primary_replication_group_id(&self) -> ::std::option::Option<&str> {
        self.primary_replication_group_id.as_deref()
    }
}
impl CreateGlobalReplicationGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateGlobalReplicationGroupInput`](crate::operation::create_global_replication_group::CreateGlobalReplicationGroupInput).
    pub fn builder() -> crate::operation::create_global_replication_group::builders::CreateGlobalReplicationGroupInputBuilder {
        crate::operation::create_global_replication_group::builders::CreateGlobalReplicationGroupInputBuilder::default()
    }
}

/// A builder for [`CreateGlobalReplicationGroupInput`](crate::operation::create_global_replication_group::CreateGlobalReplicationGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGlobalReplicationGroupInputBuilder {
    pub(crate) global_replication_group_id_suffix: ::std::option::Option<::std::string::String>,
    pub(crate) global_replication_group_description: ::std::option::Option<::std::string::String>,
    pub(crate) primary_replication_group_id: ::std::option::Option<::std::string::String>,
}
impl CreateGlobalReplicationGroupInputBuilder {
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p>
    /// <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
    /// This field is required.
    pub fn global_replication_group_id_suffix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_replication_group_id_suffix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p>
    /// <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
    pub fn set_global_replication_group_id_suffix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_replication_group_id_suffix = input;
        self
    }
    /// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p>
    /// <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
    pub fn get_global_replication_group_id_suffix(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_replication_group_id_suffix
    }
    /// <p>Provides details of the Global datastore</p>
    pub fn global_replication_group_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_replication_group_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides details of the Global datastore</p>
    pub fn set_global_replication_group_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_replication_group_description = input;
        self
    }
    /// <p>Provides details of the Global datastore</p>
    pub fn get_global_replication_group_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_replication_group_description
    }
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    /// This field is required.
    pub fn primary_replication_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_replication_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    pub fn set_primary_replication_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_replication_group_id = input;
        self
    }
    /// <p>The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p>
    pub fn get_primary_replication_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_replication_group_id
    }
    /// Consumes the builder and constructs a [`CreateGlobalReplicationGroupInput`](crate::operation::create_global_replication_group::CreateGlobalReplicationGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_global_replication_group::CreateGlobalReplicationGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_global_replication_group::CreateGlobalReplicationGroupInput {
            global_replication_group_id_suffix: self.global_replication_group_id_suffix,
            global_replication_group_description: self.global_replication_group_description,
            primary_replication_group_id: self.primary_replication_group_id,
        })
    }
}
