// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserGroupInput {
    /// <p>The ID of the user group.</p>
    #[doc(hidden)]
    pub user_group_id: std::option::Option<std::string::String>,
    /// <p>The current supported value is Redis. </p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The list of user IDs that belong to the user group.</p>
    #[doc(hidden)]
    pub user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateUserGroupInput {
    /// <p>The ID of the user group.</p>
    pub fn user_group_id(&self) -> std::option::Option<&str> {
        self.user_group_id.as_deref()
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn user_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.user_ids.as_deref()
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateUserGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateUserGroupInput`](crate::operation::create_user_group::CreateUserGroupInput).
    pub fn builder() -> crate::operation::create_user_group::builders::CreateUserGroupInputBuilder {
        crate::operation::create_user_group::builders::CreateUserGroupInputBuilder::default()
    }
}

/// A builder for [`CreateUserGroupInput`](crate::operation::create_user_group::CreateUserGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateUserGroupInputBuilder {
    pub(crate) user_group_id: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateUserGroupInputBuilder {
    /// <p>The ID of the user group.</p>
    pub fn user_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the user group.</p>
    pub fn set_user_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_group_id = input;
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The current supported value is Redis. </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// Appends an item to `user_ids`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn user_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_ids.unwrap_or_default();
        v.push(input.into());
        self.user_ids = Some(v);
        self
    }
    /// <p>The list of user IDs that belong to the user group.</p>
    pub fn set_user_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_ids = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateUserGroupInput`](crate::operation::create_user_group::CreateUserGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_user_group::CreateUserGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_user_group::CreateUserGroupInput {
            user_group_id: self.user_group_id,
            engine: self.engine,
            user_ids: self.user_ids,
            tags: self.tags,
        })
    }
}
