// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IncreaseNodeGroupsInGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    #[doc(hidden)]
    pub global_replication_group_id: std::option::Option<std::string::String>,
    /// <p>The number of node groups you wish to add</p>
    #[doc(hidden)]
    pub node_group_count: i32,
    /// <p>Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    #[doc(hidden)]
    pub regional_configurations:
        std::option::Option<std::vec::Vec<crate::types::RegionalConfiguration>>,
    /// <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    #[doc(hidden)]
    pub apply_immediately: bool,
}
impl IncreaseNodeGroupsInGlobalReplicationGroupInput {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(&self) -> std::option::Option<&str> {
        self.global_replication_group_id.as_deref()
    }
    /// <p>The number of node groups you wish to add</p>
    pub fn node_group_count(&self) -> i32 {
        self.node_group_count
    }
    /// <p>Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    pub fn regional_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::RegionalConfiguration]> {
        self.regional_configurations.as_deref()
    }
    /// <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    pub fn apply_immediately(&self) -> bool {
        self.apply_immediately
    }
}
impl IncreaseNodeGroupsInGlobalReplicationGroupInput {
    /// Creates a new builder-style object to manufacture [`IncreaseNodeGroupsInGlobalReplicationGroupInput`](crate::operation::increase_node_groups_in_global_replication_group::IncreaseNodeGroupsInGlobalReplicationGroupInput).
    pub fn builder() -> crate::operation::increase_node_groups_in_global_replication_group::builders::IncreaseNodeGroupsInGlobalReplicationGroupInputBuilder{
        crate::operation::increase_node_groups_in_global_replication_group::builders::IncreaseNodeGroupsInGlobalReplicationGroupInputBuilder::default()
    }
}

/// A builder for [`IncreaseNodeGroupsInGlobalReplicationGroupInput`](crate::operation::increase_node_groups_in_global_replication_group::IncreaseNodeGroupsInGlobalReplicationGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IncreaseNodeGroupsInGlobalReplicationGroupInputBuilder {
    pub(crate) global_replication_group_id: std::option::Option<std::string::String>,
    pub(crate) node_group_count: std::option::Option<i32>,
    pub(crate) regional_configurations:
        std::option::Option<std::vec::Vec<crate::types::RegionalConfiguration>>,
    pub(crate) apply_immediately: std::option::Option<bool>,
}
impl IncreaseNodeGroupsInGlobalReplicationGroupInputBuilder {
    /// <p>The name of the Global datastore</p>
    pub fn global_replication_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.global_replication_group_id = Some(input.into());
        self
    }
    /// <p>The name of the Global datastore</p>
    pub fn set_global_replication_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.global_replication_group_id = input;
        self
    }
    /// <p>The number of node groups you wish to add</p>
    pub fn node_group_count(mut self, input: i32) -> Self {
        self.node_group_count = Some(input);
        self
    }
    /// <p>The number of node groups you wish to add</p>
    pub fn set_node_group_count(mut self, input: std::option::Option<i32>) -> Self {
        self.node_group_count = input;
        self
    }
    /// Appends an item to `regional_configurations`.
    ///
    /// To override the contents of this collection use [`set_regional_configurations`](Self::set_regional_configurations).
    ///
    /// <p>Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    pub fn regional_configurations(mut self, input: crate::types::RegionalConfiguration) -> Self {
        let mut v = self.regional_configurations.unwrap_or_default();
        v.push(input);
        self.regional_configurations = Some(v);
        self
    }
    /// <p>Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</p>
    pub fn set_regional_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegionalConfiguration>>,
    ) -> Self {
        self.regional_configurations = input;
        self
    }
    /// <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    pub fn apply_immediately(mut self, input: bool) -> Self {
        self.apply_immediately = Some(input);
        self
    }
    /// <p>Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</p>
    pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
        self.apply_immediately = input;
        self
    }
    /// Consumes the builder and constructs a [`IncreaseNodeGroupsInGlobalReplicationGroupInput`](crate::operation::increase_node_groups_in_global_replication_group::IncreaseNodeGroupsInGlobalReplicationGroupInput).
    pub fn build(self) -> Result<crate::operation::increase_node_groups_in_global_replication_group::IncreaseNodeGroupsInGlobalReplicationGroupInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::increase_node_groups_in_global_replication_group::IncreaseNodeGroupsInGlobalReplicationGroupInput {
                global_replication_group_id: self.global_replication_group_id
                ,
                node_group_count: self.node_group_count
                    .unwrap_or_default()
                ,
                regional_configurations: self.regional_configurations
                ,
                apply_immediately: self.apply_immediately
                    .unwrap_or_default()
                ,
            }
        )
    }
}
