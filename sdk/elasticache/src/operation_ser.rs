// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ResourceName");
    if let Some(var_2) = &input.resource_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Tags");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(false, Some("Tag"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cache_security_group_ingress(
    input: &crate::input::AuthorizeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_9) = &input.cache_security_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_11) = &input.ec2_security_group_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_13) = &input.ec2_security_group_owner_id {
        scope_12.string(var_13);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_apply_update_action(
    input: &crate::input::BatchApplyUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchApplyUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ReplicationGroupIds");
    if let Some(var_15) = &input.replication_group_ids {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("CacheClusterIds");
    if let Some(var_20) = &input.cache_cluster_ids {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ServiceUpdateName");
    if let Some(var_25) = &input.service_update_name {
        scope_24.string(var_25);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_stop_update_action(
    input: &crate::input::BatchStopUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchStopUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ReplicationGroupIds");
    if let Some(var_27) = &input.replication_group_ids {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("CacheClusterIds");
    if let Some(var_32) = &input.cache_cluster_ids {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            entry_35.string(item_33);
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("ServiceUpdateName");
    if let Some(var_37) = &input.service_update_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_migration(
    input: &crate::input::CompleteMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CompleteMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("ReplicationGroupId");
    if let Some(var_39) = &input.replication_group_id {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Force");
    if input.force {
        scope_40.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("SourceSnapshotName");
    if let Some(var_42) = &input.source_snapshot_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TargetSnapshotName");
    if let Some(var_44) = &input.target_snapshot_name {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("TargetBucket");
    if let Some(var_46) = &input.target_bucket {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("KmsKeyId");
    if let Some(var_48) = &input.kms_key_id {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Tags");
    if let Some(var_50) = &input.tags {
        let mut list_52 = scope_49.start_list(false, Some("Tag"));
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_53, item_51)?;
        }
        list_52.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_cluster(
    input: &crate::input::CreateCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("CacheClusterId");
    if let Some(var_55) = &input.cache_cluster_id {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("ReplicationGroupId");
    if let Some(var_57) = &input.replication_group_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("AZMode");
    if let Some(var_59) = &input.az_mode {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("PreferredAvailabilityZone");
    if let Some(var_61) = &input.preferred_availability_zone {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_63) = &input.preferred_availability_zones {
        let mut list_65 = scope_62.start_list(false, Some("PreferredAvailabilityZone"));
        for item_64 in var_63 {
            #[allow(unused_mut)]
            let mut entry_66 = list_65.entry();
            entry_66.string(item_64);
        }
        list_65.finish();
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("NumCacheNodes");
    if let Some(var_68) = &input.num_cache_nodes {
        scope_67.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CacheNodeType");
    if let Some(var_70) = &input.cache_node_type {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Engine");
    if let Some(var_72) = &input.engine {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("EngineVersion");
    if let Some(var_74) = &input.engine_version {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("CacheParameterGroupName");
    if let Some(var_76) = &input.cache_parameter_group_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_78) = &input.cache_subnet_group_name {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_80) = &input.cache_security_group_names {
        let mut list_82 = scope_79.start_list(false, Some("CacheSecurityGroupName"));
        for item_81 in var_80 {
            #[allow(unused_mut)]
            let mut entry_83 = list_82.entry();
            entry_83.string(item_81);
        }
        list_82.finish();
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("SecurityGroupIds");
    if let Some(var_85) = &input.security_group_ids {
        let mut list_87 = scope_84.start_list(false, Some("SecurityGroupId"));
        for item_86 in var_85 {
            #[allow(unused_mut)]
            let mut entry_88 = list_87.entry();
            entry_88.string(item_86);
        }
        list_87.finish();
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Tags");
    if let Some(var_90) = &input.tags {
        let mut list_92 = scope_89.start_list(false, Some("Tag"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_93, item_91)?;
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("SnapshotArns");
    if let Some(var_95) = &input.snapshot_arns {
        let mut list_97 = scope_94.start_list(false, Some("SnapshotArn"));
        for item_96 in var_95 {
            #[allow(unused_mut)]
            let mut entry_98 = list_97.entry();
            entry_98.string(item_96);
        }
        list_97.finish();
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("SnapshotName");
    if let Some(var_100) = &input.snapshot_name {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Port");
    if let Some(var_104) = &input.port {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("NotificationTopicArn");
    if let Some(var_106) = &input.notification_topic_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_108) = &input.auto_minor_version_upgrade {
        scope_107.boolean(*var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_110) = &input.snapshot_retention_limit {
        scope_109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("SnapshotWindow");
    if let Some(var_112) = &input.snapshot_window {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("AuthToken");
    if let Some(var_114) = &input.auth_token {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("OutpostMode");
    if let Some(var_116) = &input.outpost_mode {
        scope_115.string(var_116.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("PreferredOutpostArn");
    if let Some(var_118) = &input.preferred_outpost_arn {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("PreferredOutpostArns");
    if let Some(var_120) = &input.preferred_outpost_arns {
        let mut list_122 = scope_119.start_list(false, Some("PreferredOutpostArn"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_125) = &input.log_delivery_configurations {
        let mut list_127 = scope_124.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_128, item_126,
            )?;
        }
        list_127.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_parameter_group(
    input: &crate::input::CreateCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("CacheParameterGroupName");
    if let Some(var_130) = &input.cache_parameter_group_name {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_132) = &input.cache_parameter_group_family {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Description");
    if let Some(var_134) = &input.description {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Tags");
    if let Some(var_136) = &input.tags {
        let mut list_138 = scope_135.start_list(false, Some("Tag"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_139, item_137)?;
        }
        list_138.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_security_group(
    input: &crate::input::CreateCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_141) = &input.cache_security_group_name {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Description");
    if let Some(var_143) = &input.description {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Tags");
    if let Some(var_145) = &input.tags {
        let mut list_147 = scope_144.start_list(false, Some("Tag"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_148, item_146)?;
        }
        list_147.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_subnet_group(
    input: &crate::input::CreateCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_150) = &input.cache_subnet_group_name {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_152) = &input.cache_subnet_group_description {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("SubnetIds");
    if let Some(var_154) = &input.subnet_ids {
        let mut list_156 = scope_153.start_list(false, Some("SubnetIdentifier"));
        for item_155 in var_154 {
            #[allow(unused_mut)]
            let mut entry_157 = list_156.entry();
            entry_157.string(item_155);
        }
        list_156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("Tags");
    if let Some(var_159) = &input.tags {
        let mut list_161 = scope_158.start_list(false, Some("Tag"));
        for item_160 in var_159 {
            #[allow(unused_mut)]
            let mut entry_162 = list_161.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_162, item_160)?;
        }
        list_161.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_replication_group(
    input: &crate::input::CreateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("GlobalReplicationGroupIdSuffix");
    if let Some(var_164) = &input.global_replication_group_id_suffix {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_166) = &input.global_replication_group_description {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_168) = &input.primary_replication_group_id {
        scope_167.string(var_168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replication_group(
    input: &crate::input::CreateReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ReplicationGroupId");
    if let Some(var_170) = &input.replication_group_id {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_172) = &input.replication_group_description {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_174) = &input.global_replication_group_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("PrimaryClusterId");
    if let Some(var_176) = &input.primary_cluster_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_178) = &input.automatic_failover_enabled {
        scope_177.boolean(*var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("MultiAZEnabled");
    if let Some(var_180) = &input.multi_az_enabled {
        scope_179.boolean(*var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("NumCacheClusters");
    if let Some(var_182) = &input.num_cache_clusters {
        scope_181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("PreferredCacheClusterAZs");
    if let Some(var_184) = &input.preferred_cache_cluster_a_zs {
        let mut list_186 = scope_183.start_list(false, Some("AvailabilityZone"));
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            entry_187.string(item_185);
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("NumNodeGroups");
    if let Some(var_189) = &input.num_node_groups {
        scope_188.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("ReplicasPerNodeGroup");
    if let Some(var_191) = &input.replicas_per_node_group {
        scope_190.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("NodeGroupConfiguration");
    if let Some(var_193) = &input.node_group_configuration {
        let mut list_195 = scope_192.start_list(false, Some("NodeGroupConfiguration"));
        for item_194 in var_193 {
            #[allow(unused_mut)]
            let mut entry_196 = list_195.entry();
            crate::query_ser::serialize_structure_crate_model_node_group_configuration(
                entry_196, item_194,
            )?;
        }
        list_195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("CacheNodeType");
    if let Some(var_198) = &input.cache_node_type {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("Engine");
    if let Some(var_200) = &input.engine {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("EngineVersion");
    if let Some(var_202) = &input.engine_version {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("CacheParameterGroupName");
    if let Some(var_204) = &input.cache_parameter_group_name {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_206) = &input.cache_subnet_group_name {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_208) = &input.cache_security_group_names {
        let mut list_210 = scope_207.start_list(false, Some("CacheSecurityGroupName"));
        for item_209 in var_208 {
            #[allow(unused_mut)]
            let mut entry_211 = list_210.entry();
            entry_211.string(item_209);
        }
        list_210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("SecurityGroupIds");
    if let Some(var_213) = &input.security_group_ids {
        let mut list_215 = scope_212.start_list(false, Some("SecurityGroupId"));
        for item_214 in var_213 {
            #[allow(unused_mut)]
            let mut entry_216 = list_215.entry();
            entry_216.string(item_214);
        }
        list_215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("Tags");
    if let Some(var_218) = &input.tags {
        let mut list_220 = scope_217.start_list(false, Some("Tag"));
        for item_219 in var_218 {
            #[allow(unused_mut)]
            let mut entry_221 = list_220.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_221, item_219)?;
        }
        list_220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("SnapshotArns");
    if let Some(var_223) = &input.snapshot_arns {
        let mut list_225 = scope_222.start_list(false, Some("SnapshotArn"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            entry_226.string(item_224);
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("SnapshotName");
    if let Some(var_228) = &input.snapshot_name {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_230) = &input.preferred_maintenance_window {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("Port");
    if let Some(var_232) = &input.port {
        scope_231.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("NotificationTopicArn");
    if let Some(var_234) = &input.notification_topic_arn {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_236) = &input.auto_minor_version_upgrade {
        scope_235.boolean(*var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_238) = &input.snapshot_retention_limit {
        scope_237.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("SnapshotWindow");
    if let Some(var_240) = &input.snapshot_window {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("AuthToken");
    if let Some(var_242) = &input.auth_token {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_244) = &input.transit_encryption_enabled {
        scope_243.boolean(*var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("AtRestEncryptionEnabled");
    if let Some(var_246) = &input.at_rest_encryption_enabled {
        scope_245.boolean(*var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("KmsKeyId");
    if let Some(var_248) = &input.kms_key_id {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("UserGroupIds");
    if let Some(var_250) = &input.user_group_ids {
        let mut list_252 = scope_249.start_list(false, None);
        for item_251 in var_250 {
            #[allow(unused_mut)]
            let mut entry_253 = list_252.entry();
            entry_253.string(item_251);
        }
        list_252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_255) = &input.log_delivery_configurations {
        let mut list_257 = scope_254.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_258, item_256,
            )?;
        }
        list_257.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("ReplicationGroupId");
    if let Some(var_260) = &input.replication_group_id {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("CacheClusterId");
    if let Some(var_262) = &input.cache_cluster_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("SnapshotName");
    if let Some(var_264) = &input.snapshot_name {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("KmsKeyId");
    if let Some(var_266) = &input.kms_key_id {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("Tags");
    if let Some(var_268) = &input.tags {
        let mut list_270 = scope_267.start_list(false, Some("Tag"));
        for item_269 in var_268 {
            #[allow(unused_mut)]
            let mut entry_271 = list_270.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_271, item_269)?;
        }
        list_270.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user(
    input: &crate::input::CreateUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("UserId");
    if let Some(var_273) = &input.user_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("UserName");
    if let Some(var_275) = &input.user_name {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Engine");
    if let Some(var_277) = &input.engine {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("Passwords");
    if let Some(var_279) = &input.passwords {
        let mut list_281 = scope_278.start_list(false, None);
        for item_280 in var_279 {
            #[allow(unused_mut)]
            let mut entry_282 = list_281.entry();
            entry_282.string(item_280);
        }
        list_281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("AccessString");
    if let Some(var_284) = &input.access_string {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("NoPasswordRequired");
    if let Some(var_286) = &input.no_password_required {
        scope_285.boolean(*var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Tags");
    if let Some(var_288) = &input.tags {
        let mut list_290 = scope_287.start_list(false, Some("Tag"));
        for item_289 in var_288 {
            #[allow(unused_mut)]
            let mut entry_291 = list_290.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_291, item_289)?;
        }
        list_290.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user_group(
    input: &crate::input::CreateUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("UserGroupId");
    if let Some(var_293) = &input.user_group_id {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Engine");
    if let Some(var_295) = &input.engine {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("UserIds");
    if let Some(var_297) = &input.user_ids {
        let mut list_299 = scope_296.start_list(false, None);
        for item_298 in var_297 {
            #[allow(unused_mut)]
            let mut entry_300 = list_299.entry();
            entry_300.string(item_298);
        }
        list_299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("Tags");
    if let Some(var_302) = &input.tags {
        let mut list_304 = scope_301.start_list(false, Some("Tag"));
        for item_303 in var_302 {
            #[allow(unused_mut)]
            let mut entry_305 = list_304.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_305, item_303)?;
        }
        list_304.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_node_groups_in_global_replication_group(
    input: &crate::input::DecreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DecreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_307) = &input.global_replication_group_id {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("NodeGroupCount");
    {
        scope_308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("GlobalNodeGroupsToRemove");
    if let Some(var_310) = &input.global_node_groups_to_remove {
        let mut list_312 = scope_309.start_list(false, Some("GlobalNodeGroupId"));
        for item_311 in var_310 {
            #[allow(unused_mut)]
            let mut entry_313 = list_312.entry();
            entry_313.string(item_311);
        }
        list_312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GlobalNodeGroupsToRetain");
    if let Some(var_315) = &input.global_node_groups_to_retain {
        let mut list_317 = scope_314.start_list(false, Some("GlobalNodeGroupId"));
        for item_316 in var_315 {
            #[allow(unused_mut)]
            let mut entry_318 = list_317.entry();
            entry_318.string(item_316);
        }
        list_317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("ApplyImmediately");
    {
        scope_319.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_replica_count(
    input: &crate::input::DecreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DecreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("ReplicationGroupId");
    if let Some(var_321) = &input.replication_group_id {
        scope_320.string(var_321);
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("NewReplicaCount");
    if let Some(var_323) = &input.new_replica_count {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("ReplicaConfiguration");
    if let Some(var_325) = &input.replica_configuration {
        let mut list_327 = scope_324.start_list(false, Some("ConfigureShard"));
        for item_326 in var_325 {
            #[allow(unused_mut)]
            let mut entry_328 = list_327.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_328, item_326)?;
        }
        list_327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ReplicasToRemove");
    if let Some(var_330) = &input.replicas_to_remove {
        let mut list_332 = scope_329.start_list(false, None);
        for item_331 in var_330 {
            #[allow(unused_mut)]
            let mut entry_333 = list_332.entry();
            entry_333.string(item_331);
        }
        list_332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("ApplyImmediately");
    {
        scope_334.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_cluster(
    input: &crate::input::DeleteCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CacheClusterId");
    if let Some(var_336) = &input.cache_cluster_id {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_338) = &input.final_snapshot_identifier {
        scope_337.string(var_338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_parameter_group(
    input: &crate::input::DeleteCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("CacheParameterGroupName");
    if let Some(var_340) = &input.cache_parameter_group_name {
        scope_339.string(var_340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_security_group(
    input: &crate::input::DeleteCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_342) = &input.cache_security_group_name {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_subnet_group(
    input: &crate::input::DeleteCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_344) = &input.cache_subnet_group_name {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_replication_group(
    input: &crate::input::DeleteGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_346) = &input.global_replication_group_id {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("RetainPrimaryReplicationGroup");
    {
        scope_347.boolean(input.retain_primary_replication_group);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_replication_group(
    input: &crate::input::DeleteReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("ReplicationGroupId");
    if let Some(var_349) = &input.replication_group_id {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("RetainPrimaryCluster");
    if let Some(var_351) = &input.retain_primary_cluster {
        scope_350.boolean(*var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_353) = &input.final_snapshot_identifier {
        scope_352.string(var_353);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SnapshotName");
    if let Some(var_355) = &input.snapshot_name {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user(
    input: &crate::input::DeleteUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("UserId");
    if let Some(var_357) = &input.user_id {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user_group(
    input: &crate::input::DeleteUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("UserGroupId");
    if let Some(var_359) = &input.user_group_id {
        scope_358.string(var_359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_clusters(
    input: &crate::input::DescribeCacheClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheClusters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("CacheClusterId");
    if let Some(var_361) = &input.cache_cluster_id {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("MaxRecords");
    if let Some(var_363) = &input.max_records {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Marker");
    if let Some(var_365) = &input.marker {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("ShowCacheNodeInfo");
    if let Some(var_367) = &input.show_cache_node_info {
        scope_366.boolean(*var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("ShowCacheClustersNotInReplicationGroups");
    if let Some(var_369) = &input.show_cache_clusters_not_in_replication_groups {
        scope_368.boolean(*var_369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_engine_versions(
    input: &crate::input::DescribeCacheEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheEngineVersions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("Engine");
    if let Some(var_371) = &input.engine {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("EngineVersion");
    if let Some(var_373) = &input.engine_version {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_375) = &input.cache_parameter_group_family {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("MaxRecords");
    if let Some(var_377) = &input.max_records {
        scope_376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Marker");
    if let Some(var_379) = &input.marker {
        scope_378.string(var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_380.boolean(input.default_only);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameter_groups(
    input: &crate::input::DescribeCacheParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameterGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CacheParameterGroupName");
    if let Some(var_382) = &input.cache_parameter_group_name {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("MaxRecords");
    if let Some(var_384) = &input.max_records {
        scope_383.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("Marker");
    if let Some(var_386) = &input.marker {
        scope_385.string(var_386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameters(
    input: &crate::input::DescribeCacheParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("CacheParameterGroupName");
    if let Some(var_388) = &input.cache_parameter_group_name {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Source");
    if let Some(var_390) = &input.source {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("MaxRecords");
    if let Some(var_392) = &input.max_records {
        scope_391.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_392).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("Marker");
    if let Some(var_394) = &input.marker {
        scope_393.string(var_394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_security_groups(
    input: &crate::input::DescribeCacheSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSecurityGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_396) = &input.cache_security_group_name {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("MaxRecords");
    if let Some(var_398) = &input.max_records {
        scope_397.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Marker");
    if let Some(var_400) = &input.marker {
        scope_399.string(var_400);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_subnet_groups(
    input: &crate::input::DescribeCacheSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSubnetGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_402) = &input.cache_subnet_group_name {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("MaxRecords");
    if let Some(var_404) = &input.max_records {
        scope_403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_404).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("Marker");
    if let Some(var_406) = &input.marker {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_408) = &input.cache_parameter_group_family {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("MaxRecords");
    if let Some(var_410) = &input.max_records {
        scope_409.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Marker");
    if let Some(var_412) = &input.marker {
        scope_411.string(var_412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("SourceIdentifier");
    if let Some(var_414) = &input.source_identifier {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("SourceType");
    if let Some(var_416) = &input.source_type {
        scope_415.string(var_416.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("StartTime");
    if let Some(var_418) = &input.start_time {
        scope_417.instant(var_418, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("EndTime");
    if let Some(var_420) = &input.end_time {
        scope_419.instant(var_420, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Duration");
    if let Some(var_422) = &input.duration {
        scope_421.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("MaxRecords");
    if let Some(var_424) = &input.max_records {
        scope_423.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_424).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Marker");
    if let Some(var_426) = &input.marker {
        scope_425.string(var_426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_replication_groups(
    input: &crate::input::DescribeGlobalReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeGlobalReplicationGroups",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_428) = &input.global_replication_group_id {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("MaxRecords");
    if let Some(var_430) = &input.max_records {
        scope_429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_430).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("Marker");
    if let Some(var_432) = &input.marker {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("ShowMemberInfo");
    if let Some(var_434) = &input.show_member_info {
        scope_433.boolean(*var_434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replication_groups(
    input: &crate::input::DescribeReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplicationGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("ReplicationGroupId");
    if let Some(var_436) = &input.replication_group_id {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MaxRecords");
    if let Some(var_438) = &input.max_records {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Marker");
    if let Some(var_440) = &input.marker {
        scope_439.string(var_440);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes(
    input: &crate::input::DescribeReservedCacheNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedCacheNodes", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_442) = &input.reserved_cache_node_id {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_444) = &input.reserved_cache_nodes_offering_id {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("CacheNodeType");
    if let Some(var_446) = &input.cache_node_type {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("Duration");
    if let Some(var_448) = &input.duration {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("ProductDescription");
    if let Some(var_450) = &input.product_description {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("OfferingType");
    if let Some(var_452) = &input.offering_type {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("MaxRecords");
    if let Some(var_454) = &input.max_records {
        scope_453.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("Marker");
    if let Some(var_456) = &input.marker {
        scope_455.string(var_456);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes_offerings(
    input: &crate::input::DescribeReservedCacheNodesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedCacheNodesOfferings",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_458) = &input.reserved_cache_nodes_offering_id {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("CacheNodeType");
    if let Some(var_460) = &input.cache_node_type {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("Duration");
    if let Some(var_462) = &input.duration {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("ProductDescription");
    if let Some(var_464) = &input.product_description {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("OfferingType");
    if let Some(var_466) = &input.offering_type {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("MaxRecords");
    if let Some(var_468) = &input.max_records {
        scope_467.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("Marker");
    if let Some(var_470) = &input.marker {
        scope_469.string(var_470);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_service_updates(
    input: &crate::input::DescribeServiceUpdatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeServiceUpdates", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("ServiceUpdateName");
    if let Some(var_472) = &input.service_update_name {
        scope_471.string(var_472);
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_474) = &input.service_update_status {
        let mut list_476 = scope_473.start_list(false, None);
        for item_475 in var_474 {
            #[allow(unused_mut)]
            let mut entry_477 = list_476.entry();
            entry_477.string(item_475.as_str());
        }
        list_476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("MaxRecords");
    if let Some(var_479) = &input.max_records {
        scope_478.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("Marker");
    if let Some(var_481) = &input.marker {
        scope_480.string(var_481);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("ReplicationGroupId");
    if let Some(var_483) = &input.replication_group_id {
        scope_482.string(var_483);
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("CacheClusterId");
    if let Some(var_485) = &input.cache_cluster_id {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("SnapshotName");
    if let Some(var_487) = &input.snapshot_name {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("SnapshotSource");
    if let Some(var_489) = &input.snapshot_source {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Marker");
    if let Some(var_491) = &input.marker {
        scope_490.string(var_491);
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("MaxRecords");
    if let Some(var_493) = &input.max_records {
        scope_492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ShowNodeGroupConfig");
    if let Some(var_495) = &input.show_node_group_config {
        scope_494.boolean(*var_495);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_update_actions(
    input: &crate::input::DescribeUpdateActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUpdateActions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("ServiceUpdateName");
    if let Some(var_497) = &input.service_update_name {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("ReplicationGroupIds");
    if let Some(var_499) = &input.replication_group_ids {
        let mut list_501 = scope_498.start_list(false, None);
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            entry_502.string(item_500);
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("CacheClusterIds");
    if let Some(var_504) = &input.cache_cluster_ids {
        let mut list_506 = scope_503.start_list(false, None);
        for item_505 in var_504 {
            #[allow(unused_mut)]
            let mut entry_507 = list_506.entry();
            entry_507.string(item_505);
        }
        list_506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("Engine");
    if let Some(var_509) = &input.engine {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_511) = &input.service_update_status {
        let mut list_513 = scope_510.start_list(false, None);
        for item_512 in var_511 {
            #[allow(unused_mut)]
            let mut entry_514 = list_513.entry();
            entry_514.string(item_512.as_str());
        }
        list_513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("ServiceUpdateTimeRange");
    if let Some(var_516) = &input.service_update_time_range {
        crate::query_ser::serialize_structure_crate_model_time_range_filter(scope_515, var_516)?;
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("UpdateActionStatus");
    if let Some(var_518) = &input.update_action_status {
        let mut list_520 = scope_517.start_list(false, None);
        for item_519 in var_518 {
            #[allow(unused_mut)]
            let mut entry_521 = list_520.entry();
            entry_521.string(item_519.as_str());
        }
        list_520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("ShowNodeLevelUpdateStatus");
    if let Some(var_523) = &input.show_node_level_update_status {
        scope_522.boolean(*var_523);
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("MaxRecords");
    if let Some(var_525) = &input.max_records {
        scope_524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Marker");
    if let Some(var_527) = &input.marker {
        scope_526.string(var_527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_user_groups(
    input: &crate::input::DescribeUserGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUserGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("UserGroupId");
    if let Some(var_529) = &input.user_group_id {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("MaxRecords");
    if let Some(var_531) = &input.max_records {
        scope_530.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Marker");
    if let Some(var_533) = &input.marker {
        scope_532.string(var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_users(
    input: &crate::input::DescribeUsersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsers", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Engine");
    if let Some(var_535) = &input.engine {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("UserId");
    if let Some(var_537) = &input.user_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Filters");
    if let Some(var_539) = &input.filters {
        let mut list_541 = scope_538.start_list(false, None);
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_542, item_540)?;
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("MaxRecords");
    if let Some(var_544) = &input.max_records {
        scope_543.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_544).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("Marker");
    if let Some(var_546) = &input.marker {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_global_replication_group(
    input: &crate::input::DisassociateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_548) = &input.global_replication_group_id {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("ReplicationGroupId");
    if let Some(var_550) = &input.replication_group_id {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("ReplicationGroupRegion");
    if let Some(var_552) = &input.replication_group_region {
        scope_551.string(var_552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_replication_group(
    input: &crate::input::FailoverGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "FailoverGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_554) = &input.global_replication_group_id {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("PrimaryRegion");
    if let Some(var_556) = &input.primary_region {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_558) = &input.primary_replication_group_id {
        scope_557.string(var_558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_node_groups_in_global_replication_group(
    input: &crate::input::IncreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "IncreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_560) = &input.global_replication_group_id {
        scope_559.string(var_560);
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("NodeGroupCount");
    {
        scope_561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("RegionalConfigurations");
    if let Some(var_563) = &input.regional_configurations {
        let mut list_565 = scope_562.start_list(false, Some("RegionalConfiguration"));
        for item_564 in var_563 {
            #[allow(unused_mut)]
            let mut entry_566 = list_565.entry();
            crate::query_ser::serialize_structure_crate_model_regional_configuration(
                entry_566, item_564,
            )?;
        }
        list_565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("ApplyImmediately");
    {
        scope_567.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_replica_count(
    input: &crate::input::IncreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "IncreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("ReplicationGroupId");
    if let Some(var_569) = &input.replication_group_id {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("NewReplicaCount");
    if let Some(var_571) = &input.new_replica_count {
        scope_570.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_571).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("ReplicaConfiguration");
    if let Some(var_573) = &input.replica_configuration {
        let mut list_575 = scope_572.start_list(false, Some("ConfigureShard"));
        for item_574 in var_573 {
            #[allow(unused_mut)]
            let mut entry_576 = list_575.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_576, item_574)?;
        }
        list_575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("ApplyImmediately");
    {
        scope_577.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_allowed_node_type_modifications(
    input: &crate::input::ListAllowedNodeTypeModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ListAllowedNodeTypeModifications",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("CacheClusterId");
    if let Some(var_579) = &input.cache_cluster_id {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("ReplicationGroupId");
    if let Some(var_581) = &input.replication_group_id {
        scope_580.string(var_581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("ResourceName");
    if let Some(var_583) = &input.resource_name {
        scope_582.string(var_583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_cluster(
    input: &crate::input::ModifyCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("CacheClusterId");
    if let Some(var_585) = &input.cache_cluster_id {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("NumCacheNodes");
    if let Some(var_587) = &input.num_cache_nodes {
        scope_586.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("CacheNodeIdsToRemove");
    if let Some(var_589) = &input.cache_node_ids_to_remove {
        let mut list_591 = scope_588.start_list(false, Some("CacheNodeId"));
        for item_590 in var_589 {
            #[allow(unused_mut)]
            let mut entry_592 = list_591.entry();
            entry_592.string(item_590);
        }
        list_591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("AZMode");
    if let Some(var_594) = &input.az_mode {
        scope_593.string(var_594.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("NewAvailabilityZones");
    if let Some(var_596) = &input.new_availability_zones {
        let mut list_598 = scope_595.start_list(false, Some("PreferredAvailabilityZone"));
        for item_597 in var_596 {
            #[allow(unused_mut)]
            let mut entry_599 = list_598.entry();
            entry_599.string(item_597);
        }
        list_598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_601) = &input.cache_security_group_names {
        let mut list_603 = scope_600.start_list(false, Some("CacheSecurityGroupName"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            entry_604.string(item_602);
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("SecurityGroupIds");
    if let Some(var_606) = &input.security_group_ids {
        let mut list_608 = scope_605.start_list(false, Some("SecurityGroupId"));
        for item_607 in var_606 {
            #[allow(unused_mut)]
            let mut entry_609 = list_608.entry();
            entry_609.string(item_607);
        }
        list_608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_611) = &input.preferred_maintenance_window {
        scope_610.string(var_611);
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("NotificationTopicArn");
    if let Some(var_613) = &input.notification_topic_arn {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("CacheParameterGroupName");
    if let Some(var_615) = &input.cache_parameter_group_name {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("NotificationTopicStatus");
    if let Some(var_617) = &input.notification_topic_status {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_618.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("EngineVersion");
    if let Some(var_620) = &input.engine_version {
        scope_619.string(var_620);
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_622) = &input.auto_minor_version_upgrade {
        scope_621.boolean(*var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_624) = &input.snapshot_retention_limit {
        scope_623.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_624).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("SnapshotWindow");
    if let Some(var_626) = &input.snapshot_window {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("CacheNodeType");
    if let Some(var_628) = &input.cache_node_type {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("AuthToken");
    if let Some(var_630) = &input.auth_token {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_632) = &input.auth_token_update_strategy {
        scope_631.string(var_632.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_634) = &input.log_delivery_configurations {
        let mut list_636 = scope_633.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_635 in var_634 {
            #[allow(unused_mut)]
            let mut entry_637 = list_636.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_637, item_635,
            )?;
        }
        list_636.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_parameter_group(
    input: &crate::input::ModifyCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("CacheParameterGroupName");
    if let Some(var_639) = &input.cache_parameter_group_name {
        scope_638.string(var_639);
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("ParameterNameValues");
    if let Some(var_641) = &input.parameter_name_values {
        let mut list_643 = scope_640.start_list(false, Some("ParameterNameValue"));
        for item_642 in var_641 {
            #[allow(unused_mut)]
            let mut entry_644 = list_643.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_644, item_642,
            )?;
        }
        list_643.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_subnet_group(
    input: &crate::input::ModifyCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_646) = &input.cache_subnet_group_name {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_648) = &input.cache_subnet_group_description {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("SubnetIds");
    if let Some(var_650) = &input.subnet_ids {
        let mut list_652 = scope_649.start_list(false, Some("SubnetIdentifier"));
        for item_651 in var_650 {
            #[allow(unused_mut)]
            let mut entry_653 = list_652.entry();
            entry_653.string(item_651);
        }
        list_652.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_replication_group(
    input: &crate::input::ModifyGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_655) = &input.global_replication_group_id {
        scope_654.string(var_655);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("ApplyImmediately");
    {
        scope_656.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("CacheNodeType");
    if let Some(var_658) = &input.cache_node_type {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("EngineVersion");
    if let Some(var_660) = &input.engine_version {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("CacheParameterGroupName");
    if let Some(var_662) = &input.cache_parameter_group_name {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_664) = &input.global_replication_group_description {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_666) = &input.automatic_failover_enabled {
        scope_665.boolean(*var_666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group(
    input: &crate::input::ModifyReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("ReplicationGroupId");
    if let Some(var_668) = &input.replication_group_id {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_670) = &input.replication_group_description {
        scope_669.string(var_670);
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("PrimaryClusterId");
    if let Some(var_672) = &input.primary_cluster_id {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("SnapshottingClusterId");
    if let Some(var_674) = &input.snapshotting_cluster_id {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_676) = &input.automatic_failover_enabled {
        scope_675.boolean(*var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("MultiAZEnabled");
    if let Some(var_678) = &input.multi_az_enabled {
        scope_677.boolean(*var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("NodeGroupId");
    if let Some(var_680) = &input.node_group_id {
        scope_679.string(var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_682) = &input.cache_security_group_names {
        let mut list_684 = scope_681.start_list(false, Some("CacheSecurityGroupName"));
        for item_683 in var_682 {
            #[allow(unused_mut)]
            let mut entry_685 = list_684.entry();
            entry_685.string(item_683);
        }
        list_684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("SecurityGroupIds");
    if let Some(var_687) = &input.security_group_ids {
        let mut list_689 = scope_686.start_list(false, Some("SecurityGroupId"));
        for item_688 in var_687 {
            #[allow(unused_mut)]
            let mut entry_690 = list_689.entry();
            entry_690.string(item_688);
        }
        list_689.finish();
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_692) = &input.preferred_maintenance_window {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("NotificationTopicArn");
    if let Some(var_694) = &input.notification_topic_arn {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("CacheParameterGroupName");
    if let Some(var_696) = &input.cache_parameter_group_name {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("NotificationTopicStatus");
    if let Some(var_698) = &input.notification_topic_status {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_699.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("EngineVersion");
    if let Some(var_701) = &input.engine_version {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_703) = &input.auto_minor_version_upgrade {
        scope_702.boolean(*var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_705) = &input.snapshot_retention_limit {
        scope_704.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_705).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("SnapshotWindow");
    if let Some(var_707) = &input.snapshot_window {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("CacheNodeType");
    if let Some(var_709) = &input.cache_node_type {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("AuthToken");
    if let Some(var_711) = &input.auth_token {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_713) = &input.auth_token_update_strategy {
        scope_712.string(var_713.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("UserGroupIdsToAdd");
    if let Some(var_715) = &input.user_group_ids_to_add {
        let mut list_717 = scope_714.start_list(false, None);
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            entry_718.string(item_716);
        }
        list_717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("UserGroupIdsToRemove");
    if let Some(var_720) = &input.user_group_ids_to_remove {
        let mut list_722 = scope_719.start_list(false, None);
        for item_721 in var_720 {
            #[allow(unused_mut)]
            let mut entry_723 = list_722.entry();
            entry_723.string(item_721);
        }
        list_722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("RemoveUserGroups");
    if let Some(var_725) = &input.remove_user_groups {
        scope_724.boolean(*var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_727) = &input.log_delivery_configurations {
        let mut list_729 = scope_726.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_728 in var_727 {
            #[allow(unused_mut)]
            let mut entry_730 = list_729.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_730, item_728,
            )?;
        }
        list_729.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group_shard_configuration(
    input: &crate::input::ModifyReplicationGroupShardConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyReplicationGroupShardConfiguration",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("ReplicationGroupId");
    if let Some(var_732) = &input.replication_group_id {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("NodeGroupCount");
    {
        scope_733.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("ApplyImmediately");
    {
        scope_734.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("ReshardingConfiguration");
    if let Some(var_736) = &input.resharding_configuration {
        let mut list_738 = scope_735.start_list(false, Some("ReshardingConfiguration"));
        for item_737 in var_736 {
            #[allow(unused_mut)]
            let mut entry_739 = list_738.entry();
            crate::query_ser::serialize_structure_crate_model_resharding_configuration(
                entry_739, item_737,
            )?;
        }
        list_738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("NodeGroupsToRemove");
    if let Some(var_741) = &input.node_groups_to_remove {
        let mut list_743 = scope_740.start_list(false, Some("NodeGroupToRemove"));
        for item_742 in var_741 {
            #[allow(unused_mut)]
            let mut entry_744 = list_743.entry();
            entry_744.string(item_742);
        }
        list_743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("NodeGroupsToRetain");
    if let Some(var_746) = &input.node_groups_to_retain {
        let mut list_748 = scope_745.start_list(false, Some("NodeGroupToRetain"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            entry_749.string(item_747);
        }
        list_748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user(
    input: &crate::input::ModifyUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("UserId");
    if let Some(var_751) = &input.user_id {
        scope_750.string(var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("AccessString");
    if let Some(var_753) = &input.access_string {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("AppendAccessString");
    if let Some(var_755) = &input.append_access_string {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("Passwords");
    if let Some(var_757) = &input.passwords {
        let mut list_759 = scope_756.start_list(false, None);
        for item_758 in var_757 {
            #[allow(unused_mut)]
            let mut entry_760 = list_759.entry();
            entry_760.string(item_758);
        }
        list_759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("NoPasswordRequired");
    if let Some(var_762) = &input.no_password_required {
        scope_761.boolean(*var_762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user_group(
    input: &crate::input::ModifyUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("UserGroupId");
    if let Some(var_764) = &input.user_group_id {
        scope_763.string(var_764);
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("UserIdsToAdd");
    if let Some(var_766) = &input.user_ids_to_add {
        let mut list_768 = scope_765.start_list(false, None);
        for item_767 in var_766 {
            #[allow(unused_mut)]
            let mut entry_769 = list_768.entry();
            entry_769.string(item_767);
        }
        list_768.finish();
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("UserIdsToRemove");
    if let Some(var_771) = &input.user_ids_to_remove {
        let mut list_773 = scope_770.start_list(false, None);
        for item_772 in var_771 {
            #[allow(unused_mut)]
            let mut entry_774 = list_773.entry();
            entry_774.string(item_772);
        }
        list_773.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_cache_nodes_offering(
    input: &crate::input::PurchaseReservedCacheNodesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedCacheNodesOffering",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_776) = &input.reserved_cache_nodes_offering_id {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_778) = &input.reserved_cache_node_id {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("CacheNodeCount");
    if let Some(var_780) = &input.cache_node_count {
        scope_779.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("Tags");
    if let Some(var_782) = &input.tags {
        let mut list_784 = scope_781.start_list(false, Some("Tag"));
        for item_783 in var_782 {
            #[allow(unused_mut)]
            let mut entry_785 = list_784.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_785, item_783)?;
        }
        list_784.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebalance_slots_in_global_replication_group(
    input: &crate::input::RebalanceSlotsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RebalanceSlotsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_787) = &input.global_replication_group_id {
        scope_786.string(var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("ApplyImmediately");
    {
        scope_788.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cache_cluster(
    input: &crate::input::RebootCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RebootCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("CacheClusterId");
    if let Some(var_790) = &input.cache_cluster_id {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("CacheNodeIdsToReboot");
    if let Some(var_792) = &input.cache_node_ids_to_reboot {
        let mut list_794 = scope_791.start_list(false, Some("CacheNodeId"));
        for item_793 in var_792 {
            #[allow(unused_mut)]
            let mut entry_795 = list_794.entry();
            entry_795.string(item_793);
        }
        list_794.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("ResourceName");
    if let Some(var_797) = &input.resource_name {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("TagKeys");
    if let Some(var_799) = &input.tag_keys {
        let mut list_801 = scope_798.start_list(false, None);
        for item_800 in var_799 {
            #[allow(unused_mut)]
            let mut entry_802 = list_801.entry();
            entry_802.string(item_800);
        }
        list_801.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cache_parameter_group(
    input: &crate::input::ResetCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("CacheParameterGroupName");
    if let Some(var_804) = &input.cache_parameter_group_name {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_805.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ParameterNameValues");
    if let Some(var_807) = &input.parameter_name_values {
        let mut list_809 = scope_806.start_list(false, Some("ParameterNameValue"));
        for item_808 in var_807 {
            #[allow(unused_mut)]
            let mut entry_810 = list_809.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_810, item_808,
            )?;
        }
        list_809.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cache_security_group_ingress(
    input: &crate::input::RevokeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_812) = &input.cache_security_group_name {
        scope_811.string(var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_814) = &input.ec2_security_group_name {
        scope_813.string(var_814);
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_816) = &input.ec2_security_group_owner_id {
        scope_815.string(var_816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_migration(
    input: &crate::input::StartMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("ReplicationGroupId");
    if let Some(var_818) = &input.replication_group_id {
        scope_817.string(var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("CustomerNodeEndpointList");
    if let Some(var_820) = &input.customer_node_endpoint_list {
        let mut list_822 = scope_819.start_list(false, None);
        for item_821 in var_820 {
            #[allow(unused_mut)]
            let mut entry_823 = list_822.entry();
            crate::query_ser::serialize_structure_crate_model_customer_node_endpoint(
                entry_823, item_821,
            )?;
        }
        list_822.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_test_failover(
    input: &crate::input::TestFailoverInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TestFailover", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("ReplicationGroupId");
    if let Some(var_825) = &input.replication_group_id {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("NodeGroupId");
    if let Some(var_827) = &input.node_group_id {
        scope_826.string(var_827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
