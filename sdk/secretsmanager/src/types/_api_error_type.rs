// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApiErrorType {
    /// <p>The ARN or name of the secret.</p>
    pub secret_id: ::std::option::Option<::std::string::String>,
    /// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>, for example <code>ResourceNotFoundException</code>,<code>InvalidParameterException</code>, <code>InvalidRequestException</code>, <code>DecryptionFailure</code>, or <code>AccessDeniedException</code>.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>A message describing the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl ApiErrorType {
    /// <p>The ARN or name of the secret.</p>
    pub fn secret_id(&self) -> ::std::option::Option<&str> {
        self.secret_id.as_deref()
    }
    /// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>, for example <code>ResourceNotFoundException</code>,<code>InvalidParameterException</code>, <code>InvalidRequestException</code>, <code>DecryptionFailure</code>, or <code>AccessDeniedException</code>.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>A message describing the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ApiErrorType {
    /// Creates a new builder-style object to manufacture [`ApiErrorType`](crate::types::ApiErrorType).
    pub fn builder() -> crate::types::builders::ApiErrorTypeBuilder {
        crate::types::builders::ApiErrorTypeBuilder::default()
    }
}

/// A builder for [`ApiErrorType`](crate::types::ApiErrorType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApiErrorTypeBuilder {
    pub(crate) secret_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl ApiErrorTypeBuilder {
    /// <p>The ARN or name of the secret.</p>
    pub fn secret_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN or name of the secret.</p>
    pub fn set_secret_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_id = input;
        self
    }
    /// <p>The ARN or name of the secret.</p>
    pub fn get_secret_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_id
    }
    /// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>, for example <code>ResourceNotFoundException</code>,<code>InvalidParameterException</code>, <code>InvalidRequestException</code>, <code>DecryptionFailure</code>, or <code>AccessDeniedException</code>.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>, for example <code>ResourceNotFoundException</code>,<code>InvalidParameterException</code>, <code>InvalidRequestException</code>, <code>DecryptionFailure</code>, or <code>AccessDeniedException</code>.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error Secrets Manager encountered while retrieving an individual secret as part of <code>BatchGetSecretValue</code>, for example <code>ResourceNotFoundException</code>,<code>InvalidParameterException</code>, <code>InvalidRequestException</code>, <code>DecryptionFailure</code>, or <code>AccessDeniedException</code>.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>A message describing the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message describing the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`ApiErrorType`](crate::types::ApiErrorType).
    pub fn build(self) -> crate::types::ApiErrorType {
        crate::types::ApiErrorType {
            secret_id: self.secret_id,
            error_code: self.error_code,
            message: self.message,
        }
    }
}
