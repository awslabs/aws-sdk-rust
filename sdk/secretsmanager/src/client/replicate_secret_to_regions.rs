// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ReplicateSecretToRegions`](crate::client::fluent_builders::ReplicateSecretToRegions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`secret_id(impl Into<String>)`](crate::client::fluent_builders::ReplicateSecretToRegions::secret_id) / [`set_secret_id(Option<String>)`](crate::client::fluent_builders::ReplicateSecretToRegions::set_secret_id): <p>The ARN or name of the secret to replicate.</p>
    ///   - [`add_replica_regions(Vec<ReplicaRegionType>)`](crate::client::fluent_builders::ReplicateSecretToRegions::add_replica_regions) / [`set_add_replica_regions(Option<Vec<ReplicaRegionType>>)`](crate::client::fluent_builders::ReplicateSecretToRegions::set_add_replica_regions): <p>A list of Regions in which to replicate the secret.</p>
    ///   - [`force_overwrite_replica_secret(bool)`](crate::client::fluent_builders::ReplicateSecretToRegions::force_overwrite_replica_secret) / [`set_force_overwrite_replica_secret(bool)`](crate::client::fluent_builders::ReplicateSecretToRegions::set_force_overwrite_replica_secret): <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    /// - On success, responds with [`ReplicateSecretToRegionsOutput`](crate::output::ReplicateSecretToRegionsOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::ReplicateSecretToRegionsOutput::arn): <p>The ARN of the primary secret.</p>
    ///   - [`replication_status(Option<Vec<ReplicationStatusType>>)`](crate::output::ReplicateSecretToRegionsOutput::replication_status): <p>The status of replication.</p>
    /// - On failure, responds with [`SdkError<ReplicateSecretToRegionsError>`](crate::error::ReplicateSecretToRegionsError)
    pub fn replicate_secret_to_regions(
        &self,
    ) -> crate::client::fluent_builders::ReplicateSecretToRegions {
        crate::client::fluent_builders::ReplicateSecretToRegions::new(self.handle.clone())
    }
}
