// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteSecret`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`secret_id(impl Into<String>)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::secret_id) / [`set_secret_id(Option<String>)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::set_secret_id): <p>The ARN or name of the secret to delete.</p>  <p>For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
    ///   - [`recovery_window_in_days(i64)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::recovery_window_in_days) / [`set_recovery_window_in_days(Option<i64>)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::set_recovery_window_in_days): <p>The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the secret. You can't use both this parameter and <code>ForceDeleteWithoutRecovery</code> in the same call. If you don't use either, then Secrets Manager defaults to a 30 day recovery window.</p>
    ///   - [`force_delete_without_recovery(bool)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::force_delete_without_recovery) / [`set_force_delete_without_recovery(Option<bool>)`](crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::set_force_delete_without_recovery): <p>Specifies whether to delete the secret without any recovery window. You can't use both this parameter and <code>RecoveryWindowInDays</code> in the same call. If you don't use either, then Secrets Manager defaults to a 30 day recovery window.</p>  <p>Secrets Manager performs the actual deletion with an asynchronous background process, so there might be a short delay before the secret is permanently deleted. If you delete a secret and then immediately create a secret with the same name, use appropriate back off and retry logic.</p> <important>   <p>Use this parameter with caution. This parameter causes the operation to skip the normal recovery window before the permanent deletion that Secrets Manager would normally impose with the <code>RecoveryWindowInDays</code> parameter. If you delete a secret with the <code>ForceDeleteWithoutRecovery</code> parameter, then you have no opportunity to recover the secret. You lose the secret permanently.</p>  </important>
    /// - On success, responds with [`DeleteSecretOutput`](crate::operation::delete_secret::DeleteSecretOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::delete_secret::DeleteSecretOutput::arn): <p>The ARN of the secret.</p>
    ///   - [`name(Option<String>)`](crate::operation::delete_secret::DeleteSecretOutput::name): <p>The name of the secret.</p>
    ///   - [`deletion_date(Option<DateTime>)`](crate::operation::delete_secret::DeleteSecretOutput::deletion_date): <p>The date and time after which this secret Secrets Manager can permanently delete this secret, and it can no longer be restored. This value is the date and time of the delete request plus the number of days in <code>RecoveryWindowInDays</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteSecretError>`](crate::operation::delete_secret::DeleteSecretError)
    pub fn delete_secret(
        &self,
    ) -> crate::operation::delete_secret::builders::DeleteSecretFluentBuilder {
        crate::operation::delete_secret::builders::DeleteSecretFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
