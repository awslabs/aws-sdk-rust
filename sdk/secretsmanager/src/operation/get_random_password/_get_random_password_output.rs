// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRandomPasswordOutput {
    /// <p>A string with the password.</p>
    #[doc(hidden)]
    pub random_password: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRandomPasswordOutput {
    /// <p>A string with the password.</p>
    pub fn random_password(&self) -> std::option::Option<&str> {
        self.random_password.as_deref()
    }
}
impl std::fmt::Debug for GetRandomPasswordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRandomPasswordOutput");
        formatter.field("random_password", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetRandomPasswordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRandomPasswordOutput {
    /// Creates a new builder-style object to manufacture [`GetRandomPasswordOutput`](crate::operation::get_random_password::GetRandomPasswordOutput).
    pub fn builder(
    ) -> crate::operation::get_random_password::builders::GetRandomPasswordOutputBuilder {
        crate::operation::get_random_password::builders::GetRandomPasswordOutputBuilder::default()
    }
}

/// A builder for [`GetRandomPasswordOutput`](crate::operation::get_random_password::GetRandomPasswordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetRandomPasswordOutputBuilder {
    pub(crate) random_password: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRandomPasswordOutputBuilder {
    /// <p>A string with the password.</p>
    pub fn random_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.random_password = Some(input.into());
        self
    }
    /// <p>A string with the password.</p>
    pub fn set_random_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.random_password = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRandomPasswordOutput`](crate::operation::get_random_password::GetRandomPasswordOutput).
    pub fn build(self) -> crate::operation::get_random_password::GetRandomPasswordOutput {
        crate::operation::get_random_password::GetRandomPasswordOutput {
            random_password: self.random_password,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetRandomPasswordOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRandomPasswordOutputBuilder");
        formatter.field("random_password", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
