// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRandomPasswordInput {
    /// <p>The length of the password. If you don't include this parameter, the default length is 32 characters.</p>
    pub password_length: ::std::option::Option<i64>,
    /// <p>A string of the characters that you don't want in the password.</p>
    pub exclude_characters: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.</p>
    pub exclude_numbers: ::std::option::Option<bool>,
    /// <p>Specifies whether to exclude the following punctuation characters from the password: <code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>. If you don't include this switch, the password can contain punctuation.</p>
    pub exclude_punctuation: ::std::option::Option<bool>,
    /// <p>Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.</p>
    pub exclude_uppercase: ::std::option::Option<bool>,
    /// <p>Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.</p>
    pub exclude_lowercase: ::std::option::Option<bool>,
    /// <p>Specifies whether to include the space character. If you include this switch, the password can contain space characters.</p>
    pub include_space: ::std::option::Option<bool>,
    /// <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.</p>
    pub require_each_included_type: ::std::option::Option<bool>,
}
impl GetRandomPasswordInput {
    /// <p>The length of the password. If you don't include this parameter, the default length is 32 characters.</p>
    pub fn password_length(&self) -> ::std::option::Option<i64> {
        self.password_length
    }
    /// <p>A string of the characters that you don't want in the password.</p>
    pub fn exclude_characters(&self) -> ::std::option::Option<&str> {
        self.exclude_characters.as_deref()
    }
    /// <p>Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.</p>
    pub fn exclude_numbers(&self) -> ::std::option::Option<bool> {
        self.exclude_numbers
    }
    /// <p>Specifies whether to exclude the following punctuation characters from the password: <code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>. If you don't include this switch, the password can contain punctuation.</p>
    pub fn exclude_punctuation(&self) -> ::std::option::Option<bool> {
        self.exclude_punctuation
    }
    /// <p>Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.</p>
    pub fn exclude_uppercase(&self) -> ::std::option::Option<bool> {
        self.exclude_uppercase
    }
    /// <p>Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.</p>
    pub fn exclude_lowercase(&self) -> ::std::option::Option<bool> {
        self.exclude_lowercase
    }
    /// <p>Specifies whether to include the space character. If you include this switch, the password can contain space characters.</p>
    pub fn include_space(&self) -> ::std::option::Option<bool> {
        self.include_space
    }
    /// <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.</p>
    pub fn require_each_included_type(&self) -> ::std::option::Option<bool> {
        self.require_each_included_type
    }
}
impl GetRandomPasswordInput {
    /// Creates a new builder-style object to manufacture [`GetRandomPasswordInput`](crate::operation::get_random_password::GetRandomPasswordInput).
    pub fn builder() -> crate::operation::get_random_password::builders::GetRandomPasswordInputBuilder {
        crate::operation::get_random_password::builders::GetRandomPasswordInputBuilder::default()
    }
}

/// A builder for [`GetRandomPasswordInput`](crate::operation::get_random_password::GetRandomPasswordInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRandomPasswordInputBuilder {
    pub(crate) password_length: ::std::option::Option<i64>,
    pub(crate) exclude_characters: ::std::option::Option<::std::string::String>,
    pub(crate) exclude_numbers: ::std::option::Option<bool>,
    pub(crate) exclude_punctuation: ::std::option::Option<bool>,
    pub(crate) exclude_uppercase: ::std::option::Option<bool>,
    pub(crate) exclude_lowercase: ::std::option::Option<bool>,
    pub(crate) include_space: ::std::option::Option<bool>,
    pub(crate) require_each_included_type: ::std::option::Option<bool>,
}
impl GetRandomPasswordInputBuilder {
    /// <p>The length of the password. If you don't include this parameter, the default length is 32 characters.</p>
    pub fn password_length(mut self, input: i64) -> Self {
        self.password_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of the password. If you don't include this parameter, the default length is 32 characters.</p>
    pub fn set_password_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.password_length = input;
        self
    }
    /// <p>The length of the password. If you don't include this parameter, the default length is 32 characters.</p>
    pub fn get_password_length(&self) -> &::std::option::Option<i64> {
        &self.password_length
    }
    /// <p>A string of the characters that you don't want in the password.</p>
    pub fn exclude_characters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exclude_characters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string of the characters that you don't want in the password.</p>
    pub fn set_exclude_characters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exclude_characters = input;
        self
    }
    /// <p>A string of the characters that you don't want in the password.</p>
    pub fn get_exclude_characters(&self) -> &::std::option::Option<::std::string::String> {
        &self.exclude_characters
    }
    /// <p>Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.</p>
    pub fn exclude_numbers(mut self, input: bool) -> Self {
        self.exclude_numbers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.</p>
    pub fn set_exclude_numbers(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_numbers = input;
        self
    }
    /// <p>Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.</p>
    pub fn get_exclude_numbers(&self) -> &::std::option::Option<bool> {
        &self.exclude_numbers
    }
    /// <p>Specifies whether to exclude the following punctuation characters from the password: <code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>. If you don't include this switch, the password can contain punctuation.</p>
    pub fn exclude_punctuation(mut self, input: bool) -> Self {
        self.exclude_punctuation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to exclude the following punctuation characters from the password: <code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>. If you don't include this switch, the password can contain punctuation.</p>
    pub fn set_exclude_punctuation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_punctuation = input;
        self
    }
    /// <p>Specifies whether to exclude the following punctuation characters from the password: <code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>. If you don't include this switch, the password can contain punctuation.</p>
    pub fn get_exclude_punctuation(&self) -> &::std::option::Option<bool> {
        &self.exclude_punctuation
    }
    /// <p>Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.</p>
    pub fn exclude_uppercase(mut self, input: bool) -> Self {
        self.exclude_uppercase = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.</p>
    pub fn set_exclude_uppercase(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_uppercase = input;
        self
    }
    /// <p>Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.</p>
    pub fn get_exclude_uppercase(&self) -> &::std::option::Option<bool> {
        &self.exclude_uppercase
    }
    /// <p>Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.</p>
    pub fn exclude_lowercase(mut self, input: bool) -> Self {
        self.exclude_lowercase = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.</p>
    pub fn set_exclude_lowercase(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_lowercase = input;
        self
    }
    /// <p>Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.</p>
    pub fn get_exclude_lowercase(&self) -> &::std::option::Option<bool> {
        &self.exclude_lowercase
    }
    /// <p>Specifies whether to include the space character. If you include this switch, the password can contain space characters.</p>
    pub fn include_space(mut self, input: bool) -> Self {
        self.include_space = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include the space character. If you include this switch, the password can contain space characters.</p>
    pub fn set_include_space(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_space = input;
        self
    }
    /// <p>Specifies whether to include the space character. If you include this switch, the password can contain space characters.</p>
    pub fn get_include_space(&self) -> &::std::option::Option<bool> {
        &self.include_space
    }
    /// <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.</p>
    pub fn require_each_included_type(mut self, input: bool) -> Self {
        self.require_each_included_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.</p>
    pub fn set_require_each_included_type(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_each_included_type = input;
        self
    }
    /// <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.</p>
    pub fn get_require_each_included_type(&self) -> &::std::option::Option<bool> {
        &self.require_each_included_type
    }
    /// Consumes the builder and constructs a [`GetRandomPasswordInput`](crate::operation::get_random_password::GetRandomPasswordInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_random_password::GetRandomPasswordInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_random_password::GetRandomPasswordInput {
            password_length: self.password_length,
            exclude_characters: self.exclude_characters,
            exclude_numbers: self.exclude_numbers,
            exclude_punctuation: self.exclude_punctuation,
            exclude_uppercase: self.exclude_uppercase,
            exclude_lowercase: self.exclude_lowercase,
            include_space: self.include_space,
            require_each_included_type: self.require_each_included_type,
        })
    }
}
