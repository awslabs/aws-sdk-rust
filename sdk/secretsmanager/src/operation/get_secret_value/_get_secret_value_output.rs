// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSecretValueOutput {
    /// <p>The ARN of the secret.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The friendly name of the secret.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of this version of the secret.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a> string.</p>
    /// <p>If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in <code>SecretString</code> instead.</p>
    pub secret_binary: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.</p>
    /// <p>If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. </p>
    pub secret_string: ::std::option::Option<::std::string::String>,
    /// <p>A list of all of the staging labels currently attached to this version of the secret.</p>
    pub version_stages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The date and time that this version of the secret was created. If you don't specify which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the <code>AWSCURRENT</code> version.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSecretValueOutput {
    /// <p>The ARN of the secret.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The friendly name of the secret.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier of this version of the secret.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a> string.</p>
    /// <p>If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in <code>SecretString</code> instead.</p>
    pub fn secret_binary(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.secret_binary.as_ref()
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.</p>
    /// <p>If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. </p>
    pub fn secret_string(&self) -> ::std::option::Option<&str> {
        self.secret_string.as_deref()
    }
    /// <p>A list of all of the staging labels currently attached to this version of the secret.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.version_stages.is_none()`.
    pub fn version_stages(&self) -> &[::std::string::String] {
        self.version_stages.as_deref().unwrap_or_default()
    }
    /// <p>The date and time that this version of the secret was created. If you don't specify which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the <code>AWSCURRENT</code> version.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
}
impl ::std::fmt::Debug for GetSecretValueOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSecretValueOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("version_id", &self.version_id);
        formatter.field("secret_binary", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_string", &"*** Sensitive Data Redacted ***");
        formatter.field("version_stages", &self.version_stages);
        formatter.field("created_date", &self.created_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetSecretValueOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSecretValueOutput {
    /// Creates a new builder-style object to manufacture [`GetSecretValueOutput`](crate::operation::get_secret_value::GetSecretValueOutput).
    pub fn builder() -> crate::operation::get_secret_value::builders::GetSecretValueOutputBuilder {
        crate::operation::get_secret_value::builders::GetSecretValueOutputBuilder::default()
    }
}

/// A builder for [`GetSecretValueOutput`](crate::operation::get_secret_value::GetSecretValueOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetSecretValueOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) secret_binary: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) secret_string: ::std::option::Option<::std::string::String>,
    pub(crate) version_stages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSecretValueOutputBuilder {
    /// <p>The ARN of the secret.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the secret.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the secret.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The friendly name of the secret.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The friendly name of the secret.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The friendly name of the secret.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier of this version of the secret.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of this version of the secret.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The unique identifier of this version of the secret.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a> string.</p>
    /// <p>If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in <code>SecretString</code> instead.</p>
    pub fn secret_binary(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.secret_binary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a> string.</p>
    /// <p>If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in <code>SecretString</code> instead.</p>
    pub fn set_secret_binary(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.secret_binary = input;
        self
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a> string.</p>
    /// <p>If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in <code>SecretString</code> instead.</p>
    pub fn get_secret_binary(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.secret_binary
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.</p>
    /// <p>If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. </p>
    pub fn secret_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.</p>
    /// <p>If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. </p>
    pub fn set_secret_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_string = input;
        self
    }
    /// <p>The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.</p>
    /// <p>If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. </p>
    pub fn get_secret_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_string
    }
    /// Appends an item to `version_stages`.
    ///
    /// To override the contents of this collection use [`set_version_stages`](Self::set_version_stages).
    ///
    /// <p>A list of all of the staging labels currently attached to this version of the secret.</p>
    pub fn version_stages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.version_stages.unwrap_or_default();
        v.push(input.into());
        self.version_stages = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of all of the staging labels currently attached to this version of the secret.</p>
    pub fn set_version_stages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.version_stages = input;
        self
    }
    /// <p>A list of all of the staging labels currently attached to this version of the secret.</p>
    pub fn get_version_stages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.version_stages
    }
    /// <p>The date and time that this version of the secret was created. If you don't specify which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the <code>AWSCURRENT</code> version.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this version of the secret was created. If you don't specify which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the <code>AWSCURRENT</code> version.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time that this version of the secret was created. If you don't specify which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the <code>AWSCURRENT</code> version.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSecretValueOutput`](crate::operation::get_secret_value::GetSecretValueOutput).
    pub fn build(self) -> crate::operation::get_secret_value::GetSecretValueOutput {
        crate::operation::get_secret_value::GetSecretValueOutput {
            arn: self.arn,
            name: self.name,
            version_id: self.version_id,
            secret_binary: self.secret_binary,
            secret_string: self.secret_string,
            version_stages: self.version_stages,
            created_date: self.created_date,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetSecretValueOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSecretValueOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("version_id", &self.version_id);
        formatter.field("secret_binary", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_string", &"*** Sensitive Data Redacted ***");
        formatter.field("version_stages", &self.version_stages);
        formatter.field("created_date", &self.created_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
