// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicateSecretToRegionsInput {
    /// <p>The ARN or name of the secret to replicate.</p>
    #[doc(hidden)]
    pub secret_id: std::option::Option<std::string::String>,
    /// <p>A list of Regions in which to replicate the secret.</p>
    #[doc(hidden)]
    pub add_replica_regions: std::option::Option<std::vec::Vec<crate::types::ReplicaRegionType>>,
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    #[doc(hidden)]
    pub force_overwrite_replica_secret: bool,
}
impl ReplicateSecretToRegionsInput {
    /// <p>The ARN or name of the secret to replicate.</p>
    pub fn secret_id(&self) -> std::option::Option<&str> {
        self.secret_id.as_deref()
    }
    /// <p>A list of Regions in which to replicate the secret.</p>
    pub fn add_replica_regions(&self) -> std::option::Option<&[crate::types::ReplicaRegionType]> {
        self.add_replica_regions.as_deref()
    }
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    pub fn force_overwrite_replica_secret(&self) -> bool {
        self.force_overwrite_replica_secret
    }
}
impl ReplicateSecretToRegionsInput {
    /// Creates a new builder-style object to manufacture [`ReplicateSecretToRegionsInput`](crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsInput).
    pub fn builder(
    ) -> crate::operation::replicate_secret_to_regions::builders::ReplicateSecretToRegionsInputBuilder
    {
        crate::operation::replicate_secret_to_regions::builders::ReplicateSecretToRegionsInputBuilder::default()
    }
}

/// A builder for [`ReplicateSecretToRegionsInput`](crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicateSecretToRegionsInputBuilder {
    pub(crate) secret_id: std::option::Option<std::string::String>,
    pub(crate) add_replica_regions:
        std::option::Option<std::vec::Vec<crate::types::ReplicaRegionType>>,
    pub(crate) force_overwrite_replica_secret: std::option::Option<bool>,
}
impl ReplicateSecretToRegionsInputBuilder {
    /// <p>The ARN or name of the secret to replicate.</p>
    pub fn secret_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_id = Some(input.into());
        self
    }
    /// <p>The ARN or name of the secret to replicate.</p>
    pub fn set_secret_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_id = input;
        self
    }
    /// Appends an item to `add_replica_regions`.
    ///
    /// To override the contents of this collection use [`set_add_replica_regions`](Self::set_add_replica_regions).
    ///
    /// <p>A list of Regions in which to replicate the secret.</p>
    pub fn add_replica_regions(mut self, input: crate::types::ReplicaRegionType) -> Self {
        let mut v = self.add_replica_regions.unwrap_or_default();
        v.push(input);
        self.add_replica_regions = Some(v);
        self
    }
    /// <p>A list of Regions in which to replicate the secret.</p>
    pub fn set_add_replica_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReplicaRegionType>>,
    ) -> Self {
        self.add_replica_regions = input;
        self
    }
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    pub fn force_overwrite_replica_secret(mut self, input: bool) -> Self {
        self.force_overwrite_replica_secret = Some(input);
        self
    }
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    pub fn set_force_overwrite_replica_secret(mut self, input: std::option::Option<bool>) -> Self {
        self.force_overwrite_replica_secret = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicateSecretToRegionsInput`](crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsInput {
                secret_id: self.secret_id,
                add_replica_regions: self.add_replica_regions,
                force_overwrite_replica_secret: self
                    .force_overwrite_replica_secret
                    .unwrap_or_default(),
            },
        )
    }
}
