// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::replicate_secret_to_regions::_replicate_secret_to_regions_output::ReplicateSecretToRegionsOutputBuilder;

pub use crate::operation::replicate_secret_to_regions::_replicate_secret_to_regions_input::ReplicateSecretToRegionsInputBuilder;

/// Fluent builder constructing a request to `ReplicateSecretToRegions`.
///
/// <p>Replicates the secret to a new Regions. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create-manage-multi-region-secrets.html">Multi-Region secrets</a>.</p>
/// <p>Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/retrieve-ct-entries.html">Logging Secrets Manager events with CloudTrail</a>.</p>
/// <p> <b>Required permissions: </b> <code>secretsmanager:ReplicateSecretToRegions</code>. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions"> IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication and access control in Secrets Manager</a>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ReplicateSecretToRegionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::replicate_secret_to_regions::builders::ReplicateSecretToRegionsInputBuilder
            }
impl ReplicateSecretToRegionsFluentBuilder {
    /// Creates a new `ReplicateSecretToRegions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::replicate_secret_to_regions::ReplicateSecretToRegions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::replicate_secret_to_regions::ReplicateSecretToRegionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN or name of the secret to replicate.</p>
    pub fn secret_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.secret_id(input.into());
        self
    }
    /// <p>The ARN or name of the secret to replicate.</p>
    pub fn set_secret_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_secret_id(input);
        self
    }
    /// Appends an item to `AddReplicaRegions`.
    ///
    /// To override the contents of this collection use [`set_add_replica_regions`](Self::set_add_replica_regions).
    ///
    /// <p>A list of Regions in which to replicate the secret.</p>
    pub fn add_replica_regions(mut self, input: crate::types::ReplicaRegionType) -> Self {
        self.inner = self.inner.add_replica_regions(input);
        self
    }
    /// <p>A list of Regions in which to replicate the secret.</p>
    pub fn set_add_replica_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReplicaRegionType>>,
    ) -> Self {
        self.inner = self.inner.set_add_replica_regions(input);
        self
    }
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    pub fn force_overwrite_replica_secret(mut self, input: bool) -> Self {
        self.inner = self.inner.force_overwrite_replica_secret(input);
        self
    }
    /// <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
    pub fn set_force_overwrite_replica_secret(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_overwrite_replica_secret(input);
        self
    }
}
