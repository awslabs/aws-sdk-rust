// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    DecryptionFailure(crate::error::DecryptionFailure),
    EncryptionFailure(crate::error::EncryptionFailure),
    InternalServiceError(crate::error::InternalServiceError),
    InvalidNextTokenError(crate::error::InvalidNextTokenError),
    InvalidParameterError(crate::error::InvalidParameterError),
    InvalidRequestError(crate::error::InvalidRequestError),
    LimitExceededError(crate::error::LimitExceededError),
    MalformedPolicyDocumentError(crate::error::MalformedPolicyDocumentError),
    PreconditionNotMetError(crate::error::PreconditionNotMetError),
    PublicPolicyError(crate::error::PublicPolicyError),
    ResourceExistsError(crate::error::ResourceExistsError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DecryptionFailure(inner) => inner.fmt(f),
            Error::EncryptionFailure(inner) => inner.fmt(f),
            Error::InternalServiceError(inner) => inner.fmt(f),
            Error::InvalidNextTokenError(inner) => inner.fmt(f),
            Error::InvalidParameterError(inner) => inner.fmt(f),
            Error::InvalidRequestError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentError(inner) => inner.fmt(f),
            Error::PreconditionNotMetError(inner) => inner.fmt(f),
            Error::PublicPolicyError(inner) => inner.fmt(f),
            Error::ResourceExistsError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelRotateSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelRotateSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelRotateSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::CancelRotateSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CancelRotateSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::CancelRotateSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CancelRotateSecretErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSecretErrorKind::EncryptionFailure(inner) => {
                    Error::EncryptionFailure(inner)
                }
                crate::error::CreateSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::CreateSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::CreateSecretErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateSecretErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::CreateSecretErrorKind::PreconditionNotMetError(inner) => {
                    Error::PreconditionNotMetError(inner)
                }
                crate::error::CreateSecretErrorKind::ResourceExistsError(inner) => {
                    Error::ResourceExistsError(inner)
                }
                crate::error::CreateSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteResourcePolicyErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::DeleteSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::DeleteSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::DescribeSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRandomPasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRandomPasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRandomPasswordErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::GetRandomPasswordErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetRandomPasswordErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::GetRandomPasswordErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetResourcePolicyErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::GetResourcePolicyErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::GetResourcePolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSecretValueError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSecretValueError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSecretValueErrorKind::DecryptionFailure(inner) => {
                    Error::DecryptionFailure(inner)
                }
                crate::error::GetSecretValueErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::GetSecretValueErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetSecretValueErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::GetSecretValueErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetSecretValueErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSecretsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSecretsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSecretsErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::ListSecretsErrorKind::InvalidNextTokenError(inner) => {
                    Error::InvalidNextTokenError(inner)
                }
                crate::error::ListSecretsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListSecretsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSecretVersionIdsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSecretVersionIdsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSecretVersionIdsErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::ListSecretVersionIdsErrorKind::InvalidNextTokenError(inner) => {
                    Error::InvalidNextTokenError(inner)
                }
                crate::error::ListSecretVersionIdsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListSecretVersionIdsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutResourcePolicyErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::PublicPolicyError(inner) => {
                    Error::PublicPolicyError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutSecretValueError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutSecretValueError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutSecretValueErrorKind::EncryptionFailure(inner) => {
                    Error::EncryptionFailure(inner)
                }
                crate::error::PutSecretValueErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::PutSecretValueErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutSecretValueErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::PutSecretValueErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutSecretValueErrorKind::ResourceExistsError(inner) => {
                    Error::ResourceExistsError(inner)
                }
                crate::error::PutSecretValueErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutSecretValueErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveRegionsFromReplicationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveRegionsFromReplicationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveRegionsFromReplicationErrorKind::InternalServiceError(
                    inner,
                ) => Error::InternalServiceError(inner),
                crate::error::RemoveRegionsFromReplicationErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::RemoveRegionsFromReplicationErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::RemoveRegionsFromReplicationErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::RemoveRegionsFromReplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplicateSecretToRegionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ReplicateSecretToRegionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplicateSecretToRegionsErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::ReplicateSecretToRegionsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ReplicateSecretToRegionsErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::ReplicateSecretToRegionsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ReplicateSecretToRegionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RestoreSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::RestoreSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::RestoreSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::RestoreSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::RestoreSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RotateSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RotateSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RotateSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::RotateSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::RotateSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::RotateSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::RotateSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopReplicationToReplicaError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StopReplicationToReplicaError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopReplicationToReplicaErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::StopReplicationToReplicaErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StopReplicationToReplicaErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::StopReplicationToReplicaErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::StopReplicationToReplicaErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::TagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::TagResourceErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateSecretError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateSecretError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSecretErrorKind::EncryptionFailure(inner) => {
                    Error::EncryptionFailure(inner)
                }
                crate::error::UpdateSecretErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::UpdateSecretErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateSecretErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::UpdateSecretErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateSecretErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::UpdateSecretErrorKind::PreconditionNotMetError(inner) => {
                    Error::PreconditionNotMetError(inner)
                }
                crate::error::UpdateSecretErrorKind::ResourceExistsError(inner) => {
                    Error::ResourceExistsError(inner)
                }
                crate::error::UpdateSecretErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateSecretErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateSecretVersionStageError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateSecretVersionStageError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSecretVersionStageErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::UpdateSecretVersionStageErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateSecretVersionStageErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::UpdateSecretVersionStageErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateSecretVersionStageErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateSecretVersionStageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ValidateResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ValidateResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ValidateResourcePolicyErrorKind::InternalServiceError(inner) => {
                    Error::InternalServiceError(inner)
                }
                crate::error::ValidateResourcePolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ValidateResourcePolicyErrorKind::InvalidRequestError(inner) => {
                    Error::InvalidRequestError(inner)
                }
                crate::error::ValidateResourcePolicyErrorKind::MalformedPolicyDocumentError(
                    inner,
                ) => Error::MalformedPolicyDocumentError(inner),
                crate::error::ValidateResourcePolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ValidateResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
