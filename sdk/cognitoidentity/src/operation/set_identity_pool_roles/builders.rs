// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::set_identity_pool_roles::_set_identity_pool_roles_output::SetIdentityPoolRolesOutputBuilder;

pub use crate::operation::set_identity_pool_roles::_set_identity_pool_roles_input::SetIdentityPoolRolesInputBuilder;

/// Fluent builder constructing a request to `SetIdentityPoolRoles`.
///
/// <p>Sets the roles for an identity pool. These roles are used when making calls to <code>GetCredentialsForIdentity</code> action.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SetIdentityPoolRolesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::set_identity_pool_roles::builders::SetIdentityPoolRolesInputBuilder,
}
impl SetIdentityPoolRolesFluentBuilder {
    /// Creates a new `SetIdentityPoolRoles`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::set_identity_pool_roles::SetIdentityPoolRoles,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::set_identity_pool_roles::SetIdentityPoolRolesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::set_identity_pool_roles::SetIdentityPoolRolesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::set_identity_pool_roles::SetIdentityPoolRolesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_pool_id(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_pool_id(input);
        self
    }
    /// Adds a key-value pair to `Roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p>The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.</p>
    pub fn roles(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.roles(k.into(), v.into());
        self
    }
    /// <p>The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.</p>
    pub fn set_roles(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_roles(input);
        self
    }
    /// Adds a key-value pair to `RoleMappings`.
    ///
    /// To override the contents of this collection use [`set_role_mappings`](Self::set_role_mappings).
    ///
    /// <p>How users for a specific identity provider are to mapped to roles. This is a string to <code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    /// <p>Up to 25 rules can be specified per identity provider.</p>
    pub fn role_mappings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::RoleMapping,
    ) -> Self {
        self.inner = self.inner.role_mappings(k.into(), v);
        self
    }
    /// <p>How users for a specific identity provider are to mapped to roles. This is a string to <code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    /// <p>Up to 25 rules can be specified per identity provider.</p>
    pub fn set_role_mappings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::RoleMapping>,
        >,
    ) -> Self {
        self.inner = self.inner.set_role_mappings(input);
        self
    }
}
