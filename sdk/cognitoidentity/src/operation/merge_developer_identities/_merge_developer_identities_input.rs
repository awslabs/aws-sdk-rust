// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to the <code>MergeDeveloperIdentities</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MergeDeveloperIdentitiesInput {
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    #[doc(hidden)]
    pub source_user_identifier: std::option::Option<std::string::String>,
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    #[doc(hidden)]
    pub destination_user_identifier: std::option::Option<std::string::String>,
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    #[doc(hidden)]
    pub developer_provider_name: std::option::Option<std::string::String>,
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
}
impl MergeDeveloperIdentitiesInput {
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn source_user_identifier(&self) -> std::option::Option<&str> {
        self.source_user_identifier.as_deref()
    }
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn destination_user_identifier(&self) -> std::option::Option<&str> {
        self.destination_user_identifier.as_deref()
    }
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    pub fn developer_provider_name(&self) -> std::option::Option<&str> {
        self.developer_provider_name.as_deref()
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
}
impl MergeDeveloperIdentitiesInput {
    /// Creates a new builder-style object to manufacture [`MergeDeveloperIdentitiesInput`](crate::operation::merge_developer_identities::MergeDeveloperIdentitiesInput).
    pub fn builder(
    ) -> crate::operation::merge_developer_identities::builders::MergeDeveloperIdentitiesInputBuilder
    {
        crate::operation::merge_developer_identities::builders::MergeDeveloperIdentitiesInputBuilder::default()
    }
}

/// A builder for [`MergeDeveloperIdentitiesInput`](crate::operation::merge_developer_identities::MergeDeveloperIdentitiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MergeDeveloperIdentitiesInputBuilder {
    pub(crate) source_user_identifier: std::option::Option<std::string::String>,
    pub(crate) destination_user_identifier: std::option::Option<std::string::String>,
    pub(crate) developer_provider_name: std::option::Option<std::string::String>,
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
}
impl MergeDeveloperIdentitiesInputBuilder {
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn source_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_user_identifier = Some(input.into());
        self
    }
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn set_source_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_user_identifier = input;
        self
    }
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn destination_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_user_identifier = Some(input.into());
        self
    }
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn set_destination_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_user_identifier = input;
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    pub fn developer_provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.developer_provider_name = Some(input.into());
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    pub fn set_developer_provider_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.developer_provider_name = input;
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MergeDeveloperIdentitiesInput`](crate::operation::merge_developer_identities::MergeDeveloperIdentitiesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::merge_developer_identities::MergeDeveloperIdentitiesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::merge_developer_identities::MergeDeveloperIdentitiesInput {
                source_user_identifier: self.source_user_identifier,
                destination_user_identifier: self.destination_user_identifier,
                developer_provider_name: self.developer_provider_name,
                identity_pool_id: self.identity_pool_id,
            },
        )
    }
}
