// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::merge_developer_identities::_merge_developer_identities_output::MergeDeveloperIdentitiesOutputBuilder;

pub use crate::operation::merge_developer_identities::_merge_developer_identities_input::MergeDeveloperIdentitiesInputBuilder;

/// Fluent builder constructing a request to `MergeDeveloperIdentities`.
///
/// <p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p>
/// <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct MergeDeveloperIdentitiesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::merge_developer_identities::builders::MergeDeveloperIdentitiesInputBuilder
            }
impl MergeDeveloperIdentitiesFluentBuilder {
    /// Creates a new `MergeDeveloperIdentities`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::merge_developer_identities::MergeDeveloperIdentities,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::merge_developer_identities::MergeDeveloperIdentitiesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::merge_developer_identities::MergeDeveloperIdentitiesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::merge_developer_identities::MergeDeveloperIdentitiesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn source_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_user_identifier(input.into());
        self
    }
    /// <p>User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn set_source_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_user_identifier(input);
        self
    }
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn destination_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_user_identifier(input.into());
        self
    }
    /// <p>User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>.</p>
    pub fn set_destination_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_user_identifier(input);
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    pub fn developer_provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.developer_provider_name(input.into());
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-).</p>
    pub fn set_developer_provider_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_developer_provider_name(input);
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_pool_id(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_pool_id(input);
        self
    }
}
