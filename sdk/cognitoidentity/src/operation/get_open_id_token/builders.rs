// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_open_id_token::_get_open_id_token_output::GetOpenIdTokenOutputBuilder;

pub use crate::operation::get_open_id_token::_get_open_id_token_input::GetOpenIdTokenInputBuilder;

/// Fluent builder constructing a request to `GetOpenIdToken`.
///
/// <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <code>GetId</code>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p>
/// <p>The OpenID token is valid for 10 minutes.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetOpenIdTokenFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_open_id_token::builders::GetOpenIdTokenInputBuilder,
}
impl GetOpenIdTokenFluentBuilder {
    /// Creates a new `GetOpenIdToken`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_open_id_token::GetOpenIdToken,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_open_id_token::GetOpenIdTokenError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_open_id_token::GetOpenIdTokenOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_open_id_token::GetOpenIdTokenError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_id(input.into());
        self
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_id(input);
        self
    }
    /// Adds a key-value pair to `Logins`.
    ///
    /// To override the contents of this collection use [`set_logins`](Self::set_logins).
    ///
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any other OpenID Connect provider, always include the <code>id_token</code>.</p>
    pub fn logins(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.logins(k.into(), v.into());
        self
    }
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any other OpenID Connect provider, always include the <code>id_token</code>.</p>
    pub fn set_logins(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_logins(input);
        self
    }
}
