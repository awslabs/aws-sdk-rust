// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPrincipalTagAttributeMapOutput {
    /// <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>You can use this operation to get the provider name.</p>
    #[doc(hidden)]
    pub identity_provider_name: std::option::Option<std::string::String>,
    /// <p>You can use this operation to list </p>
    #[doc(hidden)]
    pub use_defaults: std::option::Option<bool>,
    /// <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
    #[doc(hidden)]
    pub principal_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetPrincipalTagAttributeMapOutput {
    /// <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>You can use this operation to get the provider name.</p>
    pub fn identity_provider_name(&self) -> std::option::Option<&str> {
        self.identity_provider_name.as_deref()
    }
    /// <p>You can use this operation to list </p>
    pub fn use_defaults(&self) -> std::option::Option<bool> {
        self.use_defaults
    }
    /// <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
    pub fn principal_tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.principal_tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPrincipalTagAttributeMapOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPrincipalTagAttributeMapOutput {
    /// Creates a new builder-style object to manufacture [`GetPrincipalTagAttributeMapOutput`](crate::operation::get_principal_tag_attribute_map::GetPrincipalTagAttributeMapOutput).
    pub fn builder() -> crate::operation::get_principal_tag_attribute_map::builders::GetPrincipalTagAttributeMapOutputBuilder{
        crate::operation::get_principal_tag_attribute_map::builders::GetPrincipalTagAttributeMapOutputBuilder::default()
    }
}

/// A builder for [`GetPrincipalTagAttributeMapOutput`](crate::operation::get_principal_tag_attribute_map::GetPrincipalTagAttributeMapOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPrincipalTagAttributeMapOutputBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) identity_provider_name: std::option::Option<std::string::String>,
    pub(crate) use_defaults: std::option::Option<bool>,
    pub(crate) principal_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetPrincipalTagAttributeMapOutputBuilder {
    /// <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>You can use this operation to get the provider name.</p>
    pub fn identity_provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_provider_name = Some(input.into());
        self
    }
    /// <p>You can use this operation to get the provider name.</p>
    pub fn set_identity_provider_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.identity_provider_name = input;
        self
    }
    /// <p>You can use this operation to list </p>
    pub fn use_defaults(mut self, input: bool) -> Self {
        self.use_defaults = Some(input);
        self
    }
    /// <p>You can use this operation to list </p>
    pub fn set_use_defaults(mut self, input: std::option::Option<bool>) -> Self {
        self.use_defaults = input;
        self
    }
    /// Adds a key-value pair to `principal_tags`.
    ///
    /// To override the contents of this collection use [`set_principal_tags`](Self::set_principal_tags).
    ///
    /// <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
    pub fn principal_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.principal_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.principal_tags = Some(hash_map);
        self
    }
    /// <p>You can use this operation to add principal tags. The <code>PrincipalTags</code>operation enables you to reference user attributes in your IAM permissions policy.</p>
    pub fn set_principal_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.principal_tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPrincipalTagAttributeMapOutput`](crate::operation::get_principal_tag_attribute_map::GetPrincipalTagAttributeMapOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_principal_tag_attribute_map::GetPrincipalTagAttributeMapOutput {
        crate::operation::get_principal_tag_attribute_map::GetPrincipalTagAttributeMapOutput {
            identity_pool_id: self.identity_pool_id,
            identity_provider_name: self.identity_provider_name,
            use_defaults: self.use_defaults,
            principal_tags: self.principal_tags,
            _request_id: self._request_id,
        }
    }
}
