// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::unlink_developer_identity::_unlink_developer_identity_output::UnlinkDeveloperIdentityOutputBuilder;

pub use crate::operation::unlink_developer_identity::_unlink_developer_identity_input::UnlinkDeveloperIdentityInputBuilder;

/// Fluent builder constructing a request to `UnlinkDeveloperIdentity`.
///
/// <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UnlinkDeveloperIdentityFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::unlink_developer_identity::builders::UnlinkDeveloperIdentityInputBuilder,
}
impl UnlinkDeveloperIdentityFluentBuilder {
    /// Creates a new `UnlinkDeveloperIdentity`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::unlink_developer_identity::UnlinkDeveloperIdentity,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::unlink_developer_identity::UnlinkDeveloperIdentityError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::unlink_developer_identity::UnlinkDeveloperIdentityOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::unlink_developer_identity::UnlinkDeveloperIdentityError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_id(input.into());
        self
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_id(input);
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_pool_id(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_pool_id(input);
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users.</p>
    pub fn developer_provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.developer_provider_name(input.into());
        self
    }
    /// <p>The "domain" by which Cognito will refer to your users.</p>
    pub fn set_developer_provider_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_developer_provider_name(input);
        self
    }
    /// <p>A unique ID used by your backend authentication process to identify a user.</p>
    pub fn developer_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.developer_user_identifier(input.into());
        self
    }
    /// <p>A unique ID used by your backend authentication process to identify a user.</p>
    pub fn set_developer_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_developer_user_identifier(input);
        self
    }
}
