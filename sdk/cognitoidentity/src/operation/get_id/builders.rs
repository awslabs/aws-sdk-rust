// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_id::_get_id_output::GetIdOutputBuilder;

pub use crate::operation::get_id::_get_id_input::GetIdInputBuilder;

/// Fluent builder constructing a request to `GetId`.
///
/// <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetIdFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_id::builders::GetIdInputBuilder,
}
impl GetIdFluentBuilder {
    /// Creates a new `GetId`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_id::GetId,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_id::GetIdError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_id::GetIdOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_id::GetIdError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A standard AWS account ID (9+ digits).</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>A standard AWS account ID (9+ digits).</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity_pool_id(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity_pool_id(input);
        self
    }
    /// Adds a key-value pair to `Logins`.
    ///
    /// To override the contents of this collection use [`set_logins`](Self::set_logins).
    ///
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    pub fn logins(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.logins(k.into(), v.into());
        self
    }
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    pub fn set_logins(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_logins(input);
        self
    }
}
