// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to the GetId action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIdInput {
    /// <p>A standard AWS account ID (9+ digits).</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub logins:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetIdInput {
    /// <p>A standard AWS account ID (9+ digits).</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    pub fn logins(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.logins.as_ref()
    }
}
impl GetIdInput {
    /// Creates a new builder-style object to manufacture [`GetIdInput`](crate::operation::get_id::GetIdInput).
    pub fn builder() -> crate::operation::get_id::builders::GetIdInputBuilder {
        crate::operation::get_id::builders::GetIdInputBuilder::default()
    }
}

/// A builder for [`GetIdInput`](crate::operation::get_id::GetIdInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetIdInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) logins:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetIdInputBuilder {
    /// <p>A standard AWS account ID (9+ digits).</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>A standard AWS account ID (9+ digits).</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// Adds a key-value pair to `logins`.
    ///
    /// To override the contents of this collection use [`set_logins`](Self::set_logins).
    ///
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    pub fn logins(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.logins.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.logins = Some(hash_map);
        self
    }
    /// <p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p>
    /// <ul>
    /// <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li>
    /// <li> <p>Amazon Cognito user pool: <code>cognito-idp.
    /// <region>
    /// .amazonaws.com/
    /// <your_user_pool_id></your_user_pool_id>
    /// </region></code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li>
    /// <li> <p>Google: <code>accounts.google.com</code> </p> </li>
    /// <li> <p>Amazon: <code>www.amazon.com</code> </p> </li>
    /// <li> <p>Twitter: <code>api.twitter.com</code> </p> </li>
    /// <li> <p>Digits: <code>www.digits.com</code> </p> </li>
    /// </ul>
    pub fn set_logins(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.logins = input;
        self
    }
    /// Consumes the builder and constructs a [`GetIdInput`](crate::operation::get_id::GetIdInput).
    pub fn build(
        self,
    ) -> Result<crate::operation::get_id::GetIdInput, aws_smithy_http::operation::error::BuildError>
    {
        Ok(crate::operation::get_id::GetIdInput {
            account_id: self.account_id,
            identity_pool_id: self.identity_pool_id,
            logins: self.logins,
        })
    }
}
