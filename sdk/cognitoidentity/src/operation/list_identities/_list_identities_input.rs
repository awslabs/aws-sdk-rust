// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to the ListIdentities action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListIdentitiesInput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of identities to return.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>A pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.</p>
    #[doc(hidden)]
    pub hide_disabled: bool,
}
impl ListIdentitiesInput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>A pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.</p>
    pub fn hide_disabled(&self) -> bool {
        self.hide_disabled
    }
}
impl ListIdentitiesInput {
    /// Creates a new builder-style object to manufacture [`ListIdentitiesInput`](crate::operation::list_identities::ListIdentitiesInput).
    pub fn builder() -> crate::operation::list_identities::builders::ListIdentitiesInputBuilder {
        crate::operation::list_identities::builders::ListIdentitiesInputBuilder::default()
    }
}

/// A builder for [`ListIdentitiesInput`](crate::operation::list_identities::ListIdentitiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListIdentitiesInputBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) hide_disabled: std::option::Option<bool>,
}
impl ListIdentitiesInputBuilder {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.</p>
    pub fn hide_disabled(mut self, input: bool) -> Self {
        self.hide_disabled = Some(input);
        self
    }
    /// <p>An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.</p>
    pub fn set_hide_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.hide_disabled = input;
        self
    }
    /// Consumes the builder and constructs a [`ListIdentitiesInput`](crate::operation::list_identities::ListIdentitiesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_identities::ListIdentitiesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_identities::ListIdentitiesInput {
            identity_pool_id: self.identity_pool_id,
            max_results: self.max_results.unwrap_or_default(),
            next_token: self.next_token,
            hide_disabled: self.hide_disabled.unwrap_or_default(),
        })
    }
}
