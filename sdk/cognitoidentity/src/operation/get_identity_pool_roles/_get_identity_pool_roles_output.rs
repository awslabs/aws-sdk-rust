// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIdentityPoolRolesOutput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.</p>
    #[doc(hidden)]
    pub roles:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>How users for a specific identity provider are to mapped to roles. This is a String-to-<code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    #[doc(hidden)]
    pub role_mappings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::RoleMapping>,
    >,
    _request_id: Option<String>,
}
impl GetIdentityPoolRolesOutput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.</p>
    pub fn roles(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.roles.as_ref()
    }
    /// <p>How users for a specific identity provider are to mapped to roles. This is a String-to-<code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    pub fn role_mappings(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::RoleMapping>,
    > {
        self.role_mappings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetIdentityPoolRolesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIdentityPoolRolesOutput {
    /// Creates a new builder-style object to manufacture [`GetIdentityPoolRolesOutput`](crate::operation::get_identity_pool_roles::GetIdentityPoolRolesOutput).
    pub fn builder(
    ) -> crate::operation::get_identity_pool_roles::builders::GetIdentityPoolRolesOutputBuilder
    {
        crate::operation::get_identity_pool_roles::builders::GetIdentityPoolRolesOutputBuilder::default()
    }
}

/// A builder for [`GetIdentityPoolRolesOutput`](crate::operation::get_identity_pool_roles::GetIdentityPoolRolesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetIdentityPoolRolesOutputBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) roles:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) role_mappings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::RoleMapping>,
    >,
    _request_id: Option<String>,
}
impl GetIdentityPoolRolesOutputBuilder {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// Adds a key-value pair to `roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p>The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.</p>
    pub fn roles(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.roles.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.roles = Some(hash_map);
        self
    }
    /// <p>The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.</p>
    pub fn set_roles(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.roles = input;
        self
    }
    /// Adds a key-value pair to `role_mappings`.
    ///
    /// To override the contents of this collection use [`set_role_mappings`](Self::set_role_mappings).
    ///
    /// <p>How users for a specific identity provider are to mapped to roles. This is a String-to-<code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    pub fn role_mappings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::RoleMapping,
    ) -> Self {
        let mut hash_map = self.role_mappings.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.role_mappings = Some(hash_map);
        self
    }
    /// <p>How users for a specific identity provider are to mapped to roles. This is a String-to-<code>RoleMapping</code> object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
    pub fn set_role_mappings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::RoleMapping>,
        >,
    ) -> Self {
        self.role_mappings = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIdentityPoolRolesOutput`](crate::operation::get_identity_pool_roles::GetIdentityPoolRolesOutput).
    pub fn build(self) -> crate::operation::get_identity_pool_roles::GetIdentityPoolRolesOutput {
        crate::operation::get_identity_pool_roles::GetIdentityPoolRolesOutput {
            identity_pool_id: self.identity_pool_id,
            roles: self.roles,
            role_mappings: self.role_mappings,
            _request_id: self._request_id,
        }
    }
}
