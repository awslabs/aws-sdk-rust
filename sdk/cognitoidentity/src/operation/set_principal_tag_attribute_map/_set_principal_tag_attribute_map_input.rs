// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetPrincipalTagAttributeMapInput {
    /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
    pub identity_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The provider name you want to use for attribute mappings.</p>
    pub identity_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
    pub use_defaults: ::std::option::Option<bool>,
    /// <p>You can use this operation to add principal tags.</p>
    pub principal_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SetPrincipalTagAttributeMapInput {
    /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
    pub fn identity_pool_id(&self) -> ::std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>The provider name you want to use for attribute mappings.</p>
    pub fn identity_provider_name(&self) -> ::std::option::Option<&str> {
        self.identity_provider_name.as_deref()
    }
    /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
    pub fn use_defaults(&self) -> ::std::option::Option<bool> {
        self.use_defaults
    }
    /// <p>You can use this operation to add principal tags.</p>
    pub fn principal_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.principal_tags.as_ref()
    }
}
impl SetPrincipalTagAttributeMapInput {
    /// Creates a new builder-style object to manufacture [`SetPrincipalTagAttributeMapInput`](crate::operation::set_principal_tag_attribute_map::SetPrincipalTagAttributeMapInput).
    pub fn builder() -> crate::operation::set_principal_tag_attribute_map::builders::SetPrincipalTagAttributeMapInputBuilder {
        crate::operation::set_principal_tag_attribute_map::builders::SetPrincipalTagAttributeMapInputBuilder::default()
    }
}

/// A builder for [`SetPrincipalTagAttributeMapInput`](crate::operation::set_principal_tag_attribute_map::SetPrincipalTagAttributeMapInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetPrincipalTagAttributeMapInputBuilder {
    pub(crate) identity_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) use_defaults: ::std::option::Option<bool>,
    pub(crate) principal_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SetPrincipalTagAttributeMapInputBuilder {
    /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
    /// This field is required.
    pub fn identity_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
    pub fn set_identity_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
    pub fn get_identity_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_pool_id
    }
    /// <p>The provider name you want to use for attribute mappings.</p>
    /// This field is required.
    pub fn identity_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider name you want to use for attribute mappings.</p>
    pub fn set_identity_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_provider_name = input;
        self
    }
    /// <p>The provider name you want to use for attribute mappings.</p>
    pub fn get_identity_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_provider_name
    }
    /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
    pub fn use_defaults(mut self, input: bool) -> Self {
        self.use_defaults = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
    pub fn set_use_defaults(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_defaults = input;
        self
    }
    /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
    pub fn get_use_defaults(&self) -> &::std::option::Option<bool> {
        &self.use_defaults
    }
    /// Adds a key-value pair to `principal_tags`.
    ///
    /// To override the contents of this collection use [`set_principal_tags`](Self::set_principal_tags).
    ///
    /// <p>You can use this operation to add principal tags.</p>
    pub fn principal_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.principal_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.principal_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>You can use this operation to add principal tags.</p>
    pub fn set_principal_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.principal_tags = input;
        self
    }
    /// <p>You can use this operation to add principal tags.</p>
    pub fn get_principal_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.principal_tags
    }
    /// Consumes the builder and constructs a [`SetPrincipalTagAttributeMapInput`](crate::operation::set_principal_tag_attribute_map::SetPrincipalTagAttributeMapInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_principal_tag_attribute_map::SetPrincipalTagAttributeMapInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::set_principal_tag_attribute_map::SetPrincipalTagAttributeMapInput {
            identity_pool_id: self.identity_pool_id,
            identity_provider_name: self.identity_provider_name,
            use_defaults: self.use_defaults,
            principal_tags: self.principal_tags,
        })
    }
}
