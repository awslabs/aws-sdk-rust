// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to the <code>LookupDeveloperIdentityInput</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LookupDeveloperIdentityInput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_id: std::option::Option<std::string::String>,
    /// <p>A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.</p>
    #[doc(hidden)]
    pub developer_user_identifier: std::option::Option<std::string::String>,
    /// <p>The maximum number of identities to return.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl LookupDeveloperIdentityInput {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(&self) -> std::option::Option<&str> {
        self.identity_id.as_deref()
    }
    /// <p>A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.</p>
    pub fn developer_user_identifier(&self) -> std::option::Option<&str> {
        self.developer_user_identifier.as_deref()
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl LookupDeveloperIdentityInput {
    /// Creates a new builder-style object to manufacture [`LookupDeveloperIdentityInput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityInput).
    pub fn builder(
    ) -> crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityInputBuilder
    {
        crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityInputBuilder::default()
    }
}

/// A builder for [`LookupDeveloperIdentityInput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LookupDeveloperIdentityInputBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) identity_id: std::option::Option<std::string::String>,
    pub(crate) developer_user_identifier: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl LookupDeveloperIdentityInputBuilder {
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>An identity pool ID in the format REGION:GUID.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_id = Some(input.into());
        self
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_id = input;
        self
    }
    /// <p>A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.</p>
    pub fn developer_user_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.developer_user_identifier = Some(input.into());
        self
    }
    /// <p>A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.</p>
    pub fn set_developer_user_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.developer_user_identifier = input;
        self
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of identities to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`LookupDeveloperIdentityInput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::lookup_developer_identity::LookupDeveloperIdentityInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::lookup_developer_identity::LookupDeveloperIdentityInput {
                identity_pool_id: self.identity_pool_id,
                identity_id: self.identity_id,
                developer_user_identifier: self.developer_user_identifier,
                max_results: self.max_results.unwrap_or_default(),
                next_token: self.next_token,
            },
        )
    }
}
