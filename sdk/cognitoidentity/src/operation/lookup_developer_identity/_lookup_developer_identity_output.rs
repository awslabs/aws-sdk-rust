// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returned in response to a successful <code>LookupDeveloperIdentity</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LookupDeveloperIdentityOutput {
    /// <p>A unique identifier in the format REGION:GUID.</p>
    #[doc(hidden)]
    pub identity_id: std::option::Option<std::string::String>,
    /// <p>This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.</p>
    #[doc(hidden)]
    pub developer_user_identifier_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl LookupDeveloperIdentityOutput {
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(&self) -> std::option::Option<&str> {
        self.identity_id.as_deref()
    }
    /// <p>This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.</p>
    pub fn developer_user_identifier_list(&self) -> std::option::Option<&[std::string::String]> {
        self.developer_user_identifier_list.as_deref()
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for LookupDeveloperIdentityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl LookupDeveloperIdentityOutput {
    /// Creates a new builder-style object to manufacture [`LookupDeveloperIdentityOutput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput).
    pub fn builder(
    ) -> crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityOutputBuilder
    {
        crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityOutputBuilder::default()
    }
}

/// A builder for [`LookupDeveloperIdentityOutput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LookupDeveloperIdentityOutputBuilder {
    pub(crate) identity_id: std::option::Option<std::string::String>,
    pub(crate) developer_user_identifier_list:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl LookupDeveloperIdentityOutputBuilder {
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_id = Some(input.into());
        self
    }
    /// <p>A unique identifier in the format REGION:GUID.</p>
    pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_id = input;
        self
    }
    /// Appends an item to `developer_user_identifier_list`.
    ///
    /// To override the contents of this collection use [`set_developer_user_identifier_list`](Self::set_developer_user_identifier_list).
    ///
    /// <p>This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.</p>
    pub fn developer_user_identifier_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.developer_user_identifier_list.unwrap_or_default();
        v.push(input.into());
        self.developer_user_identifier_list = Some(v);
        self
    }
    /// <p>This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.</p>
    pub fn set_developer_user_identifier_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.developer_user_identifier_list = input;
        self
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`LookupDeveloperIdentityOutput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput).
    pub fn build(
        self,
    ) -> crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput {
        crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput {
            identity_id: self.identity_id,
            developer_user_identifier_list: self.developer_user_identifier_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
