// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a new identity pool. The identity pool is a store of user identity
/// information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>
/// <ul>
/// <li>
/// <p>Facebook: <code>graph.facebook.com</code>
/// </p>
/// </li>
/// <li>
/// <p>Google: <code>accounts.google.com</code>
/// </p>
/// </li>
/// <li>
/// <p>Amazon: <code>www.amazon.com</code>
/// </p>
/// </li>
/// <li>
/// <p>Twitter: <code>api.twitter.com</code>
/// </p>
/// </li>
/// <li>
/// <p>Digits: <code>www.digits.com</code>
/// </p>
/// </li>
/// </ul>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateIdentityPool {
    _private: (),
}
impl CreateIdentityPool {
    /// Creates a new builder-style object to manufacture [`CreateIdentityPoolInput`](crate::input::CreateIdentityPoolInput)
    pub fn builder() -> crate::input::create_identity_pool_input::Builder {
        crate::input::create_identity_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateIdentityPool {
    type Output = std::result::Result<
        crate::output::CreateIdentityPoolOutput,
        crate::error::CreateIdentityPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_identity_pool_error(response)
        } else {
            crate::operation_deser::parse_create_identity_pool_response(response)
        }
    }
}

/// <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities
/// that you want to delete.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteIdentities {
    _private: (),
}
impl DeleteIdentities {
    /// Creates a new builder-style object to manufacture [`DeleteIdentitiesInput`](crate::input::DeleteIdentitiesInput)
    pub fn builder() -> crate::input::delete_identities_input::Builder {
        crate::input::delete_identities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteIdentities {
    type Output = std::result::Result<
        crate::output::DeleteIdentitiesOutput,
        crate::error::DeleteIdentitiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_identities_error(response)
        } else {
            crate::operation_deser::parse_delete_identities_response(response)
        }
    }
}

/// <p>Deletes an identity pool. Once a pool is deleted, users will not be able to
/// authenticate with the pool.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteIdentityPool {
    _private: (),
}
impl DeleteIdentityPool {
    /// Creates a new builder-style object to manufacture [`DeleteIdentityPoolInput`](crate::input::DeleteIdentityPoolInput)
    pub fn builder() -> crate::input::delete_identity_pool_input::Builder {
        crate::input::delete_identity_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteIdentityPool {
    type Output = std::result::Result<
        crate::output::DeleteIdentityPoolOutput,
        crate::error::DeleteIdentityPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_identity_pool_error(response)
        } else {
            crate::operation_deser::parse_delete_identity_pool_response(response)
        }
    }
}

/// <p>Returns metadata related to the given identity, including when the identity was
/// created and any associated linked logins.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdentity {
    _private: (),
}
impl DescribeIdentity {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityInput`](crate::input::DescribeIdentityInput)
    pub fn builder() -> crate::input::describe_identity_input::Builder {
        crate::input::describe_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdentity {
    type Output = std::result::Result<
        crate::output::DescribeIdentityOutput,
        crate::error::DescribeIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_identity_error(response)
        } else {
            crate::operation_deser::parse_describe_identity_response(response)
        }
    }
}

/// <p>Gets details about a particular identity pool, including the pool name, ID
/// description, creation date, and current number of users.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdentityPool {
    _private: (),
}
impl DescribeIdentityPool {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityPoolInput`](crate::input::DescribeIdentityPoolInput)
    pub fn builder() -> crate::input::describe_identity_pool_input::Builder {
        crate::input::describe_identity_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdentityPool {
    type Output = std::result::Result<
        crate::output::DescribeIdentityPoolOutput,
        crate::error::DescribeIdentityPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_identity_pool_error(response)
        } else {
            crate::operation_deser::parse_describe_identity_pool_response(response)
        }
    }
}

/// <p>Returns credentials for the provided identity ID. Any provided logins will be
/// validated against supported login providers. If the token is for
/// cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
/// with the appropriate role for the token.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCredentialsForIdentity {
    _private: (),
}
impl GetCredentialsForIdentity {
    /// Creates a new builder-style object to manufacture [`GetCredentialsForIdentityInput`](crate::input::GetCredentialsForIdentityInput)
    pub fn builder() -> crate::input::get_credentials_for_identity_input::Builder {
        crate::input::get_credentials_for_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCredentialsForIdentity {
    type Output = std::result::Result<
        crate::output::GetCredentialsForIdentityOutput,
        crate::error::GetCredentialsForIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_credentials_for_identity_error(response)
        } else {
            crate::operation_deser::parse_get_credentials_for_identity_response(response)
        }
    }
}

/// <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
/// implicit linked account.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetId {
    _private: (),
}
impl GetId {
    /// Creates a new builder-style object to manufacture [`GetIdInput`](crate::input::GetIdInput)
    pub fn builder() -> crate::input::get_id_input::Builder {
        crate::input::get_id_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetId {
    type Output = std::result::Result<crate::output::GetIdOutput, crate::error::GetIdError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_id_error(response)
        } else {
            crate::operation_deser::parse_get_id_response(response)
        }
    }
}

/// <p>Gets the roles for an identity pool.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentityPoolRoles {
    _private: (),
}
impl GetIdentityPoolRoles {
    /// Creates a new builder-style object to manufacture [`GetIdentityPoolRolesInput`](crate::input::GetIdentityPoolRolesInput)
    pub fn builder() -> crate::input::get_identity_pool_roles_input::Builder {
        crate::input::get_identity_pool_roles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetIdentityPoolRoles {
    type Output = std::result::Result<
        crate::output::GetIdentityPoolRolesOutput,
        crate::error::GetIdentityPoolRolesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_identity_pool_roles_error(response)
        } else {
            crate::operation_deser::parse_get_identity_pool_roles_response(response)
        }
    }
}

/// <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by
/// <a>GetId</a>. You can optionally add additional logins for the identity.
/// Supplying multiple logins creates an implicit link.</p>
/// <p>The OpenID token is valid for 10 minutes.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOpenIdToken {
    _private: (),
}
impl GetOpenIdToken {
    /// Creates a new builder-style object to manufacture [`GetOpenIdTokenInput`](crate::input::GetOpenIdTokenInput)
    pub fn builder() -> crate::input::get_open_id_token_input::Builder {
        crate::input::get_open_id_token_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOpenIdToken {
    type Output =
        std::result::Result<crate::output::GetOpenIdTokenOutput, crate::error::GetOpenIdTokenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_open_id_token_error(response)
        } else {
            crate::operation_deser::parse_get_open_id_token_response(response)
        }
    }
}

/// <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect
/// token for a user authenticated by your backend authentication process. Supplying multiple
/// logins will create an implicit linked account. You can only specify one developer provider
/// as part of the <code>Logins</code> map, which is linked to the identity pool. The developer
/// provider is the "domain" by which Cognito will refer to your users.</p>
/// <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
/// and to link new logins (that is, user credentials issued by a public provider or developer
/// provider) to an existing identity. When you want to create a new identity, the
/// <code>IdentityId</code> should be null. When you want to associate a new login with an
/// existing authenticated/unauthenticated identity, you can do so by providing the existing
/// <code>IdentityId</code>. This API will create the identity in the specified
/// <code>IdentityPoolId</code>.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOpenIdTokenForDeveloperIdentity {
    _private: (),
}
impl GetOpenIdTokenForDeveloperIdentity {
    /// Creates a new builder-style object to manufacture [`GetOpenIdTokenForDeveloperIdentityInput`](crate::input::GetOpenIdTokenForDeveloperIdentityInput)
    pub fn builder() -> crate::input::get_open_id_token_for_developer_identity_input::Builder {
        crate::input::get_open_id_token_for_developer_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOpenIdTokenForDeveloperIdentity {
    type Output = std::result::Result<
        crate::output::GetOpenIdTokenForDeveloperIdentityOutput,
        crate::error::GetOpenIdTokenForDeveloperIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_open_id_token_for_developer_identity_error(response)
        } else {
            crate::operation_deser::parse_get_open_id_token_for_developer_identity_response(
                response,
            )
        }
    }
}

/// <p>Use <code>GetPrincipalTagAttributeMap</code> to list all mappings between <code>PrincipalTags</code> and user attributes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPrincipalTagAttributeMap {
    _private: (),
}
impl GetPrincipalTagAttributeMap {
    /// Creates a new builder-style object to manufacture [`GetPrincipalTagAttributeMapInput`](crate::input::GetPrincipalTagAttributeMapInput)
    pub fn builder() -> crate::input::get_principal_tag_attribute_map_input::Builder {
        crate::input::get_principal_tag_attribute_map_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPrincipalTagAttributeMap {
    type Output = std::result::Result<
        crate::output::GetPrincipalTagAttributeMapOutput,
        crate::error::GetPrincipalTagAttributeMapError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_principal_tag_attribute_map_error(response)
        } else {
            crate::operation_deser::parse_get_principal_tag_attribute_map_response(response)
        }
    }
}

/// <p>Lists the identities in an identity pool.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListIdentities {
    _private: (),
}
impl ListIdentities {
    /// Creates a new builder-style object to manufacture [`ListIdentitiesInput`](crate::input::ListIdentitiesInput)
    pub fn builder() -> crate::input::list_identities_input::Builder {
        crate::input::list_identities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListIdentities {
    type Output =
        std::result::Result<crate::output::ListIdentitiesOutput, crate::error::ListIdentitiesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_identities_error(response)
        } else {
            crate::operation_deser::parse_list_identities_response(response)
        }
    }
}

/// <p>Lists all of the Cognito identity pools registered for your account.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListIdentityPools {
    _private: (),
}
impl ListIdentityPools {
    /// Creates a new builder-style object to manufacture [`ListIdentityPoolsInput`](crate::input::ListIdentityPoolsInput)
    pub fn builder() -> crate::input::list_identity_pools_input::Builder {
        crate::input::list_identity_pools_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListIdentityPools {
    type Output = std::result::Result<
        crate::output::ListIdentityPoolsOutput,
        crate::error::ListIdentityPoolsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_identity_pools_error(response)
        } else {
            crate::operation_deser::parse_list_identity_pools_response(response)
        }
    }
}

/// <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>
/// <p>A tag is a label that you can apply to identity pools to categorize and manage them in
/// different ways, such as by purpose, owner, environment, or other criteria.</p>
/// <p>You can use this action up to 10 times per second, per account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Retrieves the <code>IdentityID</code> associated with a
/// <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>
/// values associated with an <code>IdentityId</code> for an existing identity. Either
/// <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you
/// supply only one of these values, the other value will be searched in the database and
/// returned as a part of the response. If you supply both,
/// <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If
/// the values are verified against the database, the response returns both values and is the
/// same as the request. Otherwise a <code>ResourceConflictException</code> is
/// thrown.</p>
/// <p>
/// <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane
/// operations: for example, to enable customer service to locate an identity ID by username.
/// If you are using it for higher-volume operations such as user authentication, your requests
/// are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
/// better option for higher-volume operations for user authentication.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LookupDeveloperIdentity {
    _private: (),
}
impl LookupDeveloperIdentity {
    /// Creates a new builder-style object to manufacture [`LookupDeveloperIdentityInput`](crate::input::LookupDeveloperIdentityInput)
    pub fn builder() -> crate::input::lookup_developer_identity_input::Builder {
        crate::input::lookup_developer_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for LookupDeveloperIdentity {
    type Output = std::result::Result<
        crate::output::LookupDeveloperIdentityOutput,
        crate::error::LookupDeveloperIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_lookup_developer_identity_error(response)
        } else {
            crate::operation_deser::parse_lookup_developer_identity_response(response)
        }
    }
}

/// <p>Merges two users having different <code>IdentityId</code>s, existing in the same
/// identity pool, and identified by the same developer provider. You can use this action to
/// request that discrete users be merged and identified as a single user in the Cognito
/// environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)
/// with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only
/// developer-authenticated users can be merged. If the users to be merged are associated with
/// the same public provider, but as two different users, an exception will be
/// thrown.</p>
/// <p>The number of linked logins is limited to 20. So, the number of linked logins for the
/// source user, <code>SourceUserIdentifier</code>, and the destination user,
/// <code>DestinationUserIdentifier</code>, together should not be larger than 20.
/// Otherwise, an exception will be thrown.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MergeDeveloperIdentities {
    _private: (),
}
impl MergeDeveloperIdentities {
    /// Creates a new builder-style object to manufacture [`MergeDeveloperIdentitiesInput`](crate::input::MergeDeveloperIdentitiesInput)
    pub fn builder() -> crate::input::merge_developer_identities_input::Builder {
        crate::input::merge_developer_identities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for MergeDeveloperIdentities {
    type Output = std::result::Result<
        crate::output::MergeDeveloperIdentitiesOutput,
        crate::error::MergeDeveloperIdentitiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_merge_developer_identities_error(response)
        } else {
            crate::operation_deser::parse_merge_developer_identities_response(response)
        }
    }
}

/// <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetIdentityPoolRoles {
    _private: (),
}
impl SetIdentityPoolRoles {
    /// Creates a new builder-style object to manufacture [`SetIdentityPoolRolesInput`](crate::input::SetIdentityPoolRolesInput)
    pub fn builder() -> crate::input::set_identity_pool_roles_input::Builder {
        crate::input::set_identity_pool_roles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetIdentityPoolRoles {
    type Output = std::result::Result<
        crate::output::SetIdentityPoolRolesOutput,
        crate::error::SetIdentityPoolRolesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_identity_pool_roles_error(response)
        } else {
            crate::operation_deser::parse_set_identity_pool_roles_response(response)
        }
    }
}

/// <p>You can use this operation to use default (username and clientID) attribute or custom attribute mappings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetPrincipalTagAttributeMap {
    _private: (),
}
impl SetPrincipalTagAttributeMap {
    /// Creates a new builder-style object to manufacture [`SetPrincipalTagAttributeMapInput`](crate::input::SetPrincipalTagAttributeMapInput)
    pub fn builder() -> crate::input::set_principal_tag_attribute_map_input::Builder {
        crate::input::set_principal_tag_attribute_map_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetPrincipalTagAttributeMap {
    type Output = std::result::Result<
        crate::output::SetPrincipalTagAttributeMapOutput,
        crate::error::SetPrincipalTagAttributeMapError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_principal_tag_attribute_map_error(response)
        } else {
            crate::operation_deser::parse_set_principal_tag_attribute_map_response(response)
        }
    }
}

/// <p>Assigns a set of tags to the specified Amazon Cognito identity pool. A tag is a label
/// that you can use to categorize and manage identity pools in different ways, such as by
/// purpose, owner, environment, or other criteria.</p>
/// <p>Each tag consists of a key and value, both of which you define. A key is a general
/// category for more specific values. For example, if you have two versions of an identity
/// pool, one for testing and another for production, you might assign an
/// <code>Environment</code> tag key to both identity pools. The value of this key might be
/// <code>Test</code> for one identity pool and <code>Production</code> for the
/// other.</p>
/// <p>Tags are useful for cost tracking and access control. You can activate your tags so that
/// they appear on the Billing and Cost Management console, where you can track the costs
/// associated with your identity pools. In an IAM policy, you can constrain permissions for
/// identity pools based on specific tags or tag values.</p>
/// <p>You can use this action up to 5 times per second, per account. An identity pool can have
/// as many as 50 tags.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked
/// developer users will be considered new identities next time they are seen. If, for a given
/// Cognito identity, you remove all federated identities as well as the developer user
/// identifier, the Cognito identity becomes inaccessible.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnlinkDeveloperIdentity {
    _private: (),
}
impl UnlinkDeveloperIdentity {
    /// Creates a new builder-style object to manufacture [`UnlinkDeveloperIdentityInput`](crate::input::UnlinkDeveloperIdentityInput)
    pub fn builder() -> crate::input::unlink_developer_identity_input::Builder {
        crate::input::unlink_developer_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnlinkDeveloperIdentity {
    type Output = std::result::Result<
        crate::output::UnlinkDeveloperIdentityOutput,
        crate::error::UnlinkDeveloperIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unlink_developer_identity_error(response)
        } else {
            crate::operation_deser::parse_unlink_developer_identity_response(response)
        }
    }
}

/// <p>Unlinks a federated identity from an existing account. Unlinked logins will be
/// considered new identities next time they are seen. Removing the last linked login will make
/// this identity inaccessible.</p>
/// <p>This is a public API. You do not need any credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnlinkIdentity {
    _private: (),
}
impl UnlinkIdentity {
    /// Creates a new builder-style object to manufacture [`UnlinkIdentityInput`](crate::input::UnlinkIdentityInput)
    pub fn builder() -> crate::input::unlink_identity_input::Builder {
        crate::input::unlink_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnlinkIdentity {
    type Output =
        std::result::Result<crate::output::UnlinkIdentityOutput, crate::error::UnlinkIdentityError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unlink_identity_error(response)
        } else {
            crate::operation_deser::parse_unlink_identity_response(response)
        }
    }
}

/// <p>Removes the specified tags from the specified Amazon Cognito identity pool. You can use
/// this action up to 5 times per second, per account</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an identity pool.</p>
/// <p>You must use AWS Developer credentials to call this API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIdentityPool {
    _private: (),
}
impl UpdateIdentityPool {
    /// Creates a new builder-style object to manufacture [`UpdateIdentityPoolInput`](crate::input::UpdateIdentityPoolInput)
    pub fn builder() -> crate::input::update_identity_pool_input::Builder {
        crate::input::update_identity_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateIdentityPool {
    type Output = std::result::Result<
        crate::output::UpdateIdentityPoolOutput,
        crate::error::UpdateIdentityPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_identity_pool_error(response)
        } else {
            crate::operation_deser::parse_update_identity_pool_response(response)
        }
    }
}
