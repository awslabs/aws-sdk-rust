// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_identity_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_identity_pool::CreateIdentityPoolInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.identity_pool_name {
        object.key("IdentityPoolName").string(var_1.as_str());
    }
    {
        object
            .key("AllowUnauthenticatedIdentities")
            .boolean(input.allow_unauthenticated_identities);
    }
    if let Some(var_2) = &input.allow_classic_flow {
        object.key("AllowClassicFlow").boolean(*var_2);
    }
    if let Some(var_3) = &input.supported_login_providers {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SupportedLoginProviders").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.developer_provider_name {
        object.key("DeveloperProviderName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.open_id_connect_provider_ar_ns {
        let mut array_9 = object.key("OpenIdConnectProviderARNs").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.cognito_identity_providers {
        let mut array_12 = object.key("CognitoIdentityProviders").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_cognito_identity_provider::ser_cognito_identity_provider(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.saml_provider_ar_ns {
        let mut array_16 = object.key("SamlProviderARNs").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.identity_pool_tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("IdentityPoolTags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    Ok(())
}
