// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSCognitoIdentityService`.
///
/// This client allows ergonomic access to a `AWSCognitoIdentityService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn create_identity_pool(&self) -> fluent_builders::CreateIdentityPool<C, M, R> {
        fluent_builders::CreateIdentityPool::new(self.handle.clone())
    }
    pub fn delete_identities(&self) -> fluent_builders::DeleteIdentities<C, M, R> {
        fluent_builders::DeleteIdentities::new(self.handle.clone())
    }
    pub fn delete_identity_pool(&self) -> fluent_builders::DeleteIdentityPool<C, M, R> {
        fluent_builders::DeleteIdentityPool::new(self.handle.clone())
    }
    pub fn describe_identity(&self) -> fluent_builders::DescribeIdentity<C, M, R> {
        fluent_builders::DescribeIdentity::new(self.handle.clone())
    }
    pub fn describe_identity_pool(&self) -> fluent_builders::DescribeIdentityPool<C, M, R> {
        fluent_builders::DescribeIdentityPool::new(self.handle.clone())
    }
    pub fn get_credentials_for_identity(
        &self,
    ) -> fluent_builders::GetCredentialsForIdentity<C, M, R> {
        fluent_builders::GetCredentialsForIdentity::new(self.handle.clone())
    }
    pub fn get_id(&self) -> fluent_builders::GetId<C, M, R> {
        fluent_builders::GetId::new(self.handle.clone())
    }
    pub fn get_identity_pool_roles(&self) -> fluent_builders::GetIdentityPoolRoles<C, M, R> {
        fluent_builders::GetIdentityPoolRoles::new(self.handle.clone())
    }
    pub fn get_open_id_token(&self) -> fluent_builders::GetOpenIdToken<C, M, R> {
        fluent_builders::GetOpenIdToken::new(self.handle.clone())
    }
    pub fn get_open_id_token_for_developer_identity(
        &self,
    ) -> fluent_builders::GetOpenIdTokenForDeveloperIdentity<C, M, R> {
        fluent_builders::GetOpenIdTokenForDeveloperIdentity::new(self.handle.clone())
    }
    pub fn get_principal_tag_attribute_map(
        &self,
    ) -> fluent_builders::GetPrincipalTagAttributeMap<C, M, R> {
        fluent_builders::GetPrincipalTagAttributeMap::new(self.handle.clone())
    }
    pub fn list_identities(&self) -> fluent_builders::ListIdentities<C, M, R> {
        fluent_builders::ListIdentities::new(self.handle.clone())
    }
    pub fn list_identity_pools(&self) -> fluent_builders::ListIdentityPools<C, M, R> {
        fluent_builders::ListIdentityPools::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn lookup_developer_identity(&self) -> fluent_builders::LookupDeveloperIdentity<C, M, R> {
        fluent_builders::LookupDeveloperIdentity::new(self.handle.clone())
    }
    pub fn merge_developer_identities(&self) -> fluent_builders::MergeDeveloperIdentities<C, M, R> {
        fluent_builders::MergeDeveloperIdentities::new(self.handle.clone())
    }
    pub fn set_identity_pool_roles(&self) -> fluent_builders::SetIdentityPoolRoles<C, M, R> {
        fluent_builders::SetIdentityPoolRoles::new(self.handle.clone())
    }
    pub fn set_principal_tag_attribute_map(
        &self,
    ) -> fluent_builders::SetPrincipalTagAttributeMap<C, M, R> {
        fluent_builders::SetPrincipalTagAttributeMap::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn unlink_developer_identity(&self) -> fluent_builders::UnlinkDeveloperIdentity<C, M, R> {
        fluent_builders::UnlinkDeveloperIdentity::new(self.handle.clone())
    }
    pub fn unlink_identity(&self) -> fluent_builders::UnlinkIdentity<C, M, R> {
        fluent_builders::UnlinkIdentity::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_identity_pool(&self) -> fluent_builders::UpdateIdentityPool<C, M, R> {
        fluent_builders::UpdateIdentityPool::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateIdentityPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_identity_pool_input::Builder,
    }
    impl<C, M, R> CreateIdentityPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateIdentityPoolOutput,
            smithy_http::result::SdkError<crate::error::CreateIdentityPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateIdentityPoolInputOperationOutputAlias,
                crate::output::CreateIdentityPoolOutput,
                crate::error::CreateIdentityPoolError,
                crate::input::CreateIdentityPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string that you provide.</p>
        pub fn identity_pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_name(inp);
            self
        }
        pub fn set_identity_pool_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_name(input);
            self
        }
        /// <p>TRUE if the identity pool supports unauthenticated logins.</p>
        pub fn allow_unauthenticated_identities(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_unauthenticated_identities(inp);
            self
        }
        pub fn set_allow_unauthenticated_identities(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_allow_unauthenticated_identities(input);
            self
        }
        /// <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
        /// <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
        pub fn allow_classic_flow(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_classic_flow(inp);
            self
        }
        pub fn set_allow_classic_flow(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_classic_flow(input);
            self
        }
        /// Adds a key-value pair to `SupportedLoginProviders`.
        ///
        /// To override the contents of this collection use [`set_supported_login_providers`](Self::set_supported_login_providers).
        /// <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
        pub fn supported_login_providers(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.supported_login_providers(k, v);
            self
        }
        pub fn set_supported_login_providers(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_supported_login_providers(input);
            self
        }
        /// <p>The "domain" by which Cognito will refer to your users. This name acts as a
        /// placeholder that allows your backend and the Cognito service to communicate about the
        /// developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well
        /// as period (<code>.</code>), underscore (<code>_</code>), and dash
        /// (<code>-</code>).</p>
        /// <p>Once you have set a developer provider name, you cannot change it. Please take care
        /// in setting this parameter.</p>
        pub fn developer_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_provider_name(inp);
            self
        }
        pub fn set_developer_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_provider_name(input);
            self
        }
        /// Appends an item to `OpenIdConnectProviderARNs`.
        ///
        /// To override the contents of this collection use [`set_open_id_connect_provider_ar_ns`](Self::set_open_id_connect_provider_ar_ns).
        /// <p>The Amazon Resource Names (ARN) of the OpenID Connect providers.</p>
        pub fn open_id_connect_provider_ar_ns(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.open_id_connect_provider_ar_ns(inp);
            self
        }
        pub fn set_open_id_connect_provider_ar_ns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_open_id_connect_provider_ar_ns(input);
            self
        }
        /// Appends an item to `CognitoIdentityProviders`.
        ///
        /// To override the contents of this collection use [`set_cognito_identity_providers`](Self::set_cognito_identity_providers).
        /// <p>An array of Amazon Cognito user pools and their client IDs.</p>
        pub fn cognito_identity_providers(
            mut self,
            inp: impl Into<crate::model::CognitoIdentityProvider>,
        ) -> Self {
            self.inner = self.inner.cognito_identity_providers(inp);
            self
        }
        pub fn set_cognito_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CognitoIdentityProvider>>,
        ) -> Self {
            self.inner = self.inner.set_cognito_identity_providers(input);
            self
        }
        /// Appends an item to `SamlProviderARNs`.
        ///
        /// To override the contents of this collection use [`set_saml_provider_ar_ns`](Self::set_saml_provider_ar_ns).
        /// <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
        /// pool.</p>
        pub fn saml_provider_ar_ns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.saml_provider_ar_ns(inp);
            self
        }
        pub fn set_saml_provider_ar_ns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_saml_provider_ar_ns(input);
            self
        }
        /// Adds a key-value pair to `IdentityPoolTags`.
        ///
        /// To override the contents of this collection use [`set_identity_pool_tags`](Self::set_identity_pool_tags).
        /// <p>Tags to assign to the identity pool. A tag is a label that you can apply to identity
        /// pools to categorize and manage them in different ways, such as by purpose, owner,
        /// environment, or other criteria.</p>
        pub fn identity_pool_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.identity_pool_tags(k, v);
            self
        }
        pub fn set_identity_pool_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteIdentities<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_identities_input::Builder,
    }
    impl<C, M, R> DeleteIdentities<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteIdentitiesOutput,
            smithy_http::result::SdkError<crate::error::DeleteIdentitiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteIdentitiesInputOperationOutputAlias,
                crate::output::DeleteIdentitiesOutput,
                crate::error::DeleteIdentitiesError,
                crate::input::DeleteIdentitiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `IdentityIdsToDelete`.
        ///
        /// To override the contents of this collection use [`set_identity_ids_to_delete`](Self::set_identity_ids_to_delete).
        /// <p>A list of 1-60 identities that you want to delete.</p>
        pub fn identity_ids_to_delete(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_ids_to_delete(inp);
            self
        }
        pub fn set_identity_ids_to_delete(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_identity_ids_to_delete(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteIdentityPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_identity_pool_input::Builder,
    }
    impl<C, M, R> DeleteIdentityPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteIdentityPoolOutput,
            smithy_http::result::SdkError<crate::error::DeleteIdentityPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteIdentityPoolInputOperationOutputAlias,
                crate::output::DeleteIdentityPoolOutput,
                crate::error::DeleteIdentityPoolError,
                crate::input::DeleteIdentityPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_identity_input::Builder,
    }
    impl<C, M, R> DescribeIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeIdentityOutput,
            smithy_http::result::SdkError<crate::error::DescribeIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeIdentityInputOperationOutputAlias,
                crate::output::DescribeIdentityOutput,
                crate::error::DescribeIdentityError,
                crate::input::DescribeIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeIdentityPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_identity_pool_input::Builder,
    }
    impl<C, M, R> DescribeIdentityPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeIdentityPoolOutput,
            smithy_http::result::SdkError<crate::error::DescribeIdentityPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeIdentityPoolInputOperationOutputAlias,
                crate::output::DescribeIdentityPoolOutput,
                crate::error::DescribeIdentityPoolError,
                crate::input::DescribeIdentityPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetCredentialsForIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_credentials_for_identity_input::Builder,
    }
    impl<C, M, R> GetCredentialsForIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCredentialsForIdentityOutput,
            smithy_http::result::SdkError<crate::error::GetCredentialsForIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetCredentialsForIdentityInputOperationOutputAlias,
                crate::output::GetCredentialsForIdentityOutput,
                crate::error::GetCredentialsForIdentityError,
                crate::input::GetCredentialsForIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// Adds a key-value pair to `Logins`.
        ///
        /// To override the contents of this collection use [`set_logins`](Self::set_logins).
        /// <p>A set of optional name-value pairs that map provider names to provider tokens. The
        /// name-value pair will follow the syntax "provider_name":
        /// "provider_user_identifier".</p>
        /// <p>Logins should not be specified when trying to get credentials for an unauthenticated
        /// identity.</p>
        /// <p>The Logins parameter is required when using identities associated with external
        /// identity providers such as Facebook. For examples of <code>Logins</code> maps, see the code
        /// examples in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html">External Identity Providers</a> section of the Amazon Cognito Developer
        /// Guide.</p>
        pub fn logins(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.logins(k, v);
            self
        }
        pub fn set_logins(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_logins(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were
        /// received in the token from the identity provider. For example, a SAML-based identity
        /// provider. This parameter is optional for identity providers that do not support role
        /// customization.</p>
        pub fn custom_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_role_arn(inp);
            self
        }
        pub fn set_custom_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_role_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetId<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_id_input::Builder,
    }
    impl<C, M, R> GetId<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetIdOutput,
            smithy_http::result::SdkError<crate::error::GetIdError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetIdInputOperationOutputAlias,
                crate::output::GetIdOutput,
                crate::error::GetIdError,
                crate::input::GetIdInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A standard AWS account ID (9+ digits).</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// Adds a key-value pair to `Logins`.
        ///
        /// To override the contents of this collection use [`set_logins`](Self::set_logins).
        /// <p>A set of optional name-value pairs that map provider names to provider tokens. The
        /// available provider names for <code>Logins</code> are as follows:</p>
        /// <ul>
        /// <li>
        /// <p>Facebook: <code>graph.facebook.com</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito user pool:
        /// <code>cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID></code>,
        /// for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.
        /// </p>
        /// </li>
        /// <li>
        /// <p>Google: <code>accounts.google.com</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Amazon: <code>www.amazon.com</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Twitter: <code>api.twitter.com</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Digits: <code>www.digits.com</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn logins(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.logins(k, v);
            self
        }
        pub fn set_logins(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_logins(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetIdentityPoolRoles<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_identity_pool_roles_input::Builder,
    }
    impl<C, M, R> GetIdentityPoolRoles<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetIdentityPoolRolesOutput,
            smithy_http::result::SdkError<crate::error::GetIdentityPoolRolesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetIdentityPoolRolesInputOperationOutputAlias,
                crate::output::GetIdentityPoolRolesOutput,
                crate::error::GetIdentityPoolRolesError,
                crate::input::GetIdentityPoolRolesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetOpenIdToken<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_open_id_token_input::Builder,
    }
    impl<C, M, R> GetOpenIdToken<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetOpenIdTokenOutput,
            smithy_http::result::SdkError<crate::error::GetOpenIdTokenError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetOpenIdTokenInputOperationOutputAlias,
                crate::output::GetOpenIdTokenOutput,
                crate::error::GetOpenIdTokenError,
                crate::input::GetOpenIdTokenInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// Adds a key-value pair to `Logins`.
        ///
        /// To override the contents of this collection use [`set_logins`](Self::set_logins).
        /// <p>A set of optional name-value pairs that map provider names to provider tokens. When
        /// using graph.facebook.com and www.amazon.com, supply the access_token returned from the
        /// provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any
        /// other OpenID Connect provider, always include the <code>id_token</code>.</p>
        pub fn logins(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.logins(k, v);
            self
        }
        pub fn set_logins(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_logins(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetOpenIdTokenForDeveloperIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_open_id_token_for_developer_identity_input::Builder,
    }
    impl<C, M, R> GetOpenIdTokenForDeveloperIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetOpenIdTokenForDeveloperIdentityOutput,
            smithy_http::result::SdkError<crate::error::GetOpenIdTokenForDeveloperIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetOpenIdTokenForDeveloperIdentityInputOperationOutputAlias,
                crate::output::GetOpenIdTokenForDeveloperIdentityOutput,
                crate::error::GetOpenIdTokenForDeveloperIdentityError,
                crate::input::GetOpenIdTokenForDeveloperIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// Adds a key-value pair to `Logins`.
        ///
        /// To override the contents of this collection use [`set_logins`](Self::set_logins).
        /// <p>A set of optional name-value pairs that map provider names to provider tokens. Each
        /// name-value pair represents a user from a public provider or developer provider. If the user
        /// is from a developer provider, the name-value pair will follow the syntax
        /// <code>"developer_provider_name": "developer_user_identifier"</code>. The developer
        /// provider is the "domain" by which Cognito will refer to your users; you provided this
        /// domain while creating/updating the identity pool. The developer user identifier is an
        /// identifier from your backend that uniquely identifies a user. When you create an identity
        /// pool, you can specify the supported logins.</p>
        pub fn logins(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.logins(k, v);
            self
        }
        pub fn set_logins(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_logins(input);
            self
        }
        /// Adds a key-value pair to `PrincipalTags`.
        ///
        /// To override the contents of this collection use [`set_principal_tags`](Self::set_principal_tags).
        /// <p>Use this operation to configure attribute mappings for custom providers. </p>
        pub fn principal_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.principal_tags(k, v);
            self
        }
        pub fn set_principal_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_principal_tags(input);
            self
        }
        /// <p>The expiration time of the token, in seconds. You can specify a custom expiration
        /// time for the token so that you can cache it. If you don't provide an expiration time, the
        /// token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS
        /// credentials, which are valid for a maximum of one hour. The maximum token duration you can
        /// set is 24 hours. You should take care in setting the expiration time for a token, as there
        /// are significant security implications: an attacker could use a leaked token to access your
        /// AWS resources for the token's duration.</p>
        /// <note>
        /// <p>Please provide for a small grace period, usually no more than 5 minutes, to account for clock skew.</p>
        /// </note>
        pub fn token_duration(mut self, inp: i64) -> Self {
            self.inner = self.inner.token_duration(inp);
            self
        }
        pub fn set_token_duration(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_token_duration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetPrincipalTagAttributeMap<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_principal_tag_attribute_map_input::Builder,
    }
    impl<C, M, R> GetPrincipalTagAttributeMap<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPrincipalTagAttributeMapOutput,
            smithy_http::result::SdkError<crate::error::GetPrincipalTagAttributeMapError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetPrincipalTagAttributeMapInputOperationOutputAlias,
                crate::output::GetPrincipalTagAttributeMapOutput,
                crate::error::GetPrincipalTagAttributeMapError,
                crate::input::GetPrincipalTagAttributeMapInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>You can use this operation to get the ID of the Identity Pool you setup attribute mappings for.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>You can use this operation to get the provider name.</p>
        pub fn identity_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_provider_name(inp);
            self
        }
        pub fn set_identity_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_provider_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListIdentities<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_identities_input::Builder,
    }
    impl<C, M, R> ListIdentities<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListIdentitiesOutput,
            smithy_http::result::SdkError<crate::error::ListIdentitiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListIdentitiesInputOperationOutputAlias,
                crate::output::ListIdentitiesOutput,
                crate::error::ListIdentitiesError,
                crate::input::ListIdentitiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>The maximum number of identities to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>An optional boolean parameter that allows you to hide disabled identities. If
        /// omitted, the ListIdentities API will include disabled identities in the response.</p>
        pub fn hide_disabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.hide_disabled(inp);
            self
        }
        pub fn set_hide_disabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_hide_disabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListIdentityPools<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_identity_pools_input::Builder,
    }
    impl<C, M, R> ListIdentityPools<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListIdentityPoolsOutput,
            smithy_http::result::SdkError<crate::error::ListIdentityPoolsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListIdentityPoolsInputOperationOutputAlias,
                crate::output::ListIdentityPoolsOutput,
                crate::error::ListIdentityPoolsError,
                crate::input::ListIdentityPoolsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The maximum number of identities to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the identity pool that the tags are assigned
        /// to.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct LookupDeveloperIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::lookup_developer_identity_input::Builder,
    }
    impl<C, M, R> LookupDeveloperIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::LookupDeveloperIdentityOutput,
            smithy_http::result::SdkError<crate::error::LookupDeveloperIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::LookupDeveloperIdentityInputOperationOutputAlias,
                crate::output::LookupDeveloperIdentityOutput,
                crate::error::LookupDeveloperIdentityError,
                crate::input::LookupDeveloperIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>A unique ID used by your backend authentication process to identify a user.
        /// Typically, a developer identity provider would issue many developer user identifiers, in
        /// keeping with the number of users.</p>
        pub fn developer_user_identifier(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_user_identifier(inp);
            self
        }
        pub fn set_developer_user_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_user_identifier(input);
            self
        }
        /// <p>The maximum number of identities to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token. The first call you make will have <code>NextToken</code> set to
        /// null. After that the service will return <code>NextToken</code> values as needed. For
        /// example, let's say you make a request with <code>MaxResults</code> set to 10, and there are
        /// 20 matches in the database. The service will return a pagination token as a part of the
        /// response. This token can be used to call the API again and get results starting from the
        /// 11th match.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct MergeDeveloperIdentities<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::merge_developer_identities_input::Builder,
    }
    impl<C, M, R> MergeDeveloperIdentities<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::MergeDeveloperIdentitiesOutput,
            smithy_http::result::SdkError<crate::error::MergeDeveloperIdentitiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::MergeDeveloperIdentitiesInputOperationOutputAlias,
                crate::output::MergeDeveloperIdentitiesOutput,
                crate::error::MergeDeveloperIdentitiesError,
                crate::input::MergeDeveloperIdentitiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>User identifier for the source user. The value should be a
        /// <code>DeveloperUserIdentifier</code>.</p>
        pub fn source_user_identifier(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_user_identifier(inp);
            self
        }
        pub fn set_source_user_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_user_identifier(input);
            self
        }
        /// <p>User identifier for the destination user. The value should be a
        /// <code>DeveloperUserIdentifier</code>.</p>
        pub fn destination_user_identifier(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_user_identifier(inp);
            self
        }
        pub fn set_destination_user_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_user_identifier(input);
            self
        }
        /// <p>The "domain" by which Cognito will refer to your users. This is a (pseudo) domain
        /// name that you provide while creating an identity pool. This name acts as a placeholder that
        /// allows your backend and the Cognito service to communicate about the developer provider.
        /// For the <code>DeveloperProviderName</code>, you can use letters as well as period (.),
        /// underscore (_), and dash (-).</p>
        pub fn developer_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_provider_name(inp);
            self
        }
        pub fn set_developer_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_provider_name(input);
            self
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetIdentityPoolRoles<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_identity_pool_roles_input::Builder,
    }
    impl<C, M, R> SetIdentityPoolRoles<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetIdentityPoolRolesOutput,
            smithy_http::result::SdkError<crate::error::SetIdentityPoolRolesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetIdentityPoolRolesInputOperationOutputAlias,
                crate::output::SetIdentityPoolRolesOutput,
                crate::error::SetIdentityPoolRolesError,
                crate::input::SetIdentityPoolRolesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// Adds a key-value pair to `Roles`.
        ///
        /// To override the contents of this collection use [`set_roles`](Self::set_roles).
        /// <p>The map of roles associated with this pool. For a given role, the key will be either
        /// "authenticated" or "unauthenticated" and the value will be the Role ARN.</p>
        pub fn roles(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.roles(k, v);
            self
        }
        pub fn set_roles(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_roles(input);
            self
        }
        /// Adds a key-value pair to `RoleMappings`.
        ///
        /// To override the contents of this collection use [`set_role_mappings`](Self::set_role_mappings).
        /// <p>How users for a specific identity provider are to mapped to roles. This is a string
        /// to <a>RoleMapping</a> object map. The string identifies the identity provider,
        /// for example, "graph.facebook.com" or
        /// "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
        /// <p>Up to 25 rules can be specified per identity provider.</p>
        pub fn role_mappings(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<crate::model::RoleMapping>,
        ) -> Self {
            self.inner = self.inner.role_mappings(k, v);
            self
        }
        pub fn set_role_mappings(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::RoleMapping>,
            >,
        ) -> Self {
            self.inner = self.inner.set_role_mappings(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetPrincipalTagAttributeMap<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_principal_tag_attribute_map_input::Builder,
    }
    impl<C, M, R> SetPrincipalTagAttributeMap<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetPrincipalTagAttributeMapOutput,
            smithy_http::result::SdkError<crate::error::SetPrincipalTagAttributeMapError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetPrincipalTagAttributeMapInputOperationOutputAlias,
                crate::output::SetPrincipalTagAttributeMapOutput,
                crate::error::SetPrincipalTagAttributeMapError,
                crate::input::SetPrincipalTagAttributeMapInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Identity Pool you want to set attribute mappings for.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>The provider name you want to use for attribute mappings.</p>
        pub fn identity_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_provider_name(inp);
            self
        }
        pub fn set_identity_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_provider_name(input);
            self
        }
        /// <p>You can use this operation to use default (username and clientID) attribute mappings.</p>
        pub fn use_defaults(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_defaults(inp);
            self
        }
        pub fn set_use_defaults(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_defaults(input);
            self
        }
        /// Adds a key-value pair to `PrincipalTags`.
        ///
        /// To override the contents of this collection use [`set_principal_tags`](Self::set_principal_tags).
        /// <p>You can use this operation to add principal tags.</p>
        pub fn principal_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.principal_tags(k, v);
            self
        }
        pub fn set_principal_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_principal_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the identity pool.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to assign to the identity pool.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UnlinkDeveloperIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::unlink_developer_identity_input::Builder,
    }
    impl<C, M, R> UnlinkDeveloperIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UnlinkDeveloperIdentityOutput,
            smithy_http::result::SdkError<crate::error::UnlinkDeveloperIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UnlinkDeveloperIdentityInputOperationOutputAlias,
                crate::output::UnlinkDeveloperIdentityOutput,
                crate::error::UnlinkDeveloperIdentityError,
                crate::input::UnlinkDeveloperIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>The "domain" by which Cognito will refer to your users.</p>
        pub fn developer_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_provider_name(inp);
            self
        }
        pub fn set_developer_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_provider_name(input);
            self
        }
        /// <p>A unique ID used by your backend authentication process to identify a user.</p>
        pub fn developer_user_identifier(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_user_identifier(inp);
            self
        }
        pub fn set_developer_user_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_user_identifier(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UnlinkIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::unlink_identity_input::Builder,
    }
    impl<C, M, R> UnlinkIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UnlinkIdentityOutput,
            smithy_http::result::SdkError<crate::error::UnlinkIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UnlinkIdentityInputOperationOutputAlias,
                crate::output::UnlinkIdentityOutput,
                crate::error::UnlinkIdentityError,
                crate::input::UnlinkIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique identifier in the format REGION:GUID.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// Adds a key-value pair to `Logins`.
        ///
        /// To override the contents of this collection use [`set_logins`](Self::set_logins).
        /// <p>A set of optional name-value pairs that map provider names to provider
        /// tokens.</p>
        pub fn logins(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.logins(k, v);
            self
        }
        pub fn set_logins(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_logins(input);
            self
        }
        /// Appends an item to `LoginsToRemove`.
        ///
        /// To override the contents of this collection use [`set_logins_to_remove`](Self::set_logins_to_remove).
        /// <p>Provider names to unlink from this identity.</p>
        pub fn logins_to_remove(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logins_to_remove(inp);
            self
        }
        pub fn set_logins_to_remove(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_logins_to_remove(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the identity pool.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>The keys of the tags to remove from the user pool.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateIdentityPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_identity_pool_input::Builder,
    }
    impl<C, M, R> UpdateIdentityPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateIdentityPoolOutput,
            smithy_http::result::SdkError<crate::error::UpdateIdentityPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateIdentityPoolInputOperationOutputAlias,
                crate::output::UpdateIdentityPoolOutput,
                crate::error::UpdateIdentityPoolError,
                crate::input::UpdateIdentityPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identity pool ID in the format REGION:GUID.</p>
        pub fn identity_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_id(inp);
            self
        }
        pub fn set_identity_pool_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_id(input);
            self
        }
        /// <p>A string that you provide.</p>
        pub fn identity_pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_pool_name(inp);
            self
        }
        pub fn set_identity_pool_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_name(input);
            self
        }
        /// <p>TRUE if the identity pool supports unauthenticated logins.</p>
        pub fn allow_unauthenticated_identities(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_unauthenticated_identities(inp);
            self
        }
        pub fn set_allow_unauthenticated_identities(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_allow_unauthenticated_identities(input);
            self
        }
        /// <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
        /// <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
        pub fn allow_classic_flow(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_classic_flow(inp);
            self
        }
        pub fn set_allow_classic_flow(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_classic_flow(input);
            self
        }
        /// Adds a key-value pair to `SupportedLoginProviders`.
        ///
        /// To override the contents of this collection use [`set_supported_login_providers`](Self::set_supported_login_providers).
        /// <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
        pub fn supported_login_providers(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.supported_login_providers(k, v);
            self
        }
        pub fn set_supported_login_providers(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_supported_login_providers(input);
            self
        }
        /// <p>The "domain" by which Cognito will refer to your users.</p>
        pub fn developer_provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.developer_provider_name(inp);
            self
        }
        pub fn set_developer_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_developer_provider_name(input);
            self
        }
        /// Appends an item to `OpenIdConnectProviderARNs`.
        ///
        /// To override the contents of this collection use [`set_open_id_connect_provider_ar_ns`](Self::set_open_id_connect_provider_ar_ns).
        /// <p>The ARNs of the OpenID Connect providers.</p>
        pub fn open_id_connect_provider_ar_ns(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.open_id_connect_provider_ar_ns(inp);
            self
        }
        pub fn set_open_id_connect_provider_ar_ns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_open_id_connect_provider_ar_ns(input);
            self
        }
        /// Appends an item to `CognitoIdentityProviders`.
        ///
        /// To override the contents of this collection use [`set_cognito_identity_providers`](Self::set_cognito_identity_providers).
        /// <p>A list representing an Amazon Cognito user pool and its client ID.</p>
        pub fn cognito_identity_providers(
            mut self,
            inp: impl Into<crate::model::CognitoIdentityProvider>,
        ) -> Self {
            self.inner = self.inner.cognito_identity_providers(inp);
            self
        }
        pub fn set_cognito_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CognitoIdentityProvider>>,
        ) -> Self {
            self.inner = self.inner.set_cognito_identity_providers(input);
            self
        }
        /// Appends an item to `SamlProviderARNs`.
        ///
        /// To override the contents of this collection use [`set_saml_provider_ar_ns`](Self::set_saml_provider_ar_ns).
        /// <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
        /// pool.</p>
        pub fn saml_provider_ar_ns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.saml_provider_ar_ns(inp);
            self
        }
        pub fn set_saml_provider_ar_ns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_saml_provider_ar_ns(input);
            self
        }
        /// Adds a key-value pair to `IdentityPoolTags`.
        ///
        /// To override the contents of this collection use [`set_identity_pool_tags`](Self::set_identity_pool_tags).
        /// <p>The tags that are assigned to the identity pool. A tag is a label that you can apply to
        /// identity pools to categorize and manage them in different ways, such as by purpose, owner,
        /// environment, or other criteria.</p>
        pub fn identity_pool_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.identity_pool_tags(k, v);
            self
        }
        pub fn set_identity_pool_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_identity_pool_tags(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
