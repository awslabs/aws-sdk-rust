// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If you provided authentication information in the request, the identity pool has no authenticated role configured, or STS returned an error response to the request to assume the authenticated role from the identity pool. If you provided no authentication information in the request, the identity pool has no unauthenticated role configured, or STS returned an error response to the request to assume the unauthenticated role from the identity pool.</p>
/// <p>Your role trust policy must grant <code>AssumeRoleWithWebIdentity</code> permissions to <code>cognito-identity.amazonaws.com</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvalidIdentityPoolConfigurationException {
    /// <p>The message returned for an <code>InvalidIdentityPoolConfigurationException</code></p>
    pub message: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl InvalidIdentityPoolConfigurationException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for InvalidIdentityPoolConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "InvalidIdentityPoolConfigurationException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {inner_1}")?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for InvalidIdentityPoolConfigurationException {}
impl ::aws_types::request_id::RequestId for crate::types::error::InvalidIdentityPoolConfigurationException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for InvalidIdentityPoolConfigurationException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl InvalidIdentityPoolConfigurationException {
    /// Creates a new builder-style object to manufacture [`InvalidIdentityPoolConfigurationException`](crate::types::error::InvalidIdentityPoolConfigurationException).
    pub fn builder() -> crate::types::error::builders::InvalidIdentityPoolConfigurationExceptionBuilder {
        crate::types::error::builders::InvalidIdentityPoolConfigurationExceptionBuilder::default()
    }
}

/// A builder for [`InvalidIdentityPoolConfigurationException`](crate::types::error::InvalidIdentityPoolConfigurationException).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvalidIdentityPoolConfigurationExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl InvalidIdentityPoolConfigurationExceptionBuilder {
    /// <p>The message returned for an <code>InvalidIdentityPoolConfigurationException</code></p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message returned for an <code>InvalidIdentityPoolConfigurationException</code></p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message returned for an <code>InvalidIdentityPoolConfigurationException</code></p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`InvalidIdentityPoolConfigurationException`](crate::types::error::InvalidIdentityPoolConfigurationException).
    pub fn build(self) -> crate::types::error::InvalidIdentityPoolConfigurationException {
        crate::types::error::InvalidIdentityPoolConfigurationException {
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
