// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A provider representing an Amazon Cognito user pool and its client ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CognitoIdentityProvider {
    /// <p>The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The client ID for the Amazon Cognito user pool.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>TRUE if server-side token validation is enabled for the identity provider’s token.</p>
    /// <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p>
    /// <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>
    #[doc(hidden)]
    pub server_side_token_check: std::option::Option<bool>,
}
impl CognitoIdentityProvider {
    /// <p>The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The client ID for the Amazon Cognito user pool.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>TRUE if server-side token validation is enabled for the identity provider’s token.</p>
    /// <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p>
    /// <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>
    pub fn server_side_token_check(&self) -> std::option::Option<bool> {
        self.server_side_token_check
    }
}
impl CognitoIdentityProvider {
    /// Creates a new builder-style object to manufacture [`CognitoIdentityProvider`](crate::types::CognitoIdentityProvider).
    pub fn builder() -> crate::types::builders::CognitoIdentityProviderBuilder {
        crate::types::builders::CognitoIdentityProviderBuilder::default()
    }
}

/// A builder for [`CognitoIdentityProvider`](crate::types::CognitoIdentityProvider).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CognitoIdentityProviderBuilder {
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) server_side_token_check: std::option::Option<bool>,
}
impl CognitoIdentityProviderBuilder {
    /// <p>The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The client ID for the Amazon Cognito user pool.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The client ID for the Amazon Cognito user pool.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>TRUE if server-side token validation is enabled for the identity provider’s token.</p>
    /// <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p>
    /// <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>
    pub fn server_side_token_check(mut self, input: bool) -> Self {
        self.server_side_token_check = Some(input);
        self
    }
    /// <p>TRUE if server-side token validation is enabled for the identity provider’s token.</p>
    /// <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p>
    /// <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>
    pub fn set_server_side_token_check(mut self, input: std::option::Option<bool>) -> Self {
        self.server_side_token_check = input;
        self
    }
    /// Consumes the builder and constructs a [`CognitoIdentityProvider`](crate::types::CognitoIdentityProvider).
    pub fn build(self) -> crate::types::CognitoIdentityProvider {
        crate::types::CognitoIdentityProvider {
            provider_name: self.provider_name,
            client_id: self.client_id,
            server_side_token_check: self.server_side_token_check,
        }
    }
}
