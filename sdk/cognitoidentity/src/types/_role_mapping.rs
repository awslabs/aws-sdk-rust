// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A role mapping.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RoleMapping {
    /// <p>The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::RoleMappingType>,
    /// <p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p>
    /// <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>
    #[doc(hidden)]
    pub ambiguous_role_resolution: std::option::Option<crate::types::AmbiguousRoleResolutionType>,
    /// <p>The rules to be used for mapping users to roles.</p>
    /// <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>
    #[doc(hidden)]
    pub rules_configuration: std::option::Option<crate::types::RulesConfigurationType>,
}
impl RoleMapping {
    /// <p>The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::RoleMappingType> {
        self.r#type.as_ref()
    }
    /// <p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p>
    /// <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>
    pub fn ambiguous_role_resolution(
        &self,
    ) -> std::option::Option<&crate::types::AmbiguousRoleResolutionType> {
        self.ambiguous_role_resolution.as_ref()
    }
    /// <p>The rules to be used for mapping users to roles.</p>
    /// <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>
    pub fn rules_configuration(
        &self,
    ) -> std::option::Option<&crate::types::RulesConfigurationType> {
        self.rules_configuration.as_ref()
    }
}
impl RoleMapping {
    /// Creates a new builder-style object to manufacture [`RoleMapping`](crate::types::RoleMapping).
    pub fn builder() -> crate::types::builders::RoleMappingBuilder {
        crate::types::builders::RoleMappingBuilder::default()
    }
}

/// A builder for [`RoleMapping`](crate::types::RoleMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RoleMappingBuilder {
    pub(crate) r#type: std::option::Option<crate::types::RoleMappingType>,
    pub(crate) ambiguous_role_resolution:
        std::option::Option<crate::types::AmbiguousRoleResolutionType>,
    pub(crate) rules_configuration: std::option::Option<crate::types::RulesConfigurationType>,
}
impl RoleMappingBuilder {
    /// <p>The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.</p>
    pub fn r#type(mut self, input: crate::types::RoleMappingType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::RoleMappingType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p>
    /// <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>
    pub fn ambiguous_role_resolution(
        mut self,
        input: crate::types::AmbiguousRoleResolutionType,
    ) -> Self {
        self.ambiguous_role_resolution = Some(input);
        self
    }
    /// <p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p>
    /// <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>
    pub fn set_ambiguous_role_resolution(
        mut self,
        input: std::option::Option<crate::types::AmbiguousRoleResolutionType>,
    ) -> Self {
        self.ambiguous_role_resolution = input;
        self
    }
    /// <p>The rules to be used for mapping users to roles.</p>
    /// <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>
    pub fn rules_configuration(mut self, input: crate::types::RulesConfigurationType) -> Self {
        self.rules_configuration = Some(input);
        self
    }
    /// <p>The rules to be used for mapping users to roles.</p>
    /// <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>
    pub fn set_rules_configuration(
        mut self,
        input: std::option::Option<crate::types::RulesConfigurationType>,
    ) -> Self {
        self.rules_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`RoleMapping`](crate::types::RoleMapping).
    pub fn build(self) -> crate::types::RoleMapping {
        crate::types::RoleMapping {
            r#type: self.r#type,
            ambiguous_role_resolution: self.ambiguous_role_resolution,
            rules_configuration: self.rules_configuration,
        }
    }
}
