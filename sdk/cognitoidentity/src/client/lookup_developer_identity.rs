// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`LookupDeveloperIdentity`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_pool_id(impl Into<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::identity_pool_id) / [`set_identity_pool_id(Option<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::set_identity_pool_id):<br>required: **true**<br><p>An identity pool ID in the format REGION:GUID.</p><br>
    ///   - [`identity_id(impl Into<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::identity_id) / [`set_identity_id(Option<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::set_identity_id):<br>required: **false**<br><p>A unique identifier in the format REGION:GUID.</p><br>
    ///   - [`developer_user_identifier(impl Into<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::developer_user_identifier) / [`set_developer_user_identifier(Option<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::set_developer_user_identifier):<br>required: **false**<br><p>A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.</p><br>
    ///   - [`max_results(i32)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of identities to return.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::set_next_token):<br>required: **false**<br><p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p><br>
    /// - On success, responds with [`LookupDeveloperIdentityOutput`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput) with field(s):
    ///   - [`identity_id(Option<String>)`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput::identity_id): <p>A unique identifier in the format REGION:GUID.</p>
    ///   - [`developer_user_identifier_list(Option<Vec::<String>>)`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput::developer_user_identifier_list): <p>This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityOutput::next_token): <p>A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.</p>
    /// - On failure, responds with [`SdkError<LookupDeveloperIdentityError>`](crate::operation::lookup_developer_identity::LookupDeveloperIdentityError)
    pub fn lookup_developer_identity(&self) -> crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder {
        crate::operation::lookup_developer_identity::builders::LookupDeveloperIdentityFluentBuilder::new(self.handle.clone())
    }
}
