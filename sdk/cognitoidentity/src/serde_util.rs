// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_identity_pool_output_correct_errors(
    mut builder: crate::operation::create_identity_pool::builders::CreateIdentityPoolOutputBuilder,
) -> crate::operation::create_identity_pool::builders::CreateIdentityPoolOutputBuilder {
    if builder.identity_pool_id.is_none() {
        builder.identity_pool_id = Some(Default::default())
    }
    if builder.identity_pool_name.is_none() {
        builder.identity_pool_name = Some(Default::default())
    }
    if builder.allow_unauthenticated_identities.is_none() {
        builder.allow_unauthenticated_identities = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_identity_pool_output_correct_errors(
    mut builder: crate::operation::describe_identity_pool::builders::DescribeIdentityPoolOutputBuilder,
) -> crate::operation::describe_identity_pool::builders::DescribeIdentityPoolOutputBuilder {
    if builder.identity_pool_id.is_none() {
        builder.identity_pool_id = Some(Default::default())
    }
    if builder.identity_pool_name.is_none() {
        builder.identity_pool_name = Some(Default::default())
    }
    if builder.allow_unauthenticated_identities.is_none() {
        builder.allow_unauthenticated_identities = Some(Default::default())
    }
    builder
}

pub(crate) fn update_identity_pool_output_correct_errors(
    mut builder: crate::operation::update_identity_pool::builders::UpdateIdentityPoolOutputBuilder,
) -> crate::operation::update_identity_pool::builders::UpdateIdentityPoolOutputBuilder {
    if builder.identity_pool_id.is_none() {
        builder.identity_pool_id = Some(Default::default())
    }
    if builder.identity_pool_name.is_none() {
        builder.identity_pool_name = Some(Default::default())
    }
    if builder.allow_unauthenticated_identities.is_none() {
        builder.allow_unauthenticated_identities = Some(Default::default())
    }
    builder
}

pub(crate) fn role_mapping_correct_errors(mut builder: crate::types::builders::RoleMappingBuilder) -> crate::types::builders::RoleMappingBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RoleMappingType>().ok()
    }
    builder
}

pub(crate) fn rules_configuration_type_correct_errors(
    mut builder: crate::types::builders::RulesConfigurationTypeBuilder,
) -> crate::types::builders::RulesConfigurationTypeBuilder {
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn mapping_rule_correct_errors(mut builder: crate::types::builders::MappingRuleBuilder) -> crate::types::builders::MappingRuleBuilder {
    if builder.claim.is_none() {
        builder.claim = Some(Default::default())
    }
    if builder.match_type.is_none() {
        builder.match_type = "no value was set".parse::<crate::types::MappingRuleMatchType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}
