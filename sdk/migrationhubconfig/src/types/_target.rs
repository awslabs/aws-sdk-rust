// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target parameter specifies the identifier to which the home region is applied, which is always an <code>ACCOUNT</code>. It applies the home region to the current <code>ACCOUNT</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Target {
    /// <p>The target type is always an <code>ACCOUNT</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TargetType>,
    /// <p>The <code>TargetID</code> is a 12-character identifier of the <code>ACCOUNT</code> for which the control was created. (This must be the current account.) </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl Target {
    /// <p>The target type is always an <code>ACCOUNT</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TargetType> {
        self.r#type.as_ref()
    }
    /// <p>The <code>TargetID</code> is a 12-character identifier of the <code>ACCOUNT</code> for which the control was created. (This must be the current account.) </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl Target {
    /// Creates a new builder-style object to manufacture [`Target`](crate::types::Target).
    pub fn builder() -> crate::types::builders::TargetBuilder {
        crate::types::builders::TargetBuilder::default()
    }
}

/// A builder for [`Target`](crate::types::Target).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetBuilder {
    pub(crate) r#type: std::option::Option<crate::types::TargetType>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl TargetBuilder {
    /// <p>The target type is always an <code>ACCOUNT</code>.</p>
    pub fn r#type(mut self, input: crate::types::TargetType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The target type is always an <code>ACCOUNT</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TargetType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The <code>TargetID</code> is a 12-character identifier of the <code>ACCOUNT</code> for which the control was created. (This must be the current account.) </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The <code>TargetID</code> is a 12-character identifier of the <code>ACCOUNT</code> for which the control was created. (This must be the current account.) </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`Target`](crate::types::Target).
    pub fn build(self) -> crate::types::Target {
        crate::types::Target {
            r#type: self.r#type,
            id: self.id,
        }
    }
}
