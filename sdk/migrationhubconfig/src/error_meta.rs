// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Exception raised to indicate that authorization of an action was successful, when the <code>DryRun</code> flag is set to true.</p>
    DryRunOperation(crate::types::error::DryRunOperation),
    /// <p>Exception raised when an internal, configuration, or dependency error is encountered.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>Exception raised when the provided input violates a policy constraint or is entered in the wrong format or data type.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    /// <p>Exception raised when a request fails due to temporary unavailability of the service.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::DryRunOperation(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_home_region_control::CreateHomeRegionControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_home_region_control::CreateHomeRegionControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_home_region_control::CreateHomeRegionControlError> for Error {
    fn from(
        err: crate::operation::create_home_region_control::CreateHomeRegionControlError,
    ) -> Self {
        match err {
            crate::operation::create_home_region_control::CreateHomeRegionControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::DryRunOperation(inner) => Error::DryRunOperation(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_home_region_control::CreateHomeRegionControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError>
    for Error
{
    fn from(
        err: crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError,
    ) -> Self {
        match err {
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_home_region_controls::DescribeHomeRegionControlsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_home_region::GetHomeRegionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_home_region::GetHomeRegionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_home_region::GetHomeRegionError> for Error {
    fn from(err: crate::operation::get_home_region::GetHomeRegionError) -> Self {
        match err {
            crate::operation::get_home_region::GetHomeRegionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_home_region::GetHomeRegionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::get_home_region::GetHomeRegionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::get_home_region::GetHomeRegionError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::get_home_region::GetHomeRegionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_home_region::GetHomeRegionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::DryRunOperation(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
