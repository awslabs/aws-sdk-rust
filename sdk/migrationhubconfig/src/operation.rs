// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>This API sets up the home region for the calling account only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateHomeRegionControl {
    _private: (),
}
impl CreateHomeRegionControl {
    /// Creates a new builder-style object to manufacture [`CreateHomeRegionControlInput`](crate::input::CreateHomeRegionControlInput)
    pub fn builder() -> crate::input::create_home_region_control_input::Builder {
        crate::input::create_home_region_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateHomeRegionControl {
    type Output = std::result::Result<
        crate::output::CreateHomeRegionControlOutput,
        crate::error::CreateHomeRegionControlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_home_region_control_error(response)
        } else {
            crate::operation_deser::parse_create_home_region_control_response(response)
        }
    }
}

/// <p>This API permits filtering on the <code>ControlId</code> and <code>HomeRegion</code>
/// fields.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHomeRegionControls {
    _private: (),
}
impl DescribeHomeRegionControls {
    /// Creates a new builder-style object to manufacture [`DescribeHomeRegionControlsInput`](crate::input::DescribeHomeRegionControlsInput)
    pub fn builder() -> crate::input::describe_home_region_controls_input::Builder {
        crate::input::describe_home_region_controls_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHomeRegionControls {
    type Output = std::result::Result<
        crate::output::DescribeHomeRegionControlsOutput,
        crate::error::DescribeHomeRegionControlsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_home_region_controls_error(response)
        } else {
            crate::operation_deser::parse_describe_home_region_controls_response(response)
        }
    }
}

/// <p>Returns the calling accountâ€™s home region, if configured. This API is used by other AWS
/// services to determine the regional endpoint for calling AWS Application Discovery Service and
/// Migration Hub. You must call <code>GetHomeRegion</code> at least once before you call any
/// other AWS Application Discovery Service and AWS Migration Hub APIs, to obtain the account's
/// Migration Hub home region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetHomeRegion {
    _private: (),
}
impl GetHomeRegion {
    /// Creates a new builder-style object to manufacture [`GetHomeRegionInput`](crate::input::GetHomeRegionInput)
    pub fn builder() -> crate::input::get_home_region_input::Builder {
        crate::input::get_home_region_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetHomeRegion {
    type Output =
        std::result::Result<crate::output::GetHomeRegionOutput, crate::error::GetHomeRegionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_home_region_error(response)
        } else {
            crate::operation_deser::parse_get_home_region_response(response)
        }
    }
}
