// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateNetworkSitePlanOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
    /// <p> The network site tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl UpdateNetworkSitePlanOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
    /// <p> The network site tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for UpdateNetworkSitePlanOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateNetworkSitePlanOutput");
        formatter.field("network_site", &self.network_site);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`UpdateNetworkSitePlanOutput`](crate::output::UpdateNetworkSitePlanOutput).
pub mod update_network_site_plan_output {

    /// A builder for [`UpdateNetworkSitePlanOutput`](crate::output::UpdateNetworkSitePlanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network site tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network site tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateNetworkSitePlanOutput`](crate::output::UpdateNetworkSitePlanOutput).
        pub fn build(self) -> crate::output::UpdateNetworkSitePlanOutput {
            crate::output::UpdateNetworkSitePlanOutput {
                network_site: self.network_site,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network_site", &self.network_site);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl UpdateNetworkSitePlanOutput {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSitePlanOutput`](crate::output::UpdateNetworkSitePlanOutput).
    pub fn builder() -> crate::output::update_network_site_plan_output::Builder {
        crate::output::update_network_site_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
    /// <p> The network site tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl UpdateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
    /// <p> The network site tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for UpdateNetworkSiteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateNetworkSiteOutput");
        formatter.field("network_site", &self.network_site);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`UpdateNetworkSiteOutput`](crate::output::UpdateNetworkSiteOutput).
pub mod update_network_site_output {

    /// A builder for [`UpdateNetworkSiteOutput`](crate::output::UpdateNetworkSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network site tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network site tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateNetworkSiteOutput`](crate::output::UpdateNetworkSiteOutput).
        pub fn build(self) -> crate::output::UpdateNetworkSiteOutput {
            crate::output::UpdateNetworkSiteOutput {
                network_site: self.network_site,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network_site", &self.network_site);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl UpdateNetworkSiteOutput {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSiteOutput`](crate::output::UpdateNetworkSiteOutput).
    pub fn builder() -> crate::output::update_network_site_output::Builder {
        crate::output::update_network_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PingOutput {
    /// <p>Information about the health of the service.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl PingOutput {
    /// <p>Information about the health of the service.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
/// See [`PingOutput`](crate::output::PingOutput).
pub mod ping_output {

    /// A builder for [`PingOutput`](crate::output::PingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the health of the service.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>Information about the health of the service.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`PingOutput`](crate::output::PingOutput).
        pub fn build(self) -> crate::output::PingOutput {
            crate::output::PingOutput {
                status: self.status,
            }
        }
    }
}
impl PingOutput {
    /// Creates a new builder-style object to manufacture [`PingOutput`](crate::output::PingOutput).
    pub fn builder() -> crate::output::ping_output::Builder {
        crate::output::ping_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The resource tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The resource tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrdersOutput {
    /// <p>Information about the orders.</p>
    #[doc(hidden)]
    pub orders: std::option::Option<std::vec::Vec<crate::model::Order>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListOrdersOutput {
    /// <p>Information about the orders.</p>
    pub fn orders(&self) -> std::option::Option<&[crate::model::Order]> {
        self.orders.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListOrdersOutput`](crate::output::ListOrdersOutput).
pub mod list_orders_output {

    /// A builder for [`ListOrdersOutput`](crate::output::ListOrdersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) orders: std::option::Option<std::vec::Vec<crate::model::Order>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `orders`.
        ///
        /// To override the contents of this collection use [`set_orders`](Self::set_orders).
        ///
        /// <p>Information about the orders.</p>
        pub fn orders(mut self, input: crate::model::Order) -> Self {
            let mut v = self.orders.unwrap_or_default();
            v.push(input);
            self.orders = Some(v);
            self
        }
        /// <p>Information about the orders.</p>
        pub fn set_orders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Order>>,
        ) -> Self {
            self.orders = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListOrdersOutput`](crate::output::ListOrdersOutput).
        pub fn build(self) -> crate::output::ListOrdersOutput {
            crate::output::ListOrdersOutput {
                orders: self.orders,
                next_token: self.next_token,
            }
        }
    }
}
impl ListOrdersOutput {
    /// Creates a new builder-style object to manufacture [`ListOrdersOutput`](crate::output::ListOrdersOutput).
    pub fn builder() -> crate::output::list_orders_output::Builder {
        crate::output::list_orders_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNetworkSitesOutput {
    /// <p>Information about the network sites.</p>
    #[doc(hidden)]
    pub network_sites: std::option::Option<std::vec::Vec<crate::model::NetworkSite>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListNetworkSitesOutput {
    /// <p>Information about the network sites.</p>
    pub fn network_sites(&self) -> std::option::Option<&[crate::model::NetworkSite]> {
        self.network_sites.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListNetworkSitesOutput`](crate::output::ListNetworkSitesOutput).
pub mod list_network_sites_output {

    /// A builder for [`ListNetworkSitesOutput`](crate::output::ListNetworkSitesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_sites: std::option::Option<std::vec::Vec<crate::model::NetworkSite>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `network_sites`.
        ///
        /// To override the contents of this collection use [`set_network_sites`](Self::set_network_sites).
        ///
        /// <p>Information about the network sites.</p>
        pub fn network_sites(mut self, input: crate::model::NetworkSite) -> Self {
            let mut v = self.network_sites.unwrap_or_default();
            v.push(input);
            self.network_sites = Some(v);
            self
        }
        /// <p>Information about the network sites.</p>
        pub fn set_network_sites(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkSite>>,
        ) -> Self {
            self.network_sites = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNetworkSitesOutput`](crate::output::ListNetworkSitesOutput).
        pub fn build(self) -> crate::output::ListNetworkSitesOutput {
            crate::output::ListNetworkSitesOutput {
                network_sites: self.network_sites,
                next_token: self.next_token,
            }
        }
    }
}
impl ListNetworkSitesOutput {
    /// Creates a new builder-style object to manufacture [`ListNetworkSitesOutput`](crate::output::ListNetworkSitesOutput).
    pub fn builder() -> crate::output::list_network_sites_output::Builder {
        crate::output::list_network_sites_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNetworksOutput {
    /// <p>The networks.</p>
    #[doc(hidden)]
    pub networks: std::option::Option<std::vec::Vec<crate::model::Network>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListNetworksOutput {
    /// <p>The networks.</p>
    pub fn networks(&self) -> std::option::Option<&[crate::model::Network]> {
        self.networks.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListNetworksOutput`](crate::output::ListNetworksOutput).
pub mod list_networks_output {

    /// A builder for [`ListNetworksOutput`](crate::output::ListNetworksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) networks: std::option::Option<std::vec::Vec<crate::model::Network>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `networks`.
        ///
        /// To override the contents of this collection use [`set_networks`](Self::set_networks).
        ///
        /// <p>The networks.</p>
        pub fn networks(mut self, input: crate::model::Network) -> Self {
            let mut v = self.networks.unwrap_or_default();
            v.push(input);
            self.networks = Some(v);
            self
        }
        /// <p>The networks.</p>
        pub fn set_networks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Network>>,
        ) -> Self {
            self.networks = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNetworksOutput`](crate::output::ListNetworksOutput).
        pub fn build(self) -> crate::output::ListNetworksOutput {
            crate::output::ListNetworksOutput {
                networks: self.networks,
                next_token: self.next_token,
            }
        }
    }
}
impl ListNetworksOutput {
    /// Creates a new builder-style object to manufacture [`ListNetworksOutput`](crate::output::ListNetworksOutput).
    pub fn builder() -> crate::output::list_networks_output::Builder {
        crate::output::list_networks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNetworkResourcesOutput {
    /// <p>Information about network resources.</p>
    #[doc(hidden)]
    pub network_resources: std::option::Option<std::vec::Vec<crate::model::NetworkResource>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListNetworkResourcesOutput {
    /// <p>Information about network resources.</p>
    pub fn network_resources(&self) -> std::option::Option<&[crate::model::NetworkResource]> {
        self.network_resources.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListNetworkResourcesOutput`](crate::output::ListNetworkResourcesOutput).
pub mod list_network_resources_output {

    /// A builder for [`ListNetworkResourcesOutput`](crate::output::ListNetworkResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_resources:
            std::option::Option<std::vec::Vec<crate::model::NetworkResource>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `network_resources`.
        ///
        /// To override the contents of this collection use [`set_network_resources`](Self::set_network_resources).
        ///
        /// <p>Information about network resources.</p>
        pub fn network_resources(mut self, input: crate::model::NetworkResource) -> Self {
            let mut v = self.network_resources.unwrap_or_default();
            v.push(input);
            self.network_resources = Some(v);
            self
        }
        /// <p>Information about network resources.</p>
        pub fn set_network_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkResource>>,
        ) -> Self {
            self.network_resources = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNetworkResourcesOutput`](crate::output::ListNetworkResourcesOutput).
        pub fn build(self) -> crate::output::ListNetworkResourcesOutput {
            crate::output::ListNetworkResourcesOutput {
                network_resources: self.network_resources,
                next_token: self.next_token,
            }
        }
    }
}
impl ListNetworkResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListNetworkResourcesOutput`](crate::output::ListNetworkResourcesOutput).
    pub fn builder() -> crate::output::list_network_resources_output::Builder {
        crate::output::list_network_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDeviceIdentifiersOutput {
    /// <p>Information about the device identifiers.</p>
    #[doc(hidden)]
    pub device_identifiers: std::option::Option<std::vec::Vec<crate::model::DeviceIdentifier>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDeviceIdentifiersOutput {
    /// <p>Information about the device identifiers.</p>
    pub fn device_identifiers(&self) -> std::option::Option<&[crate::model::DeviceIdentifier]> {
        self.device_identifiers.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListDeviceIdentifiersOutput`](crate::output::ListDeviceIdentifiersOutput).
pub mod list_device_identifiers_output {

    /// A builder for [`ListDeviceIdentifiersOutput`](crate::output::ListDeviceIdentifiersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_identifiers:
            std::option::Option<std::vec::Vec<crate::model::DeviceIdentifier>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `device_identifiers`.
        ///
        /// To override the contents of this collection use [`set_device_identifiers`](Self::set_device_identifiers).
        ///
        /// <p>Information about the device identifiers.</p>
        pub fn device_identifiers(mut self, input: crate::model::DeviceIdentifier) -> Self {
            let mut v = self.device_identifiers.unwrap_or_default();
            v.push(input);
            self.device_identifiers = Some(v);
            self
        }
        /// <p>Information about the device identifiers.</p>
        pub fn set_device_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeviceIdentifier>>,
        ) -> Self {
            self.device_identifiers = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDeviceIdentifiersOutput`](crate::output::ListDeviceIdentifiersOutput).
        pub fn build(self) -> crate::output::ListDeviceIdentifiersOutput {
            crate::output::ListDeviceIdentifiersOutput {
                device_identifiers: self.device_identifiers,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDeviceIdentifiersOutput {
    /// Creates a new builder-style object to manufacture [`ListDeviceIdentifiersOutput`](crate::output::ListDeviceIdentifiersOutput).
    pub fn builder() -> crate::output::list_device_identifiers_output::Builder {
        crate::output::list_device_identifiers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetOrderOutput {
    /// <p>Information about the order.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::model::Order>,
    /// <p> The order tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetOrderOutput {
    /// <p>Information about the order.</p>
    pub fn order(&self) -> std::option::Option<&crate::model::Order> {
        self.order.as_ref()
    }
    /// <p> The order tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetOrderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetOrderOutput");
        formatter.field("order", &self.order);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetOrderOutput`](crate::output::GetOrderOutput).
pub mod get_order_output {

    /// A builder for [`GetOrderOutput`](crate::output::GetOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) order: std::option::Option<crate::model::Order>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the order.</p>
        pub fn order(mut self, input: crate::model::Order) -> Self {
            self.order = Some(input);
            self
        }
        /// <p>Information about the order.</p>
        pub fn set_order(mut self, input: std::option::Option<crate::model::Order>) -> Self {
            self.order = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The order tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The order tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetOrderOutput`](crate::output::GetOrderOutput).
        pub fn build(self) -> crate::output::GetOrderOutput {
            crate::output::GetOrderOutput {
                order: self.order,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("order", &self.order);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl GetOrderOutput {
    /// Creates a new builder-style object to manufacture [`GetOrderOutput`](crate::output::GetOrderOutput).
    pub fn builder() -> crate::output::get_order_output::Builder {
        crate::output::get_order_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
    /// <p> The network site tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
    /// <p> The network site tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetNetworkSiteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNetworkSiteOutput");
        formatter.field("network_site", &self.network_site);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetNetworkSiteOutput`](crate::output::GetNetworkSiteOutput).
pub mod get_network_site_output {

    /// A builder for [`GetNetworkSiteOutput`](crate::output::GetNetworkSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network site tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network site tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkSiteOutput`](crate::output::GetNetworkSiteOutput).
        pub fn build(self) -> crate::output::GetNetworkSiteOutput {
            crate::output::GetNetworkSiteOutput {
                network_site: self.network_site,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network_site", &self.network_site);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl GetNetworkSiteOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkSiteOutput`](crate::output::GetNetworkSiteOutput).
    pub fn builder() -> crate::output::get_network_site_output::Builder {
        crate::output::get_network_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNetworkResourceOutput {
    /// <p>Information about the network resource.</p>
    #[doc(hidden)]
    pub network_resource: std::option::Option<crate::model::NetworkResource>,
    /// <p> The network resource tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetNetworkResourceOutput {
    /// <p>Information about the network resource.</p>
    pub fn network_resource(&self) -> std::option::Option<&crate::model::NetworkResource> {
        self.network_resource.as_ref()
    }
    /// <p> The network resource tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetNetworkResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNetworkResourceOutput");
        formatter.field("network_resource", &self.network_resource);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetNetworkResourceOutput`](crate::output::GetNetworkResourceOutput).
pub mod get_network_resource_output {

    /// A builder for [`GetNetworkResourceOutput`](crate::output::GetNetworkResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network_resource: std::option::Option<crate::model::NetworkResource>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network resource.</p>
        pub fn network_resource(mut self, input: crate::model::NetworkResource) -> Self {
            self.network_resource = Some(input);
            self
        }
        /// <p>Information about the network resource.</p>
        pub fn set_network_resource(
            mut self,
            input: std::option::Option<crate::model::NetworkResource>,
        ) -> Self {
            self.network_resource = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network resource tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network resource tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkResourceOutput`](crate::output::GetNetworkResourceOutput).
        pub fn build(self) -> crate::output::GetNetworkResourceOutput {
            crate::output::GetNetworkResourceOutput {
                network_resource: self.network_resource,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network_resource", &self.network_resource);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl GetNetworkResourceOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkResourceOutput`](crate::output::GetNetworkResourceOutput).
    pub fn builder() -> crate::output::get_network_resource_output::Builder {
        crate::output::get_network_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNetworkOutput {
    /// <p>Information about the network.</p>
    #[doc(hidden)]
    pub network: std::option::Option<crate::model::Network>,
    /// <p> The network tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetNetworkOutput {
    /// <p>Information about the network.</p>
    pub fn network(&self) -> std::option::Option<&crate::model::Network> {
        self.network.as_ref()
    }
    /// <p> The network tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetNetworkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNetworkOutput");
        formatter.field("network", &self.network);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetNetworkOutput`](crate::output::GetNetworkOutput).
pub mod get_network_output {

    /// A builder for [`GetNetworkOutput`](crate::output::GetNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network: std::option::Option<crate::model::Network>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network.</p>
        pub fn network(mut self, input: crate::model::Network) -> Self {
            self.network = Some(input);
            self
        }
        /// <p>Information about the network.</p>
        pub fn set_network(mut self, input: std::option::Option<crate::model::Network>) -> Self {
            self.network = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkOutput`](crate::output::GetNetworkOutput).
        pub fn build(self) -> crate::output::GetNetworkOutput {
            crate::output::GetNetworkOutput {
                network: self.network,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network", &self.network);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl GetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkOutput`](crate::output::GetNetworkOutput).
    pub fn builder() -> crate::output::get_network_output::Builder {
        crate::output::get_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    #[doc(hidden)]
    pub device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
    /// <p> The device identifier tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    pub fn device_identifier(&self) -> std::option::Option<&crate::model::DeviceIdentifier> {
        self.device_identifier.as_ref()
    }
    /// <p> The device identifier tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetDeviceIdentifierOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDeviceIdentifierOutput");
        formatter.field("device_identifier", &self.device_identifier);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetDeviceIdentifierOutput`](crate::output::GetDeviceIdentifierOutput).
pub mod get_device_identifier_output {

    /// A builder for [`GetDeviceIdentifierOutput`](crate::output::GetDeviceIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the device identifier.</p>
        pub fn device_identifier(mut self, input: crate::model::DeviceIdentifier) -> Self {
            self.device_identifier = Some(input);
            self
        }
        /// <p>Information about the device identifier.</p>
        pub fn set_device_identifier(
            mut self,
            input: std::option::Option<crate::model::DeviceIdentifier>,
        ) -> Self {
            self.device_identifier = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The device identifier tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The device identifier tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceIdentifierOutput`](crate::output::GetDeviceIdentifierOutput).
        pub fn build(self) -> crate::output::GetDeviceIdentifierOutput {
            crate::output::GetDeviceIdentifierOutput {
                device_identifier: self.device_identifier,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("device_identifier", &self.device_identifier);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl GetDeviceIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceIdentifierOutput`](crate::output::GetDeviceIdentifierOutput).
    pub fn builder() -> crate::output::get_device_identifier_output::Builder {
        crate::output::get_device_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
}
impl DeleteNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
}
/// See [`DeleteNetworkSiteOutput`](crate::output::DeleteNetworkSiteOutput).
pub mod delete_network_site_output {

    /// A builder for [`DeleteNetworkSiteOutput`](crate::output::DeleteNetworkSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkSiteOutput`](crate::output::DeleteNetworkSiteOutput).
        pub fn build(self) -> crate::output::DeleteNetworkSiteOutput {
            crate::output::DeleteNetworkSiteOutput {
                network_site: self.network_site,
            }
        }
    }
}
impl DeleteNetworkSiteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkSiteOutput`](crate::output::DeleteNetworkSiteOutput).
    pub fn builder() -> crate::output::delete_network_site_output::Builder {
        crate::output::delete_network_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkOutput {
    /// <p>Information about the network.</p>
    #[doc(hidden)]
    pub network: std::option::Option<crate::model::Network>,
}
impl DeleteNetworkOutput {
    /// <p>Information about the network.</p>
    pub fn network(&self) -> std::option::Option<&crate::model::Network> {
        self.network.as_ref()
    }
}
/// See [`DeleteNetworkOutput`](crate::output::DeleteNetworkOutput).
pub mod delete_network_output {

    /// A builder for [`DeleteNetworkOutput`](crate::output::DeleteNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network: std::option::Option<crate::model::Network>,
    }
    impl Builder {
        /// <p>Information about the network.</p>
        pub fn network(mut self, input: crate::model::Network) -> Self {
            self.network = Some(input);
            self
        }
        /// <p>Information about the network.</p>
        pub fn set_network(mut self, input: std::option::Option<crate::model::Network>) -> Self {
            self.network = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkOutput`](crate::output::DeleteNetworkOutput).
        pub fn build(self) -> crate::output::DeleteNetworkOutput {
            crate::output::DeleteNetworkOutput {
                network: self.network,
            }
        }
    }
}
impl DeleteNetworkOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkOutput`](crate::output::DeleteNetworkOutput).
    pub fn builder() -> crate::output::delete_network_output::Builder {
        crate::output::delete_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeactivateDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    #[doc(hidden)]
    pub device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
}
impl DeactivateDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    pub fn device_identifier(&self) -> std::option::Option<&crate::model::DeviceIdentifier> {
        self.device_identifier.as_ref()
    }
}
/// See [`DeactivateDeviceIdentifierOutput`](crate::output::DeactivateDeviceIdentifierOutput).
pub mod deactivate_device_identifier_output {

    /// A builder for [`DeactivateDeviceIdentifierOutput`](crate::output::DeactivateDeviceIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
    }
    impl Builder {
        /// <p>Information about the device identifier.</p>
        pub fn device_identifier(mut self, input: crate::model::DeviceIdentifier) -> Self {
            self.device_identifier = Some(input);
            self
        }
        /// <p>Information about the device identifier.</p>
        pub fn set_device_identifier(
            mut self,
            input: std::option::Option<crate::model::DeviceIdentifier>,
        ) -> Self {
            self.device_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeactivateDeviceIdentifierOutput`](crate::output::DeactivateDeviceIdentifierOutput).
        pub fn build(self) -> crate::output::DeactivateDeviceIdentifierOutput {
            crate::output::DeactivateDeviceIdentifierOutput {
                device_identifier: self.device_identifier,
            }
        }
    }
}
impl DeactivateDeviceIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`DeactivateDeviceIdentifierOutput`](crate::output::DeactivateDeviceIdentifierOutput).
    pub fn builder() -> crate::output::deactivate_device_identifier_output::Builder {
        crate::output::deactivate_device_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
    /// <p> The network site tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
    /// <p> The network site tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateNetworkSiteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkSiteOutput");
        formatter.field("network_site", &self.network_site);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`CreateNetworkSiteOutput`](crate::output::CreateNetworkSiteOutput).
pub mod create_network_site_output {

    /// A builder for [`CreateNetworkSiteOutput`](crate::output::CreateNetworkSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network site tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network site tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkSiteOutput`](crate::output::CreateNetworkSiteOutput).
        pub fn build(self) -> crate::output::CreateNetworkSiteOutput {
            crate::output::CreateNetworkSiteOutput {
                network_site: self.network_site,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network_site", &self.network_site);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl CreateNetworkSiteOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkSiteOutput`](crate::output::CreateNetworkSiteOutput).
    pub fn builder() -> crate::output::create_network_site_output::Builder {
        crate::output::create_network_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkOutput {
    /// <p>Information about the network.</p>
    #[doc(hidden)]
    pub network: std::option::Option<crate::model::Network>,
    /// <p> The network tags. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateNetworkOutput {
    /// <p>Information about the network.</p>
    pub fn network(&self) -> std::option::Option<&crate::model::Network> {
        self.network.as_ref()
    }
    /// <p> The network tags. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateNetworkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkOutput");
        formatter.field("network", &self.network);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`CreateNetworkOutput`](crate::output::CreateNetworkOutput).
pub mod create_network_output {

    /// A builder for [`CreateNetworkOutput`](crate::output::CreateNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) network: std::option::Option<crate::model::Network>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the network.</p>
        pub fn network(mut self, input: crate::model::Network) -> Self {
            self.network = Some(input);
            self
        }
        /// <p>Information about the network.</p>
        pub fn set_network(mut self, input: std::option::Option<crate::model::Network>) -> Self {
            self.network = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The network tags. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The network tags. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkOutput`](crate::output::CreateNetworkOutput).
        pub fn build(self) -> crate::output::CreateNetworkOutput {
            crate::output::CreateNetworkOutput {
                network: self.network,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("network", &self.network);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl CreateNetworkOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkOutput`](crate::output::CreateNetworkOutput).
    pub fn builder() -> crate::output::create_network_output::Builder {
        crate::output::create_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigureAccessPointOutput {
    /// <p>Information about the network resource.</p>
    #[doc(hidden)]
    pub access_point: std::option::Option<crate::model::NetworkResource>,
}
impl ConfigureAccessPointOutput {
    /// <p>Information about the network resource.</p>
    pub fn access_point(&self) -> std::option::Option<&crate::model::NetworkResource> {
        self.access_point.as_ref()
    }
}
/// See [`ConfigureAccessPointOutput`](crate::output::ConfigureAccessPointOutput).
pub mod configure_access_point_output {

    /// A builder for [`ConfigureAccessPointOutput`](crate::output::ConfigureAccessPointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_point: std::option::Option<crate::model::NetworkResource>,
    }
    impl Builder {
        /// <p>Information about the network resource.</p>
        pub fn access_point(mut self, input: crate::model::NetworkResource) -> Self {
            self.access_point = Some(input);
            self
        }
        /// <p>Information about the network resource.</p>
        pub fn set_access_point(
            mut self,
            input: std::option::Option<crate::model::NetworkResource>,
        ) -> Self {
            self.access_point = input;
            self
        }
        /// Consumes the builder and constructs a [`ConfigureAccessPointOutput`](crate::output::ConfigureAccessPointOutput).
        pub fn build(self) -> crate::output::ConfigureAccessPointOutput {
            crate::output::ConfigureAccessPointOutput {
                access_point: self.access_point,
            }
        }
    }
}
impl ConfigureAccessPointOutput {
    /// Creates a new builder-style object to manufacture [`ConfigureAccessPointOutput`](crate::output::ConfigureAccessPointOutput).
    pub fn builder() -> crate::output::configure_access_point_output::Builder {
        crate::output::configure_access_point_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActivateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    #[doc(hidden)]
    pub network_site: std::option::Option<crate::model::NetworkSite>,
}
impl ActivateNetworkSiteOutput {
    /// <p>Information about the network site.</p>
    pub fn network_site(&self) -> std::option::Option<&crate::model::NetworkSite> {
        self.network_site.as_ref()
    }
}
/// See [`ActivateNetworkSiteOutput`](crate::output::ActivateNetworkSiteOutput).
pub mod activate_network_site_output {

    /// A builder for [`ActivateNetworkSiteOutput`](crate::output::ActivateNetworkSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_site: std::option::Option<crate::model::NetworkSite>,
    }
    impl Builder {
        /// <p>Information about the network site.</p>
        pub fn network_site(mut self, input: crate::model::NetworkSite) -> Self {
            self.network_site = Some(input);
            self
        }
        /// <p>Information about the network site.</p>
        pub fn set_network_site(
            mut self,
            input: std::option::Option<crate::model::NetworkSite>,
        ) -> Self {
            self.network_site = input;
            self
        }
        /// Consumes the builder and constructs a [`ActivateNetworkSiteOutput`](crate::output::ActivateNetworkSiteOutput).
        pub fn build(self) -> crate::output::ActivateNetworkSiteOutput {
            crate::output::ActivateNetworkSiteOutput {
                network_site: self.network_site,
            }
        }
    }
}
impl ActivateNetworkSiteOutput {
    /// Creates a new builder-style object to manufacture [`ActivateNetworkSiteOutput`](crate::output::ActivateNetworkSiteOutput).
    pub fn builder() -> crate::output::activate_network_site_output::Builder {
        crate::output::activate_network_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ActivateDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    #[doc(hidden)]
    pub device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
    /// <p> The tags on the device identifier. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ActivateDeviceIdentifierOutput {
    /// <p>Information about the device identifier.</p>
    pub fn device_identifier(&self) -> std::option::Option<&crate::model::DeviceIdentifier> {
        self.device_identifier.as_ref()
    }
    /// <p> The tags on the device identifier. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ActivateDeviceIdentifierOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ActivateDeviceIdentifierOutput");
        formatter.field("device_identifier", &self.device_identifier);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ActivateDeviceIdentifierOutput`](crate::output::ActivateDeviceIdentifierOutput).
pub mod activate_device_identifier_output {

    /// A builder for [`ActivateDeviceIdentifierOutput`](crate::output::ActivateDeviceIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) device_identifier: std::option::Option<crate::model::DeviceIdentifier>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Information about the device identifier.</p>
        pub fn device_identifier(mut self, input: crate::model::DeviceIdentifier) -> Self {
            self.device_identifier = Some(input);
            self
        }
        /// <p>Information about the device identifier.</p>
        pub fn set_device_identifier(
            mut self,
            input: std::option::Option<crate::model::DeviceIdentifier>,
        ) -> Self {
            self.device_identifier = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The tags on the device identifier. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The tags on the device identifier. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ActivateDeviceIdentifierOutput`](crate::output::ActivateDeviceIdentifierOutput).
        pub fn build(self) -> crate::output::ActivateDeviceIdentifierOutput {
            crate::output::ActivateDeviceIdentifierOutput {
                device_identifier: self.device_identifier,
                tags: self.tags,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("device_identifier", &self.device_identifier);
            formatter.field("tags", &"*** Sensitive Data Redacted ***");
            formatter.finish()
        }
    }
}
impl ActivateDeviceIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`ActivateDeviceIdentifierOutput`](crate::output::ActivateDeviceIdentifierOutput).
    pub fn builder() -> crate::output::activate_device_identifier_output::Builder {
        crate::output::activate_device_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcknowledgeOrderReceiptOutput {
    /// <p>Information about the order.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::model::Order>,
}
impl AcknowledgeOrderReceiptOutput {
    /// <p>Information about the order.</p>
    pub fn order(&self) -> std::option::Option<&crate::model::Order> {
        self.order.as_ref()
    }
}
/// See [`AcknowledgeOrderReceiptOutput`](crate::output::AcknowledgeOrderReceiptOutput).
pub mod acknowledge_order_receipt_output {

    /// A builder for [`AcknowledgeOrderReceiptOutput`](crate::output::AcknowledgeOrderReceiptOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) order: std::option::Option<crate::model::Order>,
    }
    impl Builder {
        /// <p>Information about the order.</p>
        pub fn order(mut self, input: crate::model::Order) -> Self {
            self.order = Some(input);
            self
        }
        /// <p>Information about the order.</p>
        pub fn set_order(mut self, input: std::option::Option<crate::model::Order>) -> Self {
            self.order = input;
            self
        }
        /// Consumes the builder and constructs a [`AcknowledgeOrderReceiptOutput`](crate::output::AcknowledgeOrderReceiptOutput).
        pub fn build(self) -> crate::output::AcknowledgeOrderReceiptOutput {
            crate::output::AcknowledgeOrderReceiptOutput { order: self.order }
        }
    }
}
impl AcknowledgeOrderReceiptOutput {
    /// Creates a new builder-style object to manufacture [`AcknowledgeOrderReceiptOutput`](crate::output::AcknowledgeOrderReceiptOutput).
    pub fn builder() -> crate::output::acknowledge_order_receipt_output::Builder {
        crate::output::acknowledge_order_receipt_output::Builder::default()
    }
}
