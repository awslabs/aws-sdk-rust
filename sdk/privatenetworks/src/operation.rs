// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AcknowledgeOrderReceipt`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`acknowledge_order_receipt`](crate::client::fluent_builders::AcknowledgeOrderReceipt).
///
/// `ParseStrictResponse` impl for `AcknowledgeOrderReceipt`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AcknowledgeOrderReceipt {
    _private: (),
}
impl AcknowledgeOrderReceipt {
    /// Creates a new builder-style object to manufacture [`AcknowledgeOrderReceiptInput`](crate::input::AcknowledgeOrderReceiptInput).
    pub fn builder() -> crate::input::acknowledge_order_receipt_input::Builder {
        crate::input::acknowledge_order_receipt_input::Builder::default()
    }
    /// Creates a new `AcknowledgeOrderReceipt` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AcknowledgeOrderReceipt {
    type Output = std::result::Result<
        crate::output::AcknowledgeOrderReceiptOutput,
        crate::error::AcknowledgeOrderReceiptError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_acknowledge_order_receipt::de_acknowledge_order_receipt_http_error(response)
        } else {
            crate::protocol_serde::shape_acknowledge_order_receipt::de_acknowledge_order_receipt_http_response(response)
        }
    }
}

/// Operation shape for `ActivateDeviceIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`activate_device_identifier`](crate::client::fluent_builders::ActivateDeviceIdentifier).
///
/// `ParseStrictResponse` impl for `ActivateDeviceIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ActivateDeviceIdentifier {
    _private: (),
}
impl ActivateDeviceIdentifier {
    /// Creates a new builder-style object to manufacture [`ActivateDeviceIdentifierInput`](crate::input::ActivateDeviceIdentifierInput).
    pub fn builder() -> crate::input::activate_device_identifier_input::Builder {
        crate::input::activate_device_identifier_input::Builder::default()
    }
    /// Creates a new `ActivateDeviceIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ActivateDeviceIdentifier {
    type Output = std::result::Result<
        crate::output::ActivateDeviceIdentifierOutput,
        crate::error::ActivateDeviceIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_activate_device_identifier::de_activate_device_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_activate_device_identifier::de_activate_device_identifier_http_response(response)
        }
    }
}

/// Operation shape for `ActivateNetworkSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`activate_network_site`](crate::client::fluent_builders::ActivateNetworkSite).
///
/// `ParseStrictResponse` impl for `ActivateNetworkSite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ActivateNetworkSite {
    _private: (),
}
impl ActivateNetworkSite {
    /// Creates a new builder-style object to manufacture [`ActivateNetworkSiteInput`](crate::input::ActivateNetworkSiteInput).
    pub fn builder() -> crate::input::activate_network_site_input::Builder {
        crate::input::activate_network_site_input::Builder::default()
    }
    /// Creates a new `ActivateNetworkSite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ActivateNetworkSite {
    type Output = std::result::Result<
        crate::output::ActivateNetworkSiteOutput,
        crate::error::ActivateNetworkSiteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_activate_network_site::de_activate_network_site_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_activate_network_site::de_activate_network_site_http_response(response)
        }
    }
}

/// Operation shape for `ConfigureAccessPoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`configure_access_point`](crate::client::fluent_builders::ConfigureAccessPoint).
///
/// `ParseStrictResponse` impl for `ConfigureAccessPoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ConfigureAccessPoint {
    _private: (),
}
impl ConfigureAccessPoint {
    /// Creates a new builder-style object to manufacture [`ConfigureAccessPointInput`](crate::input::ConfigureAccessPointInput).
    pub fn builder() -> crate::input::configure_access_point_input::Builder {
        crate::input::configure_access_point_input::Builder::default()
    }
    /// Creates a new `ConfigureAccessPoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfigureAccessPoint {
    type Output = std::result::Result<
        crate::output::ConfigureAccessPointOutput,
        crate::error::ConfigureAccessPointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_configure_access_point::de_configure_access_point_http_error(response)
        } else {
            crate::protocol_serde::shape_configure_access_point::de_configure_access_point_http_response(response)
        }
    }
}

/// Operation shape for `CreateNetwork`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_network`](crate::client::fluent_builders::CreateNetwork).
///
/// `ParseStrictResponse` impl for `CreateNetwork`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNetwork {
    _private: (),
}
impl CreateNetwork {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInput`](crate::input::CreateNetworkInput).
    pub fn builder() -> crate::input::create_network_input::Builder {
        crate::input::create_network_input::Builder::default()
    }
    /// Creates a new `CreateNetwork` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNetwork {
    type Output =
        std::result::Result<crate::output::CreateNetworkOutput, crate::error::CreateNetworkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_network::de_create_network_http_error(response)
        } else {
            crate::protocol_serde::shape_create_network::de_create_network_http_response(response)
        }
    }
}

/// Operation shape for `CreateNetworkSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_network_site`](crate::client::fluent_builders::CreateNetworkSite).
///
/// `ParseStrictResponse` impl for `CreateNetworkSite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNetworkSite {
    _private: (),
}
impl CreateNetworkSite {
    /// Creates a new builder-style object to manufacture [`CreateNetworkSiteInput`](crate::input::CreateNetworkSiteInput).
    pub fn builder() -> crate::input::create_network_site_input::Builder {
        crate::input::create_network_site_input::Builder::default()
    }
    /// Creates a new `CreateNetworkSite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNetworkSite {
    type Output = std::result::Result<
        crate::output::CreateNetworkSiteOutput,
        crate::error::CreateNetworkSiteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_network_site::de_create_network_site_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_network_site::de_create_network_site_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeactivateDeviceIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`deactivate_device_identifier`](crate::client::fluent_builders::DeactivateDeviceIdentifier).
///
/// `ParseStrictResponse` impl for `DeactivateDeviceIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeactivateDeviceIdentifier {
    _private: (),
}
impl DeactivateDeviceIdentifier {
    /// Creates a new builder-style object to manufacture [`DeactivateDeviceIdentifierInput`](crate::input::DeactivateDeviceIdentifierInput).
    pub fn builder() -> crate::input::deactivate_device_identifier_input::Builder {
        crate::input::deactivate_device_identifier_input::Builder::default()
    }
    /// Creates a new `DeactivateDeviceIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeactivateDeviceIdentifier {
    type Output = std::result::Result<
        crate::output::DeactivateDeviceIdentifierOutput,
        crate::error::DeactivateDeviceIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_deactivate_device_identifier::de_deactivate_device_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_deactivate_device_identifier::de_deactivate_device_identifier_http_response(response)
        }
    }
}

/// Operation shape for `DeleteNetwork`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_network`](crate::client::fluent_builders::DeleteNetwork).
///
/// `ParseStrictResponse` impl for `DeleteNetwork`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNetwork {
    _private: (),
}
impl DeleteNetwork {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInput`](crate::input::DeleteNetworkInput).
    pub fn builder() -> crate::input::delete_network_input::Builder {
        crate::input::delete_network_input::Builder::default()
    }
    /// Creates a new `DeleteNetwork` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNetwork {
    type Output =
        std::result::Result<crate::output::DeleteNetworkOutput, crate::error::DeleteNetworkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_network::de_delete_network_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_network::de_delete_network_http_response(response)
        }
    }
}

/// Operation shape for `DeleteNetworkSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_network_site`](crate::client::fluent_builders::DeleteNetworkSite).
///
/// `ParseStrictResponse` impl for `DeleteNetworkSite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNetworkSite {
    _private: (),
}
impl DeleteNetworkSite {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkSiteInput`](crate::input::DeleteNetworkSiteInput).
    pub fn builder() -> crate::input::delete_network_site_input::Builder {
        crate::input::delete_network_site_input::Builder::default()
    }
    /// Creates a new `DeleteNetworkSite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNetworkSite {
    type Output = std::result::Result<
        crate::output::DeleteNetworkSiteOutput,
        crate::error::DeleteNetworkSiteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_network_site::de_delete_network_site_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_network_site::de_delete_network_site_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetDeviceIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_device_identifier`](crate::client::fluent_builders::GetDeviceIdentifier).
///
/// `ParseStrictResponse` impl for `GetDeviceIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceIdentifier {
    _private: (),
}
impl GetDeviceIdentifier {
    /// Creates a new builder-style object to manufacture [`GetDeviceIdentifierInput`](crate::input::GetDeviceIdentifierInput).
    pub fn builder() -> crate::input::get_device_identifier_input::Builder {
        crate::input::get_device_identifier_input::Builder::default()
    }
    /// Creates a new `GetDeviceIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDeviceIdentifier {
    type Output = std::result::Result<
        crate::output::GetDeviceIdentifierOutput,
        crate::error::GetDeviceIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_device_identifier::de_get_device_identifier_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_device_identifier::de_get_device_identifier_http_response(response)
        }
    }
}

/// Operation shape for `GetNetwork`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_network`](crate::client::fluent_builders::GetNetwork).
///
/// `ParseStrictResponse` impl for `GetNetwork`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNetwork {
    _private: (),
}
impl GetNetwork {
    /// Creates a new builder-style object to manufacture [`GetNetworkInput`](crate::input::GetNetworkInput).
    pub fn builder() -> crate::input::get_network_input::Builder {
        crate::input::get_network_input::Builder::default()
    }
    /// Creates a new `GetNetwork` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNetwork {
    type Output =
        std::result::Result<crate::output::GetNetworkOutput, crate::error::GetNetworkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_network::de_get_network_http_error(response)
        } else {
            crate::protocol_serde::shape_get_network::de_get_network_http_response(response)
        }
    }
}

/// Operation shape for `GetNetworkResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_network_resource`](crate::client::fluent_builders::GetNetworkResource).
///
/// `ParseStrictResponse` impl for `GetNetworkResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNetworkResource {
    _private: (),
}
impl GetNetworkResource {
    /// Creates a new builder-style object to manufacture [`GetNetworkResourceInput`](crate::input::GetNetworkResourceInput).
    pub fn builder() -> crate::input::get_network_resource_input::Builder {
        crate::input::get_network_resource_input::Builder::default()
    }
    /// Creates a new `GetNetworkResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNetworkResource {
    type Output = std::result::Result<
        crate::output::GetNetworkResourceOutput,
        crate::error::GetNetworkResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_network_resource::de_get_network_resource_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_network_resource::de_get_network_resource_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetNetworkSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_network_site`](crate::client::fluent_builders::GetNetworkSite).
///
/// `ParseStrictResponse` impl for `GetNetworkSite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNetworkSite {
    _private: (),
}
impl GetNetworkSite {
    /// Creates a new builder-style object to manufacture [`GetNetworkSiteInput`](crate::input::GetNetworkSiteInput).
    pub fn builder() -> crate::input::get_network_site_input::Builder {
        crate::input::get_network_site_input::Builder::default()
    }
    /// Creates a new `GetNetworkSite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNetworkSite {
    type Output =
        std::result::Result<crate::output::GetNetworkSiteOutput, crate::error::GetNetworkSiteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_network_site::de_get_network_site_http_error(response)
        } else {
            crate::protocol_serde::shape_get_network_site::de_get_network_site_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetOrder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_order`](crate::client::fluent_builders::GetOrder).
///
/// `ParseStrictResponse` impl for `GetOrder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetOrder {
    _private: (),
}
impl GetOrder {
    /// Creates a new builder-style object to manufacture [`GetOrderInput`](crate::input::GetOrderInput).
    pub fn builder() -> crate::input::get_order_input::Builder {
        crate::input::get_order_input::Builder::default()
    }
    /// Creates a new `GetOrder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetOrder {
    type Output = std::result::Result<crate::output::GetOrderOutput, crate::error::GetOrderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_order::de_get_order_http_error(response)
        } else {
            crate::protocol_serde::shape_get_order::de_get_order_http_response(response)
        }
    }
}

/// Operation shape for `ListDeviceIdentifiers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_device_identifiers`](crate::client::fluent_builders::ListDeviceIdentifiers).
///
/// `ParseStrictResponse` impl for `ListDeviceIdentifiers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDeviceIdentifiers {
    _private: (),
}
impl ListDeviceIdentifiers {
    /// Creates a new builder-style object to manufacture [`ListDeviceIdentifiersInput`](crate::input::ListDeviceIdentifiersInput).
    pub fn builder() -> crate::input::list_device_identifiers_input::Builder {
        crate::input::list_device_identifiers_input::Builder::default()
    }
    /// Creates a new `ListDeviceIdentifiers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDeviceIdentifiers {
    type Output = std::result::Result<
        crate::output::ListDeviceIdentifiersOutput,
        crate::error::ListDeviceIdentifiersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_device_identifiers::de_list_device_identifiers_http_error(response)
        } else {
            crate::protocol_serde::shape_list_device_identifiers::de_list_device_identifiers_http_response(response)
        }
    }
}

/// Operation shape for `ListNetworkResources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_network_resources`](crate::client::fluent_builders::ListNetworkResources).
///
/// `ParseStrictResponse` impl for `ListNetworkResources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNetworkResources {
    _private: (),
}
impl ListNetworkResources {
    /// Creates a new builder-style object to manufacture [`ListNetworkResourcesInput`](crate::input::ListNetworkResourcesInput).
    pub fn builder() -> crate::input::list_network_resources_input::Builder {
        crate::input::list_network_resources_input::Builder::default()
    }
    /// Creates a new `ListNetworkResources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNetworkResources {
    type Output = std::result::Result<
        crate::output::ListNetworkResourcesOutput,
        crate::error::ListNetworkResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_network_resources::de_list_network_resources_http_error(response)
        } else {
            crate::protocol_serde::shape_list_network_resources::de_list_network_resources_http_response(response)
        }
    }
}

/// Operation shape for `ListNetworks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_networks`](crate::client::fluent_builders::ListNetworks).
///
/// `ParseStrictResponse` impl for `ListNetworks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNetworks {
    _private: (),
}
impl ListNetworks {
    /// Creates a new builder-style object to manufacture [`ListNetworksInput`](crate::input::ListNetworksInput).
    pub fn builder() -> crate::input::list_networks_input::Builder {
        crate::input::list_networks_input::Builder::default()
    }
    /// Creates a new `ListNetworks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNetworks {
    type Output =
        std::result::Result<crate::output::ListNetworksOutput, crate::error::ListNetworksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_networks::de_list_networks_http_error(response)
        } else {
            crate::protocol_serde::shape_list_networks::de_list_networks_http_response(response)
        }
    }
}

/// Operation shape for `ListNetworkSites`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_network_sites`](crate::client::fluent_builders::ListNetworkSites).
///
/// `ParseStrictResponse` impl for `ListNetworkSites`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNetworkSites {
    _private: (),
}
impl ListNetworkSites {
    /// Creates a new builder-style object to manufacture [`ListNetworkSitesInput`](crate::input::ListNetworkSitesInput).
    pub fn builder() -> crate::input::list_network_sites_input::Builder {
        crate::input::list_network_sites_input::Builder::default()
    }
    /// Creates a new `ListNetworkSites` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNetworkSites {
    type Output = std::result::Result<
        crate::output::ListNetworkSitesOutput,
        crate::error::ListNetworkSitesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_network_sites::de_list_network_sites_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_network_sites::de_list_network_sites_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListOrders`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_orders`](crate::client::fluent_builders::ListOrders).
///
/// `ParseStrictResponse` impl for `ListOrders`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListOrders {
    _private: (),
}
impl ListOrders {
    /// Creates a new builder-style object to manufacture [`ListOrdersInput`](crate::input::ListOrdersInput).
    pub fn builder() -> crate::input::list_orders_input::Builder {
        crate::input::list_orders_input::Builder::default()
    }
    /// Creates a new `ListOrders` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListOrders {
    type Output =
        std::result::Result<crate::output::ListOrdersOutput, crate::error::ListOrdersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_orders::de_list_orders_http_error(response)
        } else {
            crate::protocol_serde::shape_list_orders::de_list_orders_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `Ping`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`ping`](crate::client::fluent_builders::Ping).
///
/// `ParseStrictResponse` impl for `Ping`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct Ping {
    _private: (),
}
impl Ping {
    /// Creates a new builder-style object to manufacture [`PingInput`](crate::input::PingInput).
    pub fn builder() -> crate::input::ping_input::Builder {
        crate::input::ping_input::Builder::default()
    }
    /// Creates a new `Ping` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for Ping {
    type Output = std::result::Result<crate::output::PingOutput, crate::error::PingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_ping::de_ping_http_error(response)
        } else {
            crate::protocol_serde::shape_ping::de_ping_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateNetworkSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_network_site`](crate::client::fluent_builders::UpdateNetworkSite).
///
/// `ParseStrictResponse` impl for `UpdateNetworkSite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateNetworkSite {
    _private: (),
}
impl UpdateNetworkSite {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSiteInput`](crate::input::UpdateNetworkSiteInput).
    pub fn builder() -> crate::input::update_network_site_input::Builder {
        crate::input::update_network_site_input::Builder::default()
    }
    /// Creates a new `UpdateNetworkSite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNetworkSite {
    type Output = std::result::Result<
        crate::output::UpdateNetworkSiteOutput,
        crate::error::UpdateNetworkSiteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_network_site::de_update_network_site_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_network_site::de_update_network_site_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateNetworkSitePlan`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_network_site_plan`](crate::client::fluent_builders::UpdateNetworkSitePlan).
///
/// `ParseStrictResponse` impl for `UpdateNetworkSitePlan`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateNetworkSitePlan {
    _private: (),
}
impl UpdateNetworkSitePlan {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSitePlanInput`](crate::input::UpdateNetworkSitePlanInput).
    pub fn builder() -> crate::input::update_network_site_plan_input::Builder {
        crate::input::update_network_site_plan_input::Builder::default()
    }
    /// Creates a new `UpdateNetworkSitePlan` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNetworkSitePlan {
    type Output = std::result::Result<
        crate::output::UpdateNetworkSitePlanOutput,
        crate::error::UpdateNetworkSitePlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_network_site_plan::de_update_network_site_plan_http_error(response)
        } else {
            crate::protocol_serde::shape_update_network_site_plan::de_update_network_site_plan_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
