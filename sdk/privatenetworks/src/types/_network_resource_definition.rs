// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a network resource definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkResourceDefinition {
    /// <p>The type in the network resource definition.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::NetworkResourceDefinitionType>,
    /// <p>The options in the network resource definition.</p>
    #[doc(hidden)]
    pub options: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    /// <p>The count in the network resource definition.</p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl NetworkResourceDefinition {
    /// <p>The type in the network resource definition.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::NetworkResourceDefinitionType> {
        self.r#type.as_ref()
    }
    /// <p>The options in the network resource definition.</p>
    pub fn options(&self) -> std::option::Option<&[crate::types::NameValuePair]> {
        self.options.as_deref()
    }
    /// <p>The count in the network resource definition.</p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl NetworkResourceDefinition {
    /// Creates a new builder-style object to manufacture [`NetworkResourceDefinition`](crate::types::NetworkResourceDefinition).
    pub fn builder() -> crate::types::builders::NetworkResourceDefinitionBuilder {
        crate::types::builders::NetworkResourceDefinitionBuilder::default()
    }
}

/// A builder for [`NetworkResourceDefinition`](crate::types::NetworkResourceDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkResourceDefinitionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::NetworkResourceDefinitionType>,
    pub(crate) options: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    pub(crate) count: std::option::Option<i32>,
}
impl NetworkResourceDefinitionBuilder {
    /// <p>The type in the network resource definition.</p>
    pub fn r#type(mut self, input: crate::types::NetworkResourceDefinitionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type in the network resource definition.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::NetworkResourceDefinitionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The options in the network resource definition.</p>
    pub fn options(mut self, input: crate::types::NameValuePair) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = Some(v);
        self
    }
    /// <p>The options in the network resource definition.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    ) -> Self {
        self.options = input;
        self
    }
    /// <p>The count in the network resource definition.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The count in the network resource definition.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkResourceDefinition`](crate::types::NetworkResourceDefinition).
    pub fn build(self) -> crate::types::NetworkResourceDefinition {
        crate::types::NetworkResourceDefinition {
            r#type: self.r#type,
            options: self.options,
            count: self.count,
        }
    }
}
