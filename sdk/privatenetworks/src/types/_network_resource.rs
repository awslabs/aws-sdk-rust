// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a network resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkResource {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    #[doc(hidden)]
    pub network_resource_arn: std::option::Option<std::string::String>,
    /// <p>The description of the network resource.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of the network resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::NetworkResourceType>,
    /// <p>The status of the network resource.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NetworkResourceStatus>,
    /// <p>The status reason of the network resource.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>The vendor of the network resource.</p>
    #[doc(hidden)]
    pub vendor: std::option::Option<std::string::String>,
    /// <p>The model of the network resource.</p>
    #[doc(hidden)]
    pub model: std::option::Option<std::string::String>,
    /// <p>The serial number of the network resource.</p>
    #[doc(hidden)]
    pub serial_number: std::option::Option<std::string::String>,
    /// <p>The health of the network resource.</p>
    #[doc(hidden)]
    pub health: std::option::Option<crate::types::HealthStatus>,
    /// <p>The Amazon Resource Name (ARN) of the network on which this network resource appears.</p>
    #[doc(hidden)]
    pub network_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the network site on which this network resource appears.</p>
    #[doc(hidden)]
    pub network_site_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase this network resource.</p>
    #[doc(hidden)]
    pub order_arn: std::option::Option<std::string::String>,
    /// <p>The attributes of the network resource.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    /// <p>The position of the network resource.</p>
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::Position>,
    /// <p>The creation time of the network resource.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl NetworkResource {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn network_resource_arn(&self) -> std::option::Option<&str> {
        self.network_resource_arn.as_deref()
    }
    /// <p>The description of the network resource.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of the network resource.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::NetworkResourceType> {
        self.r#type.as_ref()
    }
    /// <p>The status of the network resource.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NetworkResourceStatus> {
        self.status.as_ref()
    }
    /// <p>The status reason of the network resource.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The vendor of the network resource.</p>
    pub fn vendor(&self) -> std::option::Option<&str> {
        self.vendor.as_deref()
    }
    /// <p>The model of the network resource.</p>
    pub fn model(&self) -> std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The serial number of the network resource.</p>
    pub fn serial_number(&self) -> std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>The health of the network resource.</p>
    pub fn health(&self) -> std::option::Option<&crate::types::HealthStatus> {
        self.health.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which this network resource appears.</p>
    pub fn network_arn(&self) -> std::option::Option<&str> {
        self.network_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the network site on which this network resource appears.</p>
    pub fn network_site_arn(&self) -> std::option::Option<&str> {
        self.network_site_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase this network resource.</p>
    pub fn order_arn(&self) -> std::option::Option<&str> {
        self.order_arn.as_deref()
    }
    /// <p>The attributes of the network resource.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::NameValuePair]> {
        self.attributes.as_deref()
    }
    /// <p>The position of the network resource.</p>
    pub fn position(&self) -> std::option::Option<&crate::types::Position> {
        self.position.as_ref()
    }
    /// <p>The creation time of the network resource.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl NetworkResource {
    /// Creates a new builder-style object to manufacture [`NetworkResource`](crate::types::NetworkResource).
    pub fn builder() -> crate::types::builders::NetworkResourceBuilder {
        crate::types::builders::NetworkResourceBuilder::default()
    }
}

/// A builder for [`NetworkResource`](crate::types::NetworkResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkResourceBuilder {
    pub(crate) network_resource_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::NetworkResourceType>,
    pub(crate) status: std::option::Option<crate::types::NetworkResourceStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) vendor: std::option::Option<std::string::String>,
    pub(crate) model: std::option::Option<std::string::String>,
    pub(crate) serial_number: std::option::Option<std::string::String>,
    pub(crate) health: std::option::Option<crate::types::HealthStatus>,
    pub(crate) network_arn: std::option::Option<std::string::String>,
    pub(crate) network_site_arn: std::option::Option<std::string::String>,
    pub(crate) order_arn: std::option::Option<std::string::String>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    pub(crate) position: std::option::Option<crate::types::Position>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl NetworkResourceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn network_resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn set_network_resource_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_resource_arn = input;
        self
    }
    /// <p>The description of the network resource.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the network resource.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of the network resource.</p>
    pub fn r#type(mut self, input: crate::types::NetworkResourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the network resource.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::NetworkResourceType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The status of the network resource.</p>
    pub fn status(mut self, input: crate::types::NetworkResourceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the network resource.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::NetworkResourceStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The status reason of the network resource.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The status reason of the network resource.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The vendor of the network resource.</p>
    pub fn vendor(mut self, input: impl Into<std::string::String>) -> Self {
        self.vendor = Some(input.into());
        self
    }
    /// <p>The vendor of the network resource.</p>
    pub fn set_vendor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vendor = input;
        self
    }
    /// <p>The model of the network resource.</p>
    pub fn model(mut self, input: impl Into<std::string::String>) -> Self {
        self.model = Some(input.into());
        self
    }
    /// <p>The model of the network resource.</p>
    pub fn set_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>The serial number of the network resource.</p>
    pub fn serial_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.serial_number = Some(input.into());
        self
    }
    /// <p>The serial number of the network resource.</p>
    pub fn set_serial_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>The health of the network resource.</p>
    pub fn health(mut self, input: crate::types::HealthStatus) -> Self {
        self.health = Some(input);
        self
    }
    /// <p>The health of the network resource.</p>
    pub fn set_health(mut self, input: std::option::Option<crate::types::HealthStatus>) -> Self {
        self.health = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which this network resource appears.</p>
    pub fn network_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which this network resource appears.</p>
    pub fn set_network_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network site on which this network resource appears.</p>
    pub fn network_site_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_site_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network site on which this network resource appears.</p>
    pub fn set_network_site_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_site_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase this network resource.</p>
    pub fn order_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.order_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase this network resource.</p>
    pub fn set_order_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.order_arn = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The attributes of the network resource.</p>
    pub fn attributes(mut self, input: crate::types::NameValuePair) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>The attributes of the network resource.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The position of the network resource.</p>
    pub fn position(mut self, input: crate::types::Position) -> Self {
        self.position = Some(input);
        self
    }
    /// <p>The position of the network resource.</p>
    pub fn set_position(mut self, input: std::option::Option<crate::types::Position>) -> Self {
        self.position = input;
        self
    }
    /// <p>The creation time of the network resource.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The creation time of the network resource.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkResource`](crate::types::NetworkResource).
    pub fn build(self) -> crate::types::NetworkResource {
        crate::types::NetworkResource {
            network_resource_arn: self.network_resource_arn,
            description: self.description,
            r#type: self.r#type,
            status: self.status,
            status_reason: self.status_reason,
            vendor: self.vendor,
            model: self.model,
            serial_number: self.serial_number,
            health: self.health,
            network_arn: self.network_arn,
            network_site_arn: self.network_site_arn,
            order_arn: self.order_arn,
            attributes: self.attributes,
            position: self.position,
            created_at: self.created_at,
        }
    }
}
