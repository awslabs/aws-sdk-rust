// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an address.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Address {
    /// <p>The city for this address.</p>
    pub city: ::std::string::String,
    /// <p>The company name for this address.</p>
    pub company: ::std::option::Option<::std::string::String>,
    /// <p>The country for this address.</p>
    pub country: ::std::string::String,
    /// <p>The recipient's name for this address.</p>
    pub name: ::std::string::String,
    /// <p>The recipient's phone number.</p>
    pub phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The postal code for this address.</p>
    pub postal_code: ::std::string::String,
    /// <p>The state or province for this address.</p>
    pub state_or_province: ::std::string::String,
    /// <p>The first line of the street address.</p>
    pub street1: ::std::string::String,
    /// <p>The second line of the street address.</p>
    pub street2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of the street address.</p>
    pub street3: ::std::option::Option<::std::string::String>,
    /// <p>The recipient's email address.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
}
impl Address {
    /// <p>The city for this address.</p>
    pub fn city(&self) -> &str {
        use std::ops::Deref;
        self.city.deref()
    }
    /// <p>The company name for this address.</p>
    pub fn company(&self) -> ::std::option::Option<&str> {
        self.company.as_deref()
    }
    /// <p>The country for this address.</p>
    pub fn country(&self) -> &str {
        use std::ops::Deref;
        self.country.deref()
    }
    /// <p>The recipient's name for this address.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The recipient's phone number.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The postal code for this address.</p>
    pub fn postal_code(&self) -> &str {
        use std::ops::Deref;
        self.postal_code.deref()
    }
    /// <p>The state or province for this address.</p>
    pub fn state_or_province(&self) -> &str {
        use std::ops::Deref;
        self.state_or_province.deref()
    }
    /// <p>The first line of the street address.</p>
    pub fn street1(&self) -> &str {
        use std::ops::Deref;
        self.street1.deref()
    }
    /// <p>The second line of the street address.</p>
    pub fn street2(&self) -> ::std::option::Option<&str> {
        self.street2.as_deref()
    }
    /// <p>The third line of the street address.</p>
    pub fn street3(&self) -> ::std::option::Option<&str> {
        self.street3.as_deref()
    }
    /// <p>The recipient's email address.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
}
impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Address");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_province", &"*** Sensitive Data Redacted ***");
        formatter.field("street1", &"*** Sensitive Data Redacted ***");
        formatter.field("street2", &"*** Sensitive Data Redacted ***");
        formatter.field("street3", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Address {
    /// Creates a new builder-style object to manufacture [`Address`](crate::types::Address).
    pub fn builder() -> crate::types::builders::AddressBuilder {
        crate::types::builders::AddressBuilder::default()
    }
}

/// A builder for [`Address`](crate::types::Address).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AddressBuilder {
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) company: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) state_or_province: ::std::option::Option<::std::string::String>,
    pub(crate) street1: ::std::option::Option<::std::string::String>,
    pub(crate) street2: ::std::option::Option<::std::string::String>,
    pub(crate) street3: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
}
impl AddressBuilder {
    /// <p>The city for this address.</p>
    /// This field is required.
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city for this address.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city for this address.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The company name for this address.</p>
    pub fn company(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The company name for this address.</p>
    pub fn set_company(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company = input;
        self
    }
    /// <p>The company name for this address.</p>
    pub fn get_company(&self) -> &::std::option::Option<::std::string::String> {
        &self.company
    }
    /// <p>The country for this address.</p>
    /// This field is required.
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country for this address.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country for this address.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The recipient's name for this address.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recipient's name for this address.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The recipient's name for this address.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The recipient's phone number.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recipient's phone number.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The recipient's phone number.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number
    }
    /// <p>The postal code for this address.</p>
    /// This field is required.
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code for this address.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The postal code for this address.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// <p>The state or province for this address.</p>
    /// This field is required.
    pub fn state_or_province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_or_province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state or province for this address.</p>
    pub fn set_state_or_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_or_province = input;
        self
    }
    /// <p>The state or province for this address.</p>
    pub fn get_state_or_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_or_province
    }
    /// <p>The first line of the street address.</p>
    /// This field is required.
    pub fn street1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.street1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of the street address.</p>
    pub fn set_street1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.street1 = input;
        self
    }
    /// <p>The first line of the street address.</p>
    pub fn get_street1(&self) -> &::std::option::Option<::std::string::String> {
        &self.street1
    }
    /// <p>The second line of the street address.</p>
    pub fn street2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.street2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of the street address.</p>
    pub fn set_street2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.street2 = input;
        self
    }
    /// <p>The second line of the street address.</p>
    pub fn get_street2(&self) -> &::std::option::Option<::std::string::String> {
        &self.street2
    }
    /// <p>The third line of the street address.</p>
    pub fn street3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.street3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of the street address.</p>
    pub fn set_street3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.street3 = input;
        self
    }
    /// <p>The third line of the street address.</p>
    pub fn get_street3(&self) -> &::std::option::Option<::std::string::String> {
        &self.street3
    }
    /// <p>The recipient's email address.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recipient's email address.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The recipient's email address.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// Consumes the builder and constructs a [`Address`](crate::types::Address).
    /// This method will fail if any of the following fields are not set:
    /// - [`city`](crate::types::builders::AddressBuilder::city)
    /// - [`country`](crate::types::builders::AddressBuilder::country)
    /// - [`name`](crate::types::builders::AddressBuilder::name)
    /// - [`postal_code`](crate::types::builders::AddressBuilder::postal_code)
    /// - [`state_or_province`](crate::types::builders::AddressBuilder::state_or_province)
    /// - [`street1`](crate::types::builders::AddressBuilder::street1)
    pub fn build(self) -> ::std::result::Result<crate::types::Address, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Address {
            city: self.city.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "city",
                    "city was not specified but it is required when building Address",
                )
            })?,
            company: self.company,
            country: self.country.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country",
                    "country was not specified but it is required when building Address",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Address",
                )
            })?,
            phone_number: self.phone_number,
            postal_code: self.postal_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "postal_code",
                    "postal_code was not specified but it is required when building Address",
                )
            })?,
            state_or_province: self.state_or_province.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_or_province",
                    "state_or_province was not specified but it is required when building Address",
                )
            })?,
            street1: self.street1.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "street1",
                    "street1 was not specified but it is required when building Address",
                )
            })?,
            street2: self.street2,
            street3: self.street3,
            email_address: self.email_address,
        })
    }
}
impl ::std::fmt::Debug for AddressBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AddressBuilder");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_province", &"*** Sensitive Data Redacted ***");
        formatter.field("street1", &"*** Sensitive Data Redacted ***");
        formatter.field("street2", &"*** Sensitive Data Redacted ***");
        formatter.field("street3", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
