// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Address {
    /// <p>The city for this address.</p>
    #[doc(hidden)]
    pub city: std::option::Option<std::string::String>,
    /// <p>The company name for this address.</p>
    #[doc(hidden)]
    pub company: std::option::Option<std::string::String>,
    /// <p>The country for this address.</p>
    #[doc(hidden)]
    pub country: std::option::Option<std::string::String>,
    /// <p>The recipient's name for this address.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The phone number for this address.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>The postal code for this address.</p>
    #[doc(hidden)]
    pub postal_code: std::option::Option<std::string::String>,
    /// <p>The state or province for this address.</p>
    #[doc(hidden)]
    pub state_or_province: std::option::Option<std::string::String>,
    /// <p>The first line of the street address.</p>
    #[doc(hidden)]
    pub street1: std::option::Option<std::string::String>,
    /// <p>The second line of the street address.</p>
    #[doc(hidden)]
    pub street2: std::option::Option<std::string::String>,
    /// <p>The third line of the street address.</p>
    #[doc(hidden)]
    pub street3: std::option::Option<std::string::String>,
}
impl Address {
    /// <p>The city for this address.</p>
    pub fn city(&self) -> std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The company name for this address.</p>
    pub fn company(&self) -> std::option::Option<&str> {
        self.company.as_deref()
    }
    /// <p>The country for this address.</p>
    pub fn country(&self) -> std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The recipient's name for this address.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The phone number for this address.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The postal code for this address.</p>
    pub fn postal_code(&self) -> std::option::Option<&str> {
        self.postal_code.as_deref()
    }
    /// <p>The state or province for this address.</p>
    pub fn state_or_province(&self) -> std::option::Option<&str> {
        self.state_or_province.as_deref()
    }
    /// <p>The first line of the street address.</p>
    pub fn street1(&self) -> std::option::Option<&str> {
        self.street1.as_deref()
    }
    /// <p>The second line of the street address.</p>
    pub fn street2(&self) -> std::option::Option<&str> {
        self.street2.as_deref()
    }
    /// <p>The third line of the street address.</p>
    pub fn street3(&self) -> std::option::Option<&str> {
        self.street3.as_deref()
    }
}
impl std::fmt::Debug for Address {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Address");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_province", &"*** Sensitive Data Redacted ***");
        formatter.field("street1", &"*** Sensitive Data Redacted ***");
        formatter.field("street2", &"*** Sensitive Data Redacted ***");
        formatter.field("street3", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Address {
    /// Creates a new builder-style object to manufacture [`Address`](crate::types::Address).
    pub fn builder() -> crate::types::builders::AddressBuilder {
        crate::types::builders::AddressBuilder::default()
    }
}

/// A builder for [`Address`](crate::types::Address).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AddressBuilder {
    pub(crate) city: std::option::Option<std::string::String>,
    pub(crate) company: std::option::Option<std::string::String>,
    pub(crate) country: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) postal_code: std::option::Option<std::string::String>,
    pub(crate) state_or_province: std::option::Option<std::string::String>,
    pub(crate) street1: std::option::Option<std::string::String>,
    pub(crate) street2: std::option::Option<std::string::String>,
    pub(crate) street3: std::option::Option<std::string::String>,
}
impl AddressBuilder {
    /// <p>The city for this address.</p>
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.city = Some(input.into());
        self
    }
    /// <p>The city for this address.</p>
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The company name for this address.</p>
    pub fn company(mut self, input: impl Into<std::string::String>) -> Self {
        self.company = Some(input.into());
        self
    }
    /// <p>The company name for this address.</p>
    pub fn set_company(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.company = input;
        self
    }
    /// <p>The country for this address.</p>
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.country = Some(input.into());
        self
    }
    /// <p>The country for this address.</p>
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The recipient's name for this address.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The recipient's name for this address.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The phone number for this address.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The phone number for this address.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The postal code for this address.</p>
    pub fn postal_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.postal_code = Some(input.into());
        self
    }
    /// <p>The postal code for this address.</p>
    pub fn set_postal_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The state or province for this address.</p>
    pub fn state_or_province(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_or_province = Some(input.into());
        self
    }
    /// <p>The state or province for this address.</p>
    pub fn set_state_or_province(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.state_or_province = input;
        self
    }
    /// <p>The first line of the street address.</p>
    pub fn street1(mut self, input: impl Into<std::string::String>) -> Self {
        self.street1 = Some(input.into());
        self
    }
    /// <p>The first line of the street address.</p>
    pub fn set_street1(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street1 = input;
        self
    }
    /// <p>The second line of the street address.</p>
    pub fn street2(mut self, input: impl Into<std::string::String>) -> Self {
        self.street2 = Some(input.into());
        self
    }
    /// <p>The second line of the street address.</p>
    pub fn set_street2(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street2 = input;
        self
    }
    /// <p>The third line of the street address.</p>
    pub fn street3(mut self, input: impl Into<std::string::String>) -> Self {
        self.street3 = Some(input.into());
        self
    }
    /// <p>The third line of the street address.</p>
    pub fn set_street3(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street3 = input;
        self
    }
    /// Consumes the builder and constructs a [`Address`](crate::types::Address).
    pub fn build(self) -> crate::types::Address {
        crate::types::Address {
            city: self.city,
            company: self.company,
            country: self.country,
            name: self.name,
            phone_number: self.phone_number,
            postal_code: self.postal_code,
            state_or_province: self.state_or_province,
            street1: self.street1,
            street2: self.street2,
            street3: self.street3,
        }
    }
}
impl std::fmt::Debug for AddressBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddressBuilder");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_province", &"*** Sensitive Data Redacted ***");
        formatter.field("street1", &"*** Sensitive Data Redacted ***");
        formatter.field("street2", &"*** Sensitive Data Redacted ***");
        formatter.field("street3", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
