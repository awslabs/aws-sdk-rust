// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a subscriber of a device that can use a network.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeviceIdentifier {
    /// <p>The Amazon Resource Name (ARN) of the device identifier.</p>
    #[doc(hidden)]
    pub device_identifier_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the traffic group to which the device identifier belongs.</p>
    #[doc(hidden)]
    pub traffic_group_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the network on which the device identifier appears.</p>
    #[doc(hidden)]
    pub network_arn: std::option::Option<std::string::String>,
    /// <p>The International Mobile Subscriber Identity of the device identifier.</p>
    #[doc(hidden)]
    pub imsi: std::option::Option<std::string::String>,
    /// <p>The Integrated Circuit Card Identifier of the device identifier.</p>
    #[doc(hidden)]
    pub iccid: std::option::Option<std::string::String>,
    /// <p>The vendor of the device identifier.</p>
    #[doc(hidden)]
    pub vendor: std::option::Option<std::string::String>,
    /// <p>The status of the device identifier.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DeviceIdentifierStatus>,
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase the device identifier.</p>
    #[doc(hidden)]
    pub order_arn: std::option::Option<std::string::String>,
    /// <p>The creation time of this device identifier.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeviceIdentifier {
    /// <p>The Amazon Resource Name (ARN) of the device identifier.</p>
    pub fn device_identifier_arn(&self) -> std::option::Option<&str> {
        self.device_identifier_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the traffic group to which the device identifier belongs.</p>
    pub fn traffic_group_arn(&self) -> std::option::Option<&str> {
        self.traffic_group_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which the device identifier appears.</p>
    pub fn network_arn(&self) -> std::option::Option<&str> {
        self.network_arn.as_deref()
    }
    /// <p>The International Mobile Subscriber Identity of the device identifier.</p>
    pub fn imsi(&self) -> std::option::Option<&str> {
        self.imsi.as_deref()
    }
    /// <p>The Integrated Circuit Card Identifier of the device identifier.</p>
    pub fn iccid(&self) -> std::option::Option<&str> {
        self.iccid.as_deref()
    }
    /// <p>The vendor of the device identifier.</p>
    pub fn vendor(&self) -> std::option::Option<&str> {
        self.vendor.as_deref()
    }
    /// <p>The status of the device identifier.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DeviceIdentifierStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase the device identifier.</p>
    pub fn order_arn(&self) -> std::option::Option<&str> {
        self.order_arn.as_deref()
    }
    /// <p>The creation time of this device identifier.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl std::fmt::Debug for DeviceIdentifier {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeviceIdentifier");
        formatter.field("device_identifier_arn", &self.device_identifier_arn);
        formatter.field("traffic_group_arn", &self.traffic_group_arn);
        formatter.field("network_arn", &self.network_arn);
        formatter.field("imsi", &"*** Sensitive Data Redacted ***");
        formatter.field("iccid", &self.iccid);
        formatter.field("vendor", &self.vendor);
        formatter.field("status", &self.status);
        formatter.field("order_arn", &self.order_arn);
        formatter.field("created_at", &self.created_at);
        formatter.finish()
    }
}
impl DeviceIdentifier {
    /// Creates a new builder-style object to manufacture [`DeviceIdentifier`](crate::types::DeviceIdentifier).
    pub fn builder() -> crate::types::builders::DeviceIdentifierBuilder {
        crate::types::builders::DeviceIdentifierBuilder::default()
    }
}

/// A builder for [`DeviceIdentifier`](crate::types::DeviceIdentifier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DeviceIdentifierBuilder {
    pub(crate) device_identifier_arn: std::option::Option<std::string::String>,
    pub(crate) traffic_group_arn: std::option::Option<std::string::String>,
    pub(crate) network_arn: std::option::Option<std::string::String>,
    pub(crate) imsi: std::option::Option<std::string::String>,
    pub(crate) iccid: std::option::Option<std::string::String>,
    pub(crate) vendor: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::DeviceIdentifierStatus>,
    pub(crate) order_arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeviceIdentifierBuilder {
    /// <p>The Amazon Resource Name (ARN) of the device identifier.</p>
    pub fn device_identifier_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_identifier_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device identifier.</p>
    pub fn set_device_identifier_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_identifier_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the traffic group to which the device identifier belongs.</p>
    pub fn traffic_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.traffic_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the traffic group to which the device identifier belongs.</p>
    pub fn set_traffic_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.traffic_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which the device identifier appears.</p>
    pub fn network_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network on which the device identifier appears.</p>
    pub fn set_network_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_arn = input;
        self
    }
    /// <p>The International Mobile Subscriber Identity of the device identifier.</p>
    pub fn imsi(mut self, input: impl Into<std::string::String>) -> Self {
        self.imsi = Some(input.into());
        self
    }
    /// <p>The International Mobile Subscriber Identity of the device identifier.</p>
    pub fn set_imsi(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.imsi = input;
        self
    }
    /// <p>The Integrated Circuit Card Identifier of the device identifier.</p>
    pub fn iccid(mut self, input: impl Into<std::string::String>) -> Self {
        self.iccid = Some(input.into());
        self
    }
    /// <p>The Integrated Circuit Card Identifier of the device identifier.</p>
    pub fn set_iccid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iccid = input;
        self
    }
    /// <p>The vendor of the device identifier.</p>
    pub fn vendor(mut self, input: impl Into<std::string::String>) -> Self {
        self.vendor = Some(input.into());
        self
    }
    /// <p>The vendor of the device identifier.</p>
    pub fn set_vendor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vendor = input;
        self
    }
    /// <p>The status of the device identifier.</p>
    pub fn status(mut self, input: crate::types::DeviceIdentifierStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the device identifier.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DeviceIdentifierStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase the device identifier.</p>
    pub fn order_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.order_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the order used to purchase the device identifier.</p>
    pub fn set_order_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.order_arn = input;
        self
    }
    /// <p>The creation time of this device identifier.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The creation time of this device identifier.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceIdentifier`](crate::types::DeviceIdentifier).
    pub fn build(self) -> crate::types::DeviceIdentifier {
        crate::types::DeviceIdentifier {
            device_identifier_arn: self.device_identifier_arn,
            traffic_group_arn: self.traffic_group_arn,
            network_arn: self.network_arn,
            imsi: self.imsi,
            iccid: self.iccid,
            vendor: self.vendor,
            status: self.status,
            order_arn: self.order_arn,
            created_at: self.created_at,
        }
    }
}
impl std::fmt::Debug for DeviceIdentifierBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeviceIdentifierBuilder");
        formatter.field("device_identifier_arn", &self.device_identifier_arn);
        formatter.field("traffic_group_arn", &self.traffic_group_arn);
        formatter.field("network_arn", &self.network_arn);
        formatter.field("imsi", &"*** Sensitive Data Redacted ***");
        formatter.field("iccid", &self.iccid);
        formatter.field("vendor", &self.vendor);
        formatter.field("status", &self.status);
        formatter.field("order_arn", &self.order_arn);
        formatter.field("created_at", &self.created_at);
        formatter.finish()
    }
}
