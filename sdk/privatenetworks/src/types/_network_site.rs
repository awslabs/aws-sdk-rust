// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a network site.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkSite {
    /// <p>The Amazon Resource Name (ARN) of the network site.</p>
    #[doc(hidden)]
    pub network_site_arn: std::option::Option<std::string::String>,
    /// <p>The name of the network site.</p>
    #[doc(hidden)]
    pub network_site_name: std::option::Option<std::string::String>,
    /// <p>The description of the network site.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the network site.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NetworkSiteStatus>,
    /// <p>The status reason of the network site.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the network to which the network site belongs.</p>
    #[doc(hidden)]
    pub network_arn: std::option::Option<std::string::String>,
    /// <p>The pending plan of the network site.</p>
    #[doc(hidden)]
    pub pending_plan: std::option::Option<crate::types::SitePlan>,
    /// <p>The current plan of the network site.</p>
    #[doc(hidden)]
    pub current_plan: std::option::Option<crate::types::SitePlan>,
    /// <p>The creation time of the network site.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The parent Availability Zone for the network site. </p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p> The parent Availability Zone ID for the network site. </p>
    #[doc(hidden)]
    pub availability_zone_id: std::option::Option<std::string::String>,
}
impl NetworkSite {
    /// <p>The Amazon Resource Name (ARN) of the network site.</p>
    pub fn network_site_arn(&self) -> std::option::Option<&str> {
        self.network_site_arn.as_deref()
    }
    /// <p>The name of the network site.</p>
    pub fn network_site_name(&self) -> std::option::Option<&str> {
        self.network_site_name.as_deref()
    }
    /// <p>The description of the network site.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the network site.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NetworkSiteStatus> {
        self.status.as_ref()
    }
    /// <p>The status reason of the network site.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the network to which the network site belongs.</p>
    pub fn network_arn(&self) -> std::option::Option<&str> {
        self.network_arn.as_deref()
    }
    /// <p>The pending plan of the network site.</p>
    pub fn pending_plan(&self) -> std::option::Option<&crate::types::SitePlan> {
        self.pending_plan.as_ref()
    }
    /// <p>The current plan of the network site.</p>
    pub fn current_plan(&self) -> std::option::Option<&crate::types::SitePlan> {
        self.current_plan.as_ref()
    }
    /// <p>The creation time of the network site.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p> The parent Availability Zone for the network site. </p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p> The parent Availability Zone ID for the network site. </p>
    pub fn availability_zone_id(&self) -> std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
}
impl NetworkSite {
    /// Creates a new builder-style object to manufacture [`NetworkSite`](crate::types::NetworkSite).
    pub fn builder() -> crate::types::builders::NetworkSiteBuilder {
        crate::types::builders::NetworkSiteBuilder::default()
    }
}

/// A builder for [`NetworkSite`](crate::types::NetworkSite).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkSiteBuilder {
    pub(crate) network_site_arn: std::option::Option<std::string::String>,
    pub(crate) network_site_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::NetworkSiteStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) network_arn: std::option::Option<std::string::String>,
    pub(crate) pending_plan: std::option::Option<crate::types::SitePlan>,
    pub(crate) current_plan: std::option::Option<crate::types::SitePlan>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) availability_zone_id: std::option::Option<std::string::String>,
}
impl NetworkSiteBuilder {
    /// <p>The Amazon Resource Name (ARN) of the network site.</p>
    pub fn network_site_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_site_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network site.</p>
    pub fn set_network_site_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_site_arn = input;
        self
    }
    /// <p>The name of the network site.</p>
    pub fn network_site_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_site_name = Some(input.into());
        self
    }
    /// <p>The name of the network site.</p>
    pub fn set_network_site_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_site_name = input;
        self
    }
    /// <p>The description of the network site.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the network site.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the network site.</p>
    pub fn status(mut self, input: crate::types::NetworkSiteStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the network site.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::NetworkSiteStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The status reason of the network site.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The status reason of the network site.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network to which the network site belongs.</p>
    pub fn network_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network to which the network site belongs.</p>
    pub fn set_network_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_arn = input;
        self
    }
    /// <p>The pending plan of the network site.</p>
    pub fn pending_plan(mut self, input: crate::types::SitePlan) -> Self {
        self.pending_plan = Some(input);
        self
    }
    /// <p>The pending plan of the network site.</p>
    pub fn set_pending_plan(mut self, input: std::option::Option<crate::types::SitePlan>) -> Self {
        self.pending_plan = input;
        self
    }
    /// <p>The current plan of the network site.</p>
    pub fn current_plan(mut self, input: crate::types::SitePlan) -> Self {
        self.current_plan = Some(input);
        self
    }
    /// <p>The current plan of the network site.</p>
    pub fn set_current_plan(mut self, input: std::option::Option<crate::types::SitePlan>) -> Self {
        self.current_plan = input;
        self
    }
    /// <p>The creation time of the network site.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The creation time of the network site.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p> The parent Availability Zone for the network site. </p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p> The parent Availability Zone for the network site. </p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p> The parent Availability Zone ID for the network site. </p>
    pub fn availability_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone_id = Some(input.into());
        self
    }
    /// <p> The parent Availability Zone ID for the network site. </p>
    pub fn set_availability_zone_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkSite`](crate::types::NetworkSite).
    pub fn build(self) -> crate::types::NetworkSite {
        crate::types::NetworkSite {
            network_site_arn: self.network_site_arn,
            network_site_name: self.network_site_name,
            description: self.description,
            status: self.status,
            status_reason: self.status_reason,
            network_arn: self.network_arn,
            pending_plan: self.pending_plan,
            current_plan: self.current_plan,
            created_at: self.created_at,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
        }
    }
}
