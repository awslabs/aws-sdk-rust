// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a site plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SitePlan {
    /// <p>The resource definitions of the plan.</p>
    #[doc(hidden)]
    pub resource_definitions:
        std::option::Option<std::vec::Vec<crate::types::NetworkResourceDefinition>>,
    /// <p>The options of the plan.</p>
    #[doc(hidden)]
    pub options: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
}
impl SitePlan {
    /// <p>The resource definitions of the plan.</p>
    pub fn resource_definitions(
        &self,
    ) -> std::option::Option<&[crate::types::NetworkResourceDefinition]> {
        self.resource_definitions.as_deref()
    }
    /// <p>The options of the plan.</p>
    pub fn options(&self) -> std::option::Option<&[crate::types::NameValuePair]> {
        self.options.as_deref()
    }
}
impl SitePlan {
    /// Creates a new builder-style object to manufacture [`SitePlan`](crate::types::SitePlan).
    pub fn builder() -> crate::types::builders::SitePlanBuilder {
        crate::types::builders::SitePlanBuilder::default()
    }
}

/// A builder for [`SitePlan`](crate::types::SitePlan).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SitePlanBuilder {
    pub(crate) resource_definitions:
        std::option::Option<std::vec::Vec<crate::types::NetworkResourceDefinition>>,
    pub(crate) options: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
}
impl SitePlanBuilder {
    /// Appends an item to `resource_definitions`.
    ///
    /// To override the contents of this collection use [`set_resource_definitions`](Self::set_resource_definitions).
    ///
    /// <p>The resource definitions of the plan.</p>
    pub fn resource_definitions(mut self, input: crate::types::NetworkResourceDefinition) -> Self {
        let mut v = self.resource_definitions.unwrap_or_default();
        v.push(input);
        self.resource_definitions = Some(v);
        self
    }
    /// <p>The resource definitions of the plan.</p>
    pub fn set_resource_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkResourceDefinition>>,
    ) -> Self {
        self.resource_definitions = input;
        self
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The options of the plan.</p>
    pub fn options(mut self, input: crate::types::NameValuePair) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = Some(v);
        self
    }
    /// <p>The options of the plan.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NameValuePair>>,
    ) -> Self {
        self.options = input;
        self
    }
    /// Consumes the builder and constructs a [`SitePlan`](crate::types::SitePlan).
    pub fn build(self) -> crate::types::SitePlan {
        crate::types::SitePlan {
            resource_definitions: self.resource_definitions,
            options: self.options,
        }
    }
}
