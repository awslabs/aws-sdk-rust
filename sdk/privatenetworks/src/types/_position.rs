// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a position.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Position {
    /// <p>The latitude of the position.</p>
    #[doc(hidden)]
    pub latitude: std::option::Option<f64>,
    /// <p>The longitude of the position.</p>
    #[doc(hidden)]
    pub longitude: std::option::Option<f64>,
    /// <p>The elevation of the equipment at this position.</p>
    #[doc(hidden)]
    pub elevation: std::option::Option<f64>,
    /// <p>The units used to measure the elevation of the position.</p>
    #[doc(hidden)]
    pub elevation_unit: std::option::Option<crate::types::ElevationUnit>,
    /// <p>The reference point from which elevation is reported.</p>
    #[doc(hidden)]
    pub elevation_reference: std::option::Option<crate::types::ElevationReference>,
}
impl Position {
    /// <p>The latitude of the position.</p>
    pub fn latitude(&self) -> std::option::Option<f64> {
        self.latitude
    }
    /// <p>The longitude of the position.</p>
    pub fn longitude(&self) -> std::option::Option<f64> {
        self.longitude
    }
    /// <p>The elevation of the equipment at this position.</p>
    pub fn elevation(&self) -> std::option::Option<f64> {
        self.elevation
    }
    /// <p>The units used to measure the elevation of the position.</p>
    pub fn elevation_unit(&self) -> std::option::Option<&crate::types::ElevationUnit> {
        self.elevation_unit.as_ref()
    }
    /// <p>The reference point from which elevation is reported.</p>
    pub fn elevation_reference(&self) -> std::option::Option<&crate::types::ElevationReference> {
        self.elevation_reference.as_ref()
    }
}
impl Position {
    /// Creates a new builder-style object to manufacture [`Position`](crate::types::Position).
    pub fn builder() -> crate::types::builders::PositionBuilder {
        crate::types::builders::PositionBuilder::default()
    }
}

/// A builder for [`Position`](crate::types::Position).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PositionBuilder {
    pub(crate) latitude: std::option::Option<f64>,
    pub(crate) longitude: std::option::Option<f64>,
    pub(crate) elevation: std::option::Option<f64>,
    pub(crate) elevation_unit: std::option::Option<crate::types::ElevationUnit>,
    pub(crate) elevation_reference: std::option::Option<crate::types::ElevationReference>,
}
impl PositionBuilder {
    /// <p>The latitude of the position.</p>
    pub fn latitude(mut self, input: f64) -> Self {
        self.latitude = Some(input);
        self
    }
    /// <p>The latitude of the position.</p>
    pub fn set_latitude(mut self, input: std::option::Option<f64>) -> Self {
        self.latitude = input;
        self
    }
    /// <p>The longitude of the position.</p>
    pub fn longitude(mut self, input: f64) -> Self {
        self.longitude = Some(input);
        self
    }
    /// <p>The longitude of the position.</p>
    pub fn set_longitude(mut self, input: std::option::Option<f64>) -> Self {
        self.longitude = input;
        self
    }
    /// <p>The elevation of the equipment at this position.</p>
    pub fn elevation(mut self, input: f64) -> Self {
        self.elevation = Some(input);
        self
    }
    /// <p>The elevation of the equipment at this position.</p>
    pub fn set_elevation(mut self, input: std::option::Option<f64>) -> Self {
        self.elevation = input;
        self
    }
    /// <p>The units used to measure the elevation of the position.</p>
    pub fn elevation_unit(mut self, input: crate::types::ElevationUnit) -> Self {
        self.elevation_unit = Some(input);
        self
    }
    /// <p>The units used to measure the elevation of the position.</p>
    pub fn set_elevation_unit(
        mut self,
        input: std::option::Option<crate::types::ElevationUnit>,
    ) -> Self {
        self.elevation_unit = input;
        self
    }
    /// <p>The reference point from which elevation is reported.</p>
    pub fn elevation_reference(mut self, input: crate::types::ElevationReference) -> Self {
        self.elevation_reference = Some(input);
        self
    }
    /// <p>The reference point from which elevation is reported.</p>
    pub fn set_elevation_reference(
        mut self,
        input: std::option::Option<crate::types::ElevationReference>,
    ) -> Self {
        self.elevation_reference = input;
        self
    }
    /// Consumes the builder and constructs a [`Position`](crate::types::Position).
    pub fn build(self) -> crate::types::Position {
        crate::types::Position {
            latitude: self.latitude,
            longitude: self.longitude,
            elevation: self.elevation,
            elevation_unit: self.elevation_unit,
            elevation_reference: self.elevation_reference,
        }
    }
}
