// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListNetworks`](crate::client::fluent_builders::ListNetworks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNetworks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(HashMap<NetworkFilterKeys, Vec<String>>)`](crate::client::fluent_builders::ListNetworks::filters) / [`set_filters(Option<HashMap<NetworkFilterKeys, Vec<String>>>)`](crate::client::fluent_builders::ListNetworks::set_filters): <p>The filters.</p>  <ul>   <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li>  </ul>  <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    ///   - [`start_token(impl Into<String>)`](crate::client::fluent_builders::ListNetworks::start_token) / [`set_start_token(Option<String>)`](crate::client::fluent_builders::ListNetworks::set_start_token): <p>The token for the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNetworks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNetworks::set_max_results): <p>The maximum number of results to return.</p>
    /// - On success, responds with [`ListNetworksOutput`](crate::output::ListNetworksOutput) with field(s):
    ///   - [`networks(Option<Vec<Network>>)`](crate::output::ListNetworksOutput::networks): <p>The networks.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNetworksOutput::next_token): <p>The token for the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListNetworksError>`](crate::error::ListNetworksError)
    pub fn list_networks(&self) -> crate::client::fluent_builders::ListNetworks {
        crate::client::fluent_builders::ListNetworks::new(self.handle.clone())
    }
}
