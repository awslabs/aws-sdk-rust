// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateNetworkSitePlan`](crate::client::fluent_builders::UpdateNetworkSitePlan) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_site_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkSitePlan::network_site_arn) / [`set_network_site_arn(Option<String>)`](crate::client::fluent_builders::UpdateNetworkSitePlan::set_network_site_arn): <p>The Amazon Resource Name (ARN) of the network site.</p>
    ///   - [`pending_plan(SitePlan)`](crate::client::fluent_builders::UpdateNetworkSitePlan::pending_plan) / [`set_pending_plan(Option<SitePlan>)`](crate::client::fluent_builders::UpdateNetworkSitePlan::set_pending_plan): <p>The pending plan.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkSitePlan::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateNetworkSitePlan::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    /// - On success, responds with [`UpdateNetworkSitePlanOutput`](crate::output::UpdateNetworkSitePlanOutput) with field(s):
    ///   - [`network_site(Option<NetworkSite>)`](crate::output::UpdateNetworkSitePlanOutput::network_site): <p>Information about the network site.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::UpdateNetworkSitePlanOutput::tags): <p> The network site tags. </p>
    /// - On failure, responds with [`SdkError<UpdateNetworkSitePlanError>`](crate::error::UpdateNetworkSitePlanError)
    pub fn update_network_site_plan(
        &self,
    ) -> crate::client::fluent_builders::UpdateNetworkSitePlan {
        crate::client::fluent_builders::UpdateNetworkSitePlan::new(self.handle.clone())
    }
}
