// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_network_site_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_network_site::CreateNetworkSiteInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.availability_zone {
        object.key("availabilityZone").string(var_1.as_str());
    }
    if let Some(var_2) = &input.availability_zone_id {
        object.key("availabilityZoneId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.network_arn {
        object.key("networkArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.network_site_name {
        object.key("networkSiteName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.pending_plan {
        #[allow(unused_mut)]
        let mut object_8 = object.key("pendingPlan").start_object();
        crate::protocol_serde::shape_site_plan::ser_site_plan(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
