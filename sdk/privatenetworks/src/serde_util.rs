// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn acknowledge_order_receipt_output_correct_errors(
    mut builder: crate::operation::acknowledge_order_receipt::builders::AcknowledgeOrderReceiptOutputBuilder,
) -> crate::operation::acknowledge_order_receipt::builders::AcknowledgeOrderReceiptOutputBuilder {
    if builder.order.is_none() {
        builder.order = {
            let builder = crate::types::builders::OrderBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn activate_device_identifier_output_correct_errors(
    mut builder: crate::operation::activate_device_identifier::builders::ActivateDeviceIdentifierOutputBuilder,
) -> crate::operation::activate_device_identifier::builders::ActivateDeviceIdentifierOutputBuilder {
    if builder.device_identifier.is_none() {
        builder.device_identifier = {
            let builder = crate::types::builders::DeviceIdentifierBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn configure_access_point_output_correct_errors(
    mut builder: crate::operation::configure_access_point::builders::ConfigureAccessPointOutputBuilder,
) -> crate::operation::configure_access_point::builders::ConfigureAccessPointOutputBuilder {
    if builder.access_point.is_none() {
        builder.access_point = {
            let builder = crate::types::builders::NetworkResourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::LimitExceededExceptionBuilder,
) -> crate::types::error::builders::LimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_network_output_correct_errors(
    mut builder: crate::operation::create_network::builders::CreateNetworkOutputBuilder,
) -> crate::operation::create_network::builders::CreateNetworkOutputBuilder {
    if builder.network.is_none() {
        builder.network = {
            let builder = crate::types::builders::NetworkBuilder::default();
            crate::serde_util::network_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn deactivate_device_identifier_output_correct_errors(
    mut builder: crate::operation::deactivate_device_identifier::builders::DeactivateDeviceIdentifierOutputBuilder,
) -> crate::operation::deactivate_device_identifier::builders::DeactivateDeviceIdentifierOutputBuilder {
    if builder.device_identifier.is_none() {
        builder.device_identifier = {
            let builder = crate::types::builders::DeviceIdentifierBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_network_output_correct_errors(
    mut builder: crate::operation::delete_network::builders::DeleteNetworkOutputBuilder,
) -> crate::operation::delete_network::builders::DeleteNetworkOutputBuilder {
    if builder.network.is_none() {
        builder.network = {
            let builder = crate::types::builders::NetworkBuilder::default();
            crate::serde_util::network_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_network_output_correct_errors(
    mut builder: crate::operation::get_network::builders::GetNetworkOutputBuilder,
) -> crate::operation::get_network::builders::GetNetworkOutputBuilder {
    if builder.network.is_none() {
        builder.network = {
            let builder = crate::types::builders::NetworkBuilder::default();
            crate::serde_util::network_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_network_resource_output_correct_errors(
    mut builder: crate::operation::get_network_resource::builders::GetNetworkResourceOutputBuilder,
) -> crate::operation::get_network_resource::builders::GetNetworkResourceOutputBuilder {
    if builder.network_resource.is_none() {
        builder.network_resource = {
            let builder = crate::types::builders::NetworkResourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_order_output_correct_errors(
    mut builder: crate::operation::get_order::builders::GetOrderOutputBuilder,
) -> crate::operation::get_order::builders::GetOrderOutputBuilder {
    if builder.order.is_none() {
        builder.order = {
            let builder = crate::types::builders::OrderBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn network_correct_errors(mut builder: crate::types::builders::NetworkBuilder) -> crate::types::builders::NetworkBuilder {
    if builder.network_arn.is_none() {
        builder.network_arn = Some(Default::default())
    }
    if builder.network_name.is_none() {
        builder.network_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NetworkStatus>().ok()
    }
    builder
}

pub(crate) fn network_site_correct_errors(mut builder: crate::types::builders::NetworkSiteBuilder) -> crate::types::builders::NetworkSiteBuilder {
    if builder.network_site_arn.is_none() {
        builder.network_site_arn = Some(Default::default())
    }
    if builder.network_site_name.is_none() {
        builder.network_site_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NetworkSiteStatus>().ok()
    }
    if builder.network_arn.is_none() {
        builder.network_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn address_correct_errors(mut builder: crate::types::builders::AddressBuilder) -> crate::types::builders::AddressBuilder {
    if builder.city.is_none() {
        builder.city = Some(Default::default())
    }
    if builder.country.is_none() {
        builder.country = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.postal_code.is_none() {
        builder.postal_code = Some(Default::default())
    }
    if builder.state_or_province.is_none() {
        builder.state_or_province = Some(Default::default())
    }
    if builder.street1.is_none() {
        builder.street1 = Some(Default::default())
    }
    builder
}

pub(crate) fn commitment_information_correct_errors(
    mut builder: crate::types::builders::CommitmentInformationBuilder,
) -> crate::types::builders::CommitmentInformationBuilder {
    if builder.commitment_configuration.is_none() {
        builder.commitment_configuration = {
            let builder = crate::types::builders::CommitmentConfigurationBuilder::default();
            crate::serde_util::commitment_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn commitment_configuration_correct_errors(
    mut builder: crate::types::builders::CommitmentConfigurationBuilder,
) -> crate::types::builders::CommitmentConfigurationBuilder {
    if builder.commitment_length.is_none() {
        builder.commitment_length = "no value was set".parse::<crate::types::CommitmentLength>().ok()
    }
    if builder.automatic_renewal.is_none() {
        builder.automatic_renewal = Some(Default::default())
    }
    builder
}

pub(crate) fn name_value_pair_correct_errors(
    mut builder: crate::types::builders::NameValuePairBuilder,
) -> crate::types::builders::NameValuePairBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn ordered_resource_definition_correct_errors(
    mut builder: crate::types::builders::OrderedResourceDefinitionBuilder,
) -> crate::types::builders::OrderedResourceDefinitionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::NetworkResourceDefinitionType>().ok()
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn network_resource_definition_correct_errors(
    mut builder: crate::types::builders::NetworkResourceDefinitionBuilder,
) -> crate::types::builders::NetworkResourceDefinitionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::NetworkResourceDefinitionType>().ok()
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}
