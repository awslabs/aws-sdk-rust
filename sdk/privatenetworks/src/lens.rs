// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_device_identifiers_output_next_token(
    input: &crate::operation::list_device_identifiers::ListDeviceIdentifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_network_resources_output_next_token(
    input: &crate::operation::list_network_resources::ListNetworkResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_network_sites_output_next_token(
    input: &crate::operation::list_network_sites::ListNetworkSitesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_networks_output_next_token(
    input: &crate::operation::list_networks::ListNetworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_orders_output_next_token(
    input: &crate::operation::list_orders::ListOrdersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_device_identifiers_output_device_identifiers(
    input: crate::operation::list_device_identifiers::ListDeviceIdentifiersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DeviceIdentifier>> {
    let input = match input.device_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_network_resources_output_network_resources(
    input: crate::operation::list_network_resources::ListNetworkResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NetworkResource>> {
    let input = match input.network_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_network_sites_output_network_sites(
    input: crate::operation::list_network_sites::ListNetworkSitesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NetworkSite>> {
    let input = match input.network_sites {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_networks_output_networks(
    input: crate::operation::list_networks::ListNetworksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Network>> {
    let input = match input.networks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_orders_output_orders(
    input: crate::operation::list_orders::ListOrdersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Order>> {
    let input = match input.orders {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
