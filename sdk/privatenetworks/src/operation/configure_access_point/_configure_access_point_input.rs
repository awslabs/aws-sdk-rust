// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConfigureAccessPointInput {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    #[doc(hidden)]
    pub access_point_arn: std::option::Option<std::string::String>,
    /// <p>The position of the network resource.</p>
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::Position>,
    /// <p>The CPI user name of the CPI user who is certifying the coordinates of the radio unit.</p>
    #[doc(hidden)]
    pub cpi_username: std::option::Option<std::string::String>,
    /// <p>The CPI user ID of the CPI user who is certifying the coordinates of the network resource. </p>
    #[doc(hidden)]
    pub cpi_user_id: std::option::Option<std::string::String>,
    /// <p>The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.</p>
    #[doc(hidden)]
    pub cpi_user_password: std::option::Option<std::string::String>,
    /// <p>A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. </p>
    #[doc(hidden)]
    pub cpi_secret_key: std::option::Option<std::string::String>,
}
impl ConfigureAccessPointInput {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn access_point_arn(&self) -> std::option::Option<&str> {
        self.access_point_arn.as_deref()
    }
    /// <p>The position of the network resource.</p>
    pub fn position(&self) -> std::option::Option<&crate::types::Position> {
        self.position.as_ref()
    }
    /// <p>The CPI user name of the CPI user who is certifying the coordinates of the radio unit.</p>
    pub fn cpi_username(&self) -> std::option::Option<&str> {
        self.cpi_username.as_deref()
    }
    /// <p>The CPI user ID of the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn cpi_user_id(&self) -> std::option::Option<&str> {
        self.cpi_user_id.as_deref()
    }
    /// <p>The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.</p>
    pub fn cpi_user_password(&self) -> std::option::Option<&str> {
        self.cpi_user_password.as_deref()
    }
    /// <p>A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn cpi_secret_key(&self) -> std::option::Option<&str> {
        self.cpi_secret_key.as_deref()
    }
}
impl std::fmt::Debug for ConfigureAccessPointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfigureAccessPointInput");
        formatter.field("access_point_arn", &self.access_point_arn);
        formatter.field("position", &self.position);
        formatter.field("cpi_username", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_secret_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ConfigureAccessPointInput {
    /// Creates a new builder-style object to manufacture [`ConfigureAccessPointInput`](crate::operation::configure_access_point::ConfigureAccessPointInput).
    pub fn builder(
    ) -> crate::operation::configure_access_point::builders::ConfigureAccessPointInputBuilder {
        crate::operation::configure_access_point::builders::ConfigureAccessPointInputBuilder::default()
    }
}

/// A builder for [`ConfigureAccessPointInput`](crate::operation::configure_access_point::ConfigureAccessPointInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ConfigureAccessPointInputBuilder {
    pub(crate) access_point_arn: std::option::Option<std::string::String>,
    pub(crate) position: std::option::Option<crate::types::Position>,
    pub(crate) cpi_username: std::option::Option<std::string::String>,
    pub(crate) cpi_user_id: std::option::Option<std::string::String>,
    pub(crate) cpi_user_password: std::option::Option<std::string::String>,
    pub(crate) cpi_secret_key: std::option::Option<std::string::String>,
}
impl ConfigureAccessPointInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn access_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_point_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network resource.</p>
    pub fn set_access_point_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_point_arn = input;
        self
    }
    /// <p>The position of the network resource.</p>
    pub fn position(mut self, input: crate::types::Position) -> Self {
        self.position = Some(input);
        self
    }
    /// <p>The position of the network resource.</p>
    pub fn set_position(mut self, input: std::option::Option<crate::types::Position>) -> Self {
        self.position = input;
        self
    }
    /// <p>The CPI user name of the CPI user who is certifying the coordinates of the radio unit.</p>
    pub fn cpi_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpi_username = Some(input.into());
        self
    }
    /// <p>The CPI user name of the CPI user who is certifying the coordinates of the radio unit.</p>
    pub fn set_cpi_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpi_username = input;
        self
    }
    /// <p>The CPI user ID of the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn cpi_user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpi_user_id = Some(input.into());
        self
    }
    /// <p>The CPI user ID of the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn set_cpi_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpi_user_id = input;
        self
    }
    /// <p>The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.</p>
    pub fn cpi_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpi_user_password = Some(input.into());
        self
    }
    /// <p>The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.</p>
    pub fn set_cpi_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cpi_user_password = input;
        self
    }
    /// <p>A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn cpi_secret_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpi_secret_key = Some(input.into());
        self
    }
    /// <p>A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. </p>
    pub fn set_cpi_secret_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpi_secret_key = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigureAccessPointInput`](crate::operation::configure_access_point::ConfigureAccessPointInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::configure_access_point::ConfigureAccessPointInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::configure_access_point::ConfigureAccessPointInput {
                access_point_arn: self.access_point_arn,
                position: self.position,
                cpi_username: self.cpi_username,
                cpi_user_id: self.cpi_user_id,
                cpi_user_password: self.cpi_user_password,
                cpi_secret_key: self.cpi_secret_key,
            },
        )
    }
}
impl std::fmt::Debug for ConfigureAccessPointInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfigureAccessPointInputBuilder");
        formatter.field("access_point_arn", &self.access_point_arn);
        formatter.field("position", &self.position);
        formatter.field("cpi_username", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("cpi_secret_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
