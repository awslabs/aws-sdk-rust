// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateNetworkSiteInput {
    /// <p>The name of the site. You can't change the name after you create the site.</p>
    pub network_site_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the site.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the network.</p>
    pub network_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the pending plan for this site.</p>
    pub pending_plan: ::std::option::Option<crate::types::SitePlan>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p> The tags to apply to the network site. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateNetworkSiteInput {
    /// <p>The name of the site. You can't change the name after you create the site.</p>
    pub fn network_site_name(&self) -> ::std::option::Option<&str> {
        self.network_site_name.as_deref()
    }
    /// <p>The description of the site.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the network.</p>
    pub fn network_arn(&self) -> ::std::option::Option<&str> {
        self.network_arn.as_deref()
    }
    /// <p>Information about the pending plan for this site.</p>
    pub fn pending_plan(&self) -> ::std::option::Option<&crate::types::SitePlan> {
        self.pending_plan.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p> The tags to apply to the network site. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateNetworkSiteInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkSiteInput");
        formatter.field("network_site_name", &self.network_site_name);
        formatter.field("description", &self.description);
        formatter.field("network_arn", &self.network_arn);
        formatter.field("pending_plan", &self.pending_plan);
        formatter.field("client_token", &self.client_token);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("availability_zone_id", &self.availability_zone_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateNetworkSiteInput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkSiteInput`](crate::operation::create_network_site::CreateNetworkSiteInput).
    pub fn builder() -> crate::operation::create_network_site::builders::CreateNetworkSiteInputBuilder {
        crate::operation::create_network_site::builders::CreateNetworkSiteInputBuilder::default()
    }
}

/// A builder for [`CreateNetworkSiteInput`](crate::operation::create_network_site::CreateNetworkSiteInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateNetworkSiteInputBuilder {
    pub(crate) network_site_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pending_plan: ::std::option::Option<crate::types::SitePlan>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateNetworkSiteInputBuilder {
    /// <p>The name of the site. You can't change the name after you create the site.</p>
    /// This field is required.
    pub fn network_site_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_site_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the site. You can't change the name after you create the site.</p>
    pub fn set_network_site_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_site_name = input;
        self
    }
    /// <p>The name of the site. You can't change the name after you create the site.</p>
    pub fn get_network_site_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_site_name
    }
    /// <p>The description of the site.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the site.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the site.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the network.</p>
    /// This field is required.
    pub fn network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network.</p>
    pub fn set_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the network.</p>
    pub fn get_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_arn
    }
    /// <p>Information about the pending plan for this site.</p>
    pub fn pending_plan(mut self, input: crate::types::SitePlan) -> Self {
        self.pending_plan = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the pending plan for this site.</p>
    pub fn set_pending_plan(mut self, input: ::std::option::Option<crate::types::SitePlan>) -> Self {
        self.pending_plan = input;
        self
    }
    /// <p>Information about the pending plan for this site.</p>
    pub fn get_pending_plan(&self) -> &::std::option::Option<crate::types::SitePlan> {
        &self.pending_plan
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags to apply to the network site. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The tags to apply to the network site. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> The tags to apply to the network site. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateNetworkSiteInput`](crate::operation::create_network_site::CreateNetworkSiteInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_network_site::CreateNetworkSiteInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_network_site::CreateNetworkSiteInput {
            network_site_name: self.network_site_name,
            description: self.description,
            network_arn: self.network_arn,
            pending_plan: self.pending_plan,
            client_token: self.client_token,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateNetworkSiteInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkSiteInputBuilder");
        formatter.field("network_site_name", &self.network_site_name);
        formatter.field("description", &self.description);
        formatter.field("network_arn", &self.network_arn);
        formatter.field("pending_plan", &self.pending_plan);
        formatter.field("client_token", &self.client_token);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("availability_zone_id", &self.availability_zone_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
