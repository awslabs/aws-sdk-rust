// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNetworksInput {
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li>
    /// </ul>
    /// <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<
        std::collections::HashMap<
            crate::types::NetworkFilterKeys,
            std::vec::Vec<std::string::String>,
        >,
    >,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub start_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListNetworksInput {
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li>
    /// </ul>
    /// <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn filters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::NetworkFilterKeys,
            std::vec::Vec<std::string::String>,
        >,
    > {
        self.filters.as_ref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn start_token(&self) -> std::option::Option<&str> {
        self.start_token.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListNetworksInput {
    /// Creates a new builder-style object to manufacture [`ListNetworksInput`](crate::operation::list_networks::ListNetworksInput).
    pub fn builder() -> crate::operation::list_networks::builders::ListNetworksInputBuilder {
        crate::operation::list_networks::builders::ListNetworksInputBuilder::default()
    }
}

/// A builder for [`ListNetworksInput`](crate::operation::list_networks::ListNetworksInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListNetworksInputBuilder {
    pub(crate) filters: std::option::Option<
        std::collections::HashMap<
            crate::types::NetworkFilterKeys,
            std::vec::Vec<std::string::String>,
        >,
    >,
    pub(crate) start_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListNetworksInputBuilder {
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li>
    /// </ul>
    /// <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn filters(
        mut self,
        k: crate::types::NetworkFilterKeys,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k, v);
        self.filters = Some(hash_map);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li>
    /// </ul>
    /// <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::NetworkFilterKeys,
                std::vec::Vec<std::string::String>,
            >,
        >,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn start_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_token = Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_start_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_token = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListNetworksInput`](crate::operation::list_networks::ListNetworksInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_networks::ListNetworksInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_networks::ListNetworksInput {
            filters: self.filters,
            start_token: self.start_token,
            max_results: self.max_results,
        })
    }
}
