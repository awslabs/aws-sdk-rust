// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_acknowledge_order_receipt;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_activate_device_identifier;

pub(crate) mod shape_activate_network_site;

pub(crate) mod shape_configure_access_point;

pub(crate) mod shape_create_network;

pub(crate) mod shape_create_network_site;

pub(crate) mod shape_deactivate_device_identifier;

pub(crate) mod shape_delete_network;

pub(crate) mod shape_delete_network_site;

pub(crate) mod shape_get_device_identifier;

pub(crate) mod shape_get_network;

pub(crate) mod shape_get_network_resource;

pub(crate) mod shape_get_network_site;

pub(crate) mod shape_get_order;

pub(crate) mod shape_list_device_identifiers;

pub(crate) mod shape_list_network_resources;

pub(crate) mod shape_list_network_sites;

pub(crate) mod shape_list_networks;

pub(crate) mod shape_list_orders;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_ping;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_network_site;

pub(crate) mod shape_update_network_site_plan;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_acknowledge_order_receipt_input;

pub(crate) mod shape_activate_device_identifier_input;

pub(crate) mod shape_activate_network_site_input;

pub(crate) mod shape_configure_access_point_input;

pub(crate) mod shape_create_network_input;

pub(crate) mod shape_create_network_site_input;

pub(crate) mod shape_deactivate_device_identifier_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_list_device_identifiers_input;

pub(crate) mod shape_list_network_resources_input;

pub(crate) mod shape_list_network_sites_input;

pub(crate) mod shape_list_networks_input;

pub(crate) mod shape_list_orders_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_network_site_input;

pub(crate) mod shape_update_network_site_plan_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_address;

pub(crate) mod shape_device_identifier;

pub(crate) mod shape_device_identifier_list;

pub(crate) mod shape_network;

pub(crate) mod shape_network_list;

pub(crate) mod shape_network_resource;

pub(crate) mod shape_network_resource_list;

pub(crate) mod shape_network_site;

pub(crate) mod shape_network_site_list;

pub(crate) mod shape_order;

pub(crate) mod shape_order_list;

pub(crate) mod shape_position;

pub(crate) mod shape_site_plan;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_name_value_pair;

pub(crate) mod shape_name_value_pairs;

pub(crate) mod shape_network_resource_definition;

pub(crate) mod shape_tracking_information_list;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_network_resource_definitions;

pub(crate) mod shape_options;

pub(crate) mod shape_tracking_information;
