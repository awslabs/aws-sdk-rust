// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AwsClosedLostReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let awsclosedlostreason = unimplemented!();
/// match awsclosedlostreason {
///     AwsClosedLostReason::Administrative => { /* ... */ },
///     AwsClosedLostReason::BusinessAssociateAgreement => { /* ... */ },
///     AwsClosedLostReason::CompanyAcquiredDissolved => { /* ... */ },
///     AwsClosedLostReason::CompetitiveOffering => { /* ... */ },
///     AwsClosedLostReason::CustomerDataRequirement => { /* ... */ },
///     AwsClosedLostReason::CustomerDeficiency => { /* ... */ },
///     AwsClosedLostReason::CustomerExperience => { /* ... */ },
///     AwsClosedLostReason::DelayCancellationOfProject => { /* ... */ },
///     AwsClosedLostReason::Duplicate => { /* ... */ },
///     AwsClosedLostReason::DuplicateOpportunity => { /* ... */ },
///     AwsClosedLostReason::ExecutiveBlocker => { /* ... */ },
///     AwsClosedLostReason::FailedVetting => { /* ... */ },
///     AwsClosedLostReason::FeatureLimitation => { /* ... */ },
///     AwsClosedLostReason::FinancialCommercial => { /* ... */ },
///     AwsClosedLostReason::InsufficientAwsValue => { /* ... */ },
///     AwsClosedLostReason::InsufficientAmazonValue => { /* ... */ },
///     AwsClosedLostReason::InternationalConstraints => { /* ... */ },
///     AwsClosedLostReason::LegalTaxRegulatory => { /* ... */ },
///     AwsClosedLostReason::LegalTermsAndConditions => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitor => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorGoogle => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorMicrosoft => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorOther => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorRackspace => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorSoftlayer => { /* ... */ },
///     AwsClosedLostReason::LostToCompetitorVmware => { /* ... */ },
///     AwsClosedLostReason::NoCustomerReference => { /* ... */ },
///     AwsClosedLostReason::NoIntegrationResources => { /* ... */ },
///     AwsClosedLostReason::NoOpportunity => { /* ... */ },
///     AwsClosedLostReason::NoPerceivedValueOfMp => { /* ... */ },
///     AwsClosedLostReason::NoResponse => { /* ... */ },
///     AwsClosedLostReason::NoUpdate => { /* ... */ },
///     AwsClosedLostReason::NotCommittedToAws => { /* ... */ },
///     AwsClosedLostReason::OnPremisesDeployment => { /* ... */ },
///     AwsClosedLostReason::Other => { /* ... */ },
///     AwsClosedLostReason::OtherDetailsInDescription => { /* ... */ },
///     AwsClosedLostReason::PartnerGap => { /* ... */ },
///     AwsClosedLostReason::PastDue => { /* ... */ },
///     AwsClosedLostReason::PeopleRelationshipGovernance => { /* ... */ },
///     AwsClosedLostReason::PlatformTechnologyLimitation => { /* ... */ },
///     AwsClosedLostReason::PreferenceForCompetitor => { /* ... */ },
///     AwsClosedLostReason::Price => { /* ... */ },
///     AwsClosedLostReason::ProductNotOnAws => { /* ... */ },
///     AwsClosedLostReason::ProductTechnology => { /* ... */ },
///     AwsClosedLostReason::SecurityCompliance => { /* ... */ },
///     AwsClosedLostReason::SelfService => { /* ... */ },
///     AwsClosedLostReason::TechnicalLimitations => { /* ... */ },
///     AwsClosedLostReason::TermSheetImpasse => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `awsclosedlostreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AwsClosedLostReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AwsClosedLostReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AwsClosedLostReason::NewFeature` is defined.
/// Specifically, when `awsclosedlostreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AwsClosedLostReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AwsClosedLostReason {
    #[allow(missing_docs)] // documentation missing in model
    Administrative,
    #[allow(missing_docs)] // documentation missing in model
    BusinessAssociateAgreement,
    #[allow(missing_docs)] // documentation missing in model
    CompanyAcquiredDissolved,
    #[allow(missing_docs)] // documentation missing in model
    CompetitiveOffering,
    #[allow(missing_docs)] // documentation missing in model
    CustomerDataRequirement,
    #[allow(missing_docs)] // documentation missing in model
    CustomerDeficiency,
    #[allow(missing_docs)] // documentation missing in model
    CustomerExperience,
    #[allow(missing_docs)] // documentation missing in model
    DelayCancellationOfProject,
    #[allow(missing_docs)] // documentation missing in model
    Duplicate,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateOpportunity,
    #[allow(missing_docs)] // documentation missing in model
    ExecutiveBlocker,
    #[allow(missing_docs)] // documentation missing in model
    FailedVetting,
    #[allow(missing_docs)] // documentation missing in model
    FeatureLimitation,
    #[allow(missing_docs)] // documentation missing in model
    FinancialCommercial,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientAwsValue,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientAmazonValue,
    #[allow(missing_docs)] // documentation missing in model
    InternationalConstraints,
    #[allow(missing_docs)] // documentation missing in model
    LegalTaxRegulatory,
    #[allow(missing_docs)] // documentation missing in model
    LegalTermsAndConditions,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitor,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorGoogle,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorMicrosoft,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorOther,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorRackspace,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorSoftlayer,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorVmware,
    #[allow(missing_docs)] // documentation missing in model
    NoCustomerReference,
    #[allow(missing_docs)] // documentation missing in model
    NoIntegrationResources,
    #[allow(missing_docs)] // documentation missing in model
    NoOpportunity,
    #[allow(missing_docs)] // documentation missing in model
    NoPerceivedValueOfMp,
    #[allow(missing_docs)] // documentation missing in model
    NoResponse,
    #[allow(missing_docs)] // documentation missing in model
    NoUpdate,
    #[allow(missing_docs)] // documentation missing in model
    NotCommittedToAws,
    #[allow(missing_docs)] // documentation missing in model
    OnPremisesDeployment,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    OtherDetailsInDescription,
    #[allow(missing_docs)] // documentation missing in model
    PartnerGap,
    #[allow(missing_docs)] // documentation missing in model
    PastDue,
    #[allow(missing_docs)] // documentation missing in model
    PeopleRelationshipGovernance,
    #[allow(missing_docs)] // documentation missing in model
    PlatformTechnologyLimitation,
    #[allow(missing_docs)] // documentation missing in model
    PreferenceForCompetitor,
    #[allow(missing_docs)] // documentation missing in model
    Price,
    #[allow(missing_docs)] // documentation missing in model
    ProductNotOnAws,
    #[allow(missing_docs)] // documentation missing in model
    ProductTechnology,
    #[allow(missing_docs)] // documentation missing in model
    SecurityCompliance,
    #[allow(missing_docs)] // documentation missing in model
    SelfService,
    #[allow(missing_docs)] // documentation missing in model
    TechnicalLimitations,
    #[allow(missing_docs)] // documentation missing in model
    TermSheetImpasse,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AwsClosedLostReason {
    fn from(s: &str) -> Self {
        match s {
            "Administrative" => AwsClosedLostReason::Administrative,
            "Business Associate Agreement" => AwsClosedLostReason::BusinessAssociateAgreement,
            "Company Acquired/Dissolved" => AwsClosedLostReason::CompanyAcquiredDissolved,
            "Competitive Offering" => AwsClosedLostReason::CompetitiveOffering,
            "Customer Data Requirement" => AwsClosedLostReason::CustomerDataRequirement,
            "Customer Deficiency" => AwsClosedLostReason::CustomerDeficiency,
            "Customer Experience" => AwsClosedLostReason::CustomerExperience,
            "Delay / Cancellation of Project" => AwsClosedLostReason::DelayCancellationOfProject,
            "Duplicate" => AwsClosedLostReason::Duplicate,
            "Duplicate Opportunity" => AwsClosedLostReason::DuplicateOpportunity,
            "Executive Blocker" => AwsClosedLostReason::ExecutiveBlocker,
            "Failed Vetting" => AwsClosedLostReason::FailedVetting,
            "Feature Limitation" => AwsClosedLostReason::FeatureLimitation,
            "Financial/Commercial" => AwsClosedLostReason::FinancialCommercial,
            "Insufficient AWS Value" => AwsClosedLostReason::InsufficientAwsValue,
            "Insufficient Amazon Value" => AwsClosedLostReason::InsufficientAmazonValue,
            "International Constraints" => AwsClosedLostReason::InternationalConstraints,
            "Legal / Tax / Regulatory" => AwsClosedLostReason::LegalTaxRegulatory,
            "Legal Terms and Conditions" => AwsClosedLostReason::LegalTermsAndConditions,
            "Lost to Competitor" => AwsClosedLostReason::LostToCompetitor,
            "Lost to Competitor - Google" => AwsClosedLostReason::LostToCompetitorGoogle,
            "Lost to Competitor - Microsoft" => AwsClosedLostReason::LostToCompetitorMicrosoft,
            "Lost to Competitor - Other" => AwsClosedLostReason::LostToCompetitorOther,
            "Lost to Competitor - Rackspace" => AwsClosedLostReason::LostToCompetitorRackspace,
            "Lost to Competitor - SoftLayer" => AwsClosedLostReason::LostToCompetitorSoftlayer,
            "Lost to Competitor - VMWare" => AwsClosedLostReason::LostToCompetitorVmware,
            "No Customer Reference" => AwsClosedLostReason::NoCustomerReference,
            "No Integration Resources" => AwsClosedLostReason::NoIntegrationResources,
            "No Opportunity" => AwsClosedLostReason::NoOpportunity,
            "No Perceived Value of MP" => AwsClosedLostReason::NoPerceivedValueOfMp,
            "No Response" => AwsClosedLostReason::NoResponse,
            "No Update" => AwsClosedLostReason::NoUpdate,
            "Not Committed to AWS" => AwsClosedLostReason::NotCommittedToAws,
            "On Premises Deployment" => AwsClosedLostReason::OnPremisesDeployment,
            "Other" => AwsClosedLostReason::Other,
            "Other (Details in Description)" => AwsClosedLostReason::OtherDetailsInDescription,
            "Partner Gap" => AwsClosedLostReason::PartnerGap,
            "Past Due" => AwsClosedLostReason::PastDue,
            "People/Relationship/Governance" => AwsClosedLostReason::PeopleRelationshipGovernance,
            "Platform Technology Limitation" => AwsClosedLostReason::PlatformTechnologyLimitation,
            "Preference for Competitor" => AwsClosedLostReason::PreferenceForCompetitor,
            "Price" => AwsClosedLostReason::Price,
            "Product Not on AWS" => AwsClosedLostReason::ProductNotOnAws,
            "Product/Technology" => AwsClosedLostReason::ProductTechnology,
            "Security / Compliance" => AwsClosedLostReason::SecurityCompliance,
            "Self-Service" => AwsClosedLostReason::SelfService,
            "Technical Limitations" => AwsClosedLostReason::TechnicalLimitations,
            "Term Sheet Impasse" => AwsClosedLostReason::TermSheetImpasse,
            other => AwsClosedLostReason::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AwsClosedLostReason {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AwsClosedLostReason::from(s))
    }
}
impl AwsClosedLostReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AwsClosedLostReason::Administrative => "Administrative",
            AwsClosedLostReason::BusinessAssociateAgreement => "Business Associate Agreement",
            AwsClosedLostReason::CompanyAcquiredDissolved => "Company Acquired/Dissolved",
            AwsClosedLostReason::CompetitiveOffering => "Competitive Offering",
            AwsClosedLostReason::CustomerDataRequirement => "Customer Data Requirement",
            AwsClosedLostReason::CustomerDeficiency => "Customer Deficiency",
            AwsClosedLostReason::CustomerExperience => "Customer Experience",
            AwsClosedLostReason::DelayCancellationOfProject => "Delay / Cancellation of Project",
            AwsClosedLostReason::Duplicate => "Duplicate",
            AwsClosedLostReason::DuplicateOpportunity => "Duplicate Opportunity",
            AwsClosedLostReason::ExecutiveBlocker => "Executive Blocker",
            AwsClosedLostReason::FailedVetting => "Failed Vetting",
            AwsClosedLostReason::FeatureLimitation => "Feature Limitation",
            AwsClosedLostReason::FinancialCommercial => "Financial/Commercial",
            AwsClosedLostReason::InsufficientAwsValue => "Insufficient AWS Value",
            AwsClosedLostReason::InsufficientAmazonValue => "Insufficient Amazon Value",
            AwsClosedLostReason::InternationalConstraints => "International Constraints",
            AwsClosedLostReason::LegalTaxRegulatory => "Legal / Tax / Regulatory",
            AwsClosedLostReason::LegalTermsAndConditions => "Legal Terms and Conditions",
            AwsClosedLostReason::LostToCompetitor => "Lost to Competitor",
            AwsClosedLostReason::LostToCompetitorGoogle => "Lost to Competitor - Google",
            AwsClosedLostReason::LostToCompetitorMicrosoft => "Lost to Competitor - Microsoft",
            AwsClosedLostReason::LostToCompetitorOther => "Lost to Competitor - Other",
            AwsClosedLostReason::LostToCompetitorRackspace => "Lost to Competitor - Rackspace",
            AwsClosedLostReason::LostToCompetitorSoftlayer => "Lost to Competitor - SoftLayer",
            AwsClosedLostReason::LostToCompetitorVmware => "Lost to Competitor - VMWare",
            AwsClosedLostReason::NoCustomerReference => "No Customer Reference",
            AwsClosedLostReason::NoIntegrationResources => "No Integration Resources",
            AwsClosedLostReason::NoOpportunity => "No Opportunity",
            AwsClosedLostReason::NoPerceivedValueOfMp => "No Perceived Value of MP",
            AwsClosedLostReason::NoResponse => "No Response",
            AwsClosedLostReason::NoUpdate => "No Update",
            AwsClosedLostReason::NotCommittedToAws => "Not Committed to AWS",
            AwsClosedLostReason::OnPremisesDeployment => "On Premises Deployment",
            AwsClosedLostReason::Other => "Other",
            AwsClosedLostReason::OtherDetailsInDescription => "Other (Details in Description)",
            AwsClosedLostReason::PartnerGap => "Partner Gap",
            AwsClosedLostReason::PastDue => "Past Due",
            AwsClosedLostReason::PeopleRelationshipGovernance => "People/Relationship/Governance",
            AwsClosedLostReason::PlatformTechnologyLimitation => "Platform Technology Limitation",
            AwsClosedLostReason::PreferenceForCompetitor => "Preference for Competitor",
            AwsClosedLostReason::Price => "Price",
            AwsClosedLostReason::ProductNotOnAws => "Product Not on AWS",
            AwsClosedLostReason::ProductTechnology => "Product/Technology",
            AwsClosedLostReason::SecurityCompliance => "Security / Compliance",
            AwsClosedLostReason::SelfService => "Self-Service",
            AwsClosedLostReason::TechnicalLimitations => "Technical Limitations",
            AwsClosedLostReason::TermSheetImpasse => "Term Sheet Impasse",
            AwsClosedLostReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Administrative",
            "Business Associate Agreement",
            "Company Acquired/Dissolved",
            "Competitive Offering",
            "Customer Data Requirement",
            "Customer Deficiency",
            "Customer Experience",
            "Delay / Cancellation of Project",
            "Duplicate",
            "Duplicate Opportunity",
            "Executive Blocker",
            "Failed Vetting",
            "Feature Limitation",
            "Financial/Commercial",
            "Insufficient AWS Value",
            "Insufficient Amazon Value",
            "International Constraints",
            "Legal / Tax / Regulatory",
            "Legal Terms and Conditions",
            "Lost to Competitor",
            "Lost to Competitor - Google",
            "Lost to Competitor - Microsoft",
            "Lost to Competitor - Other",
            "Lost to Competitor - Rackspace",
            "Lost to Competitor - SoftLayer",
            "Lost to Competitor - VMWare",
            "No Customer Reference",
            "No Integration Resources",
            "No Opportunity",
            "No Perceived Value of MP",
            "No Response",
            "No Update",
            "Not Committed to AWS",
            "On Premises Deployment",
            "Other",
            "Other (Details in Description)",
            "Partner Gap",
            "Past Due",
            "People/Relationship/Governance",
            "Platform Technology Limitation",
            "Preference for Competitor",
            "Price",
            "Product Not on AWS",
            "Product/Technology",
            "Security / Compliance",
            "Self-Service",
            "Technical Limitations",
            "Term Sheet Impasse",
        ]
    }
}
impl ::std::convert::AsRef<str> for AwsClosedLostReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AwsClosedLostReason {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AwsClosedLostReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AwsClosedLostReason::Administrative => write!(f, "Administrative"),
            AwsClosedLostReason::BusinessAssociateAgreement => write!(f, "Business Associate Agreement"),
            AwsClosedLostReason::CompanyAcquiredDissolved => write!(f, "Company Acquired/Dissolved"),
            AwsClosedLostReason::CompetitiveOffering => write!(f, "Competitive Offering"),
            AwsClosedLostReason::CustomerDataRequirement => write!(f, "Customer Data Requirement"),
            AwsClosedLostReason::CustomerDeficiency => write!(f, "Customer Deficiency"),
            AwsClosedLostReason::CustomerExperience => write!(f, "Customer Experience"),
            AwsClosedLostReason::DelayCancellationOfProject => write!(f, "Delay / Cancellation of Project"),
            AwsClosedLostReason::Duplicate => write!(f, "Duplicate"),
            AwsClosedLostReason::DuplicateOpportunity => write!(f, "Duplicate Opportunity"),
            AwsClosedLostReason::ExecutiveBlocker => write!(f, "Executive Blocker"),
            AwsClosedLostReason::FailedVetting => write!(f, "Failed Vetting"),
            AwsClosedLostReason::FeatureLimitation => write!(f, "Feature Limitation"),
            AwsClosedLostReason::FinancialCommercial => write!(f, "Financial/Commercial"),
            AwsClosedLostReason::InsufficientAwsValue => write!(f, "Insufficient AWS Value"),
            AwsClosedLostReason::InsufficientAmazonValue => write!(f, "Insufficient Amazon Value"),
            AwsClosedLostReason::InternationalConstraints => write!(f, "International Constraints"),
            AwsClosedLostReason::LegalTaxRegulatory => write!(f, "Legal / Tax / Regulatory"),
            AwsClosedLostReason::LegalTermsAndConditions => write!(f, "Legal Terms and Conditions"),
            AwsClosedLostReason::LostToCompetitor => write!(f, "Lost to Competitor"),
            AwsClosedLostReason::LostToCompetitorGoogle => write!(f, "Lost to Competitor - Google"),
            AwsClosedLostReason::LostToCompetitorMicrosoft => write!(f, "Lost to Competitor - Microsoft"),
            AwsClosedLostReason::LostToCompetitorOther => write!(f, "Lost to Competitor - Other"),
            AwsClosedLostReason::LostToCompetitorRackspace => write!(f, "Lost to Competitor - Rackspace"),
            AwsClosedLostReason::LostToCompetitorSoftlayer => write!(f, "Lost to Competitor - SoftLayer"),
            AwsClosedLostReason::LostToCompetitorVmware => write!(f, "Lost to Competitor - VMWare"),
            AwsClosedLostReason::NoCustomerReference => write!(f, "No Customer Reference"),
            AwsClosedLostReason::NoIntegrationResources => write!(f, "No Integration Resources"),
            AwsClosedLostReason::NoOpportunity => write!(f, "No Opportunity"),
            AwsClosedLostReason::NoPerceivedValueOfMp => write!(f, "No Perceived Value of MP"),
            AwsClosedLostReason::NoResponse => write!(f, "No Response"),
            AwsClosedLostReason::NoUpdate => write!(f, "No Update"),
            AwsClosedLostReason::NotCommittedToAws => write!(f, "Not Committed to AWS"),
            AwsClosedLostReason::OnPremisesDeployment => write!(f, "On Premises Deployment"),
            AwsClosedLostReason::Other => write!(f, "Other"),
            AwsClosedLostReason::OtherDetailsInDescription => write!(f, "Other (Details in Description)"),
            AwsClosedLostReason::PartnerGap => write!(f, "Partner Gap"),
            AwsClosedLostReason::PastDue => write!(f, "Past Due"),
            AwsClosedLostReason::PeopleRelationshipGovernance => write!(f, "People/Relationship/Governance"),
            AwsClosedLostReason::PlatformTechnologyLimitation => write!(f, "Platform Technology Limitation"),
            AwsClosedLostReason::PreferenceForCompetitor => write!(f, "Preference for Competitor"),
            AwsClosedLostReason::Price => write!(f, "Price"),
            AwsClosedLostReason::ProductNotOnAws => write!(f, "Product Not on AWS"),
            AwsClosedLostReason::ProductTechnology => write!(f, "Product/Technology"),
            AwsClosedLostReason::SecurityCompliance => write!(f, "Security / Compliance"),
            AwsClosedLostReason::SelfService => write!(f, "Self-Service"),
            AwsClosedLostReason::TechnicalLimitations => write!(f, "Technical Limitations"),
            AwsClosedLostReason::TermSheetImpasse => write!(f, "Term Sheet Impasse"),
            AwsClosedLostReason::Unknown(value) => write!(f, "{value}"),
        }
    }
}
