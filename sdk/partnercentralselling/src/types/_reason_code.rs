// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ReasonCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let reasoncode = unimplemented!();
/// match reasoncode {
///     ReasonCode::EngagementAccessDenied => { /* ... */ },
///     ReasonCode::EngagementConflict => { /* ... */ },
///     ReasonCode::EngagementInvitationConflict => { /* ... */ },
///     ReasonCode::EngagementValidationFailed => { /* ... */ },
///     ReasonCode::InternalError => { /* ... */ },
///     ReasonCode::InvitationAccessDenied => { /* ... */ },
///     ReasonCode::InvitationValidationFailed => { /* ... */ },
///     ReasonCode::OpportunityAccessDenied => { /* ... */ },
///     ReasonCode::OpportunityConflict => { /* ... */ },
///     ReasonCode::OpportunitySubmissionFailed => { /* ... */ },
///     ReasonCode::OpportunityValidationFailed => { /* ... */ },
///     ReasonCode::RequestThrottled => { /* ... */ },
///     ReasonCode::ResourceSnapshotAccessDenied => { /* ... */ },
///     ReasonCode::ResourceSnapshotConflict => { /* ... */ },
///     ReasonCode::ResourceSnapshotJobAccessDenied => { /* ... */ },
///     ReasonCode::ResourceSnapshotJobConflict => { /* ... */ },
///     ReasonCode::ResourceSnapshotJobValidationFailed => { /* ... */ },
///     ReasonCode::ResourceSnapshotValidationFailed => { /* ... */ },
///     ReasonCode::ServiceQuotaExceeded => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `reasoncode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ReasonCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ReasonCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ReasonCode::NewFeature` is defined.
/// Specifically, when `reasoncode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ReasonCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ReasonCode {
    #[allow(missing_docs)] // documentation missing in model
    EngagementAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    EngagementConflict,
    #[allow(missing_docs)] // documentation missing in model
    EngagementInvitationConflict,
    #[allow(missing_docs)] // documentation missing in model
    EngagementValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    InvitationAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    InvitationValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    OpportunityAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    OpportunityConflict,
    #[allow(missing_docs)] // documentation missing in model
    OpportunitySubmissionFailed,
    #[allow(missing_docs)] // documentation missing in model
    OpportunityValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    RequestThrottled,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotConflict,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotJobAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotJobConflict,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotJobValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    ResourceSnapshotValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    ServiceQuotaExceeded,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ReasonCode {
    fn from(s: &str) -> Self {
        match s {
            "EngagementAccessDenied" => ReasonCode::EngagementAccessDenied,
            "EngagementConflict" => ReasonCode::EngagementConflict,
            "EngagementInvitationConflict" => ReasonCode::EngagementInvitationConflict,
            "EngagementValidationFailed" => ReasonCode::EngagementValidationFailed,
            "InternalError" => ReasonCode::InternalError,
            "InvitationAccessDenied" => ReasonCode::InvitationAccessDenied,
            "InvitationValidationFailed" => ReasonCode::InvitationValidationFailed,
            "OpportunityAccessDenied" => ReasonCode::OpportunityAccessDenied,
            "OpportunityConflict" => ReasonCode::OpportunityConflict,
            "OpportunitySubmissionFailed" => ReasonCode::OpportunitySubmissionFailed,
            "OpportunityValidationFailed" => ReasonCode::OpportunityValidationFailed,
            "RequestThrottled" => ReasonCode::RequestThrottled,
            "ResourceSnapshotAccessDenied" => ReasonCode::ResourceSnapshotAccessDenied,
            "ResourceSnapshotConflict" => ReasonCode::ResourceSnapshotConflict,
            "ResourceSnapshotJobAccessDenied" => ReasonCode::ResourceSnapshotJobAccessDenied,
            "ResourceSnapshotJobConflict" => ReasonCode::ResourceSnapshotJobConflict,
            "ResourceSnapshotJobValidationFailed" => ReasonCode::ResourceSnapshotJobValidationFailed,
            "ResourceSnapshotValidationFailed" => ReasonCode::ResourceSnapshotValidationFailed,
            "ServiceQuotaExceeded" => ReasonCode::ServiceQuotaExceeded,
            other => ReasonCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ReasonCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ReasonCode::from(s))
    }
}
impl ReasonCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ReasonCode::EngagementAccessDenied => "EngagementAccessDenied",
            ReasonCode::EngagementConflict => "EngagementConflict",
            ReasonCode::EngagementInvitationConflict => "EngagementInvitationConflict",
            ReasonCode::EngagementValidationFailed => "EngagementValidationFailed",
            ReasonCode::InternalError => "InternalError",
            ReasonCode::InvitationAccessDenied => "InvitationAccessDenied",
            ReasonCode::InvitationValidationFailed => "InvitationValidationFailed",
            ReasonCode::OpportunityAccessDenied => "OpportunityAccessDenied",
            ReasonCode::OpportunityConflict => "OpportunityConflict",
            ReasonCode::OpportunitySubmissionFailed => "OpportunitySubmissionFailed",
            ReasonCode::OpportunityValidationFailed => "OpportunityValidationFailed",
            ReasonCode::RequestThrottled => "RequestThrottled",
            ReasonCode::ResourceSnapshotAccessDenied => "ResourceSnapshotAccessDenied",
            ReasonCode::ResourceSnapshotConflict => "ResourceSnapshotConflict",
            ReasonCode::ResourceSnapshotJobAccessDenied => "ResourceSnapshotJobAccessDenied",
            ReasonCode::ResourceSnapshotJobConflict => "ResourceSnapshotJobConflict",
            ReasonCode::ResourceSnapshotJobValidationFailed => "ResourceSnapshotJobValidationFailed",
            ReasonCode::ResourceSnapshotValidationFailed => "ResourceSnapshotValidationFailed",
            ReasonCode::ServiceQuotaExceeded => "ServiceQuotaExceeded",
            ReasonCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "EngagementAccessDenied",
            "EngagementConflict",
            "EngagementInvitationConflict",
            "EngagementValidationFailed",
            "InternalError",
            "InvitationAccessDenied",
            "InvitationValidationFailed",
            "OpportunityAccessDenied",
            "OpportunityConflict",
            "OpportunitySubmissionFailed",
            "OpportunityValidationFailed",
            "RequestThrottled",
            "ResourceSnapshotAccessDenied",
            "ResourceSnapshotConflict",
            "ResourceSnapshotJobAccessDenied",
            "ResourceSnapshotJobConflict",
            "ResourceSnapshotJobValidationFailed",
            "ResourceSnapshotValidationFailed",
            "ServiceQuotaExceeded",
        ]
    }
}
impl ::std::convert::AsRef<str> for ReasonCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ReasonCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ReasonCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ReasonCode::EngagementAccessDenied => write!(f, "EngagementAccessDenied"),
            ReasonCode::EngagementConflict => write!(f, "EngagementConflict"),
            ReasonCode::EngagementInvitationConflict => write!(f, "EngagementInvitationConflict"),
            ReasonCode::EngagementValidationFailed => write!(f, "EngagementValidationFailed"),
            ReasonCode::InternalError => write!(f, "InternalError"),
            ReasonCode::InvitationAccessDenied => write!(f, "InvitationAccessDenied"),
            ReasonCode::InvitationValidationFailed => write!(f, "InvitationValidationFailed"),
            ReasonCode::OpportunityAccessDenied => write!(f, "OpportunityAccessDenied"),
            ReasonCode::OpportunityConflict => write!(f, "OpportunityConflict"),
            ReasonCode::OpportunitySubmissionFailed => write!(f, "OpportunitySubmissionFailed"),
            ReasonCode::OpportunityValidationFailed => write!(f, "OpportunityValidationFailed"),
            ReasonCode::RequestThrottled => write!(f, "RequestThrottled"),
            ReasonCode::ResourceSnapshotAccessDenied => write!(f, "ResourceSnapshotAccessDenied"),
            ReasonCode::ResourceSnapshotConflict => write!(f, "ResourceSnapshotConflict"),
            ReasonCode::ResourceSnapshotJobAccessDenied => write!(f, "ResourceSnapshotJobAccessDenied"),
            ReasonCode::ResourceSnapshotJobConflict => write!(f, "ResourceSnapshotJobConflict"),
            ReasonCode::ResourceSnapshotJobValidationFailed => write!(f, "ResourceSnapshotJobValidationFailed"),
            ReasonCode::ResourceSnapshotValidationFailed => write!(f, "ResourceSnapshotValidationFailed"),
            ReasonCode::ServiceQuotaExceeded => write!(f, "ServiceQuotaExceeded"),
            ReasonCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
