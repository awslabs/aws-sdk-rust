// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AwsOpportunityStage`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let awsopportunitystage = unimplemented!();
/// match awsopportunitystage {
///     AwsOpportunityStage::BuildingIntegration => { /* ... */ },
///     AwsOpportunityStage::BusinessValidation => { /* ... */ },
///     AwsOpportunityStage::ClosedIncomplete => { /* ... */ },
///     AwsOpportunityStage::ClosedLost => { /* ... */ },
///     AwsOpportunityStage::Committed => { /* ... */ },
///     AwsOpportunityStage::Completed => { /* ... */ },
///     AwsOpportunityStage::ContractNegotiation => { /* ... */ },
///     AwsOpportunityStage::DeferredToPartner => { /* ... */ },
///     AwsOpportunityStage::Engaged => { /* ... */ },
///     AwsOpportunityStage::Evaluating => { /* ... */ },
///     AwsOpportunityStage::Identified => { /* ... */ },
///     AwsOpportunityStage::InProgress => { /* ... */ },
///     AwsOpportunityStage::Launched => { /* ... */ },
///     AwsOpportunityStage::NotStarted => { /* ... */ },
///     AwsOpportunityStage::OnHold => { /* ... */ },
///     AwsOpportunityStage::Onboarding => { /* ... */ },
///     AwsOpportunityStage::Prospect => { /* ... */ },
///     AwsOpportunityStage::Qualified => { /* ... */ },
///     AwsOpportunityStage::Qualify => { /* ... */ },
///     AwsOpportunityStage::Research => { /* ... */ },
///     AwsOpportunityStage::SellerEngaged => { /* ... */ },
///     AwsOpportunityStage::SellerRegistered => { /* ... */ },
///     AwsOpportunityStage::TechnicalValidation => { /* ... */ },
///     AwsOpportunityStage::TermSheetNegotiation => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `awsopportunitystage` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AwsOpportunityStage::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AwsOpportunityStage::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AwsOpportunityStage::NewFeature` is defined.
/// Specifically, when `awsopportunitystage` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AwsOpportunityStage::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AwsOpportunityStage {
    #[allow(missing_docs)] // documentation missing in model
    BuildingIntegration,
    #[allow(missing_docs)] // documentation missing in model
    BusinessValidation,
    #[allow(missing_docs)] // documentation missing in model
    ClosedIncomplete,
    #[allow(missing_docs)] // documentation missing in model
    ClosedLost,
    #[allow(missing_docs)] // documentation missing in model
    Committed,
    #[allow(missing_docs)] // documentation missing in model
    Completed,
    #[allow(missing_docs)] // documentation missing in model
    ContractNegotiation,
    #[allow(missing_docs)] // documentation missing in model
    DeferredToPartner,
    #[allow(missing_docs)] // documentation missing in model
    Engaged,
    #[allow(missing_docs)] // documentation missing in model
    Evaluating,
    #[allow(missing_docs)] // documentation missing in model
    Identified,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    Launched,
    #[allow(missing_docs)] // documentation missing in model
    NotStarted,
    #[allow(missing_docs)] // documentation missing in model
    OnHold,
    #[allow(missing_docs)] // documentation missing in model
    Onboarding,
    #[allow(missing_docs)] // documentation missing in model
    Prospect,
    #[allow(missing_docs)] // documentation missing in model
    Qualified,
    #[allow(missing_docs)] // documentation missing in model
    Qualify,
    #[allow(missing_docs)] // documentation missing in model
    Research,
    #[allow(missing_docs)] // documentation missing in model
    SellerEngaged,
    #[allow(missing_docs)] // documentation missing in model
    SellerRegistered,
    #[allow(missing_docs)] // documentation missing in model
    TechnicalValidation,
    #[allow(missing_docs)] // documentation missing in model
    TermSheetNegotiation,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AwsOpportunityStage {
    fn from(s: &str) -> Self {
        match s {
            "Building Integration" => AwsOpportunityStage::BuildingIntegration,
            "Business Validation" => AwsOpportunityStage::BusinessValidation,
            "Closed Incomplete" => AwsOpportunityStage::ClosedIncomplete,
            "Closed Lost" => AwsOpportunityStage::ClosedLost,
            "Committed" => AwsOpportunityStage::Committed,
            "Completed" => AwsOpportunityStage::Completed,
            "Contract Negotiation" => AwsOpportunityStage::ContractNegotiation,
            "Deferred to Partner" => AwsOpportunityStage::DeferredToPartner,
            "Engaged" => AwsOpportunityStage::Engaged,
            "Evaluating" => AwsOpportunityStage::Evaluating,
            "Identified" => AwsOpportunityStage::Identified,
            "In Progress" => AwsOpportunityStage::InProgress,
            "Launched" => AwsOpportunityStage::Launched,
            "Not Started" => AwsOpportunityStage::NotStarted,
            "On-hold" => AwsOpportunityStage::OnHold,
            "Onboarding" => AwsOpportunityStage::Onboarding,
            "Prospect" => AwsOpportunityStage::Prospect,
            "Qualified" => AwsOpportunityStage::Qualified,
            "Qualify" => AwsOpportunityStage::Qualify,
            "Research" => AwsOpportunityStage::Research,
            "Seller Engaged" => AwsOpportunityStage::SellerEngaged,
            "Seller Registered" => AwsOpportunityStage::SellerRegistered,
            "Technical Validation" => AwsOpportunityStage::TechnicalValidation,
            "Term Sheet Negotiation" => AwsOpportunityStage::TermSheetNegotiation,
            other => AwsOpportunityStage::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AwsOpportunityStage {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AwsOpportunityStage::from(s))
    }
}
impl AwsOpportunityStage {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AwsOpportunityStage::BuildingIntegration => "Building Integration",
            AwsOpportunityStage::BusinessValidation => "Business Validation",
            AwsOpportunityStage::ClosedIncomplete => "Closed Incomplete",
            AwsOpportunityStage::ClosedLost => "Closed Lost",
            AwsOpportunityStage::Committed => "Committed",
            AwsOpportunityStage::Completed => "Completed",
            AwsOpportunityStage::ContractNegotiation => "Contract Negotiation",
            AwsOpportunityStage::DeferredToPartner => "Deferred to Partner",
            AwsOpportunityStage::Engaged => "Engaged",
            AwsOpportunityStage::Evaluating => "Evaluating",
            AwsOpportunityStage::Identified => "Identified",
            AwsOpportunityStage::InProgress => "In Progress",
            AwsOpportunityStage::Launched => "Launched",
            AwsOpportunityStage::NotStarted => "Not Started",
            AwsOpportunityStage::OnHold => "On-hold",
            AwsOpportunityStage::Onboarding => "Onboarding",
            AwsOpportunityStage::Prospect => "Prospect",
            AwsOpportunityStage::Qualified => "Qualified",
            AwsOpportunityStage::Qualify => "Qualify",
            AwsOpportunityStage::Research => "Research",
            AwsOpportunityStage::SellerEngaged => "Seller Engaged",
            AwsOpportunityStage::SellerRegistered => "Seller Registered",
            AwsOpportunityStage::TechnicalValidation => "Technical Validation",
            AwsOpportunityStage::TermSheetNegotiation => "Term Sheet Negotiation",
            AwsOpportunityStage::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Building Integration",
            "Business Validation",
            "Closed Incomplete",
            "Closed Lost",
            "Committed",
            "Completed",
            "Contract Negotiation",
            "Deferred to Partner",
            "Engaged",
            "Evaluating",
            "Identified",
            "In Progress",
            "Launched",
            "Not Started",
            "On-hold",
            "Onboarding",
            "Prospect",
            "Qualified",
            "Qualify",
            "Research",
            "Seller Engaged",
            "Seller Registered",
            "Technical Validation",
            "Term Sheet Negotiation",
        ]
    }
}
impl ::std::convert::AsRef<str> for AwsOpportunityStage {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AwsOpportunityStage {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AwsOpportunityStage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AwsOpportunityStage::BuildingIntegration => write!(f, "Building Integration"),
            AwsOpportunityStage::BusinessValidation => write!(f, "Business Validation"),
            AwsOpportunityStage::ClosedIncomplete => write!(f, "Closed Incomplete"),
            AwsOpportunityStage::ClosedLost => write!(f, "Closed Lost"),
            AwsOpportunityStage::Committed => write!(f, "Committed"),
            AwsOpportunityStage::Completed => write!(f, "Completed"),
            AwsOpportunityStage::ContractNegotiation => write!(f, "Contract Negotiation"),
            AwsOpportunityStage::DeferredToPartner => write!(f, "Deferred to Partner"),
            AwsOpportunityStage::Engaged => write!(f, "Engaged"),
            AwsOpportunityStage::Evaluating => write!(f, "Evaluating"),
            AwsOpportunityStage::Identified => write!(f, "Identified"),
            AwsOpportunityStage::InProgress => write!(f, "In Progress"),
            AwsOpportunityStage::Launched => write!(f, "Launched"),
            AwsOpportunityStage::NotStarted => write!(f, "Not Started"),
            AwsOpportunityStage::OnHold => write!(f, "On-hold"),
            AwsOpportunityStage::Onboarding => write!(f, "Onboarding"),
            AwsOpportunityStage::Prospect => write!(f, "Prospect"),
            AwsOpportunityStage::Qualified => write!(f, "Qualified"),
            AwsOpportunityStage::Qualify => write!(f, "Qualify"),
            AwsOpportunityStage::Research => write!(f, "Research"),
            AwsOpportunityStage::SellerEngaged => write!(f, "Seller Engaged"),
            AwsOpportunityStage::SellerRegistered => write!(f, "Seller Registered"),
            AwsOpportunityStage::TechnicalValidation => write!(f, "Technical Validation"),
            AwsOpportunityStage::TermSheetNegotiation => write!(f, "Term Sheet Negotiation"),
            AwsOpportunityStage::Unknown(value) => write!(f, "{value}"),
        }
    }
}
