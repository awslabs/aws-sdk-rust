// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ClosedLostReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let closedlostreason = unimplemented!();
/// match closedlostreason {
///     ClosedLostReason::CustomerDeficiency => { /* ... */ },
///     ClosedLostReason::CustomerExperience => { /* ... */ },
///     ClosedLostReason::DelayCancellationOfProject => { /* ... */ },
///     ClosedLostReason::Financialcommercial => { /* ... */ },
///     ClosedLostReason::LegalTaxRegulatory => { /* ... */ },
///     ClosedLostReason::LostToCompetitorGoogle => { /* ... */ },
///     ClosedLostReason::LostToCompetitorMicrosoft => { /* ... */ },
///     ClosedLostReason::LostToCompetitorOther => { /* ... */ },
///     ClosedLostReason::LostToCompetitorSoftlayer => { /* ... */ },
///     ClosedLostReason::LostToCompetitorVmware => { /* ... */ },
///     ClosedLostReason::NoOpportunity => { /* ... */ },
///     ClosedLostReason::OnPremisesDeployment => { /* ... */ },
///     ClosedLostReason::Other => { /* ... */ },
///     ClosedLostReason::PartnerGap => { /* ... */ },
///     ClosedLostReason::Peoplerelationshipgovernance => { /* ... */ },
///     ClosedLostReason::Price => { /* ... */ },
///     ClosedLostReason::Producttechnology => { /* ... */ },
///     ClosedLostReason::SecurityCompliance => { /* ... */ },
///     ClosedLostReason::TechnicalLimitations => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `closedlostreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ClosedLostReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ClosedLostReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ClosedLostReason::NewFeature` is defined.
/// Specifically, when `closedlostreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ClosedLostReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ClosedLostReason {
    #[allow(missing_docs)] // documentation missing in model
    CustomerDeficiency,
    #[allow(missing_docs)] // documentation missing in model
    CustomerExperience,
    #[allow(missing_docs)] // documentation missing in model
    DelayCancellationOfProject,
    #[allow(missing_docs)] // documentation missing in model
    Financialcommercial,
    #[allow(missing_docs)] // documentation missing in model
    LegalTaxRegulatory,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorGoogle,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorMicrosoft,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorOther,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorSoftlayer,
    #[allow(missing_docs)] // documentation missing in model
    LostToCompetitorVmware,
    #[allow(missing_docs)] // documentation missing in model
    NoOpportunity,
    #[allow(missing_docs)] // documentation missing in model
    OnPremisesDeployment,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    PartnerGap,
    #[allow(missing_docs)] // documentation missing in model
    Peoplerelationshipgovernance,
    #[allow(missing_docs)] // documentation missing in model
    Price,
    #[allow(missing_docs)] // documentation missing in model
    Producttechnology,
    #[allow(missing_docs)] // documentation missing in model
    SecurityCompliance,
    #[allow(missing_docs)] // documentation missing in model
    TechnicalLimitations,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ClosedLostReason {
    fn from(s: &str) -> Self {
        match s {
            "Customer Deficiency" => ClosedLostReason::CustomerDeficiency,
            "Customer Experience" => ClosedLostReason::CustomerExperience,
            "Delay / Cancellation of Project" => ClosedLostReason::DelayCancellationOfProject,
            "Financial/Commercial" => ClosedLostReason::Financialcommercial,
            "Legal / Tax / Regulatory" => ClosedLostReason::LegalTaxRegulatory,
            "Lost to Competitor - Google" => ClosedLostReason::LostToCompetitorGoogle,
            "Lost to Competitor - Microsoft" => ClosedLostReason::LostToCompetitorMicrosoft,
            "Lost to Competitor - Other" => ClosedLostReason::LostToCompetitorOther,
            "Lost to Competitor - SoftLayer" => ClosedLostReason::LostToCompetitorSoftlayer,
            "Lost to Competitor - VMWare" => ClosedLostReason::LostToCompetitorVmware,
            "No Opportunity" => ClosedLostReason::NoOpportunity,
            "On Premises Deployment" => ClosedLostReason::OnPremisesDeployment,
            "Other" => ClosedLostReason::Other,
            "Partner Gap" => ClosedLostReason::PartnerGap,
            "People/Relationship/Governance" => ClosedLostReason::Peoplerelationshipgovernance,
            "Price" => ClosedLostReason::Price,
            "Product/Technology" => ClosedLostReason::Producttechnology,
            "Security / Compliance" => ClosedLostReason::SecurityCompliance,
            "Technical Limitations" => ClosedLostReason::TechnicalLimitations,
            other => ClosedLostReason::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ClosedLostReason {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ClosedLostReason::from(s))
    }
}
impl ClosedLostReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ClosedLostReason::CustomerDeficiency => "Customer Deficiency",
            ClosedLostReason::CustomerExperience => "Customer Experience",
            ClosedLostReason::DelayCancellationOfProject => "Delay / Cancellation of Project",
            ClosedLostReason::Financialcommercial => "Financial/Commercial",
            ClosedLostReason::LegalTaxRegulatory => "Legal / Tax / Regulatory",
            ClosedLostReason::LostToCompetitorGoogle => "Lost to Competitor - Google",
            ClosedLostReason::LostToCompetitorMicrosoft => "Lost to Competitor - Microsoft",
            ClosedLostReason::LostToCompetitorOther => "Lost to Competitor - Other",
            ClosedLostReason::LostToCompetitorSoftlayer => "Lost to Competitor - SoftLayer",
            ClosedLostReason::LostToCompetitorVmware => "Lost to Competitor - VMWare",
            ClosedLostReason::NoOpportunity => "No Opportunity",
            ClosedLostReason::OnPremisesDeployment => "On Premises Deployment",
            ClosedLostReason::Other => "Other",
            ClosedLostReason::PartnerGap => "Partner Gap",
            ClosedLostReason::Peoplerelationshipgovernance => "People/Relationship/Governance",
            ClosedLostReason::Price => "Price",
            ClosedLostReason::Producttechnology => "Product/Technology",
            ClosedLostReason::SecurityCompliance => "Security / Compliance",
            ClosedLostReason::TechnicalLimitations => "Technical Limitations",
            ClosedLostReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Customer Deficiency",
            "Customer Experience",
            "Delay / Cancellation of Project",
            "Financial/Commercial",
            "Legal / Tax / Regulatory",
            "Lost to Competitor - Google",
            "Lost to Competitor - Microsoft",
            "Lost to Competitor - Other",
            "Lost to Competitor - SoftLayer",
            "Lost to Competitor - VMWare",
            "No Opportunity",
            "On Premises Deployment",
            "Other",
            "Partner Gap",
            "People/Relationship/Governance",
            "Price",
            "Product/Technology",
            "Security / Compliance",
            "Technical Limitations",
        ]
    }
}
impl ::std::convert::AsRef<str> for ClosedLostReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ClosedLostReason {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ClosedLostReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ClosedLostReason::CustomerDeficiency => write!(f, "Customer Deficiency"),
            ClosedLostReason::CustomerExperience => write!(f, "Customer Experience"),
            ClosedLostReason::DelayCancellationOfProject => write!(f, "Delay / Cancellation of Project"),
            ClosedLostReason::Financialcommercial => write!(f, "Financial/Commercial"),
            ClosedLostReason::LegalTaxRegulatory => write!(f, "Legal / Tax / Regulatory"),
            ClosedLostReason::LostToCompetitorGoogle => write!(f, "Lost to Competitor - Google"),
            ClosedLostReason::LostToCompetitorMicrosoft => write!(f, "Lost to Competitor - Microsoft"),
            ClosedLostReason::LostToCompetitorOther => write!(f, "Lost to Competitor - Other"),
            ClosedLostReason::LostToCompetitorSoftlayer => write!(f, "Lost to Competitor - SoftLayer"),
            ClosedLostReason::LostToCompetitorVmware => write!(f, "Lost to Competitor - VMWare"),
            ClosedLostReason::NoOpportunity => write!(f, "No Opportunity"),
            ClosedLostReason::OnPremisesDeployment => write!(f, "On Premises Deployment"),
            ClosedLostReason::Other => write!(f, "Other"),
            ClosedLostReason::PartnerGap => write!(f, "Partner Gap"),
            ClosedLostReason::Peoplerelationshipgovernance => write!(f, "People/Relationship/Governance"),
            ClosedLostReason::Price => write!(f, "Price"),
            ClosedLostReason::Producttechnology => write!(f, "Product/Technology"),
            ClosedLostReason::SecurityCompliance => write!(f, "Security / Compliance"),
            ClosedLostReason::TechnicalLimitations => write!(f, "Technical Limitations"),
            ClosedLostReason::Unknown(value) => write!(f, "{value}"),
        }
    }
}
