// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Industry`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let industry = unimplemented!();
/// match industry {
///     Industry::AerospaceSatellite => { /* ... */ },
///     Industry::Agriculture => { /* ... */ },
///     Industry::Automotive => { /* ... */ },
///     Industry::ComputersElectronics => { /* ... */ },
///     Industry::ConsumerGoods => { /* ... */ },
///     Industry::Education => { /* ... */ },
///     Industry::EnergyOilGas => { /* ... */ },
///     Industry::EnergyPowerUtilities => { /* ... */ },
///     Industry::FinancialServices => { /* ... */ },
///     Industry::Gaming => { /* ... */ },
///     Industry::Government => { /* ... */ },
///     Industry::Healthcare => { /* ... */ },
///     Industry::Hospitality => { /* ... */ },
///     Industry::LifeSciences => { /* ... */ },
///     Industry::Manufacturing => { /* ... */ },
///     Industry::MarketingAdvertising => { /* ... */ },
///     Industry::MediaEntertainment => { /* ... */ },
///     Industry::Mining => { /* ... */ },
///     Industry::NonProfitOrganization => { /* ... */ },
///     Industry::Other => { /* ... */ },
///     Industry::ProfessionalServices => { /* ... */ },
///     Industry::RealestateConstruction => { /* ... */ },
///     Industry::Retail => { /* ... */ },
///     Industry::SoftwareInternet => { /* ... */ },
///     Industry::Telecommunications => { /* ... */ },
///     Industry::TransportationLogistics => { /* ... */ },
///     Industry::Travel => { /* ... */ },
///     Industry::WholesaleDistribution => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `industry` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Industry::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Industry::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Industry::NewFeature` is defined.
/// Specifically, when `industry` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Industry::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Industry {
    #[allow(missing_docs)] // documentation missing in model
    AerospaceSatellite,
    #[allow(missing_docs)] // documentation missing in model
    Agriculture,
    #[allow(missing_docs)] // documentation missing in model
    Automotive,
    #[allow(missing_docs)] // documentation missing in model
    ComputersElectronics,
    #[allow(missing_docs)] // documentation missing in model
    ConsumerGoods,
    #[allow(missing_docs)] // documentation missing in model
    Education,
    #[allow(missing_docs)] // documentation missing in model
    EnergyOilGas,
    #[allow(missing_docs)] // documentation missing in model
    EnergyPowerUtilities,
    #[allow(missing_docs)] // documentation missing in model
    FinancialServices,
    #[allow(missing_docs)] // documentation missing in model
    Gaming,
    #[allow(missing_docs)] // documentation missing in model
    Government,
    #[allow(missing_docs)] // documentation missing in model
    Healthcare,
    #[allow(missing_docs)] // documentation missing in model
    Hospitality,
    #[allow(missing_docs)] // documentation missing in model
    LifeSciences,
    #[allow(missing_docs)] // documentation missing in model
    Manufacturing,
    #[allow(missing_docs)] // documentation missing in model
    MarketingAdvertising,
    #[allow(missing_docs)] // documentation missing in model
    MediaEntertainment,
    #[allow(missing_docs)] // documentation missing in model
    Mining,
    #[allow(missing_docs)] // documentation missing in model
    NonProfitOrganization,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    ProfessionalServices,
    #[allow(missing_docs)] // documentation missing in model
    RealestateConstruction,
    #[allow(missing_docs)] // documentation missing in model
    Retail,
    #[allow(missing_docs)] // documentation missing in model
    SoftwareInternet,
    #[allow(missing_docs)] // documentation missing in model
    Telecommunications,
    #[allow(missing_docs)] // documentation missing in model
    TransportationLogistics,
    #[allow(missing_docs)] // documentation missing in model
    Travel,
    #[allow(missing_docs)] // documentation missing in model
    WholesaleDistribution,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Industry {
    fn from(s: &str) -> Self {
        match s {
            "Aerospace" => Industry::AerospaceSatellite,
            "Agriculture" => Industry::Agriculture,
            "Automotive" => Industry::Automotive,
            "Computers and Electronics" => Industry::ComputersElectronics,
            "Consumer Goods" => Industry::ConsumerGoods,
            "Education" => Industry::Education,
            "Energy - Oil and Gas" => Industry::EnergyOilGas,
            "Energy - Power and Utilities" => Industry::EnergyPowerUtilities,
            "Financial Services" => Industry::FinancialServices,
            "Gaming" => Industry::Gaming,
            "Government" => Industry::Government,
            "Healthcare" => Industry::Healthcare,
            "Hospitality" => Industry::Hospitality,
            "Life Sciences" => Industry::LifeSciences,
            "Manufacturing" => Industry::Manufacturing,
            "Marketing and Advertising" => Industry::MarketingAdvertising,
            "Media and Entertainment" => Industry::MediaEntertainment,
            "Mining" => Industry::Mining,
            "Non-Profit Organization" => Industry::NonProfitOrganization,
            "Other" => Industry::Other,
            "Professional Services" => Industry::ProfessionalServices,
            "Real Estate and Construction" => Industry::RealestateConstruction,
            "Retail" => Industry::Retail,
            "Software and Internet" => Industry::SoftwareInternet,
            "Telecommunications" => Industry::Telecommunications,
            "Transportation and Logistics" => Industry::TransportationLogistics,
            "Travel" => Industry::Travel,
            "Wholesale and Distribution" => Industry::WholesaleDistribution,
            other => Industry::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Industry {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Industry::from(s))
    }
}
impl Industry {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Industry::AerospaceSatellite => "Aerospace",
            Industry::Agriculture => "Agriculture",
            Industry::Automotive => "Automotive",
            Industry::ComputersElectronics => "Computers and Electronics",
            Industry::ConsumerGoods => "Consumer Goods",
            Industry::Education => "Education",
            Industry::EnergyOilGas => "Energy - Oil and Gas",
            Industry::EnergyPowerUtilities => "Energy - Power and Utilities",
            Industry::FinancialServices => "Financial Services",
            Industry::Gaming => "Gaming",
            Industry::Government => "Government",
            Industry::Healthcare => "Healthcare",
            Industry::Hospitality => "Hospitality",
            Industry::LifeSciences => "Life Sciences",
            Industry::Manufacturing => "Manufacturing",
            Industry::MarketingAdvertising => "Marketing and Advertising",
            Industry::MediaEntertainment => "Media and Entertainment",
            Industry::Mining => "Mining",
            Industry::NonProfitOrganization => "Non-Profit Organization",
            Industry::Other => "Other",
            Industry::ProfessionalServices => "Professional Services",
            Industry::RealestateConstruction => "Real Estate and Construction",
            Industry::Retail => "Retail",
            Industry::SoftwareInternet => "Software and Internet",
            Industry::Telecommunications => "Telecommunications",
            Industry::TransportationLogistics => "Transportation and Logistics",
            Industry::Travel => "Travel",
            Industry::WholesaleDistribution => "Wholesale and Distribution",
            Industry::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Aerospace",
            "Agriculture",
            "Automotive",
            "Computers and Electronics",
            "Consumer Goods",
            "Education",
            "Energy - Oil and Gas",
            "Energy - Power and Utilities",
            "Financial Services",
            "Gaming",
            "Government",
            "Healthcare",
            "Hospitality",
            "Life Sciences",
            "Manufacturing",
            "Marketing and Advertising",
            "Media and Entertainment",
            "Mining",
            "Non-Profit Organization",
            "Other",
            "Professional Services",
            "Real Estate and Construction",
            "Retail",
            "Software and Internet",
            "Telecommunications",
            "Transportation and Logistics",
            "Travel",
            "Wholesale and Distribution",
        ]
    }
}
impl ::std::convert::AsRef<str> for Industry {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Industry {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Industry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Industry::AerospaceSatellite => write!(f, "Aerospace"),
            Industry::Agriculture => write!(f, "Agriculture"),
            Industry::Automotive => write!(f, "Automotive"),
            Industry::ComputersElectronics => write!(f, "Computers and Electronics"),
            Industry::ConsumerGoods => write!(f, "Consumer Goods"),
            Industry::Education => write!(f, "Education"),
            Industry::EnergyOilGas => write!(f, "Energy - Oil and Gas"),
            Industry::EnergyPowerUtilities => write!(f, "Energy - Power and Utilities"),
            Industry::FinancialServices => write!(f, "Financial Services"),
            Industry::Gaming => write!(f, "Gaming"),
            Industry::Government => write!(f, "Government"),
            Industry::Healthcare => write!(f, "Healthcare"),
            Industry::Hospitality => write!(f, "Hospitality"),
            Industry::LifeSciences => write!(f, "Life Sciences"),
            Industry::Manufacturing => write!(f, "Manufacturing"),
            Industry::MarketingAdvertising => write!(f, "Marketing and Advertising"),
            Industry::MediaEntertainment => write!(f, "Media and Entertainment"),
            Industry::Mining => write!(f, "Mining"),
            Industry::NonProfitOrganization => write!(f, "Non-Profit Organization"),
            Industry::Other => write!(f, "Other"),
            Industry::ProfessionalServices => write!(f, "Professional Services"),
            Industry::RealestateConstruction => write!(f, "Real Estate and Construction"),
            Industry::Retail => write!(f, "Retail"),
            Industry::SoftwareInternet => write!(f, "Software and Internet"),
            Industry::Telecommunications => write!(f, "Telecommunications"),
            Industry::TransportationLogistics => write!(f, "Transportation and Logistics"),
            Industry::Travel => write!(f, "Travel"),
            Industry::WholesaleDistribution => write!(f, "Wholesale and Distribution"),
            Industry::Unknown(value) => write!(f, "{value}"),
        }
    }
}
