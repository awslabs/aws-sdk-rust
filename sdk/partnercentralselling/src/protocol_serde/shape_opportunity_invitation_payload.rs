// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_opportunity_invitation_payload<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::OpportunityInvitationPayload>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OpportunityInvitationPayloadBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SenderContacts" => {
                            builder = builder.set_sender_contacts(crate::protocol_serde::shape_sender_contact_list::de_sender_contact_list(tokens)?);
                        }
                        "ReceiverResponsibilities" => {
                            builder = builder.set_receiver_responsibilities(
                                crate::protocol_serde::shape_receiver_responsibility_list::de_receiver_responsibility_list(tokens)?,
                            );
                        }
                        "Customer" => {
                            builder = builder.set_customer(crate::protocol_serde::shape_engagement_customer::de_engagement_customer(tokens)?);
                        }
                        "Project" => {
                            builder = builder.set_project(crate::protocol_serde::shape_project_details::de_project_details(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::opportunity_invitation_payload_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_opportunity_invitation_payload(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OpportunityInvitationPayload,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.sender_contacts {
        let mut array_2 = object.key("SenderContacts").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_sender_contact::ser_sender_contact(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    {
        let mut array_5 = object.key("ReceiverResponsibilities").start_array();
        for item_6 in &input.receiver_responsibilities {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.customer {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Customer").start_object();
        crate::protocol_serde::shape_engagement_customer::ser_engagement_customer(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.project {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Project").start_object();
        crate::protocol_serde::shape_project_details::ser_project_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
