// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_project(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Project,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.delivery_models {
        let mut array_2 = object.key("DeliveryModels").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.expected_customer_spend {
        let mut array_5 = object.key("ExpectedCustomerSpend").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_expected_customer_spend::ser_expected_customer_spend(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.title {
        object.key("Title").string(var_8.as_str());
    }
    if let Some(var_9) = &input.apn_programs {
        let mut array_10 = object.key("ApnPrograms").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.customer_business_problem {
        object.key("CustomerBusinessProblem").string(var_12.as_str());
    }
    if let Some(var_13) = &input.customer_use_case {
        object.key("CustomerUseCase").string(var_13.as_str());
    }
    if let Some(var_14) = &input.related_opportunity_identifier {
        object.key("RelatedOpportunityIdentifier").string(var_14.as_str());
    }
    if let Some(var_15) = &input.sales_activities {
        let mut array_16 = object.key("SalesActivities").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.competitor_name {
        object.key("CompetitorName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.other_competitor_names {
        object.key("OtherCompetitorNames").string(var_19.as_str());
    }
    if let Some(var_20) = &input.other_solution_description {
        object.key("OtherSolutionDescription").string(var_20.as_str());
    }
    if let Some(var_21) = &input.additional_comments {
        object.key("AdditionalComments").string(var_21.as_str());
    }
    Ok(())
}

pub(crate) fn de_project<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::Project>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ProjectBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DeliveryModels" => {
                            builder = builder.set_delivery_models(crate::protocol_serde::shape_delivery_models::de_delivery_models(tokens)?);
                        }
                        "ExpectedCustomerSpend" => {
                            builder = builder.set_expected_customer_spend(
                                crate::protocol_serde::shape_expected_customer_spend_list::de_expected_customer_spend_list(tokens)?,
                            );
                        }
                        "Title" => {
                            builder = builder.set_title(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ApnPrograms" => {
                            builder = builder.set_apn_programs(crate::protocol_serde::shape_apn_programs::de_apn_programs(tokens)?);
                        }
                        "CustomerBusinessProblem" => {
                            builder = builder.set_customer_business_problem(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CustomerUseCase" => {
                            builder = builder.set_customer_use_case(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RelatedOpportunityIdentifier" => {
                            builder = builder.set_related_opportunity_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SalesActivities" => {
                            builder = builder.set_sales_activities(crate::protocol_serde::shape_sales_activities::de_sales_activities(tokens)?);
                        }
                        "CompetitorName" => {
                            builder = builder.set_competitor_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CompetitorName::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "OtherCompetitorNames" => {
                            builder = builder.set_other_competitor_names(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OtherSolutionDescription" => {
                            builder = builder.set_other_solution_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AdditionalComments" => {
                            builder = builder.set_additional_comments(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
