// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::provision_permission_set::_provision_permission_set_output::ProvisionPermissionSetOutputBuilder;

pub use crate::operation::provision_permission_set::_provision_permission_set_input::ProvisionPermissionSetInputBuilder;

/// Fluent builder constructing a request to `ProvisionPermissionSet`.
///
/// <p>The process by which a specified permission set is provisioned to the specified target.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ProvisionPermissionSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::provision_permission_set::builders::ProvisionPermissionSetInputBuilder,
}
impl ProvisionPermissionSetFluentBuilder {
    /// Creates a new `ProvisionPermissionSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::provision_permission_set::ProvisionPermissionSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::provision_permission_set::ProvisionPermissionSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::provision_permission_set::ProvisionPermissionSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::provision_permission_set::ProvisionPermissionSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_arn(input);
        self
    }
    /// <p>The ARN of the permission set.</p>
    pub fn permission_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.permission_set_arn(input.into());
        self
    }
    /// <p>The ARN of the permission set.</p>
    pub fn set_permission_set_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_permission_set_arn(input);
        self
    }
    /// <p>TargetID is an AWS account identifier, typically a 10-12 digit string (For example, 123456789012).</p>
    pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_id(input.into());
        self
    }
    /// <p>TargetID is an AWS account identifier, typically a 10-12 digit string (For example, 123456789012).</p>
    pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_id(input);
        self
    }
    /// <p>The entity type for which the assignment will be created.</p>
    pub fn target_type(mut self, input: crate::types::ProvisionTargetType) -> Self {
        self.inner = self.inner.target_type(input);
        self
    }
    /// <p>The entity type for which the assignment will be created.</p>
    pub fn set_target_type(
        mut self,
        input: std::option::Option<crate::types::ProvisionTargetType>,
    ) -> Self {
        self.inner = self.inner.set_target_type(input);
        self
    }
}
