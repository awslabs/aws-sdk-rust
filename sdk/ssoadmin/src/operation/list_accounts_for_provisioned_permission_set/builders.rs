// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_accounts_for_provisioned_permission_set::_list_accounts_for_provisioned_permission_set_output::ListAccountsForProvisionedPermissionSetOutputBuilder;

pub use crate::operation::list_accounts_for_provisioned_permission_set::_list_accounts_for_provisioned_permission_set_input::ListAccountsForProvisionedPermissionSetInputBuilder;

/// Fluent builder constructing a request to `ListAccountsForProvisionedPermissionSet`.
///
/// <p>Lists all the AWS accounts where the specified permission set is provisioned.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountsForProvisionedPermissionSetFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_accounts_for_provisioned_permission_set::builders::ListAccountsForProvisionedPermissionSetInputBuilder
            }
impl ListAccountsForProvisionedPermissionSetFluentBuilder {
    /// Creates a new `ListAccountsForProvisionedPermissionSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_accounts_for_provisioned_permission_set::ListAccountsForProvisionedPermissionSet, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_accounts_for_provisioned_permission_set::ListAccountsForProvisionedPermissionSetError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_accounts_for_provisioned_permission_set::ListAccountsForProvisionedPermissionSetOutput, aws_smithy_http::result::SdkError<crate::operation::list_accounts_for_provisioned_permission_set::ListAccountsForProvisionedPermissionSetError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_accounts_for_provisioned_permission_set::paginator::ListAccountsForProvisionedPermissionSetPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_accounts_for_provisioned_permission_set::paginator::ListAccountsForProvisionedPermissionSetPaginator{
        crate::operation::list_accounts_for_provisioned_permission_set::paginator::ListAccountsForProvisionedPermissionSetPaginator::new(self.handle, self.inner)
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_arn(input);
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code> from which the associated AWS accounts will be listed.</p>
    pub fn permission_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.permission_set_arn(input.into());
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code> from which the associated AWS accounts will be listed.</p>
    pub fn set_permission_set_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_permission_set_arn(input);
        self
    }
    /// <p>The permission set provisioning status for an AWS account.</p>
    pub fn provisioning_status(mut self, input: crate::types::ProvisioningStatus) -> Self {
        self.inner = self.inner.provisioning_status(input);
        self
    }
    /// <p>The permission set provisioning status for an AWS account.</p>
    pub fn set_provisioning_status(
        mut self,
        input: std::option::Option<crate::types::ProvisioningStatus>,
    ) -> Self {
        self.inner = self.inner.set_provisioning_status(input);
        self
    }
    /// <p>The maximum number of results to display for the <code>PermissionSet</code>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to display for the <code>PermissionSet</code>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
