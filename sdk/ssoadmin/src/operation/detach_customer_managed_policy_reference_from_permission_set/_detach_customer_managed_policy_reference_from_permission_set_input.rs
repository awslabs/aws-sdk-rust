// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetachCustomerManagedPolicyReferenceFromPermissionSetInput {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. </p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the <code>PermissionSet</code>.</p>
    pub permission_set_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each Amazon Web Services account where you want to deploy your permission set.</p>
    pub customer_managed_policy_reference: ::std::option::Option<crate::types::CustomerManagedPolicyReference>,
}
impl DetachCustomerManagedPolicyReferenceFromPermissionSetInput {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. </p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>The ARN of the <code>PermissionSet</code>.</p>
    pub fn permission_set_arn(&self) -> ::std::option::Option<&str> {
        self.permission_set_arn.as_deref()
    }
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each Amazon Web Services account where you want to deploy your permission set.</p>
    pub fn customer_managed_policy_reference(&self) -> ::std::option::Option<&crate::types::CustomerManagedPolicyReference> {
        self.customer_managed_policy_reference.as_ref()
    }
}
impl DetachCustomerManagedPolicyReferenceFromPermissionSetInput {
    /// Creates a new builder-style object to manufacture [`DetachCustomerManagedPolicyReferenceFromPermissionSetInput`](crate::operation::detach_customer_managed_policy_reference_from_permission_set::DetachCustomerManagedPolicyReferenceFromPermissionSetInput).
    pub fn builder() -> crate::operation::detach_customer_managed_policy_reference_from_permission_set::builders::DetachCustomerManagedPolicyReferenceFromPermissionSetInputBuilder{
        crate::operation::detach_customer_managed_policy_reference_from_permission_set::builders::DetachCustomerManagedPolicyReferenceFromPermissionSetInputBuilder::default()
    }
}

/// A builder for [`DetachCustomerManagedPolicyReferenceFromPermissionSetInput`](crate::operation::detach_customer_managed_policy_reference_from_permission_set::DetachCustomerManagedPolicyReferenceFromPermissionSetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetachCustomerManagedPolicyReferenceFromPermissionSetInputBuilder {
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) permission_set_arn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_managed_policy_reference: ::std::option::Option<crate::types::CustomerManagedPolicyReference>,
}
impl DetachCustomerManagedPolicyReferenceFromPermissionSetInputBuilder {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. </p>
    /// This field is required.
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. </p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. </p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>The ARN of the <code>PermissionSet</code>.</p>
    /// This field is required.
    pub fn permission_set_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.permission_set_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code>.</p>
    pub fn set_permission_set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.permission_set_arn = input;
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code>.</p>
    pub fn get_permission_set_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.permission_set_arn
    }
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each Amazon Web Services account where you want to deploy your permission set.</p>
    /// This field is required.
    pub fn customer_managed_policy_reference(mut self, input: crate::types::CustomerManagedPolicyReference) -> Self {
        self.customer_managed_policy_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each Amazon Web Services account where you want to deploy your permission set.</p>
    pub fn set_customer_managed_policy_reference(mut self, input: ::std::option::Option<crate::types::CustomerManagedPolicyReference>) -> Self {
        self.customer_managed_policy_reference = input;
        self
    }
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each Amazon Web Services account where you want to deploy your permission set.</p>
    pub fn get_customer_managed_policy_reference(&self) -> &::std::option::Option<crate::types::CustomerManagedPolicyReference> {
        &self.customer_managed_policy_reference
    }
    /// Consumes the builder and constructs a [`DetachCustomerManagedPolicyReferenceFromPermissionSetInput`](crate::operation::detach_customer_managed_policy_reference_from_permission_set::DetachCustomerManagedPolicyReferenceFromPermissionSetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::detach_customer_managed_policy_reference_from_permission_set::DetachCustomerManagedPolicyReferenceFromPermissionSetInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::detach_customer_managed_policy_reference_from_permission_set::DetachCustomerManagedPolicyReferenceFromPermissionSetInput {
                instance_arn: self.instance_arn
                ,
                permission_set_arn: self.permission_set_arn
                ,
                customer_managed_policy_reference: self.customer_managed_policy_reference
                ,
            }
        )
    }
}
