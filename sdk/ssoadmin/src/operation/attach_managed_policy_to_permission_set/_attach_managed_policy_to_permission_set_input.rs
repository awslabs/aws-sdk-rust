// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachManagedPolicyToPermissionSetInput {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub instance_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the <code>PermissionSet</code> that the managed policy should be attached to.</p>
    #[doc(hidden)]
    pub permission_set_arn: std::option::Option<std::string::String>,
    /// <p>The AWS managed policy ARN to be attached to a permission set.</p>
    #[doc(hidden)]
    pub managed_policy_arn: std::option::Option<std::string::String>,
}
impl AttachManagedPolicyToPermissionSetInput {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn instance_arn(&self) -> std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>The ARN of the <code>PermissionSet</code> that the managed policy should be attached to.</p>
    pub fn permission_set_arn(&self) -> std::option::Option<&str> {
        self.permission_set_arn.as_deref()
    }
    /// <p>The AWS managed policy ARN to be attached to a permission set.</p>
    pub fn managed_policy_arn(&self) -> std::option::Option<&str> {
        self.managed_policy_arn.as_deref()
    }
}
impl AttachManagedPolicyToPermissionSetInput {
    /// Creates a new builder-style object to manufacture [`AttachManagedPolicyToPermissionSetInput`](crate::operation::attach_managed_policy_to_permission_set::AttachManagedPolicyToPermissionSetInput).
    pub fn builder() -> crate::operation::attach_managed_policy_to_permission_set::builders::AttachManagedPolicyToPermissionSetInputBuilder{
        crate::operation::attach_managed_policy_to_permission_set::builders::AttachManagedPolicyToPermissionSetInputBuilder::default()
    }
}

/// A builder for [`AttachManagedPolicyToPermissionSetInput`](crate::operation::attach_managed_policy_to_permission_set::AttachManagedPolicyToPermissionSetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttachManagedPolicyToPermissionSetInputBuilder {
    pub(crate) instance_arn: std::option::Option<std::string::String>,
    pub(crate) permission_set_arn: std::option::Option<std::string::String>,
    pub(crate) managed_policy_arn: std::option::Option<std::string::String>,
}
impl AttachManagedPolicyToPermissionSetInputBuilder {
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance under which the operation will be executed. For more information about ARNs, see <a href="/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code> that the managed policy should be attached to.</p>
    pub fn permission_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.permission_set_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the <code>PermissionSet</code> that the managed policy should be attached to.</p>
    pub fn set_permission_set_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.permission_set_arn = input;
        self
    }
    /// <p>The AWS managed policy ARN to be attached to a permission set.</p>
    pub fn managed_policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.managed_policy_arn = Some(input.into());
        self
    }
    /// <p>The AWS managed policy ARN to be attached to a permission set.</p>
    pub fn set_managed_policy_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.managed_policy_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`AttachManagedPolicyToPermissionSetInput`](crate::operation::attach_managed_policy_to_permission_set::AttachManagedPolicyToPermissionSetInput).
    pub fn build(self) -> Result<crate::operation::attach_managed_policy_to_permission_set::AttachManagedPolicyToPermissionSetInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::attach_managed_policy_to_permission_set::AttachManagedPolicyToPermissionSetInput {
                instance_arn: self.instance_arn
                ,
                permission_set_arn: self.permission_set_arn
                ,
                managed_policy_arn: self.managed_policy_arn
                ,
            }
        )
    }
}
