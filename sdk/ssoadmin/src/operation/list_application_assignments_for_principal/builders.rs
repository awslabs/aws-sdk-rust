// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_application_assignments_for_principal::_list_application_assignments_for_principal_output::ListApplicationAssignmentsForPrincipalOutputBuilder;

pub use crate::operation::list_application_assignments_for_principal::_list_application_assignments_for_principal_input::ListApplicationAssignmentsForPrincipalInputBuilder;

impl crate::operation::list_application_assignments_for_principal::builders::ListApplicationAssignmentsForPrincipalInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_application_assignments_for_principal();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListApplicationAssignmentsForPrincipal`.
///
/// <p>Lists the applications to which a specified principal is assigned.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListApplicationAssignmentsForPrincipalFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_application_assignments_for_principal::builders::ListApplicationAssignmentsForPrincipalInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalOutput,
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalError,
    > for ListApplicationAssignmentsForPrincipalFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalOutput,
            crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListApplicationAssignmentsForPrincipalFluentBuilder {
    /// Creates a new `ListApplicationAssignmentsForPrincipal`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListApplicationAssignmentsForPrincipal as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::list_application_assignments_for_principal::builders::ListApplicationAssignmentsForPrincipalInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipal::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipal::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalOutput,
        crate::operation::list_application_assignments_for_principal::ListApplicationAssignmentsForPrincipalError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_application_assignments_for_principal::paginator::ListApplicationAssignmentsForPrincipalPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_application_assignments_for_principal::paginator::ListApplicationAssignmentsForPrincipalPaginator {
        crate::operation::list_application_assignments_for_principal::paginator::ListApplicationAssignmentsForPrincipalPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Specifies the instance of IAM Identity Center that contains principal and applications.</p>
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_arn(input.into());
        self
    }
    /// <p>Specifies the instance of IAM Identity Center that contains principal and applications.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_arn(input);
        self
    }
    /// <p>Specifies the instance of IAM Identity Center that contains principal and applications.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_arn()
    }
    /// <p>Specifies the unique identifier of the principal for which you want to retrieve its assignments.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.principal_id(input.into());
        self
    }
    /// <p>Specifies the unique identifier of the principal for which you want to retrieve its assignments.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_principal_id(input);
        self
    }
    /// <p>Specifies the unique identifier of the principal for which you want to retrieve its assignments.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_principal_id()
    }
    /// <p>Specifies the type of the principal for which you want to retrieve its assignments.</p>
    pub fn principal_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.inner = self.inner.principal_type(input);
        self
    }
    /// <p>Specifies the type of the principal for which you want to retrieve its assignments.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::PrincipalType>) -> Self {
        self.inner = self.inner.set_principal_type(input);
        self
    }
    /// <p>Specifies the type of the principal for which you want to retrieve its assignments.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::PrincipalType> {
        self.inner.get_principal_type()
    }
    /// <p>Filters the output to include only assignments associated with the application that has the specified ARN.</p>
    pub fn filter(mut self, input: crate::types::ListApplicationAssignmentsFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Filters the output to include only assignments associated with the application that has the specified ARN.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ListApplicationAssignmentsFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Filters the output to include only assignments associated with the application that has the specified ARN.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ListApplicationAssignmentsFilter> {
        self.inner.get_filter()
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Specifies the total number of results that you want included in each response. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next set of results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the total number of results that you want included in each response. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next set of results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies the total number of results that you want included in each response. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next set of results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
