// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Attaches an IAM managed policy ARN to a permission set.</p>
/// <note>
/// <p>If the permission set is already referenced by one or more account assignments, you will
/// need to call <code>
/// <a>ProvisionPermissionSet</a>
/// </code> after this operation.
/// Calling <code>ProvisionPermissionSet</code> applies the corresponding IAM policy updates to
/// all assigned accounts.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachManagedPolicyToPermissionSet {
    _private: (),
}
impl AttachManagedPolicyToPermissionSet {
    /// Creates a new builder-style object to manufacture [`AttachManagedPolicyToPermissionSetInput`](crate::input::AttachManagedPolicyToPermissionSetInput)
    pub fn builder() -> crate::input::attach_managed_policy_to_permission_set_input::Builder {
        crate::input::attach_managed_policy_to_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachManagedPolicyToPermissionSet {
    type Output = std::result::Result<
        crate::output::AttachManagedPolicyToPermissionSetOutput,
        crate::error::AttachManagedPolicyToPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_managed_policy_to_permission_set_error(response)
        } else {
            crate::operation_deser::parse_attach_managed_policy_to_permission_set_response(response)
        }
    }
}

/// <p>Assigns access to a principal for a specified Amazon Web Services account using a specified permission
/// set.</p>
/// <note>
/// <p>The term <i>principal</i> here refers to a user or group that is defined
/// in Amazon Web Services SSO.</p>
/// </note>
/// <note>
/// <p>As part of a successful <code>CreateAccountAssignment</code> call, the specified
/// permission set will automatically be provisioned to the account in the form of an IAM
/// policy. That policy is attached to the SSO-created IAM role. If the permission set is
/// subsequently updated, the corresponding IAM policies attached to roles in your accounts will
/// not be updated automatically. In this case, you must call <code>
/// <a>ProvisionPermissionSet</a>
/// </code> to make these updates.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccountAssignment {
    _private: (),
}
impl CreateAccountAssignment {
    /// Creates a new builder-style object to manufacture [`CreateAccountAssignmentInput`](crate::input::CreateAccountAssignmentInput)
    pub fn builder() -> crate::input::create_account_assignment_input::Builder {
        crate::input::create_account_assignment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAccountAssignment {
    type Output = std::result::Result<
        crate::output::CreateAccountAssignmentOutput,
        crate::error::CreateAccountAssignmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_account_assignment_error(response)
        } else {
            crate::operation_deser::parse_create_account_assignment_response(response)
        }
    }
}

/// <p>Enables the attributes-based access control (ABAC) feature for the specified Amazon Web Services SSO
/// instance. You can also specify new attributes to add to your ABAC configuration during the
/// enabling process. For more information about ABAC, see <a href="/singlesignon/latest/userguide/abac.html">Attribute-Based Access Control</a> in the <i>Amazon Web Services SSO User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInstanceAccessControlAttributeConfiguration {
    _private: (),
}
impl CreateInstanceAccessControlAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateInstanceAccessControlAttributeConfigurationInput`](crate::input::CreateInstanceAccessControlAttributeConfigurationInput)
    pub fn builder(
    ) -> crate::input::create_instance_access_control_attribute_configuration_input::Builder {
        crate::input::create_instance_access_control_attribute_configuration_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for CreateInstanceAccessControlAttributeConfiguration
{
    type Output = std::result::Result<
        crate::output::CreateInstanceAccessControlAttributeConfigurationOutput,
        crate::error::CreateInstanceAccessControlAttributeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_instance_access_control_attribute_configuration_error(response)
        } else {
            crate::operation_deser::parse_create_instance_access_control_attribute_configuration_response(response)
        }
    }
}

/// <p>Creates a permission set within a specified SSO instance.</p>
/// <note>
/// <p>To grant users and groups access to Amazon Web Services account resources, use <code>
/// <a>CreateAccountAssignment</a>
/// </code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePermissionSet {
    _private: (),
}
impl CreatePermissionSet {
    /// Creates a new builder-style object to manufacture [`CreatePermissionSetInput`](crate::input::CreatePermissionSetInput)
    pub fn builder() -> crate::input::create_permission_set_input::Builder {
        crate::input::create_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePermissionSet {
    type Output = std::result::Result<
        crate::output::CreatePermissionSetOutput,
        crate::error::CreatePermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_permission_set_error(response)
        } else {
            crate::operation_deser::parse_create_permission_set_response(response)
        }
    }
}

/// <p>Deletes a principal's access from a specified Amazon Web Services account using a specified permission
/// set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAccountAssignment {
    _private: (),
}
impl DeleteAccountAssignment {
    /// Creates a new builder-style object to manufacture [`DeleteAccountAssignmentInput`](crate::input::DeleteAccountAssignmentInput)
    pub fn builder() -> crate::input::delete_account_assignment_input::Builder {
        crate::input::delete_account_assignment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAccountAssignment {
    type Output = std::result::Result<
        crate::output::DeleteAccountAssignmentOutput,
        crate::error::DeleteAccountAssignmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_account_assignment_error(response)
        } else {
            crate::operation_deser::parse_delete_account_assignment_response(response)
        }
    }
}

/// <p>Deletes the inline policy from a specified permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInlinePolicyFromPermissionSet {
    _private: (),
}
impl DeleteInlinePolicyFromPermissionSet {
    /// Creates a new builder-style object to manufacture [`DeleteInlinePolicyFromPermissionSetInput`](crate::input::DeleteInlinePolicyFromPermissionSetInput)
    pub fn builder() -> crate::input::delete_inline_policy_from_permission_set_input::Builder {
        crate::input::delete_inline_policy_from_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInlinePolicyFromPermissionSet {
    type Output = std::result::Result<
        crate::output::DeleteInlinePolicyFromPermissionSetOutput,
        crate::error::DeleteInlinePolicyFromPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_inline_policy_from_permission_set_error(response)
        } else {
            crate::operation_deser::parse_delete_inline_policy_from_permission_set_response(
                response,
            )
        }
    }
}

/// <p>Disables the attributes-based access control (ABAC) feature for the specified Amazon Web Services SSO
/// instance and deletes all of the attribute mappings that have been configured. Once deleted,
/// any attributes that are received from an identity source and any custom attributes you have
/// previously configured will not be passed. For more information about ABAC, see <a href="/singlesignon/latest/userguide/abac.html">Attribute-Based Access Control</a> in the <i>Amazon Web Services SSO User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInstanceAccessControlAttributeConfiguration {
    _private: (),
}
impl DeleteInstanceAccessControlAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceAccessControlAttributeConfigurationInput`](crate::input::DeleteInstanceAccessControlAttributeConfigurationInput)
    pub fn builder(
    ) -> crate::input::delete_instance_access_control_attribute_configuration_input::Builder {
        crate::input::delete_instance_access_control_attribute_configuration_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DeleteInstanceAccessControlAttributeConfiguration
{
    type Output = std::result::Result<
        crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput,
        crate::error::DeleteInstanceAccessControlAttributeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_instance_access_control_attribute_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_instance_access_control_attribute_configuration_response(response)
        }
    }
}

/// <p>Deletes the specified permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePermissionSet {
    _private: (),
}
impl DeletePermissionSet {
    /// Creates a new builder-style object to manufacture [`DeletePermissionSetInput`](crate::input::DeletePermissionSetInput)
    pub fn builder() -> crate::input::delete_permission_set_input::Builder {
        crate::input::delete_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePermissionSet {
    type Output = std::result::Result<
        crate::output::DeletePermissionSetOutput,
        crate::error::DeletePermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_permission_set_error(response)
        } else {
            crate::operation_deser::parse_delete_permission_set_response(response)
        }
    }
}

/// <p>Describes the status of the assignment creation request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAssignmentCreationStatus {
    _private: (),
}
impl DescribeAccountAssignmentCreationStatus {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAssignmentCreationStatusInput`](crate::input::DescribeAccountAssignmentCreationStatusInput)
    pub fn builder() -> crate::input::describe_account_assignment_creation_status_input::Builder {
        crate::input::describe_account_assignment_creation_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAssignmentCreationStatus {
    type Output = std::result::Result<
        crate::output::DescribeAccountAssignmentCreationStatusOutput,
        crate::error::DescribeAccountAssignmentCreationStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_assignment_creation_status_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_account_assignment_creation_status_response(
                response,
            )
        }
    }
}

/// <p>Describes the status of the assignment deletion request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAssignmentDeletionStatus {
    _private: (),
}
impl DescribeAccountAssignmentDeletionStatus {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAssignmentDeletionStatusInput`](crate::input::DescribeAccountAssignmentDeletionStatusInput)
    pub fn builder() -> crate::input::describe_account_assignment_deletion_status_input::Builder {
        crate::input::describe_account_assignment_deletion_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAssignmentDeletionStatus {
    type Output = std::result::Result<
        crate::output::DescribeAccountAssignmentDeletionStatusOutput,
        crate::error::DescribeAccountAssignmentDeletionStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_assignment_deletion_status_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_account_assignment_deletion_status_response(
                response,
            )
        }
    }
}

/// <p>Returns the list of Amazon Web Services SSO identity store attributes that have been configured to
/// work with attributes-based access control (ABAC) for the specified Amazon Web Services SSO instance. This
/// will not return attributes configured and sent by an external identity provider.
/// For more information about ABAC, see <a href="/singlesignon/latest/userguide/abac.html">Attribute-Based Access Control</a> in the <i>Amazon Web Services SSO User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceAccessControlAttributeConfiguration {
    _private: (),
}
impl DescribeInstanceAccessControlAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAccessControlAttributeConfigurationInput`](crate::input::DescribeInstanceAccessControlAttributeConfigurationInput)
    pub fn builder(
    ) -> crate::input::describe_instance_access_control_attribute_configuration_input::Builder {
        crate::input::describe_instance_access_control_attribute_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DescribeInstanceAccessControlAttributeConfiguration
{
    type Output = std::result::Result<
        crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput,
        crate::error::DescribeInstanceAccessControlAttributeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_access_control_attribute_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_access_control_attribute_configuration_response(response)
        }
    }
}

/// <p>Gets the details of the permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePermissionSet {
    _private: (),
}
impl DescribePermissionSet {
    /// Creates a new builder-style object to manufacture [`DescribePermissionSetInput`](crate::input::DescribePermissionSetInput)
    pub fn builder() -> crate::input::describe_permission_set_input::Builder {
        crate::input::describe_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePermissionSet {
    type Output = std::result::Result<
        crate::output::DescribePermissionSetOutput,
        crate::error::DescribePermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_permission_set_error(response)
        } else {
            crate::operation_deser::parse_describe_permission_set_response(response)
        }
    }
}

/// <p>Describes the status for the given permission set provisioning request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePermissionSetProvisioningStatus {
    _private: (),
}
impl DescribePermissionSetProvisioningStatus {
    /// Creates a new builder-style object to manufacture [`DescribePermissionSetProvisioningStatusInput`](crate::input::DescribePermissionSetProvisioningStatusInput)
    pub fn builder() -> crate::input::describe_permission_set_provisioning_status_input::Builder {
        crate::input::describe_permission_set_provisioning_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePermissionSetProvisioningStatus {
    type Output = std::result::Result<
        crate::output::DescribePermissionSetProvisioningStatusOutput,
        crate::error::DescribePermissionSetProvisioningStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_permission_set_provisioning_status_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_permission_set_provisioning_status_response(
                response,
            )
        }
    }
}

/// <p>Detaches the attached IAM managed policy ARN from the specified permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachManagedPolicyFromPermissionSet {
    _private: (),
}
impl DetachManagedPolicyFromPermissionSet {
    /// Creates a new builder-style object to manufacture [`DetachManagedPolicyFromPermissionSetInput`](crate::input::DetachManagedPolicyFromPermissionSetInput)
    pub fn builder() -> crate::input::detach_managed_policy_from_permission_set_input::Builder {
        crate::input::detach_managed_policy_from_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachManagedPolicyFromPermissionSet {
    type Output = std::result::Result<
        crate::output::DetachManagedPolicyFromPermissionSetOutput,
        crate::error::DetachManagedPolicyFromPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_managed_policy_from_permission_set_error(response)
        } else {
            crate::operation_deser::parse_detach_managed_policy_from_permission_set_response(
                response,
            )
        }
    }
}

/// <p>Obtains the inline policy assigned to the permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInlinePolicyForPermissionSet {
    _private: (),
}
impl GetInlinePolicyForPermissionSet {
    /// Creates a new builder-style object to manufacture [`GetInlinePolicyForPermissionSetInput`](crate::input::GetInlinePolicyForPermissionSetInput)
    pub fn builder() -> crate::input::get_inline_policy_for_permission_set_input::Builder {
        crate::input::get_inline_policy_for_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInlinePolicyForPermissionSet {
    type Output = std::result::Result<
        crate::output::GetInlinePolicyForPermissionSetOutput,
        crate::error::GetInlinePolicyForPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_inline_policy_for_permission_set_error(response)
        } else {
            crate::operation_deser::parse_get_inline_policy_for_permission_set_response(response)
        }
    }
}

/// <p>Lists the status of the Amazon Web Services account assignment creation requests for a specified SSO
/// instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountAssignmentCreationStatus {
    _private: (),
}
impl ListAccountAssignmentCreationStatus {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentCreationStatusInput`](crate::input::ListAccountAssignmentCreationStatusInput)
    pub fn builder() -> crate::input::list_account_assignment_creation_status_input::Builder {
        crate::input::list_account_assignment_creation_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountAssignmentCreationStatus {
    type Output = std::result::Result<
        crate::output::ListAccountAssignmentCreationStatusOutput,
        crate::error::ListAccountAssignmentCreationStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_account_assignment_creation_status_error(response)
        } else {
            crate::operation_deser::parse_list_account_assignment_creation_status_response(response)
        }
    }
}

/// <p>Lists the status of the Amazon Web Services account assignment deletion requests for a specified SSO
/// instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountAssignmentDeletionStatus {
    _private: (),
}
impl ListAccountAssignmentDeletionStatus {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentDeletionStatusInput`](crate::input::ListAccountAssignmentDeletionStatusInput)
    pub fn builder() -> crate::input::list_account_assignment_deletion_status_input::Builder {
        crate::input::list_account_assignment_deletion_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountAssignmentDeletionStatus {
    type Output = std::result::Result<
        crate::output::ListAccountAssignmentDeletionStatusOutput,
        crate::error::ListAccountAssignmentDeletionStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_account_assignment_deletion_status_error(response)
        } else {
            crate::operation_deser::parse_list_account_assignment_deletion_status_response(response)
        }
    }
}

/// <p>Lists the assignee of the specified Amazon Web Services account with the specified permission
/// set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountAssignments {
    _private: (),
}
impl ListAccountAssignments {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentsInput`](crate::input::ListAccountAssignmentsInput)
    pub fn builder() -> crate::input::list_account_assignments_input::Builder {
        crate::input::list_account_assignments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountAssignments {
    type Output = std::result::Result<
        crate::output::ListAccountAssignmentsOutput,
        crate::error::ListAccountAssignmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_account_assignments_error(response)
        } else {
            crate::operation_deser::parse_list_account_assignments_response(response)
        }
    }
}

/// <p>Lists all the Amazon Web Services accounts where the specified permission set is provisioned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountsForProvisionedPermissionSet {
    _private: (),
}
impl ListAccountsForProvisionedPermissionSet {
    /// Creates a new builder-style object to manufacture [`ListAccountsForProvisionedPermissionSetInput`](crate::input::ListAccountsForProvisionedPermissionSetInput)
    pub fn builder() -> crate::input::list_accounts_for_provisioned_permission_set_input::Builder {
        crate::input::list_accounts_for_provisioned_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountsForProvisionedPermissionSet {
    type Output = std::result::Result<
        crate::output::ListAccountsForProvisionedPermissionSetOutput,
        crate::error::ListAccountsForProvisionedPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accounts_for_provisioned_permission_set_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_accounts_for_provisioned_permission_set_response(
                response,
            )
        }
    }
}

/// <p>Lists the SSO instances that the caller has access to.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInstances {
    _private: (),
}
impl ListInstances {
    /// Creates a new builder-style object to manufacture [`ListInstancesInput`](crate::input::ListInstancesInput)
    pub fn builder() -> crate::input::list_instances_input::Builder {
        crate::input::list_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInstances {
    type Output =
        std::result::Result<crate::output::ListInstancesOutput, crate::error::ListInstancesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_instances_error(response)
        } else {
            crate::operation_deser::parse_list_instances_response(response)
        }
    }
}

/// <p>Lists the IAM managed policy that is attached to a specified permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListManagedPoliciesInPermissionSet {
    _private: (),
}
impl ListManagedPoliciesInPermissionSet {
    /// Creates a new builder-style object to manufacture [`ListManagedPoliciesInPermissionSetInput`](crate::input::ListManagedPoliciesInPermissionSetInput)
    pub fn builder() -> crate::input::list_managed_policies_in_permission_set_input::Builder {
        crate::input::list_managed_policies_in_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListManagedPoliciesInPermissionSet {
    type Output = std::result::Result<
        crate::output::ListManagedPoliciesInPermissionSetOutput,
        crate::error::ListManagedPoliciesInPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_managed_policies_in_permission_set_error(response)
        } else {
            crate::operation_deser::parse_list_managed_policies_in_permission_set_response(response)
        }
    }
}

/// <p>Lists the status of the permission set provisioning requests for a specified SSO
/// instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPermissionSetProvisioningStatus {
    _private: (),
}
impl ListPermissionSetProvisioningStatus {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetProvisioningStatusInput`](crate::input::ListPermissionSetProvisioningStatusInput)
    pub fn builder() -> crate::input::list_permission_set_provisioning_status_input::Builder {
        crate::input::list_permission_set_provisioning_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPermissionSetProvisioningStatus {
    type Output = std::result::Result<
        crate::output::ListPermissionSetProvisioningStatusOutput,
        crate::error::ListPermissionSetProvisioningStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_permission_set_provisioning_status_error(response)
        } else {
            crate::operation_deser::parse_list_permission_set_provisioning_status_response(response)
        }
    }
}

/// <p>Lists the <a>PermissionSet</a>s in an SSO instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPermissionSets {
    _private: (),
}
impl ListPermissionSets {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetsInput`](crate::input::ListPermissionSetsInput)
    pub fn builder() -> crate::input::list_permission_sets_input::Builder {
        crate::input::list_permission_sets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPermissionSets {
    type Output = std::result::Result<
        crate::output::ListPermissionSetsOutput,
        crate::error::ListPermissionSetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_permission_sets_error(response)
        } else {
            crate::operation_deser::parse_list_permission_sets_response(response)
        }
    }
}

/// <p>Lists all the permission sets that are provisioned to a specified Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPermissionSetsProvisionedToAccount {
    _private: (),
}
impl ListPermissionSetsProvisionedToAccount {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetsProvisionedToAccountInput`](crate::input::ListPermissionSetsProvisionedToAccountInput)
    pub fn builder() -> crate::input::list_permission_sets_provisioned_to_account_input::Builder {
        crate::input::list_permission_sets_provisioned_to_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPermissionSetsProvisionedToAccount {
    type Output = std::result::Result<
        crate::output::ListPermissionSetsProvisionedToAccountOutput,
        crate::error::ListPermissionSetsProvisionedToAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_permission_sets_provisioned_to_account_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_permission_sets_provisioned_to_account_response(
                response,
            )
        }
    }
}

/// <p>Lists the tags that are attached to a specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>The process by which a specified permission set is provisioned to the specified
/// target.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ProvisionPermissionSet {
    _private: (),
}
impl ProvisionPermissionSet {
    /// Creates a new builder-style object to manufacture [`ProvisionPermissionSetInput`](crate::input::ProvisionPermissionSetInput)
    pub fn builder() -> crate::input::provision_permission_set_input::Builder {
        crate::input::provision_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ProvisionPermissionSet {
    type Output = std::result::Result<
        crate::output::ProvisionPermissionSetOutput,
        crate::error::ProvisionPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_provision_permission_set_error(response)
        } else {
            crate::operation_deser::parse_provision_permission_set_response(response)
        }
    }
}

/// <p>Attaches an IAM inline policy to a permission set.</p>
/// <note>
/// <p>If the permission set is already referenced by one or more account assignments, you will
/// need to call <code>
/// <a>ProvisionPermissionSet</a>
/// </code> after this action to
/// apply the corresponding IAM policy updates to all assigned accounts.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutInlinePolicyToPermissionSet {
    _private: (),
}
impl PutInlinePolicyToPermissionSet {
    /// Creates a new builder-style object to manufacture [`PutInlinePolicyToPermissionSetInput`](crate::input::PutInlinePolicyToPermissionSetInput)
    pub fn builder() -> crate::input::put_inline_policy_to_permission_set_input::Builder {
        crate::input::put_inline_policy_to_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutInlinePolicyToPermissionSet {
    type Output = std::result::Result<
        crate::output::PutInlinePolicyToPermissionSetOutput,
        crate::error::PutInlinePolicyToPermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_inline_policy_to_permission_set_error(response)
        } else {
            crate::operation_deser::parse_put_inline_policy_to_permission_set_response(response)
        }
    }
}

/// <p>Associates a set of tags with a specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Disassociates a set of tags from a specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the Amazon Web Services SSO identity store attributes that you can use with the Amazon Web Services SSO
/// instance for attributes-based access control (ABAC). When using an external identity provider
/// as an identity source, you can pass attributes through the SAML assertion as an alternative to
/// configuring attributes from the Amazon Web Services SSO identity store. If a SAML assertion passes any of
/// these attributes, Amazon Web Services SSO replaces the attribute value with the value from the Amazon Web Services SSO
/// identity store. For more information about ABAC, see <a href="/singlesignon/latest/userguide/abac.html">Attribute-Based Access Control</a> in the <i>Amazon Web Services SSO User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateInstanceAccessControlAttributeConfiguration {
    _private: (),
}
impl UpdateInstanceAccessControlAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceAccessControlAttributeConfigurationInput`](crate::input::UpdateInstanceAccessControlAttributeConfigurationInput)
    pub fn builder(
    ) -> crate::input::update_instance_access_control_attribute_configuration_input::Builder {
        crate::input::update_instance_access_control_attribute_configuration_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for UpdateInstanceAccessControlAttributeConfiguration
{
    type Output = std::result::Result<
        crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput,
        crate::error::UpdateInstanceAccessControlAttributeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_instance_access_control_attribute_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_instance_access_control_attribute_configuration_response(response)
        }
    }
}

/// <p>Updates an existing permission set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePermissionSet {
    _private: (),
}
impl UpdatePermissionSet {
    /// Creates a new builder-style object to manufacture [`UpdatePermissionSetInput`](crate::input::UpdatePermissionSetInput)
    pub fn builder() -> crate::input::update_permission_set_input::Builder {
        crate::input::update_permission_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePermissionSet {
    type Output = std::result::Result<
        crate::output::UpdatePermissionSetOutput,
        crate::error::UpdatePermissionSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_permission_set_error(response)
        } else {
            crate::operation_deser::parse_update_permission_set_response(response)
        }
    }
}
