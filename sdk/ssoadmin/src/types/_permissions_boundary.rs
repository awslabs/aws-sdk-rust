// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration of the AWS managed or customer managed policy that you want to set as a permissions boundary. Specify either <code>CustomerManagedPolicyReference</code> to use the name and path of a customer managed policy, or <code>ManagedPolicyArn</code> to use the ARN of an AWS managed policy. A permissions boundary represents the maximum permissions that any policy can grant your role. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>.</p> <important>
/// <p>Policies used as permissions boundaries don't provide permissions. You must also attach an IAM policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy evaluation logic</a> in the <i>IAM User Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PermissionsBoundary {
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your permission set.</p>
    #[doc(hidden)]
    pub customer_managed_policy_reference:
        std::option::Option<crate::types::CustomerManagedPolicyReference>,
    /// <p>The AWS managed policy ARN that you want to attach to a permission set as a permissions boundary.</p>
    #[doc(hidden)]
    pub managed_policy_arn: std::option::Option<std::string::String>,
}
impl PermissionsBoundary {
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your permission set.</p>
    pub fn customer_managed_policy_reference(
        &self,
    ) -> std::option::Option<&crate::types::CustomerManagedPolicyReference> {
        self.customer_managed_policy_reference.as_ref()
    }
    /// <p>The AWS managed policy ARN that you want to attach to a permission set as a permissions boundary.</p>
    pub fn managed_policy_arn(&self) -> std::option::Option<&str> {
        self.managed_policy_arn.as_deref()
    }
}
impl PermissionsBoundary {
    /// Creates a new builder-style object to manufacture [`PermissionsBoundary`](crate::types::PermissionsBoundary).
    pub fn builder() -> crate::types::builders::PermissionsBoundaryBuilder {
        crate::types::builders::PermissionsBoundaryBuilder::default()
    }
}

/// A builder for [`PermissionsBoundary`](crate::types::PermissionsBoundary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PermissionsBoundaryBuilder {
    pub(crate) customer_managed_policy_reference:
        std::option::Option<crate::types::CustomerManagedPolicyReference>,
    pub(crate) managed_policy_arn: std::option::Option<std::string::String>,
}
impl PermissionsBoundaryBuilder {
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your permission set.</p>
    pub fn customer_managed_policy_reference(
        mut self,
        input: crate::types::CustomerManagedPolicyReference,
    ) -> Self {
        self.customer_managed_policy_reference = Some(input);
        self
    }
    /// <p>Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your permission set.</p>
    pub fn set_customer_managed_policy_reference(
        mut self,
        input: std::option::Option<crate::types::CustomerManagedPolicyReference>,
    ) -> Self {
        self.customer_managed_policy_reference = input;
        self
    }
    /// <p>The AWS managed policy ARN that you want to attach to a permission set as a permissions boundary.</p>
    pub fn managed_policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.managed_policy_arn = Some(input.into());
        self
    }
    /// <p>The AWS managed policy ARN that you want to attach to a permission set as a permissions boundary.</p>
    pub fn set_managed_policy_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.managed_policy_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`PermissionsBoundary`](crate::types::PermissionsBoundary).
    pub fn build(self) -> crate::types::PermissionsBoundary {
        crate::types::PermissionsBoundary {
            customer_managed_policy_reference: self.customer_managed_policy_reference,
            managed_policy_arn: self.managed_policy_arn,
        }
    }
}
