// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>These are IAM Identity Center identity store attributes that you can configure for use in attributes-based access control (ABAC). You can create permissions policies that determine who can access your AWS resources based upon the configured attribute values. When you enable ABAC and specify <code>AccessControlAttributes</code>, IAM Identity Center passes the attribute values of the authenticated user into IAM for use in policy evaluation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessControlAttribute {
    /// <p>The name of the attribute associated with your identities in your identity source. This is used to map a specified attribute in your identity source with an attribute in IAM Identity Center.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value used for mapping a specified attribute to an identity source.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::AccessControlAttributeValue>,
}
impl AccessControlAttribute {
    /// <p>The name of the attribute associated with your identities in your identity source. This is used to map a specified attribute in your identity source with an attribute in IAM Identity Center.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value used for mapping a specified attribute to an identity source.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::AccessControlAttributeValue> {
        self.value.as_ref()
    }
}
impl AccessControlAttribute {
    /// Creates a new builder-style object to manufacture [`AccessControlAttribute`](crate::types::AccessControlAttribute).
    pub fn builder() -> crate::types::builders::AccessControlAttributeBuilder {
        crate::types::builders::AccessControlAttributeBuilder::default()
    }
}

/// A builder for [`AccessControlAttribute`](crate::types::AccessControlAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccessControlAttributeBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<crate::types::AccessControlAttributeValue>,
}
impl AccessControlAttributeBuilder {
    /// <p>The name of the attribute associated with your identities in your identity source. This is used to map a specified attribute in your identity source with an attribute in IAM Identity Center.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The name of the attribute associated with your identities in your identity source. This is used to map a specified attribute in your identity source with an attribute in IAM Identity Center.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The value used for mapping a specified attribute to an identity source.</p>
    pub fn value(mut self, input: crate::types::AccessControlAttributeValue) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value used for mapping a specified attribute to an identity source.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::AccessControlAttributeValue>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`AccessControlAttribute`](crate::types::AccessControlAttribute).
    pub fn build(self) -> crate::types::AccessControlAttribute {
        crate::types::AccessControlAttribute {
            key: self.key,
            value: self.value,
        }
    }
}
