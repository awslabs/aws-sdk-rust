// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception, or failure with an internal server.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Indicates that a requested resource is not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Indicates that the principal has crossed the permitted number of resources that can be created.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Indicates that the principal has crossed the throttling limits of the API operations.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The request failed because it contains a syntax error.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError> for Error {
    fn from(err: crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError) -> Self {
        match err {
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::AttachCustomerManagedPolicyReferenceToPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AttachManagedPolicyToPermissionSetError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AttachManagedPolicyToPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachManagedPolicyToPermissionSetError> for Error {
    fn from(err: crate::error::AttachManagedPolicyToPermissionSetError) -> Self {
        match err {
            crate::error::AttachManagedPolicyToPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::AttachManagedPolicyToPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccountAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAccountAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccountAssignmentError> for Error {
    fn from(err: crate::error::CreateAccountAssignmentError) -> Self {
        match err {
            crate::error::CreateAccountAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAccountAssignmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAccountAssignmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAccountAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAccountAssignmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateAccountAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAccountAssignmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAccountAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstanceAccessControlAttributeConfigurationError> for Error {
    fn from(err: crate::error::CreateInstanceAccessControlAttributeConfigurationError) -> Self {
        match err {
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateInstanceAccessControlAttributeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePermissionSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePermissionSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePermissionSetError> for Error {
    fn from(err: crate::error::CreatePermissionSetError) -> Self {
        match err {
            crate::error::CreatePermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreatePermissionSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreatePermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreatePermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountAssignmentError> for Error {
    fn from(err: crate::error::DeleteAccountAssignmentError) -> Self {
        match err {
            crate::error::DeleteAccountAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAccountAssignmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAccountAssignmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAccountAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAccountAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAccountAssignmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAccountAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteInlinePolicyFromPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteInlinePolicyFromPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInlinePolicyFromPermissionSetError> for Error {
    fn from(err: crate::error::DeleteInlinePolicyFromPermissionSetError) -> Self {
        match err {
            crate::error::DeleteInlinePolicyFromPermissionSetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DeleteInlinePolicyFromPermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteInlinePolicyFromPermissionSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeleteInlinePolicyFromPermissionSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteInlinePolicyFromPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteInlinePolicyFromPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteInlinePolicyFromPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceAccessControlAttributeConfigurationError> for Error {
    fn from(err: crate::error::DeleteInstanceAccessControlAttributeConfigurationError) -> Self {
        match err {
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteInstanceAccessControlAttributeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeletePermissionsBoundaryFromPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeletePermissionsBoundaryFromPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePermissionsBoundaryFromPermissionSetError> for Error {
    fn from(err: crate::error::DeletePermissionsBoundaryFromPermissionSetError) -> Self {
        match err {
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeletePermissionsBoundaryFromPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePermissionSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePermissionSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePermissionSetError> for Error {
    fn from(err: crate::error::DeletePermissionSetError) -> Self {
        match err {
            crate::error::DeletePermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAccountAssignmentCreationStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAccountAssignmentCreationStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountAssignmentCreationStatusError> for Error {
    fn from(err: crate::error::DescribeAccountAssignmentCreationStatusError) -> Self {
        match err {
            crate::error::DescribeAccountAssignmentCreationStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeAccountAssignmentCreationStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeAccountAssignmentCreationStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAccountAssignmentCreationStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeAccountAssignmentCreationStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeAccountAssignmentCreationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAccountAssignmentDeletionStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAccountAssignmentDeletionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountAssignmentDeletionStatusError> for Error {
    fn from(err: crate::error::DescribeAccountAssignmentDeletionStatusError) -> Self {
        match err {
            crate::error::DescribeAccountAssignmentDeletionStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeAccountAssignmentDeletionStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeAccountAssignmentDeletionStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAccountAssignmentDeletionStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeAccountAssignmentDeletionStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeAccountAssignmentDeletionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceAccessControlAttributeConfigurationError> for Error {
    fn from(err: crate::error::DescribeInstanceAccessControlAttributeConfigurationError) -> Self {
        match err {
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeInstanceAccessControlAttributeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePermissionSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePermissionSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePermissionSetError> for Error {
    fn from(err: crate::error::DescribePermissionSetError) -> Self {
        match err {
            crate::error::DescribePermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribePermissionSetProvisioningStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePermissionSetProvisioningStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePermissionSetProvisioningStatusError> for Error {
    fn from(err: crate::error::DescribePermissionSetProvisioningStatusError) -> Self {
        match err {
            crate::error::DescribePermissionSetProvisioningStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribePermissionSetProvisioningStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribePermissionSetProvisioningStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribePermissionSetProvisioningStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribePermissionSetProvisioningStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribePermissionSetProvisioningStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError> for Error {
    fn from(err: crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError) -> Self {
        match err {
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DetachCustomerManagedPolicyReferenceFromPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DetachManagedPolicyFromPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DetachManagedPolicyFromPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachManagedPolicyFromPermissionSetError> for Error {
    fn from(err: crate::error::DetachManagedPolicyFromPermissionSetError) -> Self {
        match err {
            crate::error::DetachManagedPolicyFromPermissionSetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DetachManagedPolicyFromPermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DetachManagedPolicyFromPermissionSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DetachManagedPolicyFromPermissionSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DetachManagedPolicyFromPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DetachManagedPolicyFromPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DetachManagedPolicyFromPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetInlinePolicyForPermissionSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetInlinePolicyForPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInlinePolicyForPermissionSetError> for Error {
    fn from(err: crate::error::GetInlinePolicyForPermissionSetError) -> Self {
        match err {
            crate::error::GetInlinePolicyForPermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInlinePolicyForPermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetInlinePolicyForPermissionSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetInlinePolicyForPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetInlinePolicyForPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetInlinePolicyForPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetPermissionsBoundaryForPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetPermissionsBoundaryForPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPermissionsBoundaryForPermissionSetError> for Error {
    fn from(err: crate::error::GetPermissionsBoundaryForPermissionSetError) -> Self {
        match err {
            crate::error::GetPermissionsBoundaryForPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetPermissionsBoundaryForPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetPermissionsBoundaryForPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetPermissionsBoundaryForPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetPermissionsBoundaryForPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetPermissionsBoundaryForPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAccountAssignmentCreationStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAccountAssignmentCreationStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountAssignmentCreationStatusError> for Error {
    fn from(err: crate::error::ListAccountAssignmentCreationStatusError) -> Self {
        match err {
            crate::error::ListAccountAssignmentCreationStatusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListAccountAssignmentCreationStatusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListAccountAssignmentCreationStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListAccountAssignmentCreationStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAccountAssignmentCreationStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAccountAssignmentCreationStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAccountAssignmentDeletionStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAccountAssignmentDeletionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountAssignmentDeletionStatusError> for Error {
    fn from(err: crate::error::ListAccountAssignmentDeletionStatusError) -> Self {
        match err {
            crate::error::ListAccountAssignmentDeletionStatusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListAccountAssignmentDeletionStatusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListAccountAssignmentDeletionStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListAccountAssignmentDeletionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAccountAssignmentDeletionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAccountAssignmentDeletionStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccountAssignmentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAccountAssignmentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountAssignmentsError> for Error {
    fn from(err: crate::error::ListAccountAssignmentsError) -> Self {
        match err {
            crate::error::ListAccountAssignmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAccountAssignmentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAccountAssignmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListAccountAssignmentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAccountAssignmentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAccountAssignmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAccountsForProvisionedPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAccountsForProvisionedPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountsForProvisionedPermissionSetError> for Error {
    fn from(err: crate::error::ListAccountsForProvisionedPermissionSetError) -> Self {
        match err {
            crate::error::ListAccountsForProvisionedPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAccountsForProvisionedPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListAccountsForProvisionedPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListAccountsForProvisionedPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListAccountsForProvisionedPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAccountsForProvisionedPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError> for Error {
    fn from(err: crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError) -> Self {
        match err {
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListCustomerManagedPolicyReferencesInPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstancesError> for Error {
    fn from(err: crate::error::ListInstancesError) -> Self {
        match err {
            crate::error::ListInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListInstancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListInstancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListInstancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListManagedPoliciesInPermissionSetError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListManagedPoliciesInPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListManagedPoliciesInPermissionSetError> for Error {
    fn from(err: crate::error::ListManagedPoliciesInPermissionSetError) -> Self {
        match err {
            crate::error::ListManagedPoliciesInPermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListManagedPoliciesInPermissionSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListManagedPoliciesInPermissionSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListManagedPoliciesInPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListManagedPoliciesInPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListManagedPoliciesInPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListPermissionSetProvisioningStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListPermissionSetProvisioningStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPermissionSetProvisioningStatusError> for Error {
    fn from(err: crate::error::ListPermissionSetProvisioningStatusError) -> Self {
        match err {
            crate::error::ListPermissionSetProvisioningStatusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListPermissionSetProvisioningStatusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListPermissionSetProvisioningStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListPermissionSetProvisioningStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPermissionSetProvisioningStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPermissionSetProvisioningStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPermissionSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPermissionSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPermissionSetsError> for Error {
    fn from(err: crate::error::ListPermissionSetsError) -> Self {
        match err {
            crate::error::ListPermissionSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPermissionSetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPermissionSetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPermissionSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPermissionSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPermissionSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListPermissionSetsProvisionedToAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListPermissionSetsProvisionedToAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPermissionSetsProvisionedToAccountError> for Error {
    fn from(err: crate::error::ListPermissionSetsProvisionedToAccountError) -> Self {
        match err {
            crate::error::ListPermissionSetsProvisionedToAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListPermissionSetsProvisionedToAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListPermissionSetsProvisionedToAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListPermissionSetsProvisionedToAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListPermissionSetsProvisionedToAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListPermissionSetsProvisionedToAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ProvisionPermissionSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ProvisionPermissionSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ProvisionPermissionSetError> for Error {
    fn from(err: crate::error::ProvisionPermissionSetError) -> Self {
        match err {
            crate::error::ProvisionPermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ProvisionPermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ProvisionPermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ProvisionPermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ProvisionPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ProvisionPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ProvisionPermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutInlinePolicyToPermissionSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutInlinePolicyToPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutInlinePolicyToPermissionSetError> for Error {
    fn from(err: crate::error::PutInlinePolicyToPermissionSetError) -> Self {
        match err {
            crate::error::PutInlinePolicyToPermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::PutInlinePolicyToPermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutInlinePolicyToPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutPermissionsBoundaryToPermissionSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutPermissionsBoundaryToPermissionSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPermissionsBoundaryToPermissionSetError> for Error {
    fn from(err: crate::error::PutPermissionsBoundaryToPermissionSetError) -> Self {
        match err {
            crate::error::PutPermissionsBoundaryToPermissionSetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::PutPermissionsBoundaryToPermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutPermissionsBoundaryToPermissionSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::PutPermissionsBoundaryToPermissionSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::PutPermissionsBoundaryToPermissionSetError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::error::PutPermissionsBoundaryToPermissionSetError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::PutPermissionsBoundaryToPermissionSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceAccessControlAttributeConfigurationError> for Error {
    fn from(err: crate::error::UpdateInstanceAccessControlAttributeConfigurationError) -> Self {
        match err {
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateInstanceAccessControlAttributeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePermissionSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePermissionSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePermissionSetError> for Error {
    fn from(err: crate::error::UpdatePermissionSetError) -> Self {
        match err {
            crate::error::UpdatePermissionSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePermissionSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePermissionSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdatePermissionSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePermissionSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePermissionSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePermissionSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
