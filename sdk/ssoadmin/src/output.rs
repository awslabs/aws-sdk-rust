// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePermissionSetOutput {}
impl std::fmt::Debug for UpdatePermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePermissionSetOutput");
        formatter.finish()
    }
}
/// See [`UpdatePermissionSetOutput`](crate::output::UpdatePermissionSetOutput)
pub mod update_permission_set_output {
    /// A builder for [`UpdatePermissionSetOutput`](crate::output::UpdatePermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdatePermissionSetOutput`](crate::output::UpdatePermissionSetOutput)
        pub fn build(self) -> crate::output::UpdatePermissionSetOutput {
            crate::output::UpdatePermissionSetOutput {}
        }
    }
}
impl UpdatePermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePermissionSetOutput`](crate::output::UpdatePermissionSetOutput)
    pub fn builder() -> crate::output::update_permission_set_output::Builder {
        crate::output::update_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateInstanceAccessControlAttributeConfigurationOutput {}
impl std::fmt::Debug for UpdateInstanceAccessControlAttributeConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("UpdateInstanceAccessControlAttributeConfigurationOutput");
        formatter.finish()
    }
}
/// See [`UpdateInstanceAccessControlAttributeConfigurationOutput`](crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput)
pub mod update_instance_access_control_attribute_configuration_output {
    /// A builder for [`UpdateInstanceAccessControlAttributeConfigurationOutput`](crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateInstanceAccessControlAttributeConfigurationOutput`](crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput)
        pub fn build(
            self,
        ) -> crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput {
            crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput {}
        }
    }
}
impl UpdateInstanceAccessControlAttributeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceAccessControlAttributeConfigurationOutput`](crate::output::UpdateInstanceAccessControlAttributeConfigurationOutput)
    pub fn builder(
    ) -> crate::output::update_instance_access_control_attribute_configuration_output::Builder {
        crate::output::update_instance_access_control_attribute_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutInlinePolicyToPermissionSetOutput {}
impl std::fmt::Debug for PutInlinePolicyToPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutInlinePolicyToPermissionSetOutput");
        formatter.finish()
    }
}
/// See [`PutInlinePolicyToPermissionSetOutput`](crate::output::PutInlinePolicyToPermissionSetOutput)
pub mod put_inline_policy_to_permission_set_output {
    /// A builder for [`PutInlinePolicyToPermissionSetOutput`](crate::output::PutInlinePolicyToPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutInlinePolicyToPermissionSetOutput`](crate::output::PutInlinePolicyToPermissionSetOutput)
        pub fn build(self) -> crate::output::PutInlinePolicyToPermissionSetOutput {
            crate::output::PutInlinePolicyToPermissionSetOutput {}
        }
    }
}
impl PutInlinePolicyToPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`PutInlinePolicyToPermissionSetOutput`](crate::output::PutInlinePolicyToPermissionSetOutput)
    pub fn builder() -> crate::output::put_inline_policy_to_permission_set_output::Builder {
        crate::output::put_inline_policy_to_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProvisionPermissionSetOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub permission_set_provisioning_status:
        std::option::Option<crate::model::PermissionSetProvisioningStatus>,
}
impl ProvisionPermissionSetOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub fn permission_set_provisioning_status(
        &self,
    ) -> std::option::Option<&crate::model::PermissionSetProvisioningStatus> {
        self.permission_set_provisioning_status.as_ref()
    }
}
impl std::fmt::Debug for ProvisionPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProvisionPermissionSetOutput");
        formatter.field(
            "permission_set_provisioning_status",
            &self.permission_set_provisioning_status,
        );
        formatter.finish()
    }
}
/// See [`ProvisionPermissionSetOutput`](crate::output::ProvisionPermissionSetOutput)
pub mod provision_permission_set_output {
    /// A builder for [`ProvisionPermissionSetOutput`](crate::output::ProvisionPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_set_provisioning_status:
            std::option::Option<crate::model::PermissionSetProvisioningStatus>,
    }
    impl Builder {
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn permission_set_provisioning_status(
            mut self,
            input: crate::model::PermissionSetProvisioningStatus,
        ) -> Self {
            self.permission_set_provisioning_status = Some(input);
            self
        }
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn set_permission_set_provisioning_status(
            mut self,
            input: std::option::Option<crate::model::PermissionSetProvisioningStatus>,
        ) -> Self {
            self.permission_set_provisioning_status = input;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionPermissionSetOutput`](crate::output::ProvisionPermissionSetOutput)
        pub fn build(self) -> crate::output::ProvisionPermissionSetOutput {
            crate::output::ProvisionPermissionSetOutput {
                permission_set_provisioning_status: self.permission_set_provisioning_status,
            }
        }
    }
}
impl ProvisionPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionPermissionSetOutput`](crate::output::ProvisionPermissionSetOutput)
    pub fn builder() -> crate::output::provision_permission_set_output::Builder {
        crate::output::provision_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A set of key-value pairs that are used to manage the resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTagsForResourceOutput {
    /// <p>A set of key-value pairs that are used to manage the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A set of key-value pairs that are used to manage the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A set of key-value pairs that are used to manage the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPermissionSetsProvisionedToAccountOutput {
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Defines the level of access that an Amazon Web Services account has.</p>
    pub permission_sets: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListPermissionSetsProvisionedToAccountOutput {
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Defines the level of access that an Amazon Web Services account has.</p>
    pub fn permission_sets(&self) -> std::option::Option<&[std::string::String]> {
        self.permission_sets.as_deref()
    }
}
impl std::fmt::Debug for ListPermissionSetsProvisionedToAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPermissionSetsProvisionedToAccountOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("permission_sets", &self.permission_sets);
        formatter.finish()
    }
}
/// See [`ListPermissionSetsProvisionedToAccountOutput`](crate::output::ListPermissionSetsProvisionedToAccountOutput)
pub mod list_permission_sets_provisioned_to_account_output {
    /// A builder for [`ListPermissionSetsProvisionedToAccountOutput`](crate::output::ListPermissionSetsProvisionedToAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) permission_sets: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `permission_sets`.
        ///
        /// To override the contents of this collection use [`set_permission_sets`](Self::set_permission_sets).
        ///
        /// <p>Defines the level of access that an Amazon Web Services account has.</p>
        pub fn permission_sets(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.permission_sets.unwrap_or_default();
            v.push(input.into());
            self.permission_sets = Some(v);
            self
        }
        /// <p>Defines the level of access that an Amazon Web Services account has.</p>
        pub fn set_permission_sets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.permission_sets = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPermissionSetsProvisionedToAccountOutput`](crate::output::ListPermissionSetsProvisionedToAccountOutput)
        pub fn build(self) -> crate::output::ListPermissionSetsProvisionedToAccountOutput {
            crate::output::ListPermissionSetsProvisionedToAccountOutput {
                next_token: self.next_token,
                permission_sets: self.permission_sets,
            }
        }
    }
}
impl ListPermissionSetsProvisionedToAccountOutput {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetsProvisionedToAccountOutput`](crate::output::ListPermissionSetsProvisionedToAccountOutput)
    pub fn builder() -> crate::output::list_permission_sets_provisioned_to_account_output::Builder {
        crate::output::list_permission_sets_provisioned_to_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPermissionSetsOutput {
    /// <p>Defines the level of access on an Amazon Web Services account.</p>
    pub permission_sets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPermissionSetsOutput {
    /// <p>Defines the level of access on an Amazon Web Services account.</p>
    pub fn permission_sets(&self) -> std::option::Option<&[std::string::String]> {
        self.permission_sets.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPermissionSetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPermissionSetsOutput");
        formatter.field("permission_sets", &self.permission_sets);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPermissionSetsOutput`](crate::output::ListPermissionSetsOutput)
pub mod list_permission_sets_output {
    /// A builder for [`ListPermissionSetsOutput`](crate::output::ListPermissionSetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_sets: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `permission_sets`.
        ///
        /// To override the contents of this collection use [`set_permission_sets`](Self::set_permission_sets).
        ///
        /// <p>Defines the level of access on an Amazon Web Services account.</p>
        pub fn permission_sets(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.permission_sets.unwrap_or_default();
            v.push(input.into());
            self.permission_sets = Some(v);
            self
        }
        /// <p>Defines the level of access on an Amazon Web Services account.</p>
        pub fn set_permission_sets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.permission_sets = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPermissionSetsOutput`](crate::output::ListPermissionSetsOutput)
        pub fn build(self) -> crate::output::ListPermissionSetsOutput {
            crate::output::ListPermissionSetsOutput {
                permission_sets: self.permission_sets,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPermissionSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetsOutput`](crate::output::ListPermissionSetsOutput)
    pub fn builder() -> crate::output::list_permission_sets_output::Builder {
        crate::output::list_permission_sets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPermissionSetProvisioningStatusOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub permission_sets_provisioning_status:
        std::option::Option<std::vec::Vec<crate::model::PermissionSetProvisioningStatusMetadata>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPermissionSetProvisioningStatusOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub fn permission_sets_provisioning_status(
        &self,
    ) -> std::option::Option<&[crate::model::PermissionSetProvisioningStatusMetadata]> {
        self.permission_sets_provisioning_status.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPermissionSetProvisioningStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPermissionSetProvisioningStatusOutput");
        formatter.field(
            "permission_sets_provisioning_status",
            &self.permission_sets_provisioning_status,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPermissionSetProvisioningStatusOutput`](crate::output::ListPermissionSetProvisioningStatusOutput)
pub mod list_permission_set_provisioning_status_output {
    /// A builder for [`ListPermissionSetProvisioningStatusOutput`](crate::output::ListPermissionSetProvisioningStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_sets_provisioning_status: std::option::Option<
            std::vec::Vec<crate::model::PermissionSetProvisioningStatusMetadata>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `permission_sets_provisioning_status`.
        ///
        /// To override the contents of this collection use [`set_permission_sets_provisioning_status`](Self::set_permission_sets_provisioning_status).
        ///
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn permission_sets_provisioning_status(
            mut self,
            input: crate::model::PermissionSetProvisioningStatusMetadata,
        ) -> Self {
            let mut v = self.permission_sets_provisioning_status.unwrap_or_default();
            v.push(input);
            self.permission_sets_provisioning_status = Some(v);
            self
        }
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn set_permission_sets_provisioning_status(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::PermissionSetProvisioningStatusMetadata>,
            >,
        ) -> Self {
            self.permission_sets_provisioning_status = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPermissionSetProvisioningStatusOutput`](crate::output::ListPermissionSetProvisioningStatusOutput)
        pub fn build(self) -> crate::output::ListPermissionSetProvisioningStatusOutput {
            crate::output::ListPermissionSetProvisioningStatusOutput {
                permission_sets_provisioning_status: self.permission_sets_provisioning_status,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPermissionSetProvisioningStatusOutput {
    /// Creates a new builder-style object to manufacture [`ListPermissionSetProvisioningStatusOutput`](crate::output::ListPermissionSetProvisioningStatusOutput)
    pub fn builder() -> crate::output::list_permission_set_provisioning_status_output::Builder {
        crate::output::list_permission_set_provisioning_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListManagedPoliciesInPermissionSetOutput {
    /// <p>The array of the <code>AttachedManagedPolicy</code> data type object.</p>
    pub attached_managed_policies:
        std::option::Option<std::vec::Vec<crate::model::AttachedManagedPolicy>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListManagedPoliciesInPermissionSetOutput {
    /// <p>The array of the <code>AttachedManagedPolicy</code> data type object.</p>
    pub fn attached_managed_policies(
        &self,
    ) -> std::option::Option<&[crate::model::AttachedManagedPolicy]> {
        self.attached_managed_policies.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListManagedPoliciesInPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListManagedPoliciesInPermissionSetOutput");
        formatter.field("attached_managed_policies", &self.attached_managed_policies);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListManagedPoliciesInPermissionSetOutput`](crate::output::ListManagedPoliciesInPermissionSetOutput)
pub mod list_managed_policies_in_permission_set_output {
    /// A builder for [`ListManagedPoliciesInPermissionSetOutput`](crate::output::ListManagedPoliciesInPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attached_managed_policies:
            std::option::Option<std::vec::Vec<crate::model::AttachedManagedPolicy>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `attached_managed_policies`.
        ///
        /// To override the contents of this collection use [`set_attached_managed_policies`](Self::set_attached_managed_policies).
        ///
        /// <p>The array of the <code>AttachedManagedPolicy</code> data type object.</p>
        pub fn attached_managed_policies(
            mut self,
            input: crate::model::AttachedManagedPolicy,
        ) -> Self {
            let mut v = self.attached_managed_policies.unwrap_or_default();
            v.push(input);
            self.attached_managed_policies = Some(v);
            self
        }
        /// <p>The array of the <code>AttachedManagedPolicy</code> data type object.</p>
        pub fn set_attached_managed_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttachedManagedPolicy>>,
        ) -> Self {
            self.attached_managed_policies = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListManagedPoliciesInPermissionSetOutput`](crate::output::ListManagedPoliciesInPermissionSetOutput)
        pub fn build(self) -> crate::output::ListManagedPoliciesInPermissionSetOutput {
            crate::output::ListManagedPoliciesInPermissionSetOutput {
                attached_managed_policies: self.attached_managed_policies,
                next_token: self.next_token,
            }
        }
    }
}
impl ListManagedPoliciesInPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedPoliciesInPermissionSetOutput`](crate::output::ListManagedPoliciesInPermissionSetOutput)
    pub fn builder() -> crate::output::list_managed_policies_in_permission_set_output::Builder {
        crate::output::list_managed_policies_in_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstancesOutput {
    /// <p>Lists the SSO instances that the caller has access to.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::InstanceMetadata>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInstancesOutput {
    /// <p>Lists the SSO instances that the caller has access to.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::InstanceMetadata]> {
        self.instances.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstancesOutput");
        formatter.field("instances", &self.instances);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListInstancesOutput`](crate::output::ListInstancesOutput)
pub mod list_instances_output {
    /// A builder for [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::InstanceMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>Lists the SSO instances that the caller has access to.</p>
        pub fn instances(mut self, input: crate::model::InstanceMetadata) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>Lists the SSO instances that the caller has access to.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceMetadata>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstancesOutput`](crate::output::ListInstancesOutput)
        pub fn build(self) -> crate::output::ListInstancesOutput {
            crate::output::ListInstancesOutput {
                instances: self.instances,
                next_token: self.next_token,
            }
        }
    }
}
impl ListInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    pub fn builder() -> crate::output::list_instances_output::Builder {
        crate::output::list_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccountsForProvisionedPermissionSetOutput {
    /// <p>The list of Amazon Web Services <code>AccountIds</code>.</p>
    pub account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountsForProvisionedPermissionSetOutput {
    /// <p>The list of Amazon Web Services <code>AccountIds</code>.</p>
    pub fn account_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAccountsForProvisionedPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountsForProvisionedPermissionSetOutput");
        formatter.field("account_ids", &self.account_ids);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAccountsForProvisionedPermissionSetOutput`](crate::output::ListAccountsForProvisionedPermissionSetOutput)
pub mod list_accounts_for_provisioned_permission_set_output {
    /// A builder for [`ListAccountsForProvisionedPermissionSetOutput`](crate::output::ListAccountsForProvisionedPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `account_ids`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The list of Amazon Web Services <code>AccountIds</code>.</p>
        pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.account_ids.unwrap_or_default();
            v.push(input.into());
            self.account_ids = Some(v);
            self
        }
        /// <p>The list of Amazon Web Services <code>AccountIds</code>.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.account_ids = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccountsForProvisionedPermissionSetOutput`](crate::output::ListAccountsForProvisionedPermissionSetOutput)
        pub fn build(self) -> crate::output::ListAccountsForProvisionedPermissionSetOutput {
            crate::output::ListAccountsForProvisionedPermissionSetOutput {
                account_ids: self.account_ids,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAccountsForProvisionedPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountsForProvisionedPermissionSetOutput`](crate::output::ListAccountsForProvisionedPermissionSetOutput)
    pub fn builder() -> crate::output::list_accounts_for_provisioned_permission_set_output::Builder
    {
        crate::output::list_accounts_for_provisioned_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccountAssignmentsOutput {
    /// <p>The list of assignments that match the input Amazon Web Services account and permission set.</p>
    pub account_assignments: std::option::Option<std::vec::Vec<crate::model::AccountAssignment>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountAssignmentsOutput {
    /// <p>The list of assignments that match the input Amazon Web Services account and permission set.</p>
    pub fn account_assignments(&self) -> std::option::Option<&[crate::model::AccountAssignment]> {
        self.account_assignments.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAccountAssignmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountAssignmentsOutput");
        formatter.field("account_assignments", &self.account_assignments);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAccountAssignmentsOutput`](crate::output::ListAccountAssignmentsOutput)
pub mod list_account_assignments_output {
    /// A builder for [`ListAccountAssignmentsOutput`](crate::output::ListAccountAssignmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignments:
            std::option::Option<std::vec::Vec<crate::model::AccountAssignment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `account_assignments`.
        ///
        /// To override the contents of this collection use [`set_account_assignments`](Self::set_account_assignments).
        ///
        /// <p>The list of assignments that match the input Amazon Web Services account and permission set.</p>
        pub fn account_assignments(mut self, input: crate::model::AccountAssignment) -> Self {
            let mut v = self.account_assignments.unwrap_or_default();
            v.push(input);
            self.account_assignments = Some(v);
            self
        }
        /// <p>The list of assignments that match the input Amazon Web Services account and permission set.</p>
        pub fn set_account_assignments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountAssignment>>,
        ) -> Self {
            self.account_assignments = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccountAssignmentsOutput`](crate::output::ListAccountAssignmentsOutput)
        pub fn build(self) -> crate::output::ListAccountAssignmentsOutput {
            crate::output::ListAccountAssignmentsOutput {
                account_assignments: self.account_assignments,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAccountAssignmentsOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentsOutput`](crate::output::ListAccountAssignmentsOutput)
    pub fn builder() -> crate::output::list_account_assignments_output::Builder {
        crate::output::list_account_assignments_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccountAssignmentDeletionStatusOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub account_assignments_deletion_status:
        std::option::Option<std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountAssignmentDeletionStatusOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub fn account_assignments_deletion_status(
        &self,
    ) -> std::option::Option<&[crate::model::AccountAssignmentOperationStatusMetadata]> {
        self.account_assignments_deletion_status.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAccountAssignmentDeletionStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountAssignmentDeletionStatusOutput");
        formatter.field(
            "account_assignments_deletion_status",
            &self.account_assignments_deletion_status,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAccountAssignmentDeletionStatusOutput`](crate::output::ListAccountAssignmentDeletionStatusOutput)
pub mod list_account_assignment_deletion_status_output {
    /// A builder for [`ListAccountAssignmentDeletionStatusOutput`](crate::output::ListAccountAssignmentDeletionStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignments_deletion_status: std::option::Option<
            std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `account_assignments_deletion_status`.
        ///
        /// To override the contents of this collection use [`set_account_assignments_deletion_status`](Self::set_account_assignments_deletion_status).
        ///
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn account_assignments_deletion_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatusMetadata,
        ) -> Self {
            let mut v = self.account_assignments_deletion_status.unwrap_or_default();
            v.push(input);
            self.account_assignments_deletion_status = Some(v);
            self
        }
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn set_account_assignments_deletion_status(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>,
            >,
        ) -> Self {
            self.account_assignments_deletion_status = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccountAssignmentDeletionStatusOutput`](crate::output::ListAccountAssignmentDeletionStatusOutput)
        pub fn build(self) -> crate::output::ListAccountAssignmentDeletionStatusOutput {
            crate::output::ListAccountAssignmentDeletionStatusOutput {
                account_assignments_deletion_status: self.account_assignments_deletion_status,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAccountAssignmentDeletionStatusOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentDeletionStatusOutput`](crate::output::ListAccountAssignmentDeletionStatusOutput)
    pub fn builder() -> crate::output::list_account_assignment_deletion_status_output::Builder {
        crate::output::list_account_assignment_deletion_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccountAssignmentCreationStatusOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub account_assignments_creation_status:
        std::option::Option<std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>>,
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountAssignmentCreationStatusOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub fn account_assignments_creation_status(
        &self,
    ) -> std::option::Option<&[crate::model::AccountAssignmentOperationStatusMetadata]> {
        self.account_assignments_creation_status.as_deref()
    }
    /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAccountAssignmentCreationStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccountAssignmentCreationStatusOutput");
        formatter.field(
            "account_assignments_creation_status",
            &self.account_assignments_creation_status,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAccountAssignmentCreationStatusOutput`](crate::output::ListAccountAssignmentCreationStatusOutput)
pub mod list_account_assignment_creation_status_output {
    /// A builder for [`ListAccountAssignmentCreationStatusOutput`](crate::output::ListAccountAssignmentCreationStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignments_creation_status: std::option::Option<
            std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `account_assignments_creation_status`.
        ///
        /// To override the contents of this collection use [`set_account_assignments_creation_status`](Self::set_account_assignments_creation_status).
        ///
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn account_assignments_creation_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatusMetadata,
        ) -> Self {
            let mut v = self.account_assignments_creation_status.unwrap_or_default();
            v.push(input);
            self.account_assignments_creation_status = Some(v);
            self
        }
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn set_account_assignments_creation_status(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AccountAssignmentOperationStatusMetadata>,
            >,
        ) -> Self {
            self.account_assignments_creation_status = input;
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the list API. Initially the value is null. Use the output of previous API calls to make subsequent calls.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccountAssignmentCreationStatusOutput`](crate::output::ListAccountAssignmentCreationStatusOutput)
        pub fn build(self) -> crate::output::ListAccountAssignmentCreationStatusOutput {
            crate::output::ListAccountAssignmentCreationStatusOutput {
                account_assignments_creation_status: self.account_assignments_creation_status,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAccountAssignmentCreationStatusOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountAssignmentCreationStatusOutput`](crate::output::ListAccountAssignmentCreationStatusOutput)
    pub fn builder() -> crate::output::list_account_assignment_creation_status_output::Builder {
        crate::output::list_account_assignment_creation_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetInlinePolicyForPermissionSetOutput {
    /// <p>The IAM inline policy that is attached to the permission set.</p>
    pub inline_policy: std::option::Option<std::string::String>,
}
impl GetInlinePolicyForPermissionSetOutput {
    /// <p>The IAM inline policy that is attached to the permission set.</p>
    pub fn inline_policy(&self) -> std::option::Option<&str> {
        self.inline_policy.as_deref()
    }
}
impl std::fmt::Debug for GetInlinePolicyForPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetInlinePolicyForPermissionSetOutput");
        formatter.field("inline_policy", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`GetInlinePolicyForPermissionSetOutput`](crate::output::GetInlinePolicyForPermissionSetOutput)
pub mod get_inline_policy_for_permission_set_output {
    /// A builder for [`GetInlinePolicyForPermissionSetOutput`](crate::output::GetInlinePolicyForPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) inline_policy: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The IAM inline policy that is attached to the permission set.</p>
        pub fn inline_policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.inline_policy = Some(input.into());
            self
        }
        /// <p>The IAM inline policy that is attached to the permission set.</p>
        pub fn set_inline_policy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inline_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetInlinePolicyForPermissionSetOutput`](crate::output::GetInlinePolicyForPermissionSetOutput)
        pub fn build(self) -> crate::output::GetInlinePolicyForPermissionSetOutput {
            crate::output::GetInlinePolicyForPermissionSetOutput {
                inline_policy: self.inline_policy,
            }
        }
    }
}
impl GetInlinePolicyForPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`GetInlinePolicyForPermissionSetOutput`](crate::output::GetInlinePolicyForPermissionSetOutput)
    pub fn builder() -> crate::output::get_inline_policy_for_permission_set_output::Builder {
        crate::output::get_inline_policy_for_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachManagedPolicyFromPermissionSetOutput {}
impl std::fmt::Debug for DetachManagedPolicyFromPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachManagedPolicyFromPermissionSetOutput");
        formatter.finish()
    }
}
/// See [`DetachManagedPolicyFromPermissionSetOutput`](crate::output::DetachManagedPolicyFromPermissionSetOutput)
pub mod detach_managed_policy_from_permission_set_output {
    /// A builder for [`DetachManagedPolicyFromPermissionSetOutput`](crate::output::DetachManagedPolicyFromPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DetachManagedPolicyFromPermissionSetOutput`](crate::output::DetachManagedPolicyFromPermissionSetOutput)
        pub fn build(self) -> crate::output::DetachManagedPolicyFromPermissionSetOutput {
            crate::output::DetachManagedPolicyFromPermissionSetOutput {}
        }
    }
}
impl DetachManagedPolicyFromPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`DetachManagedPolicyFromPermissionSetOutput`](crate::output::DetachManagedPolicyFromPermissionSetOutput)
    pub fn builder() -> crate::output::detach_managed_policy_from_permission_set_output::Builder {
        crate::output::detach_managed_policy_from_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePermissionSetProvisioningStatusOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub permission_set_provisioning_status:
        std::option::Option<crate::model::PermissionSetProvisioningStatus>,
}
impl DescribePermissionSetProvisioningStatusOutput {
    /// <p>The status object for the permission set provisioning operation.</p>
    pub fn permission_set_provisioning_status(
        &self,
    ) -> std::option::Option<&crate::model::PermissionSetProvisioningStatus> {
        self.permission_set_provisioning_status.as_ref()
    }
}
impl std::fmt::Debug for DescribePermissionSetProvisioningStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePermissionSetProvisioningStatusOutput");
        formatter.field(
            "permission_set_provisioning_status",
            &self.permission_set_provisioning_status,
        );
        formatter.finish()
    }
}
/// See [`DescribePermissionSetProvisioningStatusOutput`](crate::output::DescribePermissionSetProvisioningStatusOutput)
pub mod describe_permission_set_provisioning_status_output {
    /// A builder for [`DescribePermissionSetProvisioningStatusOutput`](crate::output::DescribePermissionSetProvisioningStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_set_provisioning_status:
            std::option::Option<crate::model::PermissionSetProvisioningStatus>,
    }
    impl Builder {
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn permission_set_provisioning_status(
            mut self,
            input: crate::model::PermissionSetProvisioningStatus,
        ) -> Self {
            self.permission_set_provisioning_status = Some(input);
            self
        }
        /// <p>The status object for the permission set provisioning operation.</p>
        pub fn set_permission_set_provisioning_status(
            mut self,
            input: std::option::Option<crate::model::PermissionSetProvisioningStatus>,
        ) -> Self {
            self.permission_set_provisioning_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribePermissionSetProvisioningStatusOutput`](crate::output::DescribePermissionSetProvisioningStatusOutput)
        pub fn build(self) -> crate::output::DescribePermissionSetProvisioningStatusOutput {
            crate::output::DescribePermissionSetProvisioningStatusOutput {
                permission_set_provisioning_status: self.permission_set_provisioning_status,
            }
        }
    }
}
impl DescribePermissionSetProvisioningStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribePermissionSetProvisioningStatusOutput`](crate::output::DescribePermissionSetProvisioningStatusOutput)
    pub fn builder() -> crate::output::describe_permission_set_provisioning_status_output::Builder {
        crate::output::describe_permission_set_provisioning_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePermissionSetOutput {
    /// <p>Describes the level of access on an Amazon Web Services account.</p>
    pub permission_set: std::option::Option<crate::model::PermissionSet>,
}
impl DescribePermissionSetOutput {
    /// <p>Describes the level of access on an Amazon Web Services account.</p>
    pub fn permission_set(&self) -> std::option::Option<&crate::model::PermissionSet> {
        self.permission_set.as_ref()
    }
}
impl std::fmt::Debug for DescribePermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePermissionSetOutput");
        formatter.field("permission_set", &self.permission_set);
        formatter.finish()
    }
}
/// See [`DescribePermissionSetOutput`](crate::output::DescribePermissionSetOutput)
pub mod describe_permission_set_output {
    /// A builder for [`DescribePermissionSetOutput`](crate::output::DescribePermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_set: std::option::Option<crate::model::PermissionSet>,
    }
    impl Builder {
        /// <p>Describes the level of access on an Amazon Web Services account.</p>
        pub fn permission_set(mut self, input: crate::model::PermissionSet) -> Self {
            self.permission_set = Some(input);
            self
        }
        /// <p>Describes the level of access on an Amazon Web Services account.</p>
        pub fn set_permission_set(
            mut self,
            input: std::option::Option<crate::model::PermissionSet>,
        ) -> Self {
            self.permission_set = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribePermissionSetOutput`](crate::output::DescribePermissionSetOutput)
        pub fn build(self) -> crate::output::DescribePermissionSetOutput {
            crate::output::DescribePermissionSetOutput {
                permission_set: self.permission_set,
            }
        }
    }
}
impl DescribePermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`DescribePermissionSetOutput`](crate::output::DescribePermissionSetOutput)
    pub fn builder() -> crate::output::describe_permission_set_output::Builder {
        crate::output::describe_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceAccessControlAttributeConfigurationOutput {
    /// <p>The status of the attribute configuration process.</p>
    pub status:
        std::option::Option<crate::model::InstanceAccessControlAttributeConfigurationStatus>,
    /// <p>Provides more details about the current status of the specified attribute.</p>
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>Gets the list of Amazon Web Services SSO identity store attributes that have been added to your ABAC configuration.</p>
    pub instance_access_control_attribute_configuration:
        std::option::Option<crate::model::InstanceAccessControlAttributeConfiguration>,
}
impl DescribeInstanceAccessControlAttributeConfigurationOutput {
    /// <p>The status of the attribute configuration process.</p>
    pub fn status(
        &self,
    ) -> std::option::Option<&crate::model::InstanceAccessControlAttributeConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>Provides more details about the current status of the specified attribute.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Gets the list of Amazon Web Services SSO identity store attributes that have been added to your ABAC configuration.</p>
    pub fn instance_access_control_attribute_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InstanceAccessControlAttributeConfiguration> {
        self.instance_access_control_attribute_configuration
            .as_ref()
    }
}
impl std::fmt::Debug for DescribeInstanceAccessControlAttributeConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("DescribeInstanceAccessControlAttributeConfigurationOutput");
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field(
            "instance_access_control_attribute_configuration",
            &self.instance_access_control_attribute_configuration,
        );
        formatter.finish()
    }
}
/// See [`DescribeInstanceAccessControlAttributeConfigurationOutput`](crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput)
pub mod describe_instance_access_control_attribute_configuration_output {
    /// A builder for [`DescribeInstanceAccessControlAttributeConfigurationOutput`](crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status:
            std::option::Option<crate::model::InstanceAccessControlAttributeConfigurationStatus>,
        pub(crate) status_reason: std::option::Option<std::string::String>,
        pub(crate) instance_access_control_attribute_configuration:
            std::option::Option<crate::model::InstanceAccessControlAttributeConfiguration>,
    }
    impl Builder {
        /// <p>The status of the attribute configuration process.</p>
        pub fn status(
            mut self,
            input: crate::model::InstanceAccessControlAttributeConfigurationStatus,
        ) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the attribute configuration process.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<
                crate::model::InstanceAccessControlAttributeConfigurationStatus,
            >,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>Provides more details about the current status of the specified attribute.</p>
        pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_reason = Some(input.into());
            self
        }
        /// <p>Provides more details about the current status of the specified attribute.</p>
        pub fn set_status_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_reason = input;
            self
        }
        /// <p>Gets the list of Amazon Web Services SSO identity store attributes that have been added to your ABAC configuration.</p>
        pub fn instance_access_control_attribute_configuration(
            mut self,
            input: crate::model::InstanceAccessControlAttributeConfiguration,
        ) -> Self {
            self.instance_access_control_attribute_configuration = Some(input);
            self
        }
        /// <p>Gets the list of Amazon Web Services SSO identity store attributes that have been added to your ABAC configuration.</p>
        pub fn set_instance_access_control_attribute_configuration(
            mut self,
            input: std::option::Option<crate::model::InstanceAccessControlAttributeConfiguration>,
        ) -> Self {
            self.instance_access_control_attribute_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceAccessControlAttributeConfigurationOutput`](crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput)
        pub fn build(
            self,
        ) -> crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput {
            crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput {
                status: self.status,
                status_reason: self.status_reason,
                instance_access_control_attribute_configuration: self
                    .instance_access_control_attribute_configuration,
            }
        }
    }
}
impl DescribeInstanceAccessControlAttributeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAccessControlAttributeConfigurationOutput`](crate::output::DescribeInstanceAccessControlAttributeConfigurationOutput)
    pub fn builder(
    ) -> crate::output::describe_instance_access_control_attribute_configuration_output::Builder
    {
        crate::output::describe_instance_access_control_attribute_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAssignmentDeletionStatusOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub account_assignment_deletion_status:
        std::option::Option<crate::model::AccountAssignmentOperationStatus>,
}
impl DescribeAccountAssignmentDeletionStatusOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub fn account_assignment_deletion_status(
        &self,
    ) -> std::option::Option<&crate::model::AccountAssignmentOperationStatus> {
        self.account_assignment_deletion_status.as_ref()
    }
}
impl std::fmt::Debug for DescribeAccountAssignmentDeletionStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAssignmentDeletionStatusOutput");
        formatter.field(
            "account_assignment_deletion_status",
            &self.account_assignment_deletion_status,
        );
        formatter.finish()
    }
}
/// See [`DescribeAccountAssignmentDeletionStatusOutput`](crate::output::DescribeAccountAssignmentDeletionStatusOutput)
pub mod describe_account_assignment_deletion_status_output {
    /// A builder for [`DescribeAccountAssignmentDeletionStatusOutput`](crate::output::DescribeAccountAssignmentDeletionStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignment_deletion_status:
            std::option::Option<crate::model::AccountAssignmentOperationStatus>,
    }
    impl Builder {
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn account_assignment_deletion_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatus,
        ) -> Self {
            self.account_assignment_deletion_status = Some(input);
            self
        }
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn set_account_assignment_deletion_status(
            mut self,
            input: std::option::Option<crate::model::AccountAssignmentOperationStatus>,
        ) -> Self {
            self.account_assignment_deletion_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAssignmentDeletionStatusOutput`](crate::output::DescribeAccountAssignmentDeletionStatusOutput)
        pub fn build(self) -> crate::output::DescribeAccountAssignmentDeletionStatusOutput {
            crate::output::DescribeAccountAssignmentDeletionStatusOutput {
                account_assignment_deletion_status: self.account_assignment_deletion_status,
            }
        }
    }
}
impl DescribeAccountAssignmentDeletionStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAssignmentDeletionStatusOutput`](crate::output::DescribeAccountAssignmentDeletionStatusOutput)
    pub fn builder() -> crate::output::describe_account_assignment_deletion_status_output::Builder {
        crate::output::describe_account_assignment_deletion_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAssignmentCreationStatusOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub account_assignment_creation_status:
        std::option::Option<crate::model::AccountAssignmentOperationStatus>,
}
impl DescribeAccountAssignmentCreationStatusOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub fn account_assignment_creation_status(
        &self,
    ) -> std::option::Option<&crate::model::AccountAssignmentOperationStatus> {
        self.account_assignment_creation_status.as_ref()
    }
}
impl std::fmt::Debug for DescribeAccountAssignmentCreationStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAssignmentCreationStatusOutput");
        formatter.field(
            "account_assignment_creation_status",
            &self.account_assignment_creation_status,
        );
        formatter.finish()
    }
}
/// See [`DescribeAccountAssignmentCreationStatusOutput`](crate::output::DescribeAccountAssignmentCreationStatusOutput)
pub mod describe_account_assignment_creation_status_output {
    /// A builder for [`DescribeAccountAssignmentCreationStatusOutput`](crate::output::DescribeAccountAssignmentCreationStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignment_creation_status:
            std::option::Option<crate::model::AccountAssignmentOperationStatus>,
    }
    impl Builder {
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn account_assignment_creation_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatus,
        ) -> Self {
            self.account_assignment_creation_status = Some(input);
            self
        }
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn set_account_assignment_creation_status(
            mut self,
            input: std::option::Option<crate::model::AccountAssignmentOperationStatus>,
        ) -> Self {
            self.account_assignment_creation_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAssignmentCreationStatusOutput`](crate::output::DescribeAccountAssignmentCreationStatusOutput)
        pub fn build(self) -> crate::output::DescribeAccountAssignmentCreationStatusOutput {
            crate::output::DescribeAccountAssignmentCreationStatusOutput {
                account_assignment_creation_status: self.account_assignment_creation_status,
            }
        }
    }
}
impl DescribeAccountAssignmentCreationStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAssignmentCreationStatusOutput`](crate::output::DescribeAccountAssignmentCreationStatusOutput)
    pub fn builder() -> crate::output::describe_account_assignment_creation_status_output::Builder {
        crate::output::describe_account_assignment_creation_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePermissionSetOutput {}
impl std::fmt::Debug for DeletePermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePermissionSetOutput");
        formatter.finish()
    }
}
/// See [`DeletePermissionSetOutput`](crate::output::DeletePermissionSetOutput)
pub mod delete_permission_set_output {
    /// A builder for [`DeletePermissionSetOutput`](crate::output::DeletePermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePermissionSetOutput`](crate::output::DeletePermissionSetOutput)
        pub fn build(self) -> crate::output::DeletePermissionSetOutput {
            crate::output::DeletePermissionSetOutput {}
        }
    }
}
impl DeletePermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`DeletePermissionSetOutput`](crate::output::DeletePermissionSetOutput)
    pub fn builder() -> crate::output::delete_permission_set_output::Builder {
        crate::output::delete_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInstanceAccessControlAttributeConfigurationOutput {}
impl std::fmt::Debug for DeleteInstanceAccessControlAttributeConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("DeleteInstanceAccessControlAttributeConfigurationOutput");
        formatter.finish()
    }
}
/// See [`DeleteInstanceAccessControlAttributeConfigurationOutput`](crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput)
pub mod delete_instance_access_control_attribute_configuration_output {
    /// A builder for [`DeleteInstanceAccessControlAttributeConfigurationOutput`](crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteInstanceAccessControlAttributeConfigurationOutput`](crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput)
        pub fn build(
            self,
        ) -> crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput {
            crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput {}
        }
    }
}
impl DeleteInstanceAccessControlAttributeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceAccessControlAttributeConfigurationOutput`](crate::output::DeleteInstanceAccessControlAttributeConfigurationOutput)
    pub fn builder(
    ) -> crate::output::delete_instance_access_control_attribute_configuration_output::Builder {
        crate::output::delete_instance_access_control_attribute_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInlinePolicyFromPermissionSetOutput {}
impl std::fmt::Debug for DeleteInlinePolicyFromPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInlinePolicyFromPermissionSetOutput");
        formatter.finish()
    }
}
/// See [`DeleteInlinePolicyFromPermissionSetOutput`](crate::output::DeleteInlinePolicyFromPermissionSetOutput)
pub mod delete_inline_policy_from_permission_set_output {
    /// A builder for [`DeleteInlinePolicyFromPermissionSetOutput`](crate::output::DeleteInlinePolicyFromPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteInlinePolicyFromPermissionSetOutput`](crate::output::DeleteInlinePolicyFromPermissionSetOutput)
        pub fn build(self) -> crate::output::DeleteInlinePolicyFromPermissionSetOutput {
            crate::output::DeleteInlinePolicyFromPermissionSetOutput {}
        }
    }
}
impl DeleteInlinePolicyFromPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInlinePolicyFromPermissionSetOutput`](crate::output::DeleteInlinePolicyFromPermissionSetOutput)
    pub fn builder() -> crate::output::delete_inline_policy_from_permission_set_output::Builder {
        crate::output::delete_inline_policy_from_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAccountAssignmentOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub account_assignment_deletion_status:
        std::option::Option<crate::model::AccountAssignmentOperationStatus>,
}
impl DeleteAccountAssignmentOutput {
    /// <p>The status object for the account assignment deletion operation.</p>
    pub fn account_assignment_deletion_status(
        &self,
    ) -> std::option::Option<&crate::model::AccountAssignmentOperationStatus> {
        self.account_assignment_deletion_status.as_ref()
    }
}
impl std::fmt::Debug for DeleteAccountAssignmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAccountAssignmentOutput");
        formatter.field(
            "account_assignment_deletion_status",
            &self.account_assignment_deletion_status,
        );
        formatter.finish()
    }
}
/// See [`DeleteAccountAssignmentOutput`](crate::output::DeleteAccountAssignmentOutput)
pub mod delete_account_assignment_output {
    /// A builder for [`DeleteAccountAssignmentOutput`](crate::output::DeleteAccountAssignmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignment_deletion_status:
            std::option::Option<crate::model::AccountAssignmentOperationStatus>,
    }
    impl Builder {
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn account_assignment_deletion_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatus,
        ) -> Self {
            self.account_assignment_deletion_status = Some(input);
            self
        }
        /// <p>The status object for the account assignment deletion operation.</p>
        pub fn set_account_assignment_deletion_status(
            mut self,
            input: std::option::Option<crate::model::AccountAssignmentOperationStatus>,
        ) -> Self {
            self.account_assignment_deletion_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAccountAssignmentOutput`](crate::output::DeleteAccountAssignmentOutput)
        pub fn build(self) -> crate::output::DeleteAccountAssignmentOutput {
            crate::output::DeleteAccountAssignmentOutput {
                account_assignment_deletion_status: self.account_assignment_deletion_status,
            }
        }
    }
}
impl DeleteAccountAssignmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAccountAssignmentOutput`](crate::output::DeleteAccountAssignmentOutput)
    pub fn builder() -> crate::output::delete_account_assignment_output::Builder {
        crate::output::delete_account_assignment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePermissionSetOutput {
    /// <p>Defines the level of access on an Amazon Web Services account.</p>
    pub permission_set: std::option::Option<crate::model::PermissionSet>,
}
impl CreatePermissionSetOutput {
    /// <p>Defines the level of access on an Amazon Web Services account.</p>
    pub fn permission_set(&self) -> std::option::Option<&crate::model::PermissionSet> {
        self.permission_set.as_ref()
    }
}
impl std::fmt::Debug for CreatePermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePermissionSetOutput");
        formatter.field("permission_set", &self.permission_set);
        formatter.finish()
    }
}
/// See [`CreatePermissionSetOutput`](crate::output::CreatePermissionSetOutput)
pub mod create_permission_set_output {
    /// A builder for [`CreatePermissionSetOutput`](crate::output::CreatePermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permission_set: std::option::Option<crate::model::PermissionSet>,
    }
    impl Builder {
        /// <p>Defines the level of access on an Amazon Web Services account.</p>
        pub fn permission_set(mut self, input: crate::model::PermissionSet) -> Self {
            self.permission_set = Some(input);
            self
        }
        /// <p>Defines the level of access on an Amazon Web Services account.</p>
        pub fn set_permission_set(
            mut self,
            input: std::option::Option<crate::model::PermissionSet>,
        ) -> Self {
            self.permission_set = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePermissionSetOutput`](crate::output::CreatePermissionSetOutput)
        pub fn build(self) -> crate::output::CreatePermissionSetOutput {
            crate::output::CreatePermissionSetOutput {
                permission_set: self.permission_set,
            }
        }
    }
}
impl CreatePermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`CreatePermissionSetOutput`](crate::output::CreatePermissionSetOutput)
    pub fn builder() -> crate::output::create_permission_set_output::Builder {
        crate::output::create_permission_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateInstanceAccessControlAttributeConfigurationOutput {}
impl std::fmt::Debug for CreateInstanceAccessControlAttributeConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("CreateInstanceAccessControlAttributeConfigurationOutput");
        formatter.finish()
    }
}
/// See [`CreateInstanceAccessControlAttributeConfigurationOutput`](crate::output::CreateInstanceAccessControlAttributeConfigurationOutput)
pub mod create_instance_access_control_attribute_configuration_output {
    /// A builder for [`CreateInstanceAccessControlAttributeConfigurationOutput`](crate::output::CreateInstanceAccessControlAttributeConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateInstanceAccessControlAttributeConfigurationOutput`](crate::output::CreateInstanceAccessControlAttributeConfigurationOutput)
        pub fn build(
            self,
        ) -> crate::output::CreateInstanceAccessControlAttributeConfigurationOutput {
            crate::output::CreateInstanceAccessControlAttributeConfigurationOutput {}
        }
    }
}
impl CreateInstanceAccessControlAttributeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceAccessControlAttributeConfigurationOutput`](crate::output::CreateInstanceAccessControlAttributeConfigurationOutput)
    pub fn builder(
    ) -> crate::output::create_instance_access_control_attribute_configuration_output::Builder {
        crate::output::create_instance_access_control_attribute_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAccountAssignmentOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub account_assignment_creation_status:
        std::option::Option<crate::model::AccountAssignmentOperationStatus>,
}
impl CreateAccountAssignmentOutput {
    /// <p>The status object for the account assignment creation operation.</p>
    pub fn account_assignment_creation_status(
        &self,
    ) -> std::option::Option<&crate::model::AccountAssignmentOperationStatus> {
        self.account_assignment_creation_status.as_ref()
    }
}
impl std::fmt::Debug for CreateAccountAssignmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAccountAssignmentOutput");
        formatter.field(
            "account_assignment_creation_status",
            &self.account_assignment_creation_status,
        );
        formatter.finish()
    }
}
/// See [`CreateAccountAssignmentOutput`](crate::output::CreateAccountAssignmentOutput)
pub mod create_account_assignment_output {
    /// A builder for [`CreateAccountAssignmentOutput`](crate::output::CreateAccountAssignmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_assignment_creation_status:
            std::option::Option<crate::model::AccountAssignmentOperationStatus>,
    }
    impl Builder {
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn account_assignment_creation_status(
            mut self,
            input: crate::model::AccountAssignmentOperationStatus,
        ) -> Self {
            self.account_assignment_creation_status = Some(input);
            self
        }
        /// <p>The status object for the account assignment creation operation.</p>
        pub fn set_account_assignment_creation_status(
            mut self,
            input: std::option::Option<crate::model::AccountAssignmentOperationStatus>,
        ) -> Self {
            self.account_assignment_creation_status = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAccountAssignmentOutput`](crate::output::CreateAccountAssignmentOutput)
        pub fn build(self) -> crate::output::CreateAccountAssignmentOutput {
            crate::output::CreateAccountAssignmentOutput {
                account_assignment_creation_status: self.account_assignment_creation_status,
            }
        }
    }
}
impl CreateAccountAssignmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateAccountAssignmentOutput`](crate::output::CreateAccountAssignmentOutput)
    pub fn builder() -> crate::output::create_account_assignment_output::Builder {
        crate::output::create_account_assignment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachManagedPolicyToPermissionSetOutput {}
impl std::fmt::Debug for AttachManagedPolicyToPermissionSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachManagedPolicyToPermissionSetOutput");
        formatter.finish()
    }
}
/// See [`AttachManagedPolicyToPermissionSetOutput`](crate::output::AttachManagedPolicyToPermissionSetOutput)
pub mod attach_managed_policy_to_permission_set_output {
    /// A builder for [`AttachManagedPolicyToPermissionSetOutput`](crate::output::AttachManagedPolicyToPermissionSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AttachManagedPolicyToPermissionSetOutput`](crate::output::AttachManagedPolicyToPermissionSetOutput)
        pub fn build(self) -> crate::output::AttachManagedPolicyToPermissionSetOutput {
            crate::output::AttachManagedPolicyToPermissionSetOutput {}
        }
    }
}
impl AttachManagedPolicyToPermissionSetOutput {
    /// Creates a new builder-style object to manufacture [`AttachManagedPolicyToPermissionSetOutput`](crate::output::AttachManagedPolicyToPermissionSetOutput)
    pub fn builder() -> crate::output::attach_managed_policy_to_permission_set_output::Builder {
        crate::output::attach_managed_policy_to_permission_set_output::Builder::default()
    }
}
