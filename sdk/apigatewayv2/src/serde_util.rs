// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn api_correct_errors(mut builder: crate::types::builders::ApiBuilder) -> crate::types::builders::ApiBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::ProtocolType>().ok()
    }
    if builder.route_selection_expression.is_none() {
        builder.route_selection_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn api_mapping_correct_errors(mut builder: crate::types::builders::ApiMappingBuilder) -> crate::types::builders::ApiMappingBuilder {
    if builder.api_id.is_none() {
        builder.api_id = Some(Default::default())
    }
    if builder.stage.is_none() {
        builder.stage = Some(Default::default())
    }
    builder
}

pub(crate) fn authorizer_correct_errors(mut builder: crate::types::builders::AuthorizerBuilder) -> crate::types::builders::AuthorizerBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn domain_name_correct_errors(mut builder: crate::types::builders::DomainNameBuilder) -> crate::types::builders::DomainNameBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn integration_response_correct_errors(
    mut builder: crate::types::builders::IntegrationResponseBuilder,
) -> crate::types::builders::IntegrationResponseBuilder {
    if builder.integration_response_key.is_none() {
        builder.integration_response_key = Some(Default::default())
    }
    builder
}

pub(crate) fn model_correct_errors(mut builder: crate::types::builders::ModelBuilder) -> crate::types::builders::ModelBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn route_correct_errors(mut builder: crate::types::builders::RouteBuilder) -> crate::types::builders::RouteBuilder {
    if builder.route_key.is_none() {
        builder.route_key = Some(Default::default())
    }
    builder
}

pub(crate) fn route_response_correct_errors(
    mut builder: crate::types::builders::RouteResponseBuilder,
) -> crate::types::builders::RouteResponseBuilder {
    if builder.route_response_key.is_none() {
        builder.route_response_key = Some(Default::default())
    }
    builder
}

pub(crate) fn stage_correct_errors(mut builder: crate::types::builders::StageBuilder) -> crate::types::builders::StageBuilder {
    if builder.stage_name.is_none() {
        builder.stage_name = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_link_correct_errors(mut builder: crate::types::builders::VpcLinkBuilder) -> crate::types::builders::VpcLinkBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.vpc_link_id.is_none() {
        builder.vpc_link_id = Some(Default::default())
    }
    builder
}
