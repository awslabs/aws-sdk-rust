// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_route::_create_route_output::CreateRouteOutputBuilder;

pub use crate::operation::create_route::_create_route_input::CreateRouteInputBuilder;

impl crate::operation::create_route::builders::CreateRouteInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_route::CreateRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_route::CreateRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_route();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateRoute`.
///
/// <p>Creates a Route for an API.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateRouteFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_route::builders::CreateRouteInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_route::CreateRouteOutput,
        crate::operation::create_route::CreateRouteError,
    > for CreateRouteFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_route::CreateRouteOutput,
            crate::operation::create_route::CreateRouteError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateRouteFluentBuilder {
    /// Creates a new `CreateRoute`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateRoute as a reference.
    pub fn as_input(&self) -> &crate::operation::create_route::builders::CreateRouteInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_route::CreateRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_route::CreateRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_route::CreateRoute::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_route::CreateRoute::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_route::CreateRouteOutput,
        crate::operation::create_route::CreateRouteError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The API identifier.</p>
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.api_id(input.into());
        self
    }
    /// <p>The API identifier.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_api_id(input);
        self
    }
    /// <p>The API identifier.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_api_id()
    }
    /// <p>Specifies whether an API key is required for the route. Supported only for WebSocket APIs.</p>
    pub fn api_key_required(mut self, input: bool) -> Self {
        self.inner = self.inner.api_key_required(input);
        self
    }
    /// <p>Specifies whether an API key is required for the route. Supported only for WebSocket APIs.</p>
    pub fn set_api_key_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_api_key_required(input);
        self
    }
    /// <p>Specifies whether an API key is required for the route. Supported only for WebSocket APIs.</p>
    pub fn get_api_key_required(&self) -> &::std::option::Option<bool> {
        self.inner.get_api_key_required()
    }
    ///
    /// Appends an item to `AuthorizationScopes`.
    ///
    /// To override the contents of this collection use [`set_authorization_scopes`](Self::set_authorization_scopes).
    ///
    /// <p>The authorization scopes supported by this route.</p>
    pub fn authorization_scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.authorization_scopes(input.into());
        self
    }
    /// <p>The authorization scopes supported by this route.</p>
    pub fn set_authorization_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_authorization_scopes(input);
        self
    }
    /// <p>The authorization scopes supported by this route.</p>
    pub fn get_authorization_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_authorization_scopes()
    }
    /// <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
    pub fn authorization_type(mut self, input: crate::types::AuthorizationType) -> Self {
        self.inner = self.inner.authorization_type(input);
        self
    }
    /// <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
    pub fn set_authorization_type(mut self, input: ::std::option::Option<crate::types::AuthorizationType>) -> Self {
        self.inner = self.inner.set_authorization_type(input);
        self
    }
    /// <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
    pub fn get_authorization_type(&self) -> &::std::option::Option<crate::types::AuthorizationType> {
        self.inner.get_authorization_type()
    }
    /// <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn authorizer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.authorizer_id(input.into());
        self
    }
    /// <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn set_authorizer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_authorizer_id(input);
        self
    }
    /// <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn get_authorizer_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_authorizer_id()
    }
    /// <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn model_selection_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.model_selection_expression(input.into());
        self
    }
    /// <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn set_model_selection_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_model_selection_expression(input);
        self
    }
    /// <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn get_model_selection_expression(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_model_selection_expression()
    }
    /// <p>The operation name for the route.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.operation_name(input.into());
        self
    }
    /// <p>The operation name for the route.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_operation_name(input);
        self
    }
    /// <p>The operation name for the route.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_operation_name()
    }
    ///
    /// Adds a key-value pair to `RequestModels`.
    ///
    /// To override the contents of this collection use [`set_request_models`](Self::set_request_models).
    ///
    /// <p>The request models for the route. Supported only for WebSocket APIs.</p>
    pub fn request_models(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.request_models(k.into(), v.into());
        self
    }
    /// <p>The request models for the route. Supported only for WebSocket APIs.</p>
    pub fn set_request_models(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_request_models(input);
        self
    }
    /// <p>The request models for the route. Supported only for WebSocket APIs.</p>
    pub fn get_request_models(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_request_models()
    }
    ///
    /// Adds a key-value pair to `RequestParameters`.
    ///
    /// To override the contents of this collection use [`set_request_parameters`](Self::set_request_parameters).
    ///
    /// <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
    pub fn request_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ParameterConstraints) -> Self {
        self.inner = self.inner.request_parameters(k.into(), v);
        self
    }
    /// <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
    pub fn set_request_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConstraints>>,
    ) -> Self {
        self.inner = self.inner.set_request_parameters(input);
        self
    }
    /// <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
    pub fn get_request_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConstraints>> {
        self.inner.get_request_parameters()
    }
    /// <p>The route key for the route.</p>
    pub fn route_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.route_key(input.into());
        self
    }
    /// <p>The route key for the route.</p>
    pub fn set_route_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_route_key(input);
        self
    }
    /// <p>The route key for the route.</p>
    pub fn get_route_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_route_key()
    }
    /// <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn route_response_selection_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.route_response_selection_expression(input.into());
        self
    }
    /// <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn set_route_response_selection_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_route_response_selection_expression(input);
        self
    }
    /// <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
    pub fn get_route_response_selection_expression(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_route_response_selection_expression()
    }
    /// <p>The target for the route.</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target(input.into());
        self
    }
    /// <p>The target for the route.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target(input);
        self
    }
    /// <p>The target for the route.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target()
    }
}
