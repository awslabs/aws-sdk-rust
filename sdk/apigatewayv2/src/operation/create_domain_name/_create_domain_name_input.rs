// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates a new DomainName resource to represent a domain name.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDomainNameInput {
    /// <p>The domain name.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name configurations.</p>
    pub domain_name_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>,
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub mutual_tls_authentication: ::std::option::Option<crate::types::MutualTlsAuthenticationInput>,
    /// <p>The collection of tags associated with a domain name.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDomainNameInput {
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_name_configurations.is_none()`.
    pub fn domain_name_configurations(&self) -> &[crate::types::DomainNameConfiguration] {
        self.domain_name_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(&self) -> ::std::option::Option<&crate::types::MutualTlsAuthenticationInput> {
        self.mutual_tls_authentication.as_ref()
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateDomainNameInput {
    /// Creates a new builder-style object to manufacture [`CreateDomainNameInput`](crate::operation::create_domain_name::CreateDomainNameInput).
    pub fn builder() -> crate::operation::create_domain_name::builders::CreateDomainNameInputBuilder {
        crate::operation::create_domain_name::builders::CreateDomainNameInputBuilder::default()
    }
}

/// A builder for [`CreateDomainNameInput`](crate::operation::create_domain_name::CreateDomainNameInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDomainNameInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>,
    pub(crate) mutual_tls_authentication: ::std::option::Option<crate::types::MutualTlsAuthenticationInput>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDomainNameInputBuilder {
    /// <p>The domain name.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `domain_name_configurations`.
    ///
    /// To override the contents of this collection use [`set_domain_name_configurations`](Self::set_domain_name_configurations).
    ///
    /// <p>The domain name configurations.</p>
    pub fn domain_name_configurations(mut self, input: crate::types::DomainNameConfiguration) -> Self {
        let mut v = self.domain_name_configurations.unwrap_or_default();
        v.push(input);
        self.domain_name_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domain name configurations.</p>
    pub fn set_domain_name_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>) -> Self {
        self.domain_name_configurations = input;
        self
    }
    /// <p>The domain name configurations.</p>
    pub fn get_domain_name_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>> {
        &self.domain_name_configurations
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(mut self, input: crate::types::MutualTlsAuthenticationInput) -> Self {
        self.mutual_tls_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn set_mutual_tls_authentication(mut self, input: ::std::option::Option<crate::types::MutualTlsAuthenticationInput>) -> Self {
        self.mutual_tls_authentication = input;
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn get_mutual_tls_authentication(&self) -> &::std::option::Option<crate::types::MutualTlsAuthenticationInput> {
        &self.mutual_tls_authentication
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDomainNameInput`](crate::operation::create_domain_name::CreateDomainNameInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_domain_name::CreateDomainNameInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_domain_name::CreateDomainNameInput {
            domain_name: self.domain_name,
            domain_name_configurations: self.domain_name_configurations,
            mutual_tls_authentication: self.mutual_tls_authentication,
            tags: self.tags,
        })
    }
}
