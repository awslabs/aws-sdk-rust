// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDomainNameOutput {
    /// <p>The API mapping selection expression.</p>
    pub api_mapping_selection_expression: ::std::option::Option<::std::string::String>,
    /// <p>The name of the DomainName resource.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name configurations.</p>
    pub domain_name_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>,
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub mutual_tls_authentication: ::std::option::Option<crate::types::MutualTlsAuthentication>,
    /// <p>The collection of tags associated with a domain name.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateDomainNameOutput {
    /// <p>The API mapping selection expression.</p>
    pub fn api_mapping_selection_expression(&self) -> ::std::option::Option<&str> {
        self.api_mapping_selection_expression.as_deref()
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_name_configurations.is_none()`.
    pub fn domain_name_configurations(&self) -> &[crate::types::DomainNameConfiguration] {
        self.domain_name_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(&self) -> ::std::option::Option<&crate::types::MutualTlsAuthentication> {
        self.mutual_tls_authentication.as_ref()
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateDomainNameOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDomainNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainNameOutput`](crate::operation::update_domain_name::UpdateDomainNameOutput).
    pub fn builder() -> crate::operation::update_domain_name::builders::UpdateDomainNameOutputBuilder {
        crate::operation::update_domain_name::builders::UpdateDomainNameOutputBuilder::default()
    }
}

/// A builder for [`UpdateDomainNameOutput`](crate::operation::update_domain_name::UpdateDomainNameOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDomainNameOutputBuilder {
    pub(crate) api_mapping_selection_expression: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>,
    pub(crate) mutual_tls_authentication: ::std::option::Option<crate::types::MutualTlsAuthentication>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateDomainNameOutputBuilder {
    /// <p>The API mapping selection expression.</p>
    pub fn api_mapping_selection_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_mapping_selection_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API mapping selection expression.</p>
    pub fn set_api_mapping_selection_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_mapping_selection_expression = input;
        self
    }
    /// <p>The API mapping selection expression.</p>
    pub fn get_api_mapping_selection_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_mapping_selection_expression
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `domain_name_configurations`.
    ///
    /// To override the contents of this collection use [`set_domain_name_configurations`](Self::set_domain_name_configurations).
    ///
    /// <p>The domain name configurations.</p>
    pub fn domain_name_configurations(mut self, input: crate::types::DomainNameConfiguration) -> Self {
        let mut v = self.domain_name_configurations.unwrap_or_default();
        v.push(input);
        self.domain_name_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domain name configurations.</p>
    pub fn set_domain_name_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>>) -> Self {
        self.domain_name_configurations = input;
        self
    }
    /// <p>The domain name configurations.</p>
    pub fn get_domain_name_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainNameConfiguration>> {
        &self.domain_name_configurations
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(mut self, input: crate::types::MutualTlsAuthentication) -> Self {
        self.mutual_tls_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn set_mutual_tls_authentication(mut self, input: ::std::option::Option<crate::types::MutualTlsAuthentication>) -> Self {
        self.mutual_tls_authentication = input;
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn get_mutual_tls_authentication(&self) -> &::std::option::Option<crate::types::MutualTlsAuthentication> {
        &self.mutual_tls_authentication
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDomainNameOutput`](crate::operation::update_domain_name::UpdateDomainNameOutput).
    pub fn build(self) -> crate::operation::update_domain_name::UpdateDomainNameOutput {
        crate::operation::update_domain_name::UpdateDomainNameOutput {
            api_mapping_selection_expression: self.api_mapping_selection_expression,
            domain_name: self.domain_name,
            domain_name_configurations: self.domain_name_configurations,
            mutual_tls_authentication: self.mutual_tls_authentication,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
