// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_stage::_update_stage_output::UpdateStageOutputBuilder;

pub use crate::operation::update_stage::_update_stage_input::UpdateStageInputBuilder;

/// Fluent builder constructing a request to `UpdateStage`.
///
/// <p>Updates a Stage.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateStageFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_stage::builders::UpdateStageInputBuilder,
}
impl UpdateStageFluentBuilder {
    /// Creates a new `UpdateStage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_stage::UpdateStage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_stage::UpdateStageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_stage::UpdateStageOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_stage::UpdateStageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn access_log_settings(mut self, input: crate::types::AccessLogSettings) -> Self {
        self.inner = self.inner.access_log_settings(input);
        self
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn set_access_log_settings(
        mut self,
        input: std::option::Option<crate::types::AccessLogSettings>,
    ) -> Self {
        self.inner = self.inner.set_access_log_settings(input);
        self
    }
    /// <p>The API identifier.</p>
    pub fn api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.api_id(input.into());
        self
    }
    /// <p>The API identifier.</p>
    pub fn set_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_api_id(input);
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn auto_deploy(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_deploy(input);
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn set_auto_deploy(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_deploy(input);
        self
    }
    /// <p>The identifier of a client certificate for a Stage.</p>
    pub fn client_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_certificate_id(input.into());
        self
    }
    /// <p>The identifier of a client certificate for a Stage.</p>
    pub fn set_client_certificate_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_certificate_id(input);
        self
    }
    /// <p>The default route settings for the stage.</p>
    pub fn default_route_settings(mut self, input: crate::types::RouteSettings) -> Self {
        self.inner = self.inner.default_route_settings(input);
        self
    }
    /// <p>The default route settings for the stage.</p>
    pub fn set_default_route_settings(
        mut self,
        input: std::option::Option<crate::types::RouteSettings>,
    ) -> Self {
        self.inner = self.inner.set_default_route_settings(input);
        self
    }
    /// <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.deployment_id(input.into());
        self
    }
    /// <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_deployment_id(input);
        self
    }
    /// <p>The description for the API stage.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for the API stage.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `RouteSettings`.
    ///
    /// To override the contents of this collection use [`set_route_settings`](Self::set_route_settings).
    ///
    /// <p>Route settings for the stage.</p>
    pub fn route_settings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::RouteSettings,
    ) -> Self {
        self.inner = self.inner.route_settings(k.into(), v);
        self
    }
    /// <p>Route settings for the stage.</p>
    pub fn set_route_settings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::RouteSettings>,
        >,
    ) -> Self {
        self.inner = self.inner.set_route_settings(input);
        self
    }
    /// <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
    /// Adds a key-value pair to `StageVariables`.
    ///
    /// To override the contents of this collection use [`set_stage_variables`](Self::set_stage_variables).
    ///
    /// <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn stage_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.stage_variables(k.into(), v.into());
        self
    }
    /// <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn set_stage_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_stage_variables(input);
        self
    }
}
