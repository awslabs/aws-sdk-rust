// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_stage::_update_stage_output::UpdateStageOutputBuilder;

pub use crate::operation::update_stage::_update_stage_input::UpdateStageInputBuilder;

impl crate::operation::update_stage::builders::UpdateStageInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_stage::UpdateStageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_stage::UpdateStageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_stage();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateStage`.
///
/// <p>Updates a Stage.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateStageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_stage::builders::UpdateStageInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_stage::UpdateStageOutput,
        crate::operation::update_stage::UpdateStageError,
    > for UpdateStageFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_stage::UpdateStageOutput,
            crate::operation::update_stage::UpdateStageError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateStageFluentBuilder {
    /// Creates a new `UpdateStage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateStage as a reference.
    pub fn as_input(&self) -> &crate::operation::update_stage::builders::UpdateStageInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_stage::UpdateStageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_stage::UpdateStageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_stage::UpdateStage::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_stage::UpdateStage::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_stage::UpdateStageOutput,
        crate::operation::update_stage::UpdateStageError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn access_log_settings(mut self, input: crate::types::AccessLogSettings) -> Self {
        self.inner = self.inner.access_log_settings(input);
        self
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn set_access_log_settings(mut self, input: ::std::option::Option<crate::types::AccessLogSettings>) -> Self {
        self.inner = self.inner.set_access_log_settings(input);
        self
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn get_access_log_settings(&self) -> &::std::option::Option<crate::types::AccessLogSettings> {
        self.inner.get_access_log_settings()
    }
    /// <p>The API identifier.</p>
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.api_id(input.into());
        self
    }
    /// <p>The API identifier.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_api_id(input);
        self
    }
    /// <p>The API identifier.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_api_id()
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn auto_deploy(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_deploy(input);
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn set_auto_deploy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_deploy(input);
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn get_auto_deploy(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_deploy()
    }
    /// <p>The identifier of a client certificate for a Stage.</p>
    pub fn client_certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_certificate_id(input.into());
        self
    }
    /// <p>The identifier of a client certificate for a Stage.</p>
    pub fn set_client_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_certificate_id(input);
        self
    }
    /// <p>The identifier of a client certificate for a Stage.</p>
    pub fn get_client_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_certificate_id()
    }
    /// <p>The default route settings for the stage.</p>
    pub fn default_route_settings(mut self, input: crate::types::RouteSettings) -> Self {
        self.inner = self.inner.default_route_settings(input);
        self
    }
    /// <p>The default route settings for the stage.</p>
    pub fn set_default_route_settings(mut self, input: ::std::option::Option<crate::types::RouteSettings>) -> Self {
        self.inner = self.inner.set_default_route_settings(input);
        self
    }
    /// <p>The default route settings for the stage.</p>
    pub fn get_default_route_settings(&self) -> &::std::option::Option<crate::types::RouteSettings> {
        self.inner.get_default_route_settings()
    }
    /// <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.deployment_id(input.into());
        self
    }
    /// <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_deployment_id(input);
        self
    }
    /// <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_deployment_id()
    }
    /// <p>The description for the API stage.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for the API stage.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description for the API stage.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `RouteSettings`.
    ///
    /// To override the contents of this collection use [`set_route_settings`](Self::set_route_settings).
    ///
    /// <p>Route settings for the stage.</p>
    pub fn route_settings(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::RouteSettings) -> Self {
        self.inner = self.inner.route_settings(k.into(), v);
        self
    }
    /// <p>Route settings for the stage.</p>
    pub fn set_route_settings(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::RouteSettings>>,
    ) -> Self {
        self.inner = self.inner.set_route_settings(input);
        self
    }
    /// <p>Route settings for the stage.</p>
    pub fn get_route_settings(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::RouteSettings>> {
        self.inner.get_route_settings()
    }
    /// <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
    /// <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stage_name()
    }
    ///
    /// Adds a key-value pair to `StageVariables`.
    ///
    /// To override the contents of this collection use [`set_stage_variables`](Self::set_stage_variables).
    ///
    /// <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn stage_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.stage_variables(k.into(), v.into());
        self
    }
    /// <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn set_stage_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_stage_variables(input);
        self
    }
    /// <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn get_stage_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_stage_variables()
    }
}
