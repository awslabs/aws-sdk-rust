// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateVpcLinkOutput {
    /// <p>The timestamp when the VPC link was created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the VPC link.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A list of security group IDs for the VPC link.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of subnet IDs to include in the VPC link.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Tags for the VPC link.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The ID of the VPC link.</p>
    pub vpc_link_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the VPC link.</p>
    pub vpc_link_status: ::std::option::Option<crate::types::VpcLinkStatus>,
    /// <p>A message summarizing the cause of the status of the VPC link.</p>
    pub vpc_link_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The version of the VPC link.</p>
    pub vpc_link_version: ::std::option::Option<crate::types::VpcLinkVersion>,
    _request_id: Option<String>,
}
impl UpdateVpcLinkOutput {
    /// <p>The timestamp when the VPC link was created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The name of the VPC link.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of security group IDs for the VPC link.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of subnet IDs to include in the VPC link.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>Tags for the VPC link.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The ID of the VPC link.</p>
    pub fn vpc_link_id(&self) -> ::std::option::Option<&str> {
        self.vpc_link_id.as_deref()
    }
    /// <p>The status of the VPC link.</p>
    pub fn vpc_link_status(&self) -> ::std::option::Option<&crate::types::VpcLinkStatus> {
        self.vpc_link_status.as_ref()
    }
    /// <p>A message summarizing the cause of the status of the VPC link.</p>
    pub fn vpc_link_status_message(&self) -> ::std::option::Option<&str> {
        self.vpc_link_status_message.as_deref()
    }
    /// <p>The version of the VPC link.</p>
    pub fn vpc_link_version(&self) -> ::std::option::Option<&crate::types::VpcLinkVersion> {
        self.vpc_link_version.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateVpcLinkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateVpcLinkOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVpcLinkOutput`](crate::operation::update_vpc_link::UpdateVpcLinkOutput).
    pub fn builder() -> crate::operation::update_vpc_link::builders::UpdateVpcLinkOutputBuilder {
        crate::operation::update_vpc_link::builders::UpdateVpcLinkOutputBuilder::default()
    }
}

/// A builder for [`UpdateVpcLinkOutput`](crate::operation::update_vpc_link::UpdateVpcLinkOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateVpcLinkOutputBuilder {
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) vpc_link_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_link_status: ::std::option::Option<crate::types::VpcLinkStatus>,
    pub(crate) vpc_link_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_link_version: ::std::option::Option<crate::types::VpcLinkVersion>,
    _request_id: Option<String>,
}
impl UpdateVpcLinkOutputBuilder {
    /// <p>The timestamp when the VPC link was created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the VPC link was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The timestamp when the VPC link was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The name of the VPC link.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VPC link.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the VPC link.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>A list of security group IDs for the VPC link.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of security group IDs for the VPC link.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>A list of security group IDs for the VPC link.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>A list of subnet IDs to include in the VPC link.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of subnet IDs to include in the VPC link.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>A list of subnet IDs to include in the VPC link.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the VPC link.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags for the VPC link.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags for the VPC link.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The ID of the VPC link.</p>
    pub fn vpc_link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC link.</p>
    pub fn set_vpc_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_link_id = input;
        self
    }
    /// <p>The ID of the VPC link.</p>
    pub fn get_vpc_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_link_id
    }
    /// <p>The status of the VPC link.</p>
    pub fn vpc_link_status(mut self, input: crate::types::VpcLinkStatus) -> Self {
        self.vpc_link_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the VPC link.</p>
    pub fn set_vpc_link_status(mut self, input: ::std::option::Option<crate::types::VpcLinkStatus>) -> Self {
        self.vpc_link_status = input;
        self
    }
    /// <p>The status of the VPC link.</p>
    pub fn get_vpc_link_status(&self) -> &::std::option::Option<crate::types::VpcLinkStatus> {
        &self.vpc_link_status
    }
    /// <p>A message summarizing the cause of the status of the VPC link.</p>
    pub fn vpc_link_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_link_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message summarizing the cause of the status of the VPC link.</p>
    pub fn set_vpc_link_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_link_status_message = input;
        self
    }
    /// <p>A message summarizing the cause of the status of the VPC link.</p>
    pub fn get_vpc_link_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_link_status_message
    }
    /// <p>The version of the VPC link.</p>
    pub fn vpc_link_version(mut self, input: crate::types::VpcLinkVersion) -> Self {
        self.vpc_link_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the VPC link.</p>
    pub fn set_vpc_link_version(mut self, input: ::std::option::Option<crate::types::VpcLinkVersion>) -> Self {
        self.vpc_link_version = input;
        self
    }
    /// <p>The version of the VPC link.</p>
    pub fn get_vpc_link_version(&self) -> &::std::option::Option<crate::types::VpcLinkVersion> {
        &self.vpc_link_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateVpcLinkOutput`](crate::operation::update_vpc_link::UpdateVpcLinkOutput).
    pub fn build(self) -> crate::operation::update_vpc_link::UpdateVpcLinkOutput {
        crate::operation::update_vpc_link::UpdateVpcLinkOutput {
            created_date: self.created_date,
            name: self.name,
            security_group_ids: self.security_group_ids,
            subnet_ids: self.subnet_ids,
            tags: self.tags,
            vpc_link_id: self.vpc_link_id,
            vpc_link_status: self.vpc_link_status,
            vpc_link_status_message: self.vpc_link_status_message,
            vpc_link_version: self.vpc_link_version,
            _request_id: self._request_id,
        }
    }
}
