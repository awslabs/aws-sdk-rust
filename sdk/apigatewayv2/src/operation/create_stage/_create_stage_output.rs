// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStageOutput {
    /// <p>Settings for logging access in this stage.</p>
    #[doc(hidden)]
    pub access_log_settings: std::option::Option<crate::types::AccessLogSettings>,
    /// <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
    #[doc(hidden)]
    pub api_gateway_managed: bool,
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    #[doc(hidden)]
    pub auto_deploy: bool,
    /// <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
    #[doc(hidden)]
    pub client_certificate_id: std::option::Option<std::string::String>,
    /// <p>The timestamp when the stage was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Default route settings for the stage.</p>
    #[doc(hidden)]
    pub default_route_settings: std::option::Option<crate::types::RouteSettings>,
    /// <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p>The description of the stage.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
    #[doc(hidden)]
    pub last_deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The timestamp when the stage was last updated.</p>
    #[doc(hidden)]
    pub last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Route settings for the stage, by routeKey.</p>
    #[doc(hidden)]
    pub route_settings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::RouteSettings>,
    >,
    /// <p>The name of the stage.</p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
    /// <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    #[doc(hidden)]
    pub stage_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateStageOutput {
    /// <p>Settings for logging access in this stage.</p>
    pub fn access_log_settings(&self) -> std::option::Option<&crate::types::AccessLogSettings> {
        self.access_log_settings.as_ref()
    }
    /// <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
    pub fn api_gateway_managed(&self) -> bool {
        self.api_gateway_managed
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn auto_deploy(&self) -> bool {
        self.auto_deploy
    }
    /// <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
    pub fn client_certificate_id(&self) -> std::option::Option<&str> {
        self.client_certificate_id.as_deref()
    }
    /// <p>The timestamp when the stage was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>Default route settings for the stage.</p>
    pub fn default_route_settings(&self) -> std::option::Option<&crate::types::RouteSettings> {
        self.default_route_settings.as_ref()
    }
    /// <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>The description of the stage.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
    pub fn last_deployment_status_message(&self) -> std::option::Option<&str> {
        self.last_deployment_status_message.as_deref()
    }
    /// <p>The timestamp when the stage was last updated.</p>
    pub fn last_updated_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p>Route settings for the stage, by routeKey.</p>
    pub fn route_settings(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::RouteSettings>,
    > {
        self.route_settings.as_ref()
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn stage_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.stage_variables.as_ref()
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStageOutput {
    /// Creates a new builder-style object to manufacture [`CreateStageOutput`](crate::operation::create_stage::CreateStageOutput).
    pub fn builder() -> crate::operation::create_stage::builders::CreateStageOutputBuilder {
        crate::operation::create_stage::builders::CreateStageOutputBuilder::default()
    }
}

/// A builder for [`CreateStageOutput`](crate::operation::create_stage::CreateStageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateStageOutputBuilder {
    pub(crate) access_log_settings: std::option::Option<crate::types::AccessLogSettings>,
    pub(crate) api_gateway_managed: std::option::Option<bool>,
    pub(crate) auto_deploy: std::option::Option<bool>,
    pub(crate) client_certificate_id: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) default_route_settings: std::option::Option<crate::types::RouteSettings>,
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) last_deployment_status_message: std::option::Option<std::string::String>,
    pub(crate) last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) route_settings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::RouteSettings>,
    >,
    pub(crate) stage_name: std::option::Option<std::string::String>,
    pub(crate) stage_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateStageOutputBuilder {
    /// <p>Settings for logging access in this stage.</p>
    pub fn access_log_settings(mut self, input: crate::types::AccessLogSettings) -> Self {
        self.access_log_settings = Some(input);
        self
    }
    /// <p>Settings for logging access in this stage.</p>
    pub fn set_access_log_settings(
        mut self,
        input: std::option::Option<crate::types::AccessLogSettings>,
    ) -> Self {
        self.access_log_settings = input;
        self
    }
    /// <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
    pub fn api_gateway_managed(mut self, input: bool) -> Self {
        self.api_gateway_managed = Some(input);
        self
    }
    /// <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
    pub fn set_api_gateway_managed(mut self, input: std::option::Option<bool>) -> Self {
        self.api_gateway_managed = input;
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn auto_deploy(mut self, input: bool) -> Self {
        self.auto_deploy = Some(input);
        self
    }
    /// <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
    pub fn set_auto_deploy(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_deploy = input;
        self
    }
    /// <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
    pub fn client_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_certificate_id = Some(input.into());
        self
    }
    /// <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
    pub fn set_client_certificate_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_certificate_id = input;
        self
    }
    /// <p>The timestamp when the stage was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The timestamp when the stage was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>Default route settings for the stage.</p>
    pub fn default_route_settings(mut self, input: crate::types::RouteSettings) -> Self {
        self.default_route_settings = Some(input);
        self
    }
    /// <p>Default route settings for the stage.</p>
    pub fn set_default_route_settings(
        mut self,
        input: std::option::Option<crate::types::RouteSettings>,
    ) -> Self {
        self.default_route_settings = input;
        self
    }
    /// <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The description of the stage.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the stage.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
    pub fn last_deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_deployment_status_message = Some(input.into());
        self
    }
    /// <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
    pub fn set_last_deployment_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_deployment_status_message = input;
        self
    }
    /// <p>The timestamp when the stage was last updated.</p>
    pub fn last_updated_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = Some(input);
        self
    }
    /// <p>The timestamp when the stage was last updated.</p>
    pub fn set_last_updated_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date = input;
        self
    }
    /// Adds a key-value pair to `route_settings`.
    ///
    /// To override the contents of this collection use [`set_route_settings`](Self::set_route_settings).
    ///
    /// <p>Route settings for the stage, by routeKey.</p>
    pub fn route_settings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::RouteSettings,
    ) -> Self {
        let mut hash_map = self.route_settings.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.route_settings = Some(hash_map);
        self
    }
    /// <p>Route settings for the stage, by routeKey.</p>
    pub fn set_route_settings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::RouteSettings>,
        >,
    ) -> Self {
        self.route_settings = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// Adds a key-value pair to `stage_variables`.
    ///
    /// To override the contents of this collection use [`set_stage_variables`](Self::set_stage_variables).
    ///
    /// <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn stage_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.stage_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.stage_variables = Some(hash_map);
        self
    }
    /// <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
    pub fn set_stage_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.stage_variables = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateStageOutput`](crate::operation::create_stage::CreateStageOutput).
    pub fn build(self) -> crate::operation::create_stage::CreateStageOutput {
        crate::operation::create_stage::CreateStageOutput {
            access_log_settings: self.access_log_settings,
            api_gateway_managed: self.api_gateway_managed.unwrap_or_default(),
            auto_deploy: self.auto_deploy.unwrap_or_default(),
            client_certificate_id: self.client_certificate_id,
            created_date: self.created_date,
            default_route_settings: self.default_route_settings,
            deployment_id: self.deployment_id,
            description: self.description,
            last_deployment_status_message: self.last_deployment_status_message,
            last_updated_date: self.last_updated_date,
            route_settings: self.route_settings,
            stage_name: self.stage_name,
            stage_variables: self.stage_variables,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
