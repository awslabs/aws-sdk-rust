// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetApiMappingOutput {
    /// <p>The API identifier.</p>
    #[doc(hidden)]
    pub api_id: std::option::Option<std::string::String>,
    /// <p>The API mapping identifier.</p>
    #[doc(hidden)]
    pub api_mapping_id: std::option::Option<std::string::String>,
    /// <p>The API mapping key.</p>
    #[doc(hidden)]
    pub api_mapping_key: std::option::Option<std::string::String>,
    /// <p>The API stage.</p>
    #[doc(hidden)]
    pub stage: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetApiMappingOutput {
    /// <p>The API identifier.</p>
    pub fn api_id(&self) -> std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The API mapping identifier.</p>
    pub fn api_mapping_id(&self) -> std::option::Option<&str> {
        self.api_mapping_id.as_deref()
    }
    /// <p>The API mapping key.</p>
    pub fn api_mapping_key(&self) -> std::option::Option<&str> {
        self.api_mapping_key.as_deref()
    }
    /// <p>The API stage.</p>
    pub fn stage(&self) -> std::option::Option<&str> {
        self.stage.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetApiMappingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetApiMappingOutput {
    /// Creates a new builder-style object to manufacture [`GetApiMappingOutput`](crate::operation::get_api_mapping::GetApiMappingOutput).
    pub fn builder() -> crate::operation::get_api_mapping::builders::GetApiMappingOutputBuilder {
        crate::operation::get_api_mapping::builders::GetApiMappingOutputBuilder::default()
    }
}

/// A builder for [`GetApiMappingOutput`](crate::operation::get_api_mapping::GetApiMappingOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetApiMappingOutputBuilder {
    pub(crate) api_id: std::option::Option<std::string::String>,
    pub(crate) api_mapping_id: std::option::Option<std::string::String>,
    pub(crate) api_mapping_key: std::option::Option<std::string::String>,
    pub(crate) stage: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetApiMappingOutputBuilder {
    /// <p>The API identifier.</p>
    pub fn api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_id = Some(input.into());
        self
    }
    /// <p>The API identifier.</p>
    pub fn set_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The API mapping identifier.</p>
    pub fn api_mapping_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_mapping_id = Some(input.into());
        self
    }
    /// <p>The API mapping identifier.</p>
    pub fn set_api_mapping_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_mapping_id = input;
        self
    }
    /// <p>The API mapping key.</p>
    pub fn api_mapping_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_mapping_key = Some(input.into());
        self
    }
    /// <p>The API mapping key.</p>
    pub fn set_api_mapping_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_mapping_key = input;
        self
    }
    /// <p>The API stage.</p>
    pub fn stage(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage = Some(input.into());
        self
    }
    /// <p>The API stage.</p>
    pub fn set_stage(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetApiMappingOutput`](crate::operation::get_api_mapping::GetApiMappingOutput).
    pub fn build(self) -> crate::operation::get_api_mapping::GetApiMappingOutput {
        crate::operation::get_api_mapping::GetApiMappingOutput {
            api_id: self.api_id,
            api_mapping_id: self.api_mapping_id,
            api_mapping_key: self.api_mapping_key,
            stage: self.stage,
            _request_id: self._request_id,
        }
    }
}
