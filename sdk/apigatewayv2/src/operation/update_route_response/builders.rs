// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_route_response::_update_route_response_output::UpdateRouteResponseOutputBuilder;

pub use crate::operation::update_route_response::_update_route_response_input::UpdateRouteResponseInputBuilder;

/// Fluent builder constructing a request to `UpdateRouteResponse`.
///
/// <p>Updates a RouteResponse.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRouteResponseFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_route_response::builders::UpdateRouteResponseInputBuilder,
}
impl UpdateRouteResponseFluentBuilder {
    /// Creates a new `UpdateRouteResponse`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_route_response::UpdateRouteResponse,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_route_response::UpdateRouteResponseError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_route_response::UpdateRouteResponseOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_route_response::UpdateRouteResponseError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The API identifier.</p>
    pub fn api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.api_id(input.into());
        self
    }
    /// <p>The API identifier.</p>
    pub fn set_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_api_id(input);
        self
    }
    /// <p>The model selection expression for the route response. Supported only for WebSocket APIs.</p>
    pub fn model_selection_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_selection_expression(input.into());
        self
    }
    /// <p>The model selection expression for the route response. Supported only for WebSocket APIs.</p>
    pub fn set_model_selection_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_selection_expression(input);
        self
    }
    /// Adds a key-value pair to `ResponseModels`.
    ///
    /// To override the contents of this collection use [`set_response_models`](Self::set_response_models).
    ///
    /// <p>The response models for the route response.</p>
    pub fn response_models(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.response_models(k.into(), v.into());
        self
    }
    /// <p>The response models for the route response.</p>
    pub fn set_response_models(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_response_models(input);
        self
    }
    /// Adds a key-value pair to `ResponseParameters`.
    ///
    /// To override the contents of this collection use [`set_response_parameters`](Self::set_response_parameters).
    ///
    /// <p>The route response parameters.</p>
    pub fn response_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ParameterConstraints,
    ) -> Self {
        self.inner = self.inner.response_parameters(k.into(), v);
        self
    }
    /// <p>The route response parameters.</p>
    pub fn set_response_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ParameterConstraints>,
        >,
    ) -> Self {
        self.inner = self.inner.set_response_parameters(input);
        self
    }
    /// <p>The route ID.</p>
    pub fn route_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.route_id(input.into());
        self
    }
    /// <p>The route ID.</p>
    pub fn set_route_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_route_id(input);
        self
    }
    /// <p>The route response ID.</p>
    pub fn route_response_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.route_response_id(input.into());
        self
    }
    /// <p>The route response ID.</p>
    pub fn set_route_response_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_route_response_id(input);
        self
    }
    /// <p>The route response key.</p>
    pub fn route_response_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.route_response_key(input.into());
        self
    }
    /// <p>The route response key.</p>
    pub fn set_route_response_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_route_response_key(input);
        self
    }
}
