// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIntegrationResponse`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`api_id(impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::api_id) / [`set_api_id(Option<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_api_id):<br>required: **true**<br><p>The API identifier.</p><br>
    ///   - [`content_handling_strategy(ContentHandlingStrategy)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::content_handling_strategy) / [`set_content_handling_strategy(Option<ContentHandlingStrategy>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_content_handling_strategy):<br>required: **false**<br><p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p>  <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p>  <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p>  <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p><br>
    ///   - [`integration_id(impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::integration_id) / [`set_integration_id(Option<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_integration_id):<br>required: **true**<br><p>The integration ID.</p><br>
    ///   - [`integration_response_key(impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::integration_response_key) / [`set_integration_response_key(Option<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_integration_response_key):<br>required: **true**<br><p>The integration response key.</p><br>
    ///   - [`response_parameters(impl Into<String>, impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::response_parameters) / [`set_response_parameters(Option<HashMap::<String, String>>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_response_parameters):<br>required: **false**<br><p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.</p><br>
    ///   - [`response_templates(impl Into<String>, impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::response_templates) / [`set_response_templates(Option<HashMap::<String, String>>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_response_templates):<br>required: **false**<br><p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p><br>
    ///   - [`template_selection_expression(impl Into<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::template_selection_expression) / [`set_template_selection_expression(Option<String>)`](crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::set_template_selection_expression):<br>required: **false**<br><p>The template selection expression for the integration response. Supported only for WebSocket APIs.</p><br>
    /// - On success, responds with [`CreateIntegrationResponseOutput`](crate::operation::create_integration_response::CreateIntegrationResponseOutput) with field(s):
    ///   - [`content_handling_strategy(Option<ContentHandlingStrategy>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::content_handling_strategy): <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p>  <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p>  <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p>  <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
    ///   - [`integration_response_id(Option<String>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::integration_response_id): <p>The integration response ID.</p>
    ///   - [`integration_response_key(Option<String>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::integration_response_key): <p>The integration response key.</p>
    ///   - [`response_parameters(Option<HashMap::<String, String>>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::response_parameters): <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.</p>
    ///   - [`response_templates(Option<HashMap::<String, String>>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::response_templates): <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
    ///   - [`template_selection_expression(Option<String>)`](crate::operation::create_integration_response::CreateIntegrationResponseOutput::template_selection_expression): <p>The template selection expressions for the integration response.</p>
    /// - On failure, responds with [`SdkError<CreateIntegrationResponseError>`](crate::operation::create_integration_response::CreateIntegrationResponseError)
    pub fn create_integration_response(&self) -> crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder {
        crate::operation::create_integration_response::builders::CreateIntegrationResponseFluentBuilder::new(self.handle.clone())
    }
}
