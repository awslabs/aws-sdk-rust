// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetRouteResponses`](crate::client::fluent_builders::GetRouteResponses) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`api_id(impl Into<String>)`](crate::client::fluent_builders::GetRouteResponses::api_id) / [`set_api_id(Option<String>)`](crate::client::fluent_builders::GetRouteResponses::set_api_id): <p>The API identifier.</p>
    ///   - [`max_results(impl Into<String>)`](crate::client::fluent_builders::GetRouteResponses::max_results) / [`set_max_results(Option<String>)`](crate::client::fluent_builders::GetRouteResponses::set_max_results): <p>The maximum number of elements to be returned for this resource.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetRouteResponses::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetRouteResponses::set_next_token): <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
    ///   - [`route_id(impl Into<String>)`](crate::client::fluent_builders::GetRouteResponses::route_id) / [`set_route_id(Option<String>)`](crate::client::fluent_builders::GetRouteResponses::set_route_id): <p>The route ID.</p>
    /// - On success, responds with [`GetRouteResponsesOutput`](crate::output::GetRouteResponsesOutput) with field(s):
    ///   - [`items(Option<Vec<RouteResponse>>)`](crate::output::GetRouteResponsesOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetRouteResponsesOutput::next_token): <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
    /// - On failure, responds with [`SdkError<GetRouteResponsesError>`](crate::error::GetRouteResponsesError)
    pub fn get_route_responses(&self) -> crate::client::fluent_builders::GetRouteResponses {
        crate::client::fluent_builders::GetRouteResponses::new(self.handle.clone())
    }
}
