// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteIntegrationResponse`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`api_id(impl Into<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::api_id) / [`set_api_id(Option<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::set_api_id):<br>required: **true**<br><p>The API identifier.</p><br>
    ///   - [`integration_id(impl Into<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::integration_id) / [`set_integration_id(Option<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::set_integration_id):<br>required: **true**<br><p>The integration ID.</p><br>
    ///   - [`integration_response_id(impl Into<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::integration_response_id) / [`set_integration_response_id(Option<String>)`](crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::set_integration_response_id):<br>required: **true**<br><p>The integration response ID.</p><br>
    /// - On success, responds with [`DeleteIntegrationResponseOutput`](crate::operation::delete_integration_response::DeleteIntegrationResponseOutput)
    /// - On failure, responds with [`SdkError<DeleteIntegrationResponseError>`](crate::operation::delete_integration_response::DeleteIntegrationResponseError)
    pub fn delete_integration_response(&self) -> crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder {
        crate::operation::delete_integration_response::builders::DeleteIntegrationResponseFluentBuilder::new(self.handle.clone())
    }
}
