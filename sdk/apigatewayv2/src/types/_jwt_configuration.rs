// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JwtConfiguration {
    /// <p>A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.</p>
    #[doc(hidden)]
    pub audience: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>
    /// {region}
    /// </replaceable>.amazonaws.com/<replaceable>
    /// {userPoolId}
    /// </replaceable> . Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
    #[doc(hidden)]
    pub issuer: std::option::Option<std::string::String>,
}
impl JwtConfiguration {
    /// <p>A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.</p>
    pub fn audience(&self) -> std::option::Option<&[std::string::String]> {
        self.audience.as_deref()
    }
    /// <p>The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>
    /// {region}
    /// </replaceable>.amazonaws.com/<replaceable>
    /// {userPoolId}
    /// </replaceable> . Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
    pub fn issuer(&self) -> std::option::Option<&str> {
        self.issuer.as_deref()
    }
}
impl JwtConfiguration {
    /// Creates a new builder-style object to manufacture [`JwtConfiguration`](crate::types::JwtConfiguration).
    pub fn builder() -> crate::types::builders::JwtConfigurationBuilder {
        crate::types::builders::JwtConfigurationBuilder::default()
    }
}

/// A builder for [`JwtConfiguration`](crate::types::JwtConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JwtConfigurationBuilder {
    pub(crate) audience: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) issuer: std::option::Option<std::string::String>,
}
impl JwtConfigurationBuilder {
    /// Appends an item to `audience`.
    ///
    /// To override the contents of this collection use [`set_audience`](Self::set_audience).
    ///
    /// <p>A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.</p>
    pub fn audience(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.audience.unwrap_or_default();
        v.push(input.into());
        self.audience = Some(v);
        self
    }
    /// <p>A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.</p>
    pub fn set_audience(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.audience = input;
        self
    }
    /// <p>The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>
    /// {region}
    /// </replaceable>.amazonaws.com/<replaceable>
    /// {userPoolId}
    /// </replaceable> . Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
    pub fn issuer(mut self, input: impl Into<std::string::String>) -> Self {
        self.issuer = Some(input.into());
        self
    }
    /// <p>The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>
    /// {region}
    /// </replaceable>.amazonaws.com/<replaceable>
    /// {userPoolId}
    /// </replaceable> . Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
    pub fn set_issuer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// Consumes the builder and constructs a [`JwtConfiguration`](crate::types::JwtConfiguration).
    pub fn build(self) -> crate::types::JwtConfiguration {
        crate::types::JwtConfiguration {
            audience: self.audience,
            issuer: self.issuer,
        }
    }
}
