// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a domain name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainName {
    /// <p>The API mapping selection expression.</p>
    #[doc(hidden)]
    pub api_mapping_selection_expression: std::option::Option<std::string::String>,
    /// <p>The name of the DomainName resource.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The domain name configurations.</p>
    #[doc(hidden)]
    pub domain_name_configurations:
        std::option::Option<std::vec::Vec<crate::types::DomainNameConfiguration>>,
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    #[doc(hidden)]
    pub mutual_tls_authentication: std::option::Option<crate::types::MutualTlsAuthentication>,
    /// <p>The collection of tags associated with a domain name.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DomainName {
    /// <p>The API mapping selection expression.</p>
    pub fn api_mapping_selection_expression(&self) -> std::option::Option<&str> {
        self.api_mapping_selection_expression.as_deref()
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name configurations.</p>
    pub fn domain_name_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::DomainNameConfiguration]> {
        self.domain_name_configurations.as_deref()
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(
        &self,
    ) -> std::option::Option<&crate::types::MutualTlsAuthentication> {
        self.mutual_tls_authentication.as_ref()
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl DomainName {
    /// Creates a new builder-style object to manufacture [`DomainName`](crate::types::DomainName).
    pub fn builder() -> crate::types::builders::DomainNameBuilder {
        crate::types::builders::DomainNameBuilder::default()
    }
}

/// A builder for [`DomainName`](crate::types::DomainName).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainNameBuilder {
    pub(crate) api_mapping_selection_expression: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) domain_name_configurations:
        std::option::Option<std::vec::Vec<crate::types::DomainNameConfiguration>>,
    pub(crate) mutual_tls_authentication:
        std::option::Option<crate::types::MutualTlsAuthentication>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DomainNameBuilder {
    /// <p>The API mapping selection expression.</p>
    pub fn api_mapping_selection_expression(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.api_mapping_selection_expression = Some(input.into());
        self
    }
    /// <p>The API mapping selection expression.</p>
    pub fn set_api_mapping_selection_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.api_mapping_selection_expression = input;
        self
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of the DomainName resource.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Appends an item to `domain_name_configurations`.
    ///
    /// To override the contents of this collection use [`set_domain_name_configurations`](Self::set_domain_name_configurations).
    ///
    /// <p>The domain name configurations.</p>
    pub fn domain_name_configurations(
        mut self,
        input: crate::types::DomainNameConfiguration,
    ) -> Self {
        let mut v = self.domain_name_configurations.unwrap_or_default();
        v.push(input);
        self.domain_name_configurations = Some(v);
        self
    }
    /// <p>The domain name configurations.</p>
    pub fn set_domain_name_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DomainNameConfiguration>>,
    ) -> Self {
        self.domain_name_configurations = input;
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn mutual_tls_authentication(
        mut self,
        input: crate::types::MutualTlsAuthentication,
    ) -> Self {
        self.mutual_tls_authentication = Some(input);
        self
    }
    /// <p>The mutual TLS authentication configuration for a custom domain name.</p>
    pub fn set_mutual_tls_authentication(
        mut self,
        input: std::option::Option<crate::types::MutualTlsAuthentication>,
    ) -> Self {
        self.mutual_tls_authentication = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The collection of tags associated with a domain name.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainName`](crate::types::DomainName).
    pub fn build(self) -> crate::types::DomainName {
        crate::types::DomainName {
            api_mapping_selection_expression: self.api_mapping_selection_expression,
            domain_name: self.domain_name,
            domain_name_configurations: self.domain_name_configurations,
            mutual_tls_authentication: self.mutual_tls_authentication,
            tags: self.tags,
        }
    }
}
