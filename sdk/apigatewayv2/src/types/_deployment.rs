// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Deployment {
    /// <p>Specifies whether a deployment was automatically released.</p>
    #[doc(hidden)]
    pub auto_deployed: bool,
    /// <p>The date and time when the Deployment resource was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifier for the deployment.</p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
    #[doc(hidden)]
    pub deployment_status: std::option::Option<crate::types::DeploymentStatus>,
    /// <p>May contain additional feedback on the status of an API deployment.</p>
    #[doc(hidden)]
    pub deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The description for the deployment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl Deployment {
    /// <p>Specifies whether a deployment was automatically released.</p>
    pub fn auto_deployed(&self) -> bool {
        self.auto_deployed
    }
    /// <p>The date and time when the Deployment resource was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The identifier for the deployment.</p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
    pub fn deployment_status(&self) -> std::option::Option<&crate::types::DeploymentStatus> {
        self.deployment_status.as_ref()
    }
    /// <p>May contain additional feedback on the status of an API deployment.</p>
    pub fn deployment_status_message(&self) -> std::option::Option<&str> {
        self.deployment_status_message.as_deref()
    }
    /// <p>The description for the deployment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl Deployment {
    /// Creates a new builder-style object to manufacture [`Deployment`](crate::types::Deployment).
    pub fn builder() -> crate::types::builders::DeploymentBuilder {
        crate::types::builders::DeploymentBuilder::default()
    }
}

/// A builder for [`Deployment`](crate::types::Deployment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeploymentBuilder {
    pub(crate) auto_deployed: std::option::Option<bool>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) deployment_status: std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) deployment_status_message: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl DeploymentBuilder {
    /// <p>Specifies whether a deployment was automatically released.</p>
    pub fn auto_deployed(mut self, input: bool) -> Self {
        self.auto_deployed = Some(input);
        self
    }
    /// <p>Specifies whether a deployment was automatically released.</p>
    pub fn set_auto_deployed(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_deployed = input;
        self
    }
    /// <p>The date and time when the Deployment resource was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date and time when the Deployment resource was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The identifier for the deployment.</p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p>The identifier for the deployment.</p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
    pub fn deployment_status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.deployment_status = Some(input);
        self
    }
    /// <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
    pub fn set_deployment_status(
        mut self,
        input: std::option::Option<crate::types::DeploymentStatus>,
    ) -> Self {
        self.deployment_status = input;
        self
    }
    /// <p>May contain additional feedback on the status of an API deployment.</p>
    pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_status_message = Some(input.into());
        self
    }
    /// <p>May contain additional feedback on the status of an API deployment.</p>
    pub fn set_deployment_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.deployment_status_message = input;
        self
    }
    /// <p>The description for the deployment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the deployment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`Deployment`](crate::types::Deployment).
    pub fn build(self) -> crate::types::Deployment {
        crate::types::Deployment {
            auto_deployed: self.auto_deployed.unwrap_or_default(),
            created_date: self.created_date,
            deployment_id: self.deployment_id,
            deployment_status: self.deployment_status,
            deployment_status_message: self.deployment_status_message,
            description: self.description,
        }
    }
}
