// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MutualTlsAuthenticationInput {
    /// <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// key-name
    /// </replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
    #[doc(hidden)]
    pub truststore_uri: std::option::Option<std::string::String>,
    /// <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
    #[doc(hidden)]
    pub truststore_version: std::option::Option<std::string::String>,
}
impl MutualTlsAuthenticationInput {
    /// <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// key-name
    /// </replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
    pub fn truststore_uri(&self) -> std::option::Option<&str> {
        self.truststore_uri.as_deref()
    }
    /// <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
    pub fn truststore_version(&self) -> std::option::Option<&str> {
        self.truststore_version.as_deref()
    }
}
impl MutualTlsAuthenticationInput {
    /// Creates a new builder-style object to manufacture [`MutualTlsAuthenticationInput`](crate::types::MutualTlsAuthenticationInput).
    pub fn builder() -> crate::types::builders::MutualTlsAuthenticationInputBuilder {
        crate::types::builders::MutualTlsAuthenticationInputBuilder::default()
    }
}

/// A builder for [`MutualTlsAuthenticationInput`](crate::types::MutualTlsAuthenticationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MutualTlsAuthenticationInputBuilder {
    pub(crate) truststore_uri: std::option::Option<std::string::String>,
    pub(crate) truststore_version: std::option::Option<std::string::String>,
}
impl MutualTlsAuthenticationInputBuilder {
    /// <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// key-name
    /// </replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
    pub fn truststore_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.truststore_uri = Some(input.into());
        self
    }
    /// <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// key-name
    /// </replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
    pub fn set_truststore_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.truststore_uri = input;
        self
    }
    /// <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
    pub fn truststore_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.truststore_version = Some(input.into());
        self
    }
    /// <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
    pub fn set_truststore_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.truststore_version = input;
        self
    }
    /// Consumes the builder and constructs a [`MutualTlsAuthenticationInput`](crate::types::MutualTlsAuthenticationInput).
    pub fn build(self) -> crate::types::MutualTlsAuthenticationInput {
        crate::types::MutualTlsAuthenticationInput {
            truststore_uri: self.truststore_uri,
            truststore_version: self.truststore_version,
        }
    }
}
