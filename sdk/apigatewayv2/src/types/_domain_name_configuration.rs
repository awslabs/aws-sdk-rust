// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The domain name configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainNameConfiguration {
    /// <p>A domain name for the API.</p>
    #[doc(hidden)]
    pub api_gateway_domain_name: std::option::Option<std::string::String>,
    /// <p>An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.</p>
    #[doc(hidden)]
    pub certificate_name: std::option::Option<std::string::String>,
    /// <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
    #[doc(hidden)]
    pub certificate_upload_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
    #[doc(hidden)]
    pub domain_name_status: std::option::Option<crate::types::DomainNameStatus>,
    /// <p>An optional text message containing detailed information about status of the domain name migration.</p>
    #[doc(hidden)]
    pub domain_name_status_message: std::option::Option<std::string::String>,
    /// <p>The endpoint type.</p>
    #[doc(hidden)]
    pub endpoint_type: std::option::Option<crate::types::EndpointType>,
    /// <p>The Amazon Route 53 Hosted Zone ID of the endpoint.</p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
    #[doc(hidden)]
    pub security_policy: std::option::Option<crate::types::SecurityPolicy>,
    /// <p>The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn</p>
    #[doc(hidden)]
    pub ownership_verification_certificate_arn: std::option::Option<std::string::String>,
}
impl DomainNameConfiguration {
    /// <p>A domain name for the API.</p>
    pub fn api_gateway_domain_name(&self) -> std::option::Option<&str> {
        self.api_gateway_domain_name.as_deref()
    }
    /// <p>An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.</p>
    pub fn certificate_name(&self) -> std::option::Option<&str> {
        self.certificate_name.as_deref()
    }
    /// <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
    pub fn certificate_upload_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.certificate_upload_date.as_ref()
    }
    /// <p>The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
    pub fn domain_name_status(&self) -> std::option::Option<&crate::types::DomainNameStatus> {
        self.domain_name_status.as_ref()
    }
    /// <p>An optional text message containing detailed information about status of the domain name migration.</p>
    pub fn domain_name_status_message(&self) -> std::option::Option<&str> {
        self.domain_name_status_message.as_deref()
    }
    /// <p>The endpoint type.</p>
    pub fn endpoint_type(&self) -> std::option::Option<&crate::types::EndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>The Amazon Route 53 Hosted Zone ID of the endpoint.</p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
    pub fn security_policy(&self) -> std::option::Option<&crate::types::SecurityPolicy> {
        self.security_policy.as_ref()
    }
    /// <p>The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn</p>
    pub fn ownership_verification_certificate_arn(&self) -> std::option::Option<&str> {
        self.ownership_verification_certificate_arn.as_deref()
    }
}
impl DomainNameConfiguration {
    /// Creates a new builder-style object to manufacture [`DomainNameConfiguration`](crate::types::DomainNameConfiguration).
    pub fn builder() -> crate::types::builders::DomainNameConfigurationBuilder {
        crate::types::builders::DomainNameConfigurationBuilder::default()
    }
}

/// A builder for [`DomainNameConfiguration`](crate::types::DomainNameConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainNameConfigurationBuilder {
    pub(crate) api_gateway_domain_name: std::option::Option<std::string::String>,
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_name: std::option::Option<std::string::String>,
    pub(crate) certificate_upload_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) domain_name_status: std::option::Option<crate::types::DomainNameStatus>,
    pub(crate) domain_name_status_message: std::option::Option<std::string::String>,
    pub(crate) endpoint_type: std::option::Option<crate::types::EndpointType>,
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) security_policy: std::option::Option<crate::types::SecurityPolicy>,
    pub(crate) ownership_verification_certificate_arn: std::option::Option<std::string::String>,
}
impl DomainNameConfigurationBuilder {
    /// <p>A domain name for the API.</p>
    pub fn api_gateway_domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_gateway_domain_name = Some(input.into());
        self
    }
    /// <p>A domain name for the API.</p>
    pub fn set_api_gateway_domain_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.api_gateway_domain_name = input;
        self
    }
    /// <p>An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.</p>
    pub fn certificate_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_name = Some(input.into());
        self
    }
    /// <p>The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.</p>
    pub fn set_certificate_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_name = input;
        self
    }
    /// <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
    pub fn certificate_upload_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.certificate_upload_date = Some(input);
        self
    }
    /// <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
    pub fn set_certificate_upload_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.certificate_upload_date = input;
        self
    }
    /// <p>The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
    pub fn domain_name_status(mut self, input: crate::types::DomainNameStatus) -> Self {
        self.domain_name_status = Some(input);
        self
    }
    /// <p>The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
    pub fn set_domain_name_status(
        mut self,
        input: std::option::Option<crate::types::DomainNameStatus>,
    ) -> Self {
        self.domain_name_status = input;
        self
    }
    /// <p>An optional text message containing detailed information about status of the domain name migration.</p>
    pub fn domain_name_status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name_status_message = Some(input.into());
        self
    }
    /// <p>An optional text message containing detailed information about status of the domain name migration.</p>
    pub fn set_domain_name_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.domain_name_status_message = input;
        self
    }
    /// <p>The endpoint type.</p>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.endpoint_type = Some(input);
        self
    }
    /// <p>The endpoint type.</p>
    pub fn set_endpoint_type(
        mut self,
        input: std::option::Option<crate::types::EndpointType>,
    ) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The Amazon Route 53 Hosted Zone ID of the endpoint.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>The Amazon Route 53 Hosted Zone ID of the endpoint.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
    pub fn security_policy(mut self, input: crate::types::SecurityPolicy) -> Self {
        self.security_policy = Some(input);
        self
    }
    /// <p>The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
    pub fn set_security_policy(
        mut self,
        input: std::option::Option<crate::types::SecurityPolicy>,
    ) -> Self {
        self.security_policy = input;
        self
    }
    /// <p>The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn</p>
    pub fn ownership_verification_certificate_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.ownership_verification_certificate_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn</p>
    pub fn set_ownership_verification_certificate_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ownership_verification_certificate_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainNameConfiguration`](crate::types::DomainNameConfiguration).
    pub fn build(self) -> crate::types::DomainNameConfiguration {
        crate::types::DomainNameConfiguration {
            api_gateway_domain_name: self.api_gateway_domain_name,
            certificate_arn: self.certificate_arn,
            certificate_name: self.certificate_name,
            certificate_upload_date: self.certificate_upload_date,
            domain_name_status: self.domain_name_status,
            domain_name_status_message: self.domain_name_status_message,
            endpoint_type: self.endpoint_type,
            hosted_zone_id: self.hosted_zone_id,
            security_policy: self.security_policy,
            ownership_verification_certificate_arn: self.ownership_verification_certificate_arn,
        }
    }
}
