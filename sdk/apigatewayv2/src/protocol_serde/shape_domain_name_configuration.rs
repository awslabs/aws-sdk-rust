// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_domain_name_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DomainNameConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.api_gateway_domain_name {
        object.key("apiGatewayDomainName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.certificate_arn {
        object.key("certificateArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.certificate_name {
        object.key("certificateName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.certificate_upload_date {
        object
            .key("certificateUploadDate")
            .date_time(var_4, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_5) = &input.domain_name_status {
        object.key("domainNameStatus").string(var_5.as_str());
    }
    if let Some(var_6) = &input.domain_name_status_message {
        object.key("domainNameStatusMessage").string(var_6.as_str());
    }
    if let Some(var_7) = &input.endpoint_type {
        object.key("endpointType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.hosted_zone_id {
        object.key("hostedZoneId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.security_policy {
        object.key("securityPolicy").string(var_9.as_str());
    }
    if let Some(var_10) = &input.ownership_verification_certificate_arn {
        object.key("ownershipVerificationCertificateArn").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_domain_name_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::DomainNameConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DomainNameConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "apiGatewayDomainName" => {
                            builder = builder.set_api_gateway_domain_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "certificateArn" => {
                            builder = builder.set_certificate_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "certificateName" => {
                            builder = builder.set_certificate_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "certificateUploadDate" => {
                            builder = builder.set_certificate_upload_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::DateTimeWithOffset,
                            )?);
                        }
                        "domainNameStatus" => {
                            builder = builder.set_domain_name_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DomainNameStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "domainNameStatusMessage" => {
                            builder = builder.set_domain_name_status_message(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "endpointType" => {
                            builder = builder.set_endpoint_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EndpointType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hostedZoneId" => {
                            builder = builder.set_hosted_zone_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "securityPolicy" => {
                            builder = builder.set_security_policy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SecurityPolicy::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ownershipVerificationCertificateArn" => {
                            builder = builder.set_ownership_verification_certificate_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
