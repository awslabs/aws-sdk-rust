// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_integration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_integration::CreateIntegrationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.connection_id {
        object.key("connectionId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.connection_type {
        object.key("connectionType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.content_handling_strategy {
        object.key("contentHandlingStrategy").string(var_3.as_str());
    }
    if let Some(var_4) = &input.credentials_arn {
        object.key("credentialsArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.integration_method {
        object.key("integrationMethod").string(var_6.as_str());
    }
    if let Some(var_7) = &input.integration_subtype {
        object.key("integrationSubtype").string(var_7.as_str());
    }
    if let Some(var_8) = &input.integration_type {
        object.key("integrationType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.integration_uri {
        object.key("integrationUri").string(var_9.as_str());
    }
    if let Some(var_10) = &input.passthrough_behavior {
        object.key("passthroughBehavior").string(var_10.as_str());
    }
    if let Some(var_11) = &input.payload_format_version {
        object.key("payloadFormatVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.request_parameters {
        #[allow(unused_mut)]
        let mut object_13 = object.key("requestParameters").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.request_templates {
        #[allow(unused_mut)]
        let mut object_17 = object.key("requestTemplates").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.response_parameters {
        #[allow(unused_mut)]
        let mut object_21 = object.key("responseParameters").start_object();
        for (key_22, value_23) in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_24 = object_21.key(key_22.as_str()).start_object();
                for (key_25, value_26) in value_23 {
                    {
                        object_24.key(key_25.as_str()).string(value_26.as_str());
                    }
                }
                object_24.finish();
            }
        }
        object_21.finish();
    }
    if let Some(var_27) = &input.template_selection_expression {
        object.key("templateSelectionExpression").string(var_27.as_str());
    }
    if let Some(var_28) = &input.timeout_in_millis {
        object.key("timeoutInMillis").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.tls_config {
        #[allow(unused_mut)]
        let mut object_30 = object.key("tlsConfig").start_object();
        crate::protocol_serde::shape_tls_config_input::ser_tls_config_input(&mut object_30, var_29)?;
        object_30.finish();
    }
    Ok(())
}
