// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_authorizer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_authorizer::UpdateAuthorizerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authorizer_credentials_arn {
        object.key("authorizerCredentialsArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authorizer_payload_format_version {
        object.key("authorizerPayloadFormatVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.authorizer_result_ttl_in_seconds {
        object.key("authorizerResultTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.authorizer_type {
        object.key("authorizerType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.authorizer_uri {
        object.key("authorizerUri").string(var_5.as_str());
    }
    if let Some(var_6) = &input.enable_simple_responses {
        object.key("enableSimpleResponses").boolean(*var_6);
    }
    if let Some(var_7) = &input.identity_source {
        let mut array_8 = object.key("identitySource").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.identity_validation_expression {
        object.key("identityValidationExpression").string(var_10.as_str());
    }
    if let Some(var_11) = &input.jwt_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("jwtConfiguration").start_object();
        crate::protocol_serde::shape_jwt_configuration::ser_jwt_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    Ok(())
}
