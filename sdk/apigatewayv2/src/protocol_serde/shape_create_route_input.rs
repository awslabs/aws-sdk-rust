// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_route_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_route::CreateRouteInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.api_key_required {
        object.key("apiKeyRequired").boolean(input.api_key_required);
    }
    if let Some(var_1) = &input.authorization_scopes {
        let mut array_2 = object.key("authorizationScopes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.authorization_type {
        object.key("authorizationType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.authorizer_id {
        object.key("authorizerId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.model_selection_expression {
        object
            .key("modelSelectionExpression")
            .string(var_6.as_str());
    }
    if let Some(var_7) = &input.operation_name {
        object.key("operationName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.request_models {
        #[allow(unused_mut)]
        let mut object_9 = object.key("requestModels").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.request_parameters {
        #[allow(unused_mut)]
        let mut object_13 = object.key("requestParameters").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_parameter_constraints::ser_parameter_constraints(
                    &mut object_16,
                    value_15,
                )?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.route_key {
        object.key("routeKey").string(var_17.as_str());
    }
    if let Some(var_18) = &input.route_response_selection_expression {
        object
            .key("routeResponseSelectionExpression")
            .string(var_18.as_str());
    }
    if let Some(var_19) = &input.target {
        object.key("target").string(var_19.as_str());
    }
    Ok(())
}
