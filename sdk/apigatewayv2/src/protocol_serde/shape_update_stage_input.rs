// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_stage_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_stage::UpdateStageInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_log_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accessLogSettings").start_object();
        crate::protocol_serde::shape_access_log_settings::ser_access_log_settings(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.auto_deploy {
        object.key("autoDeploy").boolean(*var_3);
    }
    if let Some(var_4) = &input.client_certificate_id {
        object.key("clientCertificateId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.default_route_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("defaultRouteSettings").start_object();
        crate::protocol_serde::shape_route_settings::ser_route_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.deployment_id {
        object.key("deploymentId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.route_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("routeSettings").start_object();
        for (key_11, value_12) in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_13 = object_10.key(key_11.as_str()).start_object();
                crate::protocol_serde::shape_route_settings::ser_route_settings(&mut object_13, value_12)?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.stage_variables {
        #[allow(unused_mut)]
        let mut object_15 = object.key("stageVariables").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
