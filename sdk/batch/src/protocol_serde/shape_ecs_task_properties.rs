// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ecs_task_properties(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EcsTaskProperties,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.containers {
        let mut array_2 = object.key("containers").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_task_container_properties::ser_task_container_properties(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ephemeralStorage").start_object();
        crate::protocol_serde::shape_ephemeral_storage::ser_ephemeral_storage(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.platform_version {
        object.key("platformVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.ipc_mode {
        object.key("ipcMode").string(var_9.as_str());
    }
    if let Some(var_10) = &input.task_role_arn {
        object.key("taskRoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.pid_mode {
        object.key("pidMode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.runtime_platform {
        #[allow(unused_mut)]
        let mut object_15 = object.key("runtimePlatform").start_object();
        crate::protocol_serde::shape_runtime_platform::ser_runtime_platform(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.volumes {
        let mut array_17 = object.key("volumes").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_volume::ser_volume(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.enable_execute_command {
        object.key("enableExecuteCommand").boolean(*var_20);
    }
    Ok(())
}

pub(crate) fn de_ecs_task_properties<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::EcsTaskProperties>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EcsTaskPropertiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "containers" => {
                            builder = builder.set_containers(
                                crate::protocol_serde::shape_list_task_container_properties::de_list_task_container_properties(tokens)?,
                            );
                        }
                        "ephemeralStorage" => {
                            builder = builder.set_ephemeral_storage(crate::protocol_serde::shape_ephemeral_storage::de_ephemeral_storage(tokens)?);
                        }
                        "executionRoleArn" => {
                            builder = builder.set_execution_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "platformVersion" => {
                            builder = builder.set_platform_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ipcMode" => {
                            builder = builder.set_ipc_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "taskRoleArn" => {
                            builder = builder.set_task_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "pidMode" => {
                            builder = builder.set_pid_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "networkConfiguration" => {
                            builder = builder
                                .set_network_configuration(crate::protocol_serde::shape_network_configuration::de_network_configuration(tokens)?);
                        }
                        "runtimePlatform" => {
                            builder = builder.set_runtime_platform(crate::protocol_serde::shape_runtime_platform::de_runtime_platform(tokens)?);
                        }
                        "volumes" => {
                            builder = builder.set_volumes(crate::protocol_serde::shape_volumes::de_volumes(tokens)?);
                        }
                        "enableExecuteCommand" => {
                            builder = builder.set_enable_execute_command(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::ecs_task_properties_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
