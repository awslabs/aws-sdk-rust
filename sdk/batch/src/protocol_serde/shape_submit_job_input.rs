// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_submit_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::submit_job::SubmitJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.array_properties {
        #[allow(unused_mut)]
        let mut object_2 = object.key("arrayProperties").start_object();
        crate::protocol_serde::shape_array_properties::ser_array_properties(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.container_overrides {
        #[allow(unused_mut)]
        let mut object_4 = object.key("containerOverrides").start_object();
        crate::protocol_serde::shape_container_overrides::ser_container_overrides(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.depends_on {
        let mut array_6 = object.key("dependsOn").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_job_dependency::ser_job_dependency(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.eks_properties_override {
        #[allow(unused_mut)]
        let mut object_10 = object.key("eksPropertiesOverride").start_object();
        crate::protocol_serde::shape_eks_properties_override::ser_eks_properties_override(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.job_definition {
        object.key("jobDefinition").string(var_11.as_str());
    }
    if let Some(var_12) = &input.job_name {
        object.key("jobName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.job_queue {
        object.key("jobQueue").string(var_13.as_str());
    }
    if let Some(var_14) = &input.node_overrides {
        #[allow(unused_mut)]
        let mut object_15 = object.key("nodeOverrides").start_object();
        crate::protocol_serde::shape_node_overrides::ser_node_overrides(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_17 = object.key("parameters").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.propagate_tags {
        object.key("propagateTags").boolean(*var_20);
    }
    if let Some(var_21) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_22 = object.key("retryStrategy").start_object();
        crate::protocol_serde::shape_retry_strategy::ser_retry_strategy(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.scheduling_priority_override {
        object.key("schedulingPriorityOverride").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.share_identifier {
        object.key("shareIdentifier").string(var_24.as_str());
    }
    if let Some(var_25) = &input.tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.timeout {
        #[allow(unused_mut)]
        let mut object_30 = object.key("timeout").start_object();
        crate::protocol_serde::shape_job_timeout::ser_job_timeout(&mut object_30, var_29)?;
        object_30.finish();
    }
    Ok(())
}
