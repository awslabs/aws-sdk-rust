// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_delete_scheduling_policy_input(
    input: &crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_delete_scheduling_policy_input::ser_delete_scheduling_policy_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_scheduling_policy_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyOutput,
    crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code =
        match generic.code() {
            Some(code) => code,
            None => return Err(
                crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::unhandled(
                    generic,
                ),
            ),
        };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientException" => {
            crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::ClientException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::types::error::builders::ClientExceptionBuilder::default();
                        let _ = response;
                        output = crate::protocol_serde::shape_client_exception::de_client_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        "ServerException" => {
            crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::ServerException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::types::error::builders::ServerExceptionBuilder::default();
                        let _ = response;
                        output = crate::protocol_serde::shape_server_exception::de_server_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        _ => crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError::generic(
            generic,
        ),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_scheduling_policy_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyOutput,
    crate::operation::delete_scheduling_policy::DeleteSchedulingPolicyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_scheduling_policy::builders::DeleteSchedulingPolicyOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
