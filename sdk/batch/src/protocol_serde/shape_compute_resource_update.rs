// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_compute_resource_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ComputeResourceUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.minv_cpus {
        object.key("minvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.maxv_cpus {
        object.key("maxvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.desiredv_cpus {
        object.key("desiredvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.subnets {
        let mut array_5 = object.key("subnets").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.security_group_ids {
        let mut array_8 = object.key("securityGroupIds").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.allocation_strategy {
        object.key("allocationStrategy").string(var_10.as_str());
    }
    if let Some(var_11) = &input.instance_types {
        let mut array_12 = object.key("instanceTypes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.ec2_key_pair {
        object.key("ec2KeyPair").string(var_14.as_str());
    }
    if let Some(var_15) = &input.instance_role {
        object.key("instanceRole").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.placement_group {
        object.key("placementGroup").string(var_20.as_str());
    }
    if let Some(var_21) = &input.bid_percentage {
        object.key("bidPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.launch_template {
        #[allow(unused_mut)]
        let mut object_23 = object.key("launchTemplate").start_object();
        crate::protocol_serde::shape_launch_template_specification::ser_launch_template_specification(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.ec2_configuration {
        let mut array_25 = object.key("ec2Configuration").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_ec2_configuration::ser_ec2_configuration(
                    &mut object_27,
                    item_26,
                )?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.update_to_latest_image_version {
        object.key("updateToLatestImageVersion").boolean(*var_28);
    }
    if let Some(var_29) = &input.r#type {
        object.key("type").string(var_29.as_str());
    }
    if let Some(var_30) = &input.image_id {
        object.key("imageId").string(var_30.as_str());
    }
    Ok(())
}
