// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_node_range_property(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NodeRangeProperty,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.target_nodes {
        object.key("targetNodes").string(var_1.as_str());
    }
    if let Some(var_2) = &input.container {
        #[allow(unused_mut)]
        let mut object_3 = object.key("container").start_object();
        crate::protocol_serde::shape_container_properties::ser_container_properties(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.instance_types {
        let mut array_5 = object.key("instanceTypes").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.ecs_properties {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ecsProperties").start_object();
        crate::protocol_serde::shape_ecs_properties::ser_ecs_properties(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.eks_properties {
        #[allow(unused_mut)]
        let mut object_10 = object.key("eksProperties").start_object();
        crate::protocol_serde::shape_eks_properties::ser_eks_properties(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.consumable_resource_properties {
        #[allow(unused_mut)]
        let mut object_12 = object.key("consumableResourceProperties").start_object();
        crate::protocol_serde::shape_consumable_resource_properties::ser_consumable_resource_properties(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_node_range_property<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::NodeRangeProperty>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::NodeRangePropertyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "targetNodes" => {
                            builder = builder.set_target_nodes(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "container" => {
                            builder = builder.set_container(crate::protocol_serde::shape_container_properties::de_container_properties(tokens)?);
                        }
                        "instanceTypes" => {
                            builder = builder.set_instance_types(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "ecsProperties" => {
                            builder = builder.set_ecs_properties(crate::protocol_serde::shape_ecs_properties::de_ecs_properties(tokens)?);
                        }
                        "eksProperties" => {
                            builder = builder.set_eks_properties(crate::protocol_serde::shape_eks_properties::de_eks_properties(tokens)?);
                        }
                        "consumableResourceProperties" => {
                            builder = builder.set_consumable_resource_properties(
                                crate::protocol_serde::shape_consumable_resource_properties::de_consumable_resource_properties(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::node_range_property_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
