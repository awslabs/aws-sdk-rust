// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_task_container_properties(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TaskContainerProperties,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.command {
        let mut array_2 = object.key("command").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.depends_on {
        let mut array_5 = object.key("dependsOn").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_task_container_dependency::ser_task_container_dependency(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.environment {
        let mut array_9 = object.key("environment").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_key_value_pair::ser_key_value_pair(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.essential {
        object.key("essential").boolean(*var_12);
    }
    if let Some(var_13) = &input.firelens_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("firelensConfiguration").start_object();
        crate::protocol_serde::shape_firelens_configuration::ser_firelens_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.image {
        object.key("image").string(var_15.as_str());
    }
    if let Some(var_16) = &input.linux_parameters {
        #[allow(unused_mut)]
        let mut object_17 = object.key("linuxParameters").start_object();
        crate::protocol_serde::shape_linux_parameters::ser_linux_parameters(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.mount_points {
        let mut array_21 = object.key("mountPoints").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_mount_point::ser_mount_point(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.name {
        object.key("name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.privileged {
        object.key("privileged").boolean(*var_25);
    }
    if let Some(var_26) = &input.readonly_root_filesystem {
        object.key("readonlyRootFilesystem").boolean(*var_26);
    }
    if let Some(var_27) = &input.repository_credentials {
        #[allow(unused_mut)]
        let mut object_28 = object.key("repositoryCredentials").start_object();
        crate::protocol_serde::shape_repository_credentials::ser_repository_credentials(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.resource_requirements {
        let mut array_30 = object.key("resourceRequirements").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_resource_requirement::ser_resource_requirement(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.secrets {
        let mut array_34 = object.key("secrets").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                crate::protocol_serde::shape_secret::ser_secret(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.ulimits {
        let mut array_38 = object.key("ulimits").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_ulimit::ser_ulimit(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.user {
        object.key("user").string(var_41.as_str());
    }
    Ok(())
}

pub(crate) fn de_task_container_properties<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TaskContainerProperties>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TaskContainerPropertiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "command" => {
                            builder = builder.set_command(crate::protocol_serde::shape_string_list::de_string_list(tokens)?);
                        }
                        "dependsOn" => {
                            builder = builder.set_depends_on(
                                crate::protocol_serde::shape_task_container_dependency_list::de_task_container_dependency_list(tokens)?,
                            );
                        }
                        "environment" => {
                            builder = builder.set_environment(crate::protocol_serde::shape_environment_variables::de_environment_variables(tokens)?);
                        }
                        "essential" => {
                            builder = builder.set_essential(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "firelensConfiguration" => {
                            builder = builder
                                .set_firelens_configuration(crate::protocol_serde::shape_firelens_configuration::de_firelens_configuration(tokens)?);
                        }
                        "image" => {
                            builder = builder.set_image(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "linuxParameters" => {
                            builder = builder.set_linux_parameters(crate::protocol_serde::shape_linux_parameters::de_linux_parameters(tokens)?);
                        }
                        "logConfiguration" => {
                            builder = builder.set_log_configuration(crate::protocol_serde::shape_log_configuration::de_log_configuration(tokens)?);
                        }
                        "mountPoints" => {
                            builder = builder.set_mount_points(crate::protocol_serde::shape_mount_points::de_mount_points(tokens)?);
                        }
                        "name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "privileged" => {
                            builder = builder.set_privileged(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "readonlyRootFilesystem" => {
                            builder =
                                builder.set_readonly_root_filesystem(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "repositoryCredentials" => {
                            builder = builder
                                .set_repository_credentials(crate::protocol_serde::shape_repository_credentials::de_repository_credentials(tokens)?);
                        }
                        "resourceRequirements" => {
                            builder = builder
                                .set_resource_requirements(crate::protocol_serde::shape_resource_requirements::de_resource_requirements(tokens)?);
                        }
                        "secrets" => {
                            builder = builder.set_secrets(crate::protocol_serde::shape_secret_list::de_secret_list(tokens)?);
                        }
                        "ulimits" => {
                            builder = builder.set_ulimits(crate::protocol_serde::shape_ulimits::de_ulimits(tokens)?);
                        }
                        "user" => {
                            builder = builder.set_user(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::task_container_properties_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
